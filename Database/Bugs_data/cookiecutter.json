{
    "project": "cookiecutter",
    "bugs": [
        {
            "id": 1,
            "source_code": "\tdef generate_context(\n\t\tcontext_file='cookiecutter.json', default_context=None, extra_context=None\n\t):\n\t\t\"\"\"Generate the context for a Cookiecutter project template.\n\n\t\tLoads the JSON file as a Python object, with key being the JSON filename.\n\n\t\t:param context_file: JSON file containing key/value pairs for populating\n\t\t\tthe cookiecutter's variables.\n\t\t:param default_context: Dictionary containing config to take into account.\n\t\t:param extra_context: Dictionary containing configuration overrides\n\t\t\"\"\"\n\t\tcontext = OrderedDict([])\n\n\t\ttry:\n\t\t\twith open(context_file) as file_handle:\n\t\t\t\tobj = json.load(file_handle, object_pairs_hook=OrderedDict)\n\t\texcept ValueError as e:\n\t\t\t# JSON decoding error.  Let's throw a new exception that is more\n\t\t\t# friendly for the developer or user.\n\t\t\tfull_fpath = os.path.abspath(context_file)\n\t\t\tjson_exc_message = str(e)\n\t\t\tour_exc_message = (\n\t\t\t\t'JSON decoding error while loading \"{0}\".  Decoding'\n\t\t\t\t' error details: \"{1}\"'.format(full_fpath, json_exc_message)\n\t\t\t)\n\t\t\traise ContextDecodingException(our_exc_message)\n\n\t\t# Add the Python object to the context dictionary\n\t\tfile_name = os.path.split(context_file)[1]\n\t\tfile_stem = file_name.split('.')[0]\n\t\tcontext[file_stem] = obj\n\n\t\t# Overwrite context variable defaults with the default context from the\n\t\t# user's global config, if available\n\t\tif default_context:\n\t\t\tapply_overwrites_to_context(obj, default_context)\n\t\tif extra_context:\n\t\t\tapply_overwrites_to_context(obj, extra_context)\n\n\t\tlogger.debug('Context generated is %s', context)\n\t\treturn context",
            "class_definition": null,
            "variable_definitions": null,
            "error_message": null,
            "stack_trace": null,
            "test_code": null,
            "raised_issue_description": "When using cookiecutter on the cookiecutter I am working on (https://github.com/agateau/cookiecutter-qt-app) and using the default values except for selecting the MIT license, the author name appeared wrongly encoded both in the prompt default value and in the generated LICENSE file. Explicitly setting the encoding to utf-8 when reading the context file fixes this."
        },
        {
            "id": 2,
            "source_code": "\tdef find_hook(hook_name, hooks_dir='hooks'):\n\t\t\"\"\"Return a dict of all hook scripts provided.\n\n\t\tMust be called with the project template as the current working directory.\n\t\tDict's key will be the hook/script's name, without extension, while values\n\t\twill be the absolute path to the script. Missing scripts will not be\n\t\tincluded in the returned dict.\n\n\t\t:param hook_name: The hook to find\n\t\t:param hooks_dir: The hook directory in the template\n\t\t:return: The absolute path to the hook script or None\n\t\t\"\"\"\n\t\tlogger.debug('hooks_dir is %s', os.path.abspath(hooks_dir))\n\n\t\tif not os.path.isdir(hooks_dir):\n\t\t\tlogger.debug('No hooks/dir in template_dir')\n\t\t\treturn None\n\n\t\tscripts = []\n\t\tfor hook_file in os.listdir(hooks_dir):\n\t\t\tif valid_hook(hook_file, hook_name):\n\t\t\t\treturn os.path.abspath(os.path.join(hooks_dir, hook_file))\n\n\t\treturn None",
            "class_definition": null,
            "variable_definitions": null,
            "error_message": null,
            "stack_trace": null,
            "test_code": null,
            "raised_issue_description": "Generated projects can use multiple type hooks at same time"
        },
        {
            "id": 3,
            "source_code": "\tdef read_user_choice(var_name, options):\n\t\t\"\"\"Prompt the user to choose from several options for the given variable.\n\n\t\tThe first item will be returned if no input happens.\n\n\t\t:param str var_name: Variable as specified in the context\n\t\t:param list options: Sequence of options that are available to select from\n\t\t:return: Exactly one item of ``options`` that has been chosen by the user\n\t\t\"\"\"\n\t\t# Please see http://click.pocoo.org/4/api/#click.prompt\n\t\tif not isinstance(options, list):\n\t\t\traise TypeError\n\n\t\tif not options:\n\t\t\traise ValueError\n\n\t\tchoice_map = OrderedDict(\n\t\t\t(u'{}'.format(i), value) for i, value in enumerate(options, 1)\n\t\t)\n\t\tchoices = choice_map.keys()\n\t\tdefault = u'1'\n\n\t\tchoice_lines = [u'{} - {}'.format(*c) for c in choice_map.items()]\n\t\tprompt = u'\n'.join((\n\t\t\tu'Select {}:'.format(var_name),\n\t\t\tu'\n'.join(choice_lines),\n\t\t\tu'Choose from {}'.format(u', '.join(choices))\n\t\t))\n\n\t\tuser_choice = click.prompt(\n\t\t\tprompt, type=click.Choice(choices), default=default\n\t\t)\n\t\treturn choice_map[user_choice]",
            "class_definition": null,
            "variable_definitions": null,
            "error_message": null,
            "stack_trace": null,
            "test_code": null,
            "raised_issue_description": "Fix typos"
        }
    ]
}