{
    "project": "httpie",
    "bugs": [
        {
            "id": 2,
            "source_code": "\tdef get_response(args, config_dir):\n\t\t\"\"\"Send the request and return a `request.Response`.\"\"\"\n\n\t\trequests_session = get_requests_session()\n\n\t\tif not args.session and not args.session_read_only:\n\t\t\tkwargs = get_requests_kwargs(args)\n\t\t\tif args.debug:\n\t\t\t\tdump_request(kwargs)\n\t\t\tresponse = requests_session.request(**kwargs)\n\t\telse:\n\t\t\tresponse = sessions.get_response(\n\t\t\t\trequests_session=requests_session,\n\t\t\t\targs=args,\n\t\t\t\tconfig_dir=config_dir,\n\t\t\t\tsession_name=args.session or args.session_read_only,\n\t\t\t\tread_only=bool(args.session_read_only),\n\t\t\t)\n\n\t\treturn response",
            "class_definition": "\tclass Session(SessionRedirectMixin):\n\t\t\"\"\"A Requests session.\n\n\t\tProvides cookie persistence, connection-pooling, and configuration.\n\n\t\tBasic Usage::\n\n\t\t>>> import requests\n\t\t>>> s = requests.Session()\n\t\t>>> s.get('https://httpbin.org/get')\n\t\t<Response [200]>\n\n\t\tOr as a context manager::\n\n\t\t>>> with requests.Session() as s:\n\t\t...\t s.get('https://httpbin.org/get')\n\t\t<Response [200]>\n\t\t\"\"\"\n\n\t\t__attrs__ = [\n\t\t\t\"headers\",\n\t\t\t\"cookies\",\n\t\t\t\"auth\",\n\t\t\t\"proxies\",\n\t\t\t\"hooks\",\n\t\t\t\"params\",\n\t\t\t\"verify\",\n\t\t\t\"cert\",\n\t\t\t\"adapters\",\n\t\t\t\"stream\",\n\t\t\t\"trust_env\",\n\t\t\t\"max_redirects\",\n\t\t]",
            "variable_definitions": null,
            "error_message": "=========================================================================================== test session starts ============================================================================================\nplatform darwin -- Python 3.7.16, pytest-3.2.1, py-1.11.0, pluggy-0.4.0\nrootdir: /Users/nikhilparasaram/Work/PyRepair/benchmarks/BugsInPy_REPOS/httpie:2, inifile: pytest.ini\nplugins: timeout-1.2.1, httpbin-2.0.0\ntimeout: 10.0s method: signal\ncollected 1 item\n\ntests/test_redirects.py F\n\n================================================================================================= FAILURES =================================================================================================\n_____________________________________________________________________________________ TestRedirects.test_max_redirects _____________________________________________________________________________________\nTraceback (most recent call last):\n  File \"/Users/nikhilparasaram/Work/PyRepair/benchmarks/BugsInPy_REPOS/httpie:2/tests/test_redirects.py\", line 22, in test_max_redirects\n    assert r.exit_status == ExitStatus.ERROR_TOO_MANY_REDIRECTS\nAssertionError: assert 0 == 6\n +  where 0 = 'HTTP/1.1 200 OK\r\nAccess-Control-Allow-Credentials: true\r\nAccess-Control-Allow-Origin: *\r\nConnection: Close\r\nC...  \"User-Agent\": \"HTTPie/1.0.0-dev\"\n    },\n    \"origin\": \"127.0.0.1\",\n    \"url\": \"http://127.0.0.1:50270/get\"\n}\n\n'.exit_status\n +  and   6 = ExitStatus.ERROR_TOO_MANY_REDIRECTS\n------------------------------------------------------------------------------------------- Captured stderr call -------------------------------------------------------------------------------------------\n127.0.0.1 - - [17/Aug/2023 19:05:51] \"GET /redirect/3 HTTP/1.1\" 302 227\n127.0.0.1 - - [17/Aug/2023 19:05:51] \"GET /relative-redirect/2 HTTP/1.1\" 302 0\n127.0.0.1 - - [17/Aug/2023 19:05:51] \"GET /relative-redirect/1 HTTP/1.1\" 302 0\n127.0.0.1 - - [17/Aug/2023 19:05:51] \"GET /get HTTP/1.1\" 200 266\n========================================================================================= 1 failed in 0.68 seconds =========================================================================================",
            "stack_trace": null,
            "test_code": "\tdef test_max_redirects(self, httpbin):\n\t\tr = http('--max-redirects=2', '--follow', httpbin.url + '/redirect/3',\n\t\t\t\t error_exit_ok=True)\n\t\tassert r.exit_status == ExitStatus.ERROR_TOO_MANY_REDIRECTS",
            "raised_issue_description": "I think we should have an 'option' to set max redirect"
        },
        {
            "id": 3,
            "source_code": "\tdef update_headers(self, request_headers):\n\t\t\"\"\"\n\t\tUpdate the session headers with the request ones while ignoring\n\t\tcertain name prefixes.\n\n\t\t:type request_headers: dict\n\n\t\t\"\"\"\n\t\tfor name, value in request_headers.items():\n\t\t\tvalue = value.decode('utf8')\n\t\t\tif name == 'User-Agent' and value.startswith('HTTPie/'):\n\t\t\t\tcontinue\n\n\t\t\tfor prefix in SESSION_IGNORED_HEADER_PREFIXES:\n\t\t\t\tif name.lower().startswith(prefix.lower()):\n\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\tself['headers'][name] = value",
            "class_definition": null,
            "variable_definitions": null,
            "error_message": "=========================================================================================== test session starts ============================================================================================\nplatform darwin -- Python 3.7.16, pytest-3.2.1, py-1.11.0, pluggy-0.4.0\nrootdir: /Users/nikhilparasaram/Work/PyRepair/benchmarks/BugsInPy_REPOS/httpie:3, inifile: pytest.ini\nplugins: timeout-1.2.1, httpbin-2.0.0\ntimeout: 10.0s method: signal\ncollected 1 item\n\ntests/test_sessions.py F\n\n================================================================================================= FAILURES =================================================================================================\n___________________________________________________________________________________ TestSession.test_download_in_session ___________________________________________________________________________________\nTraceback (most recent call last):\n  File \"/Users/nikhilparasaram/Work/PyRepair/benchmarks/BugsInPy_REPOS/httpie:3/tests/test_sessions.py\", line 186, in test_download_in_session\n    httpbin.url + '/get', env=self.env()\n  File \"/Users/nikhilparasaram/Work/PyRepair/benchmarks/BugsInPy_REPOS/httpie:3/tests/utils.py\", line 136, in http\n    exit_status = main(args=args, **kwargs)\n  File \"/Users/nikhilparasaram/Work/PyRepair/benchmarks/BugsInPy_REPOS/httpie:3/httpie/core.py\", line 115, in main\n    response = get_response(args, config_dir=env.config.directory)\n  File \"/Users/nikhilparasaram/Work/PyRepair/benchmarks/BugsInPy_REPOS/httpie:3/httpie/client.py\", line 55, in get_response\n    read_only=bool(args.session_read_only),\n  File \"/Users/nikhilparasaram/Work/PyRepair/benchmarks/BugsInPy_REPOS/httpie:3/httpie/sessions.py\", line 52, in get_response\n    session.update_headers(kwargs['headers'])\n  File \"/Users/nikhilparasaram/Work/PyRepair/benchmarks/BugsInPy_REPOS/httpie:3/httpie/sessions.py\", line 104, in update_headers\n    value = value.decode('utf8')\nAttributeError: 'NoneType' object has no attribute 'decode'\n========================================================================================= 1 failed in 0.63 seconds =========================================================================================\nError: Command '['venv/bin/python3.7', '-m', 'pytest', 'tests/test_sessions.py::TestSession::test_download_in_session', '--timeout=10']' returned non-zero exit status 1.",
            "stack_trace": null,
            "test_code": "\tdef test_download_in_session(self, tmp_path, httpbin):\n\t\t# https://github.com/httpie/cli/issues/412\n\t\tself.start_session(httpbin)\n\t\tcwd = os.getcwd()\n\t\tos.chdir(tmp_path)\n\t\ttry:\n\t\t\thttp('--session=test', '--download',\n\t\t\t\t httpbin.url + '/get', env=self.env())\n\t\tfinally:\n\t\t\tos.chdir(cwd)",
            "raised_issue_description": "AttributeError: 'NoneType' object has no attribute 'decode' on --download"
        },
        {
            "id": 4,
            "source_code": "\tdef headers(self):\n\t\turl = urlsplit(self._orig.url)\n\n\t\trequest_line = '{method} {path}{query} HTTP/1.1'.format(\n\t\t\tmethod=self._orig.method,\n\t\t\tpath=url.path or '/',\n\t\t\tquery='?' + url.query if url.query else ''\n\t\t)\n\n\t\theaders = dict(self._orig.headers)\n\t\tif 'Host' not in headers:\n\t\t\theaders['Host'] = url.netloc.split('@')[-1]\n\n\t\theaders = ['%s: %s' % (name, value)\n\t\t\t\t   for name, value in headers.items()]\n\n\t\theaders.insert(0, request_line)\n\t\theaders = '\r\n'.join(headers).strip()\n\n\t\tif isinstance(headers, bytes):\n\t\t\t# Python < 3\n\t\t\theaders = headers.decode('utf8')\n\t\treturn headers",
            "class_definition": null,
            "variable_definitions": null,
            "error_message": "================================================================================================= FAILURES =================================================================================================\n________________________________________________________________________________________ test_Host_header_overwrite ________________________________________________________________________________________\n\n    def test_Host_header_overwrite():\n        \"\"\"\n        https://github.com/jakubroztocil/httpie/issues/235\n\n        \"\"\"\n        host = 'httpbin.org'\n        url = 'http://{httpbin_ip}/get'.format(\n            httpbin_ip=socket.gethostbyname(host))\n        r = http('--print=hH', url, 'host:{}'.format(host))\n        assert HTTP_OK in r\n>       assert r.lower().count('host:') == 1\nE       assert 2 == 1\nE        +  where 2 = <built-in method count of str object at 0x104056a50>('host:')\nE        +    where <built-in method count of str object at 0x104056a50> = \"get /get http/1.1\r\naccept: */*\r\naccept-encoding: gzip, deflate, compress\r\nhost: 3.225.120.215\r\nuser-agent: b'...ength: 311\r\ncontent-type: application/json\r\ndate: thu, 17 aug 2023 18:18:47 gmt\r\nserver: gunicorn/19.9.0\r\n\r\n\".count\nE        +      where \"get /get http/1.1\r\naccept: */*\r\naccept-encoding: gzip, deflate, compress\r\nhost: 3.225.120.215\r\nuser-agent: b'...ength: 311\r\ncontent-type: application/json\r\ndate: thu, 17 aug 2023 18:18:47 gmt\r\nserver: gunicorn/19.9.0\r\n\r\n\" = <built-in method lower of StrCLIResponse object at 0x103f36ed0>()\nE        +        where <built-in method lower of StrCLIResponse object at 0x103f36ed0> = \"GET /get HTTP/1.1\r\nAccept: */*\r\nAccept-Encoding: gzip, deflate, compress\r\nHost: 3.225.120.215\r\nUser-Agent: b'...ength: 311\r\nContent-Type: application/json\r\nDate: Thu, 17 Aug 2023 18:18:47 GMT\r\nServer: gunicorn/19.9.0\r\n\r\n\".lower\n\ntests/test_regressions.py:17: AssertionError\n============================================================================================= warnings summary =============================================================================================",
            "stack_trace": null,
            "test_code": "\tdef test_Host_header_overwrite():\n\t\t\"\"\"\n\t\thttps://github.com/jakubroztocil/httpie/issues/235\n\t\t\"\"\"\n\t\thost = 'httpbin.org'\n\t\turl = 'http://{httpbin_ip}/get'.format(\n\t\t\thttpbin_ip=socket.gethostbyname(host))\n\t\tr = http('--print=hH', url, 'host:{}'.format(host))\n\t\tassert HTTP_OK in r\n\t\tassert r.lower().count('host:') == 1",
            "raised_issue_description": "need specify custom Host"
        }
    ]
}