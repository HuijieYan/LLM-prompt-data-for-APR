{
    "matplotlib": [
        {
            "bugID": 9,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 949,
            "file_name": "lib/matplotlib/projections/polar.py",
            "replace_code": "def draw(self, renderer, *args, **kwargs):\n\n    thetamin, thetamax = np.rad2deg(self.viewLim.intervalx)\n    if thetamin > thetamax:\n        thetamin, thetamax = thetamax, thetamin\n    rmin, rmax = (self.yaxis.get_view_interval()[0] - self.get_rorigin()) * self.get_rsign()\n    if isinstance(self.patch, mpatches.Wedge):\n        # Backwards-compatibility: Any subclassed Axes might override the\n        # patch to not be the Wedge that PolarAxes uses.\n        center = (0.5, 0.5)\n        self.transWedge.transform_point(center, self.transAxes)\n        self.patch.set_theta1(thetamin)\n        self.patch.set_theta2(thetamax)\n    \n        edge = (1, 0)\n        self.transWedge.transform_point(edge, self.transAxes)\n        radius = np.sqrt((edge[0] - center[0]) ** 2 + (edge[1] - center[1]) ** 2)\n        width = min(radius * (rmax - rmin) / rmax, radius)\n        self.patch.set_radius(radius)\n        self.patch.set_width(width)\n        inner_width = radius - width\n        inner = self.spines.get('inner', None)\n        if inner:\n            inner.set_visible(inner_width != 0.0)\n    \n    visible = not _is_full_circle_deg(thetamin, thetamax)\n    # For backwards compatibility, any subclassed Axes might override the\n    # spines to not include start/end that PolarAxes uses.\n    start = self.spines.get('start', None)\n    end = self.spines.get('end', None)\n    if start:\n        start.set_visible(visible)\n    if end:\n        end.set_visible(visible)\n    if visible:\n        yaxis_text_transform = self._yaxis_transform\n    else:\n        yaxis_text_transform = self._r_label_position + self.transData\n    if self._yaxis_text_transform != yaxis_text_transform:\n        self._yaxis_text_transform.set(yaxis_text_transform)\n        self.yaxis.reset_ticks()\n        self.yaxis.set_clip_path(self.patch)\n    \n    Axes.draw(self, renderer, *args, **kwargs)"
        }
    ]
}