{
    "matplotlib": [
        {
            "bugID": 22,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 6338,
            "file_name": "lib/matplotlib/axes/_axes.py",
            "replace_code": "def hist(self, x, bins=None, range=None, density=False, weights=None,\n             cumulative=False, bottom=None, histtype='bar', align='mid',\n             orientation='vertical', rwidth=None, log=False,\n             color=None, label=None, stacked=False, **kwargs):\n    \"\"\"\n    Plot a histogram.\n\n    Compute and draw the histogram of *x*.  The return value is a tuple\n    (*n*, *bins*, *patches*) or ([*n0*, *n1*, ...], *bins*, [*patches0*,\n    *patches1*,...]) if the input contains multiple data.  See the\n    documentation of the *weights* parameter to draw a histogram of\n    already-binned data.\n\n    Multiple data can be provided via *x* as a list of datasets\n    of potentially different length ([*x0*, *x1*, ...]), or as\n    a 2-D ndarray in which each column is a dataset.  Note that\n    the ndarray form is transposed relative to the list form.\n\n    Masked arrays are not supported.\n\n    The *bins*, *range*, *weights*, and *density* parameters behave as in\n    `numpy.histogram`.\n\n    \"\"\"\n    # Avoid shadowing the builtin.\n    bin_range = range\n    from builtins import range\n\n    if np.isscalar(x):\n        x = [x]\n\n    if bins is None:\n        bins = rcParams['hist.bins']\n\n    # Validate string inputs here to avoid cluttering subsequent code.\n    cbook._check_in_list(['bar', 'barstacked', 'step', 'stepfilled'],\n                         histtype=histtype)\n    cbook._check_in_list(['left', 'mid', 'right'], align=align)\n    cbook._check_in_list(['horizontal', 'vertical'],\n                         orientation=orientation)\n\n    if histtype == 'barstacked' and not stacked:\n        stacked = True\n\n    # basic input validation\n    input_empty = np.size(x) == 0\n    # Massage 'x' for processing.\n    x = cbook._reshape_2D(x, 'x')\n    nx = len(x)  # number of datasets\n\n    # Process unit information\n    # Unit conversion is done individually on each dataset\n    self._process_unit_info(xdata=x[0], kwargs=kwargs)\n    x = [self.convert_xunits(xi) for xi in x]\n\n    if bin_range is not None:\n        bin_range = self.convert_xunits(bin_range)\n\n    # We need to do to 'weights' what was done to 'x'\n    if weights is not None:\n        w = cbook._reshape_2D(weights, 'weights')\n    else:\n        w = [None] * nx\n\n    if len(w) != nx:\n        raise ValueError('weights should have the same shape as x')\n\n    for xi, wi in zip(x, w):\n        if wi is not None and len(wi) != len(xi):\n            raise ValueError(\n                'weights should have the same shape as x')\n\n    color = np.broadcast_to(color, (nx,))\n\n    hist_kwargs = dict()\n\n    # if the bin_range is not given, compute without nan numpy\n    # does not do this for us when guessing the range (but will\n    # happily ignore nans when computing the histogram).\n    if bin_range is None:\n        x_dtype = x[0].dtype\n        _max = cbook.dates.date2num(max(x[0])) if x_dtype.type is np.datetime64 else max(x[0])\n        _min = cbook.dates.date2num(min(x[0])) if x_dtype.type is np.datetime64 else min(x[0])\n        for xi in x:\n            xx = xi[~np.asarray(np.isnan(xi))]\n            if len(xx):\n                _max = max(_max, cbook.dates.date2num(max(xx))) if x_dtype.type is np.datetime64 else max(max(xx))\n                _min = min(_min, cbook.dates.date2num(min(xx))) if x_dtype.type is np.datetime64 else min(min(xx))\n        bin_range = cbook.dates.num2date(_min), cbook.dates.num2date(_max) if x_dtype.type is np.datetime64 else (_min, _max)\n\n    # If bins are not specified either explicitly or via range,\n    # we need to figure out the range required for all datasets,\n    # and supply that to np.histogram.\n    if not input_empty and len(x) > 1:\n        if weights is not None:\n            _w = np.concatenate(w)\n        else:\n            _w = None\n        _edges = cbook.dates.date2num(bins) if hasattr(bins, '__array__') and bins.dtype.type is np.datetime64 else bins\n        bins = histogram_bin_edges(np.concatenate(x),\n                                   _edges, bin_range, _w)\n    else:\n        hist_kwargs['range'] = bin_range\n\n    density = bool(density)\n    if density and not stacked:\n        hist_kwargs['density'] = density\n\n    # List to store all the top coordinates of the histograms\n    tops = []  # Will have shape (n_datasets, n_bins).\n    # Loop through datasets\n    for i in range(nx):\n        # this will automatically overwrite bins,\n        # so that each histogram uses the same bins\n        m, bins = np.histogram(x[i], bins, weights=w[i], **hist_kwargs)\n        tops.append(m)\n    tops = np.array(tops, float)  # causes problems later if it's an int\n    if stacked:\n        tops = tops.cumsum(axis=0)\n        # If a stacked density plot, normalize so the area of all the\n        # stacked histograms together is 1\n        if density:\n            tops = (tops / np.diff(bins)) / tops[-1].sum()\n    if cumulative:\n        slc = slice(None)\n        if isinstance(cumulative, Number) and cumulative < 0:\n            slc = slice(None, None, -1)\n        if density:\n            tops = (tops * np.diff(bins))[:, slc].cumsum(axis=1)[:, slc]\n        else:\n            tops = tops[:, slc].cumsum(axis=1)[:, slc]\n\n    xs = []\n    ys = []\n    bottom_kwarg = 'bottom'\n    for m, c in zip(tops, color):\n        patch = self.bar(bins[:-1], m, np.diff(bins), align='center', log=log,\n                         color=c, **{bottom_kwarg: bottom})\n        bottoms += m\n        coins.append(patch)\n    return tops, bins, coins",
            "imports": [
                "from builtins import range"
            ]
        }
    ]
}