{
    "1.3.1": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/core/reshape/pivot.py",
    "1.1.1": "@Substitution(\"\\ndata : DataFrame\")\n@Appender(_shared_docs[\"pivot\"], indents=1)\ndef pivot(data: \"DataFrame\", index=None, columns=None, values=None) -> \"DataFrame\":\n    if values is None:\n        cols = [columns] if index is None else [index, columns]\n        append = index is None\n        indexed = data.set_index(cols, append=append)\n    else:\n        if index is None:\n            index = data.index\n        else:\n            index = data[index]\n        index = MultiIndex.from_arrays([index, data[columns]])\n\n        if is_list_like(values) and not isinstance(values, tuple):\n            # Exclude tuple because it is seen as a single column name\n            indexed = data._constructor(\n                data[values].values, index=index, columns=values\n            )\n        else:\n            indexed = data._constructor_sliced(data[values].values, index=index)\n    return indexed.unstack(columns)\n",
    "2.2.3": [
        [
            {
                "values": "col3",
                "index": "col1",
                "data.set_index": "<bound method DataFrame.set_index of   col1  col2  col3\n0    a     1     1\n1    b     2     2\n2    c     3     3>",
                "data": "  col1  col2  col3\n0    a     1     1\n1    b     2     2\n2    c     3     3",
                "data.index": "RangeIndex(start=0, stop=3, step=1)",
                "data._constructor": "<class 'pandas.core.frame.DataFrame'>",
                "data._constructor_sliced": "<class 'pandas.core.series.Series'>"
            },
            {}
        ]
    ],
    "2.2.4": [
        [
            {
                "values": "str",
                "index": "str",
                "data.set_index": "method",
                "data": "DataFrame",
                "data.index": "RangeIndex",
                "data._constructor": "type",
                "data._constructor_sliced": "type"
            },
            {}
        ]
    ],
    "2.2.5": [
        [
            {
                "values": "col3",
                "index": "col1",
                "data.set_index": "<bound method DataFrame.set_index of   col1  col2  col3\n0    a     1     1\n1    b     2     2\n2    c     3     3>",
                "data": "  col1  col2  col3\n0    a     1     1\n1    b     2     2\n2    c     3     3",
                "data.index": "RangeIndex(start=0, stop=3, step=1)",
                "data._constructor": "<class 'pandas.core.frame.DataFrame'>",
                "data._constructor_sliced": "<class 'pandas.core.series.Series'>"
            },
            {}
        ]
    ],
    "2.2.6": [
        [
            {
                "values": "str",
                "index": "str",
                "data.set_index": "method",
                "data": "DataFrame",
                "data.index": "RangeIndex",
                "data._constructor": "type",
                "data._constructor_sliced": "type"
            },
            {}
        ]
    ],
    "2.1.1": [
        "    def test_pivot_columns_none_raise_error(self):\n        # GH 30924\n        df = pd.DataFrame(\n            {\"col1\": [\"a\", \"b\", \"c\"], \"col2\": [1, 2, 3], \"col3\": [1, 2, 3]}\n        )\n        msg = r\"pivot\\(\\) missing 1 required argument: 'columns'\"\n        with pytest.raises(TypeError, match=msg):\n            df.pivot(index=\"col1\", values=\"col3\")"
    ],
    "2.1.2": [
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/reshape/test_pivot.py"
    ],
    "2.2.1": [
        [
            "E   KeyError: None",
            "E   KeyError: None"
        ]
    ],
    "2.2.2": [
        [
            "self = Index(['col1', 'col2', 'col3'], dtype='object'), key = None\nmethod = None, tolerance = None\n\n    @Appender(_index_shared_docs[\"get_loc\"])\n    def get_loc(self, key, method=None, tolerance=None):\n        if method is None:\n            if tolerance is not None:\n                raise ValueError(\n                    \"tolerance argument only valid if using pad, \"\n                    \"backfill or nearest lookups\"\n                )\n            try:\n>               return self._engine.get_loc(key)\n\npandas/core/indexes/base.py:2901: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   cpdef get_loc(self, object val):\n\npandas/_libs/index.pyx:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   return self.mapping.get_item(val)\n\npandas/_libs/index.pyx:136: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   cpdef get_item(self, object val):\n\npandas/_libs/hashtable_class_helper.pxi:1614: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise KeyError(val)",
            "\npandas/_libs/hashtable_class_helper.pxi:1622: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <pandas.tests.reshape.test_pivot.TestPivotTable object at 0x123022ac0>\n\n    def test_pivot_columns_none_raise_error(self):\n        # GH 30924\n        df = pd.DataFrame(\n            {\"col1\": [\"a\", \"b\", \"c\"], \"col2\": [1, 2, 3], \"col3\": [1, 2, 3]}\n        )\n        msg = r\"pivot\\(\\) missing 1 required argument: 'columns'\"\n        with pytest.raises(TypeError, match=msg):\n>           df.pivot(index=\"col1\", values=\"col3\")\n\npandas/tests/reshape/test_pivot.py:791: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/frame.py:5947: in pivot\n    return pivot(self, index=index, columns=columns, values=values)\npandas/core/reshape/pivot.py:441: in pivot\n    index = MultiIndex.from_arrays([index, data[columns]])\npandas/core/frame.py:2793: in __getitem__\n    indexer = self.columns.get_loc(key)\npandas/core/indexes/base.py:2903: in get_loc\n    return self._engine.get_loc(self._maybe_cast_indexer(key))\npandas/_libs/index.pyx:109: in pandas._libs.index.IndexEngine.get_loc\n    cpdef get_loc(self, object val):\npandas/_libs/index.pyx:136: in pandas._libs.index.IndexEngine.get_loc\n    return self.mapping.get_item(val)\npandas/_libs/hashtable_class_helper.pxi:1614: in pandas._libs.hashtable.PyObjectHashTable.get_item\n    cpdef get_item(self, object val):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise KeyError(val)",
            "\npandas/_libs/hashtable_class_helper.pxi:1622: KeyError"
        ]
    ],
    "3.1.1": [
        "BUG: Wrong error message is raised when columns=None in df.pivot\n"
    ],
    "3.1.2": [
        "From docstring, index and values can be optional in df.pivot, but columns is not\n\nhttps://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.pivot.html\nindex : string or object, optional\nColumn to use to make new frame\u2019s index. If None, uses existing index.\n\ncolumns : string or object\nColumn to use to make new frame\u2019s columns.\n\nHowever, the error message is confusing now, should raise columns is not optional.\n\nCode example:\n>>> df = pd.DataFrame({\"foo\": ['one', 'one', 'two', 'two'],\"bar\": ['A', 'A', 'B', 'C'],\"baz\": [1, 2, 3, 4]})\n>>> df.pivot(columns=None)\n\nKeyError: 'None of [None] are in the columns'\n"
    ]
}