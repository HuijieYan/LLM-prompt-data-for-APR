{
    "pandas": [
        {
            "bugID": 34,
            "bitvector": {
                "1.3.2": 1,
                "1.2.4": 0,
                "1.2.1": 1,
                "1.3.4": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 1,
                "3.1.1": 1,
                "3.1.2": 0,
                "cot": 0
            },
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "# file name: /Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/core/resample.py\n\n# relative function's signature in this file\ndef _get_timestamp_range_edges(first, last, offset, closed='left', base=0):\n    # ... omitted code ...\n\n# relative function's signature in this file\ndef ax(self):\n    # ... omitted code ...\n\n# relative function's signature in this file\ndef _adjust_bin_edges(self, binner, ax_values):\n    # ... omitted code ...\n\n# class signature containing the buggy function\nclass TimeGrouper(Grouper):\n    # ... omitted code ...\n\n\n\n    # this is the buggy function you need to fix\n    def _get_time_bins(self, ax):\n        if not isinstance(ax, DatetimeIndex):\n            raise TypeError(\n                \"axis must be a DatetimeIndex, but got \"\n                f\"an instance of {type(ax).__name__}\"\n            )\n        \n        if len(ax) == 0:\n            binner = labels = DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n            return binner, [], labels\n        \n        first, last = _get_timestamp_range_edges(\n            ax.min(), ax.max(), self.freq, closed=self.closed, base=self.base\n        )\n        # GH #12037\n        # use first/last directly instead of call replace() on them\n        # because replace() will swallow the nanosecond part\n        # thus last bin maybe slightly before the end if the end contains\n        # nanosecond part and lead to `Values falls after last bin` error\n        binner = labels = date_range(\n            start=first,\n            end=last,\n            freq=self.freq,\n            tz=ax.tz,\n            name=ax.name,\n            ambiguous=\"infer\",\n            nonexistent=\"shift_forward\",\n        )\n        \n        ax_values = ax.asi8\n        new_binner, bin_edges = self._adjust_bin_edges(binner, ax_values)\n        binner = new_binner\n        \n        # general version, knowing nothing about relative frequencies\n        bins = lib.generate_bins_dt64(\n            ax_values, bin_edges, self.closed, hasnans=ax.hasnans\n        )\n        \n        if self.closed == \"right\":\n            labels = binner\n            if self.label == \"right\":\n                labels = labels[1:]\n        elif self.label == \"right\":\n            labels = labels[1:]\n        \n        if ax.hasnans:\n            binner = binner.insert(0, NaT)\n            labels = labels.insert(0, NaT)\n        \n        # if we end up with more labels than bins\n        # adjust the labels\n        # GH4076\n        if len(bins) < len(labels):\n            labels = labels[: len(bins)]\n        \n        return binner, bins, labels"
        }
    ]
}