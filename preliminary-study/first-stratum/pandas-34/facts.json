{
    "1.1.1": "def _get_time_bins(self, ax):\n    if not isinstance(ax, DatetimeIndex):\n        raise TypeError(\n            \"axis must be a DatetimeIndex, but got \"\n            f\"an instance of {type(ax).__name__}\"\n        )\n\n    if len(ax) == 0:\n        binner = labels = DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n        return binner, [], labels\n\n    first, last = _get_timestamp_range_edges(\n        ax.min(), ax.max(), self.freq, closed=self.closed, base=self.base\n    )\n    # GH #12037\n    # use first/last directly instead of call replace() on them\n    # because replace() will swallow the nanosecond part\n    # thus last bin maybe slightly before the end if the end contains\n    # nanosecond part and lead to `Values falls after last bin` error\n    binner = labels = date_range(\n        freq=self.freq,\n        start=first,\n        end=last,\n        tz=ax.tz,\n        name=ax.name,\n        ambiguous=\"infer\",\n        nonexistent=\"shift_forward\",\n    )\n\n    ax_values = ax.asi8\n    binner, bin_edges = self._adjust_bin_edges(binner, ax_values)\n\n    # general version, knowing nothing about relative frequencies\n    bins = lib.generate_bins_dt64(\n        ax_values, bin_edges, self.closed, hasnans=ax.hasnans\n    )\n\n    if self.closed == \"right\":\n        labels = binner\n        if self.label == \"right\":\n            labels = labels[1:]\n    elif self.label == \"right\":\n        labels = labels[1:]\n\n    if ax.hasnans:\n        binner = binner.insert(0, NaT)\n        labels = labels.insert(0, NaT)\n\n    # if we end up with more labels than bins\n    # adjust the labels\n    # GH4076\n    if len(bins) < len(labels):\n        labels = labels[: len(bins)]\n\n    return binner, bins, labels\n",
    "1.1.2": null,
    "1.2.1": "class TimeGrouper(Grouper)",
    "1.2.2": "Custom groupby class for time-interval grouping.\n\nParameters\n----------\nfreq : pandas date offset or offset alias for identifying bin edges\nclosed : closed end of interval; 'left' or 'right'\nlabel : interval boundary to use for labeling; 'left' or 'right'\nconvention : {'start', 'end', 'e', 's'}\n    If axis is PeriodIndex",
    "1.2.3": [
        "_adjust_bin_edges(self, binner, ax_values)"
    ],
    "1.3.1": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/core/resample.py",
    "1.3.2": [
        "_get_timestamp_range_edges(first, last, offset, closed='left', base=0)",
        "ax(self)",
        "_adjust_bin_edges(self, binner, ax_values)"
    ],
    "2.1.1": [
        "def test_downsample_dst_at_midnight():\n    # GH 25758\n    start = datetime(2018, 11, 3, 12)\n    end = datetime(2018, 11, 5, 12)\n    index = pd.date_range(start, end, freq=\"1H\")\n    index = index.tz_localize(\"UTC\").tz_convert(\"America/Havana\")\n    data = list(range(len(index)))\n    dataframe = pd.DataFrame(data, index=index)\n    result = dataframe.groupby(pd.Grouper(freq=\"1D\")).mean()\n    expected = DataFrame(\n        [7.5, 28.0, 44.5],\n        index=date_range(\"2018-11-03\", periods=3).tz_localize(\n            \"America/Havana\", ambiguous=True\n        ),\n    )\n    tm.assert_frame_equal(result, expected)"
    ],
    "2.1.2": [
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/resample/test_datetime_index.py"
    ],
    "2.2.1": [
        [
            "E   pytz.exceptions.AmbiguousTimeError: Cannot infer dst time from 2018-11-04 00:00:00 as there are no repeated times"
        ]
    ],
    "2.2.2": [
        [
            "def test_downsample_dst_at_midnight():\n        # GH 25758\n        start = datetime(2018, 11, 3, 12)\n        end = datetime(2018, 11, 5, 12)\n        index = pd.date_range(start, end, freq=\"1H\")\n        index = index.tz_localize(\"UTC\").tz_convert(\"America/Havana\")\n        data = list(range(len(index)))\n        dataframe = pd.DataFrame(data, index=index)\n>       result = dataframe.groupby(pd.Grouper(freq=\"1D\")).mean()\n\npandas/tests/resample/test_datetime_index.py:1451: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/frame.py:5828: in groupby\n    return DataFrameGroupBy(\npandas/core/groupby/groupby.py:401: in __init__\n    grouper, exclusions, obj = get_grouper(\npandas/core/groupby/grouper.py:508: in get_grouper\n    binner, grouper, obj = key._get_grouper(obj, validate=False)\npandas/core/resample.py:1403: in _get_grouper\n    r._set_binner()\npandas/core/resample.py:179: in _set_binner\n    self.binner, self.grouper = self._get_binner()\npandas/core/resample.py:186: in _get_binner\n    binner, bins, binlabels = self._get_binner_for_time()\npandas/core/resample.py:1003: in _get_binner_for_time\n    return self.groupby._get_time_bins(self.ax)\npandas/core/resample.py:1425: in _get_time_bins\n    binner = labels = date_range(\npandas/core/indexes/datetimes.py:966: in date_range\n    dtarr = DatetimeArray._generate_range(\npandas/core/arrays/datetimes.py:411: in _generate_range\n    arr = conversion.tz_localize_to_utc(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise pytz.AmbiguousTimeError(",
            "\npandas/_libs/tslibs/tzconversion.pyx:177: AmbiguousTimeError"
        ]
    ],
    "2.2.3": [
        [
            {
                "ax": "DatetimeIndex(['2018-11-03 08:00:00-04:00', '2018-11-03 09:00:00-04:00',\n               '2018-11-03 10:00:00-04:00', '2018-11-03 11:00:00-04:00',\n               '2018-11-03 12:00:00-04:00', '2018-11-03 13:00:00-04:00',\n               '2018-11-03 14:00:00-04:00', '2018-11-03 15:00:00-04:00',\n               '2018-11-03 16:00:00-04:00', '2018-11-03 17:00:00-04:00',\n               '2018-11-03 18:00:00-04:00', '2018-11-03 19:00:00-04:00',\n               '2018-11-03 20:00:00-04:00', '2018-11-03 21:00:00-04:00',\n               '2018-11-03 22:00:00-04:00', '2018-11-03 23:00:00-04:00',\n               '2018-11-04 00:00:00-04:00', '2018-11-04 00:00:00-05:00',\n               '2018-11-04 01:00:00-05:00', '2018-11-04 02:00:00-05:00',\n               '2018-11-04 03:00:00-05:00', '2018-11-04 04:00:00-05:00',\n               '2018-11-04 05:00:00-05:00', '2018-11-04 06:00:00-05:00',\n               '2018-11-04 07:00:00-05:00', '2018-11-04 08:00:00-05:00',\n               '2018-11-04 09:00:00-05:00', '2018-11-04 10:00:00-05:00',\n               '2018-11-04 11:00:00-05:00', '2018-11-04 12:00:00-05:00',\n               '2018-11-04 13:00:00-05:00', '2018-11-04 14:00:00-05:00',\n               '2018-11-04 15:00:00-05:00', '2018-11-04 16:00:00-05:00',\n               '2018-11-04 17:00:00-05:00', '2018-11-04 18:00:00-05:00',\n               '2018-11-04 19:00:00-05:00', '2018-11-04 20:00:00-05:00',\n               '2018-11-04 21:00:00-05:00', '2018-11-04 22:00:00-05:00',\n               '2018-11-04 23:00:00-05:00', '2018-11-05 00:00:00-05:00',\n               '2018-11-05 01:00:00-05:00', '2018-11-05 02:00:00-05:00',\n               '2018-11-05 03:00:00-05:00', '2018-11-05 04:00:00-05:00',\n               '2018-11-05 05:00:00-05:00', '2018-11-05 06:00:00-05:00',\n               '2018-11-05 07:00:00-05:00'],\n              dtype='datetime64[ns, America/Havana]', freq='H')",
                "self.freq": "<Day>",
                "self": "TimeGrouper(freq=<Day>, axis=0, sort=True, closed='left', label='left', how='mean', convention='e', base=0)",
                "ax.min": "<bound method DatetimeIndexOpsMixin.min of DatetimeIndex(['2018-11-03 08:00:00-04:00', '2018-11-03 09:00:00-04:00',\n               '2018-11-03 10:00:00-04:00', '2018-11-03 11:00:00-04:00',\n               '2018-11-03 12:00:00-04:00', '2018-11-03 13:00:00-04:00',\n               '2018-11-03 14:00:00-04:00', '2018-11-03 15:00:00-04:00',\n               '2018-11-03 16:00:00-04:00', '2018-11-03 17:00:00-04:00',\n               '2018-11-03 18:00:00-04:00', '2018-11-03 19:00:00-04:00',\n               '2018-11-03 20:00:00-04:00', '2018-11-03 21:00:00-04:00',\n               '2018-11-03 22:00:00-04:00', '2018-11-03 23:00:00-04:00',\n               '2018-11-04 00:00:00-04:00', '2018-11-04 00:00:00-05:00',\n               '2018-11-04 01:00:00-05:00', '2018-11-04 02:00:00-05:00',\n               '2018-11-04 03:00:00-05:00', '2018-11-04 04:00:00-05:00',\n               '2018-11-04 05:00:00-05:00', '2018-11-04 06:00:00-05:00',\n               '2018-11-04 07:00:00-05:00', '2018-11-04 08:00:00-05:00',\n               '2018-11-04 09:00:00-05:00', '2018-11-04 10:00:00-05:00',\n               '2018-11-04 11:00:00-05:00', '2018-11-04 12:00:00-05:00',\n               '2018-11-04 13:00:00-05:00', '2018-11-04 14:00:00-05:00',\n               '2018-11-04 15:00:00-05:00', '2018-11-04 16:00:00-05:00',\n               '2018-11-04 17:00:00-05:00', '2018-11-04 18:00:00-05:00',\n               '2018-11-04 19:00:00-05:00', '2018-11-04 20:00:00-05:00',\n               '2018-11-04 21:00:00-05:00', '2018-11-04 22:00:00-05:00',\n               '2018-11-04 23:00:00-05:00', '2018-11-05 00:00:00-05:00',\n               '2018-11-05 01:00:00-05:00', '2018-11-05 02:00:00-05:00',\n               '2018-11-05 03:00:00-05:00', '2018-11-05 04:00:00-05:00',\n               '2018-11-05 05:00:00-05:00', '2018-11-05 06:00:00-05:00',\n               '2018-11-05 07:00:00-05:00'],\n              dtype='datetime64[ns, America/Havana]', freq='H')>",
                "ax.max": "<bound method DatetimeIndexOpsMixin.max of DatetimeIndex(['2018-11-03 08:00:00-04:00', '2018-11-03 09:00:00-04:00',\n               '2018-11-03 10:00:00-04:00', '2018-11-03 11:00:00-04:00',\n               '2018-11-03 12:00:00-04:00', '2018-11-03 13:00:00-04:00',\n               '2018-11-03 14:00:00-04:00', '2018-11-03 15:00:00-04:00',\n               '2018-11-03 16:00:00-04:00', '2018-11-03 17:00:00-04:00',\n               '2018-11-03 18:00:00-04:00', '2018-11-03 19:00:00-04:00',\n               '2018-11-03 20:00:00-04:00', '2018-11-03 21:00:00-04:00',\n               '2018-11-03 22:00:00-04:00', '2018-11-03 23:00:00-04:00',\n               '2018-11-04 00:00:00-04:00', '2018-11-04 00:00:00-05:00',\n               '2018-11-04 01:00:00-05:00', '2018-11-04 02:00:00-05:00',\n               '2018-11-04 03:00:00-05:00', '2018-11-04 04:00:00-05:00',\n               '2018-11-04 05:00:00-05:00', '2018-11-04 06:00:00-05:00',\n               '2018-11-04 07:00:00-05:00', '2018-11-04 08:00:00-05:00',\n               '2018-11-04 09:00:00-05:00', '2018-11-04 10:00:00-05:00',\n               '2018-11-04 11:00:00-05:00', '2018-11-04 12:00:00-05:00',\n               '2018-11-04 13:00:00-05:00', '2018-11-04 14:00:00-05:00',\n               '2018-11-04 15:00:00-05:00', '2018-11-04 16:00:00-05:00',\n               '2018-11-04 17:00:00-05:00', '2018-11-04 18:00:00-05:00',\n               '2018-11-04 19:00:00-05:00', '2018-11-04 20:00:00-05:00',\n               '2018-11-04 21:00:00-05:00', '2018-11-04 22:00:00-05:00',\n               '2018-11-04 23:00:00-05:00', '2018-11-05 00:00:00-05:00',\n               '2018-11-05 01:00:00-05:00', '2018-11-05 02:00:00-05:00',\n               '2018-11-05 03:00:00-05:00', '2018-11-05 04:00:00-05:00',\n               '2018-11-05 05:00:00-05:00', '2018-11-05 06:00:00-05:00',\n               '2018-11-05 07:00:00-05:00'],\n              dtype='datetime64[ns, America/Havana]', freq='H')>",
                "self.closed": "left",
                "self.base": "0",
                "ax.tz": "<DstTzInfo 'America/Havana' LMT-1 day, 18:31:00 STD>",
                "ax.asi8": "array([1541246400000000000, 1541250000000000000, 1541253600000000000,\n       1541257200000000000, 1541260800000000000, 1541264400000000000,\n       1541268000000000000, 1541271600000000000, 1541275200000000000,\n       1541278800000000000, 1541282400000000000, 1541286000000000000,\n       1541289600000000000, 1541293200000000000, 1541296800000000000,\n       1541300400000000000, 1541304000000000000, 1541307600000000000,\n       1541311200000000000, 1541314800000000000, 1541318400000000000,\n       1541322000000000000, 1541325600000000000, 1541329200000000000,\n       1541332800000000000, 1541336400000000000, 1541340000000000000,\n       1541343600000000000, 1541347200000000000, 1541350800000000000,\n       1541354400000000000, 1541358000000000000, 1541361600000000000,\n       1541365200000000000, 1541368800000000000, 1541372400000000000,\n       1541376000000000000, 1541379600000000000, 1541383200000000000,\n       1541386800000000000, 1541390400000000000, 1541394000000000000,\n       1541397600000000000, 1541401200000000000, 1541404800000000000,\n       1541408400000000000, 1541412000000000000, 1541415600000000000,\n       1541419200000000000])",
                "self._adjust_bin_edges": "<bound method TimeGrouper._adjust_bin_edges of TimeGrouper(freq=<Day>, axis=0, sort=True, closed='left', label='left', how='mean', convention='e', base=0)>",
                "ax.hasnans": "False",
                "self.label": "left"
            },
            {
                "ax": "DatetimeIndex(['2018-11-03 08:00:00-04:00', '2018-11-03 09:00:00-04:00',\n               '2018-11-03 10:00:00-04:00', '2018-11-03 11:00:00-04:00',\n               '2018-11-03 12:00:00-04:00', '2018-11-03 13:00:00-04:00',\n               '2018-11-03 14:00:00-04:00', '2018-11-03 15:00:00-04:00',\n               '2018-11-03 16:00:00-04:00', '2018-11-03 17:00:00-04:00',\n               '2018-11-03 18:00:00-04:00', '2018-11-03 19:00:00-04:00',\n               '2018-11-03 20:00:00-04:00', '2018-11-03 21:00:00-04:00',\n               '2018-11-03 22:00:00-04:00', '2018-11-03 23:00:00-04:00',\n               '2018-11-04 00:00:00-04:00', '2018-11-04 00:00:00-05:00',\n               '2018-11-04 01:00:00-05:00', '2018-11-04 02:00:00-05:00',\n               '2018-11-04 03:00:00-05:00', '2018-11-04 04:00:00-05:00',\n               '2018-11-04 05:00:00-05:00', '2018-11-04 06:00:00-05:00',\n               '2018-11-04 07:00:00-05:00', '2018-11-04 08:00:00-05:00',\n               '2018-11-04 09:00:00-05:00', '2018-11-04 10:00:00-05:00',\n               '2018-11-04 11:00:00-05:00', '2018-11-04 12:00:00-05:00',\n               '2018-11-04 13:00:00-05:00', '2018-11-04 14:00:00-05:00',\n               '2018-11-04 15:00:00-05:00', '2018-11-04 16:00:00-05:00',\n               '2018-11-04 17:00:00-05:00', '2018-11-04 18:00:00-05:00',\n               '2018-11-04 19:00:00-05:00', '2018-11-04 20:00:00-05:00',\n               '2018-11-04 21:00:00-05:00', '2018-11-04 22:00:00-05:00',\n               '2018-11-04 23:00:00-05:00', '2018-11-05 00:00:00-05:00',\n               '2018-11-05 01:00:00-05:00', '2018-11-05 02:00:00-05:00',\n               '2018-11-05 03:00:00-05:00', '2018-11-05 04:00:00-05:00',\n               '2018-11-05 05:00:00-05:00', '2018-11-05 06:00:00-05:00',\n               '2018-11-05 07:00:00-05:00'],\n              dtype='datetime64[ns, America/Havana]', freq='H')",
                "binner": "DatetimeIndex(['2018-11-03 00:00:00-04:00', '2018-11-04 00:00:00-04:00',\n               '2018-11-05 00:00:00-05:00', '2018-11-06 00:00:00-05:00'],\n              dtype='datetime64[ns, America/Havana]', freq='D')",
                "labels": "DatetimeIndex(['2018-11-03 00:00:00-04:00', '2018-11-04 00:00:00-04:00',\n               '2018-11-05 00:00:00-05:00'],\n              dtype='datetime64[ns, America/Havana]', freq='D')",
                "self.freq": "<Day>",
                "self": "TimeGrouper(freq=<Day>, axis=0, sort=True, closed='left', label='left', how='mean', convention='e', base=0)",
                "first": "Timestamp('2018-11-03 00:00:00-0400', tz='America/Havana')",
                "last": "Timestamp('2018-11-06 00:00:00-0500', tz='America/Havana')",
                "ax.min": "<bound method DatetimeIndexOpsMixin.min of DatetimeIndex(['2018-11-03 08:00:00-04:00', '2018-11-03 09:00:00-04:00',\n               '2018-11-03 10:00:00-04:00', '2018-11-03 11:00:00-04:00',\n               '2018-11-03 12:00:00-04:00', '2018-11-03 13:00:00-04:00',\n               '2018-11-03 14:00:00-04:00', '2018-11-03 15:00:00-04:00',\n               '2018-11-03 16:00:00-04:00', '2018-11-03 17:00:00-04:00',\n               '2018-11-03 18:00:00-04:00', '2018-11-03 19:00:00-04:00',\n               '2018-11-03 20:00:00-04:00', '2018-11-03 21:00:00-04:00',\n               '2018-11-03 22:00:00-04:00', '2018-11-03 23:00:00-04:00',\n               '2018-11-04 00:00:00-04:00', '2018-11-04 00:00:00-05:00',\n               '2018-11-04 01:00:00-05:00', '2018-11-04 02:00:00-05:00',\n               '2018-11-04 03:00:00-05:00', '2018-11-04 04:00:00-05:00',\n               '2018-11-04 05:00:00-05:00', '2018-11-04 06:00:00-05:00',\n               '2018-11-04 07:00:00-05:00', '2018-11-04 08:00:00-05:00',\n               '2018-11-04 09:00:00-05:00', '2018-11-04 10:00:00-05:00',\n               '2018-11-04 11:00:00-05:00', '2018-11-04 12:00:00-05:00',\n               '2018-11-04 13:00:00-05:00', '2018-11-04 14:00:00-05:00',\n               '2018-11-04 15:00:00-05:00', '2018-11-04 16:00:00-05:00',\n               '2018-11-04 17:00:00-05:00', '2018-11-04 18:00:00-05:00',\n               '2018-11-04 19:00:00-05:00', '2018-11-04 20:00:00-05:00',\n               '2018-11-04 21:00:00-05:00', '2018-11-04 22:00:00-05:00',\n               '2018-11-04 23:00:00-05:00', '2018-11-05 00:00:00-05:00',\n               '2018-11-05 01:00:00-05:00', '2018-11-05 02:00:00-05:00',\n               '2018-11-05 03:00:00-05:00', '2018-11-05 04:00:00-05:00',\n               '2018-11-05 05:00:00-05:00', '2018-11-05 06:00:00-05:00',\n               '2018-11-05 07:00:00-05:00'],\n              dtype='datetime64[ns, America/Havana]', freq='H')>",
                "ax.max": "<bound method DatetimeIndexOpsMixin.max of DatetimeIndex(['2018-11-03 08:00:00-04:00', '2018-11-03 09:00:00-04:00',\n               '2018-11-03 10:00:00-04:00', '2018-11-03 11:00:00-04:00',\n               '2018-11-03 12:00:00-04:00', '2018-11-03 13:00:00-04:00',\n               '2018-11-03 14:00:00-04:00', '2018-11-03 15:00:00-04:00',\n               '2018-11-03 16:00:00-04:00', '2018-11-03 17:00:00-04:00',\n               '2018-11-03 18:00:00-04:00', '2018-11-03 19:00:00-04:00',\n               '2018-11-03 20:00:00-04:00', '2018-11-03 21:00:00-04:00',\n               '2018-11-03 22:00:00-04:00', '2018-11-03 23:00:00-04:00',\n               '2018-11-04 00:00:00-04:00', '2018-11-04 00:00:00-05:00',\n               '2018-11-04 01:00:00-05:00', '2018-11-04 02:00:00-05:00',\n               '2018-11-04 03:00:00-05:00', '2018-11-04 04:00:00-05:00',\n               '2018-11-04 05:00:00-05:00', '2018-11-04 06:00:00-05:00',\n               '2018-11-04 07:00:00-05:00', '2018-11-04 08:00:00-05:00',\n               '2018-11-04 09:00:00-05:00', '2018-11-04 10:00:00-05:00',\n               '2018-11-04 11:00:00-05:00', '2018-11-04 12:00:00-05:00',\n               '2018-11-04 13:00:00-05:00', '2018-11-04 14:00:00-05:00',\n               '2018-11-04 15:00:00-05:00', '2018-11-04 16:00:00-05:00',\n               '2018-11-04 17:00:00-05:00', '2018-11-04 18:00:00-05:00',\n               '2018-11-04 19:00:00-05:00', '2018-11-04 20:00:00-05:00',\n               '2018-11-04 21:00:00-05:00', '2018-11-04 22:00:00-05:00',\n               '2018-11-04 23:00:00-05:00', '2018-11-05 00:00:00-05:00',\n               '2018-11-05 01:00:00-05:00', '2018-11-05 02:00:00-05:00',\n               '2018-11-05 03:00:00-05:00', '2018-11-05 04:00:00-05:00',\n               '2018-11-05 05:00:00-05:00', '2018-11-05 06:00:00-05:00',\n               '2018-11-05 07:00:00-05:00'],\n              dtype='datetime64[ns, America/Havana]', freq='H')>",
                "self.closed": "left",
                "self.base": "0",
                "ax.tz": "<DstTzInfo 'America/Havana' LMT-1 day, 18:31:00 STD>",
                "ax_values": "array([1541246400000000000, 1541250000000000000, 1541253600000000000,\n       1541257200000000000, 1541260800000000000, 1541264400000000000,\n       1541268000000000000, 1541271600000000000, 1541275200000000000,\n       1541278800000000000, 1541282400000000000, 1541286000000000000,\n       1541289600000000000, 1541293200000000000, 1541296800000000000,\n       1541300400000000000, 1541304000000000000, 1541307600000000000,\n       1541311200000000000, 1541314800000000000, 1541318400000000000,\n       1541322000000000000, 1541325600000000000, 1541329200000000000,\n       1541332800000000000, 1541336400000000000, 1541340000000000000,\n       1541343600000000000, 1541347200000000000, 1541350800000000000,\n       1541354400000000000, 1541358000000000000, 1541361600000000000,\n       1541365200000000000, 1541368800000000000, 1541372400000000000,\n       1541376000000000000, 1541379600000000000, 1541383200000000000,\n       1541386800000000000, 1541390400000000000, 1541394000000000000,\n       1541397600000000000, 1541401200000000000, 1541404800000000000,\n       1541408400000000000, 1541412000000000000, 1541415600000000000,\n       1541419200000000000])",
                "ax.asi8": "array([1541246400000000000, 1541250000000000000, 1541253600000000000,\n       1541257200000000000, 1541260800000000000, 1541264400000000000,\n       1541268000000000000, 1541271600000000000, 1541275200000000000,\n       1541278800000000000, 1541282400000000000, 1541286000000000000,\n       1541289600000000000, 1541293200000000000, 1541296800000000000,\n       1541300400000000000, 1541304000000000000, 1541307600000000000,\n       1541311200000000000, 1541314800000000000, 1541318400000000000,\n       1541322000000000000, 1541325600000000000, 1541329200000000000,\n       1541332800000000000, 1541336400000000000, 1541340000000000000,\n       1541343600000000000, 1541347200000000000, 1541350800000000000,\n       1541354400000000000, 1541358000000000000, 1541361600000000000,\n       1541365200000000000, 1541368800000000000, 1541372400000000000,\n       1541376000000000000, 1541379600000000000, 1541383200000000000,\n       1541386800000000000, 1541390400000000000, 1541394000000000000,\n       1541397600000000000, 1541401200000000000, 1541404800000000000,\n       1541408400000000000, 1541412000000000000, 1541415600000000000,\n       1541419200000000000])",
                "bin_edges": "array([1541217600000000000, 1541304000000000000, 1541394000000000000,\n       1541480400000000000])",
                "self._adjust_bin_edges": "<bound method TimeGrouper._adjust_bin_edges of TimeGrouper(freq=<Day>, axis=0, sort=True, closed='left', label='left', how='mean', convention='e', base=0)>",
                "bins": "array([16, 41, 49])",
                "ax.hasnans": "False",
                "self.label": "left",
                "binner.insert": "<bound method DatetimeTimedeltaMixin.insert of DatetimeIndex(['2018-11-03 00:00:00-04:00', '2018-11-04 00:00:00-04:00',\n               '2018-11-05 00:00:00-05:00', '2018-11-06 00:00:00-05:00'],\n              dtype='datetime64[ns, America/Havana]', freq='D')>",
                "labels.insert": "<bound method DatetimeTimedeltaMixin.insert of DatetimeIndex(['2018-11-03 00:00:00-04:00', '2018-11-04 00:00:00-04:00',\n               '2018-11-05 00:00:00-05:00'],\n              dtype='datetime64[ns, America/Havana]', freq='D')>"
            }
        ]
    ],
    "2.2.4": [
        [
            {
                "ax": "DatetimeIndex",
                "self.freq": "Day",
                "self": "TimeGrouper",
                "ax.min": "method",
                "ax.max": "method",
                "self.closed": "str",
                "self.base": "int",
                "ax.tz": "America/Havana",
                "ax.asi8": "ndarray",
                "self._adjust_bin_edges": "method",
                "ax.hasnans": "bool",
                "self.label": "str"
            },
            {
                "ax": "DatetimeIndex",
                "binner": "DatetimeIndex",
                "labels": "DatetimeIndex",
                "self.freq": "Day",
                "self": "TimeGrouper",
                "first": "Timestamp",
                "last": "Timestamp",
                "ax.min": "method",
                "ax.max": "method",
                "self.closed": "str",
                "self.base": "int",
                "ax.tz": "America/Havana",
                "ax_values": "ndarray",
                "ax.asi8": "ndarray",
                "bin_edges": "ndarray",
                "self._adjust_bin_edges": "method",
                "bins": "ndarray",
                "ax.hasnans": "bool",
                "self.label": "str",
                "binner.insert": "method",
                "labels.insert": "method"
            }
        ]
    ],
    "2.2.5": [
        [
            {
                "ax": "DatetimeIndex(['2018-11-03 08:00:00-04:00', '2018-11-03 09:00:00-04:00',\n               '2018-11-03 10:00:00-04:00', '2018-11-03 11:00:00-04:00',\n               '2018-11-03 12:00:00-04:00', '2018-11-03 13:00:00-04:00',\n               '2018-11-03 14:00:00-04:00', '2018-11-03 15:00:00-04:00',\n               '2018-11-03 16:00:00-04:00', '2018-11-03 17:00:00-04:00',\n               '2018-11-03 18:00:00-04:00', '2018-11-03 19:00:00-04:00',\n               '2018-11-03 20:00:00-04:00', '2018-11-03 21:00:00-04:00',\n               '2018-11-03 22:00:00-04:00', '2018-11-03 23:00:00-04:00',\n               '2018-11-04 00:00:00-04:00', '2018-11-04 00:00:00-05:00',\n               '2018-11-04 01:00:00-05:00', '2018-11-04 02:00:00-05:00',\n               '2018-11-04 03:00:00-05:00', '2018-11-04 04:00:00-05:00',\n               '2018-11-04 05:00:00-05:00', '2018-11-04 06:00:00-05:00',\n               '2018-11-04 07:00:00-05:00', '2018-11-04 08:00:00-05:00',\n               '2018-11-04 09:00:00-05:00', '2018-11-04 10:00:00-05:00',\n               '2018-11-04 11:00:00-05:00', '2018-11-04 12:00:00-05:00',\n               '2018-11-04 13:00:00-05:00', '2018-11-04 14:00:00-05:00',\n               '2018-11-04 15:00:00-05:00', '2018-11-04 16:00:00-05:00',\n               '2018-11-04 17:00:00-05:00', '2018-11-04 18:00:00-05:00',\n               '2018-11-04 19:00:00-05:00', '2018-11-04 20:00:00-05:00',\n               '2018-11-04 21:00:00-05:00', '2018-11-04 22:00:00-05:00',\n               '2018-11-04 23:00:00-05:00', '2018-11-05 00:00:00-05:00',\n               '2018-11-05 01:00:00-05:00', '2018-11-05 02:00:00-05:00',\n               '2018-11-05 03:00:00-05:00', '2018-11-05 04:00:00-05:00',\n               '2018-11-05 05:00:00-05:00', '2018-11-05 06:00:00-05:00',\n               '2018-11-05 07:00:00-05:00'],\n              dtype='datetime64[ns, America/Havana]', freq='H')",
                "self.freq": "<Day>",
                "self": "TimeGrouper(freq=<Day>, axis=0, sort=True, closed='left', label='left', how='mean', convention='e', base=0)",
                "ax.min": "<bound method DatetimeIndexOpsMixin.min of DatetimeIndex(['2018-11-03 08:00:00-04:00', '2018-11-03 09:00:00-04:00',\n               '2018-11-03 10:00:00-04:00', '2018-11-03 11:00:00-04:00',\n               '2018-11-03 12:00:00-04:00', '2018-11-03 13:00:00-04:00',\n               '2018-11-03 14:00:00-04:00', '2018-11-03 15:00:00-04:00',\n               '2018-11-03 16:00:00-04:00', '2018-11-03 17:00:00-04:00',\n               '2018-11-03 18:00:00-04:00', '2018-11-03 19:00:00-04:00',\n               '2018-11-03 20:00:00-04:00', '2018-11-03 21:00:00-04:00',\n               '2018-11-03 22:00:00-04:00', '2018-11-03 23:00:00-04:00',\n               '2018-11-04 00:00:00-04:00', '2018-11-04 00:00:00-05:00',\n               '2018-11-04 01:00:00-05:00', '2018-11-04 02:00:00-05:00',\n               '2018-11-04 03:00:00-05:00', '2018-11-04 04:00:00-05:00',\n               '2018-11-04 05:00:00-05:00', '2018-11-04 06:00:00-05:00',\n               '2018-11-04 07:00:00-05:00', '2018-11-04 08:00:00-05:00',\n               '2018-11-04 09:00:00-05:00', '2018-11-04 10:00:00-05:00',\n               '2018-11-04 11:00:00-05:00', '2018-11-04 12:00:00-05:00',\n               '2018-11-04 13:00:00-05:00', '2018-11-04 14:00:00-05:00',\n               '2018-11-04 15:00:00-05:00', '2018-11-04 16:00:00-05:00',\n               '2018-11-04 17:00:00-05:00', '2018-11-04 18:00:00-05:00',\n               '2018-11-04 19:00:00-05:00', '2018-11-04 20:00:00-05:00',\n               '2018-11-04 21:00:00-05:00', '2018-11-04 22:00:00-05:00',\n               '2018-11-04 23:00:00-05:00', '2018-11-05 00:00:00-05:00',\n               '2018-11-05 01:00:00-05:00', '2018-11-05 02:00:00-05:00',\n               '2018-11-05 03:00:00-05:00', '2018-11-05 04:00:00-05:00',\n               '2018-11-05 05:00:00-05:00', '2018-11-05 06:00:00-05:00',\n               '2018-11-05 07:00:00-05:00'],\n              dtype='datetime64[ns, America/Havana]', freq='H')>",
                "ax.max": "<bound method DatetimeIndexOpsMixin.max of DatetimeIndex(['2018-11-03 08:00:00-04:00', '2018-11-03 09:00:00-04:00',\n               '2018-11-03 10:00:00-04:00', '2018-11-03 11:00:00-04:00',\n               '2018-11-03 12:00:00-04:00', '2018-11-03 13:00:00-04:00',\n               '2018-11-03 14:00:00-04:00', '2018-11-03 15:00:00-04:00',\n               '2018-11-03 16:00:00-04:00', '2018-11-03 17:00:00-04:00',\n               '2018-11-03 18:00:00-04:00', '2018-11-03 19:00:00-04:00',\n               '2018-11-03 20:00:00-04:00', '2018-11-03 21:00:00-04:00',\n               '2018-11-03 22:00:00-04:00', '2018-11-03 23:00:00-04:00',\n               '2018-11-04 00:00:00-04:00', '2018-11-04 00:00:00-05:00',\n               '2018-11-04 01:00:00-05:00', '2018-11-04 02:00:00-05:00',\n               '2018-11-04 03:00:00-05:00', '2018-11-04 04:00:00-05:00',\n               '2018-11-04 05:00:00-05:00', '2018-11-04 06:00:00-05:00',\n               '2018-11-04 07:00:00-05:00', '2018-11-04 08:00:00-05:00',\n               '2018-11-04 09:00:00-05:00', '2018-11-04 10:00:00-05:00',\n               '2018-11-04 11:00:00-05:00', '2018-11-04 12:00:00-05:00',\n               '2018-11-04 13:00:00-05:00', '2018-11-04 14:00:00-05:00',\n               '2018-11-04 15:00:00-05:00', '2018-11-04 16:00:00-05:00',\n               '2018-11-04 17:00:00-05:00', '2018-11-04 18:00:00-05:00',\n               '2018-11-04 19:00:00-05:00', '2018-11-04 20:00:00-05:00',\n               '2018-11-04 21:00:00-05:00', '2018-11-04 22:00:00-05:00',\n               '2018-11-04 23:00:00-05:00', '2018-11-05 00:00:00-05:00',\n               '2018-11-05 01:00:00-05:00', '2018-11-05 02:00:00-05:00',\n               '2018-11-05 03:00:00-05:00', '2018-11-05 04:00:00-05:00',\n               '2018-11-05 05:00:00-05:00', '2018-11-05 06:00:00-05:00',\n               '2018-11-05 07:00:00-05:00'],\n              dtype='datetime64[ns, America/Havana]', freq='H')>",
                "self.closed": "left",
                "self.base": "0",
                "ax.tz": "<DstTzInfo 'America/Havana' LMT-1 day, 18:31:00 STD>",
                "ax.asi8": "array([1541246400000000000, 1541250000000000000, 1541253600000000000,\n       1541257200000000000, 1541260800000000000, 1541264400000000000,\n       1541268000000000000, 1541271600000000000, 1541275200000000000,\n       1541278800000000000, 1541282400000000000, 1541286000000000000,\n       1541289600000000000, 1541293200000000000, 1541296800000000000,\n       1541300400000000000, 1541304000000000000, 1541307600000000000,\n       1541311200000000000, 1541314800000000000, 1541318400000000000,\n       1541322000000000000, 1541325600000000000, 1541329200000000000,\n       1541332800000000000, 1541336400000000000, 1541340000000000000,\n       1541343600000000000, 1541347200000000000, 1541350800000000000,\n       1541354400000000000, 1541358000000000000, 1541361600000000000,\n       1541365200000000000, 1541368800000000000, 1541372400000000000,\n       1541376000000000000, 1541379600000000000, 1541383200000000000,\n       1541386800000000000, 1541390400000000000, 1541394000000000000,\n       1541397600000000000, 1541401200000000000, 1541404800000000000,\n       1541408400000000000, 1541412000000000000, 1541415600000000000,\n       1541419200000000000])",
                "self._adjust_bin_edges": "<bound method TimeGrouper._adjust_bin_edges of TimeGrouper(freq=<Day>, axis=0, sort=True, closed='left', label='left', how='mean', convention='e', base=0)>",
                "ax.hasnans": "False",
                "self.label": "left"
            },
            {}
        ]
    ],
    "2.2.6": [
        [
            {
                "ax": "DatetimeIndex",
                "self.freq": "Day",
                "self": "TimeGrouper",
                "ax.min": "method",
                "ax.max": "method",
                "self.closed": "str",
                "self.base": "int",
                "ax.tz": "America/Havana",
                "ax.asi8": "ndarray",
                "self._adjust_bin_edges": "method",
                "ax.hasnans": "bool",
                "self.label": "str"
            },
            {}
        ]
    ],
    "3.1.1": [
        "groupby with daily frequency fails with AmbiguousTimeError on clock change day in Cuba\n"
    ],
    "3.1.2": [
        "Code Sample\nimport pandas as pd\nfrom datetime import datetime\nstart = datetime(2018, 11, 3, 12)\nend = datetime(2018, 11, 5, 12)\nindex = pd.date_range(start, end, freq=\"1H\")\nindex = index.tz_localize('UTC').tz_convert('America/Havana')\ndata = list(range(len(index)))\ndataframe = pd.DataFrame(data, index=index)\ngroups = dataframe.groupby(pd.Grouper(freq='1D'))\n\nProblem description\nOn a long clock-change day in Cuba, e.g 2018-11-04, midnight local time is an ambiguous timestamp. pd.Grouper does not handle this as I expect. More precisely the call to groupby in the code above raises an AmbiguousTimeError.\n\nThis issue is of a similar nature to #23742 but it seems #23742 was fixed in 0.24 whereas this was not.\n\nExpected Output\nThe call to groupby should return three groups (one for each day, 3rd, 4th, and 5th of november). The group for the 4th of november should be labelled as '2018-11-04 00:00:00-04:00' (that is the first midnight, before the clock change) and it should contain the 25 hourly data points for this day.\n\nOutput of pd.show_versions()\nINSTALLED VERSIONS ------------------ commit: None python: 3.6.8.final.0 python-bits: 64 OS: Linux OS-release: 4.9.125-linuxkit machine: x86_64 processor: x86_64 byteorder: little LC_ALL: None LANG: None LOCALE: None.None\npandas: 0.24.2\npytest: 3.3.2\npip: None\nsetuptools: 40.6.3\nCython: 0.29.6\nnumpy: 1.15.4\nscipy: None\npyarrow: None\nxarray: None\nIPython: None\nsphinx: None\npatsy: None\ndateutil: 2.7.3\npytz: 2016.6.1\nblosc: None\nbottleneck: None\ntables: None\nnumexpr: None\nfeather: None\nmatplotlib: None\nopenpyxl: None\nxlrd: None\nxlwt: None\nxlsxwriter: None\nlxml.etree: None\nbs4: None\nhtml5lib: None\nsqlalchemy: None\npymysql: None\npsycopg2: None\njinja2: None\ns3fs: None\nfastparquet: None\npandas_gbq: None\npandas_datareader: None\ngcsfs: None\n"
    ]
}