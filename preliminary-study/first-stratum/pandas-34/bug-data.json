{
    "pandas:34": {
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/core/resample.py": {
            "buggy_functions": [
                {
                    "function_name": "_get_time_bins",
                    "function_code": "def _get_time_bins(self, ax):\n    if not isinstance(ax, DatetimeIndex):\n        raise TypeError(\n            \"axis must be a DatetimeIndex, but got \"\n            f\"an instance of {type(ax).__name__}\"\n        )\n\n    if len(ax) == 0:\n        binner = labels = DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n        return binner, [], labels\n\n    first, last = _get_timestamp_range_edges(\n        ax.min(), ax.max(), self.freq, closed=self.closed, base=self.base\n    )\n    # GH #12037\n    # use first/last directly instead of call replace() on them\n    # because replace() will swallow the nanosecond part\n    # thus last bin maybe slightly before the end if the end contains\n    # nanosecond part and lead to `Values falls after last bin` error\n    binner = labels = date_range(\n        freq=self.freq,\n        start=first,\n        end=last,\n        tz=ax.tz,\n        name=ax.name,\n        ambiguous=\"infer\",\n        nonexistent=\"shift_forward\",\n    )\n\n    ax_values = ax.asi8\n    binner, bin_edges = self._adjust_bin_edges(binner, ax_values)\n\n    # general version, knowing nothing about relative frequencies\n    bins = lib.generate_bins_dt64(\n        ax_values, bin_edges, self.closed, hasnans=ax.hasnans\n    )\n\n    if self.closed == \"right\":\n        labels = binner\n        if self.label == \"right\":\n            labels = labels[1:]\n    elif self.label == \"right\":\n        labels = labels[1:]\n\n    if ax.hasnans:\n        binner = binner.insert(0, NaT)\n        labels = labels.insert(0, NaT)\n\n    # if we end up with more labels than bins\n    # adjust the labels\n    # GH4076\n    if len(bins) < len(labels):\n        labels = labels[: len(bins)]\n\n    return binner, bins, labels\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 1406,
                    "variables": {
                        "isinstance": [
                            1407
                        ],
                        "ax": [
                            1440,
                            1410,
                            1413,
                            1414,
                            1418,
                            1450,
                            1429,
                            1430,
                            1435,
                            1407
                        ],
                        "DatetimeIndex": [
                            1414,
                            1407
                        ],
                        "TypeError": [
                            1408
                        ],
                        "__name__": [
                            1410
                        ],
                        "type": [
                            1410
                        ],
                        "len": [
                            1457,
                            1458,
                            1413
                        ],
                        "binner": [
                            1444,
                            1414,
                            1415,
                            1451,
                            1425,
                            1460,
                            1436
                        ],
                        "labels": [
                            1444,
                            1446,
                            1414,
                            1415,
                            1448,
                            1452,
                            1425,
                            1457,
                            1458,
                            1460
                        ],
                        "self.freq": [
                            1418,
                            1414,
                            1426
                        ],
                        "self": [
                            1440,
                            1443,
                            1445,
                            1414,
                            1447,
                            1418,
                            1426,
                            1436
                        ],
                        "ax.name": [
                            1430,
                            1414
                        ],
                        "first": [
                            1417,
                            1427
                        ],
                        "last": [
                            1417,
                            1428
                        ],
                        "_get_timestamp_range_edges": [
                            1417
                        ],
                        "ax.min": [
                            1418
                        ],
                        "ax.max": [
                            1418
                        ],
                        "self.closed": [
                            1440,
                            1418,
                            1443
                        ],
                        "self.base": [
                            1418
                        ],
                        "date_range": [
                            1425
                        ],
                        "ax.tz": [
                            1429
                        ],
                        "ax_values": [
                            1440,
                            1435,
                            1436
                        ],
                        "ax.asi8": [
                            1435
                        ],
                        "bin_edges": [
                            1440,
                            1436
                        ],
                        "self._adjust_bin_edges": [
                            1436
                        ],
                        "bins": [
                            1457,
                            1458,
                            1460,
                            1439
                        ],
                        "lib.generate_bins_dt64": [
                            1439
                        ],
                        "lib": [
                            1439
                        ],
                        "ax.hasnans": [
                            1440,
                            1450
                        ],
                        "self.label": [
                            1445,
                            1447
                        ],
                        "binner.insert": [
                            1451
                        ],
                        "NaT": [
                            1451,
                            1452
                        ],
                        "labels.insert": [
                            1452
                        ]
                    },
                    "filtered_variables": {
                        "ax": [
                            1440,
                            1410,
                            1413,
                            1414,
                            1418,
                            1450,
                            1429,
                            1430,
                            1435,
                            1407
                        ],
                        "DatetimeIndex": [
                            1414,
                            1407
                        ],
                        "binner": [
                            1444,
                            1414,
                            1415,
                            1451,
                            1425,
                            1460,
                            1436
                        ],
                        "labels": [
                            1444,
                            1446,
                            1414,
                            1415,
                            1448,
                            1452,
                            1425,
                            1457,
                            1458,
                            1460
                        ],
                        "self.freq": [
                            1418,
                            1414,
                            1426
                        ],
                        "self": [
                            1440,
                            1443,
                            1445,
                            1414,
                            1447,
                            1418,
                            1426,
                            1436
                        ],
                        "ax.name": [
                            1430,
                            1414
                        ],
                        "first": [
                            1417,
                            1427
                        ],
                        "last": [
                            1417,
                            1428
                        ],
                        "_get_timestamp_range_edges": [
                            1417
                        ],
                        "ax.min": [
                            1418
                        ],
                        "ax.max": [
                            1418
                        ],
                        "self.closed": [
                            1440,
                            1418,
                            1443
                        ],
                        "self.base": [
                            1418
                        ],
                        "date_range": [
                            1425
                        ],
                        "ax.tz": [
                            1429
                        ],
                        "ax_values": [
                            1440,
                            1435,
                            1436
                        ],
                        "ax.asi8": [
                            1435
                        ],
                        "bin_edges": [
                            1440,
                            1436
                        ],
                        "self._adjust_bin_edges": [
                            1436
                        ],
                        "bins": [
                            1457,
                            1458,
                            1460,
                            1439
                        ],
                        "lib.generate_bins_dt64": [
                            1439
                        ],
                        "lib": [
                            1439
                        ],
                        "ax.hasnans": [
                            1440,
                            1450
                        ],
                        "self.label": [
                            1445,
                            1447
                        ],
                        "binner.insert": [
                            1451
                        ],
                        "NaT": [
                            1451,
                            1452
                        ],
                        "labels.insert": [
                            1452
                        ]
                    },
                    "diff_line_number": 1424,
                    "class_data": {
                        "signature": "class TimeGrouper(Grouper)",
                        "docstring": "Custom groupby class for time-interval grouping.\n\nParameters\n----------\nfreq : pandas date offset or offset alias for identifying bin edges\nclosed : closed end of interval; 'left' or 'right'\nlabel : interval boundary to use for labeling; 'left' or 'right'\nconvention : {'start', 'end', 'e', 's'}\n    If axis is PeriodIndex",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, freq='Min', closed=None, label=None, how='mean', axis=0, fill_method=None, limit=None, loffset=None, kind=None, convention=None, base=0, **kwargs):\n    if label not in {None, 'left', 'right'}:\n        raise ValueError(f'Unsupported value {label} for `label`')\n    if closed not in {None, 'left', 'right'}:\n        raise ValueError(f'Unsupported value {closed} for `closed`')\n    if convention not in {None, 'start', 'end', 'e', 's'}:\n        raise ValueError(f'Unsupported value {convention} for `convention`')\n    freq = to_offset(freq)\n    end_types = {'M', 'A', 'Q', 'BM', 'BA', 'BQ', 'W'}\n    rule = freq.rule_code\n    if rule in end_types or ('-' in rule and rule[:rule.find('-')] in end_types):\n        if closed is None:\n            closed = 'right'\n        if label is None:\n            label = 'right'\n    else:\n        if closed is None:\n            closed = 'left'\n        if label is None:\n            label = 'left'\n    self.closed = closed\n    self.label = label\n    self.kind = kind\n    self.convention = convention or 'E'\n    self.convention = self.convention.lower()\n    if isinstance(loffset, str):\n        loffset = to_offset(loffset)\n    self.loffset = loffset\n    self.how = how\n    self.fill_method = fill_method\n    self.limit = limit\n    self.base = base\n    kwargs['sort'] = True\n    super().__init__(freq=freq, axis=axis, **kwargs)",
                            "def _get_resampler(self, obj, kind=None):\n    \"\"\"\n    Return my resampler or raise if we have an invalid axis.\n\n    Parameters\n    ----------\n    obj : input object\n    kind : string, optional\n        'period','timestamp','timedelta' are valid\n\n    Returns\n    -------\n    a Resampler\n\n    Raises\n    ------\n    TypeError if incompatible axis\n\n    \"\"\"\n    self._set_grouper(obj)\n    ax = self.ax\n    if isinstance(ax, DatetimeIndex):\n        return DatetimeIndexResampler(obj, groupby=self, kind=kind, axis=self.axis)\n    elif isinstance(ax, PeriodIndex) or kind == 'period':\n        return PeriodIndexResampler(obj, groupby=self, kind=kind, axis=self.axis)\n    elif isinstance(ax, TimedeltaIndex):\n        return TimedeltaIndexResampler(obj, groupby=self, axis=self.axis)\n    raise TypeError(f\"Only valid with DatetimeIndex, TimedeltaIndex or PeriodIndex, but got an instance of '{type(ax).__name__}'\")",
                            "def _get_grouper(self, obj, validate: bool=True):\n    r = self._get_resampler(obj)\n    r._set_binner()\n    return (r.binner, r.grouper, r.obj)",
                            "def _get_time_bins(self, ax):\n    if not isinstance(ax, DatetimeIndex):\n        raise TypeError(f'axis must be a DatetimeIndex, but got an instance of {type(ax).__name__}')\n    if len(ax) == 0:\n        binner = labels = DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n        return (binner, [], labels)\n    first, last = _get_timestamp_range_edges(ax.min(), ax.max(), self.freq, closed=self.closed, base=self.base)\n    binner = labels = date_range(freq=self.freq, start=first, end=last, tz=ax.tz, name=ax.name, ambiguous='infer', nonexistent='shift_forward')\n    ax_values = ax.asi8\n    binner, bin_edges = self._adjust_bin_edges(binner, ax_values)\n    bins = lib.generate_bins_dt64(ax_values, bin_edges, self.closed, hasnans=ax.hasnans)\n    if self.closed == 'right':\n        labels = binner\n        if self.label == 'right':\n            labels = labels[1:]\n    elif self.label == 'right':\n        labels = labels[1:]\n    if ax.hasnans:\n        binner = binner.insert(0, NaT)\n        labels = labels.insert(0, NaT)\n    if len(bins) < len(labels):\n        labels = labels[:len(bins)]\n    return (binner, bins, labels)",
                            "def _adjust_bin_edges(self, binner, ax_values):\n    if self.freq != 'D' and is_superperiod(self.freq, 'D'):\n        if self.closed == 'right':\n            bin_edges = binner.tz_localize(None)\n            bin_edges = bin_edges + timedelta(1) - Nano(1)\n            bin_edges = bin_edges.tz_localize(binner.tz).asi8\n        else:\n            bin_edges = binner.asi8\n        if bin_edges[-2] > ax_values.max():\n            bin_edges = bin_edges[:-1]\n            binner = binner[:-1]\n    else:\n        bin_edges = binner.asi8\n    return (binner, bin_edges)",
                            "def _get_time_delta_bins(self, ax):\n    if not isinstance(ax, TimedeltaIndex):\n        raise TypeError(f'axis must be a TimedeltaIndex, but got an instance of {type(ax).__name__}')\n    if not len(ax):\n        binner = labels = TimedeltaIndex(data=[], freq=self.freq, name=ax.name)\n        return (binner, [], labels)\n    start, end = (ax.min(), ax.max())\n    labels = binner = timedelta_range(start=start, end=end, freq=self.freq, name=ax.name)\n    end_stamps = labels + self.freq\n    bins = ax.searchsorted(end_stamps, side='left')\n    if self.base > 0:\n        labels += type(self.freq)(self.base)\n    return (binner, bins, labels)",
                            "def _get_time_period_bins(self, ax):\n    if not isinstance(ax, DatetimeIndex):\n        raise TypeError(f'axis must be a DatetimeIndex, but got an instance of {type(ax).__name__}')\n    freq = self.freq\n    if not len(ax):\n        binner = labels = PeriodIndex(data=[], freq=freq, name=ax.name)\n        return (binner, [], labels)\n    labels = binner = period_range(start=ax[0], end=ax[-1], freq=freq, name=ax.name)\n    end_stamps = (labels + freq).asfreq(freq, 's').to_timestamp()\n    if ax.tzinfo:\n        end_stamps = end_stamps.tz_localize(ax.tzinfo)\n    bins = ax.searchsorted(end_stamps, side='left')\n    return (binner, bins, labels)",
                            "def _get_period_bins(self, ax):\n    if not isinstance(ax, PeriodIndex):\n        raise TypeError(f'axis must be a PeriodIndex, but got an instance of {type(ax).__name__}')\n    memb = ax.asfreq(self.freq, how=self.convention)\n    nat_count = 0\n    if memb.hasnans:\n        nat_count = np.sum(memb._isnan)\n        memb = memb[~memb._isnan]\n    if not len(memb):\n        binner = labels = PeriodIndex(data=[], freq=self.freq, name=ax.name)\n        return (binner, [], labels)\n    freq_mult = self.freq.n\n    start = ax.min().asfreq(self.freq, how=self.convention)\n    end = ax.max().asfreq(self.freq, how='end')\n    bin_shift = 0\n    if self.base:\n        p_start, end = _get_period_range_edges(start, end, self.freq, closed=self.closed, base=self.base)\n        start_offset = Period(start, self.freq) - Period(p_start, self.freq)\n        bin_shift = start_offset.n % freq_mult\n        start = p_start\n    labels = binner = period_range(start=start, end=end, freq=self.freq, name=ax.name)\n    i8 = memb.asi8\n    expected_bins_count = len(binner) * freq_mult\n    i8_extend = expected_bins_count - (i8[-1] - i8[0])\n    rng = np.arange(i8[0], i8[-1] + i8_extend, freq_mult)\n    rng += freq_mult\n    rng -= bin_shift\n    prng = type(memb._data)(rng, dtype=memb.dtype)\n    bins = memb.searchsorted(prng, side='left')\n    if nat_count > 0:\n        bins += nat_count\n        bins = np.insert(bins, 0, nat_count)\n        binner = binner.insert(0, NaT)\n        labels = labels.insert(0, NaT)\n    return (binner, bins, labels)"
                        ],
                        "constructor_variables": [
                            "convention",
                            "rule",
                            "how",
                            "freq",
                            "base",
                            "kind",
                            "loffset",
                            "end_types",
                            "label",
                            "limit",
                            "fill_method",
                            "closed"
                        ],
                        "class_level_variables": [
                            "_attributes"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, freq='Min', closed=None, label=None, how='mean', axis=0, fill_method=None, limit=None, loffset=None, kind=None, convention=None, base=0, **kwargs)",
                            "_get_resampler(self, obj, kind=None)",
                            "_get_grouper(self, obj, validate: bool=True)",
                            "_get_time_bins(self, ax)",
                            "_adjust_bin_edges(self, binner, ax_values)",
                            "_get_time_delta_bins(self, ax)",
                            "_get_time_period_bins(self, ax)",
                            "_get_period_bins(self, ax)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "ax": {
                                    "variable_value": "DatetimeIndex(['2018-11-03 08:00:00-04:00', '2018-11-03 09:00:00-04:00',\n               '2018-11-03 10:00:00-04:00', '2018-11-03 11:00:00-04:00',\n               '2018-11-03 12:00:00-04:00', '2018-11-03 13:00:00-04:00',\n               '2018-11-03 14:00:00-04:00', '2018-11-03 15:00:00-04:00',\n               '2018-11-03 16:00:00-04:00', '2018-11-03 17:00:00-04:00',\n               '2018-11-03 18:00:00-04:00', '2018-11-03 19:00:00-04:00',\n               '2018-11-03 20:00:00-04:00', '2018-11-03 21:00:00-04:00',\n               '2018-11-03 22:00:00-04:00', '2018-11-03 23:00:00-04:00',\n               '2018-11-04 00:00:00-04:00', '2018-11-04 00:00:00-05:00',\n               '2018-11-04 01:00:00-05:00', '2018-11-04 02:00:00-05:00',\n               '2018-11-04 03:00:00-05:00', '2018-11-04 04:00:00-05:00',\n               '2018-11-04 05:00:00-05:00', '2018-11-04 06:00:00-05:00',\n               '2018-11-04 07:00:00-05:00', '2018-11-04 08:00:00-05:00',\n               '2018-11-04 09:00:00-05:00', '2018-11-04 10:00:00-05:00',\n               '2018-11-04 11:00:00-05:00', '2018-11-04 12:00:00-05:00',\n               '2018-11-04 13:00:00-05:00', '2018-11-04 14:00:00-05:00',\n               '2018-11-04 15:00:00-05:00', '2018-11-04 16:00:00-05:00',\n               '2018-11-04 17:00:00-05:00', '2018-11-04 18:00:00-05:00',\n               '2018-11-04 19:00:00-05:00', '2018-11-04 20:00:00-05:00',\n               '2018-11-04 21:00:00-05:00', '2018-11-04 22:00:00-05:00',\n               '2018-11-04 23:00:00-05:00', '2018-11-05 00:00:00-05:00',\n               '2018-11-05 01:00:00-05:00', '2018-11-05 02:00:00-05:00',\n               '2018-11-05 03:00:00-05:00', '2018-11-05 04:00:00-05:00',\n               '2018-11-05 05:00:00-05:00', '2018-11-05 06:00:00-05:00',\n               '2018-11-05 07:00:00-05:00'],\n              dtype='datetime64[ns, America/Havana]', freq='H')",
                                    "variable_type": "DatetimeIndex"
                                },
                                "DatetimeIndex": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "binner": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "labels": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.freq": {
                                    "variable_value": "<Day>",
                                    "variable_type": "Day"
                                },
                                "self": {
                                    "variable_value": "TimeGrouper(freq=<Day>, axis=0, sort=True, closed='left', label='left', how='mean', convention='e', base=0)",
                                    "variable_type": "TimeGrouper"
                                },
                                "ax.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "first": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "last": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_get_timestamp_range_edges": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ax.min": {
                                    "variable_value": "<bound method DatetimeIndexOpsMixin.min of DatetimeIndex(['2018-11-03 08:00:00-04:00', '2018-11-03 09:00:00-04:00',\n               '2018-11-03 10:00:00-04:00', '2018-11-03 11:00:00-04:00',\n               '2018-11-03 12:00:00-04:00', '2018-11-03 13:00:00-04:00',\n               '2018-11-03 14:00:00-04:00', '2018-11-03 15:00:00-04:00',\n               '2018-11-03 16:00:00-04:00', '2018-11-03 17:00:00-04:00',\n               '2018-11-03 18:00:00-04:00', '2018-11-03 19:00:00-04:00',\n               '2018-11-03 20:00:00-04:00', '2018-11-03 21:00:00-04:00',\n               '2018-11-03 22:00:00-04:00', '2018-11-03 23:00:00-04:00',\n               '2018-11-04 00:00:00-04:00', '2018-11-04 00:00:00-05:00',\n               '2018-11-04 01:00:00-05:00', '2018-11-04 02:00:00-05:00',\n               '2018-11-04 03:00:00-05:00', '2018-11-04 04:00:00-05:00',\n               '2018-11-04 05:00:00-05:00', '2018-11-04 06:00:00-05:00',\n               '2018-11-04 07:00:00-05:00', '2018-11-04 08:00:00-05:00',\n               '2018-11-04 09:00:00-05:00', '2018-11-04 10:00:00-05:00',\n               '2018-11-04 11:00:00-05:00', '2018-11-04 12:00:00-05:00',\n               '2018-11-04 13:00:00-05:00', '2018-11-04 14:00:00-05:00',\n               '2018-11-04 15:00:00-05:00', '2018-11-04 16:00:00-05:00',\n               '2018-11-04 17:00:00-05:00', '2018-11-04 18:00:00-05:00',\n               '2018-11-04 19:00:00-05:00', '2018-11-04 20:00:00-05:00',\n               '2018-11-04 21:00:00-05:00', '2018-11-04 22:00:00-05:00',\n               '2018-11-04 23:00:00-05:00', '2018-11-05 00:00:00-05:00',\n               '2018-11-05 01:00:00-05:00', '2018-11-05 02:00:00-05:00',\n               '2018-11-05 03:00:00-05:00', '2018-11-05 04:00:00-05:00',\n               '2018-11-05 05:00:00-05:00', '2018-11-05 06:00:00-05:00',\n               '2018-11-05 07:00:00-05:00'],\n              dtype='datetime64[ns, America/Havana]', freq='H')>",
                                    "variable_type": "method"
                                },
                                "ax.max": {
                                    "variable_value": "<bound method DatetimeIndexOpsMixin.max of DatetimeIndex(['2018-11-03 08:00:00-04:00', '2018-11-03 09:00:00-04:00',\n               '2018-11-03 10:00:00-04:00', '2018-11-03 11:00:00-04:00',\n               '2018-11-03 12:00:00-04:00', '2018-11-03 13:00:00-04:00',\n               '2018-11-03 14:00:00-04:00', '2018-11-03 15:00:00-04:00',\n               '2018-11-03 16:00:00-04:00', '2018-11-03 17:00:00-04:00',\n               '2018-11-03 18:00:00-04:00', '2018-11-03 19:00:00-04:00',\n               '2018-11-03 20:00:00-04:00', '2018-11-03 21:00:00-04:00',\n               '2018-11-03 22:00:00-04:00', '2018-11-03 23:00:00-04:00',\n               '2018-11-04 00:00:00-04:00', '2018-11-04 00:00:00-05:00',\n               '2018-11-04 01:00:00-05:00', '2018-11-04 02:00:00-05:00',\n               '2018-11-04 03:00:00-05:00', '2018-11-04 04:00:00-05:00',\n               '2018-11-04 05:00:00-05:00', '2018-11-04 06:00:00-05:00',\n               '2018-11-04 07:00:00-05:00', '2018-11-04 08:00:00-05:00',\n               '2018-11-04 09:00:00-05:00', '2018-11-04 10:00:00-05:00',\n               '2018-11-04 11:00:00-05:00', '2018-11-04 12:00:00-05:00',\n               '2018-11-04 13:00:00-05:00', '2018-11-04 14:00:00-05:00',\n               '2018-11-04 15:00:00-05:00', '2018-11-04 16:00:00-05:00',\n               '2018-11-04 17:00:00-05:00', '2018-11-04 18:00:00-05:00',\n               '2018-11-04 19:00:00-05:00', '2018-11-04 20:00:00-05:00',\n               '2018-11-04 21:00:00-05:00', '2018-11-04 22:00:00-05:00',\n               '2018-11-04 23:00:00-05:00', '2018-11-05 00:00:00-05:00',\n               '2018-11-05 01:00:00-05:00', '2018-11-05 02:00:00-05:00',\n               '2018-11-05 03:00:00-05:00', '2018-11-05 04:00:00-05:00',\n               '2018-11-05 05:00:00-05:00', '2018-11-05 06:00:00-05:00',\n               '2018-11-05 07:00:00-05:00'],\n              dtype='datetime64[ns, America/Havana]', freq='H')>",
                                    "variable_type": "method"
                                },
                                "self.closed": {
                                    "variable_value": "left",
                                    "variable_type": "str"
                                },
                                "self.base": {
                                    "variable_value": "0",
                                    "variable_type": "int"
                                },
                                "date_range": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ax.tz": {
                                    "variable_value": "<DstTzInfo 'America/Havana' LMT-1 day, 18:31:00 STD>",
                                    "variable_type": "America/Havana"
                                },
                                "ax_values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ax.asi8": {
                                    "variable_value": "array([1541246400000000000, 1541250000000000000, 1541253600000000000,\n       1541257200000000000, 1541260800000000000, 1541264400000000000,\n       1541268000000000000, 1541271600000000000, 1541275200000000000,\n       1541278800000000000, 1541282400000000000, 1541286000000000000,\n       1541289600000000000, 1541293200000000000, 1541296800000000000,\n       1541300400000000000, 1541304000000000000, 1541307600000000000,\n       1541311200000000000, 1541314800000000000, 1541318400000000000,\n       1541322000000000000, 1541325600000000000, 1541329200000000000,\n       1541332800000000000, 1541336400000000000, 1541340000000000000,\n       1541343600000000000, 1541347200000000000, 1541350800000000000,\n       1541354400000000000, 1541358000000000000, 1541361600000000000,\n       1541365200000000000, 1541368800000000000, 1541372400000000000,\n       1541376000000000000, 1541379600000000000, 1541383200000000000,\n       1541386800000000000, 1541390400000000000, 1541394000000000000,\n       1541397600000000000, 1541401200000000000, 1541404800000000000,\n       1541408400000000000, 1541412000000000000, 1541415600000000000,\n       1541419200000000000])",
                                    "variable_type": "ndarray"
                                },
                                "bin_edges": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self._adjust_bin_edges": {
                                    "variable_value": "<bound method TimeGrouper._adjust_bin_edges of TimeGrouper(freq=<Day>, axis=0, sort=True, closed='left', label='left', how='mean', convention='e', base=0)>",
                                    "variable_type": "method"
                                },
                                "bins": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "lib.generate_bins_dt64": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "lib": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ax.hasnans": {
                                    "variable_value": "False",
                                    "variable_type": "bool"
                                },
                                "self.label": {
                                    "variable_value": "left",
                                    "variable_type": "str"
                                },
                                "binner.insert": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "NaT": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "labels.insert": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "ax": {
                                    "variable_value": "DatetimeIndex(['2018-11-03 08:00:00-04:00', '2018-11-03 09:00:00-04:00',\n               '2018-11-03 10:00:00-04:00', '2018-11-03 11:00:00-04:00',\n               '2018-11-03 12:00:00-04:00', '2018-11-03 13:00:00-04:00',\n               '2018-11-03 14:00:00-04:00', '2018-11-03 15:00:00-04:00',\n               '2018-11-03 16:00:00-04:00', '2018-11-03 17:00:00-04:00',\n               '2018-11-03 18:00:00-04:00', '2018-11-03 19:00:00-04:00',\n               '2018-11-03 20:00:00-04:00', '2018-11-03 21:00:00-04:00',\n               '2018-11-03 22:00:00-04:00', '2018-11-03 23:00:00-04:00',\n               '2018-11-04 00:00:00-04:00', '2018-11-04 00:00:00-05:00',\n               '2018-11-04 01:00:00-05:00', '2018-11-04 02:00:00-05:00',\n               '2018-11-04 03:00:00-05:00', '2018-11-04 04:00:00-05:00',\n               '2018-11-04 05:00:00-05:00', '2018-11-04 06:00:00-05:00',\n               '2018-11-04 07:00:00-05:00', '2018-11-04 08:00:00-05:00',\n               '2018-11-04 09:00:00-05:00', '2018-11-04 10:00:00-05:00',\n               '2018-11-04 11:00:00-05:00', '2018-11-04 12:00:00-05:00',\n               '2018-11-04 13:00:00-05:00', '2018-11-04 14:00:00-05:00',\n               '2018-11-04 15:00:00-05:00', '2018-11-04 16:00:00-05:00',\n               '2018-11-04 17:00:00-05:00', '2018-11-04 18:00:00-05:00',\n               '2018-11-04 19:00:00-05:00', '2018-11-04 20:00:00-05:00',\n               '2018-11-04 21:00:00-05:00', '2018-11-04 22:00:00-05:00',\n               '2018-11-04 23:00:00-05:00', '2018-11-05 00:00:00-05:00',\n               '2018-11-05 01:00:00-05:00', '2018-11-05 02:00:00-05:00',\n               '2018-11-05 03:00:00-05:00', '2018-11-05 04:00:00-05:00',\n               '2018-11-05 05:00:00-05:00', '2018-11-05 06:00:00-05:00',\n               '2018-11-05 07:00:00-05:00'],\n              dtype='datetime64[ns, America/Havana]', freq='H')",
                                    "variable_type": "DatetimeIndex"
                                },
                                "DatetimeIndex": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "binner": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "labels": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.freq": {
                                    "variable_value": "<Day>",
                                    "variable_type": "Day"
                                },
                                "self": {
                                    "variable_value": "TimeGrouper(freq=<Day>, axis=0, sort=True, closed='left', label='left', how='mean', convention='e', base=0)",
                                    "variable_type": "TimeGrouper"
                                },
                                "ax.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "first": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "last": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_get_timestamp_range_edges": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ax.min": {
                                    "variable_value": "<bound method DatetimeIndexOpsMixin.min of DatetimeIndex(['2018-11-03 08:00:00-04:00', '2018-11-03 09:00:00-04:00',\n               '2018-11-03 10:00:00-04:00', '2018-11-03 11:00:00-04:00',\n               '2018-11-03 12:00:00-04:00', '2018-11-03 13:00:00-04:00',\n               '2018-11-03 14:00:00-04:00', '2018-11-03 15:00:00-04:00',\n               '2018-11-03 16:00:00-04:00', '2018-11-03 17:00:00-04:00',\n               '2018-11-03 18:00:00-04:00', '2018-11-03 19:00:00-04:00',\n               '2018-11-03 20:00:00-04:00', '2018-11-03 21:00:00-04:00',\n               '2018-11-03 22:00:00-04:00', '2018-11-03 23:00:00-04:00',\n               '2018-11-04 00:00:00-04:00', '2018-11-04 00:00:00-05:00',\n               '2018-11-04 01:00:00-05:00', '2018-11-04 02:00:00-05:00',\n               '2018-11-04 03:00:00-05:00', '2018-11-04 04:00:00-05:00',\n               '2018-11-04 05:00:00-05:00', '2018-11-04 06:00:00-05:00',\n               '2018-11-04 07:00:00-05:00', '2018-11-04 08:00:00-05:00',\n               '2018-11-04 09:00:00-05:00', '2018-11-04 10:00:00-05:00',\n               '2018-11-04 11:00:00-05:00', '2018-11-04 12:00:00-05:00',\n               '2018-11-04 13:00:00-05:00', '2018-11-04 14:00:00-05:00',\n               '2018-11-04 15:00:00-05:00', '2018-11-04 16:00:00-05:00',\n               '2018-11-04 17:00:00-05:00', '2018-11-04 18:00:00-05:00',\n               '2018-11-04 19:00:00-05:00', '2018-11-04 20:00:00-05:00',\n               '2018-11-04 21:00:00-05:00', '2018-11-04 22:00:00-05:00',\n               '2018-11-04 23:00:00-05:00', '2018-11-05 00:00:00-05:00',\n               '2018-11-05 01:00:00-05:00', '2018-11-05 02:00:00-05:00',\n               '2018-11-05 03:00:00-05:00', '2018-11-05 04:00:00-05:00',\n               '2018-11-05 05:00:00-05:00', '2018-11-05 06:00:00-05:00',\n               '2018-11-05 07:00:00-05:00'],\n              dtype='datetime64[ns, America/Havana]', freq='H')>",
                                    "variable_type": "method"
                                },
                                "ax.max": {
                                    "variable_value": "<bound method DatetimeIndexOpsMixin.max of DatetimeIndex(['2018-11-03 08:00:00-04:00', '2018-11-03 09:00:00-04:00',\n               '2018-11-03 10:00:00-04:00', '2018-11-03 11:00:00-04:00',\n               '2018-11-03 12:00:00-04:00', '2018-11-03 13:00:00-04:00',\n               '2018-11-03 14:00:00-04:00', '2018-11-03 15:00:00-04:00',\n               '2018-11-03 16:00:00-04:00', '2018-11-03 17:00:00-04:00',\n               '2018-11-03 18:00:00-04:00', '2018-11-03 19:00:00-04:00',\n               '2018-11-03 20:00:00-04:00', '2018-11-03 21:00:00-04:00',\n               '2018-11-03 22:00:00-04:00', '2018-11-03 23:00:00-04:00',\n               '2018-11-04 00:00:00-04:00', '2018-11-04 00:00:00-05:00',\n               '2018-11-04 01:00:00-05:00', '2018-11-04 02:00:00-05:00',\n               '2018-11-04 03:00:00-05:00', '2018-11-04 04:00:00-05:00',\n               '2018-11-04 05:00:00-05:00', '2018-11-04 06:00:00-05:00',\n               '2018-11-04 07:00:00-05:00', '2018-11-04 08:00:00-05:00',\n               '2018-11-04 09:00:00-05:00', '2018-11-04 10:00:00-05:00',\n               '2018-11-04 11:00:00-05:00', '2018-11-04 12:00:00-05:00',\n               '2018-11-04 13:00:00-05:00', '2018-11-04 14:00:00-05:00',\n               '2018-11-04 15:00:00-05:00', '2018-11-04 16:00:00-05:00',\n               '2018-11-04 17:00:00-05:00', '2018-11-04 18:00:00-05:00',\n               '2018-11-04 19:00:00-05:00', '2018-11-04 20:00:00-05:00',\n               '2018-11-04 21:00:00-05:00', '2018-11-04 22:00:00-05:00',\n               '2018-11-04 23:00:00-05:00', '2018-11-05 00:00:00-05:00',\n               '2018-11-05 01:00:00-05:00', '2018-11-05 02:00:00-05:00',\n               '2018-11-05 03:00:00-05:00', '2018-11-05 04:00:00-05:00',\n               '2018-11-05 05:00:00-05:00', '2018-11-05 06:00:00-05:00',\n               '2018-11-05 07:00:00-05:00'],\n              dtype='datetime64[ns, America/Havana]', freq='H')>",
                                    "variable_type": "method"
                                },
                                "self.closed": {
                                    "variable_value": "left",
                                    "variable_type": "str"
                                },
                                "self.base": {
                                    "variable_value": "0",
                                    "variable_type": "int"
                                },
                                "date_range": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ax.tz": {
                                    "variable_value": "<DstTzInfo 'America/Havana' LMT-1 day, 18:31:00 STD>",
                                    "variable_type": "America/Havana"
                                },
                                "ax_values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ax.asi8": {
                                    "variable_value": "array([1541246400000000000, 1541250000000000000, 1541253600000000000,\n       1541257200000000000, 1541260800000000000, 1541264400000000000,\n       1541268000000000000, 1541271600000000000, 1541275200000000000,\n       1541278800000000000, 1541282400000000000, 1541286000000000000,\n       1541289600000000000, 1541293200000000000, 1541296800000000000,\n       1541300400000000000, 1541304000000000000, 1541307600000000000,\n       1541311200000000000, 1541314800000000000, 1541318400000000000,\n       1541322000000000000, 1541325600000000000, 1541329200000000000,\n       1541332800000000000, 1541336400000000000, 1541340000000000000,\n       1541343600000000000, 1541347200000000000, 1541350800000000000,\n       1541354400000000000, 1541358000000000000, 1541361600000000000,\n       1541365200000000000, 1541368800000000000, 1541372400000000000,\n       1541376000000000000, 1541379600000000000, 1541383200000000000,\n       1541386800000000000, 1541390400000000000, 1541394000000000000,\n       1541397600000000000, 1541401200000000000, 1541404800000000000,\n       1541408400000000000, 1541412000000000000, 1541415600000000000,\n       1541419200000000000])",
                                    "variable_type": "ndarray"
                                },
                                "bin_edges": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self._adjust_bin_edges": {
                                    "variable_value": "<bound method TimeGrouper._adjust_bin_edges of TimeGrouper(freq=<Day>, axis=0, sort=True, closed='left', label='left', how='mean', convention='e', base=0)>",
                                    "variable_type": "method"
                                },
                                "bins": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "lib.generate_bins_dt64": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "lib": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ax.hasnans": {
                                    "variable_value": "False",
                                    "variable_type": "bool"
                                },
                                "self.label": {
                                    "variable_value": "left",
                                    "variable_type": "str"
                                },
                                "binner.insert": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "NaT": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "labels.insert": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                }
                            },
                            {
                                "ax": {
                                    "variable_value": "DatetimeIndex(['2018-11-03 08:00:00-04:00', '2018-11-03 09:00:00-04:00',\n               '2018-11-03 10:00:00-04:00', '2018-11-03 11:00:00-04:00',\n               '2018-11-03 12:00:00-04:00', '2018-11-03 13:00:00-04:00',\n               '2018-11-03 14:00:00-04:00', '2018-11-03 15:00:00-04:00',\n               '2018-11-03 16:00:00-04:00', '2018-11-03 17:00:00-04:00',\n               '2018-11-03 18:00:00-04:00', '2018-11-03 19:00:00-04:00',\n               '2018-11-03 20:00:00-04:00', '2018-11-03 21:00:00-04:00',\n               '2018-11-03 22:00:00-04:00', '2018-11-03 23:00:00-04:00',\n               '2018-11-04 00:00:00-04:00', '2018-11-04 00:00:00-05:00',\n               '2018-11-04 01:00:00-05:00', '2018-11-04 02:00:00-05:00',\n               '2018-11-04 03:00:00-05:00', '2018-11-04 04:00:00-05:00',\n               '2018-11-04 05:00:00-05:00', '2018-11-04 06:00:00-05:00',\n               '2018-11-04 07:00:00-05:00', '2018-11-04 08:00:00-05:00',\n               '2018-11-04 09:00:00-05:00', '2018-11-04 10:00:00-05:00',\n               '2018-11-04 11:00:00-05:00', '2018-11-04 12:00:00-05:00',\n               '2018-11-04 13:00:00-05:00', '2018-11-04 14:00:00-05:00',\n               '2018-11-04 15:00:00-05:00', '2018-11-04 16:00:00-05:00',\n               '2018-11-04 17:00:00-05:00', '2018-11-04 18:00:00-05:00',\n               '2018-11-04 19:00:00-05:00', '2018-11-04 20:00:00-05:00',\n               '2018-11-04 21:00:00-05:00', '2018-11-04 22:00:00-05:00',\n               '2018-11-04 23:00:00-05:00', '2018-11-05 00:00:00-05:00',\n               '2018-11-05 01:00:00-05:00', '2018-11-05 02:00:00-05:00',\n               '2018-11-05 03:00:00-05:00', '2018-11-05 04:00:00-05:00',\n               '2018-11-05 05:00:00-05:00', '2018-11-05 06:00:00-05:00',\n               '2018-11-05 07:00:00-05:00'],\n              dtype='datetime64[ns, America/Havana]', freq='H')",
                                    "variable_type": "DatetimeIndex"
                                },
                                "DatetimeIndex": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "binner": {
                                    "variable_value": "DatetimeIndex(['2018-11-03 00:00:00-04:00', '2018-11-04 00:00:00-04:00',\n               '2018-11-05 00:00:00-05:00', '2018-11-06 00:00:00-05:00'],\n              dtype='datetime64[ns, America/Havana]', freq='D')",
                                    "variable_type": "DatetimeIndex"
                                },
                                "labels": {
                                    "variable_value": "DatetimeIndex(['2018-11-03 00:00:00-04:00', '2018-11-04 00:00:00-04:00',\n               '2018-11-05 00:00:00-05:00'],\n              dtype='datetime64[ns, America/Havana]', freq='D')",
                                    "variable_type": "DatetimeIndex"
                                },
                                "self.freq": {
                                    "variable_value": "<Day>",
                                    "variable_type": "Day"
                                },
                                "self": {
                                    "variable_value": "TimeGrouper(freq=<Day>, axis=0, sort=True, closed='left', label='left', how='mean', convention='e', base=0)",
                                    "variable_type": "TimeGrouper"
                                },
                                "ax.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "first": {
                                    "variable_value": "Timestamp('2018-11-03 00:00:00-0400', tz='America/Havana')",
                                    "variable_type": "Timestamp"
                                },
                                "last": {
                                    "variable_value": "Timestamp('2018-11-06 00:00:00-0500', tz='America/Havana')",
                                    "variable_type": "Timestamp"
                                },
                                "_get_timestamp_range_edges": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ax.min": {
                                    "variable_value": "<bound method DatetimeIndexOpsMixin.min of DatetimeIndex(['2018-11-03 08:00:00-04:00', '2018-11-03 09:00:00-04:00',\n               '2018-11-03 10:00:00-04:00', '2018-11-03 11:00:00-04:00',\n               '2018-11-03 12:00:00-04:00', '2018-11-03 13:00:00-04:00',\n               '2018-11-03 14:00:00-04:00', '2018-11-03 15:00:00-04:00',\n               '2018-11-03 16:00:00-04:00', '2018-11-03 17:00:00-04:00',\n               '2018-11-03 18:00:00-04:00', '2018-11-03 19:00:00-04:00',\n               '2018-11-03 20:00:00-04:00', '2018-11-03 21:00:00-04:00',\n               '2018-11-03 22:00:00-04:00', '2018-11-03 23:00:00-04:00',\n               '2018-11-04 00:00:00-04:00', '2018-11-04 00:00:00-05:00',\n               '2018-11-04 01:00:00-05:00', '2018-11-04 02:00:00-05:00',\n               '2018-11-04 03:00:00-05:00', '2018-11-04 04:00:00-05:00',\n               '2018-11-04 05:00:00-05:00', '2018-11-04 06:00:00-05:00',\n               '2018-11-04 07:00:00-05:00', '2018-11-04 08:00:00-05:00',\n               '2018-11-04 09:00:00-05:00', '2018-11-04 10:00:00-05:00',\n               '2018-11-04 11:00:00-05:00', '2018-11-04 12:00:00-05:00',\n               '2018-11-04 13:00:00-05:00', '2018-11-04 14:00:00-05:00',\n               '2018-11-04 15:00:00-05:00', '2018-11-04 16:00:00-05:00',\n               '2018-11-04 17:00:00-05:00', '2018-11-04 18:00:00-05:00',\n               '2018-11-04 19:00:00-05:00', '2018-11-04 20:00:00-05:00',\n               '2018-11-04 21:00:00-05:00', '2018-11-04 22:00:00-05:00',\n               '2018-11-04 23:00:00-05:00', '2018-11-05 00:00:00-05:00',\n               '2018-11-05 01:00:00-05:00', '2018-11-05 02:00:00-05:00',\n               '2018-11-05 03:00:00-05:00', '2018-11-05 04:00:00-05:00',\n               '2018-11-05 05:00:00-05:00', '2018-11-05 06:00:00-05:00',\n               '2018-11-05 07:00:00-05:00'],\n              dtype='datetime64[ns, America/Havana]', freq='H')>",
                                    "variable_type": "method"
                                },
                                "ax.max": {
                                    "variable_value": "<bound method DatetimeIndexOpsMixin.max of DatetimeIndex(['2018-11-03 08:00:00-04:00', '2018-11-03 09:00:00-04:00',\n               '2018-11-03 10:00:00-04:00', '2018-11-03 11:00:00-04:00',\n               '2018-11-03 12:00:00-04:00', '2018-11-03 13:00:00-04:00',\n               '2018-11-03 14:00:00-04:00', '2018-11-03 15:00:00-04:00',\n               '2018-11-03 16:00:00-04:00', '2018-11-03 17:00:00-04:00',\n               '2018-11-03 18:00:00-04:00', '2018-11-03 19:00:00-04:00',\n               '2018-11-03 20:00:00-04:00', '2018-11-03 21:00:00-04:00',\n               '2018-11-03 22:00:00-04:00', '2018-11-03 23:00:00-04:00',\n               '2018-11-04 00:00:00-04:00', '2018-11-04 00:00:00-05:00',\n               '2018-11-04 01:00:00-05:00', '2018-11-04 02:00:00-05:00',\n               '2018-11-04 03:00:00-05:00', '2018-11-04 04:00:00-05:00',\n               '2018-11-04 05:00:00-05:00', '2018-11-04 06:00:00-05:00',\n               '2018-11-04 07:00:00-05:00', '2018-11-04 08:00:00-05:00',\n               '2018-11-04 09:00:00-05:00', '2018-11-04 10:00:00-05:00',\n               '2018-11-04 11:00:00-05:00', '2018-11-04 12:00:00-05:00',\n               '2018-11-04 13:00:00-05:00', '2018-11-04 14:00:00-05:00',\n               '2018-11-04 15:00:00-05:00', '2018-11-04 16:00:00-05:00',\n               '2018-11-04 17:00:00-05:00', '2018-11-04 18:00:00-05:00',\n               '2018-11-04 19:00:00-05:00', '2018-11-04 20:00:00-05:00',\n               '2018-11-04 21:00:00-05:00', '2018-11-04 22:00:00-05:00',\n               '2018-11-04 23:00:00-05:00', '2018-11-05 00:00:00-05:00',\n               '2018-11-05 01:00:00-05:00', '2018-11-05 02:00:00-05:00',\n               '2018-11-05 03:00:00-05:00', '2018-11-05 04:00:00-05:00',\n               '2018-11-05 05:00:00-05:00', '2018-11-05 06:00:00-05:00',\n               '2018-11-05 07:00:00-05:00'],\n              dtype='datetime64[ns, America/Havana]', freq='H')>",
                                    "variable_type": "method"
                                },
                                "self.closed": {
                                    "variable_value": "left",
                                    "variable_type": "str"
                                },
                                "self.base": {
                                    "variable_value": "0",
                                    "variable_type": "int"
                                },
                                "date_range": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ax.tz": {
                                    "variable_value": "<DstTzInfo 'America/Havana' LMT-1 day, 18:31:00 STD>",
                                    "variable_type": "America/Havana"
                                },
                                "ax_values": {
                                    "variable_value": "array([1541246400000000000, 1541250000000000000, 1541253600000000000,\n       1541257200000000000, 1541260800000000000, 1541264400000000000,\n       1541268000000000000, 1541271600000000000, 1541275200000000000,\n       1541278800000000000, 1541282400000000000, 1541286000000000000,\n       1541289600000000000, 1541293200000000000, 1541296800000000000,\n       1541300400000000000, 1541304000000000000, 1541307600000000000,\n       1541311200000000000, 1541314800000000000, 1541318400000000000,\n       1541322000000000000, 1541325600000000000, 1541329200000000000,\n       1541332800000000000, 1541336400000000000, 1541340000000000000,\n       1541343600000000000, 1541347200000000000, 1541350800000000000,\n       1541354400000000000, 1541358000000000000, 1541361600000000000,\n       1541365200000000000, 1541368800000000000, 1541372400000000000,\n       1541376000000000000, 1541379600000000000, 1541383200000000000,\n       1541386800000000000, 1541390400000000000, 1541394000000000000,\n       1541397600000000000, 1541401200000000000, 1541404800000000000,\n       1541408400000000000, 1541412000000000000, 1541415600000000000,\n       1541419200000000000])",
                                    "variable_type": "ndarray"
                                },
                                "ax.asi8": {
                                    "variable_value": "array([1541246400000000000, 1541250000000000000, 1541253600000000000,\n       1541257200000000000, 1541260800000000000, 1541264400000000000,\n       1541268000000000000, 1541271600000000000, 1541275200000000000,\n       1541278800000000000, 1541282400000000000, 1541286000000000000,\n       1541289600000000000, 1541293200000000000, 1541296800000000000,\n       1541300400000000000, 1541304000000000000, 1541307600000000000,\n       1541311200000000000, 1541314800000000000, 1541318400000000000,\n       1541322000000000000, 1541325600000000000, 1541329200000000000,\n       1541332800000000000, 1541336400000000000, 1541340000000000000,\n       1541343600000000000, 1541347200000000000, 1541350800000000000,\n       1541354400000000000, 1541358000000000000, 1541361600000000000,\n       1541365200000000000, 1541368800000000000, 1541372400000000000,\n       1541376000000000000, 1541379600000000000, 1541383200000000000,\n       1541386800000000000, 1541390400000000000, 1541394000000000000,\n       1541397600000000000, 1541401200000000000, 1541404800000000000,\n       1541408400000000000, 1541412000000000000, 1541415600000000000,\n       1541419200000000000])",
                                    "variable_type": "ndarray"
                                },
                                "bin_edges": {
                                    "variable_value": "array([1541217600000000000, 1541304000000000000, 1541394000000000000,\n       1541480400000000000])",
                                    "variable_type": "ndarray"
                                },
                                "self._adjust_bin_edges": {
                                    "variable_value": "<bound method TimeGrouper._adjust_bin_edges of TimeGrouper(freq=<Day>, axis=0, sort=True, closed='left', label='left', how='mean', convention='e', base=0)>",
                                    "variable_type": "method"
                                },
                                "bins": {
                                    "variable_value": "array([16, 41, 49])",
                                    "variable_type": "ndarray"
                                },
                                "lib.generate_bins_dt64": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "lib": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ax.hasnans": {
                                    "variable_value": "False",
                                    "variable_type": "bool"
                                },
                                "self.label": {
                                    "variable_value": "left",
                                    "variable_type": "str"
                                },
                                "binner.insert": {
                                    "variable_value": "<bound method DatetimeTimedeltaMixin.insert of DatetimeIndex(['2018-11-03 00:00:00-04:00', '2018-11-04 00:00:00-04:00',\n               '2018-11-05 00:00:00-05:00', '2018-11-06 00:00:00-05:00'],\n              dtype='datetime64[ns, America/Havana]', freq='D')>",
                                    "variable_type": "method"
                                },
                                "NaT": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "labels.insert": {
                                    "variable_value": "<bound method DatetimeTimedeltaMixin.insert of DatetimeIndex(['2018-11-03 00:00:00-04:00', '2018-11-04 00:00:00-04:00',\n               '2018-11-05 00:00:00-05:00'],\n              dtype='datetime64[ns, America/Havana]', freq='D')>",
                                    "variable_type": "method"
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def get_resampler(obj, kind=None, **kwds):\n    \"\"\"\n    Create a TimeGrouper and return our resampler.\n    \"\"\"\n    tg = TimeGrouper(**kwds)\n    return tg._get_resampler(obj, kind=kind)",
                "def get_resampler_for_grouping(\n    groupby, rule, how=None, fill_method=None, limit=None, kind=None, **kwargs\n):\n    \"\"\"\n    Return our appropriate resampler when grouping as well.\n    \"\"\"\n    # .resample uses 'on' similar to how .groupby uses 'key'\n    kwargs[\"key\"] = kwargs.pop(\"on\", None)\n\n    tg = TimeGrouper(freq=rule, **kwargs)\n    resampler = tg._get_resampler(groupby.obj, kind=kind)\n    return resampler._get_resampler_for_grouping(groupby=groupby)",
                "def _take_new_index(obj, indexer, new_index, axis=0):\n\n    if isinstance(obj, ABCSeries):\n        new_values = algos.take_1d(obj._values, indexer)\n        return obj._constructor(new_values, index=new_index, name=obj.name)\n    elif isinstance(obj, ABCDataFrame):\n        if axis == 1:\n            raise NotImplementedError(\"axis 1 is not supported\")\n        return obj._constructor(\n            obj._data.reindex_indexer(new_axis=new_index, indexer=indexer, axis=1)\n        )\n    else:\n        raise ValueError(\"'obj' should be either a Series or a DataFrame\")",
                "def _get_timestamp_range_edges(first, last, offset, closed=\"left\", base=0):\n    \"\"\"\n    Adjust the `first` Timestamp to the preceding Timestamp that resides on\n    the provided offset. Adjust the `last` Timestamp to the following\n    Timestamp that resides on the provided offset. Input Timestamps that\n    already reside on the offset will be adjusted depending on the type of\n    offset and the `closed` parameter.\n\n    Parameters\n    ----------\n    first : pd.Timestamp\n        The beginning Timestamp of the range to be adjusted.\n    last : pd.Timestamp\n        The ending Timestamp of the range to be adjusted.\n    offset : pd.DateOffset\n        The dateoffset to which the Timestamps will be adjusted.\n    closed : {'right', 'left'}, default None\n        Which side of bin interval is closed.\n    base : int, default 0\n        The \"origin\" of the adjusted Timestamps.\n\n    Returns\n    -------\n    A tuple of length 2, containing the adjusted pd.Timestamp objects.\n    \"\"\"\n    if isinstance(offset, Tick):\n        if isinstance(offset, Day):\n            # _adjust_dates_anchored assumes 'D' means 24H, but first/last\n            # might contain a DST transition (23H, 24H, or 25H).\n            # So \"pretend\" the dates are naive when adjusting the endpoints\n            tz = first.tz\n            first = first.tz_localize(None)\n            last = last.tz_localize(None)\n\n        first, last = _adjust_dates_anchored(\n            first, last, offset, closed=closed, base=base\n        )\n        if isinstance(offset, Day):\n            first = first.tz_localize(tz)\n            last = last.tz_localize(tz)\n        return first, last\n\n    else:\n        first = first.normalize()\n        last = last.normalize()\n\n    if closed == \"left\":\n        first = Timestamp(offset.rollback(first))\n    else:\n        first = Timestamp(first - offset)\n\n    last = Timestamp(last + offset)\n\n    return first, last",
                "def _get_period_range_edges(first, last, offset, closed=\"left\", base=0):\n    \"\"\"\n    Adjust the provided `first` and `last` Periods to the respective Period of\n    the given offset that encompasses them.\n\n    Parameters\n    ----------\n    first : pd.Period\n        The beginning Period of the range to be adjusted.\n    last : pd.Period\n        The ending Period of the range to be adjusted.\n    offset : pd.DateOffset\n        The dateoffset to which the Periods will be adjusted.\n    closed : {'right', 'left'}, default None\n        Which side of bin interval is closed.\n    base : int, default 0\n        The \"origin\" of the adjusted Periods.\n\n    Returns\n    -------\n    A tuple of length 2, containing the adjusted pd.Period objects.\n    \"\"\"\n    if not all(isinstance(obj, Period) for obj in [first, last]):\n        raise TypeError(\"'first' and 'last' must be instances of type Period\")\n\n    # GH 23882\n    first = first.to_timestamp()\n    last = last.to_timestamp()\n    adjust_first = not offset.is_on_offset(first)\n    adjust_last = offset.is_on_offset(last)\n\n    first, last = _get_timestamp_range_edges(\n        first, last, offset, closed=closed, base=base\n    )\n\n    first = (first + adjust_first * offset).to_period(offset)\n    last = (last - adjust_last * offset).to_period(offset)\n    return first, last",
                "def _adjust_dates_anchored(first, last, offset, closed=\"right\", base=0):\n    # First and last offsets should be calculated from the start day to fix an\n    # error cause by resampling across multiple days when a one day period is\n    # not a multiple of the frequency.\n    #\n    # See https://github.com/pandas-dev/pandas/issues/8683\n\n    # GH 10117 & GH 19375. If first and last contain timezone information,\n    # Perform the calculation in UTC in order to avoid localizing on an\n    # Ambiguous or Nonexistent time.\n    first_tzinfo = first.tzinfo\n    last_tzinfo = last.tzinfo\n    start_day_nanos = first.normalize().value\n    if first_tzinfo is not None:\n        first = first.tz_convert(\"UTC\")\n    if last_tzinfo is not None:\n        last = last.tz_convert(\"UTC\")\n\n    base_nanos = (base % offset.n) * offset.nanos // offset.n\n    start_day_nanos += base_nanos\n\n    foffset = (first.value - start_day_nanos) % offset.nanos\n    loffset = (last.value - start_day_nanos) % offset.nanos\n\n    if closed == \"right\":\n        if foffset > 0:\n            # roll back\n            fresult = first.value - foffset\n        else:\n            fresult = first.value - offset.nanos\n\n        if loffset > 0:\n            # roll forward\n            lresult = last.value + (offset.nanos - loffset)\n        else:\n            # already the end of the road\n            lresult = last.value\n    else:  # closed == 'left'\n        if foffset > 0:\n            fresult = first.value - foffset\n        else:\n            # start of the road\n            fresult = first.value\n\n        if loffset > 0:\n            # roll forward\n            lresult = last.value + (offset.nanos - loffset)\n        else:\n            lresult = last.value + offset.nanos\n    fresult = Timestamp(fresult)\n    lresult = Timestamp(lresult)\n    if first_tzinfo is not None:\n        fresult = fresult.tz_localize(\"UTC\").tz_convert(first_tzinfo)\n    if last_tzinfo is not None:\n        lresult = lresult.tz_localize(\"UTC\").tz_convert(last_tzinfo)\n    return fresult, lresult",
                "def asfreq(obj, freq, method=None, how=None, normalize=False, fill_value=None):\n    \"\"\"\n    Utility frequency conversion method for Series/DataFrame.\n    \"\"\"\n    if isinstance(obj.index, PeriodIndex):\n        if method is not None:\n            raise NotImplementedError(\"'method' argument is not supported\")\n\n        if how is None:\n            how = \"E\"\n\n        new_obj = obj.copy()\n        new_obj.index = obj.index.asfreq(freq, how=how)\n\n    elif len(obj.index) == 0:\n        new_obj = obj.copy()\n\n        new_obj.index = _asfreq_compat(obj.index, freq)\n    else:\n        dti = date_range(obj.index[0], obj.index[-1], freq=freq)\n        dti.name = obj.index.name\n        new_obj = obj.reindex(dti, method=method, fill_value=fill_value)\n        if normalize:\n            new_obj.index = new_obj.index.normalize()\n\n    return new_obj",
                "def _asfreq_compat(index, freq):\n    \"\"\"\n    Helper to mimic asfreq on (empty) DatetimeIndex and TimedeltaIndex.\n\n    Parameters\n    ----------\n    index : PeriodIndex, DatetimeIndex, or TimedeltaIndex\n    freq : DateOffset\n\n    Returns\n    -------\n    same type as index\n    \"\"\"\n    if len(index) != 0:\n        # This should never be reached, always checked by the caller\n        raise ValueError(\n            \"Can only set arbitrary freq for empty DatetimeIndex or TimedeltaIndex\"\n        )\n    if isinstance(index, PeriodIndex):\n        new_index = index.asfreq(freq=freq)\n    else:\n        new_index = Index([], dtype=index.dtype, freq=freq, name=index.name)\n    return new_index",
                "def __init__(self, obj, groupby=None, axis=0, kind=None, **kwargs):\n    self.groupby = groupby\n    self.keys = None\n    self.sort = True\n    self.axis = axis\n    self.kind = kind\n    self.squeeze = False\n    self.group_keys = True\n    self.as_index = True\n    self.exclusions = set()\n    self.binner = None\n    self.grouper = None\n\n    if self.groupby is not None:\n        self.groupby._set_grouper(self._convert_obj(obj), sort=True)",
                "def __str__(self) -> str:\n    \"\"\"\n    Provide a nice str repr of our rolling object.\n    \"\"\"\n    attrs = (\n        f\"{k}={getattr(self.groupby, k)}\"\n        for k in self._attributes\n        if getattr(self.groupby, k, None) is not None\n    )\n    return f\"{type(self).__name__} [{', '.join(attrs)}]\"",
                "def __getattr__(self, attr: str):\n    if attr in self._internal_names_set:\n        return object.__getattribute__(self, attr)\n    if attr in self._attributes:\n        return getattr(self.groupby, attr)\n    if attr in self.obj:\n        return self[attr]\n\n    return object.__getattribute__(self, attr)",
                "def __iter__(self):\n    \"\"\"\n    Resampler iterator.\n\n    Returns\n    -------\n    Generator yielding sequence of (name, subsetted object)\n    for each group.\n\n    See Also\n    --------\n    GroupBy.__iter__\n    \"\"\"\n    self._set_binner()\n    return super().__iter__()",
                "@property\ndef obj(self):\n    return self.groupby.obj",
                "@property\ndef ax(self):\n    return self.groupby.ax",
                "@property\ndef _typ(self) -> str:\n    \"\"\"\n    Masquerade for compat as a Series or a DataFrame.\n    \"\"\"\n    if isinstance(self._selected_obj, ABCSeries):\n        return \"series\"\n    return \"dataframe\"",
                "@property\ndef _from_selection(self) -> bool:\n    \"\"\"\n    Is the resampling from a DataFrame column or MultiIndex level.\n    \"\"\"\n    # upsampling and PeriodIndex resampling do not work\n    # with selection, this state used to catch and raise an error\n    return self.groupby is not None and (\n        self.groupby.key is not None or self.groupby.level is not None\n    )",
                "def _convert_obj(self, obj):\n    \"\"\"\n    Provide any conversions for the object in order to correctly handle.\n\n    Parameters\n    ----------\n    obj : the object to be resampled\n\n    Returns\n    -------\n    obj : converted object\n    \"\"\"\n    obj = obj._consolidate()\n    return obj",
                "def _get_binner_for_time(self):\n    raise AbstractMethodError(self)",
                "def _set_binner(self):\n    \"\"\"\n    Setup our binners.\n\n    Cache these as we are an immutable object\n    \"\"\"\n    if self.binner is None:\n        self.binner, self.grouper = self._get_binner()",
                "def _get_binner(self):\n    \"\"\"\n    Create the BinGrouper, assume that self.set_grouper(obj)\n    has already been called.\n    \"\"\"\n    binner, bins, binlabels = self._get_binner_for_time()\n    assert len(bins) == len(binlabels)\n    bin_grouper = BinGrouper(bins, binlabels, indexer=self.groupby.indexer)\n    return binner, bin_grouper",
                "def _assure_grouper(self):\n    \"\"\"\n    Make sure that we are creating our binner & grouper.\n    \"\"\"\n    self._set_binner()",
                "@Substitution(\n    klass=\"Resampler\",\n    versionadded=\".. versionadded:: 0.23.0\",\n    examples=\"\"\"\n>>> df = pd.DataFrame({'A': [1, 2, 3, 4]},\n...                   index=pd.date_range('2012-08-02', periods=4))\n>>> df\n            A\n2012-08-02  1\n2012-08-03  2\n2012-08-04  3\n2012-08-05  4\n\nTo get the difference between each 2-day period's maximum and minimum\nvalue in one pass, you can do\n\n>>> df.resample('2D').pipe(lambda x: x.max() - x.min())\n            A\n2012-08-02  1\n2012-08-04  1\"\"\",\n)\n@Appender(_pipe_template)\ndef pipe(self, func, *args, **kwargs):\n    return super().pipe(func, *args, **kwargs)",
                "@Substitution(\n    see_also=_agg_see_also_doc,\n    examples=_agg_examples_doc,\n    versionadded=\"\",\n    klass=\"DataFrame\",\n    axis=\"\",\n)\n@Appender(_shared_docs[\"aggregate\"])\ndef aggregate(self, func, *args, **kwargs):\n\n    self._set_binner()\n    result, how = self._aggregate(func, *args, **kwargs)\n    if result is None:\n        how = func\n        grouper = None\n        result = self._groupby_and_aggregate(how, grouper, *args, **kwargs)\n\n    result = self._apply_loffset(result)\n    return result",
                "def transform(self, arg, *args, **kwargs):\n    \"\"\"\n    Call function producing a like-indexed Series on each group and return\n    a Series with the transformed values.\n\n    Parameters\n    ----------\n    arg : function\n        To apply to each group. Should return a Series with the same index.\n\n    Returns\n    -------\n    transformed : Series\n\n    Examples\n    --------\n    >>> resampled.transform(lambda x: (x - x.mean()) / x.std())\n    \"\"\"\n    return self._selected_obj.groupby(self.groupby).transform(arg, *args, **kwargs)",
                "def _downsample(self, f):\n    raise AbstractMethodError(self)",
                "def _upsample(self, f, limit=None, fill_value=None):\n    raise AbstractMethodError(self)",
                "def _gotitem(self, key, ndim: int, subset=None):\n    \"\"\"\n    Sub-classes to define. Return a sliced object.\n\n    Parameters\n    ----------\n    key : string / list of selections\n    ndim : 1,2\n        requested ndim of result\n    subset : object, default None\n        subset to act on\n    \"\"\"\n    self._set_binner()\n    grouper = self.grouper\n    if subset is None:\n        subset = self.obj\n    grouped = get_groupby(subset, by=None, grouper=grouper, axis=self.axis)\n\n    # try the key selection\n    try:\n        return grouped[key]\n    except KeyError:\n        return grouped",
                "def _groupby_and_aggregate(self, how, grouper=None, *args, **kwargs):\n    \"\"\"\n    Re-evaluate the obj with a groupby aggregation.\n    \"\"\"\n    if grouper is None:\n        self._set_binner()\n        grouper = self.grouper\n\n    obj = self._selected_obj\n\n    grouped = get_groupby(obj, by=None, grouper=grouper, axis=self.axis)\n\n    try:\n        if isinstance(obj, ABCDataFrame) and callable(how):\n            # Check if the function is reducing or not.\n            result = grouped._aggregate_item_by_item(how, *args, **kwargs)\n        else:\n            result = grouped.aggregate(how, *args, **kwargs)\n    except DataError:\n        # we have a non-reducing function; try to evaluate\n        result = grouped.apply(how, *args, **kwargs)\n    except ValueError as err:\n        if \"Must produce aggregated value\" in str(err):\n            # raised in _aggregate_named\n            pass\n        elif \"len(index) != len(labels)\" in str(err):\n            # raised in libgroupby validation\n            pass\n        elif \"No objects to concatenate\" in str(err):\n            # raised in concat call\n            #  In tests this is reached via either\n            #  _apply_to_column_groupbys (ohlc) or DataFrameGroupBy.nunique\n            pass\n        else:\n            raise\n\n        # we have a non-reducing function\n        # try to evaluate\n        result = grouped.apply(how, *args, **kwargs)\n\n    result = self._apply_loffset(result)\n    return self._wrap_result(result)",
                "def _apply_loffset(self, result):\n    \"\"\"\n    If loffset is set, offset the result index.\n\n    This is NOT an idempotent routine, it will be applied\n    exactly once to the result.\n\n    Parameters\n    ----------\n    result : Series or DataFrame\n        the result of resample\n    \"\"\"\n    needs_offset = (\n        isinstance(self.loffset, (DateOffset, timedelta, np.timedelta64))\n        and isinstance(result.index, DatetimeIndex)\n        and len(result.index) > 0\n    )\n\n    if needs_offset:\n        result.index = result.index + self.loffset\n\n    self.loffset = None\n    return result",
                "def _get_resampler_for_grouping(self, groupby, **kwargs):\n    \"\"\"\n    Return the correct class for resampling with groupby.\n    \"\"\"\n    return self._resampler_for_grouping(self, groupby=groupby, **kwargs)",
                "def _wrap_result(self, result):\n    \"\"\"\n    Potentially wrap any results.\n    \"\"\"\n    if isinstance(result, ABCSeries) and self._selection is not None:\n        result.name = self._selection\n\n    if isinstance(result, ABCSeries) and result.empty:\n        obj = self.obj\n        result.index = _asfreq_compat(obj.index, freq=self.freq)\n        result.name = getattr(obj, \"name\", None)\n\n    return result",
                "def pad(self, limit=None):\n    \"\"\"\n    Forward fill the values.\n\n    Parameters\n    ----------\n    limit : int, optional\n        Limit of how many values to fill.\n\n    Returns\n    -------\n    An upsampled Series.\n\n    See Also\n    --------\n    Series.fillna\n    DataFrame.fillna\n    \"\"\"\n    return self._upsample(\"pad\", limit=limit)",
                "def nearest(self, limit=None):\n    \"\"\"\n    Resample by using the nearest value.\n\n    When resampling data, missing values may appear (e.g., when the\n    resampling frequency is higher than the original frequency).\n    The `nearest` method will replace ``NaN`` values that appeared in\n    the resampled data with the value from the nearest member of the\n    sequence, based on the index value.\n    Missing values that existed in the original data will not be modified.\n    If `limit` is given, fill only this many values in each direction for\n    each of the original values.\n\n    Parameters\n    ----------\n    limit : int, optional\n        Limit of how many values to fill.\n\n        .. versionadded:: 0.21.0\n\n    Returns\n    -------\n    Series or DataFrame\n        An upsampled Series or DataFrame with ``NaN`` values filled with\n        their nearest value.\n\n    See Also\n    --------\n    backfill : Backward fill the new missing values in the resampled data.\n    pad : Forward fill ``NaN`` values.\n\n    Examples\n    --------\n    >>> s = pd.Series([1, 2],\n    ...               index=pd.date_range('20180101',\n    ...                                   periods=2,\n    ...                                   freq='1h'))\n    >>> s\n    2018-01-01 00:00:00    1\n    2018-01-01 01:00:00    2\n    Freq: H, dtype: int64\n\n    >>> s.resample('15min').nearest()\n    2018-01-01 00:00:00    1\n    2018-01-01 00:15:00    1\n    2018-01-01 00:30:00    2\n    2018-01-01 00:45:00    2\n    2018-01-01 01:00:00    2\n    Freq: 15T, dtype: int64\n\n    Limit the number of upsampled values imputed by the nearest:\n\n    >>> s.resample('15min').nearest(limit=1)\n    2018-01-01 00:00:00    1.0\n    2018-01-01 00:15:00    1.0\n    2018-01-01 00:30:00    NaN\n    2018-01-01 00:45:00    2.0\n    2018-01-01 01:00:00    2.0\n    Freq: 15T, dtype: float64\n    \"\"\"\n    return self._upsample(\"nearest\", limit=limit)",
                "def backfill(self, limit=None):\n    \"\"\"\n    Backward fill the new missing values in the resampled data.\n\n    In statistics, imputation is the process of replacing missing data with\n    substituted values [1]_. When resampling data, missing values may\n    appear (e.g., when the resampling frequency is higher than the original\n    frequency). The backward fill will replace NaN values that appeared in\n    the resampled data with the next value in the original sequence.\n    Missing values that existed in the original data will not be modified.\n\n    Parameters\n    ----------\n    limit : int, optional\n        Limit of how many values to fill.\n\n    Returns\n    -------\n    Series, DataFrame\n        An upsampled Series or DataFrame with backward filled NaN values.\n\n    See Also\n    --------\n    bfill : Alias of backfill.\n    fillna : Fill NaN values using the specified method, which can be\n        'backfill'.\n    nearest : Fill NaN values with nearest neighbor starting from center.\n    pad : Forward fill NaN values.\n    Series.fillna : Fill NaN values in the Series using the\n        specified method, which can be 'backfill'.\n    DataFrame.fillna : Fill NaN values in the DataFrame using the\n        specified method, which can be 'backfill'.\n\n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Imputation_(statistics)\n\n    Examples\n    --------\n    Resampling a Series:\n\n    >>> s = pd.Series([1, 2, 3],\n    ...               index=pd.date_range('20180101', periods=3, freq='h'))\n    >>> s\n    2018-01-01 00:00:00    1\n    2018-01-01 01:00:00    2\n    2018-01-01 02:00:00    3\n    Freq: H, dtype: int64\n\n    >>> s.resample('30min').backfill()\n    2018-01-01 00:00:00    1\n    2018-01-01 00:30:00    2\n    2018-01-01 01:00:00    2\n    2018-01-01 01:30:00    3\n    2018-01-01 02:00:00    3\n    Freq: 30T, dtype: int64\n\n    >>> s.resample('15min').backfill(limit=2)\n    2018-01-01 00:00:00    1.0\n    2018-01-01 00:15:00    NaN\n    2018-01-01 00:30:00    2.0\n    2018-01-01 00:45:00    2.0\n    2018-01-01 01:00:00    2.0\n    2018-01-01 01:15:00    NaN\n    2018-01-01 01:30:00    3.0\n    2018-01-01 01:45:00    3.0\n    2018-01-01 02:00:00    3.0\n    Freq: 15T, dtype: float64\n\n    Resampling a DataFrame that has missing values:\n\n    >>> df = pd.DataFrame({'a': [2, np.nan, 6], 'b': [1, 3, 5]},\n    ...                   index=pd.date_range('20180101', periods=3,\n    ...                                       freq='h'))\n    >>> df\n                           a  b\n    2018-01-01 00:00:00  2.0  1\n    2018-01-01 01:00:00  NaN  3\n    2018-01-01 02:00:00  6.0  5\n\n    >>> df.resample('30min').backfill()\n                           a  b\n    2018-01-01 00:00:00  2.0  1\n    2018-01-01 00:30:00  NaN  3\n    2018-01-01 01:00:00  NaN  3\n    2018-01-01 01:30:00  6.0  5\n    2018-01-01 02:00:00  6.0  5\n\n    >>> df.resample('15min').backfill(limit=2)\n                           a    b\n    2018-01-01 00:00:00  2.0  1.0\n    2018-01-01 00:15:00  NaN  NaN\n    2018-01-01 00:30:00  NaN  3.0\n    2018-01-01 00:45:00  NaN  3.0\n    2018-01-01 01:00:00  NaN  3.0\n    2018-01-01 01:15:00  NaN  NaN\n    2018-01-01 01:30:00  6.0  5.0\n    2018-01-01 01:45:00  6.0  5.0\n    2018-01-01 02:00:00  6.0  5.0\n    \"\"\"\n    return self._upsample(\"backfill\", limit=limit)",
                "def fillna(self, method, limit=None):\n    \"\"\"\n    Fill missing values introduced by upsampling.\n\n    In statistics, imputation is the process of replacing missing data with\n    substituted values [1]_. When resampling data, missing values may\n    appear (e.g., when the resampling frequency is higher than the original\n    frequency).\n\n    Missing values that existed in the original data will\n    not be modified.\n\n    Parameters\n    ----------\n    method : {'pad', 'backfill', 'ffill', 'bfill', 'nearest'}\n        Method to use for filling holes in resampled data\n\n        * 'pad' or 'ffill': use previous valid observation to fill gap\n          (forward fill).\n        * 'backfill' or 'bfill': use next valid observation to fill gap.\n        * 'nearest': use nearest valid observation to fill gap.\n\n    limit : int, optional\n        Limit of how many consecutive missing values to fill.\n\n    Returns\n    -------\n    Series or DataFrame\n        An upsampled Series or DataFrame with missing values filled.\n\n    See Also\n    --------\n    backfill : Backward fill NaN values in the resampled data.\n    pad : Forward fill NaN values in the resampled data.\n    nearest : Fill NaN values in the resampled data\n        with nearest neighbor starting from center.\n    interpolate : Fill NaN values using interpolation.\n    Series.fillna : Fill NaN values in the Series using the\n        specified method, which can be 'bfill' and 'ffill'.\n    DataFrame.fillna : Fill NaN values in the DataFrame using the\n        specified method, which can be 'bfill' and 'ffill'.\n\n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Imputation_(statistics)\n\n    Examples\n    --------\n    Resampling a Series:\n\n    >>> s = pd.Series([1, 2, 3],\n    ...               index=pd.date_range('20180101', periods=3, freq='h'))\n    >>> s\n    2018-01-01 00:00:00    1\n    2018-01-01 01:00:00    2\n    2018-01-01 02:00:00    3\n    Freq: H, dtype: int64\n\n    Without filling the missing values you get:\n\n    >>> s.resample(\"30min\").asfreq()\n    2018-01-01 00:00:00    1.0\n    2018-01-01 00:30:00    NaN\n    2018-01-01 01:00:00    2.0\n    2018-01-01 01:30:00    NaN\n    2018-01-01 02:00:00    3.0\n    Freq: 30T, dtype: float64\n\n    >>> s.resample('30min').fillna(\"backfill\")\n    2018-01-01 00:00:00    1\n    2018-01-01 00:30:00    2\n    2018-01-01 01:00:00    2\n    2018-01-01 01:30:00    3\n    2018-01-01 02:00:00    3\n    Freq: 30T, dtype: int64\n\n    >>> s.resample('15min').fillna(\"backfill\", limit=2)\n    2018-01-01 00:00:00    1.0\n    2018-01-01 00:15:00    NaN\n    2018-01-01 00:30:00    2.0\n    2018-01-01 00:45:00    2.0\n    2018-01-01 01:00:00    2.0\n    2018-01-01 01:15:00    NaN\n    2018-01-01 01:30:00    3.0\n    2018-01-01 01:45:00    3.0\n    2018-01-01 02:00:00    3.0\n    Freq: 15T, dtype: float64\n\n    >>> s.resample('30min').fillna(\"pad\")\n    2018-01-01 00:00:00    1\n    2018-01-01 00:30:00    1\n    2018-01-01 01:00:00    2\n    2018-01-01 01:30:00    2\n    2018-01-01 02:00:00    3\n    Freq: 30T, dtype: int64\n\n    >>> s.resample('30min').fillna(\"nearest\")\n    2018-01-01 00:00:00    1\n    2018-01-01 00:30:00    2\n    2018-01-01 01:00:00    2\n    2018-01-01 01:30:00    3\n    2018-01-01 02:00:00    3\n    Freq: 30T, dtype: int64\n\n    Missing values present before the upsampling are not affected.\n\n    >>> sm = pd.Series([1, None, 3],\n    ...               index=pd.date_range('20180101', periods=3, freq='h'))\n    >>> sm\n    2018-01-01 00:00:00    1.0\n    2018-01-01 01:00:00    NaN\n    2018-01-01 02:00:00    3.0\n    Freq: H, dtype: float64\n\n    >>> sm.resample('30min').fillna('backfill')\n    2018-01-01 00:00:00    1.0\n    2018-01-01 00:30:00    NaN\n    2018-01-01 01:00:00    NaN\n    2018-01-01 01:30:00    3.0\n    2018-01-01 02:00:00    3.0\n    Freq: 30T, dtype: float64\n\n    >>> sm.resample('30min').fillna('pad')\n    2018-01-01 00:00:00    1.0\n    2018-01-01 00:30:00    1.0\n    2018-01-01 01:00:00    NaN\n    2018-01-01 01:30:00    NaN\n    2018-01-01 02:00:00    3.0\n    Freq: 30T, dtype: float64\n\n    >>> sm.resample('30min').fillna('nearest')\n    2018-01-01 00:00:00    1.0\n    2018-01-01 00:30:00    NaN\n    2018-01-01 01:00:00    NaN\n    2018-01-01 01:30:00    3.0\n    2018-01-01 02:00:00    3.0\n    Freq: 30T, dtype: float64\n\n    DataFrame resampling is done column-wise. All the same options are\n    available.\n\n    >>> df = pd.DataFrame({'a': [2, np.nan, 6], 'b': [1, 3, 5]},\n    ...                   index=pd.date_range('20180101', periods=3,\n    ...                                       freq='h'))\n    >>> df\n                           a  b\n    2018-01-01 00:00:00  2.0  1\n    2018-01-01 01:00:00  NaN  3\n    2018-01-01 02:00:00  6.0  5\n\n    >>> df.resample('30min').fillna(\"bfill\")\n                           a  b\n    2018-01-01 00:00:00  2.0  1\n    2018-01-01 00:30:00  NaN  3\n    2018-01-01 01:00:00  NaN  3\n    2018-01-01 01:30:00  6.0  5\n    2018-01-01 02:00:00  6.0  5\n    \"\"\"\n    return self._upsample(method, limit=limit)",
                "@Appender(_shared_docs[\"interpolate\"] % _shared_docs_kwargs)\ndef interpolate(\n    self,\n    method=\"linear\",\n    axis=0,\n    limit=None,\n    inplace=False,\n    limit_direction=\"forward\",\n    limit_area=None,\n    downcast=None,\n    **kwargs,\n):\n    \"\"\"\n    Interpolate values according to different methods.\n    \"\"\"\n    result = self._upsample(None)\n    return result.interpolate(\n        method=method,\n        axis=axis,\n        limit=limit,\n        inplace=inplace,\n        limit_direction=limit_direction,\n        limit_area=limit_area,\n        downcast=downcast,\n        **kwargs,\n    )",
                "def asfreq(self, fill_value=None):\n    \"\"\"\n    Return the values at the new freq, essentially a reindex.\n\n    Parameters\n    ----------\n    fill_value : scalar, optional\n        Value to use for missing values, applied during upsampling (note\n        this does not fill NaNs that already were present).\n\n    Returns\n    -------\n    DataFrame or Series\n        Values at the specified freq.\n\n    See Also\n    --------\n    Series.asfreq\n    DataFrame.asfreq\n    \"\"\"\n    return self._upsample(\"asfreq\", fill_value=fill_value)",
                "def std(self, ddof=1, *args, **kwargs):\n    \"\"\"\n    Compute standard deviation of groups, excluding missing values.\n\n    Parameters\n    ----------\n    ddof : int, default 1\n        Degrees of freedom.\n\n    Returns\n    -------\n    DataFrame or Series\n        Standard deviation of values within each group.\n    \"\"\"\n    nv.validate_resampler_func(\"std\", args, kwargs)\n    return self._downsample(\"std\", ddof=ddof)",
                "def var(self, ddof=1, *args, **kwargs):\n    \"\"\"\n    Compute variance of groups, excluding missing values.\n\n    Parameters\n    ----------\n    ddof : int, default 1\n        Degrees of freedom.\n\n    Returns\n    -------\n    DataFrame or Series\n        Variance of values within each group.\n    \"\"\"\n    nv.validate_resampler_func(\"var\", args, kwargs)\n    return self._downsample(\"var\", ddof=ddof)",
                "@doc(GroupBy.size)\ndef size(self):\n    result = self._downsample(\"size\")\n    if not len(self.ax):\n        from pandas import Series\n\n        if self._selected_obj.ndim == 1:\n            name = self._selected_obj.name\n        else:\n            name = None\n        result = Series([], index=result.index, dtype=\"int64\", name=name)\n    return result",
                "@doc(GroupBy.count)\ndef count(self):\n    result = self._downsample(\"count\")\n    if not len(self.ax):\n        if self._selected_obj.ndim == 1:\n            result = type(self._selected_obj)(\n                [], index=result.index, dtype=\"int64\", name=self._selected_obj.name\n            )\n        else:\n            from pandas import DataFrame\n\n            result = DataFrame(\n                [], index=result.index, columns=result.columns, dtype=\"int64\"\n            )\n\n    return result",
                "def quantile(self, q=0.5, **kwargs):\n    \"\"\"\n    Return value at the given quantile.\n\n    .. versionadded:: 0.24.0\n\n    Parameters\n    ----------\n    q : float or array-like, default 0.5 (50% quantile)\n\n    Returns\n    -------\n    DataFrame or Series\n        Quantile of values within each group.\n\n    See Also\n    --------\n    Series.quantile\n    DataFrame.quantile\n    DataFrameGroupBy.quantile\n    \"\"\"\n    return self._downsample(\"quantile\", q=q, **kwargs)",
                "def f(self, _method=method, min_count=0, *args, **kwargs):\n    nv.validate_resampler_func(_method, args, kwargs)\n    return self._downsample(_method, min_count=min_count)",
                "def g(self, _method=method, *args, **kwargs):\n    nv.validate_resampler_func(_method, args, kwargs)\n    return self._downsample(_method)",
                "def h(self, _method=method):\n    return self._downsample(_method)",
                "def __init__(self, obj, *args, **kwargs):\n\n    parent = kwargs.pop(\"parent\", None)\n    groupby = kwargs.pop(\"groupby\", None)\n    if parent is None:\n        parent = obj\n\n    # initialize our GroupByMixin object with\n    # the resampler attributes\n    for attr in self._attributes:\n        setattr(self, attr, kwargs.get(attr, getattr(parent, attr)))\n\n    super().__init__(None)\n    self._groupby = groupby\n    self._groupby.mutated = True\n    self._groupby.grouper.mutated = True\n    self.groupby = copy.copy(parent.groupby)",
                "@no_type_check\ndef _apply(self, f, grouper=None, *args, **kwargs):\n    \"\"\"\n    Dispatch to _upsample; we are stripping all of the _upsample kwargs and\n    performing the original function call on the grouped object.\n    \"\"\"\n\n    def func(x):\n        x = self._shallow_copy(x, groupby=self.groupby)\n\n        if isinstance(f, str):\n            return getattr(x, f)(**kwargs)\n\n        return x.apply(f, *args, **kwargs)\n\n    result = self._groupby.apply(func)\n    return self._wrap_result(result)",
                "@property\ndef _resampler_for_grouping(self):\n    return DatetimeIndexResamplerGroupby",
                "def _get_binner_for_time(self):\n\n    # this is how we are actually creating the bins\n    if self.kind == \"period\":\n        return self.groupby._get_time_period_bins(self.ax)\n    return self.groupby._get_time_bins(self.ax)",
                "def _downsample(self, how, **kwargs):\n    \"\"\"\n    Downsample the cython defined function.\n\n    Parameters\n    ----------\n    how : string / cython mapped function\n    **kwargs : kw args passed to how function\n    \"\"\"\n    self._set_binner()\n    how = self._get_cython_func(how) or how\n    ax = self.ax\n    obj = self._selected_obj\n\n    if not len(ax):\n        # reset to the new freq\n        obj = obj.copy()\n        obj.index._set_freq(self.freq)\n        return obj\n\n    # do we have a regular frequency\n    if ax.freq is not None or ax.inferred_freq is not None:\n\n        if len(self.grouper.binlabels) > len(ax) and how is None:\n\n            # let's do an asfreq\n            return self.asfreq()\n\n    # we are downsampling\n    # we want to call the actual grouper method here\n    result = obj.groupby(self.grouper, axis=self.axis).aggregate(how, **kwargs)\n\n    result = self._apply_loffset(result)\n    return self._wrap_result(result)",
                "def _adjust_binner_for_upsample(self, binner):\n    \"\"\"\n    Adjust our binner when upsampling.\n\n    The range of a new index should not be outside specified range\n    \"\"\"\n    if self.closed == \"right\":\n        binner = binner[1:]\n    else:\n        binner = binner[:-1]\n    return binner",
                "def _upsample(self, method, limit=None, fill_value=None):\n    \"\"\"\n    Parameters\n    ----------\n    method : string {'backfill', 'bfill', 'pad',\n        'ffill', 'asfreq'} method for upsampling\n    limit : int, default None\n        Maximum size gap to fill when reindexing\n    fill_value : scalar, default None\n        Value to use for missing values\n\n    See Also\n    --------\n    .fillna\n\n    \"\"\"\n    self._set_binner()\n    if self.axis:\n        raise AssertionError(\"axis must be 0\")\n    if self._from_selection:\n        raise ValueError(\n            \"Upsampling from level= or on= selection \"\n            \"is not supported, use .set_index(...) \"\n            \"to explicitly set index to datetime-like\"\n        )\n\n    ax = self.ax\n    obj = self._selected_obj\n    binner = self.binner\n    res_index = self._adjust_binner_for_upsample(binner)\n\n    # if we have the same frequency as our axis, then we are equal sampling\n    if limit is None and to_offset(ax.inferred_freq) == self.freq:\n        result = obj.copy()\n        result.index = res_index\n    else:\n        result = obj.reindex(\n            res_index, method=method, limit=limit, fill_value=fill_value\n        )\n\n    result = self._apply_loffset(result)\n    return self._wrap_result(result)",
                "def _wrap_result(self, result):\n    result = super()._wrap_result(result)\n\n    # we may have a different kind that we were asked originally\n    # convert if needed\n    if self.kind == \"period\" and not isinstance(result.index, PeriodIndex):\n        result.index = result.index.to_period(self.freq)\n    return result",
                "@property\ndef _constructor(self):\n    return DatetimeIndexResampler",
                "@property\ndef _resampler_for_grouping(self):\n    return PeriodIndexResamplerGroupby",
                "def _get_binner_for_time(self):\n    if self.kind == \"timestamp\":\n        return super()._get_binner_for_time()\n    return self.groupby._get_period_bins(self.ax)",
                "def _convert_obj(self, obj):\n    obj = super()._convert_obj(obj)\n\n    if self._from_selection:\n        # see GH 14008, GH 12871\n        msg = (\n            \"Resampling from level= or on= selection \"\n            \"with a PeriodIndex is not currently supported, \"\n            \"use .set_index(...) to explicitly set index\"\n        )\n        raise NotImplementedError(msg)\n\n    if self.loffset is not None:\n        # Cannot apply loffset/timedelta to PeriodIndex -> convert to\n        # timestamps\n        self.kind = \"timestamp\"\n\n    # convert to timestamp\n    if self.kind == \"timestamp\":\n        obj = obj.to_timestamp(how=self.convention)\n\n    return obj",
                "def _downsample(self, how, **kwargs):\n    \"\"\"\n    Downsample the cython defined function.\n\n    Parameters\n    ----------\n    how : string / cython mapped function\n    **kwargs : kw args passed to how function\n    \"\"\"\n    # we may need to actually resample as if we are timestamps\n    if self.kind == \"timestamp\":\n        return super()._downsample(how, **kwargs)\n\n    how = self._get_cython_func(how) or how\n    ax = self.ax\n\n    if is_subperiod(ax.freq, self.freq):\n        # Downsampling\n        return self._groupby_and_aggregate(how, grouper=self.grouper, **kwargs)\n    elif is_superperiod(ax.freq, self.freq):\n        if how == \"ohlc\":\n            # GH #13083\n            # upsampling to subperiods is handled as an asfreq, which works\n            # for pure aggregating/reducing methods\n            # OHLC reduces along the time dimension, but creates multiple\n            # values for each period -> handle by _groupby_and_aggregate()\n            return self._groupby_and_aggregate(how, grouper=self.grouper)\n        return self.asfreq()\n    elif ax.freq == self.freq:\n        return self.asfreq()\n\n    raise IncompatibleFrequency(\n        f\"Frequency {ax.freq} cannot be resampled to {self.freq}, \"\n        \"as they are not sub or super periods\"\n    )",
                "def _upsample(self, method, limit=None, fill_value=None):\n    \"\"\"\n    Parameters\n    ----------\n    method : string {'backfill', 'bfill', 'pad', 'ffill'}\n        Method for upsampling.\n    limit : int, default None\n        Maximum size gap to fill when reindexing.\n    fill_value : scalar, default None\n        Value to use for missing values.\n\n    See Also\n    --------\n    .fillna\n\n    \"\"\"\n    # we may need to actually resample as if we are timestamps\n    if self.kind == \"timestamp\":\n        return super()._upsample(method, limit=limit, fill_value=fill_value)\n\n    self._set_binner()\n    ax = self.ax\n    obj = self.obj\n    new_index = self.binner\n\n    # Start vs. end of period\n    memb = ax.asfreq(self.freq, how=self.convention)\n\n    # Get the fill indexer\n    indexer = memb.get_indexer(new_index, method=method, limit=limit)\n    return self._wrap_result(\n        _take_new_index(obj, indexer, new_index, axis=self.axis)\n    )",
                "@property\ndef _constructor(self):\n    return PeriodIndexResampler",
                "@property\ndef _resampler_for_grouping(self):\n    return TimedeltaIndexResamplerGroupby",
                "def _get_binner_for_time(self):\n    return self.groupby._get_time_delta_bins(self.ax)",
                "def _adjust_binner_for_upsample(self, binner):\n    \"\"\"\n    Adjust our binner when upsampling.\n\n    The range of a new index is allowed to be greater than original range\n    so we don't need to change the length of a binner, GH 13022\n    \"\"\"\n    return binner",
                "@property\ndef _constructor(self):\n    return TimedeltaIndexResampler",
                "def __init__(\n    self,\n    freq=\"Min\",\n    closed=None,\n    label=None,\n    how=\"mean\",\n    axis=0,\n    fill_method=None,\n    limit=None,\n    loffset=None,\n    kind=None,\n    convention=None,\n    base=0,\n    **kwargs,\n):\n    # Check for correctness of the keyword arguments which would\n    # otherwise silently use the default if misspelled\n    if label not in {None, \"left\", \"right\"}:\n        raise ValueError(f\"Unsupported value {label} for `label`\")\n    if closed not in {None, \"left\", \"right\"}:\n        raise ValueError(f\"Unsupported value {closed} for `closed`\")\n    if convention not in {None, \"start\", \"end\", \"e\", \"s\"}:\n        raise ValueError(f\"Unsupported value {convention} for `convention`\")\n\n    freq = to_offset(freq)\n\n    end_types = {\"M\", \"A\", \"Q\", \"BM\", \"BA\", \"BQ\", \"W\"}\n    rule = freq.rule_code\n    if rule in end_types or (\"-\" in rule and rule[: rule.find(\"-\")] in end_types):\n        if closed is None:\n            closed = \"right\"\n        if label is None:\n            label = \"right\"\n    else:\n        if closed is None:\n            closed = \"left\"\n        if label is None:\n            label = \"left\"\n\n    self.closed = closed\n    self.label = label\n    self.kind = kind\n\n    self.convention = convention or \"E\"\n    self.convention = self.convention.lower()\n\n    if isinstance(loffset, str):\n        loffset = to_offset(loffset)\n    self.loffset = loffset\n\n    self.how = how\n    self.fill_method = fill_method\n    self.limit = limit\n    self.base = base\n\n    # always sort time groupers\n    kwargs[\"sort\"] = True\n\n    super().__init__(freq=freq, axis=axis, **kwargs)",
                "def _get_resampler(self, obj, kind=None):\n    \"\"\"\n    Return my resampler or raise if we have an invalid axis.\n\n    Parameters\n    ----------\n    obj : input object\n    kind : string, optional\n        'period','timestamp','timedelta' are valid\n\n    Returns\n    -------\n    a Resampler\n\n    Raises\n    ------\n    TypeError if incompatible axis\n\n    \"\"\"\n    self._set_grouper(obj)\n\n    ax = self.ax\n    if isinstance(ax, DatetimeIndex):\n        return DatetimeIndexResampler(obj, groupby=self, kind=kind, axis=self.axis)\n    elif isinstance(ax, PeriodIndex) or kind == \"period\":\n        return PeriodIndexResampler(obj, groupby=self, kind=kind, axis=self.axis)\n    elif isinstance(ax, TimedeltaIndex):\n        return TimedeltaIndexResampler(obj, groupby=self, axis=self.axis)\n\n    raise TypeError(\n        \"Only valid with DatetimeIndex, \"\n        \"TimedeltaIndex or PeriodIndex, \"\n        f\"but got an instance of '{type(ax).__name__}'\"\n    )",
                "def _get_grouper(self, obj, validate: bool = True):\n    # create the resampler and return our binner\n    r = self._get_resampler(obj)\n    r._set_binner()\n    return r.binner, r.grouper, r.obj",
                "def _get_time_bins(self, ax):\n    if not isinstance(ax, DatetimeIndex):\n        raise TypeError(\n            \"axis must be a DatetimeIndex, but got \"\n            f\"an instance of {type(ax).__name__}\"\n        )\n\n    if len(ax) == 0:\n        binner = labels = DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n        return binner, [], labels\n\n    first, last = _get_timestamp_range_edges(\n        ax.min(), ax.max(), self.freq, closed=self.closed, base=self.base\n    )\n    # GH #12037\n    # use first/last directly instead of call replace() on them\n    # because replace() will swallow the nanosecond part\n    # thus last bin maybe slightly before the end if the end contains\n    # nanosecond part and lead to `Values falls after last bin` error\n    binner = labels = date_range(\n        freq=self.freq,\n        start=first,\n        end=last,\n        tz=ax.tz,\n        name=ax.name,\n        ambiguous=\"infer\",\n        nonexistent=\"shift_forward\",\n    )\n\n    ax_values = ax.asi8\n    binner, bin_edges = self._adjust_bin_edges(binner, ax_values)\n\n    # general version, knowing nothing about relative frequencies\n    bins = lib.generate_bins_dt64(\n        ax_values, bin_edges, self.closed, hasnans=ax.hasnans\n    )\n\n    if self.closed == \"right\":\n        labels = binner\n        if self.label == \"right\":\n            labels = labels[1:]\n    elif self.label == \"right\":\n        labels = labels[1:]\n\n    if ax.hasnans:\n        binner = binner.insert(0, NaT)\n        labels = labels.insert(0, NaT)\n\n    # if we end up with more labels than bins\n    # adjust the labels\n    # GH4076\n    if len(bins) < len(labels):\n        labels = labels[: len(bins)]\n\n    return binner, bins, labels",
                "def _adjust_bin_edges(self, binner, ax_values):\n    # Some hacks for > daily data, see #1471, #1458, #1483\n\n    if self.freq != \"D\" and is_superperiod(self.freq, \"D\"):\n        if self.closed == \"right\":\n            # GH 21459, GH 9119: Adjust the bins relative to the wall time\n            bin_edges = binner.tz_localize(None)\n            bin_edges = bin_edges + timedelta(1) - Nano(1)\n            bin_edges = bin_edges.tz_localize(binner.tz).asi8\n        else:\n            bin_edges = binner.asi8\n\n        # intraday values on last day\n        if bin_edges[-2] > ax_values.max():\n            bin_edges = bin_edges[:-1]\n            binner = binner[:-1]\n    else:\n        bin_edges = binner.asi8\n    return binner, bin_edges",
                "def _get_time_delta_bins(self, ax):\n    if not isinstance(ax, TimedeltaIndex):\n        raise TypeError(\n            \"axis must be a TimedeltaIndex, but got \"\n            f\"an instance of {type(ax).__name__}\"\n        )\n\n    if not len(ax):\n        binner = labels = TimedeltaIndex(data=[], freq=self.freq, name=ax.name)\n        return binner, [], labels\n\n    start, end = ax.min(), ax.max()\n    labels = binner = timedelta_range(\n        start=start, end=end, freq=self.freq, name=ax.name\n    )\n\n    end_stamps = labels + self.freq\n    bins = ax.searchsorted(end_stamps, side=\"left\")\n\n    # Addresses GH #10530\n    if self.base > 0:\n        labels += type(self.freq)(self.base)\n\n    return binner, bins, labels",
                "def _get_time_period_bins(self, ax):\n    if not isinstance(ax, DatetimeIndex):\n        raise TypeError(\n            \"axis must be a DatetimeIndex, but got \"\n            f\"an instance of {type(ax).__name__}\"\n        )\n\n    freq = self.freq\n\n    if not len(ax):\n        binner = labels = PeriodIndex(data=[], freq=freq, name=ax.name)\n        return binner, [], labels\n\n    labels = binner = period_range(start=ax[0], end=ax[-1], freq=freq, name=ax.name)\n\n    end_stamps = (labels + freq).asfreq(freq, \"s\").to_timestamp()\n    if ax.tzinfo:\n        end_stamps = end_stamps.tz_localize(ax.tzinfo)\n    bins = ax.searchsorted(end_stamps, side=\"left\")\n\n    return binner, bins, labels",
                "def _get_period_bins(self, ax):\n    if not isinstance(ax, PeriodIndex):\n        raise TypeError(\n            \"axis must be a PeriodIndex, but got \"\n            f\"an instance of {type(ax).__name__}\"\n        )\n\n    memb = ax.asfreq(self.freq, how=self.convention)\n\n    # NaT handling as in pandas._lib.lib.generate_bins_dt64()\n    nat_count = 0\n    if memb.hasnans:\n        nat_count = np.sum(memb._isnan)\n        memb = memb[~memb._isnan]\n\n    # if index contains no valid (non-NaT) values, return empty index\n    if not len(memb):\n        binner = labels = PeriodIndex(data=[], freq=self.freq, name=ax.name)\n        return binner, [], labels\n\n    freq_mult = self.freq.n\n\n    start = ax.min().asfreq(self.freq, how=self.convention)\n    end = ax.max().asfreq(self.freq, how=\"end\")\n    bin_shift = 0\n\n    # GH 23882\n    if self.base:\n        # get base adjusted bin edge labels\n        p_start, end = _get_period_range_edges(\n            start, end, self.freq, closed=self.closed, base=self.base\n        )\n\n        # Get offset for bin edge (not label edge) adjustment\n        start_offset = Period(start, self.freq) - Period(p_start, self.freq)\n        bin_shift = start_offset.n % freq_mult\n        start = p_start\n\n    labels = binner = period_range(\n        start=start, end=end, freq=self.freq, name=ax.name\n    )\n\n    i8 = memb.asi8\n\n    # when upsampling to subperiods, we need to generate enough bins\n    expected_bins_count = len(binner) * freq_mult\n    i8_extend = expected_bins_count - (i8[-1] - i8[0])\n    rng = np.arange(i8[0], i8[-1] + i8_extend, freq_mult)\n    rng += freq_mult\n    # adjust bin edge indexes to account for base\n    rng -= bin_shift\n\n    # Wrap in PeriodArray for PeriodArray.searchsorted\n    prng = type(memb._data)(rng, dtype=memb.dtype)\n    bins = memb.searchsorted(prng, side=\"left\")\n\n    if nat_count > 0:\n        # NaT handling as in pandas._lib.lib.generate_bins_dt64()\n        # shift bins by the number of NaT\n        bins += nat_count\n        bins = np.insert(bins, 0, nat_count)\n        binner = binner.insert(0, NaT)\n        labels = labels.insert(0, NaT)\n\n    return binner, bins, labels",
                "def func(x):\n    x = self._shallow_copy(x, groupby=self.groupby)\n\n    if isinstance(f, str):\n        return getattr(x, f)(**kwargs)\n\n    return x.apply(f, *args, **kwargs)"
            ],
            "inscope_function_signatures": [
                "get_resampler(obj, kind=None, **kwds)",
                "get_resampler_for_grouping(groupby, rule, how=None, fill_method=None, limit=None, kind=None, **kwargs)",
                "_take_new_index(obj, indexer, new_index, axis=0)",
                "_get_timestamp_range_edges(first, last, offset, closed='left', base=0)",
                "_get_period_range_edges(first, last, offset, closed='left', base=0)",
                "_adjust_dates_anchored(first, last, offset, closed='right', base=0)",
                "asfreq(obj, freq, method=None, how=None, normalize=False, fill_value=None)",
                "_asfreq_compat(index, freq)",
                "__init__(self, obj, groupby=None, axis=0, kind=None, **kwargs)",
                "__str__(self) -> str",
                "__getattr__(self, attr: str)",
                "__iter__(self)",
                "obj(self)",
                "ax(self)",
                "_typ(self) -> str",
                "_from_selection(self) -> bool",
                "_convert_obj(self, obj)",
                "_get_binner_for_time(self)",
                "_set_binner(self)",
                "_get_binner(self)",
                "_assure_grouper(self)",
                "pipe(self, func, *args, **kwargs)",
                "aggregate(self, func, *args, **kwargs)",
                "transform(self, arg, *args, **kwargs)",
                "_downsample(self, f)",
                "_upsample(self, f, limit=None, fill_value=None)",
                "_gotitem(self, key, ndim: int, subset=None)",
                "_groupby_and_aggregate(self, how, grouper=None, *args, **kwargs)",
                "_apply_loffset(self, result)",
                "_get_resampler_for_grouping(self, groupby, **kwargs)",
                "_wrap_result(self, result)",
                "pad(self, limit=None)",
                "nearest(self, limit=None)",
                "backfill(self, limit=None)",
                "fillna(self, method, limit=None)",
                "interpolate(self, method='linear', axis=0, limit=None, inplace=False, limit_direction='forward', limit_area=None, downcast=None, **kwargs)",
                "asfreq(self, fill_value=None)",
                "std(self, ddof=1, *args, **kwargs)",
                "var(self, ddof=1, *args, **kwargs)",
                "size(self)",
                "count(self)",
                "quantile(self, q=0.5, **kwargs)",
                "f(self, _method=method, min_count=0, *args, **kwargs)",
                "g(self, _method=method, *args, **kwargs)",
                "h(self, _method=method)",
                "__init__(self, obj, *args, **kwargs)",
                "_apply(self, f, grouper=None, *args, **kwargs)",
                "_resampler_for_grouping(self)",
                "_get_binner_for_time(self)",
                "_downsample(self, how, **kwargs)",
                "_adjust_binner_for_upsample(self, binner)",
                "_upsample(self, method, limit=None, fill_value=None)",
                "_wrap_result(self, result)",
                "_constructor(self)",
                "_resampler_for_grouping(self)",
                "_get_binner_for_time(self)",
                "_convert_obj(self, obj)",
                "_downsample(self, how, **kwargs)",
                "_upsample(self, method, limit=None, fill_value=None)",
                "_constructor(self)",
                "_resampler_for_grouping(self)",
                "_get_binner_for_time(self)",
                "_adjust_binner_for_upsample(self, binner)",
                "_constructor(self)",
                "__init__(self, freq='Min', closed=None, label=None, how='mean', axis=0, fill_method=None, limit=None, loffset=None, kind=None, convention=None, base=0, **kwargs)",
                "_get_resampler(self, obj, kind=None)",
                "_get_grouper(self, obj, validate: bool=True)",
                "_get_time_bins(self, ax)",
                "_adjust_bin_edges(self, binner, ax_values)",
                "_get_time_delta_bins(self, ax)",
                "_get_time_period_bins(self, ax)",
                "_get_period_bins(self, ax)",
                "func(x)"
            ],
            "variables_in_file": {
                "_shared_docs_kwargs": [
                    34,
                    778
                ],
                "Dict": [
                    34
                ],
                "str": [
                    34,
                    100,
                    135,
                    1351,
                    365,
                    368,
                    371,
                    980,
                    89
                ],
                "dict": [
                    34
                ],
                "_GroupBy": [
                    37
                ],
                "ShallowMixin": [
                    37
                ],
                "_attributes": [
                    62,
                    1295
                ],
                "self.groupby": [
                    96,
                    128,
                    1123,
                    132,
                    104,
                    968,
                    74,
                    1002,
                    1003,
                    978,
                    1235,
                    86,
                    87,
                    150,
                    151,
                    188,
                    311,
                    94
                ],
                "self": [
                    512,
                    1536,
                    1028,
                    1031,
                    1546,
                    1035,
                    1037,
                    1038,
                    1549,
                    1551,
                    1552,
                    1556,
                    1046,
                    1559,
                    1563,
                    1568,
                    1068,
                    1069,
                    1071,
                    1078,
                    1079,
                    1080,
                    1081,
                    1084,
                    1092,
                    1093,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    80,
                    81,
                    82,
                    83,
                    84,
                    1100,
                    86,
                    87,
                    94,
                    95,
                    96,
                    1121,
                    98,
                    1123,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    614,
                    108,
                    1128,
                    1137,
                    1140,
                    1143,
                    1144,
                    123,
                    128,
                    132,
                    1158,
                    1161,
                    1162,
                    139,
                    1164,
                    1166,
                    1167,
                    150,
                    151,
                    1174,
                    1175,
                    1176,
                    1177,
                    1180,
                    170,
                    1201,
                    178,
                    179,
                    1204,
                    1205,
                    1206,
                    1207,
                    186,
                    1210,
                    188,
                    1214,
                    1215,
                    195,
                    1235,
                    776,
                    280,
                    281,
                    793,
                    285,
                    287,
                    311,
                    825,
                    314,
                    317,
                    1344,
                    1345,
                    1346,
                    1348,
                    1349,
                    1353,
                    842,
                    331,
                    332,
                    1355,
                    334,
                    335,
                    1356,
                    1357,
                    1358,
                    859,
                    348,
                    349,
                    351,
                    863,
                    353,
                    864,
                    867,
                    868,
                    1384,
                    1386,
                    876,
                    877,
                    878,
                    879,
                    880,
                    1388,
                    1390,
                    1392,
                    1402,
                    383,
                    384,
                    1414,
                    1418,
                    399,
                    912,
                    1426,
                    405,
                    407,
                    920,
                    1436,
                    414,
                    1440,
                    931,
                    420,
                    421,
                    1101,
                    1443,
                    424,
                    425,
                    1445,
                    1447,
                    941,
                    1465,
                    1466,
                    448,
                    961,
                    962,
                    965,
                    966,
                    967,
                    968,
                    978,
                    1490,
                    1495,
                    985,
                    986,
                    1498,
                    1502,
                    1503,
                    1001,
                    1002,
                    1003,
                    1514,
                    1014,
                    1015,
                    1016,
                    1017,
                    1022
                ],
                "groupby": [
                    414,
                    965,
                    74,
                    955,
                    1278,
                    1279
                ],
                "self.keys": [
                    75
                ],
                "self.sort": [
                    76
                ],
                "self.axis": [
                    353,
                    1035,
                    1388,
                    77,
                    1069,
                    335,
                    1390,
                    1392,
                    1215
                ],
                "axis": [
                    1602,
                    1363,
                    796,
                    77
                ],
                "self.kind": [
                    1121,
                    1346,
                    1158,
                    1001,
                    1100,
                    78,
                    1201,
                    1140,
                    1143
                ],
                "kind": [
                    1346,
                    1388,
                    1389,
                    1262,
                    78,
                    1390,
                    1278
                ],
                "self.squeeze": [
                    79
                ],
                "self.group_keys": [
                    80
                ],
                "self.as_index": [
                    81
                ],
                "self.exclusions": [
                    82
                ],
                "set": [
                    82
                ],
                "self.binner": [
                    178,
                    83,
                    179,
                    1207,
                    1080
                ],
                "self.grouper": [
                    1028,
                    1035,
                    332,
                    1166,
                    179,
                    84,
                    1174,
                    349
                ],
                "self.groupby._set_grouper": [
                    87
                ],
                "self._convert_obj": [
                    87
                ],
                "obj": [
                    1035,
                    1402,
                    1784,
                    1785,
                    1689,
                    1786,
                    166,
                    167,
                    424,
                    425,
                    426,
                    1206,
                    1079,
                    1085,
                    957,
                    1215,
                    1088,
                    1598,
                    1599,
                    1600,
                    1601,
                    1604,
                    1605,
                    87,
                    351,
                    353,
                    356,
                    1126,
                    1384,
                    1769,
                    1388,
                    1262,
                    1390,
                    1392,
                    1776,
                    1777,
                    1779,
                    1780,
                    1782,
                    1144,
                    1017,
                    1146,
                    1021,
                    1022,
                    1023
                ],
                "attrs": [
                    98,
                    93
                ],
                "k": [
                    96,
                    94,
                    95
                ],
                "getattr": [
                    96,
                    962,
                    933,
                    104,
                    426,
                    943,
                    981,
                    922,
                    94
                ],
                "self._attributes": [
                    961,
                    103,
                    95
                ],
                "__name__": [
                    98,
                    1410,
                    1511,
                    1486,
                    1397,
                    1533
                ],
                "type": [
                    98,
                    1410,
                    1511,
                    1486,
                    879,
                    1582,
                    1397,
                    1533,
                    1503
                ],
                "join": [
                    98
                ],
                "attr": [
                    961,
                    962,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    108
                ],
                "self._internal_names_set": [
                    101
                ],
                "object.__getattribute__": [
                    108,
                    102
                ],
                "object": [
                    108,
                    102
                ],
                "self.obj": [
                    424,
                    105,
                    1206,
                    334
                ],
                "self._set_binner": [
                    195,
                    331,
                    1068,
                    1204,
                    1014,
                    280,
                    123,
                    348
                ],
                "__iter__": [
                    124
                ],
                "super": [
                    1122,
                    964,
                    1126,
                    1159,
                    1096,
                    124,
                    1202,
                    1363,
                    220
                ],
                "self.groupby.obj": [
                    128
                ],
                "property": [
                    994,
                    130,
                    1252,
                    134,
                    1224,
                    1230,
                    143,
                    1110,
                    1116,
                    126
                ],
                "self.groupby.ax": [
                    132
                ],
                "isinstance": [
                    139,
                    399,
                    400,
                    1811,
                    1689,
                    420,
                    423,
                    1598,
                    1601,
                    1351,
                    1483,
                    1100,
                    980,
                    356,
                    1508,
                    1636,
                    1637,
                    1769,
                    1387,
                    1389,
                    1391,
                    1648,
                    1530,
                    1407
                ],
                "self._selected_obj": [
                    867,
                    868,
                    139,
                    878,
                    879,
                    880,
                    1079,
                    311,
                    1017,
                    351
                ],
                "ABCSeries": [
                    139,
                    420,
                    1598,
                    423
                ],
                "self.groupby.key": [
                    151
                ],
                "self.groupby.level": [
                    151
                ],
                "bool": [
                    144,
                    1400
                ],
                "obj._consolidate": [
                    166
                ],
                "AbstractMethodError": [
                    170,
                    314,
                    317
                ],
                "self._get_binner": [
                    179
                ],
                "binner": [
                    1414,
                    1415,
                    1546,
                    1547,
                    1425,
                    1047,
                    1049,
                    1050,
                    1436,
                    1567,
                    1444,
                    1574,
                    1451,
                    1460,
                    1590,
                    1080,
                    1081,
                    186,
                    1593,
                    1468,
                    189,
                    1470,
                    1472,
                    1477,
                    1479,
                    1480,
                    1490,
                    1491,
                    1494,
                    1244,
                    1505,
                    1517,
                    1518,
                    1520,
                    1527
                ],
                "bins": [
                    1505,
                    1583,
                    1593,
                    1457,
                    1458,
                    1460,
                    1525,
                    1499,
                    1527,
                    1588,
                    1589,
                    186,
                    187,
                    188,
                    1439
                ],
                "binlabels": [
                    186,
                    187,
                    188
                ],
                "self._get_binner_for_time": [
                    186
                ],
                "len": [
                    864,
                    1028,
                    1413,
                    1574,
                    1019,
                    1545,
                    1516,
                    877,
                    1806,
                    401,
                    1457,
                    1458,
                    1489,
                    1779,
                    187
                ],
                "bin_grouper": [
                    188,
                    189
                ],
                "BinGrouper": [
                    188
                ],
                "self.groupby.indexer": [
                    188
                ],
                "pipe": [
                    220
                ],
                "func": [
                    281,
                    283,
                    220,
                    985
                ],
                "args": [
                    930,
                    358,
                    360,
                    841,
                    363,
                    919,
                    381,
                    983,
                    311,
                    281,
                    858,
                    220,
                    285
                ],
                "kwargs": [
                    1159,
                    1035,
                    1166,
                    912,
                    919,
                    281,
                    1277,
                    285,
                    414,
                    802,
                    930,
                    311,
                    954,
                    955,
                    962,
                    841,
                    1361,
                    1363,
                    981,
                    983,
                    858,
                    220,
                    358,
                    360,
                    363,
                    1275,
                    381
                ],
                "Substitution": [
                    197,
                    270
                ],
                "Appender": [
                    218,
                    778,
                    277
                ],
                "_pipe_template": [
                    218
                ],
                "_agg_see_also_doc": [
                    222,
                    271
                ],
                "dedent": [
                    232,
                    222
                ],
                "_agg_examples_doc": [
                    232,
                    272
                ],
                "result": [
                    384,
                    1035,
                    1037,
                    1038,
                    400,
                    401,
                    405,
                    408,
                    281,
                    282,
                    793,
                    794,
                    285,
                    287,
                    288,
                    420,
                    421,
                    423,
                    425,
                    426,
                    428,
                    1085,
                    1086,
                    1088,
                    1092,
                    1093,
                    1096,
                    1100,
                    1101,
                    1102,
                    985,
                    986,
                    863,
                    358,
                    871,
                    360,
                    872,
                    363,
                    876,
                    879,
                    880,
                    885,
                    886,
                    889,
                    381,
                    383
                ],
                "how": [
                    1028,
                    1159,
                    1161,
                    1035,
                    1166,
                    1168,
                    1174,
                    281,
                    283,
                    285,
                    1355,
                    356,
                    358,
                    360,
                    363,
                    1773,
                    1774,
                    1777,
                    1015,
                    381
                ],
                "self._aggregate": [
                    281
                ],
                "grouper": [
                    353,
                    332,
                    349,
                    335,
                    347,
                    284,
                    285
                ],
                "self._groupby_and_aggregate": [
                    1174,
                    285,
                    1166
                ],
                "self._apply_loffset": [
                    1092,
                    383,
                    1037,
                    287
                ],
                "_shared_docs": [
                    778,
                    277
                ],
                "agg": [
                    290
                ],
                "aggregate": [
                    1035,
                    290,
                    291
                ],
                "apply": [
                    291
                ],
                "transform": [
                    311
                ],
                "self._selected_obj.groupby": [
                    311
                ],
                "arg": [
                    311
                ],
                "int": [
                    319
                ],
                "subset": [
                    333,
                    334,
                    335
                ],
                "grouped": [
                    353,
                    358,
                    360,
                    363,
                    335,
                    339,
                    341,
                    381
                ],
                "get_groupby": [
                    353,
                    335
                ],
                "key": [
                    339
                ],
                "KeyError": [
                    340
                ],
                "ABCDataFrame": [
                    1601,
                    356
                ],
                "callable": [
                    356
                ],
                "grouped._aggregate_item_by_item": [
                    358
                ],
                "grouped.aggregate": [
                    360
                ],
                "DataError": [
                    361
                ],
                "grouped.apply": [
                    363,
                    381
                ],
                "ValueError": [
                    1608,
                    1323,
                    364,
                    1325,
                    1327,
                    1072,
                    1808
                ],
                "err": [
                    368,
                    371,
                    365
                ],
                "self._wrap_result": [
                    384,
                    1093,
                    1038,
                    986,
                    1214
                ],
                "needs_offset": [
                    404,
                    398
                ],
                "self.loffset": [
                    1353,
                    399,
                    1137,
                    405,
                    407
                ],
                "DateOffset": [
                    399
                ],
                "timedelta": [
                    1469,
                    399
                ],
                "np.timedelta64": [
                    399
                ],
                "np": [
                    1576,
                    1589,
                    1541,
                    399
                ],
                "result.index": [
                    871,
                    425,
                    1100,
                    1101,
                    400,
                    401,
                    880,
                    405,
                    886,
                    1086
                ],
                "DatetimeIndex": [
                    1508,
                    1414,
                    1387,
                    400,
                    1407
                ],
                "self._resampler_for_grouping": [
                    414
                ],
                "self._selection": [
                    420,
                    421
                ],
                "result.name": [
                    426,
                    421
                ],
                "result.empty": [
                    423
                ],
                "_asfreq_compat": [
                    425,
                    1782
                ],
                "obj.index": [
                    425,
                    1769,
                    1777,
                    1779,
                    1782,
                    1784,
                    1785,
                    1022
                ],
                "self.freq": [
                    1536,
                    1414,
                    1418,
                    1546,
                    1164,
                    1549,
                    1167,
                    1551,
                    1552,
                    1426,
                    1559,
                    1176,
                    1563,
                    1180,
                    1568,
                    425,
                    1465,
                    1210,
                    1084,
                    1101,
                    1490,
                    1495,
                    1498,
                    1503,
                    1514,
                    1022
                ],
                "self._upsample": [
                    448,
                    512,
                    614,
                    776,
                    825,
                    793
                ],
                "limit": [
                    448,
                    512,
                    1089,
                    614,
                    776,
                    1357,
                    1202,
                    1213,
                    1084,
                    797
                ],
                "ffill": [
                    450
                ],
                "pad": [
                    450
                ],
                "bfill": [
                    616
                ],
                "backfill": [
                    616
                ],
                "method": [
                    776,
                    916,
                    918,
                    922,
                    923,
                    795,
                    927,
                    929,
                    933,
                    934,
                    938,
                    940,
                    943,
                    944,
                    1202,
                    1213,
                    1089,
                    1770,
                    1786
                ],
                "result.interpolate": [
                    794
                ],
                "inplace": [
                    798
                ],
                "limit_direction": [
                    799
                ],
                "limit_area": [
                    800
                ],
                "downcast": [
                    801
                ],
                "fill_value": [
                    1089,
                    825,
                    1202,
                    1786
                ],
                "nv.validate_resampler_func": [
                    930,
                    841,
                    858,
                    919
                ],
                "nv": [
                    930,
                    841,
                    858,
                    919
                ],
                "self._downsample": [
                    931,
                    842,
                    876,
                    941,
                    912,
                    920,
                    859,
                    863
                ],
                "ddof": [
                    842,
                    859
                ],
                "self.ax": [
                    864,
                    1123,
                    1002,
                    1003,
                    1162,
                    877,
                    1386,
                    1235,
                    1205,
                    1078,
                    1016
                ],
                "self._selected_obj.ndim": [
                    867,
                    878
                ],
                "name": [
                    868,
                    870,
                    871
                ],
                "self._selected_obj.name": [
                    880,
                    868
                ],
                "Series": [
                    871
                ],
                "doc": [
                    874,
                    861
                ],
                "GroupBy.size": [
                    861
                ],
                "GroupBy": [
                    874,
                    933,
                    861,
                    922
                ],
                "DataFrame": [
                    885
                ],
                "result.columns": [
                    886
                ],
                "GroupBy.count": [
                    874
                ],
                "q": [
                    912
                ],
                "_method": [
                    930,
                    931,
                    941,
                    919,
                    920
                ],
                "min_count": [
                    920
                ],
                "f.__doc__": [
                    922
                ],
                "f": [
                    980,
                    981,
                    983,
                    922,
                    923
                ],
                "__doc__": [
                    922,
                    933,
                    943
                ],
                "setattr": [
                    944,
                    962,
                    923,
                    934
                ],
                "Resampler": [
                    993,
                    934,
                    944,
                    1265,
                    923
                ],
                "g.__doc__": [
                    933
                ],
                "g": [
                    933,
                    934
                ],
                "h.__doc__": [
                    943
                ],
                "h": [
                    944,
                    943
                ],
                "SeriesGroupBy": [
                    943
                ],
                "GroupByMixin": [
                    947
                ],
                "parent": [
                    962,
                    968,
                    954,
                    956,
                    957
                ],
                "kwargs.pop": [
                    954,
                    955,
                    1275
                ],
                "kwargs.get": [
                    962
                ],
                "__init__": [
                    1363,
                    964
                ],
                "self._groupby": [
                    985,
                    965,
                    966,
                    967
                ],
                "self._groupby.mutated": [
                    966
                ],
                "self._groupby.grouper.mutated": [
                    967
                ],
                "self._groupby.grouper": [
                    967
                ],
                "copy.copy": [
                    968
                ],
                "copy": [
                    968
                ],
                "parent.groupby": [
                    968
                ],
                "x": [
                    978,
                    981,
                    983
                ],
                "self._shallow_copy": [
                    978
                ],
                "x.apply": [
                    983
                ],
                "self._groupby.apply": [
                    985
                ],
                "no_type_check": [
                    970
                ],
                "_upsample": [
                    1202,
                    988
                ],
                "_apply": [
                    988,
                    989,
                    990
                ],
                "_downsample": [
                    989,
                    1159
                ],
                "_groupby_and_aggregate": [
                    990
                ],
                "DatetimeIndexResamplerGroupby": [
                    996
                ],
                "self.groupby._get_time_period_bins": [
                    1002
                ],
                "self.groupby._get_time_bins": [
                    1003
                ],
                "self._get_cython_func": [
                    1161,
                    1015
                ],
                "ax": [
                    1536,
                    1026,
                    1410,
                    1028,
                    1413,
                    1414,
                    1162,
                    1418,
                    1164,
                    1546,
                    1167,
                    1551,
                    1552,
                    1429,
                    1430,
                    1176,
                    1435,
                    1180,
                    1440,
                    1568,
                    1450,
                    1205,
                    1078,
                    1210,
                    1084,
                    1483,
                    1486,
                    1489,
                    1490,
                    1493,
                    1495,
                    1499,
                    1508,
                    1511,
                    1386,
                    1387,
                    1516,
                    1389,
                    1517,
                    1391,
                    1520,
                    1523,
                    1524,
                    1397,
                    1525,
                    1016,
                    1530,
                    1019,
                    1533,
                    1407
                ],
                "obj.copy": [
                    1776,
                    1085,
                    1780,
                    1021
                ],
                "obj.index._set_freq": [
                    1022
                ],
                "ax.freq": [
                    1026,
                    1164,
                    1167,
                    1176,
                    1180
                ],
                "ax.inferred_freq": [
                    1026,
                    1084
                ],
                "self.grouper.binlabels": [
                    1028
                ],
                "self.asfreq": [
                    1175,
                    1177,
                    1031
                ],
                "obj.groupby": [
                    1035
                ],
                "self.closed": [
                    1344,
                    1440,
                    1443,
                    1418,
                    1046,
                    1559,
                    1466
                ],
                "AssertionError": [
                    1070
                ],
                "self._from_selection": [
                    1128,
                    1071
                ],
                "res_index": [
                    1089,
                    1081,
                    1086
                ],
                "self._adjust_binner_for_upsample": [
                    1081
                ],
                "to_offset": [
                    1352,
                    1329,
                    1084
                ],
                "obj.reindex": [
                    1088,
                    1786
                ],
                "_wrap_result": [
                    1096
                ],
                "PeriodIndex": [
                    1769,
                    1546,
                    1100,
                    1517,
                    1389,
                    1811,
                    1530
                ],
                "result.index.to_period": [
                    1101
                ],
                "_GroupByMixin": [
                    1105,
                    1219,
                    1247
                ],
                "DatetimeIndexResampler": [
                    1388,
                    1229,
                    1105,
                    1112,
                    1115
                ],
                "PeriodIndexResamplerGroupby": [
                    1118
                ],
                "_get_binner_for_time": [
                    1122
                ],
                "self.groupby._get_period_bins": [
                    1123
                ],
                "_convert_obj": [
                    1126
                ],
                "msg": [
                    1130,
                    1135
                ],
                "NotImplementedError": [
                    1603,
                    1771,
                    1135
                ],
                "obj.to_timestamp": [
                    1144
                ],
                "self.convention": [
                    1536,
                    1348,
                    1349,
                    1551,
                    1144,
                    1210
                ],
                "is_subperiod": [
                    1164
                ],
                "is_superperiod": [
                    1465,
                    1167
                ],
                "IncompatibleFrequency": [
                    1179
                ],
                "new_index": [
                    1600,
                    1605,
                    1815,
                    1812,
                    1814,
                    1207,
                    1213,
                    1215
                ],
                "memb": [
                    1536,
                    1571,
                    1540,
                    1541,
                    1542,
                    1545,
                    1582,
                    1583,
                    1210,
                    1213
                ],
                "ax.asfreq": [
                    1536,
                    1210
                ],
                "indexer": [
                    1599,
                    1605,
                    1213,
                    1215
                ],
                "memb.get_indexer": [
                    1213
                ],
                "_take_new_index": [
                    1215
                ],
                "PeriodIndexResampler": [
                    1226,
                    1219,
                    1390
                ],
                "TimedeltaIndexResamplerGroupby": [
                    1232
                ],
                "self.groupby._get_time_delta_bins": [
                    1235
                ],
                "TimedeltaIndexResampler": [
                    1392,
                    1254,
                    1247
                ],
                "tg": [
                    1278,
                    1277,
                    1261,
                    1262
                ],
                "TimeGrouper": [
                    1277,
                    1261
                ],
                "kwds": [
                    1261
                ],
                "tg._get_resampler": [
                    1278,
                    1262
                ],
                "get_resampler.__doc__": [
                    1265
                ],
                "get_resampler": [
                    1265
                ],
                "Resampler.__doc__": [
                    1265
                ],
                "rule": [
                    1333,
                    1332,
                    1277
                ],
                "resampler": [
                    1278,
                    1279
                ],
                "groupby.obj": [
                    1278
                ],
                "resampler._get_resampler_for_grouping": [
                    1279
                ],
                "Grouper": [
                    1282,
                    1295
                ],
                "Grouper._attributes": [
                    1295
                ],
                "label": [
                    1345,
                    1322,
                    1323,
                    1336,
                    1337,
                    1341,
                    1342
                ],
                "closed": [
                    1344,
                    1699,
                    1731,
                    1324,
                    1325,
                    1646,
                    1334,
                    1335,
                    1657,
                    1339,
                    1340
                ],
                "convention": [
                    1348,
                    1326,
                    1327
                ],
                "freq": [
                    1514,
                    1517,
                    1520,
                    1329,
                    1522,
                    1363,
                    1332,
                    1777,
                    1782,
                    1812,
                    1784,
                    1814
                ],
                "end_types": [
                    1331,
                    1333
                ],
                "freq.rule_code": [
                    1332
                ],
                "rule.find": [
                    1333
                ],
                "self.label": [
                    1345,
                    1445,
                    1447
                ],
                "self.convention.lower": [
                    1349
                ],
                "loffset": [
                    1729,
                    1351,
                    1352,
                    1353,
                    1738,
                    1740,
                    1751,
                    1753
                ],
                "self.how": [
                    1355
                ],
                "self.fill_method": [
                    1356
                ],
                "fill_method": [
                    1356
                ],
                "self.limit": [
                    1357
                ],
                "self.base": [
                    1418,
                    1358,
                    1556,
                    1559,
                    1502,
                    1503
                ],
                "base": [
                    1646,
                    1699,
                    1725,
                    1358
                ],
                "self._set_grouper": [
                    1384
                ],
                "TimedeltaIndex": [
                    1490,
                    1483,
                    1391
                ],
                "TypeError": [
                    1408,
                    1509,
                    1484,
                    1394,
                    1690,
                    1531
                ],
                "r": [
                    1402,
                    1403,
                    1404
                ],
                "self._get_resampler": [
                    1402
                ],
                "r._set_binner": [
                    1403
                ],
                "r.binner": [
                    1404
                ],
                "r.grouper": [
                    1404
                ],
                "r.obj": [
                    1404
                ],
                "labels": [
                    1414,
                    1415,
                    1546,
                    1547,
                    1425,
                    1567,
                    1444,
                    1446,
                    1448,
                    1452,
                    1457,
                    1458,
                    1460,
                    1591,
                    1593,
                    1490,
                    1491,
                    1494,
                    1498,
                    1503,
                    1505,
                    1517,
                    1518,
                    1520,
                    1522,
                    1527
                ],
                "ax.name": [
                    1568,
                    1414,
                    1546,
                    1517,
                    1520,
                    1490,
                    1430,
                    1495
                ],
                "first": [
                    1664,
                    1417,
                    1427,
                    1689,
                    1693,
                    1695,
                    1698,
                    1699,
                    1702,
                    1704,
                    1717,
                    1719,
                    1721,
                    1728,
                    1734,
                    1736,
                    1746,
                    1749,
                    1641,
                    1642,
                    1645,
                    1646,
                    1649,
                    1651,
                    1654,
                    1658,
                    1660
                ],
                "last": [
                    1664,
                    1417,
                    1428,
                    1689,
                    1694,
                    1696,
                    1698,
                    1699,
                    1703,
                    1704,
                    1718,
                    1723,
                    1729,
                    1740,
                    1743,
                    1753,
                    1755,
                    1643,
                    1645,
                    1646,
                    1650,
                    1651,
                    1655,
                    1662
                ],
                "_get_timestamp_range_edges": [
                    1417,
                    1698
                ],
                "ax.min": [
                    1418,
                    1493,
                    1551
                ],
                "ax.max": [
                    1552,
                    1418,
                    1493
                ],
                "date_range": [
                    1784,
                    1425
                ],
                "ax.tz": [
                    1429
                ],
                "ax_values": [
                    1440,
                    1435,
                    1436,
                    1475
                ],
                "ax.asi8": [
                    1435
                ],
                "bin_edges": [
                    1440,
                    1472,
                    1475,
                    1476,
                    1479,
                    1480,
                    1436,
                    1468,
                    1469,
                    1470
                ],
                "self._adjust_bin_edges": [
                    1436
                ],
                "lib.generate_bins_dt64": [
                    1439
                ],
                "lib": [
                    1439
                ],
                "ax.hasnans": [
                    1440,
                    1450
                ],
                "binner.insert": [
                    1451,
                    1590
                ],
                "NaT": [
                    1451,
                    1452,
                    1590,
                    1591
                ],
                "labels.insert": [
                    1452,
                    1591
                ],
                "binner.tz_localize": [
                    1468
                ],
                "Nano": [
                    1469
                ],
                "asi8": [
                    1470
                ],
                "bin_edges.tz_localize": [
                    1470
                ],
                "binner.tz": [
                    1470
                ],
                "binner.asi8": [
                    1472,
                    1479
                ],
                "ax_values.max": [
                    1475
                ],
                "start": [
                    1568,
                    1495,
                    1551,
                    1493,
                    1559,
                    1563,
                    1565
                ],
                "end": [
                    1568,
                    1495,
                    1552,
                    1493,
                    1558,
                    1559
                ],
                "timedelta_range": [
                    1494
                ],
                "end_stamps": [
                    1522,
                    1524,
                    1525,
                    1498,
                    1499
                ],
                "ax.searchsorted": [
                    1499,
                    1525
                ],
                "period_range": [
                    1520,
                    1567
                ],
                "to_timestamp": [
                    1522
                ],
                "asfreq": [
                    1552,
                    1522,
                    1551
                ],
                "ax.tzinfo": [
                    1523,
                    1524
                ],
                "end_stamps.tz_localize": [
                    1524
                ],
                "nat_count": [
                    1539,
                    1541,
                    1585,
                    1588,
                    1589
                ],
                "memb.hasnans": [
                    1540
                ],
                "np.sum": [
                    1541
                ],
                "memb._isnan": [
                    1541,
                    1542
                ],
                "freq_mult": [
                    1574,
                    1576,
                    1577,
                    1549,
                    1564
                ],
                "self.freq.n": [
                    1549
                ],
                "bin_shift": [
                    1553,
                    1579,
                    1564
                ],
                "p_start": [
                    1563,
                    1565,
                    1558
                ],
                "_get_period_range_edges": [
                    1558
                ],
                "start_offset": [
                    1563,
                    1564
                ],
                "Period": [
                    1689,
                    1563
                ],
                "start_offset.n": [
                    1564
                ],
                "i8": [
                    1576,
                    1571,
                    1575
                ],
                "memb.asi8": [
                    1571
                ],
                "expected_bins_count": [
                    1574,
                    1575
                ],
                "i8_extend": [
                    1576,
                    1575
                ],
                "rng": [
                    1576,
                    1577,
                    1579,
                    1582
                ],
                "np.arange": [
                    1576
                ],
                "prng": [
                    1582,
                    1583
                ],
                "memb._data": [
                    1582
                ],
                "memb.dtype": [
                    1582
                ],
                "memb.searchsorted": [
                    1583
                ],
                "np.insert": [
                    1589
                ],
                "new_values": [
                    1600,
                    1599
                ],
                "algos.take_1d": [
                    1599
                ],
                "algos": [
                    1599
                ],
                "obj._values": [
                    1599
                ],
                "obj._constructor": [
                    1600,
                    1604
                ],
                "obj.name": [
                    1600
                ],
                "obj._data.reindex_indexer": [
                    1605
                ],
                "obj._data": [
                    1605
                ],
                "offset": [
                    1695,
                    1696,
                    1699,
                    1702,
                    1703,
                    1725,
                    1728,
                    1729,
                    1736,
                    1740,
                    1753,
                    1755,
                    1636,
                    1637,
                    1646,
                    1648,
                    1658,
                    1660,
                    1662
                ],
                "Tick": [
                    1636
                ],
                "Day": [
                    1648,
                    1637
                ],
                "tz": [
                    1641,
                    1650,
                    1649
                ],
                "first.tz": [
                    1641
                ],
                "first.tz_localize": [
                    1649,
                    1642
                ],
                "last.tz_localize": [
                    1650,
                    1643
                ],
                "_adjust_dates_anchored": [
                    1645
                ],
                "first.normalize": [
                    1654,
                    1719
                ],
                "last.normalize": [
                    1655
                ],
                "Timestamp": [
                    1660,
                    1658,
                    1756,
                    1757,
                    1662
                ],
                "offset.rollback": [
                    1658
                ],
                "all": [
                    1689
                ],
                "first.to_timestamp": [
                    1693
                ],
                "last.to_timestamp": [
                    1694
                ],
                "adjust_first": [
                    1702,
                    1695
                ],
                "offset.is_on_offset": [
                    1696,
                    1695
                ],
                "adjust_last": [
                    1696,
                    1703
                ],
                "to_period": [
                    1702,
                    1703
                ],
                "first_tzinfo": [
                    1720,
                    1717,
                    1758,
                    1759
                ],
                "first.tzinfo": [
                    1717
                ],
                "last_tzinfo": [
                    1760,
                    1761,
                    1722,
                    1718
                ],
                "last.tzinfo": [
                    1718
                ],
                "start_day_nanos": [
                    1728,
                    1729,
                    1726,
                    1719
                ],
                "value": [
                    1719
                ],
                "first.tz_convert": [
                    1721
                ],
                "last.tz_convert": [
                    1723
                ],
                "base_nanos": [
                    1725,
                    1726
                ],
                "offset.n": [
                    1725
                ],
                "offset.nanos": [
                    1728,
                    1729,
                    1736,
                    1740,
                    1753,
                    1755,
                    1725
                ],
                "foffset": [
                    1728,
                    1732,
                    1734,
                    1745,
                    1746
                ],
                "first.value": [
                    1728,
                    1734,
                    1736,
                    1746,
                    1749
                ],
                "last.value": [
                    1729,
                    1740,
                    1743,
                    1753,
                    1755
                ],
                "fresult": [
                    1762,
                    1734,
                    1736,
                    1746,
                    1749,
                    1756,
                    1759
                ],
                "lresult": [
                    1761,
                    1762,
                    1740,
                    1743,
                    1753,
                    1755,
                    1757
                ],
                "tz_convert": [
                    1761,
                    1759
                ],
                "fresult.tz_localize": [
                    1759
                ],
                "lresult.tz_localize": [
                    1761
                ],
                "new_obj": [
                    1776,
                    1777,
                    1780,
                    1782,
                    1786,
                    1788,
                    1790
                ],
                "new_obj.index": [
                    1777,
                    1788,
                    1782
                ],
                "obj.index.asfreq": [
                    1777
                ],
                "dti": [
                    1784,
                    1785,
                    1786
                ],
                "dti.name": [
                    1785
                ],
                "obj.index.name": [
                    1785
                ],
                "normalize": [
                    1787
                ],
                "new_obj.index.normalize": [
                    1788
                ],
                "index": [
                    1811,
                    1812,
                    1806,
                    1814
                ],
                "index.asfreq": [
                    1812
                ],
                "Index": [
                    1814
                ],
                "index.dtype": [
                    1814
                ],
                "index.name": [
                    1814
                ]
            },
            "filtered_variables_in_file": {
                "_shared_docs_kwargs": [
                    34,
                    778
                ],
                "Dict": [
                    34
                ],
                "_GroupBy": [
                    37
                ],
                "ShallowMixin": [
                    37
                ],
                "_attributes": [
                    62,
                    1295
                ],
                "self.groupby": [
                    96,
                    128,
                    1123,
                    132,
                    104,
                    968,
                    74,
                    1002,
                    1003,
                    978,
                    1235,
                    86,
                    87,
                    150,
                    151,
                    188,
                    311,
                    94
                ],
                "self": [
                    512,
                    1536,
                    1028,
                    1031,
                    1546,
                    1035,
                    1037,
                    1038,
                    1549,
                    1551,
                    1552,
                    1556,
                    1046,
                    1559,
                    1563,
                    1568,
                    1068,
                    1069,
                    1071,
                    1078,
                    1079,
                    1080,
                    1081,
                    1084,
                    1092,
                    1093,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    80,
                    81,
                    82,
                    83,
                    84,
                    1100,
                    86,
                    87,
                    94,
                    95,
                    96,
                    1121,
                    98,
                    1123,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    614,
                    108,
                    1128,
                    1137,
                    1140,
                    1143,
                    1144,
                    123,
                    128,
                    132,
                    1158,
                    1161,
                    1162,
                    139,
                    1164,
                    1166,
                    1167,
                    150,
                    151,
                    1174,
                    1175,
                    1176,
                    1177,
                    1180,
                    170,
                    1201,
                    178,
                    179,
                    1204,
                    1205,
                    1206,
                    1207,
                    186,
                    1210,
                    188,
                    1214,
                    1215,
                    195,
                    1235,
                    776,
                    280,
                    281,
                    793,
                    285,
                    287,
                    311,
                    825,
                    314,
                    317,
                    1344,
                    1345,
                    1346,
                    1348,
                    1349,
                    1353,
                    842,
                    331,
                    332,
                    1355,
                    334,
                    335,
                    1356,
                    1357,
                    1358,
                    859,
                    348,
                    349,
                    351,
                    863,
                    353,
                    864,
                    867,
                    868,
                    1384,
                    1386,
                    876,
                    877,
                    878,
                    879,
                    880,
                    1388,
                    1390,
                    1392,
                    1402,
                    383,
                    384,
                    1414,
                    1418,
                    399,
                    912,
                    1426,
                    405,
                    407,
                    920,
                    1436,
                    414,
                    1440,
                    931,
                    420,
                    421,
                    1101,
                    1443,
                    424,
                    425,
                    1445,
                    1447,
                    941,
                    1465,
                    1466,
                    448,
                    961,
                    962,
                    965,
                    966,
                    967,
                    968,
                    978,
                    1490,
                    1495,
                    985,
                    986,
                    1498,
                    1502,
                    1503,
                    1001,
                    1002,
                    1003,
                    1514,
                    1014,
                    1015,
                    1016,
                    1017,
                    1022
                ],
                "groupby": [
                    414,
                    965,
                    74,
                    955,
                    1278,
                    1279
                ],
                "self.keys": [
                    75
                ],
                "self.sort": [
                    76
                ],
                "self.axis": [
                    353,
                    1035,
                    1388,
                    77,
                    1069,
                    335,
                    1390,
                    1392,
                    1215
                ],
                "axis": [
                    1602,
                    1363,
                    796,
                    77
                ],
                "self.kind": [
                    1121,
                    1346,
                    1158,
                    1001,
                    1100,
                    78,
                    1201,
                    1140,
                    1143
                ],
                "kind": [
                    1346,
                    1388,
                    1389,
                    1262,
                    78,
                    1390,
                    1278
                ],
                "self.squeeze": [
                    79
                ],
                "self.group_keys": [
                    80
                ],
                "self.as_index": [
                    81
                ],
                "self.exclusions": [
                    82
                ],
                "self.binner": [
                    178,
                    83,
                    179,
                    1207,
                    1080
                ],
                "self.grouper": [
                    1028,
                    1035,
                    332,
                    1166,
                    179,
                    84,
                    1174,
                    349
                ],
                "self.groupby._set_grouper": [
                    87
                ],
                "self._convert_obj": [
                    87
                ],
                "obj": [
                    1035,
                    1402,
                    1784,
                    1785,
                    1689,
                    1786,
                    166,
                    167,
                    424,
                    425,
                    426,
                    1206,
                    1079,
                    1085,
                    957,
                    1215,
                    1088,
                    1598,
                    1599,
                    1600,
                    1601,
                    1604,
                    1605,
                    87,
                    351,
                    353,
                    356,
                    1126,
                    1384,
                    1769,
                    1388,
                    1262,
                    1390,
                    1392,
                    1776,
                    1777,
                    1779,
                    1780,
                    1782,
                    1144,
                    1017,
                    1146,
                    1021,
                    1022,
                    1023
                ],
                "attrs": [
                    98,
                    93
                ],
                "k": [
                    96,
                    94,
                    95
                ],
                "self._attributes": [
                    961,
                    103,
                    95
                ],
                "join": [
                    98
                ],
                "attr": [
                    961,
                    962,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    108
                ],
                "self._internal_names_set": [
                    101
                ],
                "object.__getattribute__": [
                    108,
                    102
                ],
                "self.obj": [
                    424,
                    105,
                    1206,
                    334
                ],
                "self._set_binner": [
                    195,
                    331,
                    1068,
                    1204,
                    1014,
                    280,
                    123,
                    348
                ],
                "__iter__": [
                    124
                ],
                "self.groupby.obj": [
                    128
                ],
                "self.groupby.ax": [
                    132
                ],
                "self._selected_obj": [
                    867,
                    868,
                    139,
                    878,
                    879,
                    880,
                    1079,
                    311,
                    1017,
                    351
                ],
                "ABCSeries": [
                    139,
                    420,
                    1598,
                    423
                ],
                "self.groupby.key": [
                    151
                ],
                "self.groupby.level": [
                    151
                ],
                "obj._consolidate": [
                    166
                ],
                "AbstractMethodError": [
                    170,
                    314,
                    317
                ],
                "self._get_binner": [
                    179
                ],
                "binner": [
                    1414,
                    1415,
                    1546,
                    1547,
                    1425,
                    1047,
                    1049,
                    1050,
                    1436,
                    1567,
                    1444,
                    1574,
                    1451,
                    1460,
                    1590,
                    1080,
                    1081,
                    186,
                    1593,
                    1468,
                    189,
                    1470,
                    1472,
                    1477,
                    1479,
                    1480,
                    1490,
                    1491,
                    1494,
                    1244,
                    1505,
                    1517,
                    1518,
                    1520,
                    1527
                ],
                "bins": [
                    1505,
                    1583,
                    1593,
                    1457,
                    1458,
                    1460,
                    1525,
                    1499,
                    1527,
                    1588,
                    1589,
                    186,
                    187,
                    188,
                    1439
                ],
                "binlabels": [
                    186,
                    187,
                    188
                ],
                "self._get_binner_for_time": [
                    186
                ],
                "bin_grouper": [
                    188,
                    189
                ],
                "BinGrouper": [
                    188
                ],
                "self.groupby.indexer": [
                    188
                ],
                "pipe": [
                    220
                ],
                "func": [
                    281,
                    283,
                    220,
                    985
                ],
                "args": [
                    930,
                    358,
                    360,
                    841,
                    363,
                    919,
                    381,
                    983,
                    311,
                    281,
                    858,
                    220,
                    285
                ],
                "kwargs": [
                    1159,
                    1035,
                    1166,
                    912,
                    919,
                    281,
                    1277,
                    285,
                    414,
                    802,
                    930,
                    311,
                    954,
                    955,
                    962,
                    841,
                    1361,
                    1363,
                    981,
                    983,
                    858,
                    220,
                    358,
                    360,
                    363,
                    1275,
                    381
                ],
                "Substitution": [
                    197,
                    270
                ],
                "Appender": [
                    218,
                    778,
                    277
                ],
                "_pipe_template": [
                    218
                ],
                "_agg_see_also_doc": [
                    222,
                    271
                ],
                "dedent": [
                    232,
                    222
                ],
                "_agg_examples_doc": [
                    232,
                    272
                ],
                "result": [
                    384,
                    1035,
                    1037,
                    1038,
                    400,
                    401,
                    405,
                    408,
                    281,
                    282,
                    793,
                    794,
                    285,
                    287,
                    288,
                    420,
                    421,
                    423,
                    425,
                    426,
                    428,
                    1085,
                    1086,
                    1088,
                    1092,
                    1093,
                    1096,
                    1100,
                    1101,
                    1102,
                    985,
                    986,
                    863,
                    358,
                    871,
                    360,
                    872,
                    363,
                    876,
                    879,
                    880,
                    885,
                    886,
                    889,
                    381,
                    383
                ],
                "how": [
                    1028,
                    1159,
                    1161,
                    1035,
                    1166,
                    1168,
                    1174,
                    281,
                    283,
                    285,
                    1355,
                    356,
                    358,
                    360,
                    363,
                    1773,
                    1774,
                    1777,
                    1015,
                    381
                ],
                "self._aggregate": [
                    281
                ],
                "grouper": [
                    353,
                    332,
                    349,
                    335,
                    347,
                    284,
                    285
                ],
                "self._groupby_and_aggregate": [
                    1174,
                    285,
                    1166
                ],
                "self._apply_loffset": [
                    1092,
                    383,
                    1037,
                    287
                ],
                "_shared_docs": [
                    778,
                    277
                ],
                "agg": [
                    290
                ],
                "aggregate": [
                    1035,
                    290,
                    291
                ],
                "apply": [
                    291
                ],
                "transform": [
                    311
                ],
                "self._selected_obj.groupby": [
                    311
                ],
                "arg": [
                    311
                ],
                "subset": [
                    333,
                    334,
                    335
                ],
                "grouped": [
                    353,
                    358,
                    360,
                    363,
                    335,
                    339,
                    341,
                    381
                ],
                "get_groupby": [
                    353,
                    335
                ],
                "key": [
                    339
                ],
                "ABCDataFrame": [
                    1601,
                    356
                ],
                "grouped._aggregate_item_by_item": [
                    358
                ],
                "grouped.aggregate": [
                    360
                ],
                "DataError": [
                    361
                ],
                "grouped.apply": [
                    363,
                    381
                ],
                "err": [
                    368,
                    371,
                    365
                ],
                "self._wrap_result": [
                    384,
                    1093,
                    1038,
                    986,
                    1214
                ],
                "needs_offset": [
                    404,
                    398
                ],
                "self.loffset": [
                    1353,
                    399,
                    1137,
                    405,
                    407
                ],
                "DateOffset": [
                    399
                ],
                "timedelta": [
                    1469,
                    399
                ],
                "np.timedelta64": [
                    399
                ],
                "np": [
                    1576,
                    1589,
                    1541,
                    399
                ],
                "result.index": [
                    871,
                    425,
                    1100,
                    1101,
                    400,
                    401,
                    880,
                    405,
                    886,
                    1086
                ],
                "DatetimeIndex": [
                    1508,
                    1414,
                    1387,
                    400,
                    1407
                ],
                "self._resampler_for_grouping": [
                    414
                ],
                "self._selection": [
                    420,
                    421
                ],
                "result.name": [
                    426,
                    421
                ],
                "result.empty": [
                    423
                ],
                "_asfreq_compat": [
                    425,
                    1782
                ],
                "obj.index": [
                    425,
                    1769,
                    1777,
                    1779,
                    1782,
                    1784,
                    1785,
                    1022
                ],
                "self.freq": [
                    1536,
                    1414,
                    1418,
                    1546,
                    1164,
                    1549,
                    1167,
                    1551,
                    1552,
                    1426,
                    1559,
                    1176,
                    1563,
                    1180,
                    1568,
                    425,
                    1465,
                    1210,
                    1084,
                    1101,
                    1490,
                    1495,
                    1498,
                    1503,
                    1514,
                    1022
                ],
                "self._upsample": [
                    448,
                    512,
                    614,
                    776,
                    825,
                    793
                ],
                "limit": [
                    448,
                    512,
                    1089,
                    614,
                    776,
                    1357,
                    1202,
                    1213,
                    1084,
                    797
                ],
                "ffill": [
                    450
                ],
                "pad": [
                    450
                ],
                "bfill": [
                    616
                ],
                "backfill": [
                    616
                ],
                "method": [
                    776,
                    916,
                    918,
                    922,
                    923,
                    795,
                    927,
                    929,
                    933,
                    934,
                    938,
                    940,
                    943,
                    944,
                    1202,
                    1213,
                    1089,
                    1770,
                    1786
                ],
                "result.interpolate": [
                    794
                ],
                "inplace": [
                    798
                ],
                "limit_direction": [
                    799
                ],
                "limit_area": [
                    800
                ],
                "downcast": [
                    801
                ],
                "fill_value": [
                    1089,
                    825,
                    1202,
                    1786
                ],
                "nv.validate_resampler_func": [
                    930,
                    841,
                    858,
                    919
                ],
                "nv": [
                    930,
                    841,
                    858,
                    919
                ],
                "self._downsample": [
                    931,
                    842,
                    876,
                    941,
                    912,
                    920,
                    859,
                    863
                ],
                "ddof": [
                    842,
                    859
                ],
                "self.ax": [
                    864,
                    1123,
                    1002,
                    1003,
                    1162,
                    877,
                    1386,
                    1235,
                    1205,
                    1078,
                    1016
                ],
                "self._selected_obj.ndim": [
                    867,
                    878
                ],
                "name": [
                    868,
                    870,
                    871
                ],
                "self._selected_obj.name": [
                    880,
                    868
                ],
                "Series": [
                    871
                ],
                "doc": [
                    874,
                    861
                ],
                "GroupBy.size": [
                    861
                ],
                "GroupBy": [
                    874,
                    933,
                    861,
                    922
                ],
                "DataFrame": [
                    885
                ],
                "result.columns": [
                    886
                ],
                "GroupBy.count": [
                    874
                ],
                "q": [
                    912
                ],
                "_method": [
                    930,
                    931,
                    941,
                    919,
                    920
                ],
                "min_count": [
                    920
                ],
                "f.__doc__": [
                    922
                ],
                "f": [
                    980,
                    981,
                    983,
                    922,
                    923
                ],
                "Resampler": [
                    993,
                    934,
                    944,
                    1265,
                    923
                ],
                "g.__doc__": [
                    933
                ],
                "g": [
                    933,
                    934
                ],
                "h.__doc__": [
                    943
                ],
                "h": [
                    944,
                    943
                ],
                "SeriesGroupBy": [
                    943
                ],
                "GroupByMixin": [
                    947
                ],
                "parent": [
                    962,
                    968,
                    954,
                    956,
                    957
                ],
                "kwargs.pop": [
                    954,
                    955,
                    1275
                ],
                "kwargs.get": [
                    962
                ],
                "__init__": [
                    1363,
                    964
                ],
                "self._groupby": [
                    985,
                    965,
                    966,
                    967
                ],
                "self._groupby.mutated": [
                    966
                ],
                "self._groupby.grouper.mutated": [
                    967
                ],
                "self._groupby.grouper": [
                    967
                ],
                "copy.copy": [
                    968
                ],
                "copy": [
                    968
                ],
                "parent.groupby": [
                    968
                ],
                "x": [
                    978,
                    981,
                    983
                ],
                "self._shallow_copy": [
                    978
                ],
                "x.apply": [
                    983
                ],
                "self._groupby.apply": [
                    985
                ],
                "no_type_check": [
                    970
                ],
                "_upsample": [
                    1202,
                    988
                ],
                "_apply": [
                    988,
                    989,
                    990
                ],
                "_downsample": [
                    989,
                    1159
                ],
                "_groupby_and_aggregate": [
                    990
                ],
                "DatetimeIndexResamplerGroupby": [
                    996
                ],
                "self.groupby._get_time_period_bins": [
                    1002
                ],
                "self.groupby._get_time_bins": [
                    1003
                ],
                "self._get_cython_func": [
                    1161,
                    1015
                ],
                "ax": [
                    1536,
                    1026,
                    1410,
                    1028,
                    1413,
                    1414,
                    1162,
                    1418,
                    1164,
                    1546,
                    1167,
                    1551,
                    1552,
                    1429,
                    1430,
                    1176,
                    1435,
                    1180,
                    1440,
                    1568,
                    1450,
                    1205,
                    1078,
                    1210,
                    1084,
                    1483,
                    1486,
                    1489,
                    1490,
                    1493,
                    1495,
                    1499,
                    1508,
                    1511,
                    1386,
                    1387,
                    1516,
                    1389,
                    1517,
                    1391,
                    1520,
                    1523,
                    1524,
                    1397,
                    1525,
                    1016,
                    1530,
                    1019,
                    1533,
                    1407
                ],
                "obj.copy": [
                    1776,
                    1085,
                    1780,
                    1021
                ],
                "obj.index._set_freq": [
                    1022
                ],
                "ax.freq": [
                    1026,
                    1164,
                    1167,
                    1176,
                    1180
                ],
                "ax.inferred_freq": [
                    1026,
                    1084
                ],
                "self.grouper.binlabels": [
                    1028
                ],
                "self.asfreq": [
                    1175,
                    1177,
                    1031
                ],
                "obj.groupby": [
                    1035
                ],
                "self.closed": [
                    1344,
                    1440,
                    1443,
                    1418,
                    1046,
                    1559,
                    1466
                ],
                "self._from_selection": [
                    1128,
                    1071
                ],
                "res_index": [
                    1089,
                    1081,
                    1086
                ],
                "self._adjust_binner_for_upsample": [
                    1081
                ],
                "to_offset": [
                    1352,
                    1329,
                    1084
                ],
                "obj.reindex": [
                    1088,
                    1786
                ],
                "_wrap_result": [
                    1096
                ],
                "PeriodIndex": [
                    1769,
                    1546,
                    1100,
                    1517,
                    1389,
                    1811,
                    1530
                ],
                "result.index.to_period": [
                    1101
                ],
                "_GroupByMixin": [
                    1105,
                    1219,
                    1247
                ],
                "DatetimeIndexResampler": [
                    1388,
                    1229,
                    1105,
                    1112,
                    1115
                ],
                "PeriodIndexResamplerGroupby": [
                    1118
                ],
                "_get_binner_for_time": [
                    1122
                ],
                "self.groupby._get_period_bins": [
                    1123
                ],
                "_convert_obj": [
                    1126
                ],
                "msg": [
                    1130,
                    1135
                ],
                "obj.to_timestamp": [
                    1144
                ],
                "self.convention": [
                    1536,
                    1348,
                    1349,
                    1551,
                    1144,
                    1210
                ],
                "is_subperiod": [
                    1164
                ],
                "is_superperiod": [
                    1465,
                    1167
                ],
                "IncompatibleFrequency": [
                    1179
                ],
                "new_index": [
                    1600,
                    1605,
                    1815,
                    1812,
                    1814,
                    1207,
                    1213,
                    1215
                ],
                "memb": [
                    1536,
                    1571,
                    1540,
                    1541,
                    1542,
                    1545,
                    1582,
                    1583,
                    1210,
                    1213
                ],
                "ax.asfreq": [
                    1536,
                    1210
                ],
                "indexer": [
                    1599,
                    1605,
                    1213,
                    1215
                ],
                "memb.get_indexer": [
                    1213
                ],
                "_take_new_index": [
                    1215
                ],
                "PeriodIndexResampler": [
                    1226,
                    1219,
                    1390
                ],
                "TimedeltaIndexResamplerGroupby": [
                    1232
                ],
                "self.groupby._get_time_delta_bins": [
                    1235
                ],
                "TimedeltaIndexResampler": [
                    1392,
                    1254,
                    1247
                ],
                "tg": [
                    1278,
                    1277,
                    1261,
                    1262
                ],
                "TimeGrouper": [
                    1277,
                    1261
                ],
                "kwds": [
                    1261
                ],
                "tg._get_resampler": [
                    1278,
                    1262
                ],
                "get_resampler.__doc__": [
                    1265
                ],
                "get_resampler": [
                    1265
                ],
                "Resampler.__doc__": [
                    1265
                ],
                "rule": [
                    1333,
                    1332,
                    1277
                ],
                "resampler": [
                    1278,
                    1279
                ],
                "groupby.obj": [
                    1278
                ],
                "resampler._get_resampler_for_grouping": [
                    1279
                ],
                "Grouper": [
                    1282,
                    1295
                ],
                "Grouper._attributes": [
                    1295
                ],
                "label": [
                    1345,
                    1322,
                    1323,
                    1336,
                    1337,
                    1341,
                    1342
                ],
                "closed": [
                    1344,
                    1699,
                    1731,
                    1324,
                    1325,
                    1646,
                    1334,
                    1335,
                    1657,
                    1339,
                    1340
                ],
                "convention": [
                    1348,
                    1326,
                    1327
                ],
                "freq": [
                    1514,
                    1517,
                    1520,
                    1329,
                    1522,
                    1363,
                    1332,
                    1777,
                    1782,
                    1812,
                    1784,
                    1814
                ],
                "end_types": [
                    1331,
                    1333
                ],
                "freq.rule_code": [
                    1332
                ],
                "rule.find": [
                    1333
                ],
                "self.label": [
                    1345,
                    1445,
                    1447
                ],
                "self.convention.lower": [
                    1349
                ],
                "loffset": [
                    1729,
                    1351,
                    1352,
                    1353,
                    1738,
                    1740,
                    1751,
                    1753
                ],
                "self.how": [
                    1355
                ],
                "self.fill_method": [
                    1356
                ],
                "fill_method": [
                    1356
                ],
                "self.limit": [
                    1357
                ],
                "self.base": [
                    1418,
                    1358,
                    1556,
                    1559,
                    1502,
                    1503
                ],
                "base": [
                    1646,
                    1699,
                    1725,
                    1358
                ],
                "self._set_grouper": [
                    1384
                ],
                "TimedeltaIndex": [
                    1490,
                    1483,
                    1391
                ],
                "r": [
                    1402,
                    1403,
                    1404
                ],
                "self._get_resampler": [
                    1402
                ],
                "r._set_binner": [
                    1403
                ],
                "r.binner": [
                    1404
                ],
                "r.grouper": [
                    1404
                ],
                "r.obj": [
                    1404
                ],
                "labels": [
                    1414,
                    1415,
                    1546,
                    1547,
                    1425,
                    1567,
                    1444,
                    1446,
                    1448,
                    1452,
                    1457,
                    1458,
                    1460,
                    1591,
                    1593,
                    1490,
                    1491,
                    1494,
                    1498,
                    1503,
                    1505,
                    1517,
                    1518,
                    1520,
                    1522,
                    1527
                ],
                "ax.name": [
                    1568,
                    1414,
                    1546,
                    1517,
                    1520,
                    1490,
                    1430,
                    1495
                ],
                "first": [
                    1664,
                    1417,
                    1427,
                    1689,
                    1693,
                    1695,
                    1698,
                    1699,
                    1702,
                    1704,
                    1717,
                    1719,
                    1721,
                    1728,
                    1734,
                    1736,
                    1746,
                    1749,
                    1641,
                    1642,
                    1645,
                    1646,
                    1649,
                    1651,
                    1654,
                    1658,
                    1660
                ],
                "last": [
                    1664,
                    1417,
                    1428,
                    1689,
                    1694,
                    1696,
                    1698,
                    1699,
                    1703,
                    1704,
                    1718,
                    1723,
                    1729,
                    1740,
                    1743,
                    1753,
                    1755,
                    1643,
                    1645,
                    1646,
                    1650,
                    1651,
                    1655,
                    1662
                ],
                "_get_timestamp_range_edges": [
                    1417,
                    1698
                ],
                "ax.min": [
                    1418,
                    1493,
                    1551
                ],
                "ax.max": [
                    1552,
                    1418,
                    1493
                ],
                "date_range": [
                    1784,
                    1425
                ],
                "ax.tz": [
                    1429
                ],
                "ax_values": [
                    1440,
                    1435,
                    1436,
                    1475
                ],
                "ax.asi8": [
                    1435
                ],
                "bin_edges": [
                    1440,
                    1472,
                    1475,
                    1476,
                    1479,
                    1480,
                    1436,
                    1468,
                    1469,
                    1470
                ],
                "self._adjust_bin_edges": [
                    1436
                ],
                "lib.generate_bins_dt64": [
                    1439
                ],
                "lib": [
                    1439
                ],
                "ax.hasnans": [
                    1440,
                    1450
                ],
                "binner.insert": [
                    1451,
                    1590
                ],
                "NaT": [
                    1451,
                    1452,
                    1590,
                    1591
                ],
                "labels.insert": [
                    1452,
                    1591
                ],
                "binner.tz_localize": [
                    1468
                ],
                "Nano": [
                    1469
                ],
                "asi8": [
                    1470
                ],
                "bin_edges.tz_localize": [
                    1470
                ],
                "binner.tz": [
                    1470
                ],
                "binner.asi8": [
                    1472,
                    1479
                ],
                "ax_values.max": [
                    1475
                ],
                "start": [
                    1568,
                    1495,
                    1551,
                    1493,
                    1559,
                    1563,
                    1565
                ],
                "end": [
                    1568,
                    1495,
                    1552,
                    1493,
                    1558,
                    1559
                ],
                "timedelta_range": [
                    1494
                ],
                "end_stamps": [
                    1522,
                    1524,
                    1525,
                    1498,
                    1499
                ],
                "ax.searchsorted": [
                    1499,
                    1525
                ],
                "period_range": [
                    1520,
                    1567
                ],
                "to_timestamp": [
                    1522
                ],
                "asfreq": [
                    1552,
                    1522,
                    1551
                ],
                "ax.tzinfo": [
                    1523,
                    1524
                ],
                "end_stamps.tz_localize": [
                    1524
                ],
                "nat_count": [
                    1539,
                    1541,
                    1585,
                    1588,
                    1589
                ],
                "memb.hasnans": [
                    1540
                ],
                "np.sum": [
                    1541
                ],
                "memb._isnan": [
                    1541,
                    1542
                ],
                "freq_mult": [
                    1574,
                    1576,
                    1577,
                    1549,
                    1564
                ],
                "self.freq.n": [
                    1549
                ],
                "bin_shift": [
                    1553,
                    1579,
                    1564
                ],
                "p_start": [
                    1563,
                    1565,
                    1558
                ],
                "_get_period_range_edges": [
                    1558
                ],
                "start_offset": [
                    1563,
                    1564
                ],
                "Period": [
                    1689,
                    1563
                ],
                "start_offset.n": [
                    1564
                ],
                "i8": [
                    1576,
                    1571,
                    1575
                ],
                "memb.asi8": [
                    1571
                ],
                "expected_bins_count": [
                    1574,
                    1575
                ],
                "i8_extend": [
                    1576,
                    1575
                ],
                "rng": [
                    1576,
                    1577,
                    1579,
                    1582
                ],
                "np.arange": [
                    1576
                ],
                "prng": [
                    1582,
                    1583
                ],
                "memb._data": [
                    1582
                ],
                "memb.dtype": [
                    1582
                ],
                "memb.searchsorted": [
                    1583
                ],
                "np.insert": [
                    1589
                ],
                "new_values": [
                    1600,
                    1599
                ],
                "algos.take_1d": [
                    1599
                ],
                "algos": [
                    1599
                ],
                "obj._values": [
                    1599
                ],
                "obj._constructor": [
                    1600,
                    1604
                ],
                "obj.name": [
                    1600
                ],
                "obj._data.reindex_indexer": [
                    1605
                ],
                "obj._data": [
                    1605
                ],
                "offset": [
                    1695,
                    1696,
                    1699,
                    1702,
                    1703,
                    1725,
                    1728,
                    1729,
                    1736,
                    1740,
                    1753,
                    1755,
                    1636,
                    1637,
                    1646,
                    1648,
                    1658,
                    1660,
                    1662
                ],
                "Tick": [
                    1636
                ],
                "Day": [
                    1648,
                    1637
                ],
                "tz": [
                    1641,
                    1650,
                    1649
                ],
                "first.tz": [
                    1641
                ],
                "first.tz_localize": [
                    1649,
                    1642
                ],
                "last.tz_localize": [
                    1650,
                    1643
                ],
                "_adjust_dates_anchored": [
                    1645
                ],
                "first.normalize": [
                    1654,
                    1719
                ],
                "last.normalize": [
                    1655
                ],
                "Timestamp": [
                    1660,
                    1658,
                    1756,
                    1757,
                    1662
                ],
                "offset.rollback": [
                    1658
                ],
                "first.to_timestamp": [
                    1693
                ],
                "last.to_timestamp": [
                    1694
                ],
                "adjust_first": [
                    1702,
                    1695
                ],
                "offset.is_on_offset": [
                    1696,
                    1695
                ],
                "adjust_last": [
                    1696,
                    1703
                ],
                "to_period": [
                    1702,
                    1703
                ],
                "first_tzinfo": [
                    1720,
                    1717,
                    1758,
                    1759
                ],
                "first.tzinfo": [
                    1717
                ],
                "last_tzinfo": [
                    1760,
                    1761,
                    1722,
                    1718
                ],
                "last.tzinfo": [
                    1718
                ],
                "start_day_nanos": [
                    1728,
                    1729,
                    1726,
                    1719
                ],
                "value": [
                    1719
                ],
                "first.tz_convert": [
                    1721
                ],
                "last.tz_convert": [
                    1723
                ],
                "base_nanos": [
                    1725,
                    1726
                ],
                "offset.n": [
                    1725
                ],
                "offset.nanos": [
                    1728,
                    1729,
                    1736,
                    1740,
                    1753,
                    1755,
                    1725
                ],
                "foffset": [
                    1728,
                    1732,
                    1734,
                    1745,
                    1746
                ],
                "first.value": [
                    1728,
                    1734,
                    1736,
                    1746,
                    1749
                ],
                "last.value": [
                    1729,
                    1740,
                    1743,
                    1753,
                    1755
                ],
                "fresult": [
                    1762,
                    1734,
                    1736,
                    1746,
                    1749,
                    1756,
                    1759
                ],
                "lresult": [
                    1761,
                    1762,
                    1740,
                    1743,
                    1753,
                    1755,
                    1757
                ],
                "tz_convert": [
                    1761,
                    1759
                ],
                "fresult.tz_localize": [
                    1759
                ],
                "lresult.tz_localize": [
                    1761
                ],
                "new_obj": [
                    1776,
                    1777,
                    1780,
                    1782,
                    1786,
                    1788,
                    1790
                ],
                "new_obj.index": [
                    1777,
                    1788,
                    1782
                ],
                "obj.index.asfreq": [
                    1777
                ],
                "dti": [
                    1784,
                    1785,
                    1786
                ],
                "dti.name": [
                    1785
                ],
                "obj.index.name": [
                    1785
                ],
                "normalize": [
                    1787
                ],
                "new_obj.index.normalize": [
                    1788
                ],
                "index": [
                    1811,
                    1812,
                    1806,
                    1814
                ],
                "index.asfreq": [
                    1812
                ],
                "Index": [
                    1814
                ],
                "index.dtype": [
                    1814
                ],
                "index.name": [
                    1814
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/resample/test_datetime_index.py",
                "test_function": "test_downsample_dst_at_midnight",
                "test_function_code": "def test_downsample_dst_at_midnight():\n    # GH 25758\n    start = datetime(2018, 11, 3, 12)\n    end = datetime(2018, 11, 5, 12)\n    index = pd.date_range(start, end, freq=\"1H\")\n    index = index.tz_localize(\"UTC\").tz_convert(\"America/Havana\")\n    data = list(range(len(index)))\n    dataframe = pd.DataFrame(data, index=index)\n    result = dataframe.groupby(pd.Grouper(freq=\"1D\")).mean()\n    expected = DataFrame(\n        [7.5, 28.0, 44.5],\n        index=date_range(\"2018-11-03\", periods=3).tz_localize(\n            \"America/Havana\", ambiguous=True\n        ),\n    )\n    tm.assert_frame_equal(result, expected)",
                "test_error": "pytz.exceptions.AmbiguousTimeError: Cannot infer dst time from 2018-11-04 00:00:00 as there are no repeated times",
                "full_test_error": "def test_downsample_dst_at_midnight():\n        # GH 25758\n        start = datetime(2018, 11, 3, 12)\n        end = datetime(2018, 11, 5, 12)\n        index = pd.date_range(start, end, freq=\"1H\")\n        index = index.tz_localize(\"UTC\").tz_convert(\"America/Havana\")\n        data = list(range(len(index)))\n        dataframe = pd.DataFrame(data, index=index)\n>       result = dataframe.groupby(pd.Grouper(freq=\"1D\")).mean()\n\npandas/tests/resample/test_datetime_index.py:1451: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/frame.py:5828: in groupby\n    return DataFrameGroupBy(\npandas/core/groupby/groupby.py:401: in __init__\n    grouper, exclusions, obj = get_grouper(\npandas/core/groupby/grouper.py:508: in get_grouper\n    binner, grouper, obj = key._get_grouper(obj, validate=False)\npandas/core/resample.py:1403: in _get_grouper\n    r._set_binner()\npandas/core/resample.py:179: in _set_binner\n    self.binner, self.grouper = self._get_binner()\npandas/core/resample.py:186: in _get_binner\n    binner, bins, binlabels = self._get_binner_for_time()\npandas/core/resample.py:1003: in _get_binner_for_time\n    return self.groupby._get_time_bins(self.ax)\npandas/core/resample.py:1425: in _get_time_bins\n    binner = labels = date_range(\npandas/core/indexes/datetimes.py:966: in date_range\n    dtarr = DatetimeArray._generate_range(\npandas/core/arrays/datetimes.py:411: in _generate_range\n    arr = conversion.tz_localize_to_utc(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise pytz.AmbiguousTimeError(\nE   pytz.exceptions.AmbiguousTimeError: Cannot infer dst time from 2018-11-04 00:00:00 as there are no repeated times\n\npandas/_libs/tslibs/tzconversion.pyx:177: AmbiguousTimeError",
                "traceback": "pandas/core/frame.py:5828: in groupby\n    return DataFrameGroupBy(\npandas/core/groupby/groupby.py:401: in __init__\n    grouper, exclusions, obj = get_grouper(\npandas/core/groupby/grouper.py:508: in get_grouper\n    binner, grouper, obj = key._get_grouper(obj, validate=False)\npandas/core/resample.py:1403: in _get_grouper\n    r._set_binner()\npandas/core/resample.py:179: in _set_binner\n    self.binner, self.grouper = self._get_binner()\npandas/core/resample.py:186: in _get_binner\n    binner, bins, binlabels = self._get_binner_for_time()\npandas/core/resample.py:1003: in _get_binner_for_time\n    return self.groupby._get_time_bins(self.ax)\npandas/core/resample.py:1425: in _get_time_bins\n    binner = labels = date_range(\npandas/core/indexes/datetimes.py:966: in date_range\n    dtarr = DatetimeArray._generate_range(\npandas/core/arrays/datetimes.py:411: in _generate_range\n    arr = conversion.tz_localize_to_utc(",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise pytz.AmbiguousTimeError(\nE   pytz.exceptions.AmbiguousTimeError: Cannot infer dst time from 2018-11-04 00:00:00 as there are no repeated times\n\npandas/_libs/tslibs/tzconversion.pyx:177: AmbiguousTimeError",
                "test_function_decorators": []
            }
        ]
    }
}