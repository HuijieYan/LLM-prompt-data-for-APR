{
    "pandas": [
        {
            "bugID": 60,
            "bitvector": {
                "1.3.1": 0,
                "1.3.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.1.2": 0,
                "2.2.3": 1,
                "2.2.4": 0,
                "2.2.5": 1,
                "2.2.6": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "start_line": 1259,
            "file_name": "pandas/core/window/rolling.py",
            "replace_code": "def apply(\n    self,\n    func,\n    raw: bool = False,\n    engine: str = \"cython\",\n    engine_kwargs: Optional[Dict] = None,\n    args: Optional[Tuple] = None,\n    kwargs: Optional[Dict] = None,\n):\n\n    if args is None:\n        args = ()\n    if kwargs is None:\n        kwargs = {}\n    kwargs.pop(\"_level\", None)\n    kwargs.pop(\"floor\", None)\n    window = self._get_window()\n    offset = calculate_center_offset(window) if self.center else 0\n    if not is_bool(raw):\n        raise ValueError(\"raw parameter must be `True` or `False`\")\n    \n    if engine == \"cython\":\n        if engine_kwargs is not None:\n            raise ValueError(\"cython engine does not accept engine_kwargs\")\n        apply_func = self._generate_cython_apply_func(\n            args, kwargs, raw, offset, func\n        )\n    elif engine == \"numba\":\n        if raw is False:\n            raise ValueError(\"raw must be `True` when using the numba engine\")\n        if func in self._numba_func_cache:\n            # Return an already compiled version of roll_apply if available\n            apply_func = self._numba_func_cache[func]\n        else:\n            apply_func = generate_numba_apply_func(\n                args, kwargs, func, engine_kwargs\n            )\n    else:\n        raise ValueError(\"engine must be either 'numba' or 'cython'\")\n    \n    # Modify the arguments based on the raw parameter\n    apply_args = (apply_func,)\n    apply_kwargs = {\n        'center': False,\n        'floor': 0,\n        'name': func,\n        'use_numba_cache': engine == \"numba\",\n    }\n    if raw:\n        apply_args += (self,)\n    else:\n        apply_args += (window,)\n    \n    # Invoke the appropriate _apply method based on the raw parameter\n    if raw:\n        return self._apply_raw(*apply_args, **apply_kwargs)\n    else:\n        return self._apply_numpy(*apply_args, **apply_kwargs)"
        }
    ]
}