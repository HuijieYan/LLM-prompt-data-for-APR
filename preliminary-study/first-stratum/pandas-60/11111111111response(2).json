{
    "pandas": [
        {
            "bugID": 60,
            "bitvector": {
                "1.3.2": 1,
                "1.2.4": 1,
                "1.2.1": 1,
                "1.3.4": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "start_line": 1259,
            "file_name": "pandas/core/window/rolling.py",
            "replace_code": "def apply(\n        self,\n        func,\n        raw: bool = False,\n        engine: str = \"cython\",\n        engine_kwargs: Optional[Dict] = None,\n        args: Optional[Tuple] = None,\n        kwargs: Optional[Dict] = None,\n    ):\n        if args is None:\n            args = ()\n        if kwargs is None:\n            kwargs = {}\n        kwargs.pop(\"_level\", None)\n        kwargs.pop(\"floor\", None)\n        \n        # Handle the raw parameter based on the engine type\n        if engine == \"cython\":\n            if engine_kwargs is not None:\n                raise ValueError(\"Cython engine does not accept engine_kwargs\")\n            # Pass the raw parameter to the internal function\n            apply_func = self._generate_cython_apply_func(\n                args, kwargs, raw=raw, offset=offset, func=func\n            )\n        elif engine == \"numba\":\n            if raw is False:\n                raise ValueError(\"Raw must be `True` when using the numba engine\")\n            if func in self._numba_func_cache:\n                apply_func = self._numba_func_cache[func]\n            else:\n                apply_func = generate_numba_apply_func(\n                    args, kwargs, func, engine_kwargs\n                )\n        else:\n            raise ValueError(\"Engine must be either 'numba' or 'cython'\")\n    \n        return self._apply(\n            apply_func,\n            center=False,  # Consider changing center parameter based on use case\n            floor=0,\n            name=func,\n            use_numba_cache=engine == \"numba\",\n        )"
        }
    ]
}