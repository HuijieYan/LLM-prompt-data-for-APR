{
    "pandas": [
        {
            "bugID": 60,
            "bitvector": {
                "1.3.1": 0,
                "1.3.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.1.2": 1,
                "2.2.3": 0,
                "2.2.4": 1,
                "2.2.5": 1,
                "2.2.6": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "start_line": 1259,
            "file_name": "pandas/core/window/rolling.py",
            "replace_code": "def apply(self, func, raw: bool = False, engine: str = \"cython\", engine_kwargs: Optional[Dict] = None, args: Optional[Tuple] = None, kwargs: Optional[Dict] = None):\n\n    if args is None:\n        args = ()\n    if kwargs is None:\n        kwargs = {}\n    kwargs.pop(\"_level\", None)\n    kwargs.pop(\"floor\", None)\n    window = self._get_window()\n    offset = calculate_center_offset(window) if self.center else 0\n    if engine == \"cython\":\n        if engine_kwargs is not None:\n            raise ValueError(\"cython engine does not accept engine_kwargs\")\n        apply_func = self._generate_cython_apply_func(args, kwargs, func, raw, offset)\n    elif engine == \"numba\":\n        if not raw:\n            raise ValueError(\"raw must be `True` when using the numba engine\")\n        apply_func = generate_numba_apply_func(args, kwargs, func, engine_kwargs)\n    else:\n        raise ValueError(\"engine must be either 'numba' or 'cython'\")\n    \n    return self._apply(apply_func, center=False, floor=0, name=func, use_numba_cache=engine == \"numba\")"
        }
    ]
}