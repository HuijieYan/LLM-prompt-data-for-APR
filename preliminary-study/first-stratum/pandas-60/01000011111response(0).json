{
    "pandas": [
        {
            "bugID": 60,
            "bitvector": {
                "1.3.2": 0,
                "1.2.4": 1,
                "1.2.1": 0,
                "1.3.4": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "start_line": 1259,
            "file_name": "pandas/core/window/rolling.py",
            "replace_code": "def apply(\n    self,\n    func,\n    raw: bool = False,\n    engine: str = \"cython\",\n    engine_kwargs: Optional[Dict] = None,\n    args: Optional[Tuple] = None,\n    kwargs: Optional[Dict] = None,\n):\n    if args is None:\n        args = ()\n    if kwargs is None:\n        kwargs = {}\n    kwargs.pop(\"_level\", None)\n    kwargs.pop(\"floor\", None)\n    window = self._get_window()\n    offset = calculate_center_offset(window) if self.center else 0\n\n    if engine not in [\"cython\", \"numba\"]:\n        raise ValueError(\"engine must be either 'numba' or 'cython'\")\n\n    if engine == \"cython\" and engine_kwargs is not None:\n        raise ValueError(\"cython engine does not accept engine_kwargs\")\n\n    if engine == \"numba\" and not raw:\n        raise ValueError(\"raw must be `True` when using the numba engine\")\n\n    apply_func = self._generate_cython_apply_func(\n        args, kwargs, raw, offset, func\n    ) if engine == \"cython\" else generate_numba_apply_func(\n        args, kwargs, func, engine_kwargs\n    )\n\n    use_numba_cache = engine == \"numba\"\n\n    if self.engine == \"cython\" and engine_kwargs is not None:\n        raise ValueError(\"cython engine does not accept engine_kwargs\")\n\n    return self._apply(\n        apply_func,\n        center=False,\n        floor=0,\n        name=func,\n        use_numba_cache=use_numba_cache,\n        raw=raw,\n    )"
        }
    ]
}