{
    "pandas:60": {
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/core/window/rolling.py": {
            "buggy_functions": [
                {
                    "function_name": "apply",
                    "function_code": "def apply(\n    self,\n    func,\n    raw: bool = False,\n    engine: str = \"cython\",\n    engine_kwargs: Optional[Dict] = None,\n    args: Optional[Tuple] = None,\n    kwargs: Optional[Dict] = None,\n):\n    if args is None:\n        args = ()\n    if kwargs is None:\n        kwargs = {}\n    kwargs.pop(\"_level\", None)\n    kwargs.pop(\"floor\", None)\n    window = self._get_window()\n    offset = calculate_center_offset(window) if self.center else 0\n    if not is_bool(raw):\n        raise ValueError(\"raw parameter must be `True` or `False`\")\n\n    if engine == \"cython\":\n        if engine_kwargs is not None:\n            raise ValueError(\"cython engine does not accept engine_kwargs\")\n        apply_func = self._generate_cython_apply_func(\n            args, kwargs, raw, offset, func\n        )\n    elif engine == \"numba\":\n        if raw is False:\n            raise ValueError(\"raw must be `True` when using the numba engine\")\n        if func in self._numba_func_cache:\n            # Return an already compiled version of roll_apply if available\n            apply_func = self._numba_func_cache[func]\n        else:\n            apply_func = generate_numba_apply_func(\n                args, kwargs, func, engine_kwargs\n            )\n    else:\n        raise ValueError(\"engine must be either 'numba' or 'cython'\")\n\n    # TODO: Why do we always pass center=False?\n    # name=func for WindowGroupByMixin._apply\n    return self._apply(\n        apply_func,\n        center=False,\n        floor=0,\n        name=func,\n        use_numba_cache=engine == \"numba\",\n    )\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 1259,
                    "variables": {
                        "bool": [
                            1262
                        ],
                        "str": [
                            1263
                        ],
                        "Optional": [
                            1264,
                            1265,
                            1266
                        ],
                        "Dict": [
                            1264,
                            1266
                        ],
                        "Tuple": [
                            1265
                        ],
                        "args": [
                            1293,
                            1283,
                            1268,
                            1269
                        ],
                        "kwargs": [
                            1283,
                            1293,
                            1270,
                            1271,
                            1272,
                            1273
                        ],
                        "kwargs.pop": [
                            1272,
                            1273
                        ],
                        "window": [
                            1274,
                            1275
                        ],
                        "self._get_window": [
                            1274
                        ],
                        "self": [
                            1282,
                            1288,
                            1290,
                            1300,
                            1274,
                            1275
                        ],
                        "offset": [
                            1283,
                            1275
                        ],
                        "self.center": [
                            1275
                        ],
                        "calculate_center_offset": [
                            1275
                        ],
                        "is_bool": [
                            1276
                        ],
                        "raw": [
                            1283,
                            1276,
                            1286
                        ],
                        "ValueError": [
                            1296,
                            1281,
                            1277,
                            1287
                        ],
                        "engine": [
                            1305,
                            1285,
                            1279
                        ],
                        "engine_kwargs": [
                            1280,
                            1293
                        ],
                        "apply_func": [
                            1282,
                            1290,
                            1292,
                            1301
                        ],
                        "self._generate_cython_apply_func": [
                            1282
                        ],
                        "func": [
                            1283,
                            1288,
                            1290,
                            1293,
                            1304
                        ],
                        "self._numba_func_cache": [
                            1288,
                            1290
                        ],
                        "generate_numba_apply_func": [
                            1292
                        ],
                        "self._apply": [
                            1300
                        ]
                    },
                    "filtered_variables": {
                        "Optional": [
                            1264,
                            1265,
                            1266
                        ],
                        "Dict": [
                            1264,
                            1266
                        ],
                        "Tuple": [
                            1265
                        ],
                        "args": [
                            1293,
                            1283,
                            1268,
                            1269
                        ],
                        "kwargs": [
                            1283,
                            1293,
                            1270,
                            1271,
                            1272,
                            1273
                        ],
                        "kwargs.pop": [
                            1272,
                            1273
                        ],
                        "window": [
                            1274,
                            1275
                        ],
                        "self._get_window": [
                            1274
                        ],
                        "self": [
                            1282,
                            1288,
                            1290,
                            1300,
                            1274,
                            1275
                        ],
                        "offset": [
                            1283,
                            1275
                        ],
                        "self.center": [
                            1275
                        ],
                        "calculate_center_offset": [
                            1275
                        ],
                        "is_bool": [
                            1276
                        ],
                        "raw": [
                            1283,
                            1276,
                            1286
                        ],
                        "engine": [
                            1305,
                            1285,
                            1279
                        ],
                        "engine_kwargs": [
                            1280,
                            1293
                        ],
                        "apply_func": [
                            1282,
                            1290,
                            1292,
                            1301
                        ],
                        "self._generate_cython_apply_func": [
                            1282
                        ],
                        "func": [
                            1283,
                            1288,
                            1290,
                            1293,
                            1304
                        ],
                        "self._numba_func_cache": [
                            1288,
                            1290
                        ],
                        "generate_numba_apply_func": [
                            1292
                        ],
                        "self._apply": [
                            1300
                        ]
                    },
                    "diff_line_number": 1299,
                    "class_data": {
                        "signature": "class _Rolling_and_Expanding(_Rolling)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def count(self):\n    blocks, obj = self._create_blocks()\n    results = []\n    for b in blocks:\n        result = b.notna().astype(int)\n        result = self._constructor(result, window=self._get_window(), min_periods=self.min_periods or 0, center=self.center, axis=self.axis, closed=self.closed).sum()\n        results.append(result)\n    return self._wrap_results(results, blocks, obj)",
                            "def apply(self, func, raw: bool=False, engine: str='cython', engine_kwargs: Optional[Dict]=None, args: Optional[Tuple]=None, kwargs: Optional[Dict]=None):\n    if args is None:\n        args = ()\n    if kwargs is None:\n        kwargs = {}\n    kwargs.pop('_level', None)\n    kwargs.pop('floor', None)\n    window = self._get_window()\n    offset = calculate_center_offset(window) if self.center else 0\n    if not is_bool(raw):\n        raise ValueError('raw parameter must be `True` or `False`')\n    if engine == 'cython':\n        if engine_kwargs is not None:\n            raise ValueError('cython engine does not accept engine_kwargs')\n        apply_func = self._generate_cython_apply_func(args, kwargs, raw, offset, func)\n    elif engine == 'numba':\n        if raw is False:\n            raise ValueError('raw must be `True` when using the numba engine')\n        if func in self._numba_func_cache:\n            apply_func = self._numba_func_cache[func]\n        else:\n            apply_func = generate_numba_apply_func(args, kwargs, func, engine_kwargs)\n    else:\n        raise ValueError(\"engine must be either 'numba' or 'cython'\")\n    return self._apply(apply_func, center=False, floor=0, name=func, use_numba_cache=engine == 'numba')",
                            "def _generate_cython_apply_func(self, args, kwargs, raw, offset, func):\n    from pandas import Series\n    window_func = partial(self._get_cython_func_type('roll_generic'), args=args, kwargs=kwargs, raw=raw, offset=offset, func=func)\n\n    def apply_func(values, begin, end, min_periods, raw=raw):\n        if not raw:\n            values = Series(values, index=self.obj.index)\n        return window_func(values, begin, end, min_periods)\n    return apply_func",
                            "def sum(self, *args, **kwargs):\n    nv.validate_window_func('sum', args, kwargs)\n    window_func = self._get_cython_func_type('roll_sum')\n    kwargs.pop('floor', None)\n    return self._apply(window_func, center=self.center, floor=0, name='sum', **kwargs)",
                            "def max(self, *args, **kwargs):\n    nv.validate_window_func('max', args, kwargs)\n    window_func = self._get_cython_func_type('roll_max')\n    return self._apply(window_func, center=self.center, name='max', **kwargs)",
                            "def min(self, *args, **kwargs):\n    nv.validate_window_func('min', args, kwargs)\n    window_func = self._get_cython_func_type('roll_min')\n    return self._apply(window_func, center=self.center, name='min', **kwargs)",
                            "def mean(self, *args, **kwargs):\n    nv.validate_window_func('mean', args, kwargs)\n    window_func = self._get_cython_func_type('roll_mean')\n    return self._apply(window_func, center=self.center, name='mean', **kwargs)",
                            "def median(self, **kwargs):\n    window_func = self._get_roll_func('roll_median_c')\n    window_func = partial(window_func, win=self._get_window())\n    return self._apply(window_func, center=self.center, name='median', **kwargs)",
                            "def std(self, ddof=1, *args, **kwargs):\n    nv.validate_window_func('std', args, kwargs)\n    kwargs.pop('require_min_periods', None)\n    window_func = self._get_cython_func_type('roll_var')\n\n    def zsqrt_func(values, begin, end, min_periods):\n        return zsqrt(window_func(values, begin, end, min_periods, ddof=ddof))\n    return self._apply(zsqrt_func, center=self.center, require_min_periods=1, name='std', ddof=ddof, **kwargs)",
                            "def var(self, ddof=1, *args, **kwargs):\n    nv.validate_window_func('var', args, kwargs)\n    kwargs.pop('require_min_periods', None)\n    window_func = partial(self._get_cython_func_type('roll_var'), ddof=ddof)\n    return self._apply(window_func, center=self.center, require_min_periods=1, name='var', ddof=ddof, **kwargs)",
                            "def skew(self, **kwargs):\n    window_func = self._get_cython_func_type('roll_skew')\n    kwargs.pop('require_min_periods', None)\n    return self._apply(window_func, center=self.center, require_min_periods=3, name='skew', **kwargs)",
                            "def kurt(self, **kwargs):\n    window_func = self._get_cython_func_type('roll_kurt')\n    kwargs.pop('require_min_periods', None)\n    return self._apply(window_func, center=self.center, require_min_periods=4, name='kurt', **kwargs)",
                            "def quantile(self, quantile, interpolation='linear', **kwargs):\n    if quantile == 1.0:\n        window_func = self._get_cython_func_type('roll_max')\n    elif quantile == 0.0:\n        window_func = self._get_cython_func_type('roll_min')\n    else:\n        window_func = partial(self._get_roll_func('roll_quantile'), win=self._get_window(), quantile=quantile, interpolation=interpolation)\n    kwargs['quantile'] = quantile\n    kwargs['interpolation'] = interpolation\n    return self._apply(window_func, center=self.center, name='quantile', **kwargs)",
                            "def cov(self, other=None, pairwise=None, ddof=1, **kwargs):\n    if other is None:\n        other = self._selected_obj\n        pairwise = True if pairwise is None else pairwise\n    other = self._shallow_copy(other)\n    if self.is_freq_type:\n        window = self.win_freq\n    else:\n        window = self._get_window(other)\n\n    def _get_cov(X, Y):\n        X = X.astype('float64')\n        Y = Y.astype('float64')\n        mean = lambda x: x.rolling(window, self.min_periods, center=self.center).mean(**kwargs)\n        count = (X + Y).rolling(window=window, min_periods=0, center=self.center).count(**kwargs)\n        bias_adj = count / (count - ddof)\n        return (mean(X * Y) - mean(X) * mean(Y)) * bias_adj\n    return _flex_binary_moment(self._selected_obj, other._selected_obj, _get_cov, pairwise=bool(pairwise))",
                            "def corr(self, other=None, pairwise=None, **kwargs):\n    if other is None:\n        other = self._selected_obj\n        pairwise = True if pairwise is None else pairwise\n    other = self._shallow_copy(other)\n    window = self._get_window(other)\n\n    def _get_corr(a, b):\n        a = a.rolling(window=window, min_periods=self.min_periods, center=self.center)\n        b = b.rolling(window=window, min_periods=self.min_periods, center=self.center)\n        return a.cov(b, **kwargs) / (a.std(**kwargs) * b.std(**kwargs))\n    return _flex_binary_moment(self._selected_obj, other._selected_obj, _get_corr, pairwise=bool(pairwise))",
                            "def apply_func(values, begin, end, min_periods, raw=raw):\n    if not raw:\n        values = Series(values, index=self.obj.index)\n    return window_func(values, begin, end, min_periods)",
                            "def zsqrt_func(values, begin, end, min_periods):\n    return zsqrt(window_func(values, begin, end, min_periods, ddof=ddof))",
                            "def _get_cov(X, Y):\n    X = X.astype('float64')\n    Y = Y.astype('float64')\n    mean = lambda x: x.rolling(window, self.min_periods, center=self.center).mean(**kwargs)\n    count = (X + Y).rolling(window=window, min_periods=0, center=self.center).count(**kwargs)\n    bias_adj = count / (count - ddof)\n    return (mean(X * Y) - mean(X) * mean(Y)) * bias_adj",
                            "def _get_corr(a, b):\n    a = a.rolling(window=window, min_periods=self.min_periods, center=self.center)\n    b = b.rolling(window=window, min_periods=self.min_periods, center=self.center)\n    return a.cov(b, **kwargs) / (a.std(**kwargs) * b.std(**kwargs))"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": []
                    },
                    "variable_values_start": [
                        {
                            "varName": "Optional",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "Dict",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "Tuple",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "args",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "kwargs",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "kwargs.pop",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "window",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "self._get_window",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "self",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "offset",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "self.center",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "calculate_center_offset",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "is_bool",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "raw",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "engine",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "engine_kwargs",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "apply_func",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "self._generate_cython_apply_func",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "func",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "self._numba_func_cache",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "generate_numba_apply_func",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "self._apply",
                            "value": "None",
                            "varType": "None"
                        }
                    ],
                    "variable_values_end": [
                        {
                            "varName": "Optional",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "Dict",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "Tuple",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "args",
                            "value": "()",
                            "varType": "tuple"
                        },
                        {
                            "varName": "kwargs",
                            "value": "{}",
                            "varType": "dict"
                        },
                        {
                            "varName": "kwargs.pop",
                            "value": "<built-in method pop of dict object at 0x1166645c0>",
                            "varType": "builtin_function_or_method"
                        },
                        {
                            "varName": "window",
                            "value": "1",
                            "varType": "int"
                        },
                        {
                            "varName": "self._get_window",
                            "value": "<bound method _Window._get_window of Rolling [window=1,center=False,axis=0]>",
                            "varType": "method"
                        },
                        {
                            "varName": "self",
                            "value": "Rolling [window=1,center=False,axis=0]",
                            "varType": "Rolling"
                        },
                        {
                            "varName": "offset",
                            "value": "0",
                            "varType": "int"
                        },
                        {
                            "varName": "self.center",
                            "value": "False",
                            "varType": "bool"
                        },
                        {
                            "varName": "calculate_center_offset",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "is_bool",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "raw",
                            "value": "False",
                            "varType": "bool"
                        },
                        {
                            "varName": "engine",
                            "value": "cython",
                            "varType": "str"
                        },
                        {
                            "varName": "engine_kwargs",
                            "value": "None",
                            "varType": "NoneType"
                        },
                        {
                            "varName": "apply_func",
                            "value": "<function _Rolling_and_Expanding._generate_cython_apply_func.<locals>.apply_func at 0x1166edca0>",
                            "varType": "function"
                        },
                        {
                            "varName": "self._generate_cython_apply_func",
                            "value": "<bound method _Rolling_and_Expanding._generate_cython_apply_func of Rolling [window=1,center=False,axis=0]>",
                            "varType": "method"
                        },
                        {
                            "varName": "func",
                            "value": "<function TestGrouperGrouping.test_groupby_rolling.<locals>.foo at 0x1166ed0d0>",
                            "varType": "function"
                        },
                        {
                            "varName": "self._numba_func_cache",
                            "value": "{}",
                            "varType": "dict"
                        },
                        {
                            "varName": "generate_numba_apply_func",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "self._apply",
                            "value": "<bound method _Window._apply of Rolling [window=1,center=False,axis=0]>",
                            "varType": "method"
                        }
                    ],
                    "angelic_variable_values_start": [
                        {
                            "varName": "Optional",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "Dict",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "Tuple",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "args",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "kwargs",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "kwargs.pop",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "window",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "self._get_window",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "self",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "offset",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "self.center",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "calculate_center_offset",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "is_bool",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "raw",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "engine",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "engine_kwargs",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "apply_func",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "self._generate_cython_apply_func",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "func",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "self._numba_func_cache",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "generate_numba_apply_func",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "self._apply",
                            "value": "None",
                            "varType": "None"
                        }
                    ],
                    "angelic_variable_values_end": [
                        {
                            "varName": "Optional",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "Dict",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "Tuple",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "args",
                            "value": "()",
                            "varType": "tuple"
                        },
                        {
                            "varName": "kwargs",
                            "value": "{}",
                            "varType": "dict"
                        },
                        {
                            "varName": "kwargs.pop",
                            "value": "<built-in method pop of dict object at 0x11a799e40>",
                            "varType": "builtin_function_or_method"
                        },
                        {
                            "varName": "window",
                            "value": "1",
                            "varType": "int"
                        },
                        {
                            "varName": "self._get_window",
                            "value": "<bound method _Window._get_window of Rolling [window=1,center=False,axis=0]>",
                            "varType": "method"
                        },
                        {
                            "varName": "self",
                            "value": "Rolling [window=1,center=False,axis=0]",
                            "varType": "Rolling"
                        },
                        {
                            "varName": "offset",
                            "value": "0",
                            "varType": "int"
                        },
                        {
                            "varName": "self.center",
                            "value": "False",
                            "varType": "bool"
                        },
                        {
                            "varName": "calculate_center_offset",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "is_bool",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "raw",
                            "value": "False",
                            "varType": "bool"
                        },
                        {
                            "varName": "engine",
                            "value": "cython",
                            "varType": "str"
                        },
                        {
                            "varName": "engine_kwargs",
                            "value": "None",
                            "varType": "NoneType"
                        },
                        {
                            "varName": "apply_func",
                            "value": "<function _Rolling_and_Expanding._generate_cython_apply_func.<locals>.apply_func at 0x11a6ef310>",
                            "varType": "function"
                        },
                        {
                            "varName": "self._generate_cython_apply_func",
                            "value": "<bound method _Rolling_and_Expanding._generate_cython_apply_func of Rolling [window=1,center=False,axis=0]>",
                            "varType": "method"
                        },
                        {
                            "varName": "func",
                            "value": "<function TestGrouperGrouping.test_groupby_rolling.<locals>.foo at 0x11a673ca0>",
                            "varType": "function"
                        },
                        {
                            "varName": "self._numba_func_cache",
                            "value": "{}",
                            "varType": "dict"
                        },
                        {
                            "varName": "generate_numba_apply_func",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "self._apply",
                            "value": "<bound method _Window._apply of Rolling [window=1,center=False,axis=0]>",
                            "varType": "method"
                        }
                    ]
                }
            ],
            "inscope_functions": [],
            "variables_in_file": {
                "PandasObject": [
                    59
                ],
                "ShallowMixin": [
                    59
                ],
                "SelectionMixin": [
                    59
                ],
                "_attributes": [
                    60
                ],
                "List": [
                    452,
                    60
                ],
                "str": [
                    416,
                    962,
                    69,
                    389,
                    1831,
                    234,
                    77,
                    237,
                    79,
                    80,
                    369,
                    1007,
                    1263,
                    214,
                    186,
                    955,
                    60,
                    95
                ],
                "exclusions": [
                    69
                ],
                "Set": [
                    69
                ],
                "set": [
                    69
                ],
                "Optional": [
                    416,
                    102,
                    75,
                    76,
                    77,
                    79,
                    80,
                    1007,
                    1264,
                    1265,
                    1266,
                    214,
                    254,
                    95
                ],
                "int": [
                    1187,
                    75,
                    399,
                    214,
                    413,
                    414
                ],
                "bool": [
                    417,
                    1665,
                    1797,
                    102,
                    1803,
                    76,
                    110,
                    1262,
                    412,
                    415
                ],
                "Axis": [
                    78
                ],
                "Union": [
                    962,
                    1007,
                    79
                ],
                "Index": [
                    79,
                    1809,
                    1816,
                    1819,
                    156
                ],
                "self.__dict__.update": [
                    84
                ],
                "self.__dict__": [
                    84
                ],
                "self": [
                    1025,
                    514,
                    518,
                    521,
                    523,
                    1529,
                    2105,
                    2106,
                    1595,
                    2107,
                    1597,
                    1086,
                    1600,
                    1601,
                    1090,
                    1609,
                    1100,
                    1102,
                    1103,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    1112,
                    1113,
                    1120,
                    1123,
                    1124,
                    1637,
                    1640,
                    1131,
                    1643,
                    1644,
                    1646,
                    111,
                    114,
                    116,
                    118,
                    1654,
                    1658,
                    125,
                    126,
                    127,
                    128,
                    1665,
                    153,
                    156,
                    158,
                    1184,
                    1188,
                    1190,
                    1191,
                    1192,
                    1193,
                    1194,
                    1198,
                    178,
                    179,
                    180,
                    183,
                    184,
                    187,
                    188,
                    189,
                    190,
                    193,
                    197,
                    229,
                    230,
                    231,
                    235,
                    243,
                    244,
                    245,
                    1780,
                    1783,
                    248,
                    1784,
                    1274,
                    1275,
                    1788,
                    1791,
                    257,
                    1282,
                    1797,
                    1288,
                    1290,
                    267,
                    1805,
                    1810,
                    1811,
                    1300,
                    1812,
                    1815,
                    1816,
                    1817,
                    1818,
                    1819,
                    1822,
                    1312,
                    289,
                    1830,
                    1831,
                    1322,
                    1834,
                    1835,
                    1838,
                    1329,
                    1331,
                    1332,
                    1845,
                    1846,
                    1847,
                    1850,
                    1851,
                    1853,
                    319,
                    1856,
                    1858,
                    1348,
                    1349,
                    1861,
                    327,
                    328,
                    330,
                    331,
                    333,
                    1870,
                    335,
                    1871,
                    1872,
                    340,
                    1883,
                    1886,
                    359,
                    365,
                    1390,
                    1391,
                    1395,
                    1396,
                    395,
                    396,
                    397,
                    403,
                    404,
                    405,
                    406,
                    1436,
                    1437,
                    1438,
                    1443,
                    1449,
                    1451,
                    940,
                    1964,
                    1965,
                    1966,
                    1461,
                    1463,
                    1465,
                    955,
                    444,
                    445,
                    956,
                    447,
                    957,
                    449,
                    958,
                    455,
                    1484,
                    1486,
                    1488,
                    1110,
                    479,
                    483,
                    484,
                    491,
                    492,
                    493,
                    1004,
                    501,
                    1527,
                    505,
                    1531,
                    511
                ],
                "kwargs": [
                    1794,
                    1283,
                    1655,
                    1528,
                    521,
                    523,
                    1293,
                    2067,
                    2073,
                    1438,
                    2080,
                    1441,
                    1314,
                    1442,
                    1955,
                    2085,
                    1455,
                    1328,
                    1330,
                    1459,
                    1332,
                    1460,
                    444,
                    1469,
                    1086,
                    1347,
                    1987,
                    1349,
                    1607,
                    1608,
                    1609,
                    1993,
                    1099,
                    1994,
                    1485,
                    1103,
                    2000,
                    2001,
                    1491,
                    84,
                    1109,
                    2006,
                    2007,
                    1113,
                    986,
                    2012,
                    2013,
                    1119,
                    1122,
                    2018,
                    1124,
                    999,
                    2023,
                    1001,
                    1130,
                    1131,
                    1004,
                    1389,
                    2024,
                    1391,
                    2029,
                    2030,
                    1394,
                    1396,
                    2036,
                    1270,
                    1271,
                    1272,
                    1273,
                    1659,
                    1534
                ],
                "self.obj": [
                    197,
                    1830,
                    1322,
                    1815,
                    178,
                    340,
                    85,
                    1812,
                    189,
                    1818,
                    1819,
                    125
                ],
                "obj": [
                    518,
                    153,
                    157,
                    158,
                    159,
                    288,
                    161,
                    289,
                    290,
                    1184,
                    297,
                    299,
                    1198,
                    319,
                    447,
                    328,
                    458,
                    331,
                    85,
                    93,
                    352
                ],
                "self.on": [
                    328,
                    2107,
                    1822,
                    1871,
                    1872,
                    1810,
                    86,
                    1816,
                    1817,
                    1818,
                    1819,
                    156,
                    158,
                    2105
                ],
                "on": [
                    86
                ],
                "self.closed": [
                    1861,
                    1194,
                    493,
                    118,
                    87
                ],
                "closed": [
                    87
                ],
                "self.window": [
                    128,
                    1025,
                    1856,
                    1858,
                    229,
                    231,
                    1831,
                    395,
                    940,
                    403,
                    404,
                    1845,
                    1846,
                    88,
                    1883,
                    1853,
                    1886,
                    127
                ],
                "window": [
                    1025,
                    514,
                    1026,
                    1027,
                    1028,
                    1032,
                    137,
                    144,
                    406,
                    407,
                    1658,
                    940,
                    941,
                    945,
                    947,
                    948,
                    445,
                    960,
                    449,
                    470,
                    88,
                    477,
                    479,
                    362,
                    1644,
                    1646,
                    501,
                    1654,
                    1784,
                    1274,
                    1275,
                    1788,
                    1791
                ],
                "self.min_periods": [
                    483,
                    484,
                    230,
                    1191,
                    491,
                    1791,
                    116,
                    501,
                    1654,
                    89,
                    1850,
                    1851,
                    1788,
                    479
                ],
                "min_periods": [
                    482,
                    1446,
                    1323,
                    495,
                    89,
                    478
                ],
                "self.center": [
                    1275,
                    1438,
                    1192,
                    1451,
                    1838,
                    1966,
                    1332,
                    1465,
                    1349,
                    1609,
                    1103,
                    1488,
                    1113,
                    90,
                    1124,
                    492,
                    1391,
                    114,
                    1396,
                    1654,
                    1658,
                    1531,
                    1788,
                    1791
                ],
                "center": [
                    513,
                    90,
                    470
                ],
                "self.win_type": [
                    955,
                    1004,
                    111,
                    1847,
                    91,
                    956,
                    957,
                    958
                ],
                "win_type": [
                    992,
                    994,
                    987,
                    1000,
                    1032,
                    985,
                    986,
                    91,
                    444,
                    445
                ],
                "self.win_freq": [
                    1644,
                    92,
                    1845
                ],
                "self.axis": [
                    359,
                    1193,
                    365,
                    1811,
                    505,
                    93
                ],
                "axis": [
                    93
                ],
                "obj._get_axis_number": [
                    93
                ],
                "self.validate": [
                    94
                ],
                "self._numba_func_cache": [
                    1288,
                    1290,
                    511,
                    95
                ],
                "Dict": [
                    962,
                    199,
                    1264,
                    1266,
                    95
                ],
                "Callable": [
                    369,
                    411,
                    389,
                    95
                ],
                "dict": [
                    95
                ],
                "Window": [
                    2088,
                    99
                ],
                "property": [
                    97,
                    101,
                    233,
                    105,
                    109,
                    1135,
                    2096
                ],
                "is_bool": [
                    114,
                    1276
                ],
                "ValueError": [
                    384,
                    1281,
                    1287,
                    143,
                    1296,
                    273,
                    1821,
                    949,
                    956,
                    958,
                    960,
                    1857,
                    1859,
                    1862,
                    1874,
                    1884,
                    1885,
                    360,
                    1000,
                    115,
                    117,
                    124,
                    1277
                ],
                "is_integer": [
                    1856,
                    947,
                    116,
                    1028
                ],
                "isinstance": [
                    477,
                    1026,
                    292,
                    229,
                    1830,
                    458,
                    395,
                    1804,
                    941,
                    1853,
                    945,
                    403,
                    1816,
                    1818,
                    955,
                    156,
                    125,
                    127
                ],
                "ABCSeries": [
                    125
                ],
                "ABCDataFrame": [
                    458,
                    1818,
                    125
                ],
                "TypeError": [
                    457,
                    273,
                    274,
                    1884,
                    126
                ],
                "type": [
                    193,
                    235,
                    299,
                    144,
                    126
                ],
                "BaseIndexer": [
                    131,
                    229,
                    395,
                    140,
                    941,
                    1853,
                    399,
                    403,
                    477,
                    127
                ],
                "self._validate_get_window_bounds_signature": [
                    128
                ],
                "get_window_bounds_signature": [
                    136,
                    142
                ],
                "parameters.keys": [
                    136,
                    139
                ],
                "parameters": [
                    136,
                    139
                ],
                "inspect.signature": [
                    136,
                    139
                ],
                "inspect": [
                    136,
                    139
                ],
                "window.get_window_bounds": [
                    137
                ],
                "expected_signature": [
                    139,
                    142
                ],
                "get_window_bounds": [
                    140
                ],
                "__name__": [
                    144,
                    193,
                    235
                ],
                "staticmethod": [
                    130
                ],
                "self._selected_obj": [
                    257,
                    289,
                    1665,
                    1637,
                    1797,
                    327,
                    1780,
                    153
                ],
                "obj.ndim": [
                    157
                ],
                "obj.reindex": [
                    158
                ],
                "obj.columns.difference": [
                    158
                ],
                "obj.columns": [
                    158
                ],
                "blocks": [
                    448,
                    161,
                    159,
                    1184,
                    1186,
                    453,
                    1198,
                    317,
                    447
                ],
                "values": [
                    256,
                    257,
                    261,
                    262,
                    263,
                    264,
                    265,
                    268,
                    272,
                    274,
                    277,
                    279,
                    281,
                    159,
                    1446,
                    1322,
                    1323,
                    455,
                    465,
                    466,
                    504,
                    505,
                    507
                ],
                "obj._to_dict_of_blocks": [
                    159
                ],
                "subset": [
                    177,
                    178,
                    179,
                    181,
                    182,
                    2108
                ],
                "self._shallow_copy": [
                    1640,
                    179,
                    1783
                ],
                "self._reset_cache": [
                    180
                ],
                "subset.ndim": [
                    181
                ],
                "is_scalar": [
                    182
                ],
                "key": [
                    2108,
                    182,
                    183
                ],
                "is_list_like": [
                    182
                ],
                "self._selection": [
                    333,
                    335,
                    183
                ],
                "attr": [
                    193,
                    187,
                    188,
                    189,
                    190
                ],
                "self._internal_names_set": [
                    187
                ],
                "object.__getattribute__": [
                    188
                ],
                "object": [
                    188
                ],
                "AttributeError": [
                    192
                ],
                "self.obj._dir_additions": [
                    197
                ],
                "attrs_list": [
                    242,
                    247
                ],
                "attr_name": [
                    243,
                    244,
                    245
                ],
                "getattr": [
                    257,
                    243,
                    245,
                    957,
                    382
                ],
                "self._attributes": [
                    244
                ],
                "attrs": [
                    248,
                    247
                ],
                "join": [
                    247
                ],
                "self._window_type": [
                    248,
                    267
                ],
                "url": [
                    251,
                    252
                ],
                "NotImplementedError": [
                    457,
                    266,
                    942,
                    1839,
                    252
                ],
                "np.ndarray": [
                    1026,
                    355,
                    292,
                    1008,
                    945,
                    254
                ],
                "np": [
                    471,
                    355,
                    292,
                    503,
                    1026,
                    508,
                    366,
                    1008,
                    945,
                    500,
                    277,
                    279,
                    505,
                    476,
                    254
                ],
                "is_float_dtype": [
                    261
                ],
                "values.dtype": [
                    261,
                    263,
                    265,
                    268,
                    274
                ],
                "ensure_float64": [
                    264,
                    272,
                    262
                ],
                "is_integer_dtype": [
                    263
                ],
                "needs_i8_conversion": [
                    265
                ],
                "inf": [
                    277,
                    278,
                    279
                ],
                "np.isinf": [
                    277
                ],
                "inf.any": [
                    278
                ],
                "np.where": [
                    279
                ],
                "np.nan": [
                    471,
                    279
                ],
                "index": [
                    297,
                    290,
                    299
                ],
                "obj.index": [
                    328,
                    290,
                    331
                ],
                "result": [
                    514,
                    516,
                    521,
                    522,
                    524,
                    1187,
                    292,
                    1188,
                    294,
                    1189,
                    297,
                    299,
                    300,
                    1196,
                    317,
                    1086,
                    319,
                    320,
                    321,
                    322,
                    1087,
                    1090,
                    1092,
                    359,
                    364,
                    366,
                    367,
                    505,
                    507,
                    508
                ],
                "result.ndim": [
                    320,
                    364,
                    294,
                    359
                ],
                "Series": [
                    297,
                    1322,
                    331
                ],
                "obj.name": [
                    297
                ],
                "block.columns": [
                    299
                ],
                "block": [
                    299,
                    317,
                    319
                ],
                "final": [
                    353,
                    322,
                    331,
                    316,
                    351
                ],
                "zip": [
                    317
                ],
                "results": [
                    1185,
                    451,
                    516,
                    518,
                    1196,
                    1198,
                    466,
                    317
                ],
                "self._wrap_result": [
                    319
                ],
                "final.append": [
                    322,
                    331
                ],
                "columns": [
                    353,
                    327,
                    340,
                    341,
                    342,
                    346,
                    348
                ],
                "self._selected_obj.columns": [
                    327
                ],
                "self._on.equals": [
                    328
                ],
                "self._on": [
                    328,
                    330,
                    331,
                    1805,
                    1870,
                    406,
                    2106
                ],
                "name": [
                    330,
                    331,
                    339,
                    341,
                    511
                ],
                "self._on.name": [
                    330
                ],
                "selection": [
                    339,
                    341,
                    335
                ],
                "ensure_index": [
                    335
                ],
                "self.obj.columns": [
                    1818,
                    340,
                    1815
                ],
                "indexer": [
                    341,
                    342
                ],
                "columns.get_indexer": [
                    341
                ],
                "selection.tolist": [
                    341
                ],
                "columns.take": [
                    342
                ],
                "sorted": [
                    342
                ],
                "exclude": [
                    452,
                    518,
                    459,
                    345,
                    346
                ],
                "c": [
                    346
                ],
                "DataError": [
                    349,
                    463
                ],
                "len": [
                    479,
                    490,
                    485,
                    351
                ],
                "obj.astype": [
                    352
                ],
                "reindex": [
                    353
                ],
                "concat": [
                    353
                ],
                "FrameOrSeries": [
                    302
                ],
                "offset": [
                    1283,
                    1316,
                    362,
                    363,
                    365,
                    470,
                    471,
                    1275
                ],
                "calculate_center_offset": [
                    362,
                    1275,
                    470
                ],
                "lead_indexer": [
                    364,
                    365,
                    366
                ],
                "slice": [
                    364,
                    365
                ],
                "np.copy": [
                    366
                ],
                "tuple": [
                    992,
                    945,
                    1026,
                    366
                ],
                "window_func": [
                    387,
                    1436,
                    1437,
                    1438,
                    1311,
                    1443,
                    1446,
                    1323,
                    1965,
                    1966,
                    1329,
                    1332,
                    1461,
                    1464,
                    1595,
                    1597,
                    1599,
                    1348,
                    1349,
                    1609,
                    1100,
                    1101,
                    1484,
                    1103,
                    1487,
                    1110,
                    1111,
                    1113,
                    1120,
                    1121,
                    1124,
                    1390,
                    1391,
                    1395,
                    1396,
                    1527,
                    1530,
                    382,
                    383
                ],
                "window_aggregations": [
                    382
                ],
                "func_name": [
                    385,
                    382
                ],
                "self.is_freq_type": [
                    1643,
                    395,
                    1964,
                    405
                ],
                "self._get_roll_func": [
                    1120,
                    1600,
                    396,
                    397,
                    1100,
                    1965,
                    1110,
                    1436
                ],
                "func": [
                    1090,
                    1283,
                    1955,
                    1317,
                    1288,
                    521,
                    1290,
                    523,
                    396,
                    397,
                    1293,
                    495,
                    1982,
                    501,
                    1304,
                    1086,
                    511
                ],
                "partial": [
                    1120,
                    397,
                    1599,
                    1461,
                    1437,
                    1311
                ],
                "self._get_window": [
                    1601,
                    1190,
                    397,
                    1646,
                    1784,
                    1274,
                    1437,
                    445
                ],
                "VariableWindowIndexer": [
                    406
                ],
                "self._on.asi8": [
                    406
                ],
                "FixedWindowIndexer": [
                    407
                ],
                "self._get_win_type": [
                    444
                ],
                "self._create_blocks": [
                    1184,
                    447
                ],
                "block_list": [
                    448,
                    460,
                    518
                ],
                "list": [
                    448,
                    945,
                    1026
                ],
                "window_indexer": [
                    449,
                    489
                ],
                "self._get_window_indexer": [
                    449
                ],
                "Scalar": [
                    452
                ],
                "i": [
                    460,
                    453
                ],
                "b": [
                    1186,
                    1187,
                    1794,
                    453,
                    455,
                    459,
                    1790
                ],
                "enumerate": [
                    453
                ],
                "self._prep_values": [
                    455
                ],
                "b.values": [
                    455
                ],
                "exclude.extend": [
                    459
                ],
                "b.columns": [
                    459
                ],
                "values.size": [
                    465
                ],
                "results.append": [
                    466,
                    516,
                    1196
                ],
                "values.copy": [
                    466
                ],
                "additional_nans": [
                    476,
                    500,
                    471
                ],
                "np.array": [
                    471
                ],
                "is_weighted": [
                    473
                ],
                "x": [
                    485,
                    490,
                    495,
                    500,
                    501,
                    1653,
                    476,
                    479
                ],
                "np.concatenate": [
                    476,
                    500
                ],
                "calculate_min_periods": [
                    482,
                    478
                ],
                "require_min_periods": [
                    486,
                    479
                ],
                "floor": [
                    487,
                    479
                ],
                "start": [
                    489,
                    495
                ],
                "end": [
                    489,
                    1323,
                    1446,
                    495
                ],
                "window_indexer.get_window_bounds": [
                    489
                ],
                "np.errstate": [
                    503
                ],
                "values.ndim": [
                    504
                ],
                "np.apply_along_axis": [
                    505
                ],
                "calc": [
                    505,
                    507
                ],
                "np.asarray": [
                    508
                ],
                "use_numba_cache": [
                    510
                ],
                "self._center_window": [
                    514
                ],
                "self._wrap_results": [
                    1198,
                    518
                ],
                "how": [
                    521,
                    1086
                ],
                "self._aggregate": [
                    521,
                    1086
                ],
                "args": [
                    1283,
                    521,
                    523,
                    1293,
                    1313,
                    1441,
                    1955,
                    1328,
                    1459,
                    1086,
                    1986,
                    1347,
                    1993,
                    1994,
                    1099,
                    2000,
                    2001,
                    1109,
                    2006,
                    2007,
                    2012,
                    2013,
                    1119,
                    2023,
                    1130,
                    1389,
                    2029,
                    1394,
                    1268,
                    1269
                ],
                "self.apply": [
                    523
                ],
                "agg": [
                    1094,
                    1957,
                    526
                ],
                "aggregate": [
                    1094,
                    1955,
                    1957,
                    526
                ],
                "_shared_docs": [
                    1537,
                    1668,
                    651,
                    528,
                    2065,
                    2070,
                    2078,
                    1953,
                    2083,
                    1960,
                    1200,
                    1971,
                    1335,
                    1084,
                    1472,
                    711,
                    1351,
                    1097,
                    1991,
                    1611,
                    1998,
                    1107,
                    2004,
                    1494,
                    2010,
                    1117,
                    605,
                    2016,
                    2021,
                    1128,
                    2027,
                    2034,
                    1142,
                    1398
                ],
                "dedent": [
                    1537,
                    1890,
                    1668,
                    711,
                    1351,
                    1034,
                    651,
                    1899,
                    528,
                    1200,
                    1043,
                    1142,
                    1335,
                    1398,
                    1494,
                    2038,
                    605
                ],
                "_Window": [
                    772,
                    1134
                ],
                "validate": [
                    938,
                    1827
                ],
                "super": [
                    2080,
                    2018,
                    1827,
                    1955,
                    2085,
                    2024,
                    938,
                    1994,
                    2030,
                    1968,
                    2001,
                    2013,
                    2067,
                    2036,
                    2007,
                    2072,
                    2108,
                    1981
                ],
                "import_optional_dependency": [
                    950
                ],
                "sig": [
                    1032,
                    957
                ],
                "arg_map": [
                    977,
                    986,
                    985
                ],
                "win_args": [
                    992,
                    986,
                    990
                ],
                "_pop_args": [
                    986
                ],
                "win_args.insert": [
                    990
                ],
                "all_args": [
                    1001,
                    1002,
                    997
                ],
                "n": [
                    1000,
                    1001,
                    998,
                    999
                ],
                "arg_names": [
                    998
                ],
                "all_args.append": [
                    1001
                ],
                "kwargs.pop": [
                    1122,
                    1442,
                    1528,
                    1001,
                    1485,
                    1330,
                    1460,
                    1272,
                    1273
                ],
                "_validate_win_type": [
                    1004
                ],
                "Tuple": [
                    1265,
                    962,
                    1007
                ],
                "astype": [
                    1032,
                    1027,
                    1187
                ],
                "com.asarray_tuplesafe": [
                    1027
                ],
                "com": [
                    1027
                ],
                "float": [
                    1032,
                    1027
                ],
                "sig.get_window": [
                    1032
                ],
                "_agg_see_also_doc": [
                    1890,
                    1034,
                    1947,
                    1078
                ],
                "_agg_examples_doc": [
                    1899,
                    1043,
                    1948,
                    1079
                ],
                "Substitution": [
                    2064,
                    2069,
                    1946,
                    2076,
                    2082,
                    1959,
                    1970,
                    1077,
                    1990,
                    1096,
                    1996,
                    1106,
                    2003,
                    2009,
                    1116,
                    2015,
                    2020,
                    1127,
                    2026,
                    2032
                ],
                "Appender": [
                    2063,
                    2065,
                    2070,
                    2077,
                    2078,
                    1953,
                    2083,
                    1960,
                    1971,
                    1084,
                    1991,
                    1097,
                    1997,
                    1998,
                    1107,
                    2004,
                    2010,
                    1117,
                    2016,
                    2021,
                    1128,
                    2027,
                    2033,
                    2034
                ],
                "nv.validate_window_func": [
                    1441,
                    1347,
                    1130,
                    1099,
                    1389,
                    1328,
                    1394,
                    1459,
                    1109,
                    1119
                ],
                "nv": [
                    1441,
                    1347,
                    2023,
                    1993,
                    1130,
                    1099,
                    1389,
                    2029,
                    1328,
                    2000,
                    1394,
                    1459,
                    1109,
                    2006,
                    2012,
                    1119
                ],
                "get_weighted_roll_func": [
                    1121,
                    1101,
                    1111
                ],
                "self._apply": [
                    1123,
                    1349,
                    1449,
                    1609,
                    1102,
                    1391,
                    1486,
                    1966,
                    1331,
                    1300,
                    1396,
                    1463,
                    1112,
                    1529,
                    1438
                ],
                "ddof": [
                    1120,
                    2080,
                    1446,
                    2024,
                    1131,
                    1454,
                    2030,
                    1461,
                    1468,
                    1661
                ],
                "zsqrt": [
                    1131,
                    1446
                ],
                "self.var": [
                    1131
                ],
                "Rolling": [
                    2088,
                    1137,
                    2098,
                    2091
                ],
                "_Rolling": [
                    1140
                ],
                "b.notna": [
                    1187
                ],
                "sum": [
                    1994,
                    1188
                ],
                "self._constructor": [
                    1188
                ],
                "raw": [
                    1315,
                    1283,
                    1286,
                    1320,
                    1321,
                    1276,
                    1983
                ],
                "engine": [
                    1984,
                    1305,
                    1285,
                    1279
                ],
                "engine_kwargs": [
                    1280,
                    1985,
                    1293
                ],
                "apply_func": [
                    1282,
                    1290,
                    1292,
                    1325,
                    1301
                ],
                "self._generate_cython_apply_func": [
                    1282
                ],
                "generate_numba_apply_func": [
                    1292
                ],
                "self._get_cython_func_type": [
                    1312,
                    1443,
                    1348,
                    1484,
                    1390,
                    1329,
                    1395,
                    1461,
                    1527,
                    1595,
                    1597
                ],
                "self.obj.index": [
                    1322,
                    1812
                ],
                "begin": [
                    1323,
                    1446
                ],
                "zsqrt_func": [
                    1450
                ],
                "quantile": [
                    1602,
                    1607,
                    2072,
                    2073,
                    1594,
                    1596
                ],
                "interpolation": [
                    1608,
                    2073,
                    1603
                ],
                "other": [
                    2080,
                    1665,
                    1636,
                    1637,
                    1797,
                    2085,
                    1640,
                    1646,
                    1779,
                    1780,
                    1783,
                    1784
                ],
                "pairwise": [
                    2080,
                    1665,
                    1797,
                    2085,
                    1639,
                    1782
                ],
                "X": [
                    1657,
                    1651,
                    1662
                ],
                "X.astype": [
                    1651
                ],
                "Y": [
                    1657,
                    1652,
                    1662
                ],
                "Y.astype": [
                    1652
                ],
                "mean": [
                    2013,
                    1653,
                    1662
                ],
                "x.rolling": [
                    1653
                ],
                "count": [
                    1656,
                    1657,
                    1661,
                    1968
                ],
                "rolling": [
                    1657
                ],
                "bias_adj": [
                    1661,
                    1662
                ],
                "_flex_binary_moment": [
                    1664,
                    1796
                ],
                "other._selected_obj": [
                    1665,
                    1797
                ],
                "_get_cov": [
                    1665
                ],
                "a": [
                    1794,
                    1787
                ],
                "a.rolling": [
                    1787
                ],
                "b.rolling": [
                    1790
                ],
                "a.cov": [
                    1794
                ],
                "a.std": [
                    1794
                ],
                "b.std": [
                    1794
                ],
                "_get_corr": [
                    1797
                ],
                "_Rolling_and_Expanding": [
                    1801
                ],
                "ABCDatetimeIndex": [
                    1805
                ],
                "ABCTimedeltaIndex": [
                    1805
                ],
                "ABCPeriodIndex": [
                    1805
                ],
                "cache_readonly": [
                    1808,
                    1802
                ],
                "self.obj.empty": [
                    1830
                ],
                "self.is_datetimelike": [
                    1861,
                    1830
                ],
                "ABCDateOffset": [
                    1831
                ],
                "timedelta": [
                    1831
                ],
                "self._validate_monotonic": [
                    1834
                ],
                "freq": [
                    1835,
                    1846
                ],
                "self._validate_freq": [
                    1835
                ],
                "freq.nanos": [
                    1846
                ],
                "self._on.is_monotonic_increasing": [
                    1870
                ],
                "self._on.is_monotonic_decreasing": [
                    1870
                ],
                "formatted": [
                    1873,
                    1874,
                    1871
                ],
                "to_offset": [
                    1883
                ],
                "apply": [
                    1981
                ],
                "nv.validate_rolling_func": [
                    2023,
                    1993,
                    2029,
                    2000,
                    2006,
                    2012
                ],
                "max": [
                    2001
                ],
                "_doc_template": [
                    2033,
                    2077,
                    1997
                ],
                "min": [
                    2007
                ],
                "median": [
                    2018
                ],
                "std": [
                    2024
                ],
                "var": [
                    2030
                ],
                "skew": [
                    2036
                ],
                "_agg_doc": [
                    2038,
                    2063
                ],
                "kurt": [
                    2067
                ],
                "cov": [
                    2080
                ],
                "corr": [
                    2085
                ],
                "Rolling.__doc__": [
                    2088
                ],
                "Window.__doc__": [
                    2088
                ],
                "WindowGroupByMixin": [
                    2091
                ],
                "self._groupby.obj": [
                    2106
                ],
                "self._groupby": [
                    2106
                ],
                "self._groupby.obj.set_index": [
                    2106
                ],
                "_gotitem": [
                    2108
                ],
                "ndim": [
                    2108
                ]
            },
            "filtered_variables_in_file": {
                "PandasObject": [
                    59
                ],
                "ShallowMixin": [
                    59
                ],
                "SelectionMixin": [
                    59
                ],
                "_attributes": [
                    60
                ],
                "List": [
                    452,
                    60
                ],
                "exclusions": [
                    69
                ],
                "Set": [
                    69
                ],
                "Optional": [
                    416,
                    102,
                    75,
                    76,
                    77,
                    79,
                    80,
                    1007,
                    1264,
                    1265,
                    1266,
                    214,
                    254,
                    95
                ],
                "Axis": [
                    78
                ],
                "Union": [
                    962,
                    1007,
                    79
                ],
                "Index": [
                    79,
                    1809,
                    1816,
                    1819,
                    156
                ],
                "self.__dict__.update": [
                    84
                ],
                "self.__dict__": [
                    84
                ],
                "self": [
                    1025,
                    514,
                    518,
                    521,
                    523,
                    1529,
                    2105,
                    2106,
                    1595,
                    2107,
                    1597,
                    1086,
                    1600,
                    1601,
                    1090,
                    1609,
                    1100,
                    1102,
                    1103,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    1112,
                    1113,
                    1120,
                    1123,
                    1124,
                    1637,
                    1640,
                    1131,
                    1643,
                    1644,
                    1646,
                    111,
                    114,
                    116,
                    118,
                    1654,
                    1658,
                    125,
                    126,
                    127,
                    128,
                    1665,
                    153,
                    156,
                    158,
                    1184,
                    1188,
                    1190,
                    1191,
                    1192,
                    1193,
                    1194,
                    1198,
                    178,
                    179,
                    180,
                    183,
                    184,
                    187,
                    188,
                    189,
                    190,
                    193,
                    197,
                    229,
                    230,
                    231,
                    235,
                    243,
                    244,
                    245,
                    1780,
                    1783,
                    248,
                    1784,
                    1274,
                    1275,
                    1788,
                    1791,
                    257,
                    1282,
                    1797,
                    1288,
                    1290,
                    267,
                    1805,
                    1810,
                    1811,
                    1300,
                    1812,
                    1815,
                    1816,
                    1817,
                    1818,
                    1819,
                    1822,
                    1312,
                    289,
                    1830,
                    1831,
                    1322,
                    1834,
                    1835,
                    1838,
                    1329,
                    1331,
                    1332,
                    1845,
                    1846,
                    1847,
                    1850,
                    1851,
                    1853,
                    319,
                    1856,
                    1858,
                    1348,
                    1349,
                    1861,
                    327,
                    328,
                    330,
                    331,
                    333,
                    1870,
                    335,
                    1871,
                    1872,
                    340,
                    1883,
                    1886,
                    359,
                    365,
                    1390,
                    1391,
                    1395,
                    1396,
                    395,
                    396,
                    397,
                    403,
                    404,
                    405,
                    406,
                    1436,
                    1437,
                    1438,
                    1443,
                    1449,
                    1451,
                    940,
                    1964,
                    1965,
                    1966,
                    1461,
                    1463,
                    1465,
                    955,
                    444,
                    445,
                    956,
                    447,
                    957,
                    449,
                    958,
                    455,
                    1484,
                    1486,
                    1488,
                    1110,
                    479,
                    483,
                    484,
                    491,
                    492,
                    493,
                    1004,
                    501,
                    1527,
                    505,
                    1531,
                    511
                ],
                "kwargs": [
                    1794,
                    1283,
                    1655,
                    1528,
                    521,
                    523,
                    1293,
                    2067,
                    2073,
                    1438,
                    2080,
                    1441,
                    1314,
                    1442,
                    1955,
                    2085,
                    1455,
                    1328,
                    1330,
                    1459,
                    1332,
                    1460,
                    444,
                    1469,
                    1086,
                    1347,
                    1987,
                    1349,
                    1607,
                    1608,
                    1609,
                    1993,
                    1099,
                    1994,
                    1485,
                    1103,
                    2000,
                    2001,
                    1491,
                    84,
                    1109,
                    2006,
                    2007,
                    1113,
                    986,
                    2012,
                    2013,
                    1119,
                    1122,
                    2018,
                    1124,
                    999,
                    2023,
                    1001,
                    1130,
                    1131,
                    1004,
                    1389,
                    2024,
                    1391,
                    2029,
                    2030,
                    1394,
                    1396,
                    2036,
                    1270,
                    1271,
                    1272,
                    1273,
                    1659,
                    1534
                ],
                "self.obj": [
                    197,
                    1830,
                    1322,
                    1815,
                    178,
                    340,
                    85,
                    1812,
                    189,
                    1818,
                    1819,
                    125
                ],
                "obj": [
                    518,
                    153,
                    157,
                    158,
                    159,
                    288,
                    161,
                    289,
                    290,
                    1184,
                    297,
                    299,
                    1198,
                    319,
                    447,
                    328,
                    458,
                    331,
                    85,
                    93,
                    352
                ],
                "self.on": [
                    328,
                    2107,
                    1822,
                    1871,
                    1872,
                    1810,
                    86,
                    1816,
                    1817,
                    1818,
                    1819,
                    156,
                    158,
                    2105
                ],
                "on": [
                    86
                ],
                "self.closed": [
                    1861,
                    1194,
                    493,
                    118,
                    87
                ],
                "closed": [
                    87
                ],
                "self.window": [
                    128,
                    1025,
                    1856,
                    1858,
                    229,
                    231,
                    1831,
                    395,
                    940,
                    403,
                    404,
                    1845,
                    1846,
                    88,
                    1883,
                    1853,
                    1886,
                    127
                ],
                "window": [
                    1025,
                    514,
                    1026,
                    1027,
                    1028,
                    1032,
                    137,
                    144,
                    406,
                    407,
                    1658,
                    940,
                    941,
                    945,
                    947,
                    948,
                    445,
                    960,
                    449,
                    470,
                    88,
                    477,
                    479,
                    362,
                    1644,
                    1646,
                    501,
                    1654,
                    1784,
                    1274,
                    1275,
                    1788,
                    1791
                ],
                "self.min_periods": [
                    483,
                    484,
                    230,
                    1191,
                    491,
                    1791,
                    116,
                    501,
                    1654,
                    89,
                    1850,
                    1851,
                    1788,
                    479
                ],
                "min_periods": [
                    482,
                    1446,
                    1323,
                    495,
                    89,
                    478
                ],
                "self.center": [
                    1275,
                    1438,
                    1192,
                    1451,
                    1838,
                    1966,
                    1332,
                    1465,
                    1349,
                    1609,
                    1103,
                    1488,
                    1113,
                    90,
                    1124,
                    492,
                    1391,
                    114,
                    1396,
                    1654,
                    1658,
                    1531,
                    1788,
                    1791
                ],
                "center": [
                    513,
                    90,
                    470
                ],
                "self.win_type": [
                    955,
                    1004,
                    111,
                    1847,
                    91,
                    956,
                    957,
                    958
                ],
                "win_type": [
                    992,
                    994,
                    987,
                    1000,
                    1032,
                    985,
                    986,
                    91,
                    444,
                    445
                ],
                "self.win_freq": [
                    1644,
                    92,
                    1845
                ],
                "self.axis": [
                    359,
                    1193,
                    365,
                    1811,
                    505,
                    93
                ],
                "axis": [
                    93
                ],
                "obj._get_axis_number": [
                    93
                ],
                "self.validate": [
                    94
                ],
                "self._numba_func_cache": [
                    1288,
                    1290,
                    511,
                    95
                ],
                "Dict": [
                    962,
                    199,
                    1264,
                    1266,
                    95
                ],
                "Callable": [
                    369,
                    411,
                    389,
                    95
                ],
                "Window": [
                    2088,
                    99
                ],
                "is_bool": [
                    114,
                    1276
                ],
                "is_integer": [
                    1856,
                    947,
                    116,
                    1028
                ],
                "ABCSeries": [
                    125
                ],
                "ABCDataFrame": [
                    458,
                    1818,
                    125
                ],
                "BaseIndexer": [
                    131,
                    229,
                    395,
                    140,
                    941,
                    1853,
                    399,
                    403,
                    477,
                    127
                ],
                "self._validate_get_window_bounds_signature": [
                    128
                ],
                "get_window_bounds_signature": [
                    136,
                    142
                ],
                "parameters.keys": [
                    136,
                    139
                ],
                "parameters": [
                    136,
                    139
                ],
                "inspect.signature": [
                    136,
                    139
                ],
                "inspect": [
                    136,
                    139
                ],
                "window.get_window_bounds": [
                    137
                ],
                "expected_signature": [
                    139,
                    142
                ],
                "get_window_bounds": [
                    140
                ],
                "self._selected_obj": [
                    257,
                    289,
                    1665,
                    1637,
                    1797,
                    327,
                    1780,
                    153
                ],
                "obj.ndim": [
                    157
                ],
                "obj.reindex": [
                    158
                ],
                "obj.columns.difference": [
                    158
                ],
                "obj.columns": [
                    158
                ],
                "blocks": [
                    448,
                    161,
                    159,
                    1184,
                    1186,
                    453,
                    1198,
                    317,
                    447
                ],
                "values": [
                    256,
                    257,
                    261,
                    262,
                    263,
                    264,
                    265,
                    268,
                    272,
                    274,
                    277,
                    279,
                    281,
                    159,
                    1446,
                    1322,
                    1323,
                    455,
                    465,
                    466,
                    504,
                    505,
                    507
                ],
                "obj._to_dict_of_blocks": [
                    159
                ],
                "subset": [
                    177,
                    178,
                    179,
                    181,
                    182,
                    2108
                ],
                "self._shallow_copy": [
                    1640,
                    179,
                    1783
                ],
                "self._reset_cache": [
                    180
                ],
                "subset.ndim": [
                    181
                ],
                "is_scalar": [
                    182
                ],
                "key": [
                    2108,
                    182,
                    183
                ],
                "is_list_like": [
                    182
                ],
                "self._selection": [
                    333,
                    335,
                    183
                ],
                "attr": [
                    193,
                    187,
                    188,
                    189,
                    190
                ],
                "self._internal_names_set": [
                    187
                ],
                "object.__getattribute__": [
                    188
                ],
                "self.obj._dir_additions": [
                    197
                ],
                "attrs_list": [
                    242,
                    247
                ],
                "attr_name": [
                    243,
                    244,
                    245
                ],
                "self._attributes": [
                    244
                ],
                "attrs": [
                    248,
                    247
                ],
                "join": [
                    247
                ],
                "self._window_type": [
                    248,
                    267
                ],
                "url": [
                    251,
                    252
                ],
                "np.ndarray": [
                    1026,
                    355,
                    292,
                    1008,
                    945,
                    254
                ],
                "np": [
                    471,
                    355,
                    292,
                    503,
                    1026,
                    508,
                    366,
                    1008,
                    945,
                    500,
                    277,
                    279,
                    505,
                    476,
                    254
                ],
                "is_float_dtype": [
                    261
                ],
                "values.dtype": [
                    261,
                    263,
                    265,
                    268,
                    274
                ],
                "ensure_float64": [
                    264,
                    272,
                    262
                ],
                "is_integer_dtype": [
                    263
                ],
                "needs_i8_conversion": [
                    265
                ],
                "inf": [
                    277,
                    278,
                    279
                ],
                "np.isinf": [
                    277
                ],
                "inf.any": [
                    278
                ],
                "np.where": [
                    279
                ],
                "np.nan": [
                    471,
                    279
                ],
                "index": [
                    297,
                    290,
                    299
                ],
                "obj.index": [
                    328,
                    290,
                    331
                ],
                "result": [
                    514,
                    516,
                    521,
                    522,
                    524,
                    1187,
                    292,
                    1188,
                    294,
                    1189,
                    297,
                    299,
                    300,
                    1196,
                    317,
                    1086,
                    319,
                    320,
                    321,
                    322,
                    1087,
                    1090,
                    1092,
                    359,
                    364,
                    366,
                    367,
                    505,
                    507,
                    508
                ],
                "result.ndim": [
                    320,
                    364,
                    294,
                    359
                ],
                "Series": [
                    297,
                    1322,
                    331
                ],
                "obj.name": [
                    297
                ],
                "block.columns": [
                    299
                ],
                "block": [
                    299,
                    317,
                    319
                ],
                "final": [
                    353,
                    322,
                    331,
                    316,
                    351
                ],
                "results": [
                    1185,
                    451,
                    516,
                    518,
                    1196,
                    1198,
                    466,
                    317
                ],
                "self._wrap_result": [
                    319
                ],
                "final.append": [
                    322,
                    331
                ],
                "columns": [
                    353,
                    327,
                    340,
                    341,
                    342,
                    346,
                    348
                ],
                "self._selected_obj.columns": [
                    327
                ],
                "self._on.equals": [
                    328
                ],
                "self._on": [
                    328,
                    330,
                    331,
                    1805,
                    1870,
                    406,
                    2106
                ],
                "name": [
                    330,
                    331,
                    339,
                    341,
                    511
                ],
                "self._on.name": [
                    330
                ],
                "selection": [
                    339,
                    341,
                    335
                ],
                "ensure_index": [
                    335
                ],
                "self.obj.columns": [
                    1818,
                    340,
                    1815
                ],
                "indexer": [
                    341,
                    342
                ],
                "columns.get_indexer": [
                    341
                ],
                "selection.tolist": [
                    341
                ],
                "columns.take": [
                    342
                ],
                "exclude": [
                    452,
                    518,
                    459,
                    345,
                    346
                ],
                "c": [
                    346
                ],
                "DataError": [
                    349,
                    463
                ],
                "obj.astype": [
                    352
                ],
                "reindex": [
                    353
                ],
                "concat": [
                    353
                ],
                "FrameOrSeries": [
                    302
                ],
                "offset": [
                    1283,
                    1316,
                    362,
                    363,
                    365,
                    470,
                    471,
                    1275
                ],
                "calculate_center_offset": [
                    362,
                    1275,
                    470
                ],
                "lead_indexer": [
                    364,
                    365,
                    366
                ],
                "np.copy": [
                    366
                ],
                "window_func": [
                    387,
                    1436,
                    1437,
                    1438,
                    1311,
                    1443,
                    1446,
                    1323,
                    1965,
                    1966,
                    1329,
                    1332,
                    1461,
                    1464,
                    1595,
                    1597,
                    1599,
                    1348,
                    1349,
                    1609,
                    1100,
                    1101,
                    1484,
                    1103,
                    1487,
                    1110,
                    1111,
                    1113,
                    1120,
                    1121,
                    1124,
                    1390,
                    1391,
                    1395,
                    1396,
                    1527,
                    1530,
                    382,
                    383
                ],
                "window_aggregations": [
                    382
                ],
                "func_name": [
                    385,
                    382
                ],
                "self.is_freq_type": [
                    1643,
                    395,
                    1964,
                    405
                ],
                "self._get_roll_func": [
                    1120,
                    1600,
                    396,
                    397,
                    1100,
                    1965,
                    1110,
                    1436
                ],
                "func": [
                    1090,
                    1283,
                    1955,
                    1317,
                    1288,
                    521,
                    1290,
                    523,
                    396,
                    397,
                    1293,
                    495,
                    1982,
                    501,
                    1304,
                    1086,
                    511
                ],
                "partial": [
                    1120,
                    397,
                    1599,
                    1461,
                    1437,
                    1311
                ],
                "self._get_window": [
                    1601,
                    1190,
                    397,
                    1646,
                    1784,
                    1274,
                    1437,
                    445
                ],
                "VariableWindowIndexer": [
                    406
                ],
                "self._on.asi8": [
                    406
                ],
                "FixedWindowIndexer": [
                    407
                ],
                "self._get_win_type": [
                    444
                ],
                "self._create_blocks": [
                    1184,
                    447
                ],
                "block_list": [
                    448,
                    460,
                    518
                ],
                "window_indexer": [
                    449,
                    489
                ],
                "self._get_window_indexer": [
                    449
                ],
                "Scalar": [
                    452
                ],
                "i": [
                    460,
                    453
                ],
                "b": [
                    1186,
                    1187,
                    1794,
                    453,
                    455,
                    459,
                    1790
                ],
                "self._prep_values": [
                    455
                ],
                "b.values": [
                    455
                ],
                "exclude.extend": [
                    459
                ],
                "b.columns": [
                    459
                ],
                "values.size": [
                    465
                ],
                "results.append": [
                    466,
                    516,
                    1196
                ],
                "values.copy": [
                    466
                ],
                "additional_nans": [
                    476,
                    500,
                    471
                ],
                "np.array": [
                    471
                ],
                "is_weighted": [
                    473
                ],
                "x": [
                    485,
                    490,
                    495,
                    500,
                    501,
                    1653,
                    476,
                    479
                ],
                "np.concatenate": [
                    476,
                    500
                ],
                "calculate_min_periods": [
                    482,
                    478
                ],
                "require_min_periods": [
                    486,
                    479
                ],
                "floor": [
                    487,
                    479
                ],
                "start": [
                    489,
                    495
                ],
                "end": [
                    489,
                    1323,
                    1446,
                    495
                ],
                "window_indexer.get_window_bounds": [
                    489
                ],
                "np.errstate": [
                    503
                ],
                "values.ndim": [
                    504
                ],
                "np.apply_along_axis": [
                    505
                ],
                "calc": [
                    505,
                    507
                ],
                "np.asarray": [
                    508
                ],
                "use_numba_cache": [
                    510
                ],
                "self._center_window": [
                    514
                ],
                "self._wrap_results": [
                    1198,
                    518
                ],
                "how": [
                    521,
                    1086
                ],
                "self._aggregate": [
                    521,
                    1086
                ],
                "args": [
                    1283,
                    521,
                    523,
                    1293,
                    1313,
                    1441,
                    1955,
                    1328,
                    1459,
                    1086,
                    1986,
                    1347,
                    1993,
                    1994,
                    1099,
                    2000,
                    2001,
                    1109,
                    2006,
                    2007,
                    2012,
                    2013,
                    1119,
                    2023,
                    1130,
                    1389,
                    2029,
                    1394,
                    1268,
                    1269
                ],
                "self.apply": [
                    523
                ],
                "agg": [
                    1094,
                    1957,
                    526
                ],
                "aggregate": [
                    1094,
                    1955,
                    1957,
                    526
                ],
                "_shared_docs": [
                    1537,
                    1668,
                    651,
                    528,
                    2065,
                    2070,
                    2078,
                    1953,
                    2083,
                    1960,
                    1200,
                    1971,
                    1335,
                    1084,
                    1472,
                    711,
                    1351,
                    1097,
                    1991,
                    1611,
                    1998,
                    1107,
                    2004,
                    1494,
                    2010,
                    1117,
                    605,
                    2016,
                    2021,
                    1128,
                    2027,
                    2034,
                    1142,
                    1398
                ],
                "dedent": [
                    1537,
                    1890,
                    1668,
                    711,
                    1351,
                    1034,
                    651,
                    1899,
                    528,
                    1200,
                    1043,
                    1142,
                    1335,
                    1398,
                    1494,
                    2038,
                    605
                ],
                "_Window": [
                    772,
                    1134
                ],
                "validate": [
                    938,
                    1827
                ],
                "import_optional_dependency": [
                    950
                ],
                "sig": [
                    1032,
                    957
                ],
                "arg_map": [
                    977,
                    986,
                    985
                ],
                "win_args": [
                    992,
                    986,
                    990
                ],
                "_pop_args": [
                    986
                ],
                "win_args.insert": [
                    990
                ],
                "all_args": [
                    1001,
                    1002,
                    997
                ],
                "n": [
                    1000,
                    1001,
                    998,
                    999
                ],
                "arg_names": [
                    998
                ],
                "all_args.append": [
                    1001
                ],
                "kwargs.pop": [
                    1122,
                    1442,
                    1528,
                    1001,
                    1485,
                    1330,
                    1460,
                    1272,
                    1273
                ],
                "_validate_win_type": [
                    1004
                ],
                "Tuple": [
                    1265,
                    962,
                    1007
                ],
                "astype": [
                    1032,
                    1027,
                    1187
                ],
                "com.asarray_tuplesafe": [
                    1027
                ],
                "com": [
                    1027
                ],
                "sig.get_window": [
                    1032
                ],
                "_agg_see_also_doc": [
                    1890,
                    1034,
                    1947,
                    1078
                ],
                "_agg_examples_doc": [
                    1899,
                    1043,
                    1948,
                    1079
                ],
                "Substitution": [
                    2064,
                    2069,
                    1946,
                    2076,
                    2082,
                    1959,
                    1970,
                    1077,
                    1990,
                    1096,
                    1996,
                    1106,
                    2003,
                    2009,
                    1116,
                    2015,
                    2020,
                    1127,
                    2026,
                    2032
                ],
                "Appender": [
                    2063,
                    2065,
                    2070,
                    2077,
                    2078,
                    1953,
                    2083,
                    1960,
                    1971,
                    1084,
                    1991,
                    1097,
                    1997,
                    1998,
                    1107,
                    2004,
                    2010,
                    1117,
                    2016,
                    2021,
                    1128,
                    2027,
                    2033,
                    2034
                ],
                "nv.validate_window_func": [
                    1441,
                    1347,
                    1130,
                    1099,
                    1389,
                    1328,
                    1394,
                    1459,
                    1109,
                    1119
                ],
                "nv": [
                    1441,
                    1347,
                    2023,
                    1993,
                    1130,
                    1099,
                    1389,
                    2029,
                    1328,
                    2000,
                    1394,
                    1459,
                    1109,
                    2006,
                    2012,
                    1119
                ],
                "get_weighted_roll_func": [
                    1121,
                    1101,
                    1111
                ],
                "self._apply": [
                    1123,
                    1349,
                    1449,
                    1609,
                    1102,
                    1391,
                    1486,
                    1966,
                    1331,
                    1300,
                    1396,
                    1463,
                    1112,
                    1529,
                    1438
                ],
                "ddof": [
                    1120,
                    2080,
                    1446,
                    2024,
                    1131,
                    1454,
                    2030,
                    1461,
                    1468,
                    1661
                ],
                "zsqrt": [
                    1131,
                    1446
                ],
                "self.var": [
                    1131
                ],
                "Rolling": [
                    2088,
                    1137,
                    2098,
                    2091
                ],
                "_Rolling": [
                    1140
                ],
                "b.notna": [
                    1187
                ],
                "self._constructor": [
                    1188
                ],
                "raw": [
                    1315,
                    1283,
                    1286,
                    1320,
                    1321,
                    1276,
                    1983
                ],
                "engine": [
                    1984,
                    1305,
                    1285,
                    1279
                ],
                "engine_kwargs": [
                    1280,
                    1985,
                    1293
                ],
                "apply_func": [
                    1282,
                    1290,
                    1292,
                    1325,
                    1301
                ],
                "self._generate_cython_apply_func": [
                    1282
                ],
                "generate_numba_apply_func": [
                    1292
                ],
                "self._get_cython_func_type": [
                    1312,
                    1443,
                    1348,
                    1484,
                    1390,
                    1329,
                    1395,
                    1461,
                    1527,
                    1595,
                    1597
                ],
                "self.obj.index": [
                    1322,
                    1812
                ],
                "begin": [
                    1323,
                    1446
                ],
                "zsqrt_func": [
                    1450
                ],
                "quantile": [
                    1602,
                    1607,
                    2072,
                    2073,
                    1594,
                    1596
                ],
                "interpolation": [
                    1608,
                    2073,
                    1603
                ],
                "other": [
                    2080,
                    1665,
                    1636,
                    1637,
                    1797,
                    2085,
                    1640,
                    1646,
                    1779,
                    1780,
                    1783,
                    1784
                ],
                "pairwise": [
                    2080,
                    1665,
                    1797,
                    2085,
                    1639,
                    1782
                ],
                "X": [
                    1657,
                    1651,
                    1662
                ],
                "X.astype": [
                    1651
                ],
                "Y": [
                    1657,
                    1652,
                    1662
                ],
                "Y.astype": [
                    1652
                ],
                "mean": [
                    2013,
                    1653,
                    1662
                ],
                "x.rolling": [
                    1653
                ],
                "count": [
                    1656,
                    1657,
                    1661,
                    1968
                ],
                "rolling": [
                    1657
                ],
                "bias_adj": [
                    1661,
                    1662
                ],
                "_flex_binary_moment": [
                    1664,
                    1796
                ],
                "other._selected_obj": [
                    1665,
                    1797
                ],
                "_get_cov": [
                    1665
                ],
                "a": [
                    1794,
                    1787
                ],
                "a.rolling": [
                    1787
                ],
                "b.rolling": [
                    1790
                ],
                "a.cov": [
                    1794
                ],
                "a.std": [
                    1794
                ],
                "b.std": [
                    1794
                ],
                "_get_corr": [
                    1797
                ],
                "_Rolling_and_Expanding": [
                    1801
                ],
                "ABCDatetimeIndex": [
                    1805
                ],
                "ABCTimedeltaIndex": [
                    1805
                ],
                "ABCPeriodIndex": [
                    1805
                ],
                "cache_readonly": [
                    1808,
                    1802
                ],
                "self.obj.empty": [
                    1830
                ],
                "self.is_datetimelike": [
                    1861,
                    1830
                ],
                "ABCDateOffset": [
                    1831
                ],
                "timedelta": [
                    1831
                ],
                "self._validate_monotonic": [
                    1834
                ],
                "freq": [
                    1835,
                    1846
                ],
                "self._validate_freq": [
                    1835
                ],
                "freq.nanos": [
                    1846
                ],
                "self._on.is_monotonic_increasing": [
                    1870
                ],
                "self._on.is_monotonic_decreasing": [
                    1870
                ],
                "formatted": [
                    1873,
                    1874,
                    1871
                ],
                "to_offset": [
                    1883
                ],
                "apply": [
                    1981
                ],
                "nv.validate_rolling_func": [
                    2023,
                    1993,
                    2029,
                    2000,
                    2006,
                    2012
                ],
                "_doc_template": [
                    2033,
                    2077,
                    1997
                ],
                "median": [
                    2018
                ],
                "std": [
                    2024
                ],
                "var": [
                    2030
                ],
                "skew": [
                    2036
                ],
                "_agg_doc": [
                    2038,
                    2063
                ],
                "kurt": [
                    2067
                ],
                "cov": [
                    2080
                ],
                "corr": [
                    2085
                ],
                "Rolling.__doc__": [
                    2088
                ],
                "Window.__doc__": [
                    2088
                ],
                "WindowGroupByMixin": [
                    2091
                ],
                "self._groupby.obj": [
                    2106
                ],
                "self._groupby": [
                    2106
                ],
                "self._groupby.obj.set_index": [
                    2106
                ],
                "_gotitem": [
                    2108
                ],
                "ndim": [
                    2108
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/window/test_grouper.py",
                "test_function": "test_groupby_rolling",
                "test_function_code": "    @pytest.mark.parametrize(\"expected_value,raw_value\", [[1.0, True], [0.0, False]])\n    def test_groupby_rolling(self, expected_value, raw_value):\n        # GH 31754\n\n        def foo(x):\n            return int(isinstance(x, np.ndarray))\n\n        df = pd.DataFrame({\"id\": [1, 1, 1], \"value\": [1, 2, 3]})\n        result = df.groupby(\"id\").value.rolling(1).apply(foo, raw=raw_value)\n        expected = Series(\n            [expected_value] * 3,\n            index=pd.MultiIndex.from_tuples(\n                ((1, 0), (1, 1), (1, 2)), names=[\"id\", None]\n            ),\n            name=\"value\",\n        )\n        tm.assert_series_equal(result, expected)",
                "test_error": "AssertionError: Series are different  Series values are different (100.0 %) [left]:  [0.0, 0.0, 0.0] [right]: [1.0, 1.0, 1.0]",
                "full_test_error": "self = <pandas.tests.window.test_grouper.TestGrouperGrouping object at 0x119280df0>\nexpected_value = 1.0, raw_value = True\n\n    @pytest.mark.parametrize(\"expected_value,raw_value\", [[1.0, True], [0.0, False]])\n    def test_groupby_rolling(self, expected_value, raw_value):\n        # GH 31754\n    \n        def foo(x):\n            return int(isinstance(x, np.ndarray))\n    \n        df = pd.DataFrame({\"id\": [1, 1, 1], \"value\": [1, 2, 3]})\n        result = df.groupby(\"id\").value.rolling(1).apply(foo, raw=raw_value)\n        expected = Series(\n            [expected_value] * 3,\n            index=pd.MultiIndex.from_tuples(\n                ((1, 0), (1, 1), (1, 2)), names=[\"id\", None]\n            ),\n            name=\"value\",\n        )\n>       tm.assert_series_equal(result, expected)\n\npandas/tests/window/test_grouper.py:210: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: Series are different\nE   \nE   Series values are different (100.0 %)\nE   [left]:  [0.0, 0.0, 0.0]\nE   [right]: [1.0, 1.0, 1.0]\n\npandas/_libs/testing.pyx:174: AssertionError",
                "traceback": "pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: Series are different\nE   \nE   Series values are different (100.0 %)\nE   [left]:  [0.0, 0.0, 0.0]\nE   [right]: [1.0, 1.0, 1.0]\n\npandas/_libs/testing.pyx:174: AssertionError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('expected_value,raw_value', [[1.0, True], [0.0, False]])"
                ]
            }
        ]
    }
}