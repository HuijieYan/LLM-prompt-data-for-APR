{
    "pandas:88": {
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/core/reshape/pivot.py": {
            "buggy_functions": [
                {
                    "function_name": "pivot_table",
                    "function_code": "@Substitution(\"\\ndata : DataFrame\")\n@Appender(_shared_docs[\"pivot_table\"], indents=1)\ndef pivot_table(\n    data,\n    values=None,\n    index=None,\n    columns=None,\n    aggfunc=\"mean\",\n    fill_value=None,\n    margins=False,\n    dropna=True,\n    margins_name=\"All\",\n    observed=False,\n) -> \"DataFrame\":\n    index = _convert_by(index)\n    columns = _convert_by(columns)\n\n    if isinstance(aggfunc, list):\n        pieces: List[DataFrame] = []\n        keys = []\n        for func in aggfunc:\n            table = pivot_table(\n                data,\n                values=values,\n                index=index,\n                columns=columns,\n                fill_value=fill_value,\n                aggfunc=func,\n                margins=margins,\n                dropna=dropna,\n                margins_name=margins_name,\n                observed=observed,\n            )\n            pieces.append(table)\n            keys.append(getattr(func, \"__name__\", func))\n\n        return concat(pieces, keys=keys, axis=1)\n\n    keys = index + columns\n\n    values_passed = values is not None\n    if values_passed:\n        if is_list_like(values):\n            values_multi = True\n            values = list(values)\n        else:\n            values_multi = False\n            values = [values]\n\n        # GH14938 Make sure value labels are in data\n        for i in values:\n            if i not in data:\n                raise KeyError(i)\n\n        to_filter = []\n        for x in keys + values:\n            if isinstance(x, Grouper):\n                x = x.key\n            try:\n                if x in data:\n                    to_filter.append(x)\n            except TypeError:\n                pass\n        if len(to_filter) < len(data.columns):\n            data = data[to_filter]\n\n    else:\n        values = data.columns\n        for key in keys:\n            try:\n                values = values.drop(key)\n            except (TypeError, ValueError, KeyError):\n                pass\n        values = list(values)\n\n    grouped = data.groupby(keys, observed=observed)\n    agged = grouped.agg(aggfunc)\n    if dropna and isinstance(agged, ABCDataFrame) and len(agged.columns):\n        agged = agged.dropna(how=\"all\")\n\n        # gh-21133\n        # we want to down cast if\n        # the original values are ints\n        # as we grouped with a NaN value\n        # and then dropped, coercing to floats\n        for v in values:\n            if (\n                v in data\n                and is_integer_dtype(data[v])\n                and v in agged\n                and not is_integer_dtype(agged[v])\n            ):\n                agged[v] = maybe_downcast_to_dtype(agged[v], data[v].dtype)\n\n    table = agged\n    if table.index.nlevels > 1:\n        # Related GH #17123\n        # If index_names are integers, determine whether the integers refer\n        # to the level position or name.\n        index_names = agged.index.names[: len(index)]\n        to_unstack = []\n        for i in range(len(index), len(keys)):\n            name = agged.index.names[i]\n            if name is None or name in index_names:\n                to_unstack.append(i)\n            else:\n                to_unstack.append(name)\n        table = agged.unstack(to_unstack)\n\n    if not dropna:\n        if table.index.nlevels > 1:\n            m = MultiIndex.from_arrays(\n                cartesian_product(table.index.levels), names=table.index.names\n            )\n            table = table.reindex(m, axis=0)\n\n        if table.columns.nlevels > 1:\n            m = MultiIndex.from_arrays(\n                cartesian_product(table.columns.levels), names=table.columns.names\n            )\n            table = table.reindex(m, axis=1)\n\n    if isinstance(table, ABCDataFrame):\n        table = table.sort_index(axis=1)\n\n    if fill_value is not None:\n        table = table._ensure_type(table.fillna(fill_value, downcast=\"infer\"))\n\n    if margins:\n        if dropna:\n            data = data[data.notna().all(axis=1)]\n        table = _add_margins(\n            table,\n            data,\n            values,\n            rows=index,\n            cols=columns,\n            aggfunc=aggfunc,\n            observed=dropna,\n            margins_name=margins_name,\n            fill_value=fill_value,\n        )\n\n    # discard the top level\n    if (\n        values_passed\n        and not values_multi\n        and not table.empty\n        and (table.columns.nlevels > 1)\n    ):\n        table = table[values[0]]\n\n    if len(index) == 0 and len(columns) > 0:\n        table = table.T\n\n    # GH 15193 Make sure empty columns are removed if dropna=True\n    if isinstance(table, ABCDataFrame) and dropna:\n        table = table.dropna(how=\"all\", axis=1)\n\n    return table\n",
                    "decorators": [
                        "Substitution('\\ndata : DataFrame')",
                        "Appender(_shared_docs['pivot_table'], indents=1)"
                    ],
                    "docstring": null,
                    "start_line": 25,
                    "variables": {
                        "index": [
                            160,
                            39,
                            49,
                            177,
                            124,
                            126,
                            63
                        ],
                        "_convert_by": [
                            40,
                            39
                        ],
                        "columns": [
                            161,
                            40,
                            177,
                            50,
                            63
                        ],
                        "isinstance": [
                            102,
                            42,
                            81,
                            147,
                            181
                        ],
                        "aggfunc": [
                            162,
                            42,
                            101,
                            45
                        ],
                        "list": [
                            42,
                            69,
                            98
                        ],
                        "pieces": [
                            58,
                            43,
                            61
                        ],
                        "List": [
                            43
                        ],
                        "DataFrame": [
                            43
                        ],
                        "keys": [
                            100,
                            44,
                            80,
                            93,
                            59,
                            61,
                            126,
                            63
                        ],
                        "func": [
                            59,
                            52,
                            45
                        ],
                        "table": [
                            132,
                            135,
                            137,
                            139,
                            141,
                            143,
                            145,
                            147,
                            148,
                            151,
                            156,
                            157,
                            172,
                            173,
                            46,
                            175,
                            178,
                            181,
                            182,
                            184,
                            58,
                            119,
                            120
                        ],
                        "pivot_table": [
                            46
                        ],
                        "data": [
                            100,
                            76,
                            47,
                            112,
                            113,
                            84,
                            117,
                            88,
                            89,
                            155,
                            92,
                            158
                        ],
                        "values": [
                            159,
                            65,
                            98,
                            67,
                            69,
                            72,
                            75,
                            110,
                            175,
                            48,
                            80,
                            92,
                            95
                        ],
                        "fill_value": [
                            51,
                            165,
                            150,
                            151
                        ],
                        "margins": [
                            153,
                            53
                        ],
                        "dropna": [
                            163,
                            102,
                            134,
                            181,
                            54,
                            154
                        ],
                        "margins_name": [
                            164,
                            55
                        ],
                        "observed": [
                            56,
                            100
                        ],
                        "pieces.append": [
                            58
                        ],
                        "keys.append": [
                            59
                        ],
                        "getattr": [
                            59
                        ],
                        "concat": [
                            61
                        ],
                        "values_passed": [
                            170,
                            65,
                            66
                        ],
                        "is_list_like": [
                            67
                        ],
                        "values_multi": [
                            171,
                            68,
                            71
                        ],
                        "i": [
                            129,
                            75,
                            76,
                            77,
                            126,
                            127
                        ],
                        "KeyError": [
                            96,
                            77
                        ],
                        "to_filter": [
                            88,
                            89,
                            85,
                            79
                        ],
                        "x": [
                            80,
                            81,
                            82,
                            84,
                            85
                        ],
                        "Grouper": [
                            81
                        ],
                        "x.key": [
                            82
                        ],
                        "to_filter.append": [
                            85
                        ],
                        "TypeError": [
                            96,
                            86
                        ],
                        "len": [
                            102,
                            177,
                            88,
                            124,
                            126
                        ],
                        "data.columns": [
                            88,
                            92
                        ],
                        "key": [
                            93,
                            95
                        ],
                        "values.drop": [
                            95
                        ],
                        "ValueError": [
                            96
                        ],
                        "grouped": [
                            100,
                            101
                        ],
                        "data.groupby": [
                            100
                        ],
                        "agged": [
                            132,
                            101,
                            102,
                            103,
                            114,
                            115,
                            117,
                            119,
                            124,
                            127
                        ],
                        "grouped.agg": [
                            101
                        ],
                        "ABCDataFrame": [
                            147,
                            181,
                            102
                        ],
                        "agged.columns": [
                            102
                        ],
                        "agged.dropna": [
                            103
                        ],
                        "v": [
                            110,
                            112,
                            113,
                            114,
                            115,
                            117
                        ],
                        "is_integer_dtype": [
                            113,
                            115
                        ],
                        "maybe_downcast_to_dtype": [
                            117
                        ],
                        "dtype": [
                            117
                        ],
                        "table.index.nlevels": [
                            120,
                            135
                        ],
                        "table.index": [
                            120,
                            137,
                            135
                        ],
                        "index_names": [
                            128,
                            124
                        ],
                        "agged.index.names": [
                            124,
                            127
                        ],
                        "agged.index": [
                            124,
                            127
                        ],
                        "to_unstack": [
                            129,
                            131,
                            132,
                            125
                        ],
                        "range": [
                            126
                        ],
                        "name": [
                            128,
                            131,
                            127
                        ],
                        "to_unstack.append": [
                            129,
                            131
                        ],
                        "agged.unstack": [
                            132
                        ],
                        "m": [
                            136,
                            145,
                            139,
                            142
                        ],
                        "MultiIndex.from_arrays": [
                            136,
                            142
                        ],
                        "MultiIndex": [
                            136,
                            142
                        ],
                        "cartesian_product": [
                            137,
                            143
                        ],
                        "table.index.levels": [
                            137
                        ],
                        "table.index.names": [
                            137
                        ],
                        "table.reindex": [
                            145,
                            139
                        ],
                        "table.columns.nlevels": [
                            141,
                            173
                        ],
                        "table.columns": [
                            173,
                            141,
                            143
                        ],
                        "table.columns.levels": [
                            143
                        ],
                        "table.columns.names": [
                            143
                        ],
                        "table.sort_index": [
                            148
                        ],
                        "table._ensure_type": [
                            151
                        ],
                        "table.fillna": [
                            151
                        ],
                        "all": [
                            155
                        ],
                        "data.notna": [
                            155
                        ],
                        "_add_margins": [
                            156
                        ],
                        "table.empty": [
                            172
                        ],
                        "table.T": [
                            178
                        ],
                        "table.dropna": [
                            182
                        ],
                        "Substitution": [
                            25
                        ],
                        "Appender": [
                            26
                        ],
                        "_shared_docs": [
                            26
                        ]
                    },
                    "filtered_variables": {
                        "index": [
                            160,
                            39,
                            49,
                            177,
                            124,
                            126,
                            63
                        ],
                        "_convert_by": [
                            40,
                            39
                        ],
                        "columns": [
                            161,
                            40,
                            177,
                            50,
                            63
                        ],
                        "aggfunc": [
                            162,
                            42,
                            101,
                            45
                        ],
                        "pieces": [
                            58,
                            43,
                            61
                        ],
                        "List": [
                            43
                        ],
                        "DataFrame": [
                            43
                        ],
                        "keys": [
                            100,
                            44,
                            80,
                            93,
                            59,
                            61,
                            126,
                            63
                        ],
                        "func": [
                            59,
                            52,
                            45
                        ],
                        "table": [
                            132,
                            135,
                            137,
                            139,
                            141,
                            143,
                            145,
                            147,
                            148,
                            151,
                            156,
                            157,
                            172,
                            173,
                            46,
                            175,
                            178,
                            181,
                            182,
                            184,
                            58,
                            119,
                            120
                        ],
                        "pivot_table": [
                            46
                        ],
                        "data": [
                            100,
                            76,
                            47,
                            112,
                            113,
                            84,
                            117,
                            88,
                            89,
                            155,
                            92,
                            158
                        ],
                        "values": [
                            159,
                            65,
                            98,
                            67,
                            69,
                            72,
                            75,
                            110,
                            175,
                            48,
                            80,
                            92,
                            95
                        ],
                        "fill_value": [
                            51,
                            165,
                            150,
                            151
                        ],
                        "margins": [
                            153,
                            53
                        ],
                        "dropna": [
                            163,
                            102,
                            134,
                            181,
                            54,
                            154
                        ],
                        "margins_name": [
                            164,
                            55
                        ],
                        "observed": [
                            56,
                            100
                        ],
                        "pieces.append": [
                            58
                        ],
                        "keys.append": [
                            59
                        ],
                        "concat": [
                            61
                        ],
                        "values_passed": [
                            170,
                            65,
                            66
                        ],
                        "is_list_like": [
                            67
                        ],
                        "values_multi": [
                            171,
                            68,
                            71
                        ],
                        "i": [
                            129,
                            75,
                            76,
                            77,
                            126,
                            127
                        ],
                        "to_filter": [
                            88,
                            89,
                            85,
                            79
                        ],
                        "x": [
                            80,
                            81,
                            82,
                            84,
                            85
                        ],
                        "Grouper": [
                            81
                        ],
                        "x.key": [
                            82
                        ],
                        "to_filter.append": [
                            85
                        ],
                        "data.columns": [
                            88,
                            92
                        ],
                        "key": [
                            93,
                            95
                        ],
                        "values.drop": [
                            95
                        ],
                        "grouped": [
                            100,
                            101
                        ],
                        "data.groupby": [
                            100
                        ],
                        "agged": [
                            132,
                            101,
                            102,
                            103,
                            114,
                            115,
                            117,
                            119,
                            124,
                            127
                        ],
                        "grouped.agg": [
                            101
                        ],
                        "ABCDataFrame": [
                            147,
                            181,
                            102
                        ],
                        "agged.columns": [
                            102
                        ],
                        "agged.dropna": [
                            103
                        ],
                        "v": [
                            110,
                            112,
                            113,
                            114,
                            115,
                            117
                        ],
                        "is_integer_dtype": [
                            113,
                            115
                        ],
                        "maybe_downcast_to_dtype": [
                            117
                        ],
                        "dtype": [
                            117
                        ],
                        "table.index.nlevels": [
                            120,
                            135
                        ],
                        "table.index": [
                            120,
                            137,
                            135
                        ],
                        "index_names": [
                            128,
                            124
                        ],
                        "agged.index.names": [
                            124,
                            127
                        ],
                        "agged.index": [
                            124,
                            127
                        ],
                        "to_unstack": [
                            129,
                            131,
                            132,
                            125
                        ],
                        "name": [
                            128,
                            131,
                            127
                        ],
                        "to_unstack.append": [
                            129,
                            131
                        ],
                        "agged.unstack": [
                            132
                        ],
                        "m": [
                            136,
                            145,
                            139,
                            142
                        ],
                        "MultiIndex.from_arrays": [
                            136,
                            142
                        ],
                        "MultiIndex": [
                            136,
                            142
                        ],
                        "cartesian_product": [
                            137,
                            143
                        ],
                        "table.index.levels": [
                            137
                        ],
                        "table.index.names": [
                            137
                        ],
                        "table.reindex": [
                            145,
                            139
                        ],
                        "table.columns.nlevels": [
                            141,
                            173
                        ],
                        "table.columns": [
                            173,
                            141,
                            143
                        ],
                        "table.columns.levels": [
                            143
                        ],
                        "table.columns.names": [
                            143
                        ],
                        "table.sort_index": [
                            148
                        ],
                        "table._ensure_type": [
                            151
                        ],
                        "table.fillna": [
                            151
                        ],
                        "data.notna": [
                            155
                        ],
                        "_add_margins": [
                            156
                        ],
                        "table.empty": [
                            172
                        ],
                        "table.T": [
                            178
                        ],
                        "table.dropna": [
                            182
                        ],
                        "Substitution": [
                            25
                        ],
                        "Appender": [
                            26
                        ],
                        "_shared_docs": [
                            26
                        ]
                    },
                    "diff_line_number": 120,
                    "class_data": null
                }
            ],
            "inscope_functions": [
                "pivot_table(data, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, dropna=True, margins_name='All', observed=False) -> 'DataFrame'",
                "_add_margins(table: Union['Series', 'DataFrame'], data, values, rows, cols, aggfunc, observed=None, margins_name: str='All', fill_value=None)",
                "_compute_grand_margin(data, values, aggfunc, margins_name: str='All')",
                "_generate_marginal_results(table, data, values, rows, cols, aggfunc, observed, grand_margin, margins_name: str='All')",
                "_generate_marginal_results_without_values(table: 'DataFrame', data, rows, cols, aggfunc, observed, margins_name: str='All')",
                "_convert_by(by)",
                "pivot(data: 'DataFrame', index=None, columns=None, values=None) -> 'DataFrame'",
                "crosstab(index, columns, values=None, rownames=None, colnames=None, aggfunc=None, margins=False, margins_name: str='All', dropna: bool=True, normalize=False) -> 'DataFrame'",
                "_normalize(table, normalize, margins: bool, margins_name='All')",
                "_get_names(arrs, names, prefix: str='row')",
                "_all_key(key)",
                "_all_key()"
            ],
            "variables_in_file": {
                "TYPE_CHECKING": [
                    19
                ],
                "index": [
                    160,
                    39,
                    558,
                    431,
                    432,
                    49,
                    177,
                    435,
                    436,
                    561,
                    438,
                    439,
                    565,
                    570,
                    444,
                    447,
                    63,
                    124,
                    126
                ],
                "_convert_by": [
                    40,
                    39
                ],
                "columns": [
                    448,
                    161,
                    40,
                    266,
                    431,
                    559,
                    177,
                    50,
                    562,
                    565,
                    439,
                    571,
                    63
                ],
                "isinstance": [
                    147,
                    287,
                    289,
                    290,
                    418,
                    42,
                    181,
                    565,
                    695,
                    441,
                    702,
                    198,
                    81,
                    220,
                    610,
                    102,
                    237,
                    242,
                    246,
                    253
                ],
                "aggfunc": [
                    388,
                    395,
                    406,
                    287,
                    288,
                    289,
                    162,
                    290,
                    291,
                    293,
                    295,
                    42,
                    300,
                    45,
                    573,
                    576,
                    323,
                    587,
                    206,
                    101,
                    232,
                    363,
                    244
                ],
                "list": [
                    98,
                    69,
                    423,
                    42,
                    367,
                    702,
                    703
                ],
                "pieces": [
                    58,
                    43,
                    61
                ],
                "List": [
                    43
                ],
                "DataFrame": [
                    43,
                    260,
                    581
                ],
                "keys": [
                    100,
                    44,
                    80,
                    93,
                    59,
                    61,
                    126,
                    63
                ],
                "func": [
                    59,
                    52,
                    45
                ],
                "table": [
                    643,
                    132,
                    644,
                    390,
                    135,
                    391,
                    137,
                    649,
                    139,
                    650,
                    141,
                    397,
                    143,
                    398,
                    145,
                    402,
                    147,
                    148,
                    403,
                    653,
                    151,
                    656,
                    661,
                    662,
                    663,
                    156,
                    157,
                    667,
                    668,
                    669,
                    675,
                    676,
                    678,
                    679,
                    680,
                    172,
                    173,
                    46,
                    175,
                    688,
                    178,
                    181,
                    182,
                    184,
                    58,
                    326,
                    202,
                    203,
                    589,
                    208,
                    210,
                    211,
                    601,
                    602,
                    220,
                    348,
                    605,
                    223,
                    227,
                    359,
                    360,
                    242,
                    244,
                    119,
                    120,
                    633,
                    634,
                    638,
                    639
                ],
                "pivot_table": [
                    46
                ],
                "data": [
                    388,
                    395,
                    406,
                    155,
                    285,
                    158,
                    300,
                    47,
                    433,
                    436,
                    438,
                    439,
                    569,
                    570,
                    443,
                    444,
                    571,
                    447,
                    323,
                    581,
                    76,
                    206,
                    84,
                    88,
                    89,
                    92,
                    100,
                    228,
                    363,
                    112,
                    113,
                    244,
                    117
                ],
                "values": [
                    283,
                    285,
                    159,
                    430,
                    175,
                    48,
                    441,
                    444,
                    573,
                    447,
                    576,
                    65,
                    67,
                    323,
                    69,
                    582,
                    72,
                    586,
                    75,
                    206,
                    80,
                    220,
                    92,
                    95,
                    225,
                    98,
                    229,
                    363,
                    110
                ],
                "fill_value": [
                    165,
                    51,
                    150,
                    151,
                    250
                ],
                "margins": [
                    617,
                    593,
                    53,
                    153,
                    602,
                    636
                ],
                "dropna": [
                    163,
                    102,
                    134,
                    595,
                    181,
                    54,
                    154
                ],
                "margins_name": [
                    384,
                    385,
                    643,
                    644,
                    647,
                    674,
                    164,
                    300,
                    55,
                    320,
                    198,
                    201,
                    203,
                    206,
                    594,
                    211,
                    216,
                    602,
                    218,
                    223,
                    235,
                    244
                ],
                "observed": [
                    323,
                    100,
                    388,
                    326,
                    233,
                    363,
                    395,
                    244,
                    406,
                    56,
                    348
                ],
                "pieces.append": [
                    58
                ],
                "keys.append": [
                    59
                ],
                "getattr": [
                    288,
                    291,
                    59
                ],
                "concat": [
                    354,
                    675,
                    61,
                    661
                ],
                "values_passed": [
                    170,
                    65,
                    66
                ],
                "is_list_like": [
                    441,
                    67
                ],
                "values_multi": [
                    171,
                    68,
                    71
                ],
                "i": [
                    129,
                    75,
                    76,
                    77,
                    694,
                    698,
                    126,
                    127
                ],
                "KeyError": [
                    96,
                    630,
                    77,
                    614
                ],
                "to_filter": [
                    88,
                    89,
                    85,
                    79
                ],
                "x": [
                    621,
                    622,
                    623,
                    80,
                    81,
                    82,
                    84,
                    85,
                    565
                ],
                "Grouper": [
                    81,
                    418
                ],
                "x.key": [
                    82
                ],
                "to_filter.append": [
                    85
                ],
                "TypeError": [
                    96,
                    296,
                    333,
                    271,
                    86
                ],
                "len": [
                    385,
                    387,
                    405,
                    177,
                    314,
                    700,
                    320,
                    322,
                    584,
                    215,
                    88,
                    216,
                    356,
                    102,
                    362,
                    367,
                    378,
                    124,
                    126,
                    383
                ],
                "data.columns": [
                    88,
                    92
                ],
                "key": [
                    320,
                    223,
                    260,
                    326,
                    327,
                    351,
                    332,
                    349,
                    341,
                    214,
                    216,
                    218,
                    348,
                    93,
                    95
                ],
                "values.drop": [
                    95
                ],
                "ValueError": [
                    96,
                    577,
                    646,
                    199,
                    615,
                    683,
                    204,
                    686,
                    212,
                    631,
                    574
                ],
                "grouped": [
                    100,
                    101
                ],
                "data.groupby": [
                    395,
                    100
                ],
                "agged": [
                    132,
                    101,
                    102,
                    103,
                    114,
                    115,
                    117,
                    119,
                    124,
                    127
                ],
                "grouped.agg": [
                    101
                ],
                "ABCDataFrame": [
                    102,
                    242,
                    147,
                    565,
                    181
                ],
                "agged.columns": [
                    102
                ],
                "agged.dropna": [
                    103
                ],
                "v": [
                    288,
                    291,
                    293,
                    295,
                    110,
                    112,
                    113,
                    114,
                    115,
                    117,
                    285
                ],
                "is_integer_dtype": [
                    113,
                    115
                ],
                "maybe_downcast_to_dtype": [
                    268,
                    117
                ],
                "dtype": [
                    265,
                    266,
                    268,
                    117
                ],
                "table.index.nlevels": [
                    120,
                    135
                ],
                "table.index": [
                    135,
                    679,
                    137,
                    202,
                    203,
                    120,
                    669,
                    638
                ],
                "index_names": [
                    128,
                    124
                ],
                "agged.index.names": [
                    124,
                    127
                ],
                "agged.index": [
                    124,
                    127
                ],
                "to_unstack": [
                    129,
                    131,
                    132,
                    125
                ],
                "range": [
                    126,
                    367
                ],
                "name": [
                    128,
                    131,
                    644,
                    643,
                    127
                ],
                "to_unstack.append": [
                    129,
                    131
                ],
                "agged.unstack": [
                    132
                ],
                "m": [
                    136,
                    145,
                    139,
                    142
                ],
                "MultiIndex.from_arrays": [
                    136,
                    142,
                    439
                ],
                "MultiIndex": [
                    136,
                    142,
                    439
                ],
                "cartesian_product": [
                    137,
                    143
                ],
                "table.index.levels": [
                    137
                ],
                "table.index.names": [
                    137,
                    202
                ],
                "table.reindex": [
                    145,
                    139
                ],
                "table.columns.nlevels": [
                    141,
                    173
                ],
                "table.columns": [
                    360,
                    680,
                    173,
                    141,
                    143,
                    210,
                    211,
                    403,
                    663,
                    639
                ],
                "table.columns.levels": [
                    143
                ],
                "table.columns.names": [
                    210,
                    143
                ],
                "table.sort_index": [
                    148
                ],
                "table._ensure_type": [
                    151
                ],
                "table.fillna": [
                    678,
                    662,
                    151,
                    634,
                    668
                ],
                "all": [
                    155
                ],
                "data.notna": [
                    155
                ],
                "_add_margins": [
                    156
                ],
                "table.empty": [
                    172
                ],
                "table.T": [
                    178
                ],
                "table.dropna": [
                    182
                ],
                "Substitution": [
                    25,
                    427
                ],
                "Appender": [
                    26,
                    428
                ],
                "_shared_docs": [
                    26,
                    428
                ],
                "Union": [
                    620,
                    188,
                    214
                ],
                "str": [
                    290,
                    195,
                    376,
                    610,
                    198,
                    459,
                    620,
                    691,
                    214,
                    312,
                    281,
                    253,
                    287
                ],
                "msg": [
                    201,
                    212,
                    204
                ],
                "format": [
                    201,
                    698,
                    647
                ],
                "level": [
                    210,
                    202,
                    203,
                    211
                ],
                "table.index.get_level_values": [
                    203
                ],
                "grand_margin": [
                    256,
                    288,
                    291,
                    293,
                    295,
                    234,
                    298,
                    206,
                    346,
                    284,
                    254,
                    223
                ],
                "_compute_grand_margin": [
                    206
                ],
                "table.ndim": [
                    208
                ],
                "table.columns.get_level_values": [
                    211
                ],
                "Tuple": [
                    214
                ],
                "rows": [
                    322,
                    323,
                    356,
                    387,
                    230,
                    388,
                    244,
                    215,
                    216
                ],
                "ABCSeries": [
                    418,
                    220,
                    565,
                    695
                ],
                "table.append": [
                    667,
                    676,
                    223
                ],
                "Series": [
                    408,
                    370,
                    351,
                    223
                ],
                "marginal_result_set": [
                    226,
                    237,
                    238,
                    239,
                    243,
                    246,
                    247,
                    248
                ],
                "_generate_marginal_results": [
                    226
                ],
                "cols": [
                    320,
                    385,
                    231,
                    266,
                    267,
                    362,
                    363,
                    378,
                    367,
                    431,
                    433,
                    244,
                    405,
                    406,
                    314,
                    383
                ],
                "tuple": [
                    441,
                    237,
                    246
                ],
                "result": [
                    262,
                    391,
                    265,
                    266,
                    270,
                    398,
                    400,
                    274,
                    275,
                    276,
                    402,
                    278,
                    408,
                    410,
                    354,
                    357,
                    359,
                    239,
                    370,
                    372,
                    248,
                    250
                ],
                "margin_keys": [
                    352,
                    344,
                    360,
                    392,
                    239,
                    399,
                    403,
                    372,
                    248,
                    380,
                    410,
                    252,
                    317
                ],
                "row_margin": [
                    256,
                    260,
                    408,
                    363,
                    364,
                    239,
                    368,
                    410,
                    370,
                    372,
                    406,
                    248,
                    250,
                    254
                ],
                "_generate_marginal_results_without_values": [
                    243
                ],
                "row_margin.reindex": [
                    250
                ],
                "result.columns": [
                    408,
                    250,
                    370
                ],
                "k": [
                    256,
                    288,
                    290,
                    291,
                    293,
                    295,
                    253,
                    252,
                    285,
                    254
                ],
                "margin_dummy": [
                    275,
                    267,
                    260,
                    270
                ],
                "T": [
                    260
                ],
                "row_names": [
                    276,
                    262
                ],
                "result.index.names": [
                    276,
                    262
                ],
                "result.index": [
                    274,
                    276,
                    262
                ],
                "set": [
                    265
                ],
                "result.dtypes": [
                    265
                ],
                "result.select_dtypes": [
                    266
                ],
                "apply": [
                    267,
                    388,
                    395,
                    406
                ],
                "result.append": [
                    275,
                    270
                ],
                "result.index._to_safe_for_reshape": [
                    274
                ],
                "items": [
                    285
                ],
                "dict": [
                    289
                ],
                "data.index": [
                    436,
                    300
                ],
                "table_pieces": [
                    354,
                    343,
                    316,
                    350,
                    351
                ],
                "margin": [
                    323,
                    388,
                    390,
                    395,
                    332,
                    397,
                    341,
                    346,
                    351
                ],
                "agg": [
                    363,
                    323
                ],
                "groupby": [
                    363,
                    323,
                    388,
                    406
                ],
                "cat_axis": [
                    354,
                    324,
                    326,
                    337,
                    338,
                    347,
                    348
                ],
                "piece": [
                    326,
                    330,
                    332,
                    336,
                    337,
                    341,
                    343,
                    348,
                    350
                ],
                "table.groupby": [
                    348,
                    326
                ],
                "all_key": [
                    352,
                    389,
                    390,
                    327,
                    392,
                    332,
                    396,
                    397,
                    399,
                    341,
                    344,
                    349,
                    351
                ],
                "_all_key": [
                    396,
                    349,
                    389,
                    327
                ],
                "piece.copy": [
                    330
                ],
                "piece.set_axis": [
                    336
                ],
                "_to_safe_for_reshape": [
                    337
                ],
                "piece._get_axis": [
                    337
                ],
                "table_pieces.append": [
                    351,
                    350,
                    343
                ],
                "margin_keys.append": [
                    344,
                    352,
                    392,
                    399
                ],
                "row_margin.stack": [
                    364
                ],
                "new_order": [
                    368,
                    367
                ],
                "row_margin.index": [
                    368
                ],
                "row_margin.index.reorder_levels": [
                    368
                ],
                "np.nan": [
                    408,
                    370
                ],
                "np": [
                    408,
                    418,
                    370
                ],
                "by": [
                    417,
                    418,
                    419,
                    421,
                    423,
                    424,
                    414,
                    415
                ],
                "is_scalar": [
                    417
                ],
                "np.ndarray": [
                    418
                ],
                "Index": [
                    418
                ],
                "hasattr": [
                    419
                ],
                "append": [
                    432,
                    433
                ],
                "indexed": [
                    448,
                    433,
                    443,
                    447
                ],
                "data.set_index": [
                    433
                ],
                "data._constructor": [
                    443
                ],
                "data._constructor_sliced": [
                    447
                ],
                "indexed.unstack": [
                    448
                ],
                "bool": [
                    608,
                    620,
                    610,
                    460
                ],
                "com.maybe_make_list": [
                    558,
                    559
                ],
                "com": [
                    558,
                    559
                ],
                "rownames": [
                    561,
                    570,
                    591
                ],
                "_get_names": [
                    561,
                    562
                ],
                "colnames": [
                    592,
                    562,
                    571
                ],
                "common_idx": [
                    564,
                    581,
                    567
                ],
                "pass_objs": [
                    565,
                    566,
                    567
                ],
                "get_objs_combined_axis": [
                    567
                ],
                "Dict": [
                    569,
                    620
                ],
                "data.update": [
                    570,
                    571
                ],
                "zip": [
                    570,
                    571
                ],
                "df": [
                    586,
                    589,
                    581,
                    583
                ],
                "kwargs": [
                    584,
                    587,
                    596
                ],
                "df.pivot_table": [
                    589
                ],
                "normalize": [
                    610,
                    613,
                    656,
                    659,
                    629,
                    600,
                    665,
                    602,
                    671
                ],
                "_normalize": [
                    656,
                    601
                ],
                "axis_subs": [
                    611,
                    613
                ],
                "normalizers": [
                    626,
                    620,
                    629
                ],
                "Callable": [
                    620
                ],
                "sum": [
                    621
                ],
                "x.sum": [
                    621,
                    622,
                    623
                ],
                "x.div": [
                    623
                ],
                "f": [
                    633,
                    629
                ],
                "table_index": [
                    669,
                    638,
                    679
                ],
                "table_columns": [
                    663,
                    680,
                    639
                ],
                "table.iloc": [
                    643,
                    644,
                    649,
                    650,
                    653
                ],
                "column_margin": [
                    672,
                    675,
                    649,
                    660,
                    661
                ],
                "index_margin": [
                    673,
                    674,
                    676,
                    650,
                    666,
                    667
                ],
                "column_margin.sum": [
                    672,
                    660
                ],
                "index_margin.sum": [
                    673,
                    666
                ],
                "index_margin.loc": [
                    674
                ],
                "names": [
                    705,
                    692,
                    693,
                    696,
                    698,
                    700,
                    702,
                    703
                ],
                "arr": [
                    696,
                    694,
                    695
                ],
                "enumerate": [
                    694
                ],
                "arrs": [
                    700,
                    694
                ],
                "arr.name": [
                    696,
                    695
                ],
                "names.append": [
                    696,
                    698
                ],
                "prefix": [
                    698
                ],
                "AssertionError": [
                    701
                ]
            },
            "filtered_variables_in_file": {
                "TYPE_CHECKING": [
                    19
                ],
                "index": [
                    160,
                    39,
                    558,
                    431,
                    432,
                    49,
                    177,
                    435,
                    436,
                    561,
                    438,
                    439,
                    565,
                    570,
                    444,
                    447,
                    63,
                    124,
                    126
                ],
                "_convert_by": [
                    40,
                    39
                ],
                "columns": [
                    448,
                    161,
                    40,
                    266,
                    431,
                    559,
                    177,
                    50,
                    562,
                    565,
                    439,
                    571,
                    63
                ],
                "aggfunc": [
                    388,
                    395,
                    406,
                    287,
                    288,
                    289,
                    162,
                    290,
                    291,
                    293,
                    295,
                    42,
                    300,
                    45,
                    573,
                    576,
                    323,
                    587,
                    206,
                    101,
                    232,
                    363,
                    244
                ],
                "pieces": [
                    58,
                    43,
                    61
                ],
                "List": [
                    43
                ],
                "DataFrame": [
                    43,
                    260,
                    581
                ],
                "keys": [
                    100,
                    44,
                    80,
                    93,
                    59,
                    61,
                    126,
                    63
                ],
                "func": [
                    59,
                    52,
                    45
                ],
                "table": [
                    643,
                    132,
                    644,
                    390,
                    135,
                    391,
                    137,
                    649,
                    139,
                    650,
                    141,
                    397,
                    143,
                    398,
                    145,
                    402,
                    147,
                    148,
                    403,
                    653,
                    151,
                    656,
                    661,
                    662,
                    663,
                    156,
                    157,
                    667,
                    668,
                    669,
                    675,
                    676,
                    678,
                    679,
                    680,
                    172,
                    173,
                    46,
                    175,
                    688,
                    178,
                    181,
                    182,
                    184,
                    58,
                    326,
                    202,
                    203,
                    589,
                    208,
                    210,
                    211,
                    601,
                    602,
                    220,
                    348,
                    605,
                    223,
                    227,
                    359,
                    360,
                    242,
                    244,
                    119,
                    120,
                    633,
                    634,
                    638,
                    639
                ],
                "pivot_table": [
                    46
                ],
                "data": [
                    388,
                    395,
                    406,
                    155,
                    285,
                    158,
                    300,
                    47,
                    433,
                    436,
                    438,
                    439,
                    569,
                    570,
                    443,
                    444,
                    571,
                    447,
                    323,
                    581,
                    76,
                    206,
                    84,
                    88,
                    89,
                    92,
                    100,
                    228,
                    363,
                    112,
                    113,
                    244,
                    117
                ],
                "values": [
                    283,
                    285,
                    159,
                    430,
                    175,
                    48,
                    441,
                    444,
                    573,
                    447,
                    576,
                    65,
                    67,
                    323,
                    69,
                    582,
                    72,
                    586,
                    75,
                    206,
                    80,
                    220,
                    92,
                    95,
                    225,
                    98,
                    229,
                    363,
                    110
                ],
                "fill_value": [
                    165,
                    51,
                    150,
                    151,
                    250
                ],
                "margins": [
                    617,
                    593,
                    53,
                    153,
                    602,
                    636
                ],
                "dropna": [
                    163,
                    102,
                    134,
                    595,
                    181,
                    54,
                    154
                ],
                "margins_name": [
                    384,
                    385,
                    643,
                    644,
                    647,
                    674,
                    164,
                    300,
                    55,
                    320,
                    198,
                    201,
                    203,
                    206,
                    594,
                    211,
                    216,
                    602,
                    218,
                    223,
                    235,
                    244
                ],
                "observed": [
                    323,
                    100,
                    388,
                    326,
                    233,
                    363,
                    395,
                    244,
                    406,
                    56,
                    348
                ],
                "pieces.append": [
                    58
                ],
                "keys.append": [
                    59
                ],
                "concat": [
                    354,
                    675,
                    61,
                    661
                ],
                "values_passed": [
                    170,
                    65,
                    66
                ],
                "is_list_like": [
                    441,
                    67
                ],
                "values_multi": [
                    171,
                    68,
                    71
                ],
                "i": [
                    129,
                    75,
                    76,
                    77,
                    694,
                    698,
                    126,
                    127
                ],
                "to_filter": [
                    88,
                    89,
                    85,
                    79
                ],
                "x": [
                    621,
                    622,
                    623,
                    80,
                    81,
                    82,
                    84,
                    85,
                    565
                ],
                "Grouper": [
                    81,
                    418
                ],
                "x.key": [
                    82
                ],
                "to_filter.append": [
                    85
                ],
                "data.columns": [
                    88,
                    92
                ],
                "key": [
                    320,
                    223,
                    260,
                    326,
                    327,
                    351,
                    332,
                    349,
                    341,
                    214,
                    216,
                    218,
                    348,
                    93,
                    95
                ],
                "values.drop": [
                    95
                ],
                "grouped": [
                    100,
                    101
                ],
                "data.groupby": [
                    395,
                    100
                ],
                "agged": [
                    132,
                    101,
                    102,
                    103,
                    114,
                    115,
                    117,
                    119,
                    124,
                    127
                ],
                "grouped.agg": [
                    101
                ],
                "ABCDataFrame": [
                    102,
                    242,
                    147,
                    565,
                    181
                ],
                "agged.columns": [
                    102
                ],
                "agged.dropna": [
                    103
                ],
                "v": [
                    288,
                    291,
                    293,
                    295,
                    110,
                    112,
                    113,
                    114,
                    115,
                    117,
                    285
                ],
                "is_integer_dtype": [
                    113,
                    115
                ],
                "maybe_downcast_to_dtype": [
                    268,
                    117
                ],
                "dtype": [
                    265,
                    266,
                    268,
                    117
                ],
                "table.index.nlevels": [
                    120,
                    135
                ],
                "table.index": [
                    135,
                    679,
                    137,
                    202,
                    203,
                    120,
                    669,
                    638
                ],
                "index_names": [
                    128,
                    124
                ],
                "agged.index.names": [
                    124,
                    127
                ],
                "agged.index": [
                    124,
                    127
                ],
                "to_unstack": [
                    129,
                    131,
                    132,
                    125
                ],
                "name": [
                    128,
                    131,
                    644,
                    643,
                    127
                ],
                "to_unstack.append": [
                    129,
                    131
                ],
                "agged.unstack": [
                    132
                ],
                "m": [
                    136,
                    145,
                    139,
                    142
                ],
                "MultiIndex.from_arrays": [
                    136,
                    142,
                    439
                ],
                "MultiIndex": [
                    136,
                    142,
                    439
                ],
                "cartesian_product": [
                    137,
                    143
                ],
                "table.index.levels": [
                    137
                ],
                "table.index.names": [
                    137,
                    202
                ],
                "table.reindex": [
                    145,
                    139
                ],
                "table.columns.nlevels": [
                    141,
                    173
                ],
                "table.columns": [
                    360,
                    680,
                    173,
                    141,
                    143,
                    210,
                    211,
                    403,
                    663,
                    639
                ],
                "table.columns.levels": [
                    143
                ],
                "table.columns.names": [
                    210,
                    143
                ],
                "table.sort_index": [
                    148
                ],
                "table._ensure_type": [
                    151
                ],
                "table.fillna": [
                    678,
                    662,
                    151,
                    634,
                    668
                ],
                "data.notna": [
                    155
                ],
                "_add_margins": [
                    156
                ],
                "table.empty": [
                    172
                ],
                "table.T": [
                    178
                ],
                "table.dropna": [
                    182
                ],
                "Substitution": [
                    25,
                    427
                ],
                "Appender": [
                    26,
                    428
                ],
                "_shared_docs": [
                    26,
                    428
                ],
                "Union": [
                    620,
                    188,
                    214
                ],
                "msg": [
                    201,
                    212,
                    204
                ],
                "level": [
                    210,
                    202,
                    203,
                    211
                ],
                "table.index.get_level_values": [
                    203
                ],
                "grand_margin": [
                    256,
                    288,
                    291,
                    293,
                    295,
                    234,
                    298,
                    206,
                    346,
                    284,
                    254,
                    223
                ],
                "_compute_grand_margin": [
                    206
                ],
                "table.ndim": [
                    208
                ],
                "table.columns.get_level_values": [
                    211
                ],
                "Tuple": [
                    214
                ],
                "rows": [
                    322,
                    323,
                    356,
                    387,
                    230,
                    388,
                    244,
                    215,
                    216
                ],
                "ABCSeries": [
                    418,
                    220,
                    565,
                    695
                ],
                "table.append": [
                    667,
                    676,
                    223
                ],
                "Series": [
                    408,
                    370,
                    351,
                    223
                ],
                "marginal_result_set": [
                    226,
                    237,
                    238,
                    239,
                    243,
                    246,
                    247,
                    248
                ],
                "_generate_marginal_results": [
                    226
                ],
                "cols": [
                    320,
                    385,
                    231,
                    266,
                    267,
                    362,
                    363,
                    378,
                    367,
                    431,
                    433,
                    244,
                    405,
                    406,
                    314,
                    383
                ],
                "result": [
                    262,
                    391,
                    265,
                    266,
                    270,
                    398,
                    400,
                    274,
                    275,
                    276,
                    402,
                    278,
                    408,
                    410,
                    354,
                    357,
                    359,
                    239,
                    370,
                    372,
                    248,
                    250
                ],
                "margin_keys": [
                    352,
                    344,
                    360,
                    392,
                    239,
                    399,
                    403,
                    372,
                    248,
                    380,
                    410,
                    252,
                    317
                ],
                "row_margin": [
                    256,
                    260,
                    408,
                    363,
                    364,
                    239,
                    368,
                    410,
                    370,
                    372,
                    406,
                    248,
                    250,
                    254
                ],
                "_generate_marginal_results_without_values": [
                    243
                ],
                "row_margin.reindex": [
                    250
                ],
                "result.columns": [
                    408,
                    250,
                    370
                ],
                "k": [
                    256,
                    288,
                    290,
                    291,
                    293,
                    295,
                    253,
                    252,
                    285,
                    254
                ],
                "margin_dummy": [
                    275,
                    267,
                    260,
                    270
                ],
                "T": [
                    260
                ],
                "row_names": [
                    276,
                    262
                ],
                "result.index.names": [
                    276,
                    262
                ],
                "result.index": [
                    274,
                    276,
                    262
                ],
                "result.dtypes": [
                    265
                ],
                "result.select_dtypes": [
                    266
                ],
                "apply": [
                    267,
                    388,
                    395,
                    406
                ],
                "result.append": [
                    275,
                    270
                ],
                "result.index._to_safe_for_reshape": [
                    274
                ],
                "items": [
                    285
                ],
                "data.index": [
                    436,
                    300
                ],
                "table_pieces": [
                    354,
                    343,
                    316,
                    350,
                    351
                ],
                "margin": [
                    323,
                    388,
                    390,
                    395,
                    332,
                    397,
                    341,
                    346,
                    351
                ],
                "agg": [
                    363,
                    323
                ],
                "groupby": [
                    363,
                    323,
                    388,
                    406
                ],
                "cat_axis": [
                    354,
                    324,
                    326,
                    337,
                    338,
                    347,
                    348
                ],
                "piece": [
                    326,
                    330,
                    332,
                    336,
                    337,
                    341,
                    343,
                    348,
                    350
                ],
                "table.groupby": [
                    348,
                    326
                ],
                "all_key": [
                    352,
                    389,
                    390,
                    327,
                    392,
                    332,
                    396,
                    397,
                    399,
                    341,
                    344,
                    349,
                    351
                ],
                "_all_key": [
                    396,
                    349,
                    389,
                    327
                ],
                "piece.copy": [
                    330
                ],
                "piece.set_axis": [
                    336
                ],
                "_to_safe_for_reshape": [
                    337
                ],
                "piece._get_axis": [
                    337
                ],
                "table_pieces.append": [
                    351,
                    350,
                    343
                ],
                "margin_keys.append": [
                    344,
                    352,
                    392,
                    399
                ],
                "row_margin.stack": [
                    364
                ],
                "new_order": [
                    368,
                    367
                ],
                "row_margin.index": [
                    368
                ],
                "row_margin.index.reorder_levels": [
                    368
                ],
                "np.nan": [
                    408,
                    370
                ],
                "np": [
                    408,
                    418,
                    370
                ],
                "by": [
                    417,
                    418,
                    419,
                    421,
                    423,
                    424,
                    414,
                    415
                ],
                "is_scalar": [
                    417
                ],
                "np.ndarray": [
                    418
                ],
                "Index": [
                    418
                ],
                "append": [
                    432,
                    433
                ],
                "indexed": [
                    448,
                    433,
                    443,
                    447
                ],
                "data.set_index": [
                    433
                ],
                "data._constructor": [
                    443
                ],
                "data._constructor_sliced": [
                    447
                ],
                "indexed.unstack": [
                    448
                ],
                "com.maybe_make_list": [
                    558,
                    559
                ],
                "com": [
                    558,
                    559
                ],
                "rownames": [
                    561,
                    570,
                    591
                ],
                "_get_names": [
                    561,
                    562
                ],
                "colnames": [
                    592,
                    562,
                    571
                ],
                "common_idx": [
                    564,
                    581,
                    567
                ],
                "pass_objs": [
                    565,
                    566,
                    567
                ],
                "get_objs_combined_axis": [
                    567
                ],
                "Dict": [
                    569,
                    620
                ],
                "data.update": [
                    570,
                    571
                ],
                "df": [
                    586,
                    589,
                    581,
                    583
                ],
                "kwargs": [
                    584,
                    587,
                    596
                ],
                "df.pivot_table": [
                    589
                ],
                "normalize": [
                    610,
                    613,
                    656,
                    659,
                    629,
                    600,
                    665,
                    602,
                    671
                ],
                "_normalize": [
                    656,
                    601
                ],
                "axis_subs": [
                    611,
                    613
                ],
                "normalizers": [
                    626,
                    620,
                    629
                ],
                "Callable": [
                    620
                ],
                "x.sum": [
                    621,
                    622,
                    623
                ],
                "x.div": [
                    623
                ],
                "f": [
                    633,
                    629
                ],
                "table_index": [
                    669,
                    638,
                    679
                ],
                "table_columns": [
                    663,
                    680,
                    639
                ],
                "table.iloc": [
                    643,
                    644,
                    649,
                    650,
                    653
                ],
                "column_margin": [
                    672,
                    675,
                    649,
                    660,
                    661
                ],
                "index_margin": [
                    673,
                    674,
                    676,
                    650,
                    666,
                    667
                ],
                "column_margin.sum": [
                    672,
                    660
                ],
                "index_margin.sum": [
                    673,
                    666
                ],
                "index_margin.loc": [
                    674
                ],
                "names": [
                    705,
                    692,
                    693,
                    696,
                    698,
                    700,
                    702,
                    703
                ],
                "arr": [
                    696,
                    694,
                    695
                ],
                "arrs": [
                    700,
                    694
                ],
                "arr.name": [
                    696,
                    695
                ],
                "names.append": [
                    696,
                    698
                ],
                "prefix": [
                    698
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/reshape/test_pivot.py",
                "test_function": "test_pivot_table_multiindex_only",
                "test_function_code": "    @pytest.mark.parametrize(\"cols\", [(1, 2), (\"a\", \"b\"), (1, \"b\"), (\"a\", 1)])\n    def test_pivot_table_multiindex_only(self, cols):\n        # GH 17038\n        df2 = DataFrame({cols[0]: [1, 2, 3], cols[1]: [1, 2, 3], \"v\": [4, 5, 6]})\n\n        result = df2.pivot_table(values=\"v\", columns=cols)\n        expected = DataFrame(\n            [[4, 5, 6]],\n            columns=MultiIndex.from_tuples([(1, 1), (2, 2), (3, 3)], names=cols),\n            index=Index([\"v\"]),\n        )\n\n        tm.assert_frame_equal(result, expected)",
                "test_error": "AttributeError: 'Series' object has no attribute 'columns'",
                "full_test_error": "self = <pandas.tests.reshape.test_pivot.TestPivotTable object at 0x1232ec040>\ncols = (1, 2)\n\n    @pytest.mark.parametrize(\"cols\", [(1, 2), (\"a\", \"b\"), (1, \"b\"), (\"a\", 1)])\n    def test_pivot_table_multiindex_only(self, cols):\n        # GH 17038\n        df2 = DataFrame({cols[0]: [1, 2, 3], cols[1]: [1, 2, 3], \"v\": [4, 5, 6]})\n    \n>       result = df2.pivot_table(values=\"v\", columns=cols)\n\npandas/tests/reshape/test_pivot.py:953: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/frame.py:6101: in pivot_table\n    return pivot_table(\npandas/core/reshape/pivot.py:173: in pivot_table\n    and (table.columns.nlevels > 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself =    1  2\nv  1  1    4\n   2  2    5\n   3  3    6\ndtype: int64\nname = 'columns'\n\n    def __getattr__(self, name: str):\n        \"\"\"After regular attribute access, try looking up the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n    \n        # Note: obj.x will always call obj.__getattribute__('x') prior to\n        # calling obj.__getattr__('x').\n    \n        if (\n            name in self._internal_names_set\n            or name in self._metadata\n            or name in self._accessors\n        ):\n>           return object.__getattribute__(self, name)\nE           AttributeError: 'Series' object has no attribute 'columns'\n\npandas/core/generic.py:5160: AttributeError",
                "traceback": "pandas/core/frame.py:6101: in pivot_table\n    return pivot_table(\npandas/core/reshape/pivot.py:173: in pivot_table\n    and (table.columns.nlevels > 1)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself =    1  2\nv  1  1    4\n   2  2    5\n   3  3    6\ndtype: int64\nname = 'columns'\n\n    def __getattr__(self, name: str):\n        \"\"\"After regular attribute access, try looking up the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n    \n        # Note: obj.x will always call obj.__getattribute__('x') prior to\n        # calling obj.__getattr__('x').\n    \n        if (\n            name in self._internal_names_set\n            or name in self._metadata\n            or name in self._accessors\n        ):\n>           return object.__getattribute__(self, name)\nE           AttributeError: 'Series' object has no attribute 'columns'\n\npandas/core/generic.py:5160: AttributeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('cols', [(1, 2), ('a', 'b'), (1, 'b'), ('a', 1)])"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/reshape/test_pivot.py",
                "test_function": "test_pivot_table_multiindex_only",
                "test_function_code": "    @pytest.mark.parametrize(\"cols\", [(1, 2), (\"a\", \"b\"), (1, \"b\"), (\"a\", 1)])\n    def test_pivot_table_multiindex_only(self, cols):\n        # GH 17038\n        df2 = DataFrame({cols[0]: [1, 2, 3], cols[1]: [1, 2, 3], \"v\": [4, 5, 6]})\n\n        result = df2.pivot_table(values=\"v\", columns=cols)\n        expected = DataFrame(\n            [[4, 5, 6]],\n            columns=MultiIndex.from_tuples([(1, 1), (2, 2), (3, 3)], names=cols),\n            index=Index([\"v\"]),\n        )\n\n        tm.assert_frame_equal(result, expected)",
                "test_error": "AttributeError: 'Series' object has no attribute 'columns'",
                "full_test_error": "self = <pandas.tests.reshape.test_pivot.TestPivotTable object at 0x12bbe7040>\ncols = ('a', 'b')\n\n    @pytest.mark.parametrize(\"cols\", [(1, 2), (\"a\", \"b\"), (1, \"b\"), (\"a\", 1)])\n    def test_pivot_table_multiindex_only(self, cols):\n        # GH 17038\n        df2 = DataFrame({cols[0]: [1, 2, 3], cols[1]: [1, 2, 3], \"v\": [4, 5, 6]})\n    \n>       result = df2.pivot_table(values=\"v\", columns=cols)\n\npandas/tests/reshape/test_pivot.py:953: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/frame.py:6101: in pivot_table\n    return pivot_table(\npandas/core/reshape/pivot.py:173: in pivot_table\n    and (table.columns.nlevels > 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself =    a  b\nv  1  1    4\n   2  2    5\n   3  3    6\ndtype: int64\nname = 'columns'\n\n    def __getattr__(self, name: str):\n        \"\"\"After regular attribute access, try looking up the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n    \n        # Note: obj.x will always call obj.__getattribute__('x') prior to\n        # calling obj.__getattr__('x').\n    \n        if (\n            name in self._internal_names_set\n            or name in self._metadata\n            or name in self._accessors\n        ):\n>           return object.__getattribute__(self, name)\nE           AttributeError: 'Series' object has no attribute 'columns'\n\npandas/core/generic.py:5160: AttributeError",
                "traceback": "pandas/core/frame.py:6101: in pivot_table\n    return pivot_table(\npandas/core/reshape/pivot.py:173: in pivot_table\n    and (table.columns.nlevels > 1)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself =    a  b\nv  1  1    4\n   2  2    5\n   3  3    6\ndtype: int64\nname = 'columns'\n\n    def __getattr__(self, name: str):\n        \"\"\"After regular attribute access, try looking up the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n    \n        # Note: obj.x will always call obj.__getattribute__('x') prior to\n        # calling obj.__getattr__('x').\n    \n        if (\n            name in self._internal_names_set\n            or name in self._metadata\n            or name in self._accessors\n        ):\n>           return object.__getattribute__(self, name)\nE           AttributeError: 'Series' object has no attribute 'columns'\n\npandas/core/generic.py:5160: AttributeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('cols', [(1, 2), ('a', 'b'), (1, 'b'), ('a', 1)])"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/reshape/test_pivot.py",
                "test_function": "test_pivot_table_multiindex_only",
                "test_function_code": "    @pytest.mark.parametrize(\"cols\", [(1, 2), (\"a\", \"b\"), (1, \"b\"), (\"a\", 1)])\n    def test_pivot_table_multiindex_only(self, cols):\n        # GH 17038\n        df2 = DataFrame({cols[0]: [1, 2, 3], cols[1]: [1, 2, 3], \"v\": [4, 5, 6]})\n\n        result = df2.pivot_table(values=\"v\", columns=cols)\n        expected = DataFrame(\n            [[4, 5, 6]],\n            columns=MultiIndex.from_tuples([(1, 1), (2, 2), (3, 3)], names=cols),\n            index=Index([\"v\"]),\n        )\n\n        tm.assert_frame_equal(result, expected)",
                "test_error": "AttributeError: 'Series' object has no attribute 'columns'",
                "full_test_error": "self = <pandas.tests.reshape.test_pivot.TestPivotTable object at 0x1232735b0>\ncols = (1, 'b')\n\n    @pytest.mark.parametrize(\"cols\", [(1, 2), (\"a\", \"b\"), (1, \"b\"), (\"a\", 1)])\n    def test_pivot_table_multiindex_only(self, cols):\n        # GH 17038\n        df2 = DataFrame({cols[0]: [1, 2, 3], cols[1]: [1, 2, 3], \"v\": [4, 5, 6]})\n    \n>       result = df2.pivot_table(values=\"v\", columns=cols)\n\npandas/tests/reshape/test_pivot.py:953: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/frame.py:6101: in pivot_table\n    return pivot_table(\npandas/core/reshape/pivot.py:173: in pivot_table\n    and (table.columns.nlevels > 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself =    1  b\nv  1  1    4\n   2  2    5\n   3  3    6\ndtype: int64\nname = 'columns'\n\n    def __getattr__(self, name: str):\n        \"\"\"After regular attribute access, try looking up the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n    \n        # Note: obj.x will always call obj.__getattribute__('x') prior to\n        # calling obj.__getattr__('x').\n    \n        if (\n            name in self._internal_names_set\n            or name in self._metadata\n            or name in self._accessors\n        ):\n>           return object.__getattribute__(self, name)\nE           AttributeError: 'Series' object has no attribute 'columns'\n\npandas/core/generic.py:5160: AttributeError",
                "traceback": "pandas/core/frame.py:6101: in pivot_table\n    return pivot_table(\npandas/core/reshape/pivot.py:173: in pivot_table\n    and (table.columns.nlevels > 1)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself =    1  b\nv  1  1    4\n   2  2    5\n   3  3    6\ndtype: int64\nname = 'columns'\n\n    def __getattr__(self, name: str):\n        \"\"\"After regular attribute access, try looking up the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n    \n        # Note: obj.x will always call obj.__getattribute__('x') prior to\n        # calling obj.__getattr__('x').\n    \n        if (\n            name in self._internal_names_set\n            or name in self._metadata\n            or name in self._accessors\n        ):\n>           return object.__getattribute__(self, name)\nE           AttributeError: 'Series' object has no attribute 'columns'\n\npandas/core/generic.py:5160: AttributeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('cols', [(1, 2), ('a', 'b'), (1, 'b'), ('a', 1)])"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/reshape/test_pivot.py",
                "test_function": "test_pivot_table_multiindex_only",
                "test_function_code": "    @pytest.mark.parametrize(\"cols\", [(1, 2), (\"a\", \"b\"), (1, \"b\"), (\"a\", 1)])\n    def test_pivot_table_multiindex_only(self, cols):\n        # GH 17038\n        df2 = DataFrame({cols[0]: [1, 2, 3], cols[1]: [1, 2, 3], \"v\": [4, 5, 6]})\n\n        result = df2.pivot_table(values=\"v\", columns=cols)\n        expected = DataFrame(\n            [[4, 5, 6]],\n            columns=MultiIndex.from_tuples([(1, 1), (2, 2), (3, 3)], names=cols),\n            index=Index([\"v\"]),\n        )\n\n        tm.assert_frame_equal(result, expected)",
                "test_error": "AttributeError: 'Series' object has no attribute 'columns'",
                "full_test_error": "self = <pandas.tests.reshape.test_pivot.TestPivotTable object at 0x12bafd130>\ncols = ('a', 1)\n\n    @pytest.mark.parametrize(\"cols\", [(1, 2), (\"a\", \"b\"), (1, \"b\"), (\"a\", 1)])\n    def test_pivot_table_multiindex_only(self, cols):\n        # GH 17038\n        df2 = DataFrame({cols[0]: [1, 2, 3], cols[1]: [1, 2, 3], \"v\": [4, 5, 6]})\n    \n>       result = df2.pivot_table(values=\"v\", columns=cols)\n\npandas/tests/reshape/test_pivot.py:953: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/frame.py:6101: in pivot_table\n    return pivot_table(\npandas/core/reshape/pivot.py:173: in pivot_table\n    and (table.columns.nlevels > 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself =    a  1\nv  1  1    4\n   2  2    5\n   3  3    6\ndtype: int64\nname = 'columns'\n\n    def __getattr__(self, name: str):\n        \"\"\"After regular attribute access, try looking up the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n    \n        # Note: obj.x will always call obj.__getattribute__('x') prior to\n        # calling obj.__getattr__('x').\n    \n        if (\n            name in self._internal_names_set\n            or name in self._metadata\n            or name in self._accessors\n        ):\n>           return object.__getattribute__(self, name)\nE           AttributeError: 'Series' object has no attribute 'columns'\n\npandas/core/generic.py:5160: AttributeError",
                "traceback": "pandas/core/frame.py:6101: in pivot_table\n    return pivot_table(\npandas/core/reshape/pivot.py:173: in pivot_table\n    and (table.columns.nlevels > 1)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself =    a  1\nv  1  1    4\n   2  2    5\n   3  3    6\ndtype: int64\nname = 'columns'\n\n    def __getattr__(self, name: str):\n        \"\"\"After regular attribute access, try looking up the name\n        This allows simpler access to columns for interactive use.\n        \"\"\"\n    \n        # Note: obj.x will always call obj.__getattribute__('x') prior to\n        # calling obj.__getattr__('x').\n    \n        if (\n            name in self._internal_names_set\n            or name in self._metadata\n            or name in self._accessors\n        ):\n>           return object.__getattribute__(self, name)\nE           AttributeError: 'Series' object has no attribute 'columns'\n\npandas/core/generic.py:5160: AttributeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('cols', [(1, 2), ('a', 'b'), (1, 'b'), ('a', 1)])"
                ]
            }
        ]
    }
}