<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="4" hostname="boyudeMacBook-Pro.local" name="pytest" skipped="0" tests="4" time="1.223" timestamp="2023-11-15T22:00:34.680292"><testcase classname="pandas.tests.reshape.test_pivot.TestPivotTable" name="test_pivot_table_multiindex_only[cols0]" time="0.043"><failure message="AttributeError: &apos;Series&apos; object has no attribute &apos;columns&apos;">self = &lt;pandas.tests.reshape.test_pivot.TestPivotTable object at 0x1200eb0d0&gt;
cols = (1, 2)

    @pytest.mark.parametrize(&quot;cols&quot;, [(1, 2), (&quot;a&quot;, &quot;b&quot;), (1, &quot;b&quot;), (&quot;a&quot;, 1)])
    def test_pivot_table_multiindex_only(self, cols):
        # GH 17038
        df2 = DataFrame({cols[0]: [1, 2, 3], cols[1]: [1, 2, 3], &quot;v&quot;: [4, 5, 6]})
    
&gt;       result = df2.pivot_table(values=&quot;v&quot;, columns=cols)

pandas/tests/reshape/test_pivot.py:953: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/frame.py:6101: in pivot_table
    return pivot_table(
pandas/core/reshape/pivot.py:173: in pivot_table
    and (table.columns.nlevels &gt; 1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self =    1  2
v  1  1    4
   2  2    5
   3  3    6
dtype: int64
name = &apos;columns&apos;

    def __getattr__(self, name: str):
        &quot;&quot;&quot;After regular attribute access, try looking up the name
        This allows simpler access to columns for interactive use.
        &quot;&quot;&quot;
    
        # Note: obj.x will always call obj.__getattribute__(&apos;x&apos;) prior to
        # calling obj.__getattr__(&apos;x&apos;).
    
        if (
            name in self._internal_names_set
            or name in self._metadata
            or name in self._accessors
        ):
&gt;           return object.__getattribute__(self, name)
E           AttributeError: &apos;Series&apos; object has no attribute &apos;columns&apos;

pandas/core/generic.py:5160: AttributeError</failure></testcase><testcase classname="pandas.tests.reshape.test_pivot.TestPivotTable" name="test_pivot_table_multiindex_only[cols1]" time="0.007"><failure message="AttributeError: &apos;Series&apos; object has no attribute &apos;columns&apos;">self = &lt;pandas.tests.reshape.test_pivot.TestPivotTable object at 0x128370eb0&gt;
cols = (&apos;a&apos;, &apos;b&apos;)

    @pytest.mark.parametrize(&quot;cols&quot;, [(1, 2), (&quot;a&quot;, &quot;b&quot;), (1, &quot;b&quot;), (&quot;a&quot;, 1)])
    def test_pivot_table_multiindex_only(self, cols):
        # GH 17038
        df2 = DataFrame({cols[0]: [1, 2, 3], cols[1]: [1, 2, 3], &quot;v&quot;: [4, 5, 6]})
    
&gt;       result = df2.pivot_table(values=&quot;v&quot;, columns=cols)

pandas/tests/reshape/test_pivot.py:953: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/frame.py:6101: in pivot_table
    return pivot_table(
pandas/core/reshape/pivot.py:173: in pivot_table
    and (table.columns.nlevels &gt; 1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self =    a  b
v  1  1    4
   2  2    5
   3  3    6
dtype: int64
name = &apos;columns&apos;

    def __getattr__(self, name: str):
        &quot;&quot;&quot;After regular attribute access, try looking up the name
        This allows simpler access to columns for interactive use.
        &quot;&quot;&quot;
    
        # Note: obj.x will always call obj.__getattribute__(&apos;x&apos;) prior to
        # calling obj.__getattr__(&apos;x&apos;).
    
        if (
            name in self._internal_names_set
            or name in self._metadata
            or name in self._accessors
        ):
&gt;           return object.__getattribute__(self, name)
E           AttributeError: &apos;Series&apos; object has no attribute &apos;columns&apos;

pandas/core/generic.py:5160: AttributeError</failure></testcase><testcase classname="pandas.tests.reshape.test_pivot.TestPivotTable" name="test_pivot_table_multiindex_only[cols2]" time="0.007"><failure message="AttributeError: &apos;Series&apos; object has no attribute &apos;columns&apos;">self = &lt;pandas.tests.reshape.test_pivot.TestPivotTable object at 0x1202832b0&gt;
cols = (1, &apos;b&apos;)

    @pytest.mark.parametrize(&quot;cols&quot;, [(1, 2), (&quot;a&quot;, &quot;b&quot;), (1, &quot;b&quot;), (&quot;a&quot;, 1)])
    def test_pivot_table_multiindex_only(self, cols):
        # GH 17038
        df2 = DataFrame({cols[0]: [1, 2, 3], cols[1]: [1, 2, 3], &quot;v&quot;: [4, 5, 6]})
    
&gt;       result = df2.pivot_table(values=&quot;v&quot;, columns=cols)

pandas/tests/reshape/test_pivot.py:953: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/frame.py:6101: in pivot_table
    return pivot_table(
pandas/core/reshape/pivot.py:173: in pivot_table
    and (table.columns.nlevels &gt; 1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self =    1  b
v  1  1    4
   2  2    5
   3  3    6
dtype: int64
name = &apos;columns&apos;

    def __getattr__(self, name: str):
        &quot;&quot;&quot;After regular attribute access, try looking up the name
        This allows simpler access to columns for interactive use.
        &quot;&quot;&quot;
    
        # Note: obj.x will always call obj.__getattribute__(&apos;x&apos;) prior to
        # calling obj.__getattr__(&apos;x&apos;).
    
        if (
            name in self._internal_names_set
            or name in self._metadata
            or name in self._accessors
        ):
&gt;           return object.__getattribute__(self, name)
E           AttributeError: &apos;Series&apos; object has no attribute &apos;columns&apos;

pandas/core/generic.py:5160: AttributeError</failure></testcase><testcase classname="pandas.tests.reshape.test_pivot.TestPivotTable" name="test_pivot_table_multiindex_only[cols3]" time="0.007"><failure message="AttributeError: &apos;Series&apos; object has no attribute &apos;columns&apos;">self = &lt;pandas.tests.reshape.test_pivot.TestPivotTable object at 0x1201f2d90&gt;
cols = (&apos;a&apos;, 1)

    @pytest.mark.parametrize(&quot;cols&quot;, [(1, 2), (&quot;a&quot;, &quot;b&quot;), (1, &quot;b&quot;), (&quot;a&quot;, 1)])
    def test_pivot_table_multiindex_only(self, cols):
        # GH 17038
        df2 = DataFrame({cols[0]: [1, 2, 3], cols[1]: [1, 2, 3], &quot;v&quot;: [4, 5, 6]})
    
&gt;       result = df2.pivot_table(values=&quot;v&quot;, columns=cols)

pandas/tests/reshape/test_pivot.py:953: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/frame.py:6101: in pivot_table
    return pivot_table(
pandas/core/reshape/pivot.py:173: in pivot_table
    and (table.columns.nlevels &gt; 1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self =    a  1
v  1  1    4
   2  2    5
   3  3    6
dtype: int64
name = &apos;columns&apos;

    def __getattr__(self, name: str):
        &quot;&quot;&quot;After regular attribute access, try looking up the name
        This allows simpler access to columns for interactive use.
        &quot;&quot;&quot;
    
        # Note: obj.x will always call obj.__getattribute__(&apos;x&apos;) prior to
        # calling obj.__getattr__(&apos;x&apos;).
    
        if (
            name in self._internal_names_set
            or name in self._metadata
            or name in self._accessors
        ):
&gt;           return object.__getattribute__(self, name)
E           AttributeError: &apos;Series&apos; object has no attribute &apos;columns&apos;

pandas/core/generic.py:5160: AttributeError</failure></testcase></testsuite></testsuites>