{
    "pandas": [
        {
            "bugID": 88,
            "bitvector": {
                "1.3.1": 1,
                "1.3.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.1.2": 0,
                "2.2.3": 1,
                "2.2.4": 1,
                "2.2.5": 1,
                "2.2.6": 1,
                "2.1.1": 1,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "start_line": 25,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(data, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, dropna=True, margins_name='All', observed=False) -> 'DataFrame':\n\n    index = _convert_by(index)\n    columns = _convert_by(columns)\n    \n    if isinstance(aggfunc, list):\n        table = data.pivot_table(values=values, index=index, columns=columns, fill_value=fill_value, margins=margins, dropna=dropna, margins_name=margins_name, observed=observed)\n        for func in aggfunc:\n            agged = table.groupby(keys).agg(func)\n            table = pd.concat([table, agged], axis=1)\n    \n    else:\n        table = data.pivot_table(values=values, index=index, columns=columns, aggfunc=aggfunc, fill_value=fill_value, margins=margins, dropna=dropna, margins_name=margins_name, observed=observed)\n    \n    if table.index.nlevels > 1:\n        # Related GH #17123\n        # If index_names are integers, determine whether the integers refer\n        # to the level position or name.\n        index_names = agged.index.names[: len(index)]\n        to_unstack = []\n        for i in range(len(index), len(keys)):\n            name = agged.index.names[i]\n            if name is None or name in index_names:\n                to_unstack.append(i)\n            else:\n                to_unstack.append(name)\n        table = agged.unstack(to_unstack)\n    \n    if not dropna:\n        if table.index.nlevels > 1:\n            m = MultiIndex.from_arrays(cartesian_product(table.index.levels), names=table.index.names)\n            table = table.reindex(m, axis=0)\n    \n        if table.columns.nlevels > 1:\n            m = MultiIndex.from_arrays(cartesian_product(table.columns.levels), names=table.columns.names)\n            table = table.reindex(m, axis=1)\n    \n    if isinstance(table, ABCDataFrame):\n        table = table.sort_index(axis=1)\n    \n    if fill_value is not None:\n        table = table.fillna(fill_value, downcast=\"infer\")\n    \n    if margins:\n        if dropna:\n            data = data[data.notna().all(axis=1)]\n        table = _add_margins(\n            table,\n            data,\n            values,\n            rows=index,\n            cols=columns,\n            aggfunc=aggfunc,\n            observed=dropna,\n            margins_name=margins_name,\n            fill_value=fill_value,\n        )\n    \n    # discard the top level\n    if (values is not None) and (not values_multi) and (table.columns.nlevels > 1):\n        table = table[values[0]]\n    \n    if len(index) == 0 and len(columns) > 0:\n        table = table.T\n    \n    if isinstance(table, ABCDataFrame) and dropna:\n        table = table.dropna(how=\"all\", axis=1)\n    \n    return table"
        }
    ]
}