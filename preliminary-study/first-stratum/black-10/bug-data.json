{
    "black:10": {
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/black/blib2to3/pgen2/driver.py": {
            "buggy_functions": [
                {
                    "function_name": "_partially_consume_prefix",
                    "function_code": "    def _partially_consume_prefix(self, prefix, column):\n        lines = []\n        current_line = \"\"\n        current_column = 0\n        wait_for_nl = False\n        for char in prefix:\n            current_line += char\n            if wait_for_nl:\n                if char == '\\n':\n                    if current_line.strip() and current_column < column:\n                        res = ''.join(lines)\n                        return res, prefix[len(res):]\n\n                    lines.append(current_line)\n                    current_line = \"\"\n                    current_column = 0\n                    wait_for_nl = False\n            elif char == ' ':\n                current_column += 1\n            elif char == '\\t':\n                current_column += 4\n            elif char == '\\n':\n                # unexpected empty line\n                current_column = 0\n            else:\n                # indent is finished\n                wait_for_nl = True\n        return ''.join(lines), current_line\n",
                    "decorators": [],
                    "start_line": 117,
                    "variables": {
                        "lines": [
                            144,
                            130,
                            118,
                            127
                        ],
                        "current_line": [
                            130,
                            131,
                            144,
                            119,
                            123,
                            126
                        ],
                        "current_column": [
                            132,
                            135,
                            137,
                            140,
                            120,
                            126
                        ],
                        "wait_for_nl": [
                            121,
                            124,
                            133,
                            143
                        ],
                        "char": [
                            134,
                            136,
                            138,
                            122,
                            123,
                            125
                        ],
                        "prefix": [
                            128,
                            122
                        ],
                        "current_line.strip": [
                            126
                        ],
                        "column": [
                            126
                        ],
                        "res": [
                            128,
                            127
                        ],
                        "join": [
                            144,
                            127
                        ],
                        "len": [
                            128
                        ],
                        "lines.append": [
                            130
                        ]
                    },
                    "filtered_variables": {
                        "lines": [
                            144,
                            130,
                            118,
                            127
                        ],
                        "current_line": [
                            130,
                            131,
                            144,
                            119,
                            123,
                            126
                        ],
                        "current_column": [
                            132,
                            135,
                            137,
                            140,
                            120,
                            126
                        ],
                        "wait_for_nl": [
                            121,
                            124,
                            133,
                            143
                        ],
                        "char": [
                            134,
                            136,
                            138,
                            122,
                            123,
                            125
                        ],
                        "prefix": [
                            128,
                            122
                        ],
                        "current_line.strip": [
                            126
                        ],
                        "column": [
                            126
                        ],
                        "res": [
                            128,
                            127
                        ],
                        "join": [
                            144,
                            127
                        ],
                        "len": [
                            128
                        ],
                        "lines.append": [
                            130
                        ]
                    },
                    "diff_line_number": 134,
                    "class_data": {
                        "signature": "class Driver(object)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "__init__(self, grammar, convert=None, logger=None)",
                            "parse_tokens(self, tokens, debug=False)",
                            "parse_stream_raw(self, stream, debug=False)",
                            "parse_stream(self, stream, debug=False)",
                            "parse_file(self, filename, encoding=None, debug=False)",
                            "parse_string(self, text, debug=False)",
                            "_partially_consume_prefix(self, prefix, column)"
                        ],
                        "constructor_variables": [
                            "convert",
                            "logger",
                            "grammar"
                        ],
                        "class_level_variables": [],
                        "class_decorators": []
                    }
                }
            ],
            "inscope_functions": [
                "_generate_pickle_name(gt, cache_dir=None)",
                "load_grammar(gt='Grammar.txt', gp=None, save=True, force=False, logger=None)",
                "_newer(a, b)",
                "load_packaged_grammar(package, grammar_source, cache_dir=None)",
                "main(*args)",
                "__init__(self, grammar, convert=None, logger=None)",
                "parse_tokens(self, tokens, debug=False)",
                "parse_stream_raw(self, stream, debug=False)",
                "parse_stream(self, stream, debug=False)",
                "parse_file(self, filename, encoding=None, debug=False)",
                "parse_string(self, text, debug=False)",
                "_partially_consume_prefix(self, prefix, column)"
            ],
            "variables_in_file": {
                "__author__": [
                    14
                ],
                "__all__": [
                    16
                ],
                "object": [
                    30
                ],
                "self.grammar": [
                    33,
                    42
                ],
                "self": [
                    33,
                    36,
                    37,
                    101,
                    71,
                    105,
                    42,
                    110,
                    80,
                    83,
                    115
                ],
                "grammar": [
                    33,
                    204,
                    69,
                    174
                ],
                "logger": [
                    161,
                    162,
                    34,
                    35,
                    36,
                    165,
                    168,
                    172
                ],
                "logging.getLogger": [
                    162,
                    35
                ],
                "logging": [
                    216,
                    162,
                    35
                ],
                "self.logger": [
                    83,
                    36,
                    71
                ],
                "self.convert": [
                    42,
                    37
                ],
                "convert": [
                    37
                ],
                "p": [
                    96,
                    81,
                    42,
                    43
                ],
                "parse.Parser": [
                    42
                ],
                "parse": [
                    42,
                    94
                ],
                "p.setup": [
                    43
                ],
                "lineno": [
                    65,
                    44,
                    51,
                    52,
                    54,
                    55,
                    56,
                    90,
                    88,
                    63
                ],
                "column": [
                    66,
                    91,
                    45,
                    51,
                    52,
                    88,
                    57,
                    58,
                    59,
                    60,
                    126,
                    63
                ],
                "indent_columns": [
                    74,
                    46,
                    79
                ],
                "type": [
                    68,
                    69,
                    72,
                    73,
                    78,
                    47,
                    81,
                    50,
                    86,
                    61,
                    95
                ],
                "value": [
                    64,
                    69,
                    72,
                    74,
                    75,
                    77,
                    47,
                    81,
                    50,
                    89,
                    62,
                    95
                ],
                "start": [
                    47,
                    81,
                    50,
                    51,
                    52,
                    53,
                    95
                ],
                "end": [
                    88,
                    50,
                    63,
                    47
                ],
                "line_text": [
                    50,
                    59,
                    47
                ],
                "prefix": [
                    128,
                    72,
                    75,
                    76,
                    48,
                    80,
                    81,
                    85,
                    87,
                    55,
                    122,
                    59,
                    62,
                    95
                ],
                "quintuple": [
                    49,
                    50
                ],
                "tokens": [
                    100,
                    101,
                    49,
                    114,
                    115
                ],
                "s_lineno": [
                    56,
                    53,
                    54,
                    55
                ],
                "s_column": [
                    58,
                    59,
                    60,
                    53
                ],
                "tokenize.COMMENT": [
                    61
                ],
                "tokenize": [
                    114,
                    100,
                    61
                ],
                "tokenize.NL": [
                    61
                ],
                "value.endswith": [
                    64,
                    89
                ],
                "token.OP": [
                    68
                ],
                "token": [
                    68,
                    72,
                    73,
                    78,
                    86
                ],
                "grammar.opmap": [
                    69
                ],
                "debug": [
                    101,
                    70,
                    105,
                    110,
                    82,
                    115
                ],
                "self.logger.debug": [
                    83,
                    71
                ],
                "token.tok_name": [
                    72
                ],
                "token.INDENT": [
                    73,
                    86
                ],
                "indent_columns.append": [
                    74
                ],
                "len": [
                    128,
                    74
                ],
                "_prefix": [
                    80,
                    75,
                    87
                ],
                "token.DEDENT": [
                    86,
                    78
                ],
                "_indent_col": [
                    80,
                    79
                ],
                "indent_columns.pop": [
                    79
                ],
                "self._partially_consume_prefix": [
                    80
                ],
                "p.addtoken": [
                    81
                ],
                "parse.ParseError": [
                    94
                ],
                "p.rootnode": [
                    96
                ],
                "tokenize.generate_tokens": [
                    114,
                    100
                ],
                "stream.readline": [
                    100
                ],
                "stream": [
                    105,
                    100,
                    109,
                    110
                ],
                "self.parse_tokens": [
                    115,
                    101
                ],
                "self.parse_stream_raw": [
                    105
                ],
                "io.open": [
                    109
                ],
                "io": [
                    114,
                    109
                ],
                "filename": [
                    109
                ],
                "encoding": [
                    109
                ],
                "self.parse_stream": [
                    110
                ],
                "readline": [
                    114
                ],
                "io.StringIO": [
                    114
                ],
                "text": [
                    114
                ],
                "lines": [
                    144,
                    130,
                    118,
                    127
                ],
                "current_line": [
                    130,
                    131,
                    144,
                    119,
                    123,
                    126
                ],
                "current_column": [
                    132,
                    135,
                    137,
                    140,
                    120,
                    126
                ],
                "wait_for_nl": [
                    121,
                    124,
                    133,
                    143
                ],
                "char": [
                    134,
                    136,
                    138,
                    122,
                    123,
                    125
                ],
                "current_line.strip": [
                    126
                ],
                "res": [
                    128,
                    127
                ],
                "join": [
                    144,
                    151,
                    127
                ],
                "lines.append": [
                    130
                ],
                "head": [
                    148,
                    151
                ],
                "tail": [
                    148,
                    149,
                    150,
                    151
                ],
                "os.path.splitext": [
                    148
                ],
                "os.path": [
                    185,
                    199,
                    202,
                    148,
                    181,
                    183,
                    153
                ],
                "os": [
                    185,
                    199,
                    202,
                    148,
                    181,
                    183,
                    153
                ],
                "gt": [
                    163,
                    164,
                    165,
                    166,
                    148,
                    218,
                    219
                ],
                "name": [
                    153,
                    155,
                    151
                ],
                "map": [
                    151
                ],
                "str": [
                    151
                ],
                "sys.version_info": [
                    151
                ],
                "sys": [
                    216,
                    215,
                    223,
                    151
                ],
                "cache_dir": [
                    152,
                    153,
                    202,
                    200
                ],
                "os.path.join": [
                    153
                ],
                "os.path.basename": [
                    153,
                    202
                ],
                "gp": [
                    163,
                    164,
                    168,
                    200,
                    170,
                    201,
                    175
                ],
                "_generate_pickle_name": [
                    200,
                    202,
                    163
                ],
                "force": [
                    164
                ],
                "_newer": [
                    164
                ],
                "logger.info": [
                    168,
                    172,
                    165
                ],
                "g": [
                    166,
                    170,
                    204,
                    205,
                    174,
                    175,
                    176,
                    206
                ],
                "pgen.generate_grammar": [
                    166
                ],
                "pgen": [
                    166
                ],
                "save": [
                    167
                ],
                "g.dump": [
                    170
                ],
                "OSError": [
                    171
                ],
                "e": [
                    172
                ],
                "grammar.Grammar": [
                    204,
                    174
                ],
                "g.load": [
                    175
                ],
                "os.path.exists": [
                    181,
                    183
                ],
                "a": [
                    185,
                    181
                ],
                "b": [
                    185,
                    183
                ],
                "os.path.getmtime": [
                    185
                ],
                "os.path.isfile": [
                    199
                ],
                "grammar_source": [
                    200,
                    201,
                    202,
                    199
                ],
                "load_grammar": [
                    201,
                    219
                ],
                "pickled_name": [
                    202,
                    203
                ],
                "data": [
                    203,
                    205
                ],
                "pkgutil.get_data": [
                    203
                ],
                "pkgutil": [
                    203
                ],
                "package": [
                    203
                ],
                "g.loads": [
                    205
                ],
                "args": [
                    218,
                    214,
                    215
                ],
                "sys.argv": [
                    215
                ],
                "logging.basicConfig": [
                    216
                ],
                "logging.INFO": [
                    216
                ],
                "sys.stdout": [
                    216
                ],
                "__name__": [
                    222
                ],
                "sys.exit": [
                    223
                ],
                "int": [
                    223
                ],
                "main": [
                    223
                ]
            },
            "filtered_variables_in_file": {
                "__author__": [
                    14
                ],
                "__all__": [
                    16
                ],
                "object": [
                    30
                ],
                "self.grammar": [
                    33,
                    42
                ],
                "self": [
                    33,
                    36,
                    37,
                    101,
                    71,
                    105,
                    42,
                    110,
                    80,
                    83,
                    115
                ],
                "grammar": [
                    33,
                    204,
                    69,
                    174
                ],
                "logger": [
                    161,
                    162,
                    34,
                    35,
                    36,
                    165,
                    168,
                    172
                ],
                "logging.getLogger": [
                    162,
                    35
                ],
                "logging": [
                    216,
                    162,
                    35
                ],
                "self.logger": [
                    83,
                    36,
                    71
                ],
                "self.convert": [
                    42,
                    37
                ],
                "convert": [
                    37
                ],
                "p": [
                    96,
                    81,
                    42,
                    43
                ],
                "parse.Parser": [
                    42
                ],
                "parse": [
                    42,
                    94
                ],
                "p.setup": [
                    43
                ],
                "lineno": [
                    65,
                    44,
                    51,
                    52,
                    54,
                    55,
                    56,
                    90,
                    88,
                    63
                ],
                "column": [
                    66,
                    91,
                    45,
                    51,
                    52,
                    88,
                    57,
                    58,
                    59,
                    60,
                    126,
                    63
                ],
                "indent_columns": [
                    74,
                    46,
                    79
                ],
                "type": [
                    68,
                    69,
                    72,
                    73,
                    78,
                    47,
                    81,
                    50,
                    86,
                    61,
                    95
                ],
                "value": [
                    64,
                    69,
                    72,
                    74,
                    75,
                    77,
                    47,
                    81,
                    50,
                    89,
                    62,
                    95
                ],
                "start": [
                    47,
                    81,
                    50,
                    51,
                    52,
                    53,
                    95
                ],
                "end": [
                    88,
                    50,
                    63,
                    47
                ],
                "line_text": [
                    50,
                    59,
                    47
                ],
                "prefix": [
                    128,
                    72,
                    75,
                    76,
                    48,
                    80,
                    81,
                    85,
                    87,
                    55,
                    122,
                    59,
                    62,
                    95
                ],
                "quintuple": [
                    49,
                    50
                ],
                "tokens": [
                    100,
                    101,
                    49,
                    114,
                    115
                ],
                "s_lineno": [
                    56,
                    53,
                    54,
                    55
                ],
                "s_column": [
                    58,
                    59,
                    60,
                    53
                ],
                "tokenize.COMMENT": [
                    61
                ],
                "tokenize": [
                    114,
                    100,
                    61
                ],
                "tokenize.NL": [
                    61
                ],
                "value.endswith": [
                    64,
                    89
                ],
                "token.OP": [
                    68
                ],
                "token": [
                    68,
                    72,
                    73,
                    78,
                    86
                ],
                "grammar.opmap": [
                    69
                ],
                "debug": [
                    101,
                    70,
                    105,
                    110,
                    82,
                    115
                ],
                "self.logger.debug": [
                    83,
                    71
                ],
                "token.tok_name": [
                    72
                ],
                "token.INDENT": [
                    73,
                    86
                ],
                "indent_columns.append": [
                    74
                ],
                "len": [
                    128,
                    74
                ],
                "_prefix": [
                    80,
                    75,
                    87
                ],
                "token.DEDENT": [
                    86,
                    78
                ],
                "_indent_col": [
                    80,
                    79
                ],
                "indent_columns.pop": [
                    79
                ],
                "self._partially_consume_prefix": [
                    80
                ],
                "p.addtoken": [
                    81
                ],
                "parse.ParseError": [
                    94
                ],
                "p.rootnode": [
                    96
                ],
                "tokenize.generate_tokens": [
                    114,
                    100
                ],
                "stream.readline": [
                    100
                ],
                "stream": [
                    105,
                    100,
                    109,
                    110
                ],
                "self.parse_tokens": [
                    115,
                    101
                ],
                "self.parse_stream_raw": [
                    105
                ],
                "io.open": [
                    109
                ],
                "io": [
                    114,
                    109
                ],
                "filename": [
                    109
                ],
                "encoding": [
                    109
                ],
                "self.parse_stream": [
                    110
                ],
                "readline": [
                    114
                ],
                "io.StringIO": [
                    114
                ],
                "text": [
                    114
                ],
                "lines": [
                    144,
                    130,
                    118,
                    127
                ],
                "current_line": [
                    130,
                    131,
                    144,
                    119,
                    123,
                    126
                ],
                "current_column": [
                    132,
                    135,
                    137,
                    140,
                    120,
                    126
                ],
                "wait_for_nl": [
                    121,
                    124,
                    133,
                    143
                ],
                "char": [
                    134,
                    136,
                    138,
                    122,
                    123,
                    125
                ],
                "current_line.strip": [
                    126
                ],
                "res": [
                    128,
                    127
                ],
                "join": [
                    144,
                    151,
                    127
                ],
                "lines.append": [
                    130
                ],
                "head": [
                    148,
                    151
                ],
                "tail": [
                    148,
                    149,
                    150,
                    151
                ],
                "os.path.splitext": [
                    148
                ],
                "os.path": [
                    185,
                    199,
                    202,
                    148,
                    181,
                    183,
                    153
                ],
                "os": [
                    185,
                    199,
                    202,
                    148,
                    181,
                    183,
                    153
                ],
                "gt": [
                    163,
                    164,
                    165,
                    166,
                    148,
                    218,
                    219
                ],
                "name": [
                    153,
                    155,
                    151
                ],
                "map": [
                    151
                ],
                "str": [
                    151
                ],
                "sys.version_info": [
                    151
                ],
                "sys": [
                    216,
                    215,
                    223,
                    151
                ],
                "cache_dir": [
                    152,
                    153,
                    202,
                    200
                ],
                "os.path.join": [
                    153
                ],
                "os.path.basename": [
                    153,
                    202
                ],
                "gp": [
                    163,
                    164,
                    168,
                    200,
                    170,
                    201,
                    175
                ],
                "_generate_pickle_name": [
                    200,
                    202,
                    163
                ],
                "force": [
                    164
                ],
                "_newer": [
                    164
                ],
                "logger.info": [
                    168,
                    172,
                    165
                ],
                "g": [
                    166,
                    170,
                    204,
                    205,
                    174,
                    175,
                    176,
                    206
                ],
                "pgen.generate_grammar": [
                    166
                ],
                "pgen": [
                    166
                ],
                "save": [
                    167
                ],
                "g.dump": [
                    170
                ],
                "OSError": [
                    171
                ],
                "e": [
                    172
                ],
                "grammar.Grammar": [
                    204,
                    174
                ],
                "g.load": [
                    175
                ],
                "os.path.exists": [
                    181,
                    183
                ],
                "a": [
                    185,
                    181
                ],
                "b": [
                    185,
                    183
                ],
                "os.path.getmtime": [
                    185
                ],
                "os.path.isfile": [
                    199
                ],
                "grammar_source": [
                    200,
                    201,
                    202,
                    199
                ],
                "load_grammar": [
                    201,
                    219
                ],
                "pickled_name": [
                    202,
                    203
                ],
                "data": [
                    203,
                    205
                ],
                "pkgutil.get_data": [
                    203
                ],
                "pkgutil": [
                    203
                ],
                "package": [
                    203
                ],
                "g.loads": [
                    205
                ],
                "args": [
                    218,
                    214,
                    215
                ],
                "sys.argv": [
                    215
                ],
                "logging.basicConfig": [
                    216
                ],
                "logging.INFO": [
                    216
                ],
                "sys.stdout": [
                    216
                ],
                "__name__": [
                    222
                ],
                "sys.exit": [
                    223
                ],
                "int": [
                    223
                ],
                "main": [
                    223
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/black/tests/test_black.py",
                "test_function": "test_comment_indentation",
                "test_function_code": "    def test_comment_indentation(self) -> None:\n        contents_tab = \"if 1:\\n\\tif 2:\\n\\t\\tpass\\n\\t# comment\\n\\tpass\\n\"\n        contents_spc = \"if 1:\\n    if 2:\\n        pass\\n    # comment\\n    pass\\n\"\n\n        self.assertFormatEqual(fs(contents_spc), contents_spc)\n        self.assertFormatEqual(fs(contents_tab), contents_spc)\n\n        contents_tab = \"if 1:\\n\\tif 2:\\n\\t\\tpass\\n\\t\\t# comment\\n\\tpass\\n\"\n        contents_spc = \"if 1:\\n    if 2:\\n        pass\\n        # comment\\n    pass\\n\"\n\n        self.assertFormatEqual(fs(contents_tab), contents_spc)\n        self.assertFormatEqual(fs(contents_spc), contents_spc)",
                "test_error": "AssertionError: 'if 1:\\n    if 2:\\n        pass\\n        # comment\\n    pass\\n' != 'if 1:\\n    if 2:\\n        pass\\n    # comment\\n    pass\\n'\n  if 1:\n      if 2:\n          pass\n-         # comment\n? ----\n+     # comment\n      pass",
                "full_test_error": "self = <test_black.BlackTestCase testMethod=test_comment_indentation>\n\n    def test_comment_indentation(self) -> None:\n        contents_tab = \"if 1:\\n\\tif 2:\\n\\t\\tpass\\n\\t# comment\\n\\tpass\\n\"\n        contents_spc = \"if 1:\\n    if 2:\\n        pass\\n    # comment\\n    pass\\n\"\n    \n        self.assertFormatEqual(fs(contents_spc), contents_spc)\n>       self.assertFormatEqual(fs(contents_tab), contents_spc)\n\ntests/test_black.py:517: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_black.py:156: in assertFormatEqual\n    self.assertEqual(expected, actual)\nE   AssertionError: 'if 1:\\n    if 2:\\n        pass\\n        # comment\\n    pass\\n' != 'if 1:\\n    if 2:\\n        pass\\n    # comment\\n    pass\\n'\nE     if 1:\nE         if 2:\nE             pass\nE   -         # comment\nE   ? ----\nE   +     # comment\nE         pass",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}