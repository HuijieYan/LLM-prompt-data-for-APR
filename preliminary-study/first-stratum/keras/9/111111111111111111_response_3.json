{
    "keras": [
        {
            "bugID": 9,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 117,
            "file_name": "docs/autogen.py",
            "replace_code": "def process_list_block(docstring, starting_point, section_end,\n                       leading_spaces, marker):\n    ending_point = docstring.find('\\n\\n', starting_point)\n    block = docstring[starting_point:(None if ending_point == -1 else ending_point)]\n    # Place marker for later reinjection.\n    replacement = docstring[starting_point:ending_point]\n    docstring = docstring[:starting_point] + replacement.replace(block, marker) + docstring[section_end:]\n    lines = block.split('\\n')\n    # Remove the computed number of leading white spaces from each line.\n    lines = [re.sub('^' + ' ' * leading_spaces, '', line) for line in lines]\n    # Usually lines have at least 4 additional leading spaces.\n    # These have to be removed, but first the list roots have to be detected.\n    top_level_regex = r'^    ([^\\s\\\\\\(]+):(.*)'\n    top_level_replacement = r'- __\\1__:\\2'\n    updated_lines = []\n    for line in lines:\n        if re.match(top_level_regex, line):\n            updated_lines.append(re.sub(top_level_regex, top_level_replacement, line))\n        else:\n            updated_lines.append(re.sub(r'^ {4}', '', line))\n    # Fix text lines after lists\n    indent = 0\n    block = ''\n    text_block = False\n    for line in updated_lines:\n        spaces = re.search(r'\\S', line)\n        if spaces:\n            if line[spaces.start()] == '-':\n                indent = spaces.start() + 1\n                if text_block:\n                    text_block = False\n                    block += '\\n'\n            elif spaces.start() < indent:\n                text_block = True\n                indent = spaces.start()\n                block += '\\n'\n            block += line\n        else:\n            text_block = False\n            indent = 0\n            block += line\n    return docstring, block",
            "imports": [
                "import re"
            ]
        }
    ]
}