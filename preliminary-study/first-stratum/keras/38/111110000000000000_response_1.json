{
    "keras": [
        {
            "bugID": 38,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 101,
            "file_name": "keras/layers/recurrent.py",
            "replace_code": "def build(self, input_shape):\n\n    if not self.cells:\n        raise ValueError(\"StackedRNNCells must have at least one cell\")\n    \n    for cell in self.cells:\n        if not isinstance(cell, Layer):\n            raise TypeError(\"Cell is not an instance of Layer\")\n    \n        cell.build(input_shape)\n        \n        if hasattr(cell, \"state_size\"):\n            state_size = cell.state_size\n            if hasattr(state_size, '__len__'):\n                output_dim = state_size[0]\n            else:\n                output_dim = state_size\n            input_shape = (input_shape[0], input_shape[1], output_dim)\n        else:\n            raise AttributeError(\"Cell does not have attribute 'state_size'\")\n    \n    self.built = True"
        }
    ]
}