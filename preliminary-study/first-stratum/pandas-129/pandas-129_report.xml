<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="2" hostname="boyudeMacBook-Pro.local" name="pytest" skipped="0" tests="12" time="0.592" timestamp="2023-11-15T23:09:19.723651"><testcase classname="pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps" file="pandas/tests/arithmetic/test_timedelta64.py" line="898" name="test_td64arr_add_sub_datetimelike_scalar[Index-ts0]" time="0.028"></testcase><testcase classname="pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps" file="pandas/tests/arithmetic/test_timedelta64.py" line="898" name="test_td64arr_add_sub_datetimelike_scalar[Index-ts1]" time="0.008"></testcase><testcase classname="pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps" file="pandas/tests/arithmetic/test_timedelta64.py" line="898" name="test_td64arr_add_sub_datetimelike_scalar[Index-ts2]" time="0.004"><failure message="ValueError: Unexpected type &apos;datetime64&apos;. &apos;values&apos; must be a DatetimeArray ndarray, or Series or Index containing one of those.">self = &lt;pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps object at 0x116b27c40&gt;
ts = numpy.datetime64(&apos;2012-01-01T00:00:00.000000000&apos;)
box_with_array = &lt;class &apos;pandas.core.indexes.base.Index&apos;&gt;

    @pytest.mark.parametrize(
        &quot;ts&quot;,
        [
            Timestamp(&quot;2012-01-01&quot;),
            Timestamp(&quot;2012-01-01&quot;).to_pydatetime(),
            Timestamp(&quot;2012-01-01&quot;).to_datetime64(),
        ],
    )
    def test_td64arr_add_sub_datetimelike_scalar(self, ts, box_with_array):
        # GH#11925, GH#29558
        tdi = timedelta_range(&quot;1 day&quot;, periods=3)
        expected = pd.date_range(&quot;2012-01-02&quot;, periods=3)
    
        tdarr = tm.box_expected(tdi, box_with_array)
        expected = tm.box_expected(expected, box_with_array)
    
        tm.assert_equal(ts + tdarr, expected)
        tm.assert_equal(tdarr + ts, expected)
    
        expected2 = pd.date_range(&quot;2011-12-31&quot;, periods=3, freq=&quot;-1D&quot;)
        expected2 = tm.box_expected(expected2, box_with_array)
    
&gt;       tm.assert_equal(ts - tdarr, expected2)

pandas/tests/arithmetic/test_timedelta64.py:921: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/indexes/datetimelike.py:558: in __rsub__
    result = self._data.__rsub__(maybe_unwrap_index(other))
pandas/core/arrays/datetimelike.py:1310: in __rsub__
    other = DatetimeArray(other)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;[TypeError(&quot;object of type &apos;NoneType&apos; has no len()&quot;) raised in repr()] DatetimeArray object at 0x116a9c580&gt;
values = numpy.datetime64(&apos;2012-01-01T00:00:00.000000000&apos;)
dtype = dtype(&apos;&lt;M8[ns]&apos;), freq = None, copy = False

    def __init__(self, values, dtype=_NS_DTYPE, freq=None, copy=False):
        if isinstance(values, (ABCSeries, ABCIndexClass)):
            values = values._values
    
        inferred_freq = getattr(values, &quot;_freq&quot;, None)
    
        if isinstance(values, type(self)):
            # validation
            dtz = getattr(dtype, &quot;tz&quot;, None)
            if dtz and values.tz is None:
                dtype = DatetimeTZDtype(tz=dtype.tz)
            elif dtz and values.tz:
                if not timezones.tz_compare(dtz, values.tz):
                    msg = (
                        &quot;Timezone of the array and &apos;dtype&apos; do not match. &quot;
                        &quot;&apos;{}&apos; != &apos;{}&apos;&quot;
                    )
                    raise TypeError(msg.format(dtz, values.tz))
            elif values.tz:
                dtype = values.dtype
            # freq = validate_values_freq(values, freq)
            if freq is None:
                freq = values.freq
            values = values._data
    
        if not isinstance(values, np.ndarray):
            msg = (
                &quot;Unexpected type &apos;{}&apos;. &apos;values&apos; must be a DatetimeArray &quot;
                &quot;ndarray, or Series or Index containing one of those.&quot;
            )
&gt;           raise ValueError(msg.format(type(values).__name__))
E           ValueError: Unexpected type &apos;datetime64&apos;. &apos;values&apos; must be a DatetimeArray ndarray, or Series or Index containing one of those.

pandas/core/arrays/datetimes.py:363: ValueError</failure></testcase><testcase classname="pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps" file="pandas/tests/arithmetic/test_timedelta64.py" line="898" name="test_td64arr_add_sub_datetimelike_scalar[Series-ts0]" time="0.003"></testcase><testcase classname="pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps" file="pandas/tests/arithmetic/test_timedelta64.py" line="898" name="test_td64arr_add_sub_datetimelike_scalar[Series-ts1]" time="0.003"></testcase><testcase classname="pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps" file="pandas/tests/arithmetic/test_timedelta64.py" line="898" name="test_td64arr_add_sub_datetimelike_scalar[Series-ts2]" time="0.003"></testcase><testcase classname="pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps" file="pandas/tests/arithmetic/test_timedelta64.py" line="898" name="test_td64arr_add_sub_datetimelike_scalar[DataFrame-ts0]" time="0.010"></testcase><testcase classname="pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps" file="pandas/tests/arithmetic/test_timedelta64.py" line="898" name="test_td64arr_add_sub_datetimelike_scalar[DataFrame-ts1]" time="0.014"></testcase><testcase classname="pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps" file="pandas/tests/arithmetic/test_timedelta64.py" line="898" name="test_td64arr_add_sub_datetimelike_scalar[DataFrame-ts2]" time="0.015"></testcase><testcase classname="pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps" file="pandas/tests/arithmetic/test_timedelta64.py" line="898" name="test_td64arr_add_sub_datetimelike_scalar[to_array-ts0]" time="0.005"></testcase><testcase classname="pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps" file="pandas/tests/arithmetic/test_timedelta64.py" line="898" name="test_td64arr_add_sub_datetimelike_scalar[to_array-ts1]" time="0.006"></testcase><testcase classname="pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps" file="pandas/tests/arithmetic/test_timedelta64.py" line="898" name="test_td64arr_add_sub_datetimelike_scalar[to_array-ts2]" time="0.005"><failure message="ValueError: Unexpected type &apos;datetime64&apos;. &apos;values&apos; must be a DatetimeArray ndarray, or Series or Index containing one of those.">self = &lt;pandas.tests.arithmetic.test_timedelta64.TestTimedeltaArraylikeAddSubOps object at 0x116f8fee0&gt;
ts = numpy.datetime64(&apos;2012-01-01T00:00:00.000000000&apos;)
box_with_array = &lt;function to_array at 0x111760280&gt;

    @pytest.mark.parametrize(
        &quot;ts&quot;,
        [
            Timestamp(&quot;2012-01-01&quot;),
            Timestamp(&quot;2012-01-01&quot;).to_pydatetime(),
            Timestamp(&quot;2012-01-01&quot;).to_datetime64(),
        ],
    )
    def test_td64arr_add_sub_datetimelike_scalar(self, ts, box_with_array):
        # GH#11925, GH#29558
        tdi = timedelta_range(&quot;1 day&quot;, periods=3)
        expected = pd.date_range(&quot;2012-01-02&quot;, periods=3)
    
        tdarr = tm.box_expected(tdi, box_with_array)
        expected = tm.box_expected(expected, box_with_array)
    
        tm.assert_equal(ts + tdarr, expected)
        tm.assert_equal(tdarr + ts, expected)
    
        expected2 = pd.date_range(&quot;2011-12-31&quot;, periods=3, freq=&quot;-1D&quot;)
        expected2 = tm.box_expected(expected2, box_with_array)
    
&gt;       tm.assert_equal(ts - tdarr, expected2)

pandas/tests/arithmetic/test_timedelta64.py:921: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/arrays/datetimelike.py:1310: in __rsub__
    other = DatetimeArray(other)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;[TypeError(&quot;object of type &apos;NoneType&apos; has no len()&quot;) raised in repr()] DatetimeArray object at 0x116f8f9d0&gt;
values = numpy.datetime64(&apos;2012-01-01T00:00:00.000000000&apos;)
dtype = dtype(&apos;&lt;M8[ns]&apos;), freq = None, copy = False

    def __init__(self, values, dtype=_NS_DTYPE, freq=None, copy=False):
        if isinstance(values, (ABCSeries, ABCIndexClass)):
            values = values._values
    
        inferred_freq = getattr(values, &quot;_freq&quot;, None)
    
        if isinstance(values, type(self)):
            # validation
            dtz = getattr(dtype, &quot;tz&quot;, None)
            if dtz and values.tz is None:
                dtype = DatetimeTZDtype(tz=dtype.tz)
            elif dtz and values.tz:
                if not timezones.tz_compare(dtz, values.tz):
                    msg = (
                        &quot;Timezone of the array and &apos;dtype&apos; do not match. &quot;
                        &quot;&apos;{}&apos; != &apos;{}&apos;&quot;
                    )
                    raise TypeError(msg.format(dtz, values.tz))
            elif values.tz:
                dtype = values.dtype
            # freq = validate_values_freq(values, freq)
            if freq is None:
                freq = values.freq
            values = values._data
    
        if not isinstance(values, np.ndarray):
            msg = (
                &quot;Unexpected type &apos;{}&apos;. &apos;values&apos; must be a DatetimeArray &quot;
                &quot;ndarray, or Series or Index containing one of those.&quot;
            )
&gt;           raise ValueError(msg.format(type(values).__name__))
E           ValueError: Unexpected type &apos;datetime64&apos;. &apos;values&apos; must be a DatetimeArray ndarray, or Series or Index containing one of those.

pandas/core/arrays/datetimes.py:363: ValueError</failure></testcase></testsuite></testsuites>