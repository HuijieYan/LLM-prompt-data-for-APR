{
    "pandas": [
        {
            "bugID": 129,
            "bitvector": {
                "1.3.2": 1,
                "1.2.4": 1,
                "1.2.1": 0,
                "1.3.4": 0,
                "2.1.1": 1,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "start_line": 1302,
            "file_name": "pandas/core/arrays/datetimelike.py",
            "replace_code": "def __rsub__(self, other):\n    from pandas.core.arrays import DatetimeArray\n    if is_datetime64_any_dtype(other) and is_timedelta64_dtype(self.dtype):\n        # ndarray[datetime64] cannot be subtracted from self, so\n        # we need to wrap in DatetimeArray/Index and flip the operation\n        if not isinstance(other, DatetimeLikeArrayMixin):\n            # Avoid down-casting DatetimeIndex\n            from pandas.core.arrays import DatetimeArray\n    \n            other = DatetimeArray(other)\n        return other - self\n    elif isinstance(other, (pd.DatetimeIndex, pd.TimedeltaIndex)):\n        # some type that can work with a DateTimeIndex\n        # zero-copy using the DatetimeIndex constructor\n        return pd.DatetimeIndex(other) - self\n    elif is_period_dtype(self.dtype) and is_timedelta64_dtype(self.dtype):\n        return pd.PeriodIndex(other) - self\n    else:\n        # let's try to convert it to a Timedelta if we can\n        idx = pd.Index(other)\n        if idx.hasnans:\n            raise TypeError(\"cannot do timedelta64 ops with NaTs\")\n    \n        return idx - self"
        }
    ]
}