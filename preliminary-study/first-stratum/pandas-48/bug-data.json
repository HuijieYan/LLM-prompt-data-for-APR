{
    "pandas:48": {
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/core/groupby/generic.py": {
            "buggy_functions": [
                {
                    "function_name": "_cython_agg_blocks",
                    "function_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    # TODO: the actual managing of mgr_locs is a PITA\n    # here, it should happen via BlockManager.combine\n\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    deleted_items: List[np.ndarray] = []\n    # Some object-dtype blocks might be split into List[Block[T], Block[U]]\n    split_items: List[np.ndarray] = []\n    split_frames: List[DataFrame] = []\n\n    no_result = object()\n    for block in data.blocks:\n        # Avoid inheriting result from earlier in the loop\n        result = no_result\n        locs = block.mgr_locs.as_array\n        try:\n            result, _ = self.grouper.aggregate(\n                block.values, how, axis=1, min_count=min_count\n            )\n        except NotImplementedError:\n            # generally if we have numeric_only=False\n            # and non-applicable functions\n            # try to python agg\n\n            if alt is None:\n                # we cannot perform the operation\n                # in an alternate way, exclude the block\n                assert how == \"ohlc\"\n                deleted_items.append(locs)\n                continue\n\n            # call our grouper again with only this block\n            obj = self.obj[data.items[locs]]\n            if obj.shape[1] == 1:\n                # Avoid call to self.values that can occur in DataFrame\n                #  reductions; see GH#28949\n                obj = obj.iloc[:, 0]\n\n            s = get_groupby(obj, self.grouper)\n            try:\n                result = s.aggregate(lambda x: alt(x, axis=self.axis))\n            except TypeError:\n                # we may have an exception in trying to aggregate\n                # continue and exclude the block\n                deleted_items.append(locs)\n                continue\n            else:\n                result = cast(DataFrame, result)\n                # unwrap DataFrame to get array\n                if len(result._data.blocks) != 1:\n                    # We've split an object block! Everything we've assumed\n                    # about a single block input returning a single block output\n                    # is a lie. To keep the code-path for the typical non-split case\n                    # clean, we choose to clean up this mess later on.\n                    split_items.append(locs)\n                    split_frames.append(result)\n                    continue\n\n                assert len(result._data.blocks) == 1\n                result = result._data.blocks[0].values\n                if isinstance(result, np.ndarray) and result.ndim == 1:\n                    result = result.reshape(1, -1)\n\n        assert not isinstance(result, DataFrame)\n\n        if result is not no_result:\n            # see if we can cast the block back to the original dtype\n            result = maybe_downcast_numeric(result, block.dtype)\n\n            if block.is_extension and isinstance(result, np.ndarray):\n                # e.g. block.values was an IntegerArray\n                # (1, N) case can occur if block.values was Categorical\n                #  and result is ndarray[object]\n                assert result.ndim == 1 or result.shape[0] == 1\n                try:\n                    # Cast back if feasible\n                    result = type(block.values)._from_sequence(\n                        result.ravel(), dtype=block.values.dtype\n                    )\n                except ValueError:\n                    # reshape to be valid for non-Extension Block\n                    result = result.reshape(1, -1)\n\n            agg_block: Block = block.make_block(result)\n\n        new_items.append(locs)\n        agg_blocks.append(agg_block)\n\n    if not (agg_blocks or split_frames):\n        raise DataError(\"No numeric types to aggregate\")\n\n    if split_items:\n        # Clean up the mess left over from split blocks.\n        for locs, result in zip(split_items, split_frames):\n            assert len(locs) == result.shape[1]\n            for i, loc in enumerate(locs):\n                new_items.append(np.array([loc], dtype=locs.dtype))\n                agg_blocks.append(result.iloc[:, [i]]._data.blocks[0])\n\n    # reset the locs in the blocks to correspond to our\n    # current ordering\n    indexer = np.concatenate(new_items)\n    agg_items = data.items.take(np.sort(indexer))\n\n    if deleted_items:\n\n        # we need to adjust the indexer to account for the\n        # items we have removed\n        # really should be done in internals :<\n\n        deleted = np.concatenate(deleted_items)\n        ai = np.arange(len(data))\n        mask = np.zeros(len(data))\n        mask[deleted] = 1\n        indexer = (ai - mask.cumsum())[indexer]\n\n    offset = 0\n    for blk in agg_blocks:\n        loc = len(blk.mgr_locs)\n        blk.mgr_locs = indexer[offset : (offset + loc)]\n        offset += loc\n\n    return agg_blocks, agg_items\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 999,
                    "variables": {
                        "str": [
                            1000
                        ],
                        "bool": [
                            1000
                        ],
                        "int": [
                            1000
                        ],
                        "data": [
                            1005,
                            1039,
                            1008,
                            1109,
                            1018,
                            1118,
                            1119
                        ],
                        "BlockManager": [
                            1005
                        ],
                        "self._get_data_to_aggregate": [
                            1005
                        ],
                        "self": [
                            1005,
                            1039,
                            1045,
                            1047,
                            1023
                        ],
                        "numeric_only": [
                            1007
                        ],
                        "data.get_numeric_data": [
                            1008
                        ],
                        "agg_blocks": [
                            1124,
                            1093,
                            1095,
                            1129,
                            1104,
                            1010
                        ],
                        "List": [
                            1010,
                            1011,
                            1012,
                            1014,
                            1015
                        ],
                        "Block": [
                            1010,
                            1090
                        ],
                        "new_items": [
                            1011,
                            1092,
                            1108,
                            1103
                        ],
                        "np.ndarray": [
                            1067,
                            1011,
                            1076,
                            1012,
                            1014
                        ],
                        "np": [
                            1067,
                            1103,
                            1011,
                            1076,
                            1012,
                            1014,
                            1108,
                            1109,
                            1117,
                            1118,
                            1119
                        ],
                        "deleted_items": [
                            1035,
                            1012,
                            1111,
                            1051,
                            1117
                        ],
                        "split_items": [
                            1098,
                            1100,
                            1061,
                            1014
                        ],
                        "split_frames": [
                            1095,
                            1100,
                            1062,
                            1015
                        ],
                        "DataFrame": [
                            1070,
                            1054,
                            1015
                        ],
                        "no_result": [
                            1072,
                            1017,
                            1020
                        ],
                        "object": [
                            1017
                        ],
                        "block": [
                            1024,
                            1090,
                            1074,
                            1076,
                            1018,
                            1083,
                            1084,
                            1021
                        ],
                        "data.blocks": [
                            1018
                        ],
                        "result": [
                            1047,
                            1054,
                            1056,
                            1062,
                            1065,
                            1066,
                            1067,
                            1068,
                            1070,
                            1072,
                            1074,
                            1076,
                            1080,
                            1083,
                            1084,
                            1088,
                            1090,
                            1100,
                            1101,
                            1104,
                            1020,
                            1023
                        ],
                        "locs": [
                            1092,
                            1061,
                            1035,
                            1100,
                            1101,
                            1102,
                            1039,
                            1103,
                            1051,
                            1021
                        ],
                        "block.mgr_locs.as_array": [
                            1021
                        ],
                        "block.mgr_locs": [
                            1021
                        ],
                        "_": [
                            1023
                        ],
                        "self.grouper.aggregate": [
                            1023
                        ],
                        "self.grouper": [
                            1045,
                            1023
                        ],
                        "block.values": [
                            1024,
                            1083,
                            1084
                        ],
                        "how": [
                            1024,
                            1034
                        ],
                        "min_count": [
                            1024
                        ],
                        "NotImplementedError": [
                            1026
                        ],
                        "alt": [
                            1047,
                            1031
                        ],
                        "deleted_items.append": [
                            1051,
                            1035
                        ],
                        "obj": [
                            1040,
                            1043,
                            1045,
                            1039
                        ],
                        "self.obj": [
                            1039
                        ],
                        "data.items": [
                            1109,
                            1039
                        ],
                        "obj.shape": [
                            1040
                        ],
                        "obj.iloc": [
                            1043
                        ],
                        "s": [
                            1045,
                            1047
                        ],
                        "get_groupby": [
                            1045
                        ],
                        "s.aggregate": [
                            1047
                        ],
                        "x": [
                            1047
                        ],
                        "self.axis": [
                            1047
                        ],
                        "TypeError": [
                            1048
                        ],
                        "cast": [
                            1054
                        ],
                        "len": [
                            1056,
                            1125,
                            1065,
                            1101,
                            1118,
                            1119
                        ],
                        "result._data.blocks": [
                            1056,
                            1065,
                            1066
                        ],
                        "result._data": [
                            1056,
                            1065,
                            1066
                        ],
                        "split_items.append": [
                            1061
                        ],
                        "split_frames.append": [
                            1062
                        ],
                        "values": [
                            1066
                        ],
                        "isinstance": [
                            1067,
                            1076,
                            1070
                        ],
                        "result.ndim": [
                            1080,
                            1067
                        ],
                        "result.reshape": [
                            1088,
                            1068
                        ],
                        "maybe_downcast_numeric": [
                            1074
                        ],
                        "block.dtype": [
                            1074
                        ],
                        "block.is_extension": [
                            1076
                        ],
                        "result.shape": [
                            1080,
                            1101
                        ],
                        "_from_sequence": [
                            1083
                        ],
                        "type": [
                            1083
                        ],
                        "result.ravel": [
                            1084
                        ],
                        "block.values.dtype": [
                            1084
                        ],
                        "ValueError": [
                            1086
                        ],
                        "agg_block": [
                            1090,
                            1093
                        ],
                        "block.make_block": [
                            1090
                        ],
                        "new_items.append": [
                            1092,
                            1103
                        ],
                        "agg_blocks.append": [
                            1104,
                            1093
                        ],
                        "DataError": [
                            1096
                        ],
                        "zip": [
                            1100
                        ],
                        "i": [
                            1104,
                            1102
                        ],
                        "loc": [
                            1125,
                            1126,
                            1127,
                            1102,
                            1103
                        ],
                        "enumerate": [
                            1102
                        ],
                        "np.array": [
                            1103
                        ],
                        "locs.dtype": [
                            1103
                        ],
                        "_data.blocks": [
                            1104
                        ],
                        "_data": [
                            1104
                        ],
                        "result.iloc": [
                            1104
                        ],
                        "indexer": [
                            1121,
                            1108,
                            1109,
                            1126
                        ],
                        "np.concatenate": [
                            1108,
                            1117
                        ],
                        "agg_items": [
                            1129,
                            1109
                        ],
                        "data.items.take": [
                            1109
                        ],
                        "np.sort": [
                            1109
                        ],
                        "deleted": [
                            1120,
                            1117
                        ],
                        "ai": [
                            1121,
                            1118
                        ],
                        "np.arange": [
                            1118
                        ],
                        "mask": [
                            1120,
                            1121,
                            1119
                        ],
                        "np.zeros": [
                            1119
                        ],
                        "mask.cumsum": [
                            1121
                        ],
                        "offset": [
                            1123,
                            1126,
                            1127
                        ],
                        "blk": [
                            1124,
                            1125,
                            1126
                        ],
                        "blk.mgr_locs": [
                            1125,
                            1126
                        ]
                    },
                    "filtered_variables": {
                        "data": [
                            1005,
                            1039,
                            1008,
                            1109,
                            1018,
                            1118,
                            1119
                        ],
                        "BlockManager": [
                            1005
                        ],
                        "self._get_data_to_aggregate": [
                            1005
                        ],
                        "self": [
                            1005,
                            1039,
                            1045,
                            1047,
                            1023
                        ],
                        "numeric_only": [
                            1007
                        ],
                        "data.get_numeric_data": [
                            1008
                        ],
                        "agg_blocks": [
                            1124,
                            1093,
                            1095,
                            1129,
                            1104,
                            1010
                        ],
                        "List": [
                            1010,
                            1011,
                            1012,
                            1014,
                            1015
                        ],
                        "Block": [
                            1010,
                            1090
                        ],
                        "new_items": [
                            1011,
                            1092,
                            1108,
                            1103
                        ],
                        "np.ndarray": [
                            1067,
                            1011,
                            1076,
                            1012,
                            1014
                        ],
                        "np": [
                            1067,
                            1103,
                            1011,
                            1076,
                            1012,
                            1014,
                            1108,
                            1109,
                            1117,
                            1118,
                            1119
                        ],
                        "deleted_items": [
                            1035,
                            1012,
                            1111,
                            1051,
                            1117
                        ],
                        "split_items": [
                            1098,
                            1100,
                            1061,
                            1014
                        ],
                        "split_frames": [
                            1095,
                            1100,
                            1062,
                            1015
                        ],
                        "DataFrame": [
                            1070,
                            1054,
                            1015
                        ],
                        "no_result": [
                            1072,
                            1017,
                            1020
                        ],
                        "block": [
                            1024,
                            1090,
                            1074,
                            1076,
                            1018,
                            1083,
                            1084,
                            1021
                        ],
                        "data.blocks": [
                            1018
                        ],
                        "result": [
                            1047,
                            1054,
                            1056,
                            1062,
                            1065,
                            1066,
                            1067,
                            1068,
                            1070,
                            1072,
                            1074,
                            1076,
                            1080,
                            1083,
                            1084,
                            1088,
                            1090,
                            1100,
                            1101,
                            1104,
                            1020,
                            1023
                        ],
                        "locs": [
                            1092,
                            1061,
                            1035,
                            1100,
                            1101,
                            1102,
                            1039,
                            1103,
                            1051,
                            1021
                        ],
                        "block.mgr_locs.as_array": [
                            1021
                        ],
                        "block.mgr_locs": [
                            1021
                        ],
                        "_": [
                            1023
                        ],
                        "self.grouper.aggregate": [
                            1023
                        ],
                        "self.grouper": [
                            1045,
                            1023
                        ],
                        "block.values": [
                            1024,
                            1083,
                            1084
                        ],
                        "how": [
                            1024,
                            1034
                        ],
                        "min_count": [
                            1024
                        ],
                        "alt": [
                            1047,
                            1031
                        ],
                        "deleted_items.append": [
                            1051,
                            1035
                        ],
                        "obj": [
                            1040,
                            1043,
                            1045,
                            1039
                        ],
                        "self.obj": [
                            1039
                        ],
                        "data.items": [
                            1109,
                            1039
                        ],
                        "obj.shape": [
                            1040
                        ],
                        "obj.iloc": [
                            1043
                        ],
                        "s": [
                            1045,
                            1047
                        ],
                        "get_groupby": [
                            1045
                        ],
                        "s.aggregate": [
                            1047
                        ],
                        "x": [
                            1047
                        ],
                        "self.axis": [
                            1047
                        ],
                        "cast": [
                            1054
                        ],
                        "result._data.blocks": [
                            1056,
                            1065,
                            1066
                        ],
                        "result._data": [
                            1056,
                            1065,
                            1066
                        ],
                        "split_items.append": [
                            1061
                        ],
                        "split_frames.append": [
                            1062
                        ],
                        "values": [
                            1066
                        ],
                        "result.ndim": [
                            1080,
                            1067
                        ],
                        "result.reshape": [
                            1088,
                            1068
                        ],
                        "maybe_downcast_numeric": [
                            1074
                        ],
                        "block.dtype": [
                            1074
                        ],
                        "block.is_extension": [
                            1076
                        ],
                        "result.shape": [
                            1080,
                            1101
                        ],
                        "_from_sequence": [
                            1083
                        ],
                        "result.ravel": [
                            1084
                        ],
                        "block.values.dtype": [
                            1084
                        ],
                        "agg_block": [
                            1090,
                            1093
                        ],
                        "block.make_block": [
                            1090
                        ],
                        "new_items.append": [
                            1092,
                            1103
                        ],
                        "agg_blocks.append": [
                            1104,
                            1093
                        ],
                        "DataError": [
                            1096
                        ],
                        "i": [
                            1104,
                            1102
                        ],
                        "loc": [
                            1125,
                            1126,
                            1127,
                            1102,
                            1103
                        ],
                        "np.array": [
                            1103
                        ],
                        "locs.dtype": [
                            1103
                        ],
                        "_data.blocks": [
                            1104
                        ],
                        "_data": [
                            1104
                        ],
                        "result.iloc": [
                            1104
                        ],
                        "indexer": [
                            1121,
                            1108,
                            1109,
                            1126
                        ],
                        "np.concatenate": [
                            1108,
                            1117
                        ],
                        "agg_items": [
                            1129,
                            1109
                        ],
                        "data.items.take": [
                            1109
                        ],
                        "np.sort": [
                            1109
                        ],
                        "deleted": [
                            1120,
                            1117
                        ],
                        "ai": [
                            1121,
                            1118
                        ],
                        "np.arange": [
                            1118
                        ],
                        "mask": [
                            1120,
                            1121,
                            1119
                        ],
                        "np.zeros": [
                            1119
                        ],
                        "mask.cumsum": [
                            1121
                        ],
                        "offset": [
                            1123,
                            1126,
                            1127
                        ],
                        "blk": [
                            1124,
                            1125,
                            1126
                        ],
                        "blk.mgr_locs": [
                            1125,
                            1126
                        ]
                    },
                    "diff_line_number": 1086,
                    "class_data": {
                        "signature": "class DataFrameGroupBy(GroupBy)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "@Substitution(see_also=_agg_see_also_doc, examples=_agg_examples_doc, versionadded='', klass='DataFrame', axis='')\n@Appender(_shared_docs['aggregate'])\ndef aggregate(self, func=None, *args, **kwargs):\n    relabeling = func is None and is_multi_agg_with_relabel(**kwargs)\n    if relabeling:\n        func, columns, order = normalize_keyword_aggregation(kwargs)\n        kwargs = {}\n    elif isinstance(func, list) and len(func) > len(set(func)):\n        raise SpecificationError('Function names must be unique if there is no new column names assigned')\n    elif func is None:\n        raise TypeError(\"Must provide 'func' or tuples of '(column, aggfunc).\")\n    func = maybe_mangle_lambdas(func)\n    result, how = self._aggregate(func, *args, **kwargs)\n    if how is None:\n        return result\n    if result is None:\n        if self.grouper.nkeys > 1:\n            return self._python_agg_general(func, *args, **kwargs)\n        elif args or kwargs:\n            result = self._aggregate_frame(func, *args, **kwargs)\n        elif self.axis == 1:\n            result = self._aggregate_frame(func)\n        else:\n            try:\n                result = self._aggregate_multiple_funcs([func], _axis=self.axis)\n            except ValueError as err:\n                if 'no results' not in str(err):\n                    raise\n                result = self._aggregate_frame(func)\n            else:\n                result.columns = Index(result.columns.levels[0], name=self._selected_obj.columns.name)\n    if not self.as_index:\n        self._insert_inaxis_grouper_inplace(result)\n        result.index = np.arange(len(result))\n    if relabeling:\n        result = result.iloc[:, order]\n        result.columns = columns\n    return result._convert(datetime=True)",
                            "def _iterate_slices(self) -> Iterable[Series]:\n    obj = self._selected_obj\n    if self.axis == 1:\n        obj = obj.T\n    if isinstance(obj, Series) and obj.name not in self.exclusions:\n        yield obj\n    else:\n        for label, values in obj.items():\n            if label in self.exclusions:\n                continue\n            yield values",
                            "def _cython_agg_general(self, how: str, alt=None, numeric_only: bool=True, min_count: int=-1) -> DataFrame:\n    agg_blocks, agg_items = self._cython_agg_blocks(how, alt=alt, numeric_only=numeric_only, min_count=min_count)\n    return self._wrap_agged_blocks(agg_blocks, items=agg_items)",
                            "def _cython_agg_blocks(self, how: str, alt=None, numeric_only: bool=True, min_count: int=-1) -> 'Tuple[List[Block], Index]':\n    data: BlockManager = self._get_data_to_aggregate()\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    deleted_items: List[np.ndarray] = []\n    split_items: List[np.ndarray] = []\n    split_frames: List[DataFrame] = []\n    no_result = object()\n    for block in data.blocks:\n        result = no_result\n        locs = block.mgr_locs.as_array\n        try:\n            result, _ = self.grouper.aggregate(block.values, how, axis=1, min_count=min_count)\n        except NotImplementedError:\n            if alt is None:\n                assert how == 'ohlc'\n                deleted_items.append(locs)\n                continue\n            obj = self.obj[data.items[locs]]\n            if obj.shape[1] == 1:\n                obj = obj.iloc[:, 0]\n            s = get_groupby(obj, self.grouper)\n            try:\n                result = s.aggregate(lambda x: alt(x, axis=self.axis))\n            except TypeError:\n                deleted_items.append(locs)\n                continue\n            else:\n                result = cast(DataFrame, result)\n                if len(result._data.blocks) != 1:\n                    split_items.append(locs)\n                    split_frames.append(result)\n                    continue\n                assert len(result._data.blocks) == 1\n                result = result._data.blocks[0].values\n                if isinstance(result, np.ndarray) and result.ndim == 1:\n                    result = result.reshape(1, -1)\n        assert not isinstance(result, DataFrame)\n        if result is not no_result:\n            result = maybe_downcast_numeric(result, block.dtype)\n            if block.is_extension and isinstance(result, np.ndarray):\n                assert result.ndim == 1 or result.shape[0] == 1\n                try:\n                    result = type(block.values)._from_sequence(result.ravel(), dtype=block.values.dtype)\n                except ValueError:\n                    result = result.reshape(1, -1)\n            agg_block: Block = block.make_block(result)\n        new_items.append(locs)\n        agg_blocks.append(agg_block)\n    if not (agg_blocks or split_frames):\n        raise DataError('No numeric types to aggregate')\n    if split_items:\n        for locs, result in zip(split_items, split_frames):\n            assert len(locs) == result.shape[1]\n            for i, loc in enumerate(locs):\n                new_items.append(np.array([loc], dtype=locs.dtype))\n                agg_blocks.append(result.iloc[:, [i]]._data.blocks[0])\n    indexer = np.concatenate(new_items)\n    agg_items = data.items.take(np.sort(indexer))\n    if deleted_items:\n        deleted = np.concatenate(deleted_items)\n        ai = np.arange(len(data))\n        mask = np.zeros(len(data))\n        mask[deleted] = 1\n        indexer = (ai - mask.cumsum())[indexer]\n    offset = 0\n    for blk in agg_blocks:\n        loc = len(blk.mgr_locs)\n        blk.mgr_locs = indexer[offset:offset + loc]\n        offset += loc\n    return (agg_blocks, agg_items)",
                            "def _aggregate_frame(self, func, *args, **kwargs) -> DataFrame:\n    if self.grouper.nkeys != 1:\n        raise AssertionError('Number of keys must be 1')\n    axis = self.axis\n    obj = self._obj_with_exclusions\n    result: Dict[Union[int, str], Union[NDFrame, np.ndarray]] = {}\n    if axis != obj._info_axis_number:\n        for name, data in self:\n            fres = func(data, *args, **kwargs)\n            result[name] = fres\n    else:\n        for name in self.indices:\n            data = self.get_group(name, obj=obj)\n            fres = func(data, *args, **kwargs)\n            result[name] = fres\n    return self._wrap_frame_output(result, obj)",
                            "def _aggregate_item_by_item(self, func, *args, **kwargs) -> DataFrame:\n    obj = self._obj_with_exclusions\n    result: Dict[Union[int, str], NDFrame] = {}\n    cannot_agg = []\n    for item in obj:\n        data = obj[item]\n        colg = SeriesGroupBy(data, selection=item, grouper=self.grouper)\n        cast = self._transform_should_cast(func)\n        try:\n            result[item] = colg.aggregate(func, *args, **kwargs)\n        except ValueError as err:\n            if 'Must produce aggregated value' in str(err):\n                raise\n            cannot_agg.append(item)\n            continue\n        else:\n            if cast:\n                result[item] = self._try_cast(result[item], data)\n    result_columns = obj.columns\n    if cannot_agg:\n        result_columns = result_columns.drop(cannot_agg)\n    return DataFrame(result, columns=result_columns)",
                            "def _wrap_applied_output(self, keys, values, not_indexed_same=False):\n    if len(keys) == 0:\n        return DataFrame(index=keys)\n    key_names = self.grouper.names\n\n    def first_not_none(values):\n        try:\n            return next(com.not_none(*values))\n        except StopIteration:\n            return None\n    v = first_not_none(values)\n    if v is None:\n        return DataFrame()\n    elif isinstance(v, DataFrame):\n        return self._concat_objects(keys, values, not_indexed_same=not_indexed_same)\n    elif self.grouper.groupings is not None:\n        if len(self.grouper.groupings) > 1:\n            key_index = self.grouper.result_index\n        else:\n            ping = self.grouper.groupings[0]\n            if len(keys) == ping.ngroups:\n                key_index = ping.group_index\n                key_index.name = key_names[0]\n                key_lookup = Index(keys)\n                indexer = key_lookup.get_indexer(key_index)\n                values = [values[i] for i in indexer]\n            else:\n                key_index = Index(keys, name=key_names[0])\n            if not self.as_index:\n                key_index = None\n        v = first_not_none(values)\n        if v is None:\n            return DataFrame()\n        elif isinstance(v, NDFrame):\n            kwargs = v._construct_axes_dict()\n            if v._constructor is Series:\n                backup = create_series_with_explicit_dtype(**kwargs, dtype_if_empty=object)\n            else:\n                backup = v._constructor(**kwargs)\n            values = [x if x is not None else backup for x in values]\n        v = values[0]\n        if isinstance(v, (np.ndarray, Index, Series)):\n            if isinstance(v, Series):\n                applied_index = self._selected_obj._get_axis(self.axis)\n                all_indexed_same = all_indexes_same([x.index for x in values])\n                singular_series = len(values) == 1 and applied_index.nlevels == 1\n                if self.squeeze:\n                    if singular_series:\n                        values[0].name = keys[0]\n                        return self._concat_objects(keys, values, not_indexed_same=not_indexed_same)\n                    elif all_indexed_same:\n                        from pandas.core.reshape.concat import concat\n                        return concat(values)\n                if not all_indexed_same:\n                    return self._concat_objects(keys, values, not_indexed_same=True)\n            if self.axis == 0 and isinstance(v, ABCSeries):\n                index = v.index.copy()\n                if index.name is None:\n                    names = {v.name for v in values}\n                    if len(names) == 1:\n                        index.name = list(names)[0]\n                if isinstance(v.index, MultiIndex) or key_index is None or isinstance(key_index, MultiIndex):\n                    stacked_values = np.vstack([np.asarray(v) for v in values])\n                    result = DataFrame(stacked_values, index=key_index, columns=index)\n                else:\n                    from pandas.core.reshape.concat import concat\n                    result = concat(values, keys=key_index, names=key_index.names, axis=self.axis).unstack()\n                    result.columns = index\n            elif isinstance(v, ABCSeries):\n                stacked_values = np.vstack([np.asarray(v) for v in values])\n                result = DataFrame(stacked_values.T, index=v.index, columns=key_index)\n            else:\n                return Series(values, index=key_index, name=self._selection_name)\n            so = self._selected_obj\n            if so.ndim == 2 and so.dtypes.apply(needs_i8_conversion).any():\n                result = _recast_datetimelike_result(result)\n            else:\n                result = result._convert(datetime=True)\n            return self._reindex_output(result)\n        else:\n            should_coerce = any((isinstance(x, Timestamp) for x in values))\n            return Series(values, index=key_index)._convert(datetime=True, coerce=should_coerce)\n    else:\n        return self._concat_objects(keys, values, not_indexed_same=not_indexed_same)",
                            "def _transform_general(self, func, *args, **kwargs):\n    from pandas.core.reshape.concat import concat\n    applied = []\n    obj = self._obj_with_exclusions\n    gen = self.grouper.get_iterator(obj, axis=self.axis)\n    fast_path, slow_path = self._define_paths(func, *args, **kwargs)\n    path = None\n    for name, group in gen:\n        object.__setattr__(group, 'name', name)\n        if path is None:\n            try:\n                path, res = self._choose_path(fast_path, slow_path, group)\n            except TypeError:\n                return self._transform_item_by_item(obj, fast_path)\n            except ValueError as err:\n                msg = 'transform must return a scalar value for each group'\n                raise ValueError(msg) from err\n        else:\n            res = path(group)\n        if isinstance(res, Series):\n            if not np.prod(group.shape):\n                continue\n            elif res.index.is_(obj.index):\n                r = concat([res] * len(group.columns), axis=1)\n                r.columns = group.columns\n                r.index = group.index\n            else:\n                r = DataFrame(np.concatenate([res.values] * len(group.index)).reshape(group.shape), columns=group.columns, index=group.index)\n            applied.append(r)\n        else:\n            applied.append(res)\n    concat_index = obj.columns if self.axis == 0 else obj.index\n    other_axis = 1 if self.axis == 0 else 0\n    concatenated = concat(applied, axis=self.axis, verify_integrity=False)\n    concatenated = concatenated.reindex(concat_index, axis=other_axis, copy=False)\n    return self._set_result_index_ordered(concatenated)",
                            "@Substitution(klass='DataFrame', selected='')\n@Appender(_transform_template)\ndef transform(self, func, *args, **kwargs):\n    func = self._get_cython_func(func) or func\n    if not isinstance(func, str):\n        return self._transform_general(func, *args, **kwargs)\n    elif func not in base.transform_kernel_whitelist:\n        msg = f\"'{func}' is not a valid function name for transform(name)\"\n        raise ValueError(msg)\n    elif func in base.cythonized_kernels:\n        return getattr(self, func)(*args, **kwargs)\n    if func in base.reduction_kernels:\n        result = getattr(self, func)(*args, **kwargs)\n        if isinstance(result, DataFrame) and result.columns.equals(self._obj_with_exclusions.columns):\n            return self._transform_fast(result, func)\n    return self._transform_general(func, *args, **kwargs)",
                            "def _transform_fast(self, result: DataFrame, func_nm: str) -> DataFrame:\n    \"\"\"\n    Fast transform path for aggregations\n    \"\"\"\n    cast = self._transform_should_cast(func_nm)\n    obj = self._obj_with_exclusions\n    ids, _, ngroup = self.grouper.group_info\n    output = []\n    for i, _ in enumerate(result.columns):\n        res = algorithms.take_1d(result.iloc[:, i].values, ids)\n        if cast:\n            res = self._try_cast(res, obj.iloc[:, i])\n        output.append(res)\n    return DataFrame._from_arrays(output, columns=result.columns, index=obj.index)",
                            "def _define_paths(self, func, *args, **kwargs):\n    if isinstance(func, str):\n        fast_path = lambda group: getattr(group, func)(*args, **kwargs)\n        slow_path = lambda group: group.apply(lambda x: getattr(x, func)(*args, **kwargs), axis=self.axis)\n    else:\n        fast_path = lambda group: func(group, *args, **kwargs)\n        slow_path = lambda group: group.apply(lambda x: func(x, *args, **kwargs), axis=self.axis)\n    return (fast_path, slow_path)",
                            "def _choose_path(self, fast_path: Callable, slow_path: Callable, group: DataFrame):\n    path = slow_path\n    res = slow_path(group)\n    try:\n        res_fast = fast_path(group)\n    except AssertionError:\n        raise\n    except Exception:\n        return (path, res)\n    if not isinstance(res_fast, DataFrame):\n        return (path, res)\n    if not res_fast.columns.equals(group.columns):\n        return (path, res)\n    if res_fast.equals(res):\n        path = fast_path\n    return (path, res)",
                            "def _transform_item_by_item(self, obj: DataFrame, wrapper) -> DataFrame:\n    output = {}\n    inds = []\n    for i, col in enumerate(obj):\n        try:\n            output[col] = self[col].transform(wrapper)\n        except TypeError:\n            pass\n        else:\n            inds.append(i)\n    if len(output) == 0:\n        raise TypeError('Transform function invalid for data types')\n    columns = obj.columns\n    if len(output) < len(obj.columns):\n        columns = columns.take(inds)\n    return DataFrame(output, index=obj.index, columns=columns)",
                            "def filter(self, func, dropna=True, *args, **kwargs):\n    \"\"\"\n    Return a copy of a DataFrame excluding elements from groups that\n    do not satisfy the boolean criterion specified by func.\n\n    Parameters\n    ----------\n    f : function\n        Function to apply to each subframe. Should return True or False.\n    dropna : Drop groups that do not pass the filter. True by default;\n        If False, groups that evaluate False are filled with NaNs.\n\n    Returns\n    -------\n    filtered : DataFrame\n\n    Notes\n    -----\n    Each subframe is endowed the attribute 'name' in case you need to know\n    which group you are working on.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A' : ['foo', 'bar', 'foo', 'bar',\n    ...                           'foo', 'bar'],\n    ...                    'B' : [1, 2, 3, 4, 5, 6],\n    ...                    'C' : [2.0, 5., 8., 1., 2., 9.]})\n    >>> grouped = df.groupby('A')\n    >>> grouped.filter(lambda x: x['B'].mean() > 3.)\n         A  B    C\n    1  bar  2  5.0\n    3  bar  4  1.0\n    5  bar  6  9.0\n    \"\"\"\n    indices = []\n    obj = self._selected_obj\n    gen = self.grouper.get_iterator(obj, axis=self.axis)\n    for name, group in gen:\n        object.__setattr__(group, 'name', name)\n        res = func(group, *args, **kwargs)\n        try:\n            res = res.squeeze()\n        except AttributeError:\n            pass\n        if is_bool(res) or (is_scalar(res) and isna(res)):\n            if res and notna(res):\n                indices.append(self._get_index(name))\n        else:\n            raise TypeError(f'filter function returned a {type(res).__name__}, but expected a scalar bool')\n    return self._apply_filter(indices, dropna)",
                            "def __getitem__(self, key):\n    if isinstance(key, tuple) and len(key) > 1:\n        warnings.warn('Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.', FutureWarning, stacklevel=2)\n    return super().__getitem__(key)",
                            "def _gotitem(self, key, ndim: int, subset=None):\n    \"\"\"\n    sub-classes to define\n    return a sliced object\n\n    Parameters\n    ----------\n    key : string / list of selections\n    ndim : 1,2\n        requested ndim of result\n    subset : object, default None\n        subset to act on\n    \"\"\"\n    if ndim == 2:\n        if subset is None:\n            subset = self.obj\n        return DataFrameGroupBy(subset, self.grouper, selection=key, grouper=self.grouper, exclusions=self.exclusions, as_index=self.as_index, observed=self.observed)\n    elif ndim == 1:\n        if subset is None:\n            subset = self.obj[key]\n        return SeriesGroupBy(subset, selection=key, grouper=self.grouper, observed=self.observed)\n    raise AssertionError('invalid ndim for _gotitem')",
                            "def _wrap_frame_output(self, result, obj) -> DataFrame:\n    result_index = self.grouper.levels[0]\n    if self.axis == 0:\n        return DataFrame(result, index=obj.columns, columns=result_index).T\n    else:\n        return DataFrame(result, index=obj.index, columns=result_index)",
                            "def _get_data_to_aggregate(self) -> BlockManager:\n    obj = self._obj_with_exclusions\n    if self.axis == 1:\n        return obj.T._data\n    else:\n        return obj._data",
                            "def _insert_inaxis_grouper_inplace(self, result):\n    izip = zip(*map(reversed, (self.grouper.names, self.grouper.get_group_levels(), [grp.in_axis for grp in self.grouper.groupings])))\n    for name, lev, in_axis in izip:\n        if in_axis:\n            result.insert(0, name, lev)",
                            "def _wrap_aggregated_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]) -> DataFrame:\n    \"\"\"\n    Wraps the output of DataFrameGroupBy aggregations into the expected result.\n\n    Parameters\n    ----------\n    output : Mapping[base.OutputKey, Union[Series, np.ndarray]]\n       Data to wrap.\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    indexed_output = {key.position: val for key, val in output.items()}\n    columns = Index((key.label for key in output))\n    result = DataFrame(indexed_output)\n    result.columns = columns\n    if not self.as_index:\n        self._insert_inaxis_grouper_inplace(result)\n        result = result._consolidate()\n    else:\n        index = self.grouper.result_index\n        result.index = index\n    if self.axis == 1:\n        result = result.T\n    return self._reindex_output(result)._convert(datetime=True)",
                            "def _wrap_transformed_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]) -> DataFrame:\n    \"\"\"\n    Wraps the output of DataFrameGroupBy transformations into the expected result.\n\n    Parameters\n    ----------\n    output : Mapping[base.OutputKey, Union[Series, np.ndarray]]\n        Data to wrap.\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    indexed_output = {key.position: val for key, val in output.items()}\n    columns = Index((key.label for key in output))\n    result = DataFrame(indexed_output)\n    result.columns = columns\n    result.index = self.obj.index\n    return result",
                            "def _wrap_agged_blocks(self, blocks: 'Sequence[Block]', items: Index) -> DataFrame:\n    if not self.as_index:\n        index = np.arange(blocks[0].values.shape[-1])\n        mgr = BlockManager(blocks, axes=[items, index])\n        result = DataFrame(mgr)\n        self._insert_inaxis_grouper_inplace(result)\n        result = result._consolidate()\n    else:\n        index = self.grouper.result_index\n        mgr = BlockManager(blocks, axes=[items, index])\n        result = DataFrame(mgr)\n    if self.axis == 1:\n        result = result.T\n    return self._reindex_output(result)._convert(datetime=True)",
                            "def _iterate_column_groupbys(self):\n    for i, colname in enumerate(self._selected_obj.columns):\n        yield (colname, SeriesGroupBy(self._selected_obj.iloc[:, i], selection=colname, grouper=self.grouper, exclusions=self.exclusions))",
                            "def _apply_to_column_groupbys(self, func):\n    from pandas.core.reshape.concat import concat\n    return concat((func(col_groupby) for _, col_groupby in self._iterate_column_groupbys()), keys=self._selected_obj.columns, axis=1)",
                            "def count(self):\n    \"\"\"\n    Compute count of group, excluding missing values.\n\n    Returns\n    -------\n    DataFrame\n        Count of values within each group.\n    \"\"\"\n    data = self._get_data_to_aggregate()\n    ids, _, ngroups = self.grouper.group_info\n    mask = ids != -1\n    vals = (mask & ~isna(blk.values).reshape(blk.shape) for blk in data.blocks)\n    locs = (blk.mgr_locs for blk in data.blocks)\n    counted = (lib.count_level_2d(x, labels=ids, max_bin=ngroups, axis=1) for x in vals)\n    blocks = [make_block(val, placement=loc) for val, loc in zip(counted, locs)]\n    return self._wrap_agged_blocks(blocks, items=data.items)",
                            "def nunique(self, dropna: bool=True):\n    \"\"\"\n    Return DataFrame with number of distinct observations per group for\n    each column.\n\n    Parameters\n    ----------\n    dropna : bool, default True\n        Don't include NaN in the counts.\n\n    Returns\n    -------\n    nunique: DataFrame\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'id': ['spam', 'egg', 'egg', 'spam',\n    ...                           'ham', 'ham'],\n    ...                    'value1': [1, 5, 5, 2, 5, 5],\n    ...                    'value2': list('abbaxy')})\n    >>> df\n         id  value1 value2\n    0  spam       1      a\n    1   egg       5      b\n    2   egg       5      b\n    3  spam       2      a\n    4   ham       5      x\n    5   ham       5      y\n\n    >>> df.groupby('id').nunique()\n        id  value1  value2\n    id\n    egg    1       1       1\n    ham    1       1       2\n    spam   1       2       1\n\n    Check for rows with the same id but conflicting values:\n\n    >>> df.groupby('id').filter(lambda g: (g.nunique() > 1).any())\n         id  value1 value2\n    0  spam       1      a\n    3  spam       2      a\n    4   ham       5      x\n    5   ham       5      y\n    \"\"\"\n    obj = self._selected_obj\n\n    def groupby_series(obj, col=None):\n        return SeriesGroupBy(obj, selection=col, grouper=self.grouper).nunique(dropna=dropna)\n    if isinstance(obj, Series):\n        results = groupby_series(obj)\n    else:\n        from pandas.core.reshape.concat import concat\n        axis_number = obj._get_axis_number(self.axis)\n        other_axis = int(not axis_number)\n        if axis_number == 0:\n            iter_func = obj.items\n        else:\n            iter_func = obj.iterrows\n        results = [groupby_series(content, label) for label, content in iter_func()]\n        results = concat(results, axis=1)\n        if axis_number == 1:\n            results = results.T\n        results._get_axis(other_axis).names = obj._get_axis(other_axis).names\n    if not self.as_index:\n        results.index = ibase.default_index(len(results))\n    return results",
                            "def first_not_none(values):\n    try:\n        return next(com.not_none(*values))\n    except StopIteration:\n        return None",
                            "def groupby_series(obj, col=None):\n    return SeriesGroupBy(obj, selection=col, grouper=self.grouper).nunique(dropna=dropna)"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [
                            "_apply_whitelist",
                            "_agg_see_also_doc",
                            "_agg_examples_doc",
                            "agg",
                            "boxplot"
                        ],
                        "class_decorators": [
                            "pin_whitelisted_properties(DataFrame, base.dataframe_apply_whitelist)"
                        ],
                        "function_signatures": [
                            "aggregate(self, func=None, *args, **kwargs)",
                            "_iterate_slices(self) -> Iterable[Series]",
                            "_cython_agg_general(self, how: str, alt=None, numeric_only: bool=True, min_count: int=-1) -> DataFrame",
                            "_cython_agg_blocks(self, how: str, alt=None, numeric_only: bool=True, min_count: int=-1) -> 'Tuple[List[Block], Index]'",
                            "_aggregate_frame(self, func, *args, **kwargs) -> DataFrame",
                            "_aggregate_item_by_item(self, func, *args, **kwargs) -> DataFrame",
                            "_wrap_applied_output(self, keys, values, not_indexed_same=False)",
                            "_transform_general(self, func, *args, **kwargs)",
                            "transform(self, func, *args, **kwargs)",
                            "_transform_fast(self, result: DataFrame, func_nm: str) -> DataFrame",
                            "_define_paths(self, func, *args, **kwargs)",
                            "_choose_path(self, fast_path: Callable, slow_path: Callable, group: DataFrame)",
                            "_transform_item_by_item(self, obj: DataFrame, wrapper) -> DataFrame",
                            "filter(self, func, dropna=True, *args, **kwargs)",
                            "__getitem__(self, key)",
                            "_gotitem(self, key, ndim: int, subset=None)",
                            "_wrap_frame_output(self, result, obj) -> DataFrame",
                            "_get_data_to_aggregate(self) -> BlockManager",
                            "_insert_inaxis_grouper_inplace(self, result)",
                            "_wrap_aggregated_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]) -> DataFrame",
                            "_wrap_transformed_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]) -> DataFrame",
                            "_wrap_agged_blocks(self, blocks: 'Sequence[Block]', items: Index) -> DataFrame",
                            "_iterate_column_groupbys(self)",
                            "_apply_to_column_groupbys(self, func)",
                            "count(self)",
                            "nunique(self, dropna: bool=True)",
                            "first_not_none(values)",
                            "groupby_series(obj, col=None)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "BlockManager": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self._get_data_to_aggregate": {
                                    "variable_value": "<bound method DataFrameGroupBy._get_data_to_aggregate of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x11e5fc9d0>>",
                                    "variable_type": "method"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x11e5fc9d0>",
                                    "variable_type": "DataFrameGroupBy"
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "data.get_numeric_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "List": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "Block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.ndarray": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_frames": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "DataFrame": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "no_result": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.mgr_locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.grouper.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11e5fc940>",
                                    "variable_type": "BaseGrouper"
                                },
                                "block.values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "how": {
                                    "variable_value": "var",
                                    "variable_type": "str"
                                },
                                "min_count": {
                                    "variable_value": "-1",
                                    "variable_type": "int"
                                },
                                "alt": {
                                    "variable_value": "<function GroupBy.var.<locals>.<lambda> at 0x1164c0160>",
                                    "variable_type": "function"
                                },
                                "deleted_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.obj": {
                                    "variable_value": "   a  b\n0  1  1\n1  1  2\n2  2  1\n3  2  2\n4  3  1\n5  3  2",
                                    "variable_type": "DataFrame"
                                },
                                "data.items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "get_groupby": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int"
                                },
                                "cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_frames.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ndim": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "maybe_downcast_numeric": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.is_extension": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_from_sequence": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ravel": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.make_block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_blocks.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "DataError": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "i": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "loc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "indexer": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.concatenate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "data.items.take": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.sort": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ai": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.arange": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.zeros": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask.cumsum": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "offset": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "blk": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "blk.mgr_locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "BlockManager": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self._get_data_to_aggregate": {
                                    "variable_value": "<bound method DataFrameGroupBy._get_data_to_aggregate of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x11d97dc10>>",
                                    "variable_type": "method"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x11d97dc10>",
                                    "variable_type": "DataFrameGroupBy"
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "data.get_numeric_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "List": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "Block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.ndarray": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_frames": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "DataFrame": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "no_result": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.mgr_locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.grouper.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11d97daf0>",
                                    "variable_type": "BaseGrouper"
                                },
                                "block.values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "how": {
                                    "variable_value": "mean",
                                    "variable_type": "str"
                                },
                                "min_count": {
                                    "variable_value": "-1",
                                    "variable_type": "int"
                                },
                                "alt": {
                                    "variable_value": "<function GroupBy.mean.<locals>.<lambda> at 0x11d8e4e50>",
                                    "variable_type": "function"
                                },
                                "deleted_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.obj": {
                                    "variable_value": "   a     b\n0  1     1\n1  1  <NA>\n2  1     2\n3  2     1\n4  2  <NA>\n5  2     2\n6  3     1\n7  3  <NA>\n8  3     2",
                                    "variable_type": "DataFrame"
                                },
                                "data.items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "get_groupby": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int"
                                },
                                "cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_frames.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ndim": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "maybe_downcast_numeric": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.is_extension": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_from_sequence": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ravel": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.make_block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_blocks.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "DataError": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "i": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "loc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "indexer": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.concatenate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "data.items.take": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.sort": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ai": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.arange": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.zeros": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask.cumsum": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "offset": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "blk": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "blk.mgr_locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                }
                            },
                            {
                                "data": {
                                    "variable_value": "BlockManager\nItems: Index(['b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=9, step=1)\nExtensionBlock: slice(0, 1, 1), 1 x 9, dtype: Int64",
                                    "variable_type": "BlockManager"
                                },
                                "BlockManager": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self._get_data_to_aggregate": {
                                    "variable_value": "<bound method DataFrameGroupBy._get_data_to_aggregate of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x11d97dc10>>",
                                    "variable_type": "method"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x11d97dc10>",
                                    "variable_type": "DataFrameGroupBy"
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "data.get_numeric_data": {
                                    "variable_value": "<bound method BlockManager.get_numeric_data of BlockManager\nItems: Index(['b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=9, step=1)\nExtensionBlock: slice(0, 1, 1), 1 x 9, dtype: Int64>",
                                    "variable_type": "method"
                                },
                                "agg_blocks": {
                                    "variable_value": "[FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64]",
                                    "variable_type": "list"
                                },
                                "List": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "Block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items": {
                                    "variable_value": "[array([0])]",
                                    "variable_type": "list"
                                },
                                "np.ndarray": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted_items": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "split_items": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "split_frames": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "DataFrame": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "no_result": {
                                    "variable_value": "<object object at 0x11d79fde0>",
                                    "variable_type": "object"
                                },
                                "block": {
                                    "variable_value": "ExtensionBlock: slice(0, 1, 1), 1 x 9, dtype: Int64",
                                    "variable_type": "ExtensionBlock"
                                },
                                "data.blocks": {
                                    "variable_value": "(ExtensionBlock: slice(0, 1, 1), 1 x 9, dtype: Int64,)",
                                    "variable_type": "tuple"
                                },
                                "result": {
                                    "variable_value": "array([[1.5, 1.5, 1.5]])",
                                    "variable_type": "ndarray"
                                },
                                "locs": {
                                    "variable_value": "array([0])",
                                    "variable_type": "ndarray"
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "block.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement"
                                },
                                "_": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11d97daf0>",
                                    "variable_type": "BaseGrouper"
                                },
                                "block.values": {
                                    "variable_value": "<IntegerArray>\n[1, <NA>, 2, 1, <NA>, 2, 1, <NA>, 2]\nLength: 9, dtype: Int64",
                                    "variable_type": "IntegerArray"
                                },
                                "how": {
                                    "variable_value": "mean",
                                    "variable_type": "str"
                                },
                                "min_count": {
                                    "variable_value": "-1",
                                    "variable_type": "int"
                                },
                                "alt": {
                                    "variable_value": "<function GroupBy.mean.<locals>.<lambda> at 0x11d8e4e50>",
                                    "variable_type": "function"
                                },
                                "deleted_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da629c0>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "obj": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.obj": {
                                    "variable_value": "   a     b\n0  1     1\n1  1  <NA>\n2  1     2\n3  2     1\n4  2  <NA>\n5  2     2\n6  3     1\n7  3  <NA>\n8  3     2",
                                    "variable_type": "DataFrame"
                                },
                                "data.items": {
                                    "variable_value": "Index(['b'], dtype='object')",
                                    "variable_type": "Index"
                                },
                                "obj.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "get_groupby": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int"
                                },
                                "cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "result._data": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "split_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da62800>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "split_frames.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da68100>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int"
                                },
                                "result.reshape": {
                                    "variable_value": "<built-in method reshape of numpy.ndarray object at 0x11da8cd00>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "maybe_downcast_numeric": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.dtype": {
                                    "variable_value": "Int64Dtype()",
                                    "variable_type": "Int64Dtype"
                                },
                                "block.is_extension": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "result.shape": {
                                    "variable_value": "(1, 3)",
                                    "variable_type": "tuple"
                                },
                                "_from_sequence": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ravel": {
                                    "variable_value": "<built-in method ravel of numpy.ndarray object at 0x11da8cd00>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "block.values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "agg_block": {
                                    "variable_value": "FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64",
                                    "variable_type": "FloatBlock"
                                },
                                "block.make_block": {
                                    "variable_value": "<bound method Block.make_block of ExtensionBlock: slice(0, 1, 1), 1 x 9, dtype: Int64>",
                                    "variable_type": "method"
                                },
                                "new_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da686c0>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "agg_blocks.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da62440>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "DataError": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "i": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "loc": {
                                    "variable_value": "1",
                                    "variable_type": "int"
                                },
                                "np.array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype"
                                },
                                "_data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "indexer": {
                                    "variable_value": "array([0])",
                                    "variable_type": "ndarray"
                                },
                                "np.concatenate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_items": {
                                    "variable_value": "Index(['b'], dtype='object')",
                                    "variable_type": "Index"
                                },
                                "data.items.take": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "np.sort": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ai": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.arange": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.zeros": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask.cumsum": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "offset": {
                                    "variable_value": "1",
                                    "variable_type": "int"
                                },
                                "blk": {
                                    "variable_value": "FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64",
                                    "variable_type": "FloatBlock"
                                },
                                "blk.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement"
                                }
                            }
                        ],
                        [
                            {
                                "data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "BlockManager": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self._get_data_to_aggregate": {
                                    "variable_value": "<bound method DataFrameGroupBy._get_data_to_aggregate of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x11d97dc10>>",
                                    "variable_type": "method"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x11d97dc10>",
                                    "variable_type": "DataFrameGroupBy"
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "data.get_numeric_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "List": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "Block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.ndarray": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_frames": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "DataFrame": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "no_result": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.mgr_locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.grouper.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11d97daf0>",
                                    "variable_type": "BaseGrouper"
                                },
                                "block.values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "how": {
                                    "variable_value": "mean",
                                    "variable_type": "str"
                                },
                                "min_count": {
                                    "variable_value": "-1",
                                    "variable_type": "int"
                                },
                                "alt": {
                                    "variable_value": "<function GroupBy.mean.<locals>.<lambda> at 0x11d981820>",
                                    "variable_type": "function"
                                },
                                "deleted_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.obj": {
                                    "variable_value": "   a     b\n0  1     1\n1  1  <NA>\n2  1     2\n3  2     1\n4  2  <NA>\n5  2     2\n6  3     1\n7  3  <NA>\n8  3     2",
                                    "variable_type": "DataFrame"
                                },
                                "data.items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "get_groupby": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int"
                                },
                                "cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_frames.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ndim": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "maybe_downcast_numeric": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.is_extension": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_from_sequence": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ravel": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.make_block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_blocks.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "DataError": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "i": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "loc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "indexer": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.concatenate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "data.items.take": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.sort": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ai": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.arange": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.zeros": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask.cumsum": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "offset": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "blk": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "blk.mgr_locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                }
                            },
                            {
                                "data": {
                                    "variable_value": "BlockManager\nItems: Index(['b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=9, step=1)\nExtensionBlock: slice(0, 1, 1), 1 x 9, dtype: Int64",
                                    "variable_type": "BlockManager"
                                },
                                "BlockManager": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self._get_data_to_aggregate": {
                                    "variable_value": "<bound method DataFrameGroupBy._get_data_to_aggregate of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x11d97dc10>>",
                                    "variable_type": "method"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x11d97dc10>",
                                    "variable_type": "DataFrameGroupBy"
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "data.get_numeric_data": {
                                    "variable_value": "<bound method BlockManager.get_numeric_data of BlockManager\nItems: Index(['b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=9, step=1)\nExtensionBlock: slice(0, 1, 1), 1 x 9, dtype: Int64>",
                                    "variable_type": "method"
                                },
                                "agg_blocks": {
                                    "variable_value": "[FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64]",
                                    "variable_type": "list"
                                },
                                "List": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "Block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items": {
                                    "variable_value": "[array([0])]",
                                    "variable_type": "list"
                                },
                                "np.ndarray": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted_items": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "split_items": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "split_frames": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "DataFrame": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "no_result": {
                                    "variable_value": "<object object at 0x11d79ff30>",
                                    "variable_type": "object"
                                },
                                "block": {
                                    "variable_value": "ExtensionBlock: slice(0, 1, 1), 1 x 9, dtype: Int64",
                                    "variable_type": "ExtensionBlock"
                                },
                                "data.blocks": {
                                    "variable_value": "(ExtensionBlock: slice(0, 1, 1), 1 x 9, dtype: Int64,)",
                                    "variable_type": "tuple"
                                },
                                "result": {
                                    "variable_value": "array([[1.5, 1.5, 1.5]])",
                                    "variable_type": "ndarray"
                                },
                                "locs": {
                                    "variable_value": "array([0])",
                                    "variable_type": "ndarray"
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "block.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement"
                                },
                                "_": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11d97daf0>",
                                    "variable_type": "BaseGrouper"
                                },
                                "block.values": {
                                    "variable_value": "<IntegerArray>\n[1, <NA>, 2, 1, <NA>, 2, 1, <NA>, 2]\nLength: 9, dtype: Int64",
                                    "variable_type": "IntegerArray"
                                },
                                "how": {
                                    "variable_value": "mean",
                                    "variable_type": "str"
                                },
                                "min_count": {
                                    "variable_value": "-1",
                                    "variable_type": "int"
                                },
                                "alt": {
                                    "variable_value": "<function GroupBy.mean.<locals>.<lambda> at 0x11d981820>",
                                    "variable_type": "function"
                                },
                                "deleted_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da68580>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "obj": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.obj": {
                                    "variable_value": "   a     b\n0  1     1\n1  1  <NA>\n2  1     2\n3  2     1\n4  2  <NA>\n5  2     2\n6  3     1\n7  3  <NA>\n8  3     2",
                                    "variable_type": "DataFrame"
                                },
                                "data.items": {
                                    "variable_value": "Index(['b'], dtype='object')",
                                    "variable_type": "Index"
                                },
                                "obj.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "get_groupby": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int"
                                },
                                "cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "result._data": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "split_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da27b80>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "split_frames.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da62c80>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int"
                                },
                                "result.reshape": {
                                    "variable_value": "<built-in method reshape of numpy.ndarray object at 0x11da23b20>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "maybe_downcast_numeric": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.dtype": {
                                    "variable_value": "Int64Dtype()",
                                    "variable_type": "Int64Dtype"
                                },
                                "block.is_extension": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "result.shape": {
                                    "variable_value": "(1, 3)",
                                    "variable_type": "tuple"
                                },
                                "_from_sequence": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ravel": {
                                    "variable_value": "<built-in method ravel of numpy.ndarray object at 0x11da23b20>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "block.values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "agg_block": {
                                    "variable_value": "FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64",
                                    "variable_type": "FloatBlock"
                                },
                                "block.make_block": {
                                    "variable_value": "<bound method Block.make_block of ExtensionBlock: slice(0, 1, 1), 1 x 9, dtype: Int64>",
                                    "variable_type": "method"
                                },
                                "new_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da21740>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "agg_blocks.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da1cbc0>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "DataError": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "i": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "loc": {
                                    "variable_value": "1",
                                    "variable_type": "int"
                                },
                                "np.array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype"
                                },
                                "_data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "indexer": {
                                    "variable_value": "array([0])",
                                    "variable_type": "ndarray"
                                },
                                "np.concatenate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_items": {
                                    "variable_value": "Index(['b'], dtype='object')",
                                    "variable_type": "Index"
                                },
                                "data.items.take": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "np.sort": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ai": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.arange": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.zeros": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask.cumsum": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "offset": {
                                    "variable_value": "1",
                                    "variable_type": "int"
                                },
                                "blk": {
                                    "variable_value": "FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64",
                                    "variable_type": "FloatBlock"
                                },
                                "blk.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement"
                                }
                            }
                        ],
                        [
                            {
                                "data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "BlockManager": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self._get_data_to_aggregate": {
                                    "variable_value": "<bound method DataFrameGroupBy._get_data_to_aggregate of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x11d97d8b0>>",
                                    "variable_type": "method"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x11d97d8b0>",
                                    "variable_type": "DataFrameGroupBy"
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "data.get_numeric_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "List": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "Block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.ndarray": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_frames": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "DataFrame": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "no_result": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.mgr_locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.grouper.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11d97dbe0>",
                                    "variable_type": "BaseGrouper"
                                },
                                "block.values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "how": {
                                    "variable_value": "mean",
                                    "variable_type": "str"
                                },
                                "min_count": {
                                    "variable_value": "-1",
                                    "variable_type": "int"
                                },
                                "alt": {
                                    "variable_value": "<function GroupBy.mean.<locals>.<lambda> at 0x11d9819d0>",
                                    "variable_type": "function"
                                },
                                "deleted_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.obj": {
                                    "variable_value": "   a  b\n0  1  1\n1  1  2\n2  2  1\n3  2  2\n4  3  1\n5  3  2",
                                    "variable_type": "DataFrame"
                                },
                                "data.items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "get_groupby": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int"
                                },
                                "cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_frames.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ndim": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "maybe_downcast_numeric": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.is_extension": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_from_sequence": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ravel": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.make_block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_blocks.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "DataError": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "i": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "loc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "indexer": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.concatenate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "data.items.take": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.sort": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ai": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.arange": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.zeros": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask.cumsum": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "offset": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "blk": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "blk.mgr_locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                }
                            },
                            {
                                "data": {
                                    "variable_value": "BlockManager\nItems: Index(['b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=6, step=1)\nExtensionBlock: slice(0, 1, 1), 1 x 6, dtype: Int64",
                                    "variable_type": "BlockManager"
                                },
                                "BlockManager": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self._get_data_to_aggregate": {
                                    "variable_value": "<bound method DataFrameGroupBy._get_data_to_aggregate of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x11d97d8b0>>",
                                    "variable_type": "method"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x11d97d8b0>",
                                    "variable_type": "DataFrameGroupBy"
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "data.get_numeric_data": {
                                    "variable_value": "<bound method BlockManager.get_numeric_data of BlockManager\nItems: Index(['b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=6, step=1)\nExtensionBlock: slice(0, 1, 1), 1 x 6, dtype: Int64>",
                                    "variable_type": "method"
                                },
                                "agg_blocks": {
                                    "variable_value": "[FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64]",
                                    "variable_type": "list"
                                },
                                "List": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "Block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items": {
                                    "variable_value": "[array([0])]",
                                    "variable_type": "list"
                                },
                                "np.ndarray": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted_items": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "split_items": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "split_frames": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "DataFrame": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "no_result": {
                                    "variable_value": "<object object at 0x11d79fda0>",
                                    "variable_type": "object"
                                },
                                "block": {
                                    "variable_value": "ExtensionBlock: slice(0, 1, 1), 1 x 6, dtype: Int64",
                                    "variable_type": "ExtensionBlock"
                                },
                                "data.blocks": {
                                    "variable_value": "(ExtensionBlock: slice(0, 1, 1), 1 x 6, dtype: Int64,)",
                                    "variable_type": "tuple"
                                },
                                "result": {
                                    "variable_value": "array([[1.5, 1.5, 1.5]])",
                                    "variable_type": "ndarray"
                                },
                                "locs": {
                                    "variable_value": "array([0])",
                                    "variable_type": "ndarray"
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "block.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement"
                                },
                                "_": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11d97dbe0>",
                                    "variable_type": "BaseGrouper"
                                },
                                "block.values": {
                                    "variable_value": "<IntegerArray>\n[1, 2, 1, 2, 1, 2]\nLength: 6, dtype: Int64",
                                    "variable_type": "IntegerArray"
                                },
                                "how": {
                                    "variable_value": "mean",
                                    "variable_type": "str"
                                },
                                "min_count": {
                                    "variable_value": "-1",
                                    "variable_type": "int"
                                },
                                "alt": {
                                    "variable_value": "<function GroupBy.mean.<locals>.<lambda> at 0x11d9819d0>",
                                    "variable_type": "function"
                                },
                                "deleted_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da275c0>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "obj": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.obj": {
                                    "variable_value": "   a  b\n0  1  1\n1  1  2\n2  2  1\n3  2  2\n4  3  1\n5  3  2",
                                    "variable_type": "DataFrame"
                                },
                                "data.items": {
                                    "variable_value": "Index(['b'], dtype='object')",
                                    "variable_type": "Index"
                                },
                                "obj.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "get_groupby": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int"
                                },
                                "cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "result._data": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "split_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da1cc80>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "split_frames.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da27880>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int"
                                },
                                "result.reshape": {
                                    "variable_value": "<built-in method reshape of numpy.ndarray object at 0x11da2f620>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "maybe_downcast_numeric": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.dtype": {
                                    "variable_value": "Int64Dtype()",
                                    "variable_type": "Int64Dtype"
                                },
                                "block.is_extension": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "result.shape": {
                                    "variable_value": "(1, 3)",
                                    "variable_type": "tuple"
                                },
                                "_from_sequence": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ravel": {
                                    "variable_value": "<built-in method ravel of numpy.ndarray object at 0x11da2f620>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "block.values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "agg_block": {
                                    "variable_value": "FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64",
                                    "variable_type": "FloatBlock"
                                },
                                "block.make_block": {
                                    "variable_value": "<bound method Block.make_block of ExtensionBlock: slice(0, 1, 1), 1 x 6, dtype: Int64>",
                                    "variable_type": "method"
                                },
                                "new_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da27c80>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "agg_blocks.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da446c0>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "DataError": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "i": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "loc": {
                                    "variable_value": "1",
                                    "variable_type": "int"
                                },
                                "np.array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype"
                                },
                                "_data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "indexer": {
                                    "variable_value": "array([0])",
                                    "variable_type": "ndarray"
                                },
                                "np.concatenate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_items": {
                                    "variable_value": "Index(['b'], dtype='object')",
                                    "variable_type": "Index"
                                },
                                "data.items.take": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "np.sort": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ai": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.arange": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.zeros": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask.cumsum": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "offset": {
                                    "variable_value": "1",
                                    "variable_type": "int"
                                },
                                "blk": {
                                    "variable_value": "FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64",
                                    "variable_type": "FloatBlock"
                                },
                                "blk.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement"
                                }
                            }
                        ],
                        [
                            {
                                "data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "BlockManager": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self._get_data_to_aggregate": {
                                    "variable_value": "<bound method DataFrameGroupBy._get_data_to_aggregate of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x11d97d8b0>>",
                                    "variable_type": "method"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x11d97d8b0>",
                                    "variable_type": "DataFrameGroupBy"
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "data.get_numeric_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "List": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "Block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.ndarray": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_frames": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "DataFrame": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "no_result": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.mgr_locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.grouper.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11d97dbe0>",
                                    "variable_type": "BaseGrouper"
                                },
                                "block.values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "how": {
                                    "variable_value": "mean",
                                    "variable_type": "str"
                                },
                                "min_count": {
                                    "variable_value": "-1",
                                    "variable_type": "int"
                                },
                                "alt": {
                                    "variable_value": "<function GroupBy.mean.<locals>.<lambda> at 0x11d981b80>",
                                    "variable_type": "function"
                                },
                                "deleted_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.obj": {
                                    "variable_value": "   a  b\n0  1  1\n1  1  2\n2  2  1\n3  2  2\n4  3  1\n5  3  2",
                                    "variable_type": "DataFrame"
                                },
                                "data.items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "get_groupby": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int"
                                },
                                "cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_frames.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ndim": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "maybe_downcast_numeric": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.is_extension": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_from_sequence": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ravel": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.make_block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_blocks.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "DataError": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "i": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "loc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "indexer": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.concatenate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "data.items.take": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.sort": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ai": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.arange": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.zeros": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask.cumsum": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "offset": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "blk": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "blk.mgr_locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                }
                            },
                            {
                                "data": {
                                    "variable_value": "BlockManager\nItems: Index(['b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=6, step=1)\nExtensionBlock: slice(0, 1, 1), 1 x 6, dtype: Int64",
                                    "variable_type": "BlockManager"
                                },
                                "BlockManager": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self._get_data_to_aggregate": {
                                    "variable_value": "<bound method DataFrameGroupBy._get_data_to_aggregate of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x11d97d8b0>>",
                                    "variable_type": "method"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x11d97d8b0>",
                                    "variable_type": "DataFrameGroupBy"
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "data.get_numeric_data": {
                                    "variable_value": "<bound method BlockManager.get_numeric_data of BlockManager\nItems: Index(['b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=6, step=1)\nExtensionBlock: slice(0, 1, 1), 1 x 6, dtype: Int64>",
                                    "variable_type": "method"
                                },
                                "agg_blocks": {
                                    "variable_value": "[FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64]",
                                    "variable_type": "list"
                                },
                                "List": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "Block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items": {
                                    "variable_value": "[array([0])]",
                                    "variable_type": "list"
                                },
                                "np.ndarray": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted_items": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "split_items": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "split_frames": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "DataFrame": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "no_result": {
                                    "variable_value": "<object object at 0x11d79fdd0>",
                                    "variable_type": "object"
                                },
                                "block": {
                                    "variable_value": "ExtensionBlock: slice(0, 1, 1), 1 x 6, dtype: Int64",
                                    "variable_type": "ExtensionBlock"
                                },
                                "data.blocks": {
                                    "variable_value": "(ExtensionBlock: slice(0, 1, 1), 1 x 6, dtype: Int64,)",
                                    "variable_type": "tuple"
                                },
                                "result": {
                                    "variable_value": "array([[1.5, 1.5, 1.5]])",
                                    "variable_type": "ndarray"
                                },
                                "locs": {
                                    "variable_value": "array([0])",
                                    "variable_type": "ndarray"
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "block.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement"
                                },
                                "_": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11d97dbe0>",
                                    "variable_type": "BaseGrouper"
                                },
                                "block.values": {
                                    "variable_value": "<IntegerArray>\n[1, 2, 1, 2, 1, 2]\nLength: 6, dtype: Int64",
                                    "variable_type": "IntegerArray"
                                },
                                "how": {
                                    "variable_value": "mean",
                                    "variable_type": "str"
                                },
                                "min_count": {
                                    "variable_value": "-1",
                                    "variable_type": "int"
                                },
                                "alt": {
                                    "variable_value": "<function GroupBy.mean.<locals>.<lambda> at 0x11d981b80>",
                                    "variable_type": "function"
                                },
                                "deleted_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da27140>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "obj": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.obj": {
                                    "variable_value": "   a  b\n0  1  1\n1  1  2\n2  2  1\n3  2  2\n4  3  1\n5  3  2",
                                    "variable_type": "DataFrame"
                                },
                                "data.items": {
                                    "variable_value": "Index(['b'], dtype='object')",
                                    "variable_type": "Index"
                                },
                                "obj.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "get_groupby": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int"
                                },
                                "cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "result._data": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "split_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da273c0>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "split_frames.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da28a00>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int"
                                },
                                "result.reshape": {
                                    "variable_value": "<built-in method reshape of numpy.ndarray object at 0x11da23260>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "maybe_downcast_numeric": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.dtype": {
                                    "variable_value": "Int64Dtype()",
                                    "variable_type": "Int64Dtype"
                                },
                                "block.is_extension": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "result.shape": {
                                    "variable_value": "(1, 3)",
                                    "variable_type": "tuple"
                                },
                                "_from_sequence": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ravel": {
                                    "variable_value": "<built-in method ravel of numpy.ndarray object at 0x11da23260>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "block.values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "agg_block": {
                                    "variable_value": "FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64",
                                    "variable_type": "FloatBlock"
                                },
                                "block.make_block": {
                                    "variable_value": "<bound method Block.make_block of ExtensionBlock: slice(0, 1, 1), 1 x 6, dtype: Int64>",
                                    "variable_type": "method"
                                },
                                "new_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da48380>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "agg_blocks.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da40200>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "DataError": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "i": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "loc": {
                                    "variable_value": "1",
                                    "variable_type": "int"
                                },
                                "np.array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype"
                                },
                                "_data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "indexer": {
                                    "variable_value": "array([0])",
                                    "variable_type": "ndarray"
                                },
                                "np.concatenate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_items": {
                                    "variable_value": "Index(['b'], dtype='object')",
                                    "variable_type": "Index"
                                },
                                "data.items.take": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "np.sort": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ai": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.arange": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.zeros": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask.cumsum": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "offset": {
                                    "variable_value": "1",
                                    "variable_type": "int"
                                },
                                "blk": {
                                    "variable_value": "FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64",
                                    "variable_type": "FloatBlock"
                                },
                                "blk.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement"
                                }
                            }
                        ],
                        [
                            {
                                "data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "BlockManager": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self._get_data_to_aggregate": {
                                    "variable_value": "<bound method DataFrameGroupBy._get_data_to_aggregate of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x11da1d340>>",
                                    "variable_type": "method"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x11da1d340>",
                                    "variable_type": "DataFrameGroupBy"
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "data.get_numeric_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "List": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "Block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.ndarray": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_frames": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "DataFrame": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "no_result": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.mgr_locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.grouper.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11da1d850>",
                                    "variable_type": "BaseGrouper"
                                },
                                "block.values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "how": {
                                    "variable_value": "median",
                                    "variable_type": "str"
                                },
                                "min_count": {
                                    "variable_value": "-1",
                                    "variable_type": "int"
                                },
                                "alt": {
                                    "variable_value": "<function GroupBy.median.<locals>.<lambda> at 0x11d981dc0>",
                                    "variable_type": "function"
                                },
                                "deleted_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.obj": {
                                    "variable_value": "   a     b\n0  1     1\n1  1  <NA>\n2  1     2\n3  2     1\n4  2  <NA>\n5  2     2\n6  3     1\n7  3  <NA>\n8  3     2",
                                    "variable_type": "DataFrame"
                                },
                                "data.items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "get_groupby": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int"
                                },
                                "cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_frames.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ndim": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "maybe_downcast_numeric": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.is_extension": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_from_sequence": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ravel": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.make_block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_blocks.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "DataError": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "i": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "loc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "indexer": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.concatenate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "data.items.take": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.sort": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ai": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.arange": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.zeros": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask.cumsum": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "offset": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "blk": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "blk.mgr_locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                }
                            },
                            {
                                "data": {
                                    "variable_value": "BlockManager\nItems: Index(['b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=9, step=1)\nExtensionBlock: slice(0, 1, 1), 1 x 9, dtype: Int64",
                                    "variable_type": "BlockManager"
                                },
                                "BlockManager": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self._get_data_to_aggregate": {
                                    "variable_value": "<bound method DataFrameGroupBy._get_data_to_aggregate of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x11da1d340>>",
                                    "variable_type": "method"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x11da1d340>",
                                    "variable_type": "DataFrameGroupBy"
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "data.get_numeric_data": {
                                    "variable_value": "<bound method BlockManager.get_numeric_data of BlockManager\nItems: Index(['b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=9, step=1)\nExtensionBlock: slice(0, 1, 1), 1 x 9, dtype: Int64>",
                                    "variable_type": "method"
                                },
                                "agg_blocks": {
                                    "variable_value": "[FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64]",
                                    "variable_type": "list"
                                },
                                "List": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "Block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items": {
                                    "variable_value": "[array([0])]",
                                    "variable_type": "list"
                                },
                                "np.ndarray": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted_items": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "split_items": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "split_frames": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "DataFrame": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "no_result": {
                                    "variable_value": "<object object at 0x11d79ff00>",
                                    "variable_type": "object"
                                },
                                "block": {
                                    "variable_value": "ExtensionBlock: slice(0, 1, 1), 1 x 9, dtype: Int64",
                                    "variable_type": "ExtensionBlock"
                                },
                                "data.blocks": {
                                    "variable_value": "(ExtensionBlock: slice(0, 1, 1), 1 x 9, dtype: Int64,)",
                                    "variable_type": "tuple"
                                },
                                "result": {
                                    "variable_value": "array([[1.5, 1.5, 1.5]])",
                                    "variable_type": "ndarray"
                                },
                                "locs": {
                                    "variable_value": "array([0])",
                                    "variable_type": "ndarray"
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "block.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement"
                                },
                                "_": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11da1d850>",
                                    "variable_type": "BaseGrouper"
                                },
                                "block.values": {
                                    "variable_value": "<IntegerArray>\n[1, <NA>, 2, 1, <NA>, 2, 1, <NA>, 2]\nLength: 9, dtype: Int64",
                                    "variable_type": "IntegerArray"
                                },
                                "how": {
                                    "variable_value": "median",
                                    "variable_type": "str"
                                },
                                "min_count": {
                                    "variable_value": "-1",
                                    "variable_type": "int"
                                },
                                "alt": {
                                    "variable_value": "<function GroupBy.median.<locals>.<lambda> at 0x11d981dc0>",
                                    "variable_type": "function"
                                },
                                "deleted_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da18140>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "obj": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.obj": {
                                    "variable_value": "   a     b\n0  1     1\n1  1  <NA>\n2  1     2\n3  2     1\n4  2  <NA>\n5  2     2\n6  3     1\n7  3  <NA>\n8  3     2",
                                    "variable_type": "DataFrame"
                                },
                                "data.items": {
                                    "variable_value": "Index(['b'], dtype='object')",
                                    "variable_type": "Index"
                                },
                                "obj.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "get_groupby": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int"
                                },
                                "cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "result._data": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "split_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da18840>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "split_frames.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da18640>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int"
                                },
                                "result.reshape": {
                                    "variable_value": "<built-in method reshape of numpy.ndarray object at 0x11da2f030>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "maybe_downcast_numeric": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.dtype": {
                                    "variable_value": "Int64Dtype()",
                                    "variable_type": "Int64Dtype"
                                },
                                "block.is_extension": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "result.shape": {
                                    "variable_value": "(1, 3)",
                                    "variable_type": "tuple"
                                },
                                "_from_sequence": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ravel": {
                                    "variable_value": "<built-in method ravel of numpy.ndarray object at 0x11da2f030>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "block.values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "agg_block": {
                                    "variable_value": "FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64",
                                    "variable_type": "FloatBlock"
                                },
                                "block.make_block": {
                                    "variable_value": "<bound method Block.make_block of ExtensionBlock: slice(0, 1, 1), 1 x 9, dtype: Int64>",
                                    "variable_type": "method"
                                },
                                "new_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da278c0>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "agg_blocks.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da59900>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "DataError": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "i": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "loc": {
                                    "variable_value": "1",
                                    "variable_type": "int"
                                },
                                "np.array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype"
                                },
                                "_data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "indexer": {
                                    "variable_value": "array([0])",
                                    "variable_type": "ndarray"
                                },
                                "np.concatenate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_items": {
                                    "variable_value": "Index(['b'], dtype='object')",
                                    "variable_type": "Index"
                                },
                                "data.items.take": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "np.sort": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ai": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.arange": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.zeros": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask.cumsum": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "offset": {
                                    "variable_value": "1",
                                    "variable_type": "int"
                                },
                                "blk": {
                                    "variable_value": "FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64",
                                    "variable_type": "FloatBlock"
                                },
                                "blk.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement"
                                }
                            }
                        ],
                        [
                            {
                                "data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "BlockManager": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self._get_data_to_aggregate": {
                                    "variable_value": "<bound method DataFrameGroupBy._get_data_to_aggregate of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x11da1d340>>",
                                    "variable_type": "method"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x11da1d340>",
                                    "variable_type": "DataFrameGroupBy"
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "data.get_numeric_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "List": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "Block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.ndarray": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_frames": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "DataFrame": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "no_result": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.mgr_locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.grouper.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11da1d850>",
                                    "variable_type": "BaseGrouper"
                                },
                                "block.values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "how": {
                                    "variable_value": "median",
                                    "variable_type": "str"
                                },
                                "min_count": {
                                    "variable_value": "-1",
                                    "variable_type": "int"
                                },
                                "alt": {
                                    "variable_value": "<function GroupBy.median.<locals>.<lambda> at 0x11d981ca0>",
                                    "variable_type": "function"
                                },
                                "deleted_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.obj": {
                                    "variable_value": "   a     b\n0  1     1\n1  1  <NA>\n2  1     2\n3  2     1\n4  2  <NA>\n5  2     2\n6  3     1\n7  3  <NA>\n8  3     2",
                                    "variable_type": "DataFrame"
                                },
                                "data.items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "get_groupby": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int"
                                },
                                "cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_frames.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ndim": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "maybe_downcast_numeric": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.is_extension": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_from_sequence": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ravel": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.make_block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_blocks.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "DataError": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "i": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "loc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "indexer": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.concatenate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "data.items.take": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.sort": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ai": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.arange": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.zeros": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask.cumsum": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "offset": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "blk": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "blk.mgr_locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                }
                            },
                            {
                                "data": {
                                    "variable_value": "BlockManager\nItems: Index(['b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=9, step=1)\nExtensionBlock: slice(0, 1, 1), 1 x 9, dtype: Int64",
                                    "variable_type": "BlockManager"
                                },
                                "BlockManager": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self._get_data_to_aggregate": {
                                    "variable_value": "<bound method DataFrameGroupBy._get_data_to_aggregate of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x11da1d340>>",
                                    "variable_type": "method"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x11da1d340>",
                                    "variable_type": "DataFrameGroupBy"
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "data.get_numeric_data": {
                                    "variable_value": "<bound method BlockManager.get_numeric_data of BlockManager\nItems: Index(['b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=9, step=1)\nExtensionBlock: slice(0, 1, 1), 1 x 9, dtype: Int64>",
                                    "variable_type": "method"
                                },
                                "agg_blocks": {
                                    "variable_value": "[FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64]",
                                    "variable_type": "list"
                                },
                                "List": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "Block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items": {
                                    "variable_value": "[array([0])]",
                                    "variable_type": "list"
                                },
                                "np.ndarray": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted_items": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "split_items": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "split_frames": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "DataFrame": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "no_result": {
                                    "variable_value": "<object object at 0x11d79fd60>",
                                    "variable_type": "object"
                                },
                                "block": {
                                    "variable_value": "ExtensionBlock: slice(0, 1, 1), 1 x 9, dtype: Int64",
                                    "variable_type": "ExtensionBlock"
                                },
                                "data.blocks": {
                                    "variable_value": "(ExtensionBlock: slice(0, 1, 1), 1 x 9, dtype: Int64,)",
                                    "variable_type": "tuple"
                                },
                                "result": {
                                    "variable_value": "array([[1.5, 1.5, 1.5]])",
                                    "variable_type": "ndarray"
                                },
                                "locs": {
                                    "variable_value": "array([0])",
                                    "variable_type": "ndarray"
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "block.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement"
                                },
                                "_": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11da1d850>",
                                    "variable_type": "BaseGrouper"
                                },
                                "block.values": {
                                    "variable_value": "<IntegerArray>\n[1, <NA>, 2, 1, <NA>, 2, 1, <NA>, 2]\nLength: 9, dtype: Int64",
                                    "variable_type": "IntegerArray"
                                },
                                "how": {
                                    "variable_value": "median",
                                    "variable_type": "str"
                                },
                                "min_count": {
                                    "variable_value": "-1",
                                    "variable_type": "int"
                                },
                                "alt": {
                                    "variable_value": "<function GroupBy.median.<locals>.<lambda> at 0x11d981ca0>",
                                    "variable_type": "function"
                                },
                                "deleted_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da419c0>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "obj": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.obj": {
                                    "variable_value": "   a     b\n0  1     1\n1  1  <NA>\n2  1     2\n3  2     1\n4  2  <NA>\n5  2     2\n6  3     1\n7  3  <NA>\n8  3     2",
                                    "variable_type": "DataFrame"
                                },
                                "data.items": {
                                    "variable_value": "Index(['b'], dtype='object')",
                                    "variable_type": "Index"
                                },
                                "obj.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "get_groupby": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int"
                                },
                                "cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "result._data": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "split_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da1c7c0>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "split_frames.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da408c0>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int"
                                },
                                "result.reshape": {
                                    "variable_value": "<built-in method reshape of numpy.ndarray object at 0x11da235d0>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "maybe_downcast_numeric": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.dtype": {
                                    "variable_value": "Int64Dtype()",
                                    "variable_type": "Int64Dtype"
                                },
                                "block.is_extension": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "result.shape": {
                                    "variable_value": "(1, 3)",
                                    "variable_type": "tuple"
                                },
                                "_from_sequence": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ravel": {
                                    "variable_value": "<built-in method ravel of numpy.ndarray object at 0x11da235d0>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "block.values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "agg_block": {
                                    "variable_value": "FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64",
                                    "variable_type": "FloatBlock"
                                },
                                "block.make_block": {
                                    "variable_value": "<bound method Block.make_block of ExtensionBlock: slice(0, 1, 1), 1 x 9, dtype: Int64>",
                                    "variable_type": "method"
                                },
                                "new_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11d9901c0>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "agg_blocks.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da59880>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "DataError": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "i": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "loc": {
                                    "variable_value": "1",
                                    "variable_type": "int"
                                },
                                "np.array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype"
                                },
                                "_data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "indexer": {
                                    "variable_value": "array([0])",
                                    "variable_type": "ndarray"
                                },
                                "np.concatenate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_items": {
                                    "variable_value": "Index(['b'], dtype='object')",
                                    "variable_type": "Index"
                                },
                                "data.items.take": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "np.sort": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ai": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.arange": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.zeros": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask.cumsum": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "offset": {
                                    "variable_value": "1",
                                    "variable_type": "int"
                                },
                                "blk": {
                                    "variable_value": "FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64",
                                    "variable_type": "FloatBlock"
                                },
                                "blk.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement"
                                }
                            }
                        ],
                        [
                            {
                                "data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "BlockManager": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self._get_data_to_aggregate": {
                                    "variable_value": "<bound method DataFrameGroupBy._get_data_to_aggregate of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x11da1df70>>",
                                    "variable_type": "method"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x11da1df70>",
                                    "variable_type": "DataFrameGroupBy"
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "data.get_numeric_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "List": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "Block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.ndarray": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_frames": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "DataFrame": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "no_result": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.mgr_locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.grouper.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11da1dee0>",
                                    "variable_type": "BaseGrouper"
                                },
                                "block.values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "how": {
                                    "variable_value": "median",
                                    "variable_type": "str"
                                },
                                "min_count": {
                                    "variable_value": "-1",
                                    "variable_type": "int"
                                },
                                "alt": {
                                    "variable_value": "<function GroupBy.median.<locals>.<lambda> at 0x11d9814c0>",
                                    "variable_type": "function"
                                },
                                "deleted_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.obj": {
                                    "variable_value": "   a  b\n0  1  1\n1  1  2\n2  2  1\n3  2  2\n4  3  1\n5  3  2",
                                    "variable_type": "DataFrame"
                                },
                                "data.items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "get_groupby": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int"
                                },
                                "cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_frames.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ndim": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "maybe_downcast_numeric": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.is_extension": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_from_sequence": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ravel": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.make_block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_blocks.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "DataError": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "i": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "loc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "indexer": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.concatenate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "data.items.take": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.sort": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ai": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.arange": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.zeros": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask.cumsum": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "offset": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "blk": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "blk.mgr_locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                }
                            },
                            {
                                "data": {
                                    "variable_value": "BlockManager\nItems: Index(['b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=6, step=1)\nExtensionBlock: slice(0, 1, 1), 1 x 6, dtype: Int64",
                                    "variable_type": "BlockManager"
                                },
                                "BlockManager": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self._get_data_to_aggregate": {
                                    "variable_value": "<bound method DataFrameGroupBy._get_data_to_aggregate of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x11da1df70>>",
                                    "variable_type": "method"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x11da1df70>",
                                    "variable_type": "DataFrameGroupBy"
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "data.get_numeric_data": {
                                    "variable_value": "<bound method BlockManager.get_numeric_data of BlockManager\nItems: Index(['b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=6, step=1)\nExtensionBlock: slice(0, 1, 1), 1 x 6, dtype: Int64>",
                                    "variable_type": "method"
                                },
                                "agg_blocks": {
                                    "variable_value": "[FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64]",
                                    "variable_type": "list"
                                },
                                "List": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "Block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items": {
                                    "variable_value": "[array([0])]",
                                    "variable_type": "list"
                                },
                                "np.ndarray": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted_items": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "split_items": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "split_frames": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "DataFrame": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "no_result": {
                                    "variable_value": "<object object at 0x11d79ff40>",
                                    "variable_type": "object"
                                },
                                "block": {
                                    "variable_value": "ExtensionBlock: slice(0, 1, 1), 1 x 6, dtype: Int64",
                                    "variable_type": "ExtensionBlock"
                                },
                                "data.blocks": {
                                    "variable_value": "(ExtensionBlock: slice(0, 1, 1), 1 x 6, dtype: Int64,)",
                                    "variable_type": "tuple"
                                },
                                "result": {
                                    "variable_value": "array([[1.5, 1.5, 1.5]])",
                                    "variable_type": "ndarray"
                                },
                                "locs": {
                                    "variable_value": "array([0])",
                                    "variable_type": "ndarray"
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "block.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement"
                                },
                                "_": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11da1dee0>",
                                    "variable_type": "BaseGrouper"
                                },
                                "block.values": {
                                    "variable_value": "<IntegerArray>\n[1, 2, 1, 2, 1, 2]\nLength: 6, dtype: Int64",
                                    "variable_type": "IntegerArray"
                                },
                                "how": {
                                    "variable_value": "median",
                                    "variable_type": "str"
                                },
                                "min_count": {
                                    "variable_value": "-1",
                                    "variable_type": "int"
                                },
                                "alt": {
                                    "variable_value": "<function GroupBy.median.<locals>.<lambda> at 0x11d9814c0>",
                                    "variable_type": "function"
                                },
                                "deleted_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11d99eb80>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "obj": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.obj": {
                                    "variable_value": "   a  b\n0  1  1\n1  1  2\n2  2  1\n3  2  2\n4  3  1\n5  3  2",
                                    "variable_type": "DataFrame"
                                },
                                "data.items": {
                                    "variable_value": "Index(['b'], dtype='object')",
                                    "variable_type": "Index"
                                },
                                "obj.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "get_groupby": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int"
                                },
                                "cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "result._data": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "split_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11d99ec80>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "split_frames.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da48180>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int"
                                },
                                "result.reshape": {
                                    "variable_value": "<built-in method reshape of numpy.ndarray object at 0x11d9981c0>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "maybe_downcast_numeric": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.dtype": {
                                    "variable_value": "Int64Dtype()",
                                    "variable_type": "Int64Dtype"
                                },
                                "block.is_extension": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "result.shape": {
                                    "variable_value": "(1, 3)",
                                    "variable_type": "tuple"
                                },
                                "_from_sequence": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ravel": {
                                    "variable_value": "<built-in method ravel of numpy.ndarray object at 0x11d9981c0>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "block.values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "agg_block": {
                                    "variable_value": "FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64",
                                    "variable_type": "FloatBlock"
                                },
                                "block.make_block": {
                                    "variable_value": "<bound method Block.make_block of ExtensionBlock: slice(0, 1, 1), 1 x 6, dtype: Int64>",
                                    "variable_type": "method"
                                },
                                "new_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da27680>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "agg_blocks.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da48500>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "DataError": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "i": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "loc": {
                                    "variable_value": "1",
                                    "variable_type": "int"
                                },
                                "np.array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype"
                                },
                                "_data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "indexer": {
                                    "variable_value": "array([0])",
                                    "variable_type": "ndarray"
                                },
                                "np.concatenate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_items": {
                                    "variable_value": "Index(['b'], dtype='object')",
                                    "variable_type": "Index"
                                },
                                "data.items.take": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "np.sort": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ai": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.arange": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.zeros": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask.cumsum": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "offset": {
                                    "variable_value": "1",
                                    "variable_type": "int"
                                },
                                "blk": {
                                    "variable_value": "FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64",
                                    "variable_type": "FloatBlock"
                                },
                                "blk.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement"
                                }
                            }
                        ],
                        [
                            {
                                "data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "BlockManager": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self._get_data_to_aggregate": {
                                    "variable_value": "<bound method DataFrameGroupBy._get_data_to_aggregate of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x11da1df70>>",
                                    "variable_type": "method"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x11da1df70>",
                                    "variable_type": "DataFrameGroupBy"
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "data.get_numeric_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "List": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "Block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.ndarray": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_frames": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "DataFrame": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "no_result": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.mgr_locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.grouper.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11da1dee0>",
                                    "variable_type": "BaseGrouper"
                                },
                                "block.values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "how": {
                                    "variable_value": "median",
                                    "variable_type": "str"
                                },
                                "min_count": {
                                    "variable_value": "-1",
                                    "variable_type": "int"
                                },
                                "alt": {
                                    "variable_value": "<function GroupBy.median.<locals>.<lambda> at 0x11d981e50>",
                                    "variable_type": "function"
                                },
                                "deleted_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.obj": {
                                    "variable_value": "   a  b\n0  1  1\n1  1  2\n2  2  1\n3  2  2\n4  3  1\n5  3  2",
                                    "variable_type": "DataFrame"
                                },
                                "data.items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "get_groupby": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int"
                                },
                                "cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_frames.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ndim": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "maybe_downcast_numeric": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.is_extension": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_from_sequence": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ravel": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.make_block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_blocks.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "DataError": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "i": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "loc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "indexer": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.concatenate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "data.items.take": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.sort": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ai": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.arange": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.zeros": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask.cumsum": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "offset": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "blk": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "blk.mgr_locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                }
                            },
                            {
                                "data": {
                                    "variable_value": "BlockManager\nItems: Index(['b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=6, step=1)\nExtensionBlock: slice(0, 1, 1), 1 x 6, dtype: Int64",
                                    "variable_type": "BlockManager"
                                },
                                "BlockManager": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self._get_data_to_aggregate": {
                                    "variable_value": "<bound method DataFrameGroupBy._get_data_to_aggregate of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x11da1df70>>",
                                    "variable_type": "method"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x11da1df70>",
                                    "variable_type": "DataFrameGroupBy"
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "data.get_numeric_data": {
                                    "variable_value": "<bound method BlockManager.get_numeric_data of BlockManager\nItems: Index(['b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=6, step=1)\nExtensionBlock: slice(0, 1, 1), 1 x 6, dtype: Int64>",
                                    "variable_type": "method"
                                },
                                "agg_blocks": {
                                    "variable_value": "[FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64]",
                                    "variable_type": "list"
                                },
                                "List": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "Block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items": {
                                    "variable_value": "[array([0])]",
                                    "variable_type": "list"
                                },
                                "np.ndarray": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted_items": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "split_items": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "split_frames": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "DataFrame": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "no_result": {
                                    "variable_value": "<object object at 0x11d79f490>",
                                    "variable_type": "object"
                                },
                                "block": {
                                    "variable_value": "ExtensionBlock: slice(0, 1, 1), 1 x 6, dtype: Int64",
                                    "variable_type": "ExtensionBlock"
                                },
                                "data.blocks": {
                                    "variable_value": "(ExtensionBlock: slice(0, 1, 1), 1 x 6, dtype: Int64,)",
                                    "variable_type": "tuple"
                                },
                                "result": {
                                    "variable_value": "array([[1.5, 1.5, 1.5]])",
                                    "variable_type": "ndarray"
                                },
                                "locs": {
                                    "variable_value": "array([0])",
                                    "variable_type": "ndarray"
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "block.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement"
                                },
                                "_": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11da1dee0>",
                                    "variable_type": "BaseGrouper"
                                },
                                "block.values": {
                                    "variable_value": "<IntegerArray>\n[1, 2, 1, 2, 1, 2]\nLength: 6, dtype: Int64",
                                    "variable_type": "IntegerArray"
                                },
                                "how": {
                                    "variable_value": "median",
                                    "variable_type": "str"
                                },
                                "min_count": {
                                    "variable_value": "-1",
                                    "variable_type": "int"
                                },
                                "alt": {
                                    "variable_value": "<function GroupBy.median.<locals>.<lambda> at 0x11d981e50>",
                                    "variable_type": "function"
                                },
                                "deleted_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11d99e100>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "obj": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.obj": {
                                    "variable_value": "   a  b\n0  1  1\n1  1  2\n2  2  1\n3  2  2\n4  3  1\n5  3  2",
                                    "variable_type": "DataFrame"
                                },
                                "data.items": {
                                    "variable_value": "Index(['b'], dtype='object')",
                                    "variable_type": "Index"
                                },
                                "obj.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "get_groupby": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int"
                                },
                                "cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "result._data": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "split_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da44b40>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "split_frames.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da48540>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int"
                                },
                                "result.reshape": {
                                    "variable_value": "<built-in method reshape of numpy.ndarray object at 0x11da23cb0>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "maybe_downcast_numeric": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.dtype": {
                                    "variable_value": "Int64Dtype()",
                                    "variable_type": "Int64Dtype"
                                },
                                "block.is_extension": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "result.shape": {
                                    "variable_value": "(1, 3)",
                                    "variable_type": "tuple"
                                },
                                "_from_sequence": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ravel": {
                                    "variable_value": "<built-in method ravel of numpy.ndarray object at 0x11da23cb0>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "block.values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "agg_block": {
                                    "variable_value": "FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64",
                                    "variable_type": "FloatBlock"
                                },
                                "block.make_block": {
                                    "variable_value": "<bound method Block.make_block of ExtensionBlock: slice(0, 1, 1), 1 x 6, dtype: Int64>",
                                    "variable_type": "method"
                                },
                                "new_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11d99b900>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "agg_blocks.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da4d780>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "DataError": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "i": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "loc": {
                                    "variable_value": "1",
                                    "variable_type": "int"
                                },
                                "np.array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype"
                                },
                                "_data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "indexer": {
                                    "variable_value": "array([0])",
                                    "variable_type": "ndarray"
                                },
                                "np.concatenate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_items": {
                                    "variable_value": "Index(['b'], dtype='object')",
                                    "variable_type": "Index"
                                },
                                "data.items.take": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "np.sort": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ai": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.arange": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.zeros": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask.cumsum": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "offset": {
                                    "variable_value": "1",
                                    "variable_type": "int"
                                },
                                "blk": {
                                    "variable_value": "FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64",
                                    "variable_type": "FloatBlock"
                                },
                                "blk.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement"
                                }
                            }
                        ],
                        [
                            {
                                "data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "BlockManager": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self._get_data_to_aggregate": {
                                    "variable_value": "<bound method DataFrameGroupBy._get_data_to_aggregate of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x11d9a1e50>>",
                                    "variable_type": "method"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x11d9a1e50>",
                                    "variable_type": "DataFrameGroupBy"
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "data.get_numeric_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "List": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "Block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.ndarray": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_frames": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "DataFrame": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "no_result": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.mgr_locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.grouper.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11d9a19a0>",
                                    "variable_type": "BaseGrouper"
                                },
                                "block.values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "how": {
                                    "variable_value": "var",
                                    "variable_type": "str"
                                },
                                "min_count": {
                                    "variable_value": "-1",
                                    "variable_type": "int"
                                },
                                "alt": {
                                    "variable_value": "<function GroupBy.var.<locals>.<lambda> at 0x11da243a0>",
                                    "variable_type": "function"
                                },
                                "deleted_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.obj": {
                                    "variable_value": "   a     b\n0  1     1\n1  1  <NA>\n2  1     2\n3  2     1\n4  2  <NA>\n5  2     2\n6  3     1\n7  3  <NA>\n8  3     2",
                                    "variable_type": "DataFrame"
                                },
                                "data.items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "get_groupby": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int"
                                },
                                "cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_frames.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ndim": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "maybe_downcast_numeric": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.is_extension": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_from_sequence": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ravel": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.make_block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_blocks.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "DataError": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "i": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "loc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "indexer": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.concatenate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "data.items.take": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.sort": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ai": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.arange": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.zeros": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask.cumsum": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "offset": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "blk": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "blk.mgr_locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                }
                            },
                            {
                                "data": {
                                    "variable_value": "BlockManager\nItems: Index(['b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=9, step=1)\nExtensionBlock: slice(0, 1, 1), 1 x 9, dtype: Int64",
                                    "variable_type": "BlockManager"
                                },
                                "BlockManager": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self._get_data_to_aggregate": {
                                    "variable_value": "<bound method DataFrameGroupBy._get_data_to_aggregate of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x11d9a1e50>>",
                                    "variable_type": "method"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x11d9a1e50>",
                                    "variable_type": "DataFrameGroupBy"
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "data.get_numeric_data": {
                                    "variable_value": "<bound method BlockManager.get_numeric_data of BlockManager\nItems: Index(['b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=9, step=1)\nExtensionBlock: slice(0, 1, 1), 1 x 9, dtype: Int64>",
                                    "variable_type": "method"
                                },
                                "agg_blocks": {
                                    "variable_value": "[FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64]",
                                    "variable_type": "list"
                                },
                                "List": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "Block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items": {
                                    "variable_value": "[array([0])]",
                                    "variable_type": "list"
                                },
                                "np.ndarray": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted_items": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "split_items": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "split_frames": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "DataFrame": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "no_result": {
                                    "variable_value": "<object object at 0x11d79ff70>",
                                    "variable_type": "object"
                                },
                                "block": {
                                    "variable_value": "ExtensionBlock: slice(0, 1, 1), 1 x 9, dtype: Int64",
                                    "variable_type": "ExtensionBlock"
                                },
                                "data.blocks": {
                                    "variable_value": "(ExtensionBlock: slice(0, 1, 1), 1 x 9, dtype: Int64,)",
                                    "variable_type": "tuple"
                                },
                                "result": {
                                    "variable_value": "array([[0.5, 0.5, 0.5]])",
                                    "variable_type": "ndarray"
                                },
                                "locs": {
                                    "variable_value": "array([0])",
                                    "variable_type": "ndarray"
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "block.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement"
                                },
                                "_": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11d9a19a0>",
                                    "variable_type": "BaseGrouper"
                                },
                                "block.values": {
                                    "variable_value": "<IntegerArray>\n[1, <NA>, 2, 1, <NA>, 2, 1, <NA>, 2]\nLength: 9, dtype: Int64",
                                    "variable_type": "IntegerArray"
                                },
                                "how": {
                                    "variable_value": "var",
                                    "variable_type": "str"
                                },
                                "min_count": {
                                    "variable_value": "-1",
                                    "variable_type": "int"
                                },
                                "alt": {
                                    "variable_value": "<function GroupBy.var.<locals>.<lambda> at 0x11da243a0>",
                                    "variable_type": "function"
                                },
                                "deleted_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da4bf40>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "obj": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.obj": {
                                    "variable_value": "   a     b\n0  1     1\n1  1  <NA>\n2  1     2\n3  2     1\n4  2  <NA>\n5  2     2\n6  3     1\n7  3  <NA>\n8  3     2",
                                    "variable_type": "DataFrame"
                                },
                                "data.items": {
                                    "variable_value": "Index(['b'], dtype='object')",
                                    "variable_type": "Index"
                                },
                                "obj.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "get_groupby": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int"
                                },
                                "cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "result._data": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "split_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da4bd40>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "split_frames.append": {
                                    "variable_value": "<built-in method append of list object at 0x11d995600>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int"
                                },
                                "result.reshape": {
                                    "variable_value": "<built-in method reshape of numpy.ndarray object at 0x11d9988f0>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "maybe_downcast_numeric": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.dtype": {
                                    "variable_value": "Int64Dtype()",
                                    "variable_type": "Int64Dtype"
                                },
                                "block.is_extension": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "result.shape": {
                                    "variable_value": "(1, 3)",
                                    "variable_type": "tuple"
                                },
                                "_from_sequence": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ravel": {
                                    "variable_value": "<built-in method ravel of numpy.ndarray object at 0x11d9988f0>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "block.values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "agg_block": {
                                    "variable_value": "FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64",
                                    "variable_type": "FloatBlock"
                                },
                                "block.make_block": {
                                    "variable_value": "<bound method Block.make_block of ExtensionBlock: slice(0, 1, 1), 1 x 9, dtype: Int64>",
                                    "variable_type": "method"
                                },
                                "new_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da3f2c0>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "agg_blocks.append": {
                                    "variable_value": "<built-in method append of list object at 0x11d995780>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "DataError": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "i": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "loc": {
                                    "variable_value": "1",
                                    "variable_type": "int"
                                },
                                "np.array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype"
                                },
                                "_data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "indexer": {
                                    "variable_value": "array([0])",
                                    "variable_type": "ndarray"
                                },
                                "np.concatenate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_items": {
                                    "variable_value": "Index(['b'], dtype='object')",
                                    "variable_type": "Index"
                                },
                                "data.items.take": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "np.sort": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ai": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.arange": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.zeros": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask.cumsum": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "offset": {
                                    "variable_value": "1",
                                    "variable_type": "int"
                                },
                                "blk": {
                                    "variable_value": "FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64",
                                    "variable_type": "FloatBlock"
                                },
                                "blk.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement"
                                }
                            }
                        ],
                        [
                            {
                                "data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "BlockManager": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self._get_data_to_aggregate": {
                                    "variable_value": "<bound method DataFrameGroupBy._get_data_to_aggregate of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x11d9a1e50>>",
                                    "variable_type": "method"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x11d9a1e50>",
                                    "variable_type": "DataFrameGroupBy"
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "data.get_numeric_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "List": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "Block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.ndarray": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_frames": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "DataFrame": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "no_result": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.mgr_locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.grouper.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11d9a19a0>",
                                    "variable_type": "BaseGrouper"
                                },
                                "block.values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "how": {
                                    "variable_value": "var",
                                    "variable_type": "str"
                                },
                                "min_count": {
                                    "variable_value": "-1",
                                    "variable_type": "int"
                                },
                                "alt": {
                                    "variable_value": "<function GroupBy.var.<locals>.<lambda> at 0x11da24160>",
                                    "variable_type": "function"
                                },
                                "deleted_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.obj": {
                                    "variable_value": "   a     b\n0  1     1\n1  1  <NA>\n2  1     2\n3  2     1\n4  2  <NA>\n5  2     2\n6  3     1\n7  3  <NA>\n8  3     2",
                                    "variable_type": "DataFrame"
                                },
                                "data.items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "get_groupby": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int"
                                },
                                "cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_frames.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ndim": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "maybe_downcast_numeric": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.is_extension": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_from_sequence": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ravel": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.make_block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_blocks.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "DataError": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "i": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "loc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "indexer": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.concatenate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "data.items.take": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.sort": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ai": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.arange": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.zeros": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask.cumsum": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "offset": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "blk": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "blk.mgr_locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                }
                            },
                            {
                                "data": {
                                    "variable_value": "BlockManager\nItems: Index(['b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=9, step=1)\nExtensionBlock: slice(0, 1, 1), 1 x 9, dtype: Int64",
                                    "variable_type": "BlockManager"
                                },
                                "BlockManager": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self._get_data_to_aggregate": {
                                    "variable_value": "<bound method DataFrameGroupBy._get_data_to_aggregate of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x11d9a1e50>>",
                                    "variable_type": "method"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x11d9a1e50>",
                                    "variable_type": "DataFrameGroupBy"
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "data.get_numeric_data": {
                                    "variable_value": "<bound method BlockManager.get_numeric_data of BlockManager\nItems: Index(['b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=9, step=1)\nExtensionBlock: slice(0, 1, 1), 1 x 9, dtype: Int64>",
                                    "variable_type": "method"
                                },
                                "agg_blocks": {
                                    "variable_value": "[FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64]",
                                    "variable_type": "list"
                                },
                                "List": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "Block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items": {
                                    "variable_value": "[array([0])]",
                                    "variable_type": "list"
                                },
                                "np.ndarray": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted_items": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "split_items": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "split_frames": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "DataFrame": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "no_result": {
                                    "variable_value": "<object object at 0x11d79ff20>",
                                    "variable_type": "object"
                                },
                                "block": {
                                    "variable_value": "ExtensionBlock: slice(0, 1, 1), 1 x 9, dtype: Int64",
                                    "variable_type": "ExtensionBlock"
                                },
                                "data.blocks": {
                                    "variable_value": "(ExtensionBlock: slice(0, 1, 1), 1 x 9, dtype: Int64,)",
                                    "variable_type": "tuple"
                                },
                                "result": {
                                    "variable_value": "array([[0.5, 0.5, 0.5]])",
                                    "variable_type": "ndarray"
                                },
                                "locs": {
                                    "variable_value": "array([0])",
                                    "variable_type": "ndarray"
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "block.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement"
                                },
                                "_": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11d9a19a0>",
                                    "variable_type": "BaseGrouper"
                                },
                                "block.values": {
                                    "variable_value": "<IntegerArray>\n[1, <NA>, 2, 1, <NA>, 2, 1, <NA>, 2]\nLength: 9, dtype: Int64",
                                    "variable_type": "IntegerArray"
                                },
                                "how": {
                                    "variable_value": "var",
                                    "variable_type": "str"
                                },
                                "min_count": {
                                    "variable_value": "-1",
                                    "variable_type": "int"
                                },
                                "alt": {
                                    "variable_value": "<function GroupBy.var.<locals>.<lambda> at 0x11da24160>",
                                    "variable_type": "function"
                                },
                                "deleted_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da4bb80>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "obj": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.obj": {
                                    "variable_value": "   a     b\n0  1     1\n1  1  <NA>\n2  1     2\n3  2     1\n4  2  <NA>\n5  2     2\n6  3     1\n7  3  <NA>\n8  3     2",
                                    "variable_type": "DataFrame"
                                },
                                "data.items": {
                                    "variable_value": "Index(['b'], dtype='object')",
                                    "variable_type": "Index"
                                },
                                "obj.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "get_groupby": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int"
                                },
                                "cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "result._data": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "split_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11d9ab300>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "split_frames.append": {
                                    "variable_value": "<built-in method append of list object at 0x11d9954c0>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int"
                                },
                                "result.reshape": {
                                    "variable_value": "<built-in method reshape of numpy.ndarray object at 0x11da2f8a0>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "maybe_downcast_numeric": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.dtype": {
                                    "variable_value": "Int64Dtype()",
                                    "variable_type": "Int64Dtype"
                                },
                                "block.is_extension": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "result.shape": {
                                    "variable_value": "(1, 3)",
                                    "variable_type": "tuple"
                                },
                                "_from_sequence": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ravel": {
                                    "variable_value": "<built-in method ravel of numpy.ndarray object at 0x11da2f8a0>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "block.values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "agg_block": {
                                    "variable_value": "FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64",
                                    "variable_type": "FloatBlock"
                                },
                                "block.make_block": {
                                    "variable_value": "<bound method Block.make_block of ExtensionBlock: slice(0, 1, 1), 1 x 9, dtype: Int64>",
                                    "variable_type": "method"
                                },
                                "new_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11d9b16c0>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "agg_blocks.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da18680>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "DataError": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "i": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "loc": {
                                    "variable_value": "1",
                                    "variable_type": "int"
                                },
                                "np.array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype"
                                },
                                "_data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "indexer": {
                                    "variable_value": "array([0])",
                                    "variable_type": "ndarray"
                                },
                                "np.concatenate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_items": {
                                    "variable_value": "Index(['b'], dtype='object')",
                                    "variable_type": "Index"
                                },
                                "data.items.take": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "np.sort": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ai": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.arange": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.zeros": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask.cumsum": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "offset": {
                                    "variable_value": "1",
                                    "variable_type": "int"
                                },
                                "blk": {
                                    "variable_value": "FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64",
                                    "variable_type": "FloatBlock"
                                },
                                "blk.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement"
                                }
                            }
                        ],
                        [
                            {
                                "data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "BlockManager": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self._get_data_to_aggregate": {
                                    "variable_value": "<bound method DataFrameGroupBy._get_data_to_aggregate of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x11d9a1610>>",
                                    "variable_type": "method"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x11d9a1610>",
                                    "variable_type": "DataFrameGroupBy"
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "data.get_numeric_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "List": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "Block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.ndarray": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_frames": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "DataFrame": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "no_result": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.mgr_locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.grouper.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11d9a16a0>",
                                    "variable_type": "BaseGrouper"
                                },
                                "block.values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "how": {
                                    "variable_value": "var",
                                    "variable_type": "str"
                                },
                                "min_count": {
                                    "variable_value": "-1",
                                    "variable_type": "int"
                                },
                                "alt": {
                                    "variable_value": "<function GroupBy.var.<locals>.<lambda> at 0x11da249d0>",
                                    "variable_type": "function"
                                },
                                "deleted_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.obj": {
                                    "variable_value": "   a  b\n0  1  1\n1  1  2\n2  2  1\n3  2  2\n4  3  1\n5  3  2",
                                    "variable_type": "DataFrame"
                                },
                                "data.items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "get_groupby": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int"
                                },
                                "cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_frames.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ndim": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "maybe_downcast_numeric": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.is_extension": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_from_sequence": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ravel": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.make_block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_blocks.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "DataError": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "i": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "loc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "indexer": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.concatenate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "data.items.take": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.sort": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ai": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.arange": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.zeros": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask.cumsum": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "offset": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "blk": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "blk.mgr_locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                }
                            },
                            {
                                "data": {
                                    "variable_value": "BlockManager\nItems: Index(['b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=6, step=1)\nExtensionBlock: slice(0, 1, 1), 1 x 6, dtype: Int64",
                                    "variable_type": "BlockManager"
                                },
                                "BlockManager": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self._get_data_to_aggregate": {
                                    "variable_value": "<bound method DataFrameGroupBy._get_data_to_aggregate of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x11d9a1610>>",
                                    "variable_type": "method"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x11d9a1610>",
                                    "variable_type": "DataFrameGroupBy"
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "data.get_numeric_data": {
                                    "variable_value": "<bound method BlockManager.get_numeric_data of BlockManager\nItems: Index(['b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=6, step=1)\nExtensionBlock: slice(0, 1, 1), 1 x 6, dtype: Int64>",
                                    "variable_type": "method"
                                },
                                "agg_blocks": {
                                    "variable_value": "[FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64]",
                                    "variable_type": "list"
                                },
                                "List": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "Block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items": {
                                    "variable_value": "[array([0])]",
                                    "variable_type": "list"
                                },
                                "np.ndarray": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted_items": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "split_items": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "split_frames": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "DataFrame": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "no_result": {
                                    "variable_value": "<object object at 0x11d79f240>",
                                    "variable_type": "object"
                                },
                                "block": {
                                    "variable_value": "ExtensionBlock: slice(0, 1, 1), 1 x 6, dtype: Int64",
                                    "variable_type": "ExtensionBlock"
                                },
                                "data.blocks": {
                                    "variable_value": "(ExtensionBlock: slice(0, 1, 1), 1 x 6, dtype: Int64,)",
                                    "variable_type": "tuple"
                                },
                                "result": {
                                    "variable_value": "array([[0.5, 0.5, 0.5]])",
                                    "variable_type": "ndarray"
                                },
                                "locs": {
                                    "variable_value": "array([0])",
                                    "variable_type": "ndarray"
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "block.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement"
                                },
                                "_": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11d9a16a0>",
                                    "variable_type": "BaseGrouper"
                                },
                                "block.values": {
                                    "variable_value": "<IntegerArray>\n[1, 2, 1, 2, 1, 2]\nLength: 6, dtype: Int64",
                                    "variable_type": "IntegerArray"
                                },
                                "how": {
                                    "variable_value": "var",
                                    "variable_type": "str"
                                },
                                "min_count": {
                                    "variable_value": "-1",
                                    "variable_type": "int"
                                },
                                "alt": {
                                    "variable_value": "<function GroupBy.var.<locals>.<lambda> at 0x11da249d0>",
                                    "variable_type": "function"
                                },
                                "deleted_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da43480>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "obj": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.obj": {
                                    "variable_value": "   a  b\n0  1  1\n1  1  2\n2  2  1\n3  2  2\n4  3  1\n5  3  2",
                                    "variable_type": "DataFrame"
                                },
                                "data.items": {
                                    "variable_value": "Index(['b'], dtype='object')",
                                    "variable_type": "Index"
                                },
                                "obj.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "get_groupby": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int"
                                },
                                "cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "result._data": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "split_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da432c0>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "split_frames.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da622c0>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int"
                                },
                                "result.reshape": {
                                    "variable_value": "<built-in method reshape of numpy.ndarray object at 0x11da2f670>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "maybe_downcast_numeric": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.dtype": {
                                    "variable_value": "Int64Dtype()",
                                    "variable_type": "Int64Dtype"
                                },
                                "block.is_extension": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "result.shape": {
                                    "variable_value": "(1, 3)",
                                    "variable_type": "tuple"
                                },
                                "_from_sequence": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ravel": {
                                    "variable_value": "<built-in method ravel of numpy.ndarray object at 0x11da2f670>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "block.values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "agg_block": {
                                    "variable_value": "FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64",
                                    "variable_type": "FloatBlock"
                                },
                                "block.make_block": {
                                    "variable_value": "<bound method Block.make_block of ExtensionBlock: slice(0, 1, 1), 1 x 6, dtype: Int64>",
                                    "variable_type": "method"
                                },
                                "new_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da43e80>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "agg_blocks.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da62780>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "DataError": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "i": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "loc": {
                                    "variable_value": "1",
                                    "variable_type": "int"
                                },
                                "np.array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype"
                                },
                                "_data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "indexer": {
                                    "variable_value": "array([0])",
                                    "variable_type": "ndarray"
                                },
                                "np.concatenate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_items": {
                                    "variable_value": "Index(['b'], dtype='object')",
                                    "variable_type": "Index"
                                },
                                "data.items.take": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "np.sort": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ai": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.arange": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.zeros": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask.cumsum": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "offset": {
                                    "variable_value": "1",
                                    "variable_type": "int"
                                },
                                "blk": {
                                    "variable_value": "FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64",
                                    "variable_type": "FloatBlock"
                                },
                                "blk.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement"
                                }
                            }
                        ],
                        [
                            {
                                "data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "BlockManager": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self._get_data_to_aggregate": {
                                    "variable_value": "<bound method DataFrameGroupBy._get_data_to_aggregate of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x11d9a1610>>",
                                    "variable_type": "method"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x11d9a1610>",
                                    "variable_type": "DataFrameGroupBy"
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "data.get_numeric_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "List": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "Block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.ndarray": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_frames": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "DataFrame": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "no_result": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.mgr_locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.grouper.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11d9a16a0>",
                                    "variable_type": "BaseGrouper"
                                },
                                "block.values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "how": {
                                    "variable_value": "var",
                                    "variable_type": "str"
                                },
                                "min_count": {
                                    "variable_value": "-1",
                                    "variable_type": "int"
                                },
                                "alt": {
                                    "variable_value": "<function GroupBy.var.<locals>.<lambda> at 0x11da24040>",
                                    "variable_type": "function"
                                },
                                "deleted_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.obj": {
                                    "variable_value": "   a  b\n0  1  1\n1  1  2\n2  2  1\n3  2  2\n4  3  1\n5  3  2",
                                    "variable_type": "DataFrame"
                                },
                                "data.items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "get_groupby": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int"
                                },
                                "cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "split_frames.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ndim": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.reshape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "maybe_downcast_numeric": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.is_extension": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_from_sequence": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ravel": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.make_block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_blocks.append": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "DataError": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "i": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "loc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "indexer": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.concatenate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_items": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "data.items.take": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.sort": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ai": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.arange": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.zeros": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask.cumsum": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "offset": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "blk": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "blk.mgr_locs": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                }
                            },
                            {
                                "data": {
                                    "variable_value": "BlockManager\nItems: Index(['b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=6, step=1)\nExtensionBlock: slice(0, 1, 1), 1 x 6, dtype: Int64",
                                    "variable_type": "BlockManager"
                                },
                                "BlockManager": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self._get_data_to_aggregate": {
                                    "variable_value": "<bound method DataFrameGroupBy._get_data_to_aggregate of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x11d9a1610>>",
                                    "variable_type": "method"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x11d9a1610>",
                                    "variable_type": "DataFrameGroupBy"
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "data.get_numeric_data": {
                                    "variable_value": "<bound method BlockManager.get_numeric_data of BlockManager\nItems: Index(['b'], dtype='object')\nAxis 1: RangeIndex(start=0, stop=6, step=1)\nExtensionBlock: slice(0, 1, 1), 1 x 6, dtype: Int64>",
                                    "variable_type": "method"
                                },
                                "agg_blocks": {
                                    "variable_value": "[FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64]",
                                    "variable_type": "list"
                                },
                                "List": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "Block": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "new_items": {
                                    "variable_value": "[array([0])]",
                                    "variable_type": "list"
                                },
                                "np.ndarray": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted_items": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "split_items": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "split_frames": {
                                    "variable_value": "[]",
                                    "variable_type": "list"
                                },
                                "DataFrame": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "no_result": {
                                    "variable_value": "<object object at 0x11d79fd80>",
                                    "variable_type": "object"
                                },
                                "block": {
                                    "variable_value": "ExtensionBlock: slice(0, 1, 1), 1 x 6, dtype: Int64",
                                    "variable_type": "ExtensionBlock"
                                },
                                "data.blocks": {
                                    "variable_value": "(ExtensionBlock: slice(0, 1, 1), 1 x 6, dtype: Int64,)",
                                    "variable_type": "tuple"
                                },
                                "result": {
                                    "variable_value": "array([[0.5, 0.5, 0.5]])",
                                    "variable_type": "ndarray"
                                },
                                "locs": {
                                    "variable_value": "array([0])",
                                    "variable_type": "ndarray"
                                },
                                "block.mgr_locs.as_array": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "block.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement"
                                },
                                "_": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "self.grouper": {
                                    "variable_value": "<pandas.core.groupby.ops.BaseGrouper object at 0x11d9a16a0>",
                                    "variable_type": "BaseGrouper"
                                },
                                "block.values": {
                                    "variable_value": "<IntegerArray>\n[1, 2, 1, 2, 1, 2]\nLength: 6, dtype: Int64",
                                    "variable_type": "IntegerArray"
                                },
                                "how": {
                                    "variable_value": "var",
                                    "variable_type": "str"
                                },
                                "min_count": {
                                    "variable_value": "-1",
                                    "variable_type": "int"
                                },
                                "alt": {
                                    "variable_value": "<function GroupBy.var.<locals>.<lambda> at 0x11da24040>",
                                    "variable_type": "function"
                                },
                                "deleted_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da436c0>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "obj": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.obj": {
                                    "variable_value": "   a  b\n0  1  1\n1  1  2\n2  2  1\n3  2  2\n4  3  1\n5  3  2",
                                    "variable_type": "DataFrame"
                                },
                                "data.items": {
                                    "variable_value": "Index(['b'], dtype='object')",
                                    "variable_type": "Index"
                                },
                                "obj.shape": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "obj.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "get_groupby": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "s.aggregate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "x": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "self.axis": {
                                    "variable_value": "0",
                                    "variable_type": "int"
                                },
                                "cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result._data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "result._data": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "split_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da68380>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "split_frames.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da4db40>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "values": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int"
                                },
                                "result.reshape": {
                                    "variable_value": "<built-in method reshape of numpy.ndarray object at 0x11d996440>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "maybe_downcast_numeric": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "block.dtype": {
                                    "variable_value": "Int64Dtype()",
                                    "variable_type": "Int64Dtype"
                                },
                                "block.is_extension": {
                                    "variable_value": "True",
                                    "variable_type": "bool"
                                },
                                "result.shape": {
                                    "variable_value": "(1, 3)",
                                    "variable_type": "tuple"
                                },
                                "_from_sequence": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.ravel": {
                                    "variable_value": "<built-in method ravel of numpy.ndarray object at 0x11d996440>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "block.values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "agg_block": {
                                    "variable_value": "FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64",
                                    "variable_type": "FloatBlock"
                                },
                                "block.make_block": {
                                    "variable_value": "<bound method Block.make_block of ExtensionBlock: slice(0, 1, 1), 1 x 6, dtype: Int64>",
                                    "variable_type": "method"
                                },
                                "new_items.append": {
                                    "variable_value": "<built-in method append of list object at 0x11d99cc40>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "agg_blocks.append": {
                                    "variable_value": "<built-in method append of list object at 0x11da1c080>",
                                    "variable_type": "builtin_function_or_method"
                                },
                                "DataError": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "i": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "loc": {
                                    "variable_value": "1",
                                    "variable_type": "int"
                                },
                                "np.array": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "locs.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype"
                                },
                                "_data.blocks": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "_data": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "result.iloc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "indexer": {
                                    "variable_value": "array([0])",
                                    "variable_type": "ndarray"
                                },
                                "np.concatenate": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "agg_items": {
                                    "variable_value": "Index(['b'], dtype='object')",
                                    "variable_type": "Index"
                                },
                                "data.items.take": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType"
                                },
                                "np.sort": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "deleted": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "ai": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.arange": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "np.zeros": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "mask.cumsum": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "offset": {
                                    "variable_value": "1",
                                    "variable_type": "int"
                                },
                                "blk": {
                                    "variable_value": "FloatBlock: slice(0, 1, 1), 1 x 3, dtype: float64",
                                    "variable_type": "FloatBlock"
                                },
                                "blk.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement"
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def generate_property(name: str, klass: Type[FrameOrSeries]):\n    \"\"\"\n    Create a property for a GroupBy subclass to dispatch to DataFrame/Series.\n\n    Parameters\n    ----------\n    name : str\n    klass : {DataFrame, Series}\n\n    Returns\n    -------\n    property\n    \"\"\"\n\n    def prop(self):\n        return self._make_wrapper(name)\n\n    parent_method = getattr(klass, name)\n    prop.__doc__ = parent_method.__doc__ or \"\"\n    prop.__name__ = name\n    return property(prop)",
                "def pin_whitelisted_properties(klass: Type[FrameOrSeries], whitelist: FrozenSet[str]):\n    \"\"\"\n    Create GroupBy member defs for DataFrame/Series names in a whitelist.\n\n    Parameters\n    ----------\n    klass : DataFrame or Series class\n        class where members are defined.\n    whitelist : frozenset[str]\n        Set of names of klass methods to be constructed\n\n    Returns\n    -------\n    class decorator\n\n    Notes\n    -----\n    Since we don't want to override methods explicitly defined in the\n    base class, any such name is skipped.\n    \"\"\"\n\n    def pinner(cls):\n        for name in whitelist:\n            if hasattr(cls, name):\n                # don't override anything that was explicitly defined\n                #  in the base class\n                continue\n\n            prop = generate_property(name, klass)\n            setattr(cls, name, prop)\n\n        return cls\n\n    return pinner",
                "def _recast_datetimelike_result(result: DataFrame) -> DataFrame:\n    \"\"\"\n    If we have date/time like in the original, then coerce dates\n    as we are stacking can easily have object dtypes here.\n\n    Parameters\n    ----------\n    result : DataFrame\n\n    Returns\n    -------\n    DataFrame\n\n    Notes\n    -----\n    - Assumes Groupby._selected_obj has ndim==2 and at least one\n    datetimelike column\n    \"\"\"\n    result = result.copy()\n\n    obj_cols = [\n        idx\n        for idx in range(len(result.columns))\n        if is_object_dtype(result.dtypes.iloc[idx])\n    ]\n\n    # See GH#26285\n    for n in obj_cols:\n        converted = maybe_convert_objects(\n            result.iloc[:, n].values, convert_numeric=False\n        )\n\n        result.iloc[:, n] = converted\n    return result",
                "def prop(self):\n    return self._make_wrapper(name)",
                "def pinner(cls):\n    for name in whitelist:\n        if hasattr(cls, name):\n            # don't override anything that was explicitly defined\n            #  in the base class\n            continue\n\n        prop = generate_property(name, klass)\n        setattr(cls, name, prop)\n\n    return cls",
                "def _iterate_slices(self) -> Iterable[Series]:\n    yield self._selected_obj",
                "@property\ndef _selection_name(self):\n    \"\"\"\n    since we are a series, we by definition only have\n    a single name, but may be the result of a selection or\n    the name of our object\n    \"\"\"\n    if self._selection is None:\n        return self.obj.name\n    else:\n        return self._selection",
                "@Appender(\n    _apply_docs[\"template\"].format(\n        input=\"series\", examples=_apply_docs[\"series_examples\"]\n    )\n)\ndef apply(self, func, *args, **kwargs):\n    return super().apply(func, *args, **kwargs)",
                "@Substitution(\n    see_also=_agg_see_also_doc,\n    examples=_agg_examples_doc,\n    versionadded=\"\",\n    klass=\"Series\",\n    axis=\"\",\n)\n@Appender(_shared_docs[\"aggregate\"])\ndef aggregate(self, func=None, *args, **kwargs):\n\n    relabeling = func is None\n    columns = None\n    no_arg_message = \"Must provide 'func' or named aggregation **kwargs.\"\n    if relabeling:\n        columns = list(kwargs)\n        func = [kwargs[col] for col in columns]\n        kwargs = {}\n        if not columns:\n            raise TypeError(no_arg_message)\n\n    if isinstance(func, str):\n        return getattr(self, func)(*args, **kwargs)\n\n    elif isinstance(func, abc.Iterable):\n        # Catch instances of lists / tuples\n        # but not the class list / tuple itself.\n        func = maybe_mangle_lambdas(func)\n        ret = self._aggregate_multiple_funcs(func)\n        if relabeling:\n            ret.columns = columns\n    else:\n        cyfunc = self._get_cython_func(func)\n        if cyfunc and not args and not kwargs:\n            return getattr(self, cyfunc)()\n\n        if self.grouper.nkeys > 1:\n            return self._python_agg_general(func, *args, **kwargs)\n\n        try:\n            return self._python_agg_general(func, *args, **kwargs)\n        except (ValueError, KeyError):\n            # TODO: KeyError is raised in _python_agg_general,\n            #  see see test_groupby.test_basic\n            result = self._aggregate_named(func, *args, **kwargs)\n\n        index = Index(sorted(result), name=self.grouper.names[0])\n        ret = create_series_with_explicit_dtype(\n            result, index=index, dtype_if_empty=object\n        )\n\n    if not self.as_index:  # pragma: no cover\n        print(\"Warning, ignoring as_index=True\")\n\n    if isinstance(ret, dict):\n        from pandas import concat\n\n        ret = concat(ret, axis=1)\n    return ret",
                "def _aggregate_multiple_funcs(self, arg):\n    if isinstance(arg, dict):\n\n        # show the deprecation, but only if we\n        # have not shown a higher level one\n        # GH 15931\n        if isinstance(self._selected_obj, Series):\n            raise SpecificationError(\"nested renamer is not supported\")\n\n        columns = list(arg.keys())\n        arg = arg.items()\n    elif any(isinstance(x, (tuple, list)) for x in arg):\n        arg = [(x, x) if not isinstance(x, (tuple, list)) else x for x in arg]\n\n        # indicated column order\n        columns = next(zip(*arg))\n    else:\n        # list of functions / function names\n        columns = []\n        for f in arg:\n            columns.append(com.get_callable_name(f) or f)\n\n        arg = zip(columns, arg)\n\n    results = {}\n    for name, func in arg:\n        obj = self\n\n        # reset the cache so that we\n        # only include the named selection\n        if name in self._selected_obj:\n            obj = copy.copy(obj)\n            obj._reset_cache()\n            obj._selection = name\n        results[name] = obj.aggregate(func)\n\n    if any(isinstance(x, DataFrame) for x in results.values()):\n        # let higher level handle\n        return results\n\n    return DataFrame(results, columns=columns)",
                "def _wrap_series_output(\n    self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]], index: Index\n) -> Union[Series, DataFrame]:\n    \"\"\"\n    Wraps the output of a SeriesGroupBy operation into the expected result.\n\n    Parameters\n    ----------\n    output : Mapping[base.OutputKey, Union[Series, np.ndarray]]\n        Data to wrap.\n    index : pd.Index\n        Index to apply to the output.\n\n    Returns\n    -------\n    Series or DataFrame\n\n    Notes\n    -----\n    In the vast majority of cases output and columns will only contain one\n    element. The exception is operations that expand dimensions, like ohlc.\n    \"\"\"\n    indexed_output = {key.position: val for key, val in output.items()}\n    columns = Index(key.label for key in output)\n\n    result: Union[Series, DataFrame]\n    if len(output) > 1:\n        result = DataFrame(indexed_output, index=index)\n        result.columns = columns\n    else:\n        result = Series(indexed_output[0], index=index, name=columns[0])\n\n    return result",
                "def _wrap_aggregated_output(\n    self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]\n) -> Union[Series, DataFrame]:\n    \"\"\"\n    Wraps the output of a SeriesGroupBy aggregation into the expected result.\n\n    Parameters\n    ----------\n    output : Mapping[base.OutputKey, Union[Series, np.ndarray]]\n        Data to wrap.\n\n    Returns\n    -------\n    Series or DataFrame\n\n    Notes\n    -----\n    In the vast majority of cases output will only contain one element.\n    The exception is operations that expand dimensions, like ohlc.\n    \"\"\"\n    result = self._wrap_series_output(\n        output=output, index=self.grouper.result_index\n    )\n    return self._reindex_output(result)._convert(datetime=True)",
                "def _wrap_transformed_output(\n    self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]\n) -> Series:\n    \"\"\"\n    Wraps the output of a SeriesGroupBy aggregation into the expected result.\n\n    Parameters\n    ----------\n    output : dict[base.OutputKey, Union[Series, np.ndarray]]\n        Dict with a sole key of 0 and a value of the result values.\n\n    Returns\n    -------\n    Series\n\n    Notes\n    -----\n    output should always contain one element. It is specified as a dict\n    for consistency with DataFrame methods and _wrap_aggregated_output.\n    \"\"\"\n    assert len(output) == 1\n    result = self._wrap_series_output(output=output, index=self.obj.index)\n\n    # No transformations increase the ndim of the result\n    assert isinstance(result, Series)\n    return result",
                "def _wrap_applied_output(self, keys, values, not_indexed_same=False):\n    if len(keys) == 0:\n        # GH #6265\n        return Series([], name=self._selection_name, index=keys, dtype=np.float64)\n\n    def _get_index() -> Index:\n        if self.grouper.nkeys > 1:\n            index = MultiIndex.from_tuples(keys, names=self.grouper.names)\n        else:\n            index = Index(keys, name=self.grouper.names[0])\n        return index\n\n    if isinstance(values[0], dict):\n        # GH #823 #24880\n        index = _get_index()\n        result = self._reindex_output(DataFrame(values, index=index))\n        # if self.observed is False,\n        # keep all-NaN rows created while re-indexing\n        result = result.stack(dropna=self.observed)\n        result.name = self._selection_name\n        return result\n\n    if isinstance(values[0], Series):\n        return self._concat_objects(keys, values, not_indexed_same=not_indexed_same)\n    elif isinstance(values[0], DataFrame):\n        # possible that Series -> DataFrame by applied function\n        return self._concat_objects(keys, values, not_indexed_same=not_indexed_same)\n    else:\n        # GH #6265 #24880\n        result = Series(data=values, index=_get_index(), name=self._selection_name)\n        return self._reindex_output(result)",
                "def _aggregate_named(self, func, *args, **kwargs):\n    result = {}\n\n    for name, group in self:\n        group.name = name\n        output = func(group, *args, **kwargs)\n        if isinstance(output, (Series, Index, np.ndarray)):\n            raise ValueError(\"Must produce aggregated value\")\n        result[name] = output\n\n    return result",
                "@Substitution(klass=\"Series\", selected=\"A.\")\n@Appender(_transform_template)\ndef transform(self, func, *args, **kwargs):\n    func = self._get_cython_func(func) or func\n\n    if not isinstance(func, str):\n        return self._transform_general(func, *args, **kwargs)\n\n    elif func not in base.transform_kernel_whitelist:\n        msg = f\"'{func}' is not a valid function name for transform(name)\"\n        raise ValueError(msg)\n    elif func in base.cythonized_kernels:\n        # cythonized transform or canned \"agg+broadcast\"\n        return getattr(self, func)(*args, **kwargs)\n\n    # If func is a reduction, we need to broadcast the\n    # result to the whole group. Compute func result\n    # and deal with possible broadcasting below.\n    result = getattr(self, func)(*args, **kwargs)\n    return self._transform_fast(result, func)",
                "def _transform_general(self, func, *args, **kwargs):\n    \"\"\"\n    Transform with a non-str `func`.\n    \"\"\"\n    klass = type(self._selected_obj)\n\n    results = []\n    for name, group in self:\n        object.__setattr__(group, \"name\", name)\n        res = func(group, *args, **kwargs)\n\n        if isinstance(res, (ABCDataFrame, ABCSeries)):\n            res = res._values\n\n        indexer = self._get_index(name)\n        ser = klass(res, indexer)\n        results.append(ser)\n\n    # check for empty \"results\" to avoid concat ValueError\n    if results:\n        from pandas.core.reshape.concat import concat\n\n        result = concat(results).sort_index()\n    else:\n        result = Series(dtype=np.float64)\n\n    # we will only try to coerce the result type if\n    # we have a numeric dtype, as these are *always* user-defined funcs\n    # the cython take a different path (and casting)\n    dtype = self._selected_obj.dtype\n    if is_numeric_dtype(dtype):\n        result = maybe_downcast_to_dtype(result, dtype)\n\n    result.name = self._selected_obj.name\n    result.index = self._selected_obj.index\n    return result",
                "def _transform_fast(self, result, func_nm: str) -> Series:\n    \"\"\"\n    fast version of transform, only applicable to\n    builtin/cythonizable functions\n    \"\"\"\n    ids, _, ngroup = self.grouper.group_info\n    cast = self._transform_should_cast(func_nm)\n    out = algorithms.take_1d(result._values, ids)\n    if cast:\n        out = self._try_cast(out, self.obj)\n    return Series(out, index=self.obj.index, name=self.obj.name)",
                "def filter(self, func, dropna=True, *args, **kwargs):\n    \"\"\"\n    Return a copy of a Series excluding elements from groups that\n    do not satisfy the boolean criterion specified by func.\n\n    Parameters\n    ----------\n    func : function\n        To apply to each group. Should return True or False.\n    dropna : Drop groups that do not pass the filter. True by default;\n        if False, groups that evaluate False are filled with NaNs.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A' : ['foo', 'bar', 'foo', 'bar',\n    ...                           'foo', 'bar'],\n    ...                    'B' : [1, 2, 3, 4, 5, 6],\n    ...                    'C' : [2.0, 5., 8., 1., 2., 9.]})\n    >>> grouped = df.groupby('A')\n    >>> df.groupby('A').B.filter(lambda x: x.mean() > 3.)\n    1    2\n    3    4\n    5    6\n    Name: B, dtype: int64\n\n    Returns\n    -------\n    filtered : Series\n    \"\"\"\n    if isinstance(func, str):\n        wrapper = lambda x: getattr(x, func)(*args, **kwargs)\n    else:\n        wrapper = lambda x: func(x, *args, **kwargs)\n\n    # Interpret np.nan as False.\n    def true_and_notna(x, *args, **kwargs) -> bool:\n        b = wrapper(x, *args, **kwargs)\n        return b and notna(b)\n\n    try:\n        indices = [\n            self._get_index(name) for name, group in self if true_and_notna(group)\n        ]\n    except (ValueError, TypeError) as err:\n        raise TypeError(\"the filter must return a boolean result\") from err\n\n    filtered = self._apply_filter(indices, dropna)\n    return filtered",
                "def nunique(self, dropna: bool = True) -> Series:\n    \"\"\"\n    Return number of unique elements in the group.\n\n    Returns\n    -------\n    Series\n        Number of unique values within each group.\n    \"\"\"\n    ids, _, _ = self.grouper.group_info\n\n    val = self.obj._values\n\n    codes, _ = algorithms.factorize(val, sort=False)\n    sorter = np.lexsort((codes, ids))\n    codes = codes[sorter]\n    ids = ids[sorter]\n\n    # group boundaries are where group ids change\n    # unique observations are where sorted values change\n    idx = np.r_[0, 1 + np.nonzero(ids[1:] != ids[:-1])[0]]\n    inc = np.r_[1, codes[1:] != codes[:-1]]\n\n    # 1st item of each group is a new unique observation\n    mask = codes == -1\n    if dropna:\n        inc[idx] = 1\n        inc[mask] = 0\n    else:\n        inc[mask & np.r_[False, mask[:-1]]] = 0\n        inc[idx] = 1\n\n    out = np.add.reduceat(inc, idx).astype(\"int64\", copy=False)\n    if len(ids):\n        # NaN/NaT group exists if the head of ids is -1,\n        # so remove it from res and exclude its index from idx\n        if ids[0] == -1:\n            res = out[1:]\n            idx = idx[np.flatnonzero(idx)]\n        else:\n            res = out\n    else:\n        res = out[1:]\n    ri = self.grouper.result_index\n\n    # we might have duplications among the bins\n    if len(res) != len(ri):\n        res, out = np.zeros(len(ri), dtype=out.dtype), res\n        res[ids[idx]] = out\n\n    result = Series(res, index=ri, name=self._selection_name)\n    return self._reindex_output(result, fill_value=0)",
                "@Appender(Series.describe.__doc__)\ndef describe(self, **kwargs):\n    result = self.apply(lambda x: x.describe(**kwargs))\n    if self.axis == 1:\n        return result.T\n    return result.unstack()",
                "def value_counts(\n    self, normalize=False, sort=True, ascending=False, bins=None, dropna=True\n):\n\n    from pandas.core.reshape.tile import cut\n    from pandas.core.reshape.merge import _get_join_indexers\n\n    if bins is not None and not np.iterable(bins):\n        # scalar bins cannot be done at top level\n        # in a backward compatible way\n        return self.apply(\n            Series.value_counts,\n            normalize=normalize,\n            sort=sort,\n            ascending=ascending,\n            bins=bins,\n        )\n\n    ids, _, _ = self.grouper.group_info\n    val = self.obj._values\n\n    # groupby removes null keys from groupings\n    mask = ids != -1\n    ids, val = ids[mask], val[mask]\n\n    if bins is None:\n        lab, lev = algorithms.factorize(val, sort=True)\n        llab = lambda lab, inc: lab[inc]\n    else:\n\n        # lab is a Categorical with categories an IntervalIndex\n        lab = cut(Series(val), bins, include_lowest=True)\n        lev = lab.cat.categories\n        lab = lev.take(lab.cat.codes)\n        llab = lambda lab, inc: lab[inc]._multiindex.codes[-1]\n\n    if is_interval_dtype(lab):\n        # TODO: should we do this inside II?\n        sorter = np.lexsort((lab.left, lab.right, ids))\n    else:\n        sorter = np.lexsort((lab, ids))\n\n    ids, lab = ids[sorter], lab[sorter]\n\n    # group boundaries are where group ids change\n    idx = np.r_[0, 1 + np.nonzero(ids[1:] != ids[:-1])[0]]\n\n    # new values are where sorted labels change\n    lchanges = llab(lab, slice(1, None)) != llab(lab, slice(None, -1))\n    inc = np.r_[True, lchanges]\n    inc[idx] = True  # group boundaries are also new values\n    out = np.diff(np.nonzero(np.r_[inc, True])[0])  # value counts\n\n    # num. of times each group should be repeated\n    rep = partial(np.repeat, repeats=np.add.reduceat(inc, idx))\n\n    # multi-index components\n    codes = self.grouper.reconstructed_codes\n    codes = [rep(level_codes) for level_codes in codes] + [llab(lab, inc)]\n    levels = [ping.group_index for ping in self.grouper.groupings] + [lev]\n    names = self.grouper.names + [self._selection_name]\n\n    if dropna:\n        mask = codes[-1] != -1\n        if mask.all():\n            dropna = False\n        else:\n            out, codes = out[mask], [level_codes[mask] for level_codes in codes]\n\n    if normalize:\n        out = out.astype(\"float\")\n        d = np.diff(np.r_[idx, len(ids)])\n        if dropna:\n            m = ids[lab == -1]\n            np.add.at(d, m, -1)\n            acc = rep(d)[mask]\n        else:\n            acc = rep(d)\n        out /= acc\n\n    if sort and bins is None:\n        cat = ids[inc][mask] if dropna else ids[inc]\n        sorter = np.lexsort((out if ascending else -out, cat))\n        out, codes[-1] = out[sorter], codes[-1][sorter]\n\n    if bins is None:\n        mi = MultiIndex(\n            levels=levels, codes=codes, names=names, verify_integrity=False\n        )\n\n        if is_integer_dtype(out):\n            out = ensure_int64(out)\n        return Series(out, index=mi, name=self._selection_name)\n\n    # for compat. with libgroupby.value_counts need to ensure every\n    # bin is present at every index level, null filled with zeros\n    diff = np.zeros(len(out), dtype=\"bool\")\n    for level_codes in codes[:-1]:\n        diff |= np.r_[True, level_codes[1:] != level_codes[:-1]]\n\n    ncat, nbin = diff.sum(), len(levels[-1])\n\n    left = [np.repeat(np.arange(ncat), nbin), np.tile(np.arange(nbin), ncat)]\n\n    right = [diff.cumsum() - 1, codes[-1]]\n\n    _, idx = _get_join_indexers(left, right, sort=False, how=\"left\")\n    out = np.where(idx != -1, out[idx], 0)\n\n    if sort:\n        sorter = np.lexsort((out if ascending else -out, left[0]))\n        out, left[-1] = out[sorter], left[-1][sorter]\n\n    # build the multi-index w/ full levels\n    def build_codes(lev_codes: np.ndarray) -> np.ndarray:\n        return np.repeat(lev_codes[diff], nbin)\n\n    codes = [build_codes(lev_codes) for lev_codes in codes[:-1]]\n    codes.append(left[-1])\n\n    mi = MultiIndex(levels=levels, codes=codes, names=names, verify_integrity=False)\n\n    if is_integer_dtype(out):\n        out = ensure_int64(out)\n    return Series(out, index=mi, name=self._selection_name)",
                "def count(self) -> Series:\n    \"\"\"\n    Compute count of group, excluding missing values.\n\n    Returns\n    -------\n    Series\n        Count of values within each group.\n    \"\"\"\n    ids, _, ngroups = self.grouper.group_info\n    val = self.obj._values\n\n    mask = (ids != -1) & ~isna(val)\n    ids = ensure_platform_int(ids)\n    minlength = ngroups or 0\n    out = np.bincount(ids[mask], minlength=minlength)\n\n    result = Series(\n        out,\n        index=self.grouper.result_index,\n        name=self._selection_name,\n        dtype=\"int64\",\n    )\n    return self._reindex_output(result, fill_value=0)",
                "def _apply_to_column_groupbys(self, func):\n    \"\"\" return a pass thru \"\"\"\n    return func(self)",
                "def pct_change(self, periods=1, fill_method=\"pad\", limit=None, freq=None):\n    \"\"\"Calculate pct_change of each value to previous entry in group\"\"\"\n    # TODO: Remove this conditional when #23918 is fixed\n    if freq:\n        return self.apply(\n            lambda x: x.pct_change(\n                periods=periods, fill_method=fill_method, limit=limit, freq=freq\n            )\n        )\n    if fill_method is None:  # GH30463\n        fill_method = \"pad\"\n        limit = 0\n    filled = getattr(self, fill_method)(limit=limit)\n    fill_grp = filled.groupby(self.grouper.codes)\n    shifted = fill_grp.shift(periods=periods, freq=freq)\n\n    return (filled / shifted) - 1",
                "@Substitution(\n    see_also=_agg_see_also_doc,\n    examples=_agg_examples_doc,\n    versionadded=\"\",\n    klass=\"DataFrame\",\n    axis=\"\",\n)\n@Appender(_shared_docs[\"aggregate\"])\ndef aggregate(self, func=None, *args, **kwargs):\n\n    relabeling = func is None and is_multi_agg_with_relabel(**kwargs)\n    if relabeling:\n        func, columns, order = normalize_keyword_aggregation(kwargs)\n\n        kwargs = {}\n    elif isinstance(func, list) and len(func) > len(set(func)):\n\n        # GH 28426 will raise error if duplicated function names are used and\n        # there is no reassigned name\n        raise SpecificationError(\n            \"Function names must be unique if there is no new column \"\n            \"names assigned\"\n        )\n    elif func is None:\n        # nicer error message\n        raise TypeError(\"Must provide 'func' or tuples of '(column, aggfunc).\")\n\n    func = maybe_mangle_lambdas(func)\n\n    result, how = self._aggregate(func, *args, **kwargs)\n    if how is None:\n        return result\n\n    if result is None:\n\n        # grouper specific aggregations\n        if self.grouper.nkeys > 1:\n            return self._python_agg_general(func, *args, **kwargs)\n        elif args or kwargs:\n            result = self._aggregate_frame(func, *args, **kwargs)\n\n        elif self.axis == 1:\n            # _aggregate_multiple_funcs does not allow self.axis == 1\n            result = self._aggregate_frame(func)\n\n        else:\n\n            # try to treat as if we are passing a list\n            try:\n                result = self._aggregate_multiple_funcs([func], _axis=self.axis)\n            except ValueError as err:\n                if \"no results\" not in str(err):\n                    # raised directly by _aggregate_multiple_funcs\n                    raise\n                result = self._aggregate_frame(func)\n            else:\n                result.columns = Index(\n                    result.columns.levels[0], name=self._selected_obj.columns.name\n                )\n\n    if not self.as_index:\n        self._insert_inaxis_grouper_inplace(result)\n        result.index = np.arange(len(result))\n\n    if relabeling:\n\n        # used reordered index of columns\n        result = result.iloc[:, order]\n        result.columns = columns\n\n    return result._convert(datetime=True)",
                "def _iterate_slices(self) -> Iterable[Series]:\n    obj = self._selected_obj\n    if self.axis == 1:\n        obj = obj.T\n\n    if isinstance(obj, Series) and obj.name not in self.exclusions:\n        # Occurs when doing DataFrameGroupBy(...)[\"X\"]\n        yield obj\n    else:\n        for label, values in obj.items():\n            if label in self.exclusions:\n                continue\n\n            yield values",
                "def _cython_agg_general(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> DataFrame:\n    agg_blocks, agg_items = self._cython_agg_blocks(\n        how, alt=alt, numeric_only=numeric_only, min_count=min_count\n    )\n    return self._wrap_agged_blocks(agg_blocks, items=agg_items)",
                "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    # TODO: the actual managing of mgr_locs is a PITA\n    # here, it should happen via BlockManager.combine\n\n    data: BlockManager = self._get_data_to_aggregate()\n\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    deleted_items: List[np.ndarray] = []\n    # Some object-dtype blocks might be split into List[Block[T], Block[U]]\n    split_items: List[np.ndarray] = []\n    split_frames: List[DataFrame] = []\n\n    no_result = object()\n    for block in data.blocks:\n        # Avoid inheriting result from earlier in the loop\n        result = no_result\n        locs = block.mgr_locs.as_array\n        try:\n            result, _ = self.grouper.aggregate(\n                block.values, how, axis=1, min_count=min_count\n            )\n        except NotImplementedError:\n            # generally if we have numeric_only=False\n            # and non-applicable functions\n            # try to python agg\n\n            if alt is None:\n                # we cannot perform the operation\n                # in an alternate way, exclude the block\n                assert how == \"ohlc\"\n                deleted_items.append(locs)\n                continue\n\n            # call our grouper again with only this block\n            obj = self.obj[data.items[locs]]\n            if obj.shape[1] == 1:\n                # Avoid call to self.values that can occur in DataFrame\n                #  reductions; see GH#28949\n                obj = obj.iloc[:, 0]\n\n            s = get_groupby(obj, self.grouper)\n            try:\n                result = s.aggregate(lambda x: alt(x, axis=self.axis))\n            except TypeError:\n                # we may have an exception in trying to aggregate\n                # continue and exclude the block\n                deleted_items.append(locs)\n                continue\n            else:\n                result = cast(DataFrame, result)\n                # unwrap DataFrame to get array\n                if len(result._data.blocks) != 1:\n                    # We've split an object block! Everything we've assumed\n                    # about a single block input returning a single block output\n                    # is a lie. To keep the code-path for the typical non-split case\n                    # clean, we choose to clean up this mess later on.\n                    split_items.append(locs)\n                    split_frames.append(result)\n                    continue\n\n                assert len(result._data.blocks) == 1\n                result = result._data.blocks[0].values\n                if isinstance(result, np.ndarray) and result.ndim == 1:\n                    result = result.reshape(1, -1)\n\n        assert not isinstance(result, DataFrame)\n\n        if result is not no_result:\n            # see if we can cast the block back to the original dtype\n            result = maybe_downcast_numeric(result, block.dtype)\n\n            if block.is_extension and isinstance(result, np.ndarray):\n                # e.g. block.values was an IntegerArray\n                # (1, N) case can occur if block.values was Categorical\n                #  and result is ndarray[object]\n                assert result.ndim == 1 or result.shape[0] == 1\n                try:\n                    # Cast back if feasible\n                    result = type(block.values)._from_sequence(\n                        result.ravel(), dtype=block.values.dtype\n                    )\n                except ValueError:\n                    # reshape to be valid for non-Extension Block\n                    result = result.reshape(1, -1)\n\n            agg_block: Block = block.make_block(result)\n\n        new_items.append(locs)\n        agg_blocks.append(agg_block)\n\n    if not (agg_blocks or split_frames):\n        raise DataError(\"No numeric types to aggregate\")\n\n    if split_items:\n        # Clean up the mess left over from split blocks.\n        for locs, result in zip(split_items, split_frames):\n            assert len(locs) == result.shape[1]\n            for i, loc in enumerate(locs):\n                new_items.append(np.array([loc], dtype=locs.dtype))\n                agg_blocks.append(result.iloc[:, [i]]._data.blocks[0])\n\n    # reset the locs in the blocks to correspond to our\n    # current ordering\n    indexer = np.concatenate(new_items)\n    agg_items = data.items.take(np.sort(indexer))\n\n    if deleted_items:\n\n        # we need to adjust the indexer to account for the\n        # items we have removed\n        # really should be done in internals :<\n\n        deleted = np.concatenate(deleted_items)\n        ai = np.arange(len(data))\n        mask = np.zeros(len(data))\n        mask[deleted] = 1\n        indexer = (ai - mask.cumsum())[indexer]\n\n    offset = 0\n    for blk in agg_blocks:\n        loc = len(blk.mgr_locs)\n        blk.mgr_locs = indexer[offset : (offset + loc)]\n        offset += loc\n\n    return agg_blocks, agg_items",
                "def _aggregate_frame(self, func, *args, **kwargs) -> DataFrame:\n    if self.grouper.nkeys != 1:\n        raise AssertionError(\"Number of keys must be 1\")\n\n    axis = self.axis\n    obj = self._obj_with_exclusions\n\n    result: Dict[Union[int, str], Union[NDFrame, np.ndarray]] = {}\n    if axis != obj._info_axis_number:\n        for name, data in self:\n            fres = func(data, *args, **kwargs)\n            result[name] = fres\n    else:\n        for name in self.indices:\n            data = self.get_group(name, obj=obj)\n            fres = func(data, *args, **kwargs)\n            result[name] = fres\n\n    return self._wrap_frame_output(result, obj)",
                "def _aggregate_item_by_item(self, func, *args, **kwargs) -> DataFrame:\n    # only for axis==0\n\n    obj = self._obj_with_exclusions\n    result: Dict[Union[int, str], NDFrame] = {}\n    cannot_agg = []\n    for item in obj:\n        data = obj[item]\n        colg = SeriesGroupBy(data, selection=item, grouper=self.grouper)\n\n        cast = self._transform_should_cast(func)\n        try:\n            result[item] = colg.aggregate(func, *args, **kwargs)\n\n        except ValueError as err:\n            if \"Must produce aggregated value\" in str(err):\n                # raised in _aggregate_named, handle at higher level\n                #  see test_apply_with_mutated_index\n                raise\n            # otherwise we get here from an AttributeError in _make_wrapper\n            cannot_agg.append(item)\n            continue\n\n        else:\n            if cast:\n                result[item] = self._try_cast(result[item], data)\n\n    result_columns = obj.columns\n    if cannot_agg:\n        result_columns = result_columns.drop(cannot_agg)\n\n    return DataFrame(result, columns=result_columns)",
                "def _wrap_applied_output(self, keys, values, not_indexed_same=False):\n    if len(keys) == 0:\n        return DataFrame(index=keys)\n\n    key_names = self.grouper.names\n\n    # GH12824.\n    def first_not_none(values):\n        try:\n            return next(com.not_none(*values))\n        except StopIteration:\n            return None\n\n    v = first_not_none(values)\n\n    if v is None:\n        # GH9684. If all values are None, then this will throw an error.\n        # We'd prefer it return an empty dataframe.\n        return DataFrame()\n    elif isinstance(v, DataFrame):\n        return self._concat_objects(keys, values, not_indexed_same=not_indexed_same)\n    elif self.grouper.groupings is not None:\n        if len(self.grouper.groupings) > 1:\n            key_index = self.grouper.result_index\n\n        else:\n            ping = self.grouper.groupings[0]\n            if len(keys) == ping.ngroups:\n                key_index = ping.group_index\n                key_index.name = key_names[0]\n\n                key_lookup = Index(keys)\n                indexer = key_lookup.get_indexer(key_index)\n\n                # reorder the values\n                values = [values[i] for i in indexer]\n            else:\n\n                key_index = Index(keys, name=key_names[0])\n\n            # don't use the key indexer\n            if not self.as_index:\n                key_index = None\n\n        # make Nones an empty object\n        v = first_not_none(values)\n        if v is None:\n            return DataFrame()\n        elif isinstance(v, NDFrame):\n\n            # this is to silence a DeprecationWarning\n            # TODO: Remove when default dtype of empty Series is object\n            kwargs = v._construct_axes_dict()\n            if v._constructor is Series:\n                backup = create_series_with_explicit_dtype(\n                    **kwargs, dtype_if_empty=object\n                )\n            else:\n                backup = v._constructor(**kwargs)\n\n            values = [x if (x is not None) else backup for x in values]\n\n        v = values[0]\n\n        if isinstance(v, (np.ndarray, Index, Series)):\n            if isinstance(v, Series):\n                applied_index = self._selected_obj._get_axis(self.axis)\n                all_indexed_same = all_indexes_same([x.index for x in values])\n                singular_series = len(values) == 1 and applied_index.nlevels == 1\n\n                # GH3596\n                # provide a reduction (Frame -> Series) if groups are\n                # unique\n                if self.squeeze:\n                    # assign the name to this series\n                    if singular_series:\n                        values[0].name = keys[0]\n\n                        # GH2893\n                        # we have series in the values array, we want to\n                        # produce a series:\n                        # if any of the sub-series are not indexed the same\n                        # OR we don't have a multi-index and we have only a\n                        # single values\n                        return self._concat_objects(\n                            keys, values, not_indexed_same=not_indexed_same\n                        )\n\n                    # still a series\n                    # path added as of GH 5545\n                    elif all_indexed_same:\n                        from pandas.core.reshape.concat import concat\n\n                        return concat(values)\n\n                if not all_indexed_same:\n                    # GH 8467\n                    return self._concat_objects(keys, values, not_indexed_same=True)\n\n            if self.axis == 0 and isinstance(v, ABCSeries):\n                # GH6124 if the list of Series have a consistent name,\n                # then propagate that name to the result.\n                index = v.index.copy()\n                if index.name is None:\n                    # Only propagate the series name to the result\n                    # if all series have a consistent name.  If the\n                    # series do not have a consistent name, do\n                    # nothing.\n                    names = {v.name for v in values}\n                    if len(names) == 1:\n                        index.name = list(names)[0]\n\n                # normally use vstack as its faster than concat\n                # and if we have mi-columns\n                if (\n                    isinstance(v.index, MultiIndex)\n                    or key_index is None\n                    or isinstance(key_index, MultiIndex)\n                ):\n                    stacked_values = np.vstack([np.asarray(v) for v in values])\n                    result = DataFrame(\n                        stacked_values, index=key_index, columns=index\n                    )\n                else:\n                    # GH5788 instead of stacking; concat gets the\n                    # dtypes correct\n                    from pandas.core.reshape.concat import concat\n\n                    result = concat(\n                        values,\n                        keys=key_index,\n                        names=key_index.names,\n                        axis=self.axis,\n                    ).unstack()\n                    result.columns = index\n            elif isinstance(v, ABCSeries):\n                stacked_values = np.vstack([np.asarray(v) for v in values])\n                result = DataFrame(\n                    stacked_values.T, index=v.index, columns=key_index\n                )\n            else:\n                # GH#1738: values is list of arrays of unequal lengths\n                #  fall through to the outer else clause\n                # TODO: sure this is right?  we used to do this\n                #  after raising AttributeError above\n                return Series(values, index=key_index, name=self._selection_name)\n\n            # if we have date/time like in the original, then coerce dates\n            # as we are stacking can easily have object dtypes here\n            so = self._selected_obj\n            if so.ndim == 2 and so.dtypes.apply(needs_i8_conversion).any():\n                result = _recast_datetimelike_result(result)\n            else:\n                result = result._convert(datetime=True)\n\n            return self._reindex_output(result)\n\n        # values are not series or array-like but scalars\n        else:\n            # only coerce dates if we find at least 1 datetime\n            should_coerce = any(isinstance(x, Timestamp) for x in values)\n            # self._selection_name not passed through to Series as the\n            # result should not take the name of original selection\n            # of columns\n            return Series(values, index=key_index)._convert(\n                datetime=True, coerce=should_coerce\n            )\n\n    else:\n        # Handle cases like BinGrouper\n        return self._concat_objects(keys, values, not_indexed_same=not_indexed_same)",
                "def _transform_general(self, func, *args, **kwargs):\n    from pandas.core.reshape.concat import concat\n\n    applied = []\n    obj = self._obj_with_exclusions\n    gen = self.grouper.get_iterator(obj, axis=self.axis)\n    fast_path, slow_path = self._define_paths(func, *args, **kwargs)\n\n    path = None\n    for name, group in gen:\n        object.__setattr__(group, \"name\", name)\n\n        if path is None:\n            # Try slow path and fast path.\n            try:\n                path, res = self._choose_path(fast_path, slow_path, group)\n            except TypeError:\n                return self._transform_item_by_item(obj, fast_path)\n            except ValueError as err:\n                msg = \"transform must return a scalar value for each group\"\n                raise ValueError(msg) from err\n        else:\n            res = path(group)\n\n        if isinstance(res, Series):\n\n            # we need to broadcast across the\n            # other dimension; this will preserve dtypes\n            # GH14457\n            if not np.prod(group.shape):\n                continue\n            elif res.index.is_(obj.index):\n                r = concat([res] * len(group.columns), axis=1)\n                r.columns = group.columns\n                r.index = group.index\n            else:\n                r = DataFrame(\n                    np.concatenate([res.values] * len(group.index)).reshape(\n                        group.shape\n                    ),\n                    columns=group.columns,\n                    index=group.index,\n                )\n\n            applied.append(r)\n        else:\n            applied.append(res)\n\n    concat_index = obj.columns if self.axis == 0 else obj.index\n    other_axis = 1 if self.axis == 0 else 0  # switches between 0 & 1\n    concatenated = concat(applied, axis=self.axis, verify_integrity=False)\n    concatenated = concatenated.reindex(concat_index, axis=other_axis, copy=False)\n    return self._set_result_index_ordered(concatenated)",
                "@Substitution(klass=\"DataFrame\", selected=\"\")\n@Appender(_transform_template)\ndef transform(self, func, *args, **kwargs):\n\n    # optimized transforms\n    func = self._get_cython_func(func) or func\n\n    if not isinstance(func, str):\n        return self._transform_general(func, *args, **kwargs)\n\n    elif func not in base.transform_kernel_whitelist:\n        msg = f\"'{func}' is not a valid function name for transform(name)\"\n        raise ValueError(msg)\n    elif func in base.cythonized_kernels:\n        # cythonized transformation or canned \"reduction+broadcast\"\n        return getattr(self, func)(*args, **kwargs)\n\n    # GH 30918\n    # Use _transform_fast only when we know func is an aggregation\n    if func in base.reduction_kernels:\n        # If func is a reduction, we need to broadcast the\n        # result to the whole group. Compute func result\n        # and deal with possible broadcasting below.\n        result = getattr(self, func)(*args, **kwargs)\n\n        if isinstance(result, DataFrame) and result.columns.equals(\n            self._obj_with_exclusions.columns\n        ):\n            return self._transform_fast(result, func)\n\n    return self._transform_general(func, *args, **kwargs)",
                "def _transform_fast(self, result: DataFrame, func_nm: str) -> DataFrame:\n    \"\"\"\n    Fast transform path for aggregations\n    \"\"\"\n    # if there were groups with no observations (Categorical only?)\n    # try casting data to original dtype\n    cast = self._transform_should_cast(func_nm)\n\n    obj = self._obj_with_exclusions\n\n    # for each col, reshape to to size of original frame\n    # by take operation\n    ids, _, ngroup = self.grouper.group_info\n    output = []\n    for i, _ in enumerate(result.columns):\n        res = algorithms.take_1d(result.iloc[:, i].values, ids)\n        # TODO: we have no test cases that get here with EA dtypes;\n        #  try_cast may not be needed if EAs never get here\n        if cast:\n            res = self._try_cast(res, obj.iloc[:, i])\n        output.append(res)\n\n    return DataFrame._from_arrays(output, columns=result.columns, index=obj.index)",
                "def _define_paths(self, func, *args, **kwargs):\n    if isinstance(func, str):\n        fast_path = lambda group: getattr(group, func)(*args, **kwargs)\n        slow_path = lambda group: group.apply(\n            lambda x: getattr(x, func)(*args, **kwargs), axis=self.axis\n        )\n    else:\n        fast_path = lambda group: func(group, *args, **kwargs)\n        slow_path = lambda group: group.apply(\n            lambda x: func(x, *args, **kwargs), axis=self.axis\n        )\n    return fast_path, slow_path",
                "def _choose_path(self, fast_path: Callable, slow_path: Callable, group: DataFrame):\n    path = slow_path\n    res = slow_path(group)\n\n    # if we make it here, test if we can use the fast path\n    try:\n        res_fast = fast_path(group)\n    except AssertionError:\n        raise\n    except Exception:\n        # GH#29631 For user-defined function, we cant predict what may be\n        #  raised; see test_transform.test_transform_fastpath_raises\n        return path, res\n\n    # verify fast path does not change columns (and names), otherwise\n    # its results cannot be joined with those of the slow path\n    if not isinstance(res_fast, DataFrame):\n        return path, res\n\n    if not res_fast.columns.equals(group.columns):\n        return path, res\n\n    if res_fast.equals(res):\n        path = fast_path\n\n    return path, res",
                "def _transform_item_by_item(self, obj: DataFrame, wrapper) -> DataFrame:\n    # iterate through columns\n    output = {}\n    inds = []\n    for i, col in enumerate(obj):\n        try:\n            output[col] = self[col].transform(wrapper)\n        except TypeError:\n            # e.g. trying to call nanmean with string values\n            pass\n        else:\n            inds.append(i)\n\n    if len(output) == 0:\n        raise TypeError(\"Transform function invalid for data types\")\n\n    columns = obj.columns\n    if len(output) < len(obj.columns):\n        columns = columns.take(inds)\n\n    return DataFrame(output, index=obj.index, columns=columns)",
                "def filter(self, func, dropna=True, *args, **kwargs):\n    \"\"\"\n    Return a copy of a DataFrame excluding elements from groups that\n    do not satisfy the boolean criterion specified by func.\n\n    Parameters\n    ----------\n    f : function\n        Function to apply to each subframe. Should return True or False.\n    dropna : Drop groups that do not pass the filter. True by default;\n        If False, groups that evaluate False are filled with NaNs.\n\n    Returns\n    -------\n    filtered : DataFrame\n\n    Notes\n    -----\n    Each subframe is endowed the attribute 'name' in case you need to know\n    which group you are working on.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A' : ['foo', 'bar', 'foo', 'bar',\n    ...                           'foo', 'bar'],\n    ...                    'B' : [1, 2, 3, 4, 5, 6],\n    ...                    'C' : [2.0, 5., 8., 1., 2., 9.]})\n    >>> grouped = df.groupby('A')\n    >>> grouped.filter(lambda x: x['B'].mean() > 3.)\n         A  B    C\n    1  bar  2  5.0\n    3  bar  4  1.0\n    5  bar  6  9.0\n    \"\"\"\n    indices = []\n\n    obj = self._selected_obj\n    gen = self.grouper.get_iterator(obj, axis=self.axis)\n\n    for name, group in gen:\n        object.__setattr__(group, \"name\", name)\n\n        res = func(group, *args, **kwargs)\n\n        try:\n            res = res.squeeze()\n        except AttributeError:  # allow e.g., scalars and frames to pass\n            pass\n\n        # interpret the result of the filter\n        if is_bool(res) or (is_scalar(res) and isna(res)):\n            if res and notna(res):\n                indices.append(self._get_index(name))\n        else:\n            # non scalars aren't allowed\n            raise TypeError(\n                f\"filter function returned a {type(res).__name__}, \"\n                \"but expected a scalar bool\"\n            )\n\n    return self._apply_filter(indices, dropna)",
                "def __getitem__(self, key):\n    # per GH 23566\n    if isinstance(key, tuple) and len(key) > 1:\n        # if len == 1, then it becomes a SeriesGroupBy and this is actually\n        # valid syntax, so don't raise warning\n        warnings.warn(\n            \"Indexing with multiple keys (implicitly converted to a tuple \"\n            \"of keys) will be deprecated, use a list instead.\",\n            FutureWarning,\n            stacklevel=2,\n        )\n    return super().__getitem__(key)",
                "def _gotitem(self, key, ndim: int, subset=None):\n    \"\"\"\n    sub-classes to define\n    return a sliced object\n\n    Parameters\n    ----------\n    key : string / list of selections\n    ndim : 1,2\n        requested ndim of result\n    subset : object, default None\n        subset to act on\n    \"\"\"\n    if ndim == 2:\n        if subset is None:\n            subset = self.obj\n        return DataFrameGroupBy(\n            subset,\n            self.grouper,\n            selection=key,\n            grouper=self.grouper,\n            exclusions=self.exclusions,\n            as_index=self.as_index,\n            observed=self.observed,\n        )\n    elif ndim == 1:\n        if subset is None:\n            subset = self.obj[key]\n        return SeriesGroupBy(\n            subset, selection=key, grouper=self.grouper, observed=self.observed\n        )\n\n    raise AssertionError(\"invalid ndim for _gotitem\")",
                "def _wrap_frame_output(self, result, obj) -> DataFrame:\n    result_index = self.grouper.levels[0]\n\n    if self.axis == 0:\n        return DataFrame(result, index=obj.columns, columns=result_index).T\n    else:\n        return DataFrame(result, index=obj.index, columns=result_index)",
                "def _get_data_to_aggregate(self) -> BlockManager:\n    obj = self._obj_with_exclusions\n    if self.axis == 1:\n        return obj.T._data\n    else:\n        return obj._data",
                "def _insert_inaxis_grouper_inplace(self, result):\n    # zip in reverse so we can always insert at loc 0\n    izip = zip(\n        *map(\n            reversed,\n            (\n                self.grouper.names,\n                self.grouper.get_group_levels(),\n                [grp.in_axis for grp in self.grouper.groupings],\n            ),\n        )\n    )\n\n    for name, lev, in_axis in izip:\n        if in_axis:\n            result.insert(0, name, lev)",
                "def _wrap_aggregated_output(\n    self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]\n) -> DataFrame:\n    \"\"\"\n    Wraps the output of DataFrameGroupBy aggregations into the expected result.\n\n    Parameters\n    ----------\n    output : Mapping[base.OutputKey, Union[Series, np.ndarray]]\n       Data to wrap.\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    indexed_output = {key.position: val for key, val in output.items()}\n    columns = Index(key.label for key in output)\n\n    result = DataFrame(indexed_output)\n    result.columns = columns\n\n    if not self.as_index:\n        self._insert_inaxis_grouper_inplace(result)\n        result = result._consolidate()\n    else:\n        index = self.grouper.result_index\n        result.index = index\n\n    if self.axis == 1:\n        result = result.T\n\n    return self._reindex_output(result)._convert(datetime=True)",
                "def _wrap_transformed_output(\n    self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]\n) -> DataFrame:\n    \"\"\"\n    Wraps the output of DataFrameGroupBy transformations into the expected result.\n\n    Parameters\n    ----------\n    output : Mapping[base.OutputKey, Union[Series, np.ndarray]]\n        Data to wrap.\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    indexed_output = {key.position: val for key, val in output.items()}\n    columns = Index(key.label for key in output)\n\n    result = DataFrame(indexed_output)\n    result.columns = columns\n    result.index = self.obj.index\n\n    return result",
                "def _wrap_agged_blocks(self, blocks: \"Sequence[Block]\", items: Index) -> DataFrame:\n    if not self.as_index:\n        index = np.arange(blocks[0].values.shape[-1])\n        mgr = BlockManager(blocks, axes=[items, index])\n        result = DataFrame(mgr)\n\n        self._insert_inaxis_grouper_inplace(result)\n        result = result._consolidate()\n    else:\n        index = self.grouper.result_index\n        mgr = BlockManager(blocks, axes=[items, index])\n        result = DataFrame(mgr)\n\n    if self.axis == 1:\n        result = result.T\n\n    return self._reindex_output(result)._convert(datetime=True)",
                "def _iterate_column_groupbys(self):\n    for i, colname in enumerate(self._selected_obj.columns):\n        yield colname, SeriesGroupBy(\n            self._selected_obj.iloc[:, i],\n            selection=colname,\n            grouper=self.grouper,\n            exclusions=self.exclusions,\n        )",
                "def _apply_to_column_groupbys(self, func):\n    from pandas.core.reshape.concat import concat\n\n    return concat(\n        (func(col_groupby) for _, col_groupby in self._iterate_column_groupbys()),\n        keys=self._selected_obj.columns,\n        axis=1,\n    )",
                "def count(self):\n    \"\"\"\n    Compute count of group, excluding missing values.\n\n    Returns\n    -------\n    DataFrame\n        Count of values within each group.\n    \"\"\"\n    data = self._get_data_to_aggregate()\n    ids, _, ngroups = self.grouper.group_info\n    mask = ids != -1\n\n    # TODO(2DEA): reshape would not be necessary with 2D EAs\n    vals = ((mask & ~isna(blk.values).reshape(blk.shape)) for blk in data.blocks)\n    locs = (blk.mgr_locs for blk in data.blocks)\n\n    counted = (\n        lib.count_level_2d(x, labels=ids, max_bin=ngroups, axis=1) for x in vals\n    )\n    blocks = [make_block(val, placement=loc) for val, loc in zip(counted, locs)]\n\n    return self._wrap_agged_blocks(blocks, items=data.items)",
                "def nunique(self, dropna: bool = True):\n    \"\"\"\n    Return DataFrame with number of distinct observations per group for\n    each column.\n\n    Parameters\n    ----------\n    dropna : bool, default True\n        Don't include NaN in the counts.\n\n    Returns\n    -------\n    nunique: DataFrame\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'id': ['spam', 'egg', 'egg', 'spam',\n    ...                           'ham', 'ham'],\n    ...                    'value1': [1, 5, 5, 2, 5, 5],\n    ...                    'value2': list('abbaxy')})\n    >>> df\n         id  value1 value2\n    0  spam       1      a\n    1   egg       5      b\n    2   egg       5      b\n    3  spam       2      a\n    4   ham       5      x\n    5   ham       5      y\n\n    >>> df.groupby('id').nunique()\n        id  value1  value2\n    id\n    egg    1       1       1\n    ham    1       1       2\n    spam   1       2       1\n\n    Check for rows with the same id but conflicting values:\n\n    >>> df.groupby('id').filter(lambda g: (g.nunique() > 1).any())\n         id  value1 value2\n    0  spam       1      a\n    3  spam       2      a\n    4   ham       5      x\n    5   ham       5      y\n    \"\"\"\n    obj = self._selected_obj\n\n    def groupby_series(obj, col=None):\n        return SeriesGroupBy(obj, selection=col, grouper=self.grouper).nunique(\n            dropna=dropna\n        )\n\n    if isinstance(obj, Series):\n        results = groupby_series(obj)\n    else:\n        # TODO: this is duplicative of how GroupBy naturally works\n        # Try to consolidate with normal wrapping functions\n        from pandas.core.reshape.concat import concat\n\n        axis_number = obj._get_axis_number(self.axis)\n        other_axis = int(not axis_number)\n        if axis_number == 0:\n            iter_func = obj.items\n        else:\n            iter_func = obj.iterrows\n\n        results = [groupby_series(content, label) for label, content in iter_func()]\n        results = concat(results, axis=1)\n\n        if axis_number == 1:\n            results = results.T\n\n        results._get_axis(other_axis).names = obj._get_axis(other_axis).names\n\n    if not self.as_index:\n        results.index = ibase.default_index(len(results))\n    return results",
                "def _get_index() -> Index:\n    if self.grouper.nkeys > 1:\n        index = MultiIndex.from_tuples(keys, names=self.grouper.names)\n    else:\n        index = Index(keys, name=self.grouper.names[0])\n    return index",
                "def true_and_notna(x, *args, **kwargs) -> bool:\n    b = wrapper(x, *args, **kwargs)\n    return b and notna(b)",
                "def build_codes(lev_codes: np.ndarray) -> np.ndarray:\n    return np.repeat(lev_codes[diff], nbin)",
                "def first_not_none(values):\n    try:\n        return next(com.not_none(*values))\n    except StopIteration:\n        return None",
                "def groupby_series(obj, col=None):\n    return SeriesGroupBy(obj, selection=col, grouper=self.grouper).nunique(\n        dropna=dropna\n    )"
            ],
            "inscope_function_signatures": [
                "generate_property(name: str, klass: Type[FrameOrSeries])",
                "pin_whitelisted_properties(klass: Type[FrameOrSeries], whitelist: FrozenSet[str])",
                "_recast_datetimelike_result(result: DataFrame) -> DataFrame",
                "prop(self)",
                "pinner(cls)",
                "_iterate_slices(self) -> Iterable[Series]",
                "_selection_name(self)",
                "apply(self, func, *args, **kwargs)",
                "aggregate(self, func=None, *args, **kwargs)",
                "_aggregate_multiple_funcs(self, arg)",
                "_wrap_series_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]], index: Index) -> Union[Series, DataFrame]",
                "_wrap_aggregated_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]) -> Union[Series, DataFrame]",
                "_wrap_transformed_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]) -> Series",
                "_wrap_applied_output(self, keys, values, not_indexed_same=False)",
                "_aggregate_named(self, func, *args, **kwargs)",
                "transform(self, func, *args, **kwargs)",
                "_transform_general(self, func, *args, **kwargs)",
                "_transform_fast(self, result, func_nm: str) -> Series",
                "filter(self, func, dropna=True, *args, **kwargs)",
                "nunique(self, dropna: bool=True) -> Series",
                "describe(self, **kwargs)",
                "value_counts(self, normalize=False, sort=True, ascending=False, bins=None, dropna=True)",
                "count(self) -> Series",
                "_apply_to_column_groupbys(self, func)",
                "pct_change(self, periods=1, fill_method='pad', limit=None, freq=None)",
                "aggregate(self, func=None, *args, **kwargs)",
                "_iterate_slices(self) -> Iterable[Series]",
                "_cython_agg_general(self, how: str, alt=None, numeric_only: bool=True, min_count: int=-1) -> DataFrame",
                "_cython_agg_blocks(self, how: str, alt=None, numeric_only: bool=True, min_count: int=-1) -> 'Tuple[List[Block], Index]'",
                "_aggregate_frame(self, func, *args, **kwargs) -> DataFrame",
                "_aggregate_item_by_item(self, func, *args, **kwargs) -> DataFrame",
                "_wrap_applied_output(self, keys, values, not_indexed_same=False)",
                "_transform_general(self, func, *args, **kwargs)",
                "transform(self, func, *args, **kwargs)",
                "_transform_fast(self, result: DataFrame, func_nm: str) -> DataFrame",
                "_define_paths(self, func, *args, **kwargs)",
                "_choose_path(self, fast_path: Callable, slow_path: Callable, group: DataFrame)",
                "_transform_item_by_item(self, obj: DataFrame, wrapper) -> DataFrame",
                "filter(self, func, dropna=True, *args, **kwargs)",
                "__getitem__(self, key)",
                "_gotitem(self, key, ndim: int, subset=None)",
                "_wrap_frame_output(self, result, obj) -> DataFrame",
                "_get_data_to_aggregate(self) -> BlockManager",
                "_insert_inaxis_grouper_inplace(self, result)",
                "_wrap_aggregated_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]) -> DataFrame",
                "_wrap_transformed_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]) -> DataFrame",
                "_wrap_agged_blocks(self, blocks: 'Sequence[Block]', items: Index) -> DataFrame",
                "_iterate_column_groupbys(self)",
                "_apply_to_column_groupbys(self, func)",
                "count(self)",
                "nunique(self, dropna: bool=True)",
                "_get_index() -> Index",
                "true_and_notna(x, *args, **kwargs) -> bool",
                "build_codes(lev_codes: np.ndarray) -> np.ndarray",
                "first_not_none(values)",
                "groupby_series(obj, col=None)"
            ],
            "variables_in_file": {
                "TYPE_CHECKING": [
                    79
                ],
                "NamedAgg": [
                    83
                ],
                "namedtuple": [
                    83
                ],
                "AggScalar": [
                    85
                ],
                "Union": [
                    1155,
                    357,
                    1670,
                    1703,
                    392,
                    333,
                    334,
                    367,
                    368,
                    1138,
                    85
                ],
                "str": [
                    992,
                    1442,
                    1155,
                    520,
                    1000,
                    1417,
                    1166,
                    561,
                    1138,
                    115,
                    467,
                    85,
                    1467,
                    249,
                    953,
                    92
                ],
                "Callable": [
                    85,
                    1479
                ],
                "Any": [
                    85
                ],
                "ScalarResult": [
                    89
                ],
                "typing.TypeVar": [
                    89
                ],
                "typing": [
                    89
                ],
                "Type": [
                    115,
                    92
                ],
                "FrameOrSeries": [
                    115,
                    92
                ],
                "self._make_wrapper": [
                    107
                ],
                "self": [
                    512,
                    516,
                    517,
                    525,
                    526,
                    1039,
                    529,
                    530,
                    1045,
                    1047,
                    1564,
                    1565,
                    1580,
                    1588,
                    573,
                    578,
                    590,
                    592,
                    1618,
                    1621,
                    1623,
                    1624,
                    1625,
                    1626,
                    1630,
                    1632,
                    1638,
                    1640,
                    107,
                    1132,
                    1646,
                    1135,
                    624,
                    1136,
                    1647,
                    1140,
                    631,
                    632,
                    1144,
                    1145,
                    1658,
                    636,
                    637,
                    1149,
                    1659,
                    1660,
                    1154,
                    1159,
                    1161,
                    651,
                    659,
                    660,
                    1176,
                    1690,
                    1691,
                    156,
                    1694,
                    1697,
                    1188,
                    165,
                    166,
                    1700,
                    168,
                    1204,
                    1205,
                    1206,
                    1207,
                    698,
                    1210,
                    700,
                    701,
                    1722,
                    1727,
                    1732,
                    1735,
                    1225,
                    1739,
                    1742,
                    1745,
                    1747,
                    1749,
                    1750,
                    733,
                    1757,
                    1758,
                    1250,
                    1257,
                    1771,
                    1772,
                    1268,
                    1784,
                    250,
                    765,
                    256,
                    1281,
                    1283,
                    260,
                    262,
                    264,
                    265,
                    776,
                    777,
                    268,
                    272,
                    274,
                    786,
                    787,
                    790,
                    279,
                    794,
                    800,
                    1316,
                    1831,
                    296,
                    808,
                    809,
                    1834,
                    1329,
                    1333,
                    1845,
                    1339,
                    316,
                    320,
                    1860,
                    1354,
                    1360,
                    1361,
                    1362,
                    1371,
                    1373,
                    1404,
                    1405,
                    1406,
                    1408,
                    386,
                    387,
                    389,
                    1415,
                    1418,
                    1425,
                    1433,
                    412,
                    1436,
                    1438,
                    1440,
                    931,
                    421,
                    424,
                    425,
                    938,
                    427,
                    939,
                    941,
                    1448,
                    943,
                    1450,
                    433,
                    945,
                    1454,
                    436,
                    437,
                    1461,
                    951,
                    441,
                    444,
                    956,
                    1470,
                    447,
                    448,
                    959,
                    962,
                    963,
                    1475,
                    453,
                    465,
                    977,
                    978,
                    468,
                    981,
                    986,
                    475,
                    480,
                    481,
                    994,
                    997,
                    487,
                    1512,
                    490,
                    1005,
                    497,
                    1023
                ],
                "name": [
                    1665,
                    1667,
                    137,
                    138,
                    143,
                    144,
                    1567,
                    1568,
                    1580,
                    315,
                    573,
                    320,
                    323,
                    324,
                    453,
                    454,
                    458,
                    1365,
                    1366,
                    490,
                    107,
                    491,
                    109,
                    1260,
                    111,
                    497,
                    1140,
                    1142,
                    1144,
                    1145,
                    1147
                ],
                "parent_method": [
                    109,
                    110
                ],
                "getattr": [
                    480,
                    262,
                    808,
                    109,
                    1425,
                    562,
                    1433,
                    250,
                    475,
                    1468,
                    1470
                ],
                "klass": [
                    498,
                    487,
                    109,
                    143
                ],
                "prop.__doc__": [
                    110
                ],
                "prop": [
                    110,
                    143,
                    112,
                    144,
                    111
                ],
                "parent_method.__doc__": [
                    110
                ],
                "prop.__name__": [
                    111
                ],
                "property": [
                    112,
                    158
                ],
                "FrozenSet": [
                    115
                ],
                "whitelist": [
                    137
                ],
                "hasattr": [
                    138
                ],
                "cls": [
                    144,
                    138,
                    146
                ],
                "generate_property": [
                    143
                ],
                "setattr": [
                    144
                ],
                "pinner": [
                    148
                ],
                "GroupBy": [
                    152,
                    816
                ],
                "_apply_whitelist": [
                    153,
                    818
                ],
                "base.series_apply_whitelist": [
                    153,
                    151
                ],
                "base": [
                    1670,
                    1703,
                    392,
                    473,
                    333,
                    1420,
                    367,
                    1423,
                    815,
                    818,
                    1429,
                    470,
                    151,
                    153
                ],
                "self._selected_obj": [
                    512,
                    320,
                    1250,
                    516,
                    517,
                    487,
                    296,
                    1831,
                    977,
                    1745,
                    1747,
                    1333,
                    156,
                    1564,
                    1758,
                    959
                ],
                "Iterable": [
                    976,
                    155
                ],
                "Series": [
                    1670,
                    392,
                    393,
                    520,
                    652,
                    784,
                    530,
                    151,
                    155,
                    415,
                    672,
                    421,
                    1703,
                    296,
                    1838,
                    1329,
                    440,
                    447,
                    1348,
                    581,
                    456,
                    333,
                    334,
                    976,
                    981,
                    1237,
                    733,
                    1248,
                    1249,
                    1380,
                    357,
                    362,
                    367,
                    368,
                    631,
                    634,
                    507,
                    765,
                    767
                ],
                "self._selection": [
                    168,
                    165
                ],
                "self.obj.name": [
                    530,
                    166
                ],
                "self.obj": [
                    166,
                    777,
                    1039,
                    592,
                    529,
                    530,
                    1618,
                    660,
                    1722,
                    412,
                    1630
                ],
                "_agg_see_also_doc": [
                    170,
                    820,
                    230,
                    903
                ],
                "dedent": [
                    830,
                    170,
                    180,
                    820
                ],
                "_agg_examples_doc": [
                    904,
                    180,
                    830,
                    231
                ],
                "apply": [
                    227
                ],
                "super": [
                    1601,
                    227
                ],
                "func": [
                    256,
                    260,
                    1146,
                    1415,
                    265,
                    1161,
                    1163,
                    268,
                    1417,
                    1418,
                    1420,
                    272,
                    912,
                    914,
                    1421,
                    1423,
                    917,
                    1425,
                    1429,
                    1433,
                    794,
                    925,
                    1438,
                    1440,
                    929,
                    1570,
                    931,
                    939,
                    941,
                    561,
                    562,
                    945,
                    564,
                    951,
                    315,
                    956,
                    1467,
                    1468,
                    1470,
                    1473,
                    1475,
                    324,
                    455,
                    465,
                    1362,
                    467,
                    468,
                    470,
                    471,
                    473,
                    475,
                    1757,
                    480,
                    481,
                    227,
                    492,
                    239,
                    244,
                    1141,
                    249,
                    250,
                    252,
                    255
                ],
                "args": [
                    261,
                    1146,
                    265,
                    1418,
                    1163,
                    268,
                    272,
                    1425,
                    1433,
                    1440,
                    1570,
                    931,
                    939,
                    940,
                    941,
                    562,
                    564,
                    568,
                    1468,
                    1470,
                    1473,
                    1475,
                    455,
                    1362,
                    468,
                    475,
                    480,
                    227,
                    492,
                    1141,
                    250
                ],
                "kwargs": [
                    261,
                    1146,
                    265,
                    1418,
                    1163,
                    268,
                    272,
                    912,
                    914,
                    1425,
                    916,
                    1433,
                    1440,
                    1570,
                    931,
                    939,
                    940,
                    941,
                    562,
                    564,
                    568,
                    1468,
                    1470,
                    1473,
                    1475,
                    455,
                    1362,
                    468,
                    1236,
                    1239,
                    1242,
                    475,
                    480,
                    227,
                    492,
                    243,
                    244,
                    245,
                    1141,
                    250,
                    636
                ],
                "Appender": [
                    1411,
                    236,
                    909,
                    463,
                    634,
                    221
                ],
                "format": [
                    222
                ],
                "_apply_docs": [
                    222,
                    223
                ],
                "relabeling": [
                    257,
                    966,
                    239,
                    912,
                    913,
                    242
                ],
                "columns": [
                    258,
                    914,
                    1685,
                    1688,
                    299,
                    305,
                    308,
                    310,
                    1718,
                    312,
                    1721,
                    330,
                    970,
                    355,
                    360,
                    362,
                    240,
                    1522,
                    243,
                    244,
                    1524,
                    246,
                    1526
                ],
                "no_arg_message": [
                    241,
                    247
                ],
                "list": [
                    299,
                    301,
                    302,
                    1294,
                    243,
                    917
                ],
                "col": [
                    1512,
                    1834,
                    244,
                    1510
                ],
                "TypeError": [
                    576,
                    1513,
                    575,
                    1583,
                    1520,
                    247,
                    1048,
                    1372,
                    927
                ],
                "isinstance": [
                    1283,
                    1417,
                    1299,
                    917,
                    1301,
                    282,
                    1435,
                    415,
                    291,
                    1319,
                    296,
                    1067,
                    301,
                    302,
                    430,
                    1070,
                    561,
                    1838,
                    1203,
                    1076,
                    440,
                    1592,
                    442,
                    1467,
                    1344,
                    326,
                    456,
                    1232,
                    467,
                    981,
                    1495,
                    1248,
                    1249,
                    1380,
                    494,
                    249,
                    252
                ],
                "abc.Iterable": [
                    252
                ],
                "abc": [
                    252
                ],
                "maybe_mangle_lambdas": [
                    929,
                    255
                ],
                "ret": [
                    256,
                    258,
                    275,
                    282,
                    285,
                    286
                ],
                "self._aggregate_multiple_funcs": [
                    256,
                    951
                ],
                "ret.columns": [
                    258
                ],
                "cyfunc": [
                    260,
                    261,
                    262
                ],
                "self._get_cython_func": [
                    465,
                    260,
                    1415
                ],
                "self.grouper.nkeys": [
                    264,
                    938,
                    1132,
                    424
                ],
                "self.grouper": [
                    387,
                    1159,
                    264,
                    776,
                    525,
                    274,
                    659,
                    786,
                    1045,
                    1565,
                    1694,
                    1188,
                    424,
                    425,
                    809,
                    427,
                    938,
                    1834,
                    1454,
                    1205,
                    1206,
                    1207,
                    698,
                    1210,
                    700,
                    701,
                    1735,
                    590,
                    1361,
                    1621,
                    1749,
                    1623,
                    1632,
                    1638,
                    1132,
                    1772,
                    624,
                    1658,
                    1659,
                    1660,
                    1023
                ],
                "self._python_agg_general": [
                    265,
                    939,
                    268
                ],
                "ValueError": [
                    1376,
                    1374,
                    457,
                    269,
                    1165,
                    1422,
                    952,
                    472,
                    1086,
                    575
                ],
                "KeyError": [
                    269
                ],
                "result": [
                    514,
                    516,
                    517,
                    518,
                    527,
                    1047,
                    1054,
                    1056,
                    1062,
                    1065,
                    1066,
                    1067,
                    1068,
                    1070,
                    1072,
                    1074,
                    1076,
                    1080,
                    1083,
                    1084,
                    1088,
                    1090,
                    1100,
                    1101,
                    1104,
                    1641,
                    1643,
                    1138,
                    1142,
                    631,
                    632,
                    1147,
                    636,
                    1149,
                    638,
                    639,
                    1155,
                    1667,
                    1163,
                    1687,
                    1176,
                    1688,
                    1691,
                    1692,
                    1182,
                    1695,
                    1698,
                    1700,
                    1720,
                    1721,
                    1722,
                    1724,
                    1730,
                    1732,
                    1733,
                    1737,
                    1740,
                    1742,
                    272,
                    784,
                    274,
                    276,
                    790,
                    1304,
                    1312,
                    1318,
                    1321,
                    1335,
                    1337,
                    1339,
                    1885,
                    1889,
                    1890,
                    357,
                    359,
                    360,
                    1896,
                    362,
                    1899,
                    364,
                    1900,
                    386,
                    389,
                    1433,
                    1435,
                    412,
                    1438,
                    415,
                    416,
                    931,
                    933,
                    935,
                    941,
                    1456,
                    433,
                    945,
                    1457,
                    436,
                    437,
                    438,
                    951,
                    1464,
                    956,
                    958,
                    447,
                    448,
                    959,
                    451,
                    963,
                    964,
                    969,
                    458,
                    970,
                    460,
                    972,
                    480,
                    481,
                    505,
                    507,
                    1020,
                    1023
                ],
                "self._aggregate_named": [
                    272
                ],
                "index": [
                    1286,
                    1287,
                    1294,
                    274,
                    276,
                    1305,
                    1694,
                    1695,
                    1318,
                    425,
                    427,
                    428,
                    432,
                    433,
                    1728,
                    1729,
                    1735,
                    1736,
                    359,
                    362
                ],
                "Index": [
                    1248,
                    355,
                    1222,
                    423,
                    456,
                    427,
                    1726,
                    333,
                    274,
                    1685,
                    1718,
                    958,
                    1215
                ],
                "sorted": [
                    274
                ],
                "self.grouper.names": [
                    1188,
                    425,
                    427,
                    274,
                    1658,
                    701
                ],
                "create_series_with_explicit_dtype": [
                    275,
                    1238
                ],
                "object": [
                    1568,
                    491,
                    276,
                    1366,
                    1239,
                    1017
                ],
                "self.as_index": [
                    962,
                    1860,
                    1225,
                    279,
                    1625,
                    1690,
                    1727
                ],
                "print": [
                    280
                ],
                "dict": [
                    282,
                    291,
                    430
                ],
                "concat": [
                    1312,
                    1853,
                    1388,
                    505,
                    1756,
                    285,
                    1406,
                    1277
                ],
                "Substitution": [
                    1410,
                    902,
                    229,
                    462
                ],
                "_shared_docs": [
                    236,
                    909
                ],
                "agg": [
                    288,
                    974
                ],
                "aggregate": [
                    288,
                    974
                ],
                "arg": [
                    291,
                    299,
                    300,
                    301,
                    302,
                    305,
                    309,
                    312,
                    315
                ],
                "SpecificationError": [
                    297,
                    921
                ],
                "arg.keys": [
                    299
                ],
                "arg.items": [
                    300
                ],
                "any": [
                    1334,
                    1344,
                    301,
                    326
                ],
                "x": [
                    1344,
                    801,
                    1251,
                    1475,
                    326,
                    301,
                    302,
                    562,
                    1244,
                    564,
                    1780,
                    1047,
                    568,
                    636,
                    1470
                ],
                "tuple": [
                    1592,
                    301,
                    302
                ],
                "next": [
                    305,
                    1193
                ],
                "zip": [
                    1100,
                    305,
                    1654,
                    1782,
                    312
                ],
                "f": [
                    309,
                    310
                ],
                "columns.append": [
                    310
                ],
                "com.get_callable_name": [
                    310
                ],
                "com": [
                    1193,
                    310
                ],
                "results": [
                    1856,
                    1858,
                    324,
                    1861,
                    326,
                    1862,
                    328,
                    489,
                    330,
                    1839,
                    499,
                    502,
                    505,
                    314,
                    1852,
                    1853
                ],
                "obj": [
                    1154,
                    1157,
                    1158,
                    1039,
                    1040,
                    1043,
                    1045,
                    1178,
                    1564,
                    1565,
                    1831,
                    1450,
                    1834,
                    1838,
                    1839,
                    1461,
                    1845,
                    1464,
                    1848,
                    1850,
                    316,
                    321,
                    322,
                    323,
                    324,
                    1858,
                    1360,
                    977,
                    1361,
                    979,
                    981,
                    983,
                    985,
                    1373,
                    1510,
                    1641,
                    1387,
                    1643,
                    1646,
                    1136,
                    1648,
                    1522,
                    1139,
                    1523,
                    1650,
                    1526,
                    1145,
                    1404,
                    1149
                ],
                "copy.copy": [
                    321
                ],
                "copy": [
                    321
                ],
                "obj._reset_cache": [
                    322
                ],
                "obj._selection": [
                    323
                ],
                "obj.aggregate": [
                    324
                ],
                "DataFrame": [
                    1671,
                    1687,
                    1304,
                    1435,
                    1182,
                    1054,
                    1186,
                    1442,
                    1704,
                    1321,
                    1070,
                    815,
                    433,
                    1202,
                    1203,
                    1464,
                    1720,
                    442,
                    1726,
                    1730,
                    326,
                    1479,
                    1737,
                    330,
                    1867,
                    334,
                    1231,
                    1495,
                    993,
                    1506,
                    357,
                    1637,
                    359,
                    1641,
                    1131,
                    1643,
                    368,
                    1392,
                    1526,
                    1015,
                    1151
                ],
                "results.values": [
                    326
                ],
                "Mapping": [
                    1670,
                    1703,
                    392,
                    333,
                    367
                ],
                "base.OutputKey": [
                    1670,
                    1703,
                    392,
                    333,
                    367
                ],
                "np.ndarray": [
                    1248,
                    1670,
                    1703,
                    392,
                    456,
                    1067,
                    333,
                    367,
                    1138,
                    755,
                    1011,
                    1012,
                    1014,
                    1076
                ],
                "np": [
                    1670,
                    392,
                    648,
                    782,
                    1303,
                    421,
                    679,
                    1320,
                    681,
                    1703,
                    1067,
                    686,
                    690,
                    692,
                    1076,
                    695,
                    1728,
                    964,
                    456,
                    712,
                    715,
                    333,
                    1103,
                    595,
                    723,
                    1108,
                    1109,
                    601,
                    602,
                    1117,
                    1118,
                    1119,
                    1248,
                    737,
                    610,
                    739,
                    613,
                    743,
                    1385,
                    619,
                    748,
                    367,
                    751,
                    1393,
                    1138,
                    755,
                    628,
                    756,
                    1011,
                    1012,
                    1014,
                    507
                ],
                "indexed_output": [
                    354,
                    359,
                    362,
                    1684,
                    1717,
                    1687,
                    1720
                ],
                "key.position": [
                    354,
                    1684,
                    1717
                ],
                "key": [
                    1632,
                    1601,
                    354,
                    355,
                    1684,
                    1685,
                    1622,
                    1717,
                    1592,
                    1718,
                    1630
                ],
                "val": [
                    672,
                    354,
                    777,
                    779,
                    592,
                    594,
                    660,
                    1684,
                    1717,
                    1782,
                    664,
                    667
                ],
                "output.items": [
                    354,
                    1684,
                    1717
                ],
                "output": [
                    387,
                    1684,
                    1685,
                    411,
                    412,
                    1455,
                    1717,
                    1462,
                    1718,
                    1464,
                    455,
                    456,
                    458,
                    354,
                    355,
                    1508,
                    358,
                    1512,
                    1519,
                    1523,
                    1526
                ],
                "key.label": [
                    355,
                    1685,
                    1718
                ],
                "len": [
                    1293,
                    917,
                    411,
                    1056,
                    1185,
                    419,
                    1065,
                    1206,
                    1592,
                    1211,
                    964,
                    1861,
                    712,
                    1101,
                    1118,
                    1119,
                    737,
                    1889,
                    1252,
                    741,
                    614,
                    358,
                    1125,
                    1388,
                    1519,
                    1393,
                    627,
                    628,
                    1523
                ],
                "result.columns": [
                    1889,
                    1318,
                    360,
                    970,
                    1688,
                    1456,
                    1464,
                    1721,
                    1435,
                    958,
                    959
                ],
                "self._wrap_series_output": [
                    386,
                    412
                ],
                "self.grouper.result_index": [
                    387,
                    1735,
                    624,
                    786,
                    1207,
                    1694
                ],
                "_convert": [
                    1700,
                    1348,
                    389,
                    1742
                ],
                "self._reindex_output": [
                    448,
                    1700,
                    389,
                    1742,
                    433,
                    790,
                    632,
                    1339
                ],
                "self.obj.index": [
                    1722,
                    530,
                    412
                ],
                "keys": [
                    1185,
                    1186,
                    419,
                    1281,
                    421,
                    1222,
                    425,
                    1354,
                    427,
                    1260,
                    1204,
                    1269,
                    441,
                    1211,
                    444,
                    1215
                ],
                "self._selection_name": [
                    421,
                    733,
                    765,
                    1329,
                    787,
                    437,
                    631,
                    701,
                    447
                ],
                "np.float64": [
                    507,
                    421
                ],
                "MultiIndex.from_tuples": [
                    425
                ],
                "MultiIndex": [
                    425,
                    1299,
                    1301,
                    727,
                    761
                ],
                "values": [
                    1281,
                    1292,
                    1303,
                    1313,
                    1320,
                    1193,
                    1066,
                    1197,
                    430,
                    433,
                    1329,
                    1457,
                    1204,
                    440,
                    441,
                    442,
                    444,
                    447,
                    1344,
                    1728,
                    1219,
                    1348,
                    1354,
                    1229,
                    985,
                    1244,
                    989,
                    1246,
                    1251,
                    1252,
                    1896,
                    1260,
                    1269,
                    1277
                ],
                "_get_index": [
                    432,
                    447
                ],
                "result.stack": [
                    436
                ],
                "self.observed": [
                    1632,
                    1626,
                    436
                ],
                "result.name": [
                    516,
                    437
                ],
                "self._concat_objects": [
                    1281,
                    1354,
                    1204,
                    1268,
                    441,
                    444
                ],
                "not_indexed_same": [
                    1354,
                    1204,
                    1269,
                    441,
                    444
                ],
                "group": [
                    1567,
                    1568,
                    1570,
                    1468,
                    573,
                    1469,
                    1473,
                    1474,
                    453,
                    454,
                    455,
                    1481,
                    1485,
                    1365,
                    1366,
                    1498,
                    1371,
                    1378,
                    1385,
                    490,
                    491,
                    492,
                    1388,
                    1389,
                    1390,
                    1393,
                    1394,
                    1396,
                    1397
                ],
                "group.name": [
                    454
                ],
                "self._transform_general": [
                    1440,
                    1418,
                    468
                ],
                "base.transform_kernel_whitelist": [
                    1420,
                    470
                ],
                "msg": [
                    1376,
                    1421,
                    1422,
                    471,
                    472,
                    1375
                ],
                "base.cythonized_kernels": [
                    473,
                    1423
                ],
                "self._transform_fast": [
                    481,
                    1438
                ],
                "_transform_template": [
                    1411,
                    463
                ],
                "type": [
                    1584,
                    1083,
                    487
                ],
                "object.__setattr__": [
                    1568,
                    491,
                    1366
                ],
                "res": [
                    1570,
                    1573,
                    1578,
                    1579,
                    1584,
                    1457,
                    1461,
                    1462,
                    1481,
                    1491,
                    1496,
                    1371,
                    1499,
                    1501,
                    1504,
                    1378,
                    1380,
                    618,
                    1387,
                    492,
                    621,
                    494,
                    495,
                    623,
                    1388,
                    498,
                    627,
                    628,
                    629,
                    1393,
                    631,
                    1402
                ],
                "ABCDataFrame": [
                    494
                ],
                "ABCSeries": [
                    1283,
                    494,
                    1319
                ],
                "res._values": [
                    495
                ],
                "indexer": [
                    1216,
                    1121,
                    1219,
                    1126,
                    497,
                    498,
                    1108,
                    1109
                ],
                "self._get_index": [
                    497,
                    1580,
                    573
                ],
                "ser": [
                    498,
                    499
                ],
                "results.append": [
                    499
                ],
                "sort_index": [
                    505
                ],
                "dtype": [
                    512,
                    513,
                    514
                ],
                "self._selected_obj.dtype": [
                    512
                ],
                "is_numeric_dtype": [
                    513
                ],
                "maybe_downcast_to_dtype": [
                    514
                ],
                "self._selected_obj.name": [
                    516
                ],
                "result.index": [
                    1722,
                    964,
                    517,
                    1695
                ],
                "self._selected_obj.index": [
                    517
                ],
                "ids": [
                    776,
                    779,
                    780,
                    525,
                    782,
                    527,
                    659,
                    663,
                    664,
                    679,
                    681,
                    683,
                    686,
                    1454,
                    1457,
                    712,
                    714,
                    590,
                    722,
                    595,
                    597,
                    601,
                    614,
                    617,
                    1772,
                    1773,
                    1780,
                    629
                ],
                "_": [
                    776,
                    747,
                    1772,
                    525,
                    590,
                    1454,
                    1456,
                    594,
                    659,
                    1757,
                    1023
                ],
                "ngroup": [
                    525,
                    1454
                ],
                "self.grouper.group_info": [
                    776,
                    1772,
                    525,
                    1454,
                    590,
                    659
                ],
                "cast": [
                    1448,
                    1161,
                    526,
                    528,
                    1460,
                    1175,
                    1054
                ],
                "self._transform_should_cast": [
                    1448,
                    1161,
                    526
                ],
                "func_nm": [
                    1448,
                    526
                ],
                "out": [
                    782,
                    527,
                    529,
                    530,
                    785,
                    692,
                    708,
                    711,
                    719,
                    723,
                    724,
                    731,
                    732,
                    733,
                    737,
                    613,
                    618,
                    748,
                    621,
                    623,
                    751,
                    752,
                    628,
                    629,
                    763,
                    764,
                    765
                ],
                "algorithms.take_1d": [
                    1457,
                    527
                ],
                "algorithms": [
                    1457,
                    594,
                    667,
                    527
                ],
                "result._values": [
                    527
                ],
                "self._try_cast": [
                    1176,
                    529,
                    1461
                ],
                "wrapper": [
                    568,
                    562,
                    1512,
                    564
                ],
                "b": [
                    568,
                    569
                ],
                "notna": [
                    569,
                    1579
                ],
                "bool": [
                    992,
                    581,
                    1000,
                    567,
                    1786
                ],
                "indices": [
                    578,
                    1580,
                    1588,
                    1562,
                    572
                ],
                "true_and_notna": [
                    573
                ],
                "err": [
                    576,
                    953,
                    1376,
                    1166
                ],
                "filtered": [
                    578,
                    579
                ],
                "self._apply_filter": [
                    578,
                    1588
                ],
                "dropna": [
                    706,
                    578,
                    713,
                    1835,
                    722,
                    1588,
                    606,
                    703
                ],
                "self.obj._values": [
                    592,
                    777,
                    660
                ],
                "codes": [
                    704,
                    738,
                    708,
                    745,
                    728,
                    594,
                    595,
                    596,
                    724,
                    758,
                    759,
                    698,
                    761,
                    602,
                    699,
                    605
                ],
                "algorithms.factorize": [
                    594,
                    667
                ],
                "sorter": [
                    679,
                    681,
                    683,
                    751,
                    752,
                    595,
                    596,
                    597,
                    723,
                    724
                ],
                "np.lexsort": [
                    679,
                    681,
                    751,
                    595,
                    723
                ],
                "idx": [
                    1888,
                    1889,
                    1890,
                    611,
                    613,
                    712,
                    619,
                    747,
                    748,
                    686,
                    691,
                    629,
                    695,
                    601,
                    607
                ],
                "np.r_": [
                    610,
                    739,
                    712,
                    686,
                    690,
                    692,
                    601,
                    602
                ],
                "np.nonzero": [
                    601,
                    692,
                    686
                ],
                "inc": [
                    608,
                    610,
                    611,
                    675,
                    613,
                    690,
                    691,
                    692,
                    722,
                    695,
                    602,
                    699,
                    668,
                    607
                ],
                "mask": [
                    608,
                    704,
                    610,
                    705,
                    708,
                    1120,
                    1121,
                    779,
                    716,
                    1773,
                    782,
                    1776,
                    722,
                    663,
                    664,
                    605,
                    1119
                ],
                "astype": [
                    613
                ],
                "np.add.reduceat": [
                    613,
                    695
                ],
                "np.add": [
                    715,
                    613,
                    695
                ],
                "np.flatnonzero": [
                    619
                ],
                "ri": [
                    624,
                    627,
                    628,
                    631
                ],
                "np.zeros": [
                    737,
                    628,
                    1119
                ],
                "out.dtype": [
                    628
                ],
                "self.apply": [
                    800,
                    651,
                    636
                ],
                "x.describe": [
                    636
                ],
                "self.axis": [
                    1283,
                    637,
                    1047,
                    1565,
                    1697,
                    1316,
                    943,
                    1845,
                    951,
                    1470,
                    1475,
                    1739,
                    1361,
                    978,
                    1250,
                    1640,
                    1135,
                    1647,
                    1404,
                    1405,
                    1406
                ],
                "result.T": [
                    1698,
                    1740,
                    638
                ],
                "result.unstack": [
                    639
                ],
                "Series.describe.__doc__": [
                    634
                ],
                "Series.describe": [
                    634
                ],
                "bins": [
                    672,
                    648,
                    656,
                    721,
                    726,
                    666
                ],
                "np.iterable": [
                    648
                ],
                "Series.value_counts": [
                    652
                ],
                "normalize": [
                    653,
                    710
                ],
                "sort": [
                    721,
                    654,
                    750
                ],
                "ascending": [
                    751,
                    723,
                    655
                ],
                "lab": [
                    672,
                    673,
                    674,
                    675,
                    677,
                    679,
                    681,
                    714,
                    683,
                    689,
                    667,
                    668,
                    699
                ],
                "lev": [
                    673,
                    674,
                    1665,
                    1667,
                    667,
                    700
                ],
                "llab": [
                    689,
                    675,
                    668,
                    699
                ],
                "cut": [
                    672
                ],
                "lab.cat.categories": [
                    673
                ],
                "lab.cat": [
                    673,
                    674
                ],
                "lev.take": [
                    674
                ],
                "lab.cat.codes": [
                    674
                ],
                "_multiindex.codes": [
                    675
                ],
                "_multiindex": [
                    675
                ],
                "is_interval_dtype": [
                    677
                ],
                "lab.left": [
                    679
                ],
                "lab.right": [
                    679
                ],
                "lchanges": [
                    689,
                    690
                ],
                "slice": [
                    689
                ],
                "np.diff": [
                    712,
                    692
                ],
                "rep": [
                    699,
                    716,
                    718,
                    695
                ],
                "partial": [
                    695
                ],
                "np.repeat": [
                    743,
                    756,
                    695
                ],
                "self.grouper.reconstructed_codes": [
                    698
                ],
                "level_codes": [
                    738,
                    699,
                    708,
                    739
                ],
                "levels": [
                    728,
                    761,
                    700,
                    741
                ],
                "ping.group_index": [
                    1212,
                    700
                ],
                "ping": [
                    1210,
                    1211,
                    700,
                    1212
                ],
                "self.grouper.groupings": [
                    700,
                    1205,
                    1206,
                    1210,
                    1660
                ],
                "names": [
                    1858,
                    1292,
                    1293,
                    1294,
                    728,
                    761,
                    701
                ],
                "mask.all": [
                    705
                ],
                "out.astype": [
                    711
                ],
                "d": [
                    712,
                    715,
                    716,
                    718
                ],
                "m": [
                    714,
                    715
                ],
                "np.add.at": [
                    715
                ],
                "acc": [
                    716,
                    718,
                    719
                ],
                "cat": [
                    722,
                    723
                ],
                "mi": [
                    761,
                    733,
                    765,
                    727
                ],
                "is_integer_dtype": [
                    731,
                    763
                ],
                "ensure_int64": [
                    732,
                    764
                ],
                "diff": [
                    737,
                    739,
                    741,
                    745,
                    756
                ],
                "ncat": [
                    741,
                    743
                ],
                "nbin": [
                    756,
                    741,
                    743
                ],
                "diff.sum": [
                    741
                ],
                "left": [
                    743,
                    747,
                    751,
                    752,
                    759
                ],
                "np.arange": [
                    1728,
                    964,
                    1118,
                    743
                ],
                "np.tile": [
                    743
                ],
                "right": [
                    745,
                    747
                ],
                "diff.cumsum": [
                    745
                ],
                "_get_join_indexers": [
                    747
                ],
                "np.where": [
                    748
                ],
                "lev_codes": [
                    756,
                    758
                ],
                "build_codes": [
                    758
                ],
                "codes.append": [
                    759
                ],
                "ngroups": [
                    776,
                    1772,
                    781,
                    1780
                ],
                "isna": [
                    1776,
                    1578,
                    779
                ],
                "ensure_platform_int": [
                    780
                ],
                "minlength": [
                    781,
                    782
                ],
                "np.bincount": [
                    782
                ],
                "freq": [
                    802,
                    810,
                    799
                ],
                "x.pct_change": [
                    801
                ],
                "periods": [
                    802,
                    810
                ],
                "fill_method": [
                    808,
                    802,
                    805,
                    806
                ],
                "limit": [
                    808,
                    802,
                    807
                ],
                "filled": [
                    808,
                    809,
                    812
                ],
                "fill_grp": [
                    809,
                    810
                ],
                "filled.groupby": [
                    809
                ],
                "self.grouper.codes": [
                    809
                ],
                "shifted": [
                    810,
                    812
                ],
                "fill_grp.shift": [
                    810
                ],
                "pin_whitelisted_properties": [
                    815,
                    151
                ],
                "base.dataframe_apply_whitelist": [
                    818,
                    815
                ],
                "is_multi_agg_with_relabel": [
                    912
                ],
                "order": [
                    969,
                    914
                ],
                "normalize_keyword_aggregation": [
                    914
                ],
                "set": [
                    917
                ],
                "how": [
                    1024,
                    931,
                    932,
                    995,
                    1034
                ],
                "self._aggregate": [
                    931
                ],
                "self._aggregate_frame": [
                    945,
                    956,
                    941
                ],
                "result.columns.levels": [
                    959
                ],
                "self._selected_obj.columns.name": [
                    959
                ],
                "self._selected_obj.columns": [
                    1745,
                    1758,
                    959
                ],
                "self._insert_inaxis_grouper_inplace": [
                    1732,
                    963,
                    1691
                ],
                "result.iloc": [
                    1896,
                    969,
                    1899,
                    1104,
                    1457
                ],
                "result._convert": [
                    1337,
                    972
                ],
                "obj.T": [
                    1648,
                    979
                ],
                "obj.name": [
                    981
                ],
                "self.exclusions": [
                    1624,
                    986,
                    981,
                    1750
                ],
                "label": [
                    985,
                    986,
                    1852
                ],
                "obj.items": [
                    1848,
                    985
                ],
                "int": [
                    992,
                    1155,
                    1603,
                    1000,
                    1138,
                    1846
                ],
                "agg_blocks": [
                    994,
                    1124,
                    1093,
                    997,
                    1095,
                    1129,
                    1104,
                    1010
                ],
                "agg_items": [
                    1129,
                    994,
                    1109,
                    997
                ],
                "self._cython_agg_blocks": [
                    994
                ],
                "alt": [
                    995,
                    1047,
                    1031
                ],
                "numeric_only": [
                    995,
                    1007
                ],
                "min_count": [
                    1024,
                    995
                ],
                "self._wrap_agged_blocks": [
                    1784,
                    997
                ],
                "data": [
                    1146,
                    1158,
                    1159,
                    1771,
                    1005,
                    1039,
                    1008,
                    1776,
                    1777,
                    1784,
                    1140,
                    1109,
                    1141,
                    1176,
                    1145,
                    1018,
                    1118,
                    1119
                ],
                "BlockManager": [
                    1736,
                    1729,
                    1645,
                    1005
                ],
                "self._get_data_to_aggregate": [
                    1771,
                    1005
                ],
                "data.get_numeric_data": [
                    1008
                ],
                "List": [
                    1010,
                    1011,
                    1012,
                    1014,
                    1015
                ],
                "Block": [
                    1010,
                    1090
                ],
                "new_items": [
                    1011,
                    1092,
                    1108,
                    1103
                ],
                "deleted_items": [
                    1035,
                    1012,
                    1111,
                    1051,
                    1117
                ],
                "split_items": [
                    1098,
                    1100,
                    1061,
                    1014
                ],
                "split_frames": [
                    1095,
                    1100,
                    1062,
                    1015
                ],
                "no_result": [
                    1072,
                    1017,
                    1020
                ],
                "block": [
                    1024,
                    1090,
                    1074,
                    1076,
                    1018,
                    1083,
                    1084,
                    1021
                ],
                "data.blocks": [
                    1776,
                    1777,
                    1018
                ],
                "locs": [
                    1092,
                    1061,
                    1035,
                    1100,
                    1101,
                    1102,
                    1039,
                    1103,
                    1777,
                    1782,
                    1051,
                    1021
                ],
                "block.mgr_locs.as_array": [
                    1021
                ],
                "block.mgr_locs": [
                    1021
                ],
                "self.grouper.aggregate": [
                    1023
                ],
                "block.values": [
                    1024,
                    1083,
                    1084
                ],
                "NotImplementedError": [
                    1026
                ],
                "deleted_items.append": [
                    1051,
                    1035
                ],
                "data.items": [
                    1784,
                    1109,
                    1039
                ],
                "obj.shape": [
                    1040
                ],
                "obj.iloc": [
                    1043,
                    1461
                ],
                "s": [
                    1045,
                    1047
                ],
                "get_groupby": [
                    1045
                ],
                "s.aggregate": [
                    1047
                ],
                "result._data.blocks": [
                    1056,
                    1065,
                    1066
                ],
                "result._data": [
                    1056,
                    1065,
                    1066
                ],
                "split_items.append": [
                    1061
                ],
                "split_frames.append": [
                    1062
                ],
                "result.ndim": [
                    1080,
                    1067
                ],
                "result.reshape": [
                    1088,
                    1068
                ],
                "maybe_downcast_numeric": [
                    1074
                ],
                "block.dtype": [
                    1074
                ],
                "block.is_extension": [
                    1076
                ],
                "result.shape": [
                    1080,
                    1101
                ],
                "_from_sequence": [
                    1083
                ],
                "result.ravel": [
                    1084
                ],
                "block.values.dtype": [
                    1084
                ],
                "agg_block": [
                    1090,
                    1093
                ],
                "block.make_block": [
                    1090
                ],
                "new_items.append": [
                    1092,
                    1103
                ],
                "agg_blocks.append": [
                    1104,
                    1093
                ],
                "DataError": [
                    1096
                ],
                "i": [
                    1219,
                    1510,
                    1517,
                    1102,
                    1104,
                    1456,
                    1457,
                    1745,
                    1747,
                    1461
                ],
                "loc": [
                    1125,
                    1126,
                    1127,
                    1102,
                    1103,
                    1782
                ],
                "enumerate": [
                    1456,
                    1510,
                    1745,
                    1102
                ],
                "np.array": [
                    1103
                ],
                "locs.dtype": [
                    1103
                ],
                "_data.blocks": [
                    1104
                ],
                "_data": [
                    1104
                ],
                "np.concatenate": [
                    1393,
                    1108,
                    1117
                ],
                "data.items.take": [
                    1109
                ],
                "np.sort": [
                    1109
                ],
                "deleted": [
                    1120,
                    1117
                ],
                "ai": [
                    1121,
                    1118
                ],
                "mask.cumsum": [
                    1121
                ],
                "offset": [
                    1123,
                    1126,
                    1127
                ],
                "blk": [
                    1124,
                    1125,
                    1126,
                    1776,
                    1777
                ],
                "blk.mgr_locs": [
                    1777,
                    1125,
                    1126
                ],
                "AssertionError": [
                    1635,
                    1133,
                    1486
                ],
                "axis": [
                    1139,
                    1135
                ],
                "self._obj_with_exclusions": [
                    1154,
                    1450,
                    1646,
                    1136,
                    1360,
                    1436
                ],
                "Dict": [
                    1138,
                    1155
                ],
                "NDFrame": [
                    1232,
                    1138,
                    1155
                ],
                "obj._info_axis_number": [
                    1139
                ],
                "fres": [
                    1146,
                    1147,
                    1141,
                    1142
                ],
                "self.indices": [
                    1144
                ],
                "self.get_group": [
                    1145
                ],
                "self._wrap_frame_output": [
                    1149
                ],
                "cannot_agg": [
                    1180,
                    1171,
                    1156,
                    1179
                ],
                "item": [
                    1157,
                    1158,
                    1159,
                    1163,
                    1171,
                    1176
                ],
                "colg": [
                    1163,
                    1159
                ],
                "SeriesGroupBy": [
                    1746,
                    1834,
                    1631,
                    1159
                ],
                "colg.aggregate": [
                    1163
                ],
                "cannot_agg.append": [
                    1171
                ],
                "result_columns": [
                    1178,
                    1180,
                    1182
                ],
                "obj.columns": [
                    1641,
                    1522,
                    1523,
                    1178,
                    1404
                ],
                "result_columns.drop": [
                    1180
                ],
                "key_names": [
                    1188,
                    1213,
                    1222
                ],
                "com.not_none": [
                    1193
                ],
                "StopIteration": [
                    1194
                ],
                "v": [
                    1283,
                    1286,
                    1292,
                    1299,
                    1303,
                    1319,
                    1320,
                    1322,
                    1197,
                    1199,
                    1203,
                    1229,
                    1230,
                    1232,
                    1236,
                    1237,
                    1242,
                    1246,
                    1248,
                    1249
                ],
                "first_not_none": [
                    1229,
                    1197
                ],
                "key_index": [
                    1216,
                    1314,
                    1315,
                    1348,
                    1222,
                    1226,
                    1322,
                    1329,
                    1300,
                    1301,
                    1207,
                    1305,
                    1212,
                    1213
                ],
                "ping.ngroups": [
                    1211
                ],
                "key_index.name": [
                    1213
                ],
                "key_lookup": [
                    1216,
                    1215
                ],
                "key_lookup.get_indexer": [
                    1216
                ],
                "v._construct_axes_dict": [
                    1236
                ],
                "v._constructor": [
                    1242,
                    1237
                ],
                "backup": [
                    1242,
                    1244,
                    1238
                ],
                "applied_index": [
                    1250,
                    1252
                ],
                "self._selected_obj._get_axis": [
                    1250
                ],
                "all_indexed_same": [
                    1274,
                    1251,
                    1279
                ],
                "all_indexes_same": [
                    1251
                ],
                "x.index": [
                    1251
                ],
                "singular_series": [
                    1259,
                    1252
                ],
                "applied_index.nlevels": [
                    1252
                ],
                "self.squeeze": [
                    1257
                ],
                "v.index.copy": [
                    1286
                ],
                "v.index": [
                    1322,
                    1299,
                    1286
                ],
                "index.name": [
                    1294,
                    1287
                ],
                "v.name": [
                    1292
                ],
                "stacked_values": [
                    1320,
                    1305,
                    1322,
                    1303
                ],
                "np.vstack": [
                    1320,
                    1303
                ],
                "np.asarray": [
                    1320,
                    1303
                ],
                "unstack": [
                    1312
                ],
                "key_index.names": [
                    1315
                ],
                "stacked_values.T": [
                    1322
                ],
                "so": [
                    1333,
                    1334
                ],
                "so.ndim": [
                    1334
                ],
                "so.dtypes.apply": [
                    1334
                ],
                "so.dtypes": [
                    1334
                ],
                "needs_i8_conversion": [
                    1334
                ],
                "_recast_datetimelike_result": [
                    1335
                ],
                "should_coerce": [
                    1344,
                    1349
                ],
                "Timestamp": [
                    1344
                ],
                "applied": [
                    1400,
                    1402,
                    1406,
                    1359
                ],
                "gen": [
                    1361,
                    1565,
                    1365,
                    1567
                ],
                "self.grouper.get_iterator": [
                    1361,
                    1565
                ],
                "fast_path": [
                    1473,
                    1477,
                    1485,
                    1362,
                    1371,
                    1468,
                    1373,
                    1502
                ],
                "slow_path": [
                    1474,
                    1477,
                    1480,
                    1481,
                    1362,
                    1371,
                    1469
                ],
                "self._define_paths": [
                    1362
                ],
                "path": [
                    1504,
                    1378,
                    1496,
                    1480,
                    1491,
                    1364,
                    1499,
                    1368,
                    1371,
                    1502
                ],
                "self._choose_path": [
                    1371
                ],
                "self._transform_item_by_item": [
                    1373
                ],
                "np.prod": [
                    1385
                ],
                "group.shape": [
                    1385,
                    1394
                ],
                "res.index.is_": [
                    1387
                ],
                "res.index": [
                    1387
                ],
                "obj.index": [
                    1643,
                    1387,
                    1526,
                    1464,
                    1404
                ],
                "r": [
                    1388,
                    1389,
                    1390,
                    1392,
                    1400
                ],
                "group.columns": [
                    1396,
                    1498,
                    1388,
                    1389
                ],
                "r.columns": [
                    1389
                ],
                "r.index": [
                    1390
                ],
                "group.index": [
                    1393,
                    1397,
                    1390
                ],
                "reshape": [
                    1776,
                    1393
                ],
                "res.values": [
                    1393
                ],
                "applied.append": [
                    1400,
                    1402
                ],
                "concat_index": [
                    1404,
                    1407
                ],
                "other_axis": [
                    1858,
                    1405,
                    1846,
                    1407
                ],
                "concatenated": [
                    1408,
                    1406,
                    1407
                ],
                "concatenated.reindex": [
                    1407
                ],
                "self._set_result_index_ordered": [
                    1408
                ],
                "base.reduction_kernels": [
                    1429
                ],
                "result.columns.equals": [
                    1435
                ],
                "self._obj_with_exclusions.columns": [
                    1436
                ],
                "output.append": [
                    1462
                ],
                "DataFrame._from_arrays": [
                    1464
                ],
                "group.apply": [
                    1474,
                    1469
                ],
                "res_fast": [
                    1501,
                    1498,
                    1485,
                    1495
                ],
                "Exception": [
                    1488
                ],
                "res_fast.columns.equals": [
                    1498
                ],
                "res_fast.columns": [
                    1498
                ],
                "res_fast.equals": [
                    1501
                ],
                "inds": [
                    1517,
                    1524,
                    1509
                ],
                "transform": [
                    1512
                ],
                "inds.append": [
                    1517
                ],
                "columns.take": [
                    1524
                ],
                "res.squeeze": [
                    1573
                ],
                "AttributeError": [
                    1574
                ],
                "is_bool": [
                    1578
                ],
                "is_scalar": [
                    1578
                ],
                "indices.append": [
                    1580
                ],
                "__name__": [
                    1584
                ],
                "warnings.warn": [
                    1595
                ],
                "warnings": [
                    1595
                ],
                "FutureWarning": [
                    1598
                ],
                "__getitem__": [
                    1601
                ],
                "ndim": [
                    1616,
                    1628
                ],
                "subset": [
                    1632,
                    1617,
                    1618,
                    1620,
                    1629,
                    1630
                ],
                "DataFrameGroupBy": [
                    1619
                ],
                "result_index": [
                    1641,
                    1643,
                    1638
                ],
                "self.grouper.levels": [
                    1638
                ],
                "T": [
                    1641
                ],
                "obj.T._data": [
                    1648
                ],
                "obj._data": [
                    1650
                ],
                "izip": [
                    1665,
                    1654
                ],
                "map": [
                    1655
                ],
                "reversed": [
                    1656
                ],
                "self.grouper.get_group_levels": [
                    1659
                ],
                "grp.in_axis": [
                    1660
                ],
                "grp": [
                    1660
                ],
                "in_axis": [
                    1665,
                    1666
                ],
                "result.insert": [
                    1667
                ],
                "result._consolidate": [
                    1692,
                    1733
                ],
                "values.shape": [
                    1728
                ],
                "blocks": [
                    1728,
                    1729,
                    1736,
                    1782,
                    1784
                ],
                "mgr": [
                    1736,
                    1729,
                    1730,
                    1737
                ],
                "items": [
                    1736,
                    1729
                ],
                "colname": [
                    1745,
                    1746,
                    1748
                ],
                "self._selected_obj.iloc": [
                    1747
                ],
                "col_groupby": [
                    1757
                ],
                "self._iterate_column_groupbys": [
                    1757
                ],
                "vals": [
                    1776,
                    1780
                ],
                "blk.values": [
                    1776
                ],
                "blk.shape": [
                    1776
                ],
                "counted": [
                    1779,
                    1782
                ],
                "lib.count_level_2d": [
                    1780
                ],
                "lib": [
                    1780
                ],
                "make_block": [
                    1782
                ],
                "nunique": [
                    1834
                ],
                "groupby_series": [
                    1852,
                    1839
                ],
                "axis_number": [
                    1855,
                    1845,
                    1846,
                    1847
                ],
                "obj._get_axis_number": [
                    1845
                ],
                "iter_func": [
                    1848,
                    1850,
                    1852
                ],
                "obj.iterrows": [
                    1850
                ],
                "content": [
                    1852
                ],
                "results.T": [
                    1856
                ],
                "results._get_axis": [
                    1858
                ],
                "obj._get_axis": [
                    1858
                ],
                "results.index": [
                    1861
                ],
                "ibase.default_index": [
                    1861
                ],
                "ibase": [
                    1861
                ],
                "boxplot": [
                    1864
                ],
                "boxplot_frame_groupby": [
                    1864
                ],
                "result.copy": [
                    1885
                ],
                "obj_cols": [
                    1894,
                    1887
                ],
                "range": [
                    1889
                ],
                "is_object_dtype": [
                    1890
                ],
                "result.dtypes.iloc": [
                    1890
                ],
                "result.dtypes": [
                    1890
                ],
                "n": [
                    1896,
                    1899,
                    1894
                ],
                "converted": [
                    1899,
                    1895
                ],
                "maybe_convert_objects": [
                    1895
                ]
            },
            "filtered_variables_in_file": {
                "TYPE_CHECKING": [
                    79
                ],
                "NamedAgg": [
                    83
                ],
                "namedtuple": [
                    83
                ],
                "AggScalar": [
                    85
                ],
                "Union": [
                    1155,
                    357,
                    1670,
                    1703,
                    392,
                    333,
                    334,
                    367,
                    368,
                    1138,
                    85
                ],
                "Callable": [
                    85,
                    1479
                ],
                "Any": [
                    85
                ],
                "ScalarResult": [
                    89
                ],
                "typing.TypeVar": [
                    89
                ],
                "typing": [
                    89
                ],
                "Type": [
                    115,
                    92
                ],
                "FrameOrSeries": [
                    115,
                    92
                ],
                "self._make_wrapper": [
                    107
                ],
                "self": [
                    512,
                    516,
                    517,
                    525,
                    526,
                    1039,
                    529,
                    530,
                    1045,
                    1047,
                    1564,
                    1565,
                    1580,
                    1588,
                    573,
                    578,
                    590,
                    592,
                    1618,
                    1621,
                    1623,
                    1624,
                    1625,
                    1626,
                    1630,
                    1632,
                    1638,
                    1640,
                    107,
                    1132,
                    1646,
                    1135,
                    624,
                    1136,
                    1647,
                    1140,
                    631,
                    632,
                    1144,
                    1145,
                    1658,
                    636,
                    637,
                    1149,
                    1659,
                    1660,
                    1154,
                    1159,
                    1161,
                    651,
                    659,
                    660,
                    1176,
                    1690,
                    1691,
                    156,
                    1694,
                    1697,
                    1188,
                    165,
                    166,
                    1700,
                    168,
                    1204,
                    1205,
                    1206,
                    1207,
                    698,
                    1210,
                    700,
                    701,
                    1722,
                    1727,
                    1732,
                    1735,
                    1225,
                    1739,
                    1742,
                    1745,
                    1747,
                    1749,
                    1750,
                    733,
                    1757,
                    1758,
                    1250,
                    1257,
                    1771,
                    1772,
                    1268,
                    1784,
                    250,
                    765,
                    256,
                    1281,
                    1283,
                    260,
                    262,
                    264,
                    265,
                    776,
                    777,
                    268,
                    272,
                    274,
                    786,
                    787,
                    790,
                    279,
                    794,
                    800,
                    1316,
                    1831,
                    296,
                    808,
                    809,
                    1834,
                    1329,
                    1333,
                    1845,
                    1339,
                    316,
                    320,
                    1860,
                    1354,
                    1360,
                    1361,
                    1362,
                    1371,
                    1373,
                    1404,
                    1405,
                    1406,
                    1408,
                    386,
                    387,
                    389,
                    1415,
                    1418,
                    1425,
                    1433,
                    412,
                    1436,
                    1438,
                    1440,
                    931,
                    421,
                    424,
                    425,
                    938,
                    427,
                    939,
                    941,
                    1448,
                    943,
                    1450,
                    433,
                    945,
                    1454,
                    436,
                    437,
                    1461,
                    951,
                    441,
                    444,
                    956,
                    1470,
                    447,
                    448,
                    959,
                    962,
                    963,
                    1475,
                    453,
                    465,
                    977,
                    978,
                    468,
                    981,
                    986,
                    475,
                    480,
                    481,
                    994,
                    997,
                    487,
                    1512,
                    490,
                    1005,
                    497,
                    1023
                ],
                "name": [
                    1665,
                    1667,
                    137,
                    138,
                    143,
                    144,
                    1567,
                    1568,
                    1580,
                    315,
                    573,
                    320,
                    323,
                    324,
                    453,
                    454,
                    458,
                    1365,
                    1366,
                    490,
                    107,
                    491,
                    109,
                    1260,
                    111,
                    497,
                    1140,
                    1142,
                    1144,
                    1145,
                    1147
                ],
                "parent_method": [
                    109,
                    110
                ],
                "klass": [
                    498,
                    487,
                    109,
                    143
                ],
                "prop.__doc__": [
                    110
                ],
                "prop": [
                    110,
                    143,
                    112,
                    144,
                    111
                ],
                "parent_method.__doc__": [
                    110
                ],
                "prop.__name__": [
                    111
                ],
                "FrozenSet": [
                    115
                ],
                "whitelist": [
                    137
                ],
                "cls": [
                    144,
                    138,
                    146
                ],
                "generate_property": [
                    143
                ],
                "pinner": [
                    148
                ],
                "GroupBy": [
                    152,
                    816
                ],
                "_apply_whitelist": [
                    153,
                    818
                ],
                "base.series_apply_whitelist": [
                    153,
                    151
                ],
                "base": [
                    1670,
                    1703,
                    392,
                    473,
                    333,
                    1420,
                    367,
                    1423,
                    815,
                    818,
                    1429,
                    470,
                    151,
                    153
                ],
                "self._selected_obj": [
                    512,
                    320,
                    1250,
                    516,
                    517,
                    487,
                    296,
                    1831,
                    977,
                    1745,
                    1747,
                    1333,
                    156,
                    1564,
                    1758,
                    959
                ],
                "Iterable": [
                    976,
                    155
                ],
                "Series": [
                    1670,
                    392,
                    393,
                    520,
                    652,
                    784,
                    530,
                    151,
                    155,
                    415,
                    672,
                    421,
                    1703,
                    296,
                    1838,
                    1329,
                    440,
                    447,
                    1348,
                    581,
                    456,
                    333,
                    334,
                    976,
                    981,
                    1237,
                    733,
                    1248,
                    1249,
                    1380,
                    357,
                    362,
                    367,
                    368,
                    631,
                    634,
                    507,
                    765,
                    767
                ],
                "self._selection": [
                    168,
                    165
                ],
                "self.obj.name": [
                    530,
                    166
                ],
                "self.obj": [
                    166,
                    777,
                    1039,
                    592,
                    529,
                    530,
                    1618,
                    660,
                    1722,
                    412,
                    1630
                ],
                "_agg_see_also_doc": [
                    170,
                    820,
                    230,
                    903
                ],
                "dedent": [
                    830,
                    170,
                    180,
                    820
                ],
                "_agg_examples_doc": [
                    904,
                    180,
                    830,
                    231
                ],
                "apply": [
                    227
                ],
                "func": [
                    256,
                    260,
                    1146,
                    1415,
                    265,
                    1161,
                    1163,
                    268,
                    1417,
                    1418,
                    1420,
                    272,
                    912,
                    914,
                    1421,
                    1423,
                    917,
                    1425,
                    1429,
                    1433,
                    794,
                    925,
                    1438,
                    1440,
                    929,
                    1570,
                    931,
                    939,
                    941,
                    561,
                    562,
                    945,
                    564,
                    951,
                    315,
                    956,
                    1467,
                    1468,
                    1470,
                    1473,
                    1475,
                    324,
                    455,
                    465,
                    1362,
                    467,
                    468,
                    470,
                    471,
                    473,
                    475,
                    1757,
                    480,
                    481,
                    227,
                    492,
                    239,
                    244,
                    1141,
                    249,
                    250,
                    252,
                    255
                ],
                "args": [
                    261,
                    1146,
                    265,
                    1418,
                    1163,
                    268,
                    272,
                    1425,
                    1433,
                    1440,
                    1570,
                    931,
                    939,
                    940,
                    941,
                    562,
                    564,
                    568,
                    1468,
                    1470,
                    1473,
                    1475,
                    455,
                    1362,
                    468,
                    475,
                    480,
                    227,
                    492,
                    1141,
                    250
                ],
                "kwargs": [
                    261,
                    1146,
                    265,
                    1418,
                    1163,
                    268,
                    272,
                    912,
                    914,
                    1425,
                    916,
                    1433,
                    1440,
                    1570,
                    931,
                    939,
                    940,
                    941,
                    562,
                    564,
                    568,
                    1468,
                    1470,
                    1473,
                    1475,
                    455,
                    1362,
                    468,
                    1236,
                    1239,
                    1242,
                    475,
                    480,
                    227,
                    492,
                    243,
                    244,
                    245,
                    1141,
                    250,
                    636
                ],
                "Appender": [
                    1411,
                    236,
                    909,
                    463,
                    634,
                    221
                ],
                "_apply_docs": [
                    222,
                    223
                ],
                "relabeling": [
                    257,
                    966,
                    239,
                    912,
                    913,
                    242
                ],
                "columns": [
                    258,
                    914,
                    1685,
                    1688,
                    299,
                    305,
                    308,
                    310,
                    1718,
                    312,
                    1721,
                    330,
                    970,
                    355,
                    360,
                    362,
                    240,
                    1522,
                    243,
                    244,
                    1524,
                    246,
                    1526
                ],
                "no_arg_message": [
                    241,
                    247
                ],
                "col": [
                    1512,
                    1834,
                    244,
                    1510
                ],
                "abc.Iterable": [
                    252
                ],
                "abc": [
                    252
                ],
                "maybe_mangle_lambdas": [
                    929,
                    255
                ],
                "ret": [
                    256,
                    258,
                    275,
                    282,
                    285,
                    286
                ],
                "self._aggregate_multiple_funcs": [
                    256,
                    951
                ],
                "ret.columns": [
                    258
                ],
                "cyfunc": [
                    260,
                    261,
                    262
                ],
                "self._get_cython_func": [
                    465,
                    260,
                    1415
                ],
                "self.grouper.nkeys": [
                    264,
                    938,
                    1132,
                    424
                ],
                "self.grouper": [
                    387,
                    1159,
                    264,
                    776,
                    525,
                    274,
                    659,
                    786,
                    1045,
                    1565,
                    1694,
                    1188,
                    424,
                    425,
                    809,
                    427,
                    938,
                    1834,
                    1454,
                    1205,
                    1206,
                    1207,
                    698,
                    1210,
                    700,
                    701,
                    1735,
                    590,
                    1361,
                    1621,
                    1749,
                    1623,
                    1632,
                    1638,
                    1132,
                    1772,
                    624,
                    1658,
                    1659,
                    1660,
                    1023
                ],
                "self._python_agg_general": [
                    265,
                    939,
                    268
                ],
                "result": [
                    514,
                    516,
                    517,
                    518,
                    527,
                    1047,
                    1054,
                    1056,
                    1062,
                    1065,
                    1066,
                    1067,
                    1068,
                    1070,
                    1072,
                    1074,
                    1076,
                    1080,
                    1083,
                    1084,
                    1088,
                    1090,
                    1100,
                    1101,
                    1104,
                    1641,
                    1643,
                    1138,
                    1142,
                    631,
                    632,
                    1147,
                    636,
                    1149,
                    638,
                    639,
                    1155,
                    1667,
                    1163,
                    1687,
                    1176,
                    1688,
                    1691,
                    1692,
                    1182,
                    1695,
                    1698,
                    1700,
                    1720,
                    1721,
                    1722,
                    1724,
                    1730,
                    1732,
                    1733,
                    1737,
                    1740,
                    1742,
                    272,
                    784,
                    274,
                    276,
                    790,
                    1304,
                    1312,
                    1318,
                    1321,
                    1335,
                    1337,
                    1339,
                    1885,
                    1889,
                    1890,
                    357,
                    359,
                    360,
                    1896,
                    362,
                    1899,
                    364,
                    1900,
                    386,
                    389,
                    1433,
                    1435,
                    412,
                    1438,
                    415,
                    416,
                    931,
                    933,
                    935,
                    941,
                    1456,
                    433,
                    945,
                    1457,
                    436,
                    437,
                    438,
                    951,
                    1464,
                    956,
                    958,
                    447,
                    448,
                    959,
                    451,
                    963,
                    964,
                    969,
                    458,
                    970,
                    460,
                    972,
                    480,
                    481,
                    505,
                    507,
                    1020,
                    1023
                ],
                "self._aggregate_named": [
                    272
                ],
                "index": [
                    1286,
                    1287,
                    1294,
                    274,
                    276,
                    1305,
                    1694,
                    1695,
                    1318,
                    425,
                    427,
                    428,
                    432,
                    433,
                    1728,
                    1729,
                    1735,
                    1736,
                    359,
                    362
                ],
                "Index": [
                    1248,
                    355,
                    1222,
                    423,
                    456,
                    427,
                    1726,
                    333,
                    274,
                    1685,
                    1718,
                    958,
                    1215
                ],
                "self.grouper.names": [
                    1188,
                    425,
                    427,
                    274,
                    1658,
                    701
                ],
                "create_series_with_explicit_dtype": [
                    275,
                    1238
                ],
                "self.as_index": [
                    962,
                    1860,
                    1225,
                    279,
                    1625,
                    1690,
                    1727
                ],
                "concat": [
                    1312,
                    1853,
                    1388,
                    505,
                    1756,
                    285,
                    1406,
                    1277
                ],
                "Substitution": [
                    1410,
                    902,
                    229,
                    462
                ],
                "_shared_docs": [
                    236,
                    909
                ],
                "agg": [
                    288,
                    974
                ],
                "aggregate": [
                    288,
                    974
                ],
                "arg": [
                    291,
                    299,
                    300,
                    301,
                    302,
                    305,
                    309,
                    312,
                    315
                ],
                "SpecificationError": [
                    297,
                    921
                ],
                "arg.keys": [
                    299
                ],
                "arg.items": [
                    300
                ],
                "x": [
                    1344,
                    801,
                    1251,
                    1475,
                    326,
                    301,
                    302,
                    562,
                    1244,
                    564,
                    1780,
                    1047,
                    568,
                    636,
                    1470
                ],
                "f": [
                    309,
                    310
                ],
                "columns.append": [
                    310
                ],
                "com.get_callable_name": [
                    310
                ],
                "com": [
                    1193,
                    310
                ],
                "results": [
                    1856,
                    1858,
                    324,
                    1861,
                    326,
                    1862,
                    328,
                    489,
                    330,
                    1839,
                    499,
                    502,
                    505,
                    314,
                    1852,
                    1853
                ],
                "obj": [
                    1154,
                    1157,
                    1158,
                    1039,
                    1040,
                    1043,
                    1045,
                    1178,
                    1564,
                    1565,
                    1831,
                    1450,
                    1834,
                    1838,
                    1839,
                    1461,
                    1845,
                    1464,
                    1848,
                    1850,
                    316,
                    321,
                    322,
                    323,
                    324,
                    1858,
                    1360,
                    977,
                    1361,
                    979,
                    981,
                    983,
                    985,
                    1373,
                    1510,
                    1641,
                    1387,
                    1643,
                    1646,
                    1136,
                    1648,
                    1522,
                    1139,
                    1523,
                    1650,
                    1526,
                    1145,
                    1404,
                    1149
                ],
                "copy.copy": [
                    321
                ],
                "copy": [
                    321
                ],
                "obj._reset_cache": [
                    322
                ],
                "obj._selection": [
                    323
                ],
                "obj.aggregate": [
                    324
                ],
                "DataFrame": [
                    1671,
                    1687,
                    1304,
                    1435,
                    1182,
                    1054,
                    1186,
                    1442,
                    1704,
                    1321,
                    1070,
                    815,
                    433,
                    1202,
                    1203,
                    1464,
                    1720,
                    442,
                    1726,
                    1730,
                    326,
                    1479,
                    1737,
                    330,
                    1867,
                    334,
                    1231,
                    1495,
                    993,
                    1506,
                    357,
                    1637,
                    359,
                    1641,
                    1131,
                    1643,
                    368,
                    1392,
                    1526,
                    1015,
                    1151
                ],
                "results.values": [
                    326
                ],
                "Mapping": [
                    1670,
                    1703,
                    392,
                    333,
                    367
                ],
                "base.OutputKey": [
                    1670,
                    1703,
                    392,
                    333,
                    367
                ],
                "np.ndarray": [
                    1248,
                    1670,
                    1703,
                    392,
                    456,
                    1067,
                    333,
                    367,
                    1138,
                    755,
                    1011,
                    1012,
                    1014,
                    1076
                ],
                "np": [
                    1670,
                    392,
                    648,
                    782,
                    1303,
                    421,
                    679,
                    1320,
                    681,
                    1703,
                    1067,
                    686,
                    690,
                    692,
                    1076,
                    695,
                    1728,
                    964,
                    456,
                    712,
                    715,
                    333,
                    1103,
                    595,
                    723,
                    1108,
                    1109,
                    601,
                    602,
                    1117,
                    1118,
                    1119,
                    1248,
                    737,
                    610,
                    739,
                    613,
                    743,
                    1385,
                    619,
                    748,
                    367,
                    751,
                    1393,
                    1138,
                    755,
                    628,
                    756,
                    1011,
                    1012,
                    1014,
                    507
                ],
                "indexed_output": [
                    354,
                    359,
                    362,
                    1684,
                    1717,
                    1687,
                    1720
                ],
                "key.position": [
                    354,
                    1684,
                    1717
                ],
                "key": [
                    1632,
                    1601,
                    354,
                    355,
                    1684,
                    1685,
                    1622,
                    1717,
                    1592,
                    1718,
                    1630
                ],
                "val": [
                    672,
                    354,
                    777,
                    779,
                    592,
                    594,
                    660,
                    1684,
                    1717,
                    1782,
                    664,
                    667
                ],
                "output.items": [
                    354,
                    1684,
                    1717
                ],
                "output": [
                    387,
                    1684,
                    1685,
                    411,
                    412,
                    1455,
                    1717,
                    1462,
                    1718,
                    1464,
                    455,
                    456,
                    458,
                    354,
                    355,
                    1508,
                    358,
                    1512,
                    1519,
                    1523,
                    1526
                ],
                "key.label": [
                    355,
                    1685,
                    1718
                ],
                "result.columns": [
                    1889,
                    1318,
                    360,
                    970,
                    1688,
                    1456,
                    1464,
                    1721,
                    1435,
                    958,
                    959
                ],
                "self._wrap_series_output": [
                    386,
                    412
                ],
                "self.grouper.result_index": [
                    387,
                    1735,
                    624,
                    786,
                    1207,
                    1694
                ],
                "_convert": [
                    1700,
                    1348,
                    389,
                    1742
                ],
                "self._reindex_output": [
                    448,
                    1700,
                    389,
                    1742,
                    433,
                    790,
                    632,
                    1339
                ],
                "self.obj.index": [
                    1722,
                    530,
                    412
                ],
                "keys": [
                    1185,
                    1186,
                    419,
                    1281,
                    421,
                    1222,
                    425,
                    1354,
                    427,
                    1260,
                    1204,
                    1269,
                    441,
                    1211,
                    444,
                    1215
                ],
                "self._selection_name": [
                    421,
                    733,
                    765,
                    1329,
                    787,
                    437,
                    631,
                    701,
                    447
                ],
                "np.float64": [
                    507,
                    421
                ],
                "MultiIndex.from_tuples": [
                    425
                ],
                "MultiIndex": [
                    425,
                    1299,
                    1301,
                    727,
                    761
                ],
                "values": [
                    1281,
                    1292,
                    1303,
                    1313,
                    1320,
                    1193,
                    1066,
                    1197,
                    430,
                    433,
                    1329,
                    1457,
                    1204,
                    440,
                    441,
                    442,
                    444,
                    447,
                    1344,
                    1728,
                    1219,
                    1348,
                    1354,
                    1229,
                    985,
                    1244,
                    989,
                    1246,
                    1251,
                    1252,
                    1896,
                    1260,
                    1269,
                    1277
                ],
                "_get_index": [
                    432,
                    447
                ],
                "result.stack": [
                    436
                ],
                "self.observed": [
                    1632,
                    1626,
                    436
                ],
                "result.name": [
                    516,
                    437
                ],
                "self._concat_objects": [
                    1281,
                    1354,
                    1204,
                    1268,
                    441,
                    444
                ],
                "not_indexed_same": [
                    1354,
                    1204,
                    1269,
                    441,
                    444
                ],
                "group": [
                    1567,
                    1568,
                    1570,
                    1468,
                    573,
                    1469,
                    1473,
                    1474,
                    453,
                    454,
                    455,
                    1481,
                    1485,
                    1365,
                    1366,
                    1498,
                    1371,
                    1378,
                    1385,
                    490,
                    491,
                    492,
                    1388,
                    1389,
                    1390,
                    1393,
                    1394,
                    1396,
                    1397
                ],
                "group.name": [
                    454
                ],
                "self._transform_general": [
                    1440,
                    1418,
                    468
                ],
                "base.transform_kernel_whitelist": [
                    1420,
                    470
                ],
                "msg": [
                    1376,
                    1421,
                    1422,
                    471,
                    472,
                    1375
                ],
                "base.cythonized_kernels": [
                    473,
                    1423
                ],
                "self._transform_fast": [
                    481,
                    1438
                ],
                "_transform_template": [
                    1411,
                    463
                ],
                "object.__setattr__": [
                    1568,
                    491,
                    1366
                ],
                "res": [
                    1570,
                    1573,
                    1578,
                    1579,
                    1584,
                    1457,
                    1461,
                    1462,
                    1481,
                    1491,
                    1496,
                    1371,
                    1499,
                    1501,
                    1504,
                    1378,
                    1380,
                    618,
                    1387,
                    492,
                    621,
                    494,
                    495,
                    623,
                    1388,
                    498,
                    627,
                    628,
                    629,
                    1393,
                    631,
                    1402
                ],
                "ABCDataFrame": [
                    494
                ],
                "ABCSeries": [
                    1283,
                    494,
                    1319
                ],
                "res._values": [
                    495
                ],
                "indexer": [
                    1216,
                    1121,
                    1219,
                    1126,
                    497,
                    498,
                    1108,
                    1109
                ],
                "self._get_index": [
                    497,
                    1580,
                    573
                ],
                "ser": [
                    498,
                    499
                ],
                "results.append": [
                    499
                ],
                "sort_index": [
                    505
                ],
                "dtype": [
                    512,
                    513,
                    514
                ],
                "self._selected_obj.dtype": [
                    512
                ],
                "is_numeric_dtype": [
                    513
                ],
                "maybe_downcast_to_dtype": [
                    514
                ],
                "self._selected_obj.name": [
                    516
                ],
                "result.index": [
                    1722,
                    964,
                    517,
                    1695
                ],
                "self._selected_obj.index": [
                    517
                ],
                "ids": [
                    776,
                    779,
                    780,
                    525,
                    782,
                    527,
                    659,
                    663,
                    664,
                    679,
                    681,
                    683,
                    686,
                    1454,
                    1457,
                    712,
                    714,
                    590,
                    722,
                    595,
                    597,
                    601,
                    614,
                    617,
                    1772,
                    1773,
                    1780,
                    629
                ],
                "_": [
                    776,
                    747,
                    1772,
                    525,
                    590,
                    1454,
                    1456,
                    594,
                    659,
                    1757,
                    1023
                ],
                "ngroup": [
                    525,
                    1454
                ],
                "self.grouper.group_info": [
                    776,
                    1772,
                    525,
                    1454,
                    590,
                    659
                ],
                "cast": [
                    1448,
                    1161,
                    526,
                    528,
                    1460,
                    1175,
                    1054
                ],
                "self._transform_should_cast": [
                    1448,
                    1161,
                    526
                ],
                "func_nm": [
                    1448,
                    526
                ],
                "out": [
                    782,
                    527,
                    529,
                    530,
                    785,
                    692,
                    708,
                    711,
                    719,
                    723,
                    724,
                    731,
                    732,
                    733,
                    737,
                    613,
                    618,
                    748,
                    621,
                    623,
                    751,
                    752,
                    628,
                    629,
                    763,
                    764,
                    765
                ],
                "algorithms.take_1d": [
                    1457,
                    527
                ],
                "algorithms": [
                    1457,
                    594,
                    667,
                    527
                ],
                "result._values": [
                    527
                ],
                "self._try_cast": [
                    1176,
                    529,
                    1461
                ],
                "wrapper": [
                    568,
                    562,
                    1512,
                    564
                ],
                "b": [
                    568,
                    569
                ],
                "notna": [
                    569,
                    1579
                ],
                "indices": [
                    578,
                    1580,
                    1588,
                    1562,
                    572
                ],
                "true_and_notna": [
                    573
                ],
                "err": [
                    576,
                    953,
                    1376,
                    1166
                ],
                "filtered": [
                    578,
                    579
                ],
                "self._apply_filter": [
                    578,
                    1588
                ],
                "dropna": [
                    706,
                    578,
                    713,
                    1835,
                    722,
                    1588,
                    606,
                    703
                ],
                "self.obj._values": [
                    592,
                    777,
                    660
                ],
                "codes": [
                    704,
                    738,
                    708,
                    745,
                    728,
                    594,
                    595,
                    596,
                    724,
                    758,
                    759,
                    698,
                    761,
                    602,
                    699,
                    605
                ],
                "algorithms.factorize": [
                    594,
                    667
                ],
                "sorter": [
                    679,
                    681,
                    683,
                    751,
                    752,
                    595,
                    596,
                    597,
                    723,
                    724
                ],
                "np.lexsort": [
                    679,
                    681,
                    751,
                    595,
                    723
                ],
                "idx": [
                    1888,
                    1889,
                    1890,
                    611,
                    613,
                    712,
                    619,
                    747,
                    748,
                    686,
                    691,
                    629,
                    695,
                    601,
                    607
                ],
                "np.r_": [
                    610,
                    739,
                    712,
                    686,
                    690,
                    692,
                    601,
                    602
                ],
                "np.nonzero": [
                    601,
                    692,
                    686
                ],
                "inc": [
                    608,
                    610,
                    611,
                    675,
                    613,
                    690,
                    691,
                    692,
                    722,
                    695,
                    602,
                    699,
                    668,
                    607
                ],
                "mask": [
                    608,
                    704,
                    610,
                    705,
                    708,
                    1120,
                    1121,
                    779,
                    716,
                    1773,
                    782,
                    1776,
                    722,
                    663,
                    664,
                    605,
                    1119
                ],
                "astype": [
                    613
                ],
                "np.add.reduceat": [
                    613,
                    695
                ],
                "np.add": [
                    715,
                    613,
                    695
                ],
                "np.flatnonzero": [
                    619
                ],
                "ri": [
                    624,
                    627,
                    628,
                    631
                ],
                "np.zeros": [
                    737,
                    628,
                    1119
                ],
                "out.dtype": [
                    628
                ],
                "self.apply": [
                    800,
                    651,
                    636
                ],
                "x.describe": [
                    636
                ],
                "self.axis": [
                    1283,
                    637,
                    1047,
                    1565,
                    1697,
                    1316,
                    943,
                    1845,
                    951,
                    1470,
                    1475,
                    1739,
                    1361,
                    978,
                    1250,
                    1640,
                    1135,
                    1647,
                    1404,
                    1405,
                    1406
                ],
                "result.T": [
                    1698,
                    1740,
                    638
                ],
                "result.unstack": [
                    639
                ],
                "Series.describe.__doc__": [
                    634
                ],
                "Series.describe": [
                    634
                ],
                "bins": [
                    672,
                    648,
                    656,
                    721,
                    726,
                    666
                ],
                "np.iterable": [
                    648
                ],
                "Series.value_counts": [
                    652
                ],
                "normalize": [
                    653,
                    710
                ],
                "sort": [
                    721,
                    654,
                    750
                ],
                "ascending": [
                    751,
                    723,
                    655
                ],
                "lab": [
                    672,
                    673,
                    674,
                    675,
                    677,
                    679,
                    681,
                    714,
                    683,
                    689,
                    667,
                    668,
                    699
                ],
                "lev": [
                    673,
                    674,
                    1665,
                    1667,
                    667,
                    700
                ],
                "llab": [
                    689,
                    675,
                    668,
                    699
                ],
                "cut": [
                    672
                ],
                "lab.cat.categories": [
                    673
                ],
                "lab.cat": [
                    673,
                    674
                ],
                "lev.take": [
                    674
                ],
                "lab.cat.codes": [
                    674
                ],
                "_multiindex.codes": [
                    675
                ],
                "_multiindex": [
                    675
                ],
                "is_interval_dtype": [
                    677
                ],
                "lab.left": [
                    679
                ],
                "lab.right": [
                    679
                ],
                "lchanges": [
                    689,
                    690
                ],
                "np.diff": [
                    712,
                    692
                ],
                "rep": [
                    699,
                    716,
                    718,
                    695
                ],
                "partial": [
                    695
                ],
                "np.repeat": [
                    743,
                    756,
                    695
                ],
                "self.grouper.reconstructed_codes": [
                    698
                ],
                "level_codes": [
                    738,
                    699,
                    708,
                    739
                ],
                "levels": [
                    728,
                    761,
                    700,
                    741
                ],
                "ping.group_index": [
                    1212,
                    700
                ],
                "ping": [
                    1210,
                    1211,
                    700,
                    1212
                ],
                "self.grouper.groupings": [
                    700,
                    1205,
                    1206,
                    1210,
                    1660
                ],
                "names": [
                    1858,
                    1292,
                    1293,
                    1294,
                    728,
                    761,
                    701
                ],
                "mask.all": [
                    705
                ],
                "out.astype": [
                    711
                ],
                "d": [
                    712,
                    715,
                    716,
                    718
                ],
                "m": [
                    714,
                    715
                ],
                "np.add.at": [
                    715
                ],
                "acc": [
                    716,
                    718,
                    719
                ],
                "cat": [
                    722,
                    723
                ],
                "mi": [
                    761,
                    733,
                    765,
                    727
                ],
                "is_integer_dtype": [
                    731,
                    763
                ],
                "ensure_int64": [
                    732,
                    764
                ],
                "diff": [
                    737,
                    739,
                    741,
                    745,
                    756
                ],
                "ncat": [
                    741,
                    743
                ],
                "nbin": [
                    756,
                    741,
                    743
                ],
                "diff.sum": [
                    741
                ],
                "left": [
                    743,
                    747,
                    751,
                    752,
                    759
                ],
                "np.arange": [
                    1728,
                    964,
                    1118,
                    743
                ],
                "np.tile": [
                    743
                ],
                "right": [
                    745,
                    747
                ],
                "diff.cumsum": [
                    745
                ],
                "_get_join_indexers": [
                    747
                ],
                "np.where": [
                    748
                ],
                "lev_codes": [
                    756,
                    758
                ],
                "build_codes": [
                    758
                ],
                "codes.append": [
                    759
                ],
                "ngroups": [
                    776,
                    1772,
                    781,
                    1780
                ],
                "isna": [
                    1776,
                    1578,
                    779
                ],
                "ensure_platform_int": [
                    780
                ],
                "minlength": [
                    781,
                    782
                ],
                "np.bincount": [
                    782
                ],
                "freq": [
                    802,
                    810,
                    799
                ],
                "x.pct_change": [
                    801
                ],
                "periods": [
                    802,
                    810
                ],
                "fill_method": [
                    808,
                    802,
                    805,
                    806
                ],
                "limit": [
                    808,
                    802,
                    807
                ],
                "filled": [
                    808,
                    809,
                    812
                ],
                "fill_grp": [
                    809,
                    810
                ],
                "filled.groupby": [
                    809
                ],
                "self.grouper.codes": [
                    809
                ],
                "shifted": [
                    810,
                    812
                ],
                "fill_grp.shift": [
                    810
                ],
                "pin_whitelisted_properties": [
                    815,
                    151
                ],
                "base.dataframe_apply_whitelist": [
                    818,
                    815
                ],
                "is_multi_agg_with_relabel": [
                    912
                ],
                "order": [
                    969,
                    914
                ],
                "normalize_keyword_aggregation": [
                    914
                ],
                "how": [
                    1024,
                    931,
                    932,
                    995,
                    1034
                ],
                "self._aggregate": [
                    931
                ],
                "self._aggregate_frame": [
                    945,
                    956,
                    941
                ],
                "result.columns.levels": [
                    959
                ],
                "self._selected_obj.columns.name": [
                    959
                ],
                "self._selected_obj.columns": [
                    1745,
                    1758,
                    959
                ],
                "self._insert_inaxis_grouper_inplace": [
                    1732,
                    963,
                    1691
                ],
                "result.iloc": [
                    1896,
                    969,
                    1899,
                    1104,
                    1457
                ],
                "result._convert": [
                    1337,
                    972
                ],
                "obj.T": [
                    1648,
                    979
                ],
                "obj.name": [
                    981
                ],
                "self.exclusions": [
                    1624,
                    986,
                    981,
                    1750
                ],
                "label": [
                    985,
                    986,
                    1852
                ],
                "obj.items": [
                    1848,
                    985
                ],
                "agg_blocks": [
                    994,
                    1124,
                    1093,
                    997,
                    1095,
                    1129,
                    1104,
                    1010
                ],
                "agg_items": [
                    1129,
                    994,
                    1109,
                    997
                ],
                "self._cython_agg_blocks": [
                    994
                ],
                "alt": [
                    995,
                    1047,
                    1031
                ],
                "numeric_only": [
                    995,
                    1007
                ],
                "min_count": [
                    1024,
                    995
                ],
                "self._wrap_agged_blocks": [
                    1784,
                    997
                ],
                "data": [
                    1146,
                    1158,
                    1159,
                    1771,
                    1005,
                    1039,
                    1008,
                    1776,
                    1777,
                    1784,
                    1140,
                    1109,
                    1141,
                    1176,
                    1145,
                    1018,
                    1118,
                    1119
                ],
                "BlockManager": [
                    1736,
                    1729,
                    1645,
                    1005
                ],
                "self._get_data_to_aggregate": [
                    1771,
                    1005
                ],
                "data.get_numeric_data": [
                    1008
                ],
                "List": [
                    1010,
                    1011,
                    1012,
                    1014,
                    1015
                ],
                "Block": [
                    1010,
                    1090
                ],
                "new_items": [
                    1011,
                    1092,
                    1108,
                    1103
                ],
                "deleted_items": [
                    1035,
                    1012,
                    1111,
                    1051,
                    1117
                ],
                "split_items": [
                    1098,
                    1100,
                    1061,
                    1014
                ],
                "split_frames": [
                    1095,
                    1100,
                    1062,
                    1015
                ],
                "no_result": [
                    1072,
                    1017,
                    1020
                ],
                "block": [
                    1024,
                    1090,
                    1074,
                    1076,
                    1018,
                    1083,
                    1084,
                    1021
                ],
                "data.blocks": [
                    1776,
                    1777,
                    1018
                ],
                "locs": [
                    1092,
                    1061,
                    1035,
                    1100,
                    1101,
                    1102,
                    1039,
                    1103,
                    1777,
                    1782,
                    1051,
                    1021
                ],
                "block.mgr_locs.as_array": [
                    1021
                ],
                "block.mgr_locs": [
                    1021
                ],
                "self.grouper.aggregate": [
                    1023
                ],
                "block.values": [
                    1024,
                    1083,
                    1084
                ],
                "deleted_items.append": [
                    1051,
                    1035
                ],
                "data.items": [
                    1784,
                    1109,
                    1039
                ],
                "obj.shape": [
                    1040
                ],
                "obj.iloc": [
                    1043,
                    1461
                ],
                "s": [
                    1045,
                    1047
                ],
                "get_groupby": [
                    1045
                ],
                "s.aggregate": [
                    1047
                ],
                "result._data.blocks": [
                    1056,
                    1065,
                    1066
                ],
                "result._data": [
                    1056,
                    1065,
                    1066
                ],
                "split_items.append": [
                    1061
                ],
                "split_frames.append": [
                    1062
                ],
                "result.ndim": [
                    1080,
                    1067
                ],
                "result.reshape": [
                    1088,
                    1068
                ],
                "maybe_downcast_numeric": [
                    1074
                ],
                "block.dtype": [
                    1074
                ],
                "block.is_extension": [
                    1076
                ],
                "result.shape": [
                    1080,
                    1101
                ],
                "_from_sequence": [
                    1083
                ],
                "result.ravel": [
                    1084
                ],
                "block.values.dtype": [
                    1084
                ],
                "agg_block": [
                    1090,
                    1093
                ],
                "block.make_block": [
                    1090
                ],
                "new_items.append": [
                    1092,
                    1103
                ],
                "agg_blocks.append": [
                    1104,
                    1093
                ],
                "DataError": [
                    1096
                ],
                "i": [
                    1219,
                    1510,
                    1517,
                    1102,
                    1104,
                    1456,
                    1457,
                    1745,
                    1747,
                    1461
                ],
                "loc": [
                    1125,
                    1126,
                    1127,
                    1102,
                    1103,
                    1782
                ],
                "np.array": [
                    1103
                ],
                "locs.dtype": [
                    1103
                ],
                "_data.blocks": [
                    1104
                ],
                "_data": [
                    1104
                ],
                "np.concatenate": [
                    1393,
                    1108,
                    1117
                ],
                "data.items.take": [
                    1109
                ],
                "np.sort": [
                    1109
                ],
                "deleted": [
                    1120,
                    1117
                ],
                "ai": [
                    1121,
                    1118
                ],
                "mask.cumsum": [
                    1121
                ],
                "offset": [
                    1123,
                    1126,
                    1127
                ],
                "blk": [
                    1124,
                    1125,
                    1126,
                    1776,
                    1777
                ],
                "blk.mgr_locs": [
                    1777,
                    1125,
                    1126
                ],
                "axis": [
                    1139,
                    1135
                ],
                "self._obj_with_exclusions": [
                    1154,
                    1450,
                    1646,
                    1136,
                    1360,
                    1436
                ],
                "Dict": [
                    1138,
                    1155
                ],
                "NDFrame": [
                    1232,
                    1138,
                    1155
                ],
                "obj._info_axis_number": [
                    1139
                ],
                "fres": [
                    1146,
                    1147,
                    1141,
                    1142
                ],
                "self.indices": [
                    1144
                ],
                "self.get_group": [
                    1145
                ],
                "self._wrap_frame_output": [
                    1149
                ],
                "cannot_agg": [
                    1180,
                    1171,
                    1156,
                    1179
                ],
                "item": [
                    1157,
                    1158,
                    1159,
                    1163,
                    1171,
                    1176
                ],
                "colg": [
                    1163,
                    1159
                ],
                "SeriesGroupBy": [
                    1746,
                    1834,
                    1631,
                    1159
                ],
                "colg.aggregate": [
                    1163
                ],
                "cannot_agg.append": [
                    1171
                ],
                "result_columns": [
                    1178,
                    1180,
                    1182
                ],
                "obj.columns": [
                    1641,
                    1522,
                    1523,
                    1178,
                    1404
                ],
                "result_columns.drop": [
                    1180
                ],
                "key_names": [
                    1188,
                    1213,
                    1222
                ],
                "com.not_none": [
                    1193
                ],
                "v": [
                    1283,
                    1286,
                    1292,
                    1299,
                    1303,
                    1319,
                    1320,
                    1322,
                    1197,
                    1199,
                    1203,
                    1229,
                    1230,
                    1232,
                    1236,
                    1237,
                    1242,
                    1246,
                    1248,
                    1249
                ],
                "first_not_none": [
                    1229,
                    1197
                ],
                "key_index": [
                    1216,
                    1314,
                    1315,
                    1348,
                    1222,
                    1226,
                    1322,
                    1329,
                    1300,
                    1301,
                    1207,
                    1305,
                    1212,
                    1213
                ],
                "ping.ngroups": [
                    1211
                ],
                "key_index.name": [
                    1213
                ],
                "key_lookup": [
                    1216,
                    1215
                ],
                "key_lookup.get_indexer": [
                    1216
                ],
                "v._construct_axes_dict": [
                    1236
                ],
                "v._constructor": [
                    1242,
                    1237
                ],
                "backup": [
                    1242,
                    1244,
                    1238
                ],
                "applied_index": [
                    1250,
                    1252
                ],
                "self._selected_obj._get_axis": [
                    1250
                ],
                "all_indexed_same": [
                    1274,
                    1251,
                    1279
                ],
                "all_indexes_same": [
                    1251
                ],
                "x.index": [
                    1251
                ],
                "singular_series": [
                    1259,
                    1252
                ],
                "applied_index.nlevels": [
                    1252
                ],
                "self.squeeze": [
                    1257
                ],
                "v.index.copy": [
                    1286
                ],
                "v.index": [
                    1322,
                    1299,
                    1286
                ],
                "index.name": [
                    1294,
                    1287
                ],
                "v.name": [
                    1292
                ],
                "stacked_values": [
                    1320,
                    1305,
                    1322,
                    1303
                ],
                "np.vstack": [
                    1320,
                    1303
                ],
                "np.asarray": [
                    1320,
                    1303
                ],
                "unstack": [
                    1312
                ],
                "key_index.names": [
                    1315
                ],
                "stacked_values.T": [
                    1322
                ],
                "so": [
                    1333,
                    1334
                ],
                "so.ndim": [
                    1334
                ],
                "so.dtypes.apply": [
                    1334
                ],
                "so.dtypes": [
                    1334
                ],
                "needs_i8_conversion": [
                    1334
                ],
                "_recast_datetimelike_result": [
                    1335
                ],
                "should_coerce": [
                    1344,
                    1349
                ],
                "Timestamp": [
                    1344
                ],
                "applied": [
                    1400,
                    1402,
                    1406,
                    1359
                ],
                "gen": [
                    1361,
                    1565,
                    1365,
                    1567
                ],
                "self.grouper.get_iterator": [
                    1361,
                    1565
                ],
                "fast_path": [
                    1473,
                    1477,
                    1485,
                    1362,
                    1371,
                    1468,
                    1373,
                    1502
                ],
                "slow_path": [
                    1474,
                    1477,
                    1480,
                    1481,
                    1362,
                    1371,
                    1469
                ],
                "self._define_paths": [
                    1362
                ],
                "path": [
                    1504,
                    1378,
                    1496,
                    1480,
                    1491,
                    1364,
                    1499,
                    1368,
                    1371,
                    1502
                ],
                "self._choose_path": [
                    1371
                ],
                "self._transform_item_by_item": [
                    1373
                ],
                "np.prod": [
                    1385
                ],
                "group.shape": [
                    1385,
                    1394
                ],
                "res.index.is_": [
                    1387
                ],
                "res.index": [
                    1387
                ],
                "obj.index": [
                    1643,
                    1387,
                    1526,
                    1464,
                    1404
                ],
                "r": [
                    1388,
                    1389,
                    1390,
                    1392,
                    1400
                ],
                "group.columns": [
                    1396,
                    1498,
                    1388,
                    1389
                ],
                "r.columns": [
                    1389
                ],
                "r.index": [
                    1390
                ],
                "group.index": [
                    1393,
                    1397,
                    1390
                ],
                "reshape": [
                    1776,
                    1393
                ],
                "res.values": [
                    1393
                ],
                "applied.append": [
                    1400,
                    1402
                ],
                "concat_index": [
                    1404,
                    1407
                ],
                "other_axis": [
                    1858,
                    1405,
                    1846,
                    1407
                ],
                "concatenated": [
                    1408,
                    1406,
                    1407
                ],
                "concatenated.reindex": [
                    1407
                ],
                "self._set_result_index_ordered": [
                    1408
                ],
                "base.reduction_kernels": [
                    1429
                ],
                "result.columns.equals": [
                    1435
                ],
                "self._obj_with_exclusions.columns": [
                    1436
                ],
                "output.append": [
                    1462
                ],
                "DataFrame._from_arrays": [
                    1464
                ],
                "group.apply": [
                    1474,
                    1469
                ],
                "res_fast": [
                    1501,
                    1498,
                    1485,
                    1495
                ],
                "res_fast.columns.equals": [
                    1498
                ],
                "res_fast.columns": [
                    1498
                ],
                "res_fast.equals": [
                    1501
                ],
                "inds": [
                    1517,
                    1524,
                    1509
                ],
                "transform": [
                    1512
                ],
                "inds.append": [
                    1517
                ],
                "columns.take": [
                    1524
                ],
                "res.squeeze": [
                    1573
                ],
                "is_bool": [
                    1578
                ],
                "is_scalar": [
                    1578
                ],
                "indices.append": [
                    1580
                ],
                "warnings.warn": [
                    1595
                ],
                "warnings": [
                    1595
                ],
                "__getitem__": [
                    1601
                ],
                "ndim": [
                    1616,
                    1628
                ],
                "subset": [
                    1632,
                    1617,
                    1618,
                    1620,
                    1629,
                    1630
                ],
                "DataFrameGroupBy": [
                    1619
                ],
                "result_index": [
                    1641,
                    1643,
                    1638
                ],
                "self.grouper.levels": [
                    1638
                ],
                "T": [
                    1641
                ],
                "obj.T._data": [
                    1648
                ],
                "obj._data": [
                    1650
                ],
                "izip": [
                    1665,
                    1654
                ],
                "self.grouper.get_group_levels": [
                    1659
                ],
                "grp.in_axis": [
                    1660
                ],
                "grp": [
                    1660
                ],
                "in_axis": [
                    1665,
                    1666
                ],
                "result.insert": [
                    1667
                ],
                "result._consolidate": [
                    1692,
                    1733
                ],
                "values.shape": [
                    1728
                ],
                "blocks": [
                    1728,
                    1729,
                    1736,
                    1782,
                    1784
                ],
                "mgr": [
                    1736,
                    1729,
                    1730,
                    1737
                ],
                "items": [
                    1736,
                    1729
                ],
                "colname": [
                    1745,
                    1746,
                    1748
                ],
                "self._selected_obj.iloc": [
                    1747
                ],
                "col_groupby": [
                    1757
                ],
                "self._iterate_column_groupbys": [
                    1757
                ],
                "vals": [
                    1776,
                    1780
                ],
                "blk.values": [
                    1776
                ],
                "blk.shape": [
                    1776
                ],
                "counted": [
                    1779,
                    1782
                ],
                "lib.count_level_2d": [
                    1780
                ],
                "lib": [
                    1780
                ],
                "make_block": [
                    1782
                ],
                "nunique": [
                    1834
                ],
                "groupby_series": [
                    1852,
                    1839
                ],
                "axis_number": [
                    1855,
                    1845,
                    1846,
                    1847
                ],
                "obj._get_axis_number": [
                    1845
                ],
                "iter_func": [
                    1848,
                    1850,
                    1852
                ],
                "obj.iterrows": [
                    1850
                ],
                "content": [
                    1852
                ],
                "results.T": [
                    1856
                ],
                "results._get_axis": [
                    1858
                ],
                "obj._get_axis": [
                    1858
                ],
                "results.index": [
                    1861
                ],
                "ibase.default_index": [
                    1861
                ],
                "ibase": [
                    1861
                ],
                "boxplot": [
                    1864
                ],
                "boxplot_frame_groupby": [
                    1864
                ],
                "result.copy": [
                    1885
                ],
                "obj_cols": [
                    1894,
                    1887
                ],
                "is_object_dtype": [
                    1890
                ],
                "result.dtypes.iloc": [
                    1890
                ],
                "result.dtypes": [
                    1890
                ],
                "n": [
                    1896,
                    1899,
                    1894
                ],
                "converted": [
                    1899,
                    1895
                ],
                "maybe_convert_objects": [
                    1895
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/groupby/test_function.py",
                "test_function": "test_apply_to_nullable_integer_returns_float",
                "test_function_code": "@pytest.mark.parametrize(\n    \"values\",\n    [\n        {\n            \"a\": [1, 1, 1, 2, 2, 2, 3, 3, 3],\n            \"b\": [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2],\n        },\n        {\"a\": [1, 1, 2, 2, 3, 3], \"b\": [1, 2, 1, 2, 1, 2]},\n    ],\n)\n@pytest.mark.parametrize(\"function\", [\"mean\", \"median\", \"var\"])\ndef test_apply_to_nullable_integer_returns_float(values, function):\n    # https://github.com/pandas-dev/pandas/issues/32219\n    output = 0.5 if function == \"var\" else 1.5\n    arr = np.array([output] * 3, dtype=float)\n    idx = pd.Index([1, 2, 3], dtype=object, name=\"a\")\n    expected = pd.DataFrame({\"b\": arr}, index=idx)\n\n    groups = pd.DataFrame(values, dtype=\"Int64\").groupby(\"a\")\n\n    result = getattr(groups, function)()\n    tm.assert_frame_equal(result, expected)\n\n    result = groups.agg(function)\n    tm.assert_frame_equal(result, expected)\n\n    result = groups.agg([function])\n    expected.columns = MultiIndex.from_tuples([(\"b\", function)])\n    tm.assert_frame_equal(result, expected)",
                "test_error": "TypeError: cannot safely cast non-equivalent float64 to int64",
                "full_test_error": "values = array([1.5, 1.5, 1.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n>           return values.astype(dtype, casting=\"safe\", copy=copy)\nE           TypeError: Cannot cast array from dtype('float64') to dtype('int64') according to the rule 'safe'\n\npandas/core/arrays/integer.py:156: TypeError\n\nThe above exception was the direct cause of the following exception:\n\nvalues = {'a': [1, 1, 1, 2, 2, 2, ...], 'b': [1, <NA>, 2, 1, <NA>, 2, ...]}\nfunction = 'mean'\n\n    @pytest.mark.parametrize(\n        \"values\",\n        [\n            {\n                \"a\": [1, 1, 1, 2, 2, 2, 3, 3, 3],\n                \"b\": [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2],\n            },\n            {\"a\": [1, 1, 2, 2, 3, 3], \"b\": [1, 2, 1, 2, 1, 2]},\n        ],\n    )\n    @pytest.mark.parametrize(\"function\", [\"mean\", \"median\", \"var\"])\n    def test_apply_to_nullable_integer_returns_float(values, function):\n        # https://github.com/pandas-dev/pandas/issues/32219\n        output = 0.5 if function == \"var\" else 1.5\n        arr = np.array([output] * 3, dtype=float)\n        idx = pd.Index([1, 2, 3], dtype=object, name=\"a\")\n        expected = pd.DataFrame({\"b\": arr}, index=idx)\n    \n        groups = pd.DataFrame(values, dtype=\"Int64\").groupby(\"a\")\n    \n>       result = getattr(groups, function)()\n\npandas/tests/groupby/test_function.py:1630: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/groupby/groupby.py:1223: in mean\n    return self._cython_agg_general(\npandas/core/groupby/generic.py:994: in _cython_agg_general\n    agg_blocks, agg_items = self._cython_agg_blocks(\npandas/core/groupby/generic.py:1083: in _cython_agg_blocks\n    result = type(block.values)._from_sequence(\npandas/core/arrays/integer.py:358: in _from_sequence\n    return integer_array(scalars, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:144: in integer_array\n    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:261: in coerce_to_array\n    values = safe_cast(values, dtype, copy=False)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalues = array([1.5, 1.5, 1.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n            return values.astype(dtype, casting=\"safe\", copy=copy)\n        except TypeError as err:\n    \n            casted = values.astype(dtype, copy=copy)\n            if (casted == values).all():\n                return casted\n    \n>           raise TypeError(\n                f\"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}\"\n            ) from err\nE           TypeError: cannot safely cast non-equivalent float64 to int64\n\npandas/core/arrays/integer.py:163: TypeError",
                "traceback": "pandas/core/groupby/groupby.py:1223: in mean\n    return self._cython_agg_general(\npandas/core/groupby/generic.py:994: in _cython_agg_general\n    agg_blocks, agg_items = self._cython_agg_blocks(\npandas/core/groupby/generic.py:1083: in _cython_agg_blocks\n    result = type(block.values)._from_sequence(\npandas/core/arrays/integer.py:358: in _from_sequence\n    return integer_array(scalars, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:144: in integer_array\n    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:261: in coerce_to_array\n    values = safe_cast(values, dtype, copy=False)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalues = array([1.5, 1.5, 1.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n            return values.astype(dtype, casting=\"safe\", copy=copy)\n        except TypeError as err:\n    \n            casted = values.astype(dtype, copy=copy)\n            if (casted == values).all():\n                return casted\n    \n>           raise TypeError(\n                f\"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}\"\n            ) from err\nE           TypeError: cannot safely cast non-equivalent float64 to int64\n\npandas/core/arrays/integer.py:163: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('values', [{'a': [1, 1, 1, 2, 2, 2, 3, 3, 3], 'b': [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2]}, {'a': [1, 1, 2, 2, 3, 3], 'b': [1, 2, 1, 2, 1, 2]}])",
                    "pytest.mark.parametrize('function', ['mean', 'median', 'var'])"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/groupby/test_function.py",
                "test_function": "test_apply_to_nullable_integer_returns_float",
                "test_function_code": "@pytest.mark.parametrize(\n    \"values\",\n    [\n        {\n            \"a\": [1, 1, 1, 2, 2, 2, 3, 3, 3],\n            \"b\": [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2],\n        },\n        {\"a\": [1, 1, 2, 2, 3, 3], \"b\": [1, 2, 1, 2, 1, 2]},\n    ],\n)\n@pytest.mark.parametrize(\"function\", [\"mean\", \"median\", \"var\"])\ndef test_apply_to_nullable_integer_returns_float(values, function):\n    # https://github.com/pandas-dev/pandas/issues/32219\n    output = 0.5 if function == \"var\" else 1.5\n    arr = np.array([output] * 3, dtype=float)\n    idx = pd.Index([1, 2, 3], dtype=object, name=\"a\")\n    expected = pd.DataFrame({\"b\": arr}, index=idx)\n\n    groups = pd.DataFrame(values, dtype=\"Int64\").groupby(\"a\")\n\n    result = getattr(groups, function)()\n    tm.assert_frame_equal(result, expected)\n\n    result = groups.agg(function)\n    tm.assert_frame_equal(result, expected)\n\n    result = groups.agg([function])\n    expected.columns = MultiIndex.from_tuples([(\"b\", function)])\n    tm.assert_frame_equal(result, expected)",
                "test_error": "TypeError: cannot safely cast non-equivalent float64 to int64",
                "full_test_error": "values = array([1.5, 1.5, 1.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n>           return values.astype(dtype, casting=\"safe\", copy=copy)\nE           TypeError: Cannot cast array from dtype('float64') to dtype('int64') according to the rule 'safe'\n\npandas/core/arrays/integer.py:156: TypeError\n\nThe above exception was the direct cause of the following exception:\n\nvalues = {'a': [1, 1, 2, 2, 3, 3], 'b': [1, 2, 1, 2, 1, 2]}, function = 'mean'\n\n    @pytest.mark.parametrize(\n        \"values\",\n        [\n            {\n                \"a\": [1, 1, 1, 2, 2, 2, 3, 3, 3],\n                \"b\": [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2],\n            },\n            {\"a\": [1, 1, 2, 2, 3, 3], \"b\": [1, 2, 1, 2, 1, 2]},\n        ],\n    )\n    @pytest.mark.parametrize(\"function\", [\"mean\", \"median\", \"var\"])\n    def test_apply_to_nullable_integer_returns_float(values, function):\n        # https://github.com/pandas-dev/pandas/issues/32219\n        output = 0.5 if function == \"var\" else 1.5\n        arr = np.array([output] * 3, dtype=float)\n        idx = pd.Index([1, 2, 3], dtype=object, name=\"a\")\n        expected = pd.DataFrame({\"b\": arr}, index=idx)\n    \n        groups = pd.DataFrame(values, dtype=\"Int64\").groupby(\"a\")\n    \n>       result = getattr(groups, function)()\n\npandas/tests/groupby/test_function.py:1630: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/groupby/groupby.py:1223: in mean\n    return self._cython_agg_general(\npandas/core/groupby/generic.py:994: in _cython_agg_general\n    agg_blocks, agg_items = self._cython_agg_blocks(\npandas/core/groupby/generic.py:1083: in _cython_agg_blocks\n    result = type(block.values)._from_sequence(\npandas/core/arrays/integer.py:358: in _from_sequence\n    return integer_array(scalars, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:144: in integer_array\n    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:261: in coerce_to_array\n    values = safe_cast(values, dtype, copy=False)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalues = array([1.5, 1.5, 1.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n            return values.astype(dtype, casting=\"safe\", copy=copy)\n        except TypeError as err:\n    \n            casted = values.astype(dtype, copy=copy)\n            if (casted == values).all():\n                return casted\n    \n>           raise TypeError(\n                f\"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}\"\n            ) from err\nE           TypeError: cannot safely cast non-equivalent float64 to int64\n\npandas/core/arrays/integer.py:163: TypeError",
                "traceback": "pandas/core/groupby/groupby.py:1223: in mean\n    return self._cython_agg_general(\npandas/core/groupby/generic.py:994: in _cython_agg_general\n    agg_blocks, agg_items = self._cython_agg_blocks(\npandas/core/groupby/generic.py:1083: in _cython_agg_blocks\n    result = type(block.values)._from_sequence(\npandas/core/arrays/integer.py:358: in _from_sequence\n    return integer_array(scalars, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:144: in integer_array\n    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:261: in coerce_to_array\n    values = safe_cast(values, dtype, copy=False)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalues = array([1.5, 1.5, 1.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n            return values.astype(dtype, casting=\"safe\", copy=copy)\n        except TypeError as err:\n    \n            casted = values.astype(dtype, copy=copy)\n            if (casted == values).all():\n                return casted\n    \n>           raise TypeError(\n                f\"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}\"\n            ) from err\nE           TypeError: cannot safely cast non-equivalent float64 to int64\n\npandas/core/arrays/integer.py:163: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('values', [{'a': [1, 1, 1, 2, 2, 2, 3, 3, 3], 'b': [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2]}, {'a': [1, 1, 2, 2, 3, 3], 'b': [1, 2, 1, 2, 1, 2]}])",
                    "pytest.mark.parametrize('function', ['mean', 'median', 'var'])"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/groupby/test_function.py",
                "test_function": "test_apply_to_nullable_integer_returns_float",
                "test_function_code": "@pytest.mark.parametrize(\n    \"values\",\n    [\n        {\n            \"a\": [1, 1, 1, 2, 2, 2, 3, 3, 3],\n            \"b\": [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2],\n        },\n        {\"a\": [1, 1, 2, 2, 3, 3], \"b\": [1, 2, 1, 2, 1, 2]},\n    ],\n)\n@pytest.mark.parametrize(\"function\", [\"mean\", \"median\", \"var\"])\ndef test_apply_to_nullable_integer_returns_float(values, function):\n    # https://github.com/pandas-dev/pandas/issues/32219\n    output = 0.5 if function == \"var\" else 1.5\n    arr = np.array([output] * 3, dtype=float)\n    idx = pd.Index([1, 2, 3], dtype=object, name=\"a\")\n    expected = pd.DataFrame({\"b\": arr}, index=idx)\n\n    groups = pd.DataFrame(values, dtype=\"Int64\").groupby(\"a\")\n\n    result = getattr(groups, function)()\n    tm.assert_frame_equal(result, expected)\n\n    result = groups.agg(function)\n    tm.assert_frame_equal(result, expected)\n\n    result = groups.agg([function])\n    expected.columns = MultiIndex.from_tuples([(\"b\", function)])\n    tm.assert_frame_equal(result, expected)",
                "test_error": "TypeError: cannot safely cast non-equivalent float64 to int64",
                "full_test_error": "values = array([1.5, 1.5, 1.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n>           return values.astype(dtype, casting=\"safe\", copy=copy)\nE           TypeError: Cannot cast array from dtype('float64') to dtype('int64') according to the rule 'safe'\n\npandas/core/arrays/integer.py:156: TypeError\n\nThe above exception was the direct cause of the following exception:\n\nvalues = {'a': [1, 1, 1, 2, 2, 2, ...], 'b': [1, <NA>, 2, 1, <NA>, 2, ...]}\nfunction = 'median'\n\n    @pytest.mark.parametrize(\n        \"values\",\n        [\n            {\n                \"a\": [1, 1, 1, 2, 2, 2, 3, 3, 3],\n                \"b\": [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2],\n            },\n            {\"a\": [1, 1, 2, 2, 3, 3], \"b\": [1, 2, 1, 2, 1, 2]},\n        ],\n    )\n    @pytest.mark.parametrize(\"function\", [\"mean\", \"median\", \"var\"])\n    def test_apply_to_nullable_integer_returns_float(values, function):\n        # https://github.com/pandas-dev/pandas/issues/32219\n        output = 0.5 if function == \"var\" else 1.5\n        arr = np.array([output] * 3, dtype=float)\n        idx = pd.Index([1, 2, 3], dtype=object, name=\"a\")\n        expected = pd.DataFrame({\"b\": arr}, index=idx)\n    \n        groups = pd.DataFrame(values, dtype=\"Int64\").groupby(\"a\")\n    \n>       result = getattr(groups, function)()\n\npandas/tests/groupby/test_function.py:1630: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/groupby/groupby.py:1248: in median\n    return self._cython_agg_general(\npandas/core/groupby/generic.py:994: in _cython_agg_general\n    agg_blocks, agg_items = self._cython_agg_blocks(\npandas/core/groupby/generic.py:1083: in _cython_agg_blocks\n    result = type(block.values)._from_sequence(\npandas/core/arrays/integer.py:358: in _from_sequence\n    return integer_array(scalars, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:144: in integer_array\n    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:261: in coerce_to_array\n    values = safe_cast(values, dtype, copy=False)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalues = array([1.5, 1.5, 1.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n            return values.astype(dtype, casting=\"safe\", copy=copy)\n        except TypeError as err:\n    \n            casted = values.astype(dtype, copy=copy)\n            if (casted == values).all():\n                return casted\n    \n>           raise TypeError(\n                f\"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}\"\n            ) from err\nE           TypeError: cannot safely cast non-equivalent float64 to int64\n\npandas/core/arrays/integer.py:163: TypeError",
                "traceback": "pandas/core/groupby/groupby.py:1248: in median\n    return self._cython_agg_general(\npandas/core/groupby/generic.py:994: in _cython_agg_general\n    agg_blocks, agg_items = self._cython_agg_blocks(\npandas/core/groupby/generic.py:1083: in _cython_agg_blocks\n    result = type(block.values)._from_sequence(\npandas/core/arrays/integer.py:358: in _from_sequence\n    return integer_array(scalars, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:144: in integer_array\n    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:261: in coerce_to_array\n    values = safe_cast(values, dtype, copy=False)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalues = array([1.5, 1.5, 1.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n            return values.astype(dtype, casting=\"safe\", copy=copy)\n        except TypeError as err:\n    \n            casted = values.astype(dtype, copy=copy)\n            if (casted == values).all():\n                return casted\n    \n>           raise TypeError(\n                f\"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}\"\n            ) from err\nE           TypeError: cannot safely cast non-equivalent float64 to int64\n\npandas/core/arrays/integer.py:163: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('values', [{'a': [1, 1, 1, 2, 2, 2, 3, 3, 3], 'b': [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2]}, {'a': [1, 1, 2, 2, 3, 3], 'b': [1, 2, 1, 2, 1, 2]}])",
                    "pytest.mark.parametrize('function', ['mean', 'median', 'var'])"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/groupby/test_function.py",
                "test_function": "test_apply_to_nullable_integer_returns_float",
                "test_function_code": "@pytest.mark.parametrize(\n    \"values\",\n    [\n        {\n            \"a\": [1, 1, 1, 2, 2, 2, 3, 3, 3],\n            \"b\": [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2],\n        },\n        {\"a\": [1, 1, 2, 2, 3, 3], \"b\": [1, 2, 1, 2, 1, 2]},\n    ],\n)\n@pytest.mark.parametrize(\"function\", [\"mean\", \"median\", \"var\"])\ndef test_apply_to_nullable_integer_returns_float(values, function):\n    # https://github.com/pandas-dev/pandas/issues/32219\n    output = 0.5 if function == \"var\" else 1.5\n    arr = np.array([output] * 3, dtype=float)\n    idx = pd.Index([1, 2, 3], dtype=object, name=\"a\")\n    expected = pd.DataFrame({\"b\": arr}, index=idx)\n\n    groups = pd.DataFrame(values, dtype=\"Int64\").groupby(\"a\")\n\n    result = getattr(groups, function)()\n    tm.assert_frame_equal(result, expected)\n\n    result = groups.agg(function)\n    tm.assert_frame_equal(result, expected)\n\n    result = groups.agg([function])\n    expected.columns = MultiIndex.from_tuples([(\"b\", function)])\n    tm.assert_frame_equal(result, expected)",
                "test_error": "TypeError: cannot safely cast non-equivalent float64 to int64",
                "full_test_error": "values = array([1.5, 1.5, 1.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n>           return values.astype(dtype, casting=\"safe\", copy=copy)\nE           TypeError: Cannot cast array from dtype('float64') to dtype('int64') according to the rule 'safe'\n\npandas/core/arrays/integer.py:156: TypeError\n\nThe above exception was the direct cause of the following exception:\n\nvalues = {'a': [1, 1, 2, 2, 3, 3], 'b': [1, 2, 1, 2, 1, 2]}, function = 'median'\n\n    @pytest.mark.parametrize(\n        \"values\",\n        [\n            {\n                \"a\": [1, 1, 1, 2, 2, 2, 3, 3, 3],\n                \"b\": [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2],\n            },\n            {\"a\": [1, 1, 2, 2, 3, 3], \"b\": [1, 2, 1, 2, 1, 2]},\n        ],\n    )\n    @pytest.mark.parametrize(\"function\", [\"mean\", \"median\", \"var\"])\n    def test_apply_to_nullable_integer_returns_float(values, function):\n        # https://github.com/pandas-dev/pandas/issues/32219\n        output = 0.5 if function == \"var\" else 1.5\n        arr = np.array([output] * 3, dtype=float)\n        idx = pd.Index([1, 2, 3], dtype=object, name=\"a\")\n        expected = pd.DataFrame({\"b\": arr}, index=idx)\n    \n        groups = pd.DataFrame(values, dtype=\"Int64\").groupby(\"a\")\n    \n>       result = getattr(groups, function)()\n\npandas/tests/groupby/test_function.py:1630: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/groupby/groupby.py:1248: in median\n    return self._cython_agg_general(\npandas/core/groupby/generic.py:994: in _cython_agg_general\n    agg_blocks, agg_items = self._cython_agg_blocks(\npandas/core/groupby/generic.py:1083: in _cython_agg_blocks\n    result = type(block.values)._from_sequence(\npandas/core/arrays/integer.py:358: in _from_sequence\n    return integer_array(scalars, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:144: in integer_array\n    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:261: in coerce_to_array\n    values = safe_cast(values, dtype, copy=False)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalues = array([1.5, 1.5, 1.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n            return values.astype(dtype, casting=\"safe\", copy=copy)\n        except TypeError as err:\n    \n            casted = values.astype(dtype, copy=copy)\n            if (casted == values).all():\n                return casted\n    \n>           raise TypeError(\n                f\"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}\"\n            ) from err\nE           TypeError: cannot safely cast non-equivalent float64 to int64\n\npandas/core/arrays/integer.py:163: TypeError",
                "traceback": "pandas/core/groupby/groupby.py:1248: in median\n    return self._cython_agg_general(\npandas/core/groupby/generic.py:994: in _cython_agg_general\n    agg_blocks, agg_items = self._cython_agg_blocks(\npandas/core/groupby/generic.py:1083: in _cython_agg_blocks\n    result = type(block.values)._from_sequence(\npandas/core/arrays/integer.py:358: in _from_sequence\n    return integer_array(scalars, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:144: in integer_array\n    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:261: in coerce_to_array\n    values = safe_cast(values, dtype, copy=False)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalues = array([1.5, 1.5, 1.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n            return values.astype(dtype, casting=\"safe\", copy=copy)\n        except TypeError as err:\n    \n            casted = values.astype(dtype, copy=copy)\n            if (casted == values).all():\n                return casted\n    \n>           raise TypeError(\n                f\"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}\"\n            ) from err\nE           TypeError: cannot safely cast non-equivalent float64 to int64\n\npandas/core/arrays/integer.py:163: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('values', [{'a': [1, 1, 1, 2, 2, 2, 3, 3, 3], 'b': [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2]}, {'a': [1, 1, 2, 2, 3, 3], 'b': [1, 2, 1, 2, 1, 2]}])",
                    "pytest.mark.parametrize('function', ['mean', 'median', 'var'])"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/groupby/test_function.py",
                "test_function": "test_apply_to_nullable_integer_returns_float",
                "test_function_code": "@pytest.mark.parametrize(\n    \"values\",\n    [\n        {\n            \"a\": [1, 1, 1, 2, 2, 2, 3, 3, 3],\n            \"b\": [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2],\n        },\n        {\"a\": [1, 1, 2, 2, 3, 3], \"b\": [1, 2, 1, 2, 1, 2]},\n    ],\n)\n@pytest.mark.parametrize(\"function\", [\"mean\", \"median\", \"var\"])\ndef test_apply_to_nullable_integer_returns_float(values, function):\n    # https://github.com/pandas-dev/pandas/issues/32219\n    output = 0.5 if function == \"var\" else 1.5\n    arr = np.array([output] * 3, dtype=float)\n    idx = pd.Index([1, 2, 3], dtype=object, name=\"a\")\n    expected = pd.DataFrame({\"b\": arr}, index=idx)\n\n    groups = pd.DataFrame(values, dtype=\"Int64\").groupby(\"a\")\n\n    result = getattr(groups, function)()\n    tm.assert_frame_equal(result, expected)\n\n    result = groups.agg(function)\n    tm.assert_frame_equal(result, expected)\n\n    result = groups.agg([function])\n    expected.columns = MultiIndex.from_tuples([(\"b\", function)])\n    tm.assert_frame_equal(result, expected)",
                "test_error": "TypeError: cannot safely cast non-equivalent float64 to int64",
                "full_test_error": "values = array([0.5, 0.5, 0.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n>           return values.astype(dtype, casting=\"safe\", copy=copy)\nE           TypeError: Cannot cast array from dtype('float64') to dtype('int64') according to the rule 'safe'\n\npandas/core/arrays/integer.py:156: TypeError\n\nThe above exception was the direct cause of the following exception:\n\nvalues = {'a': [1, 1, 1, 2, 2, 2, ...], 'b': [1, <NA>, 2, 1, <NA>, 2, ...]}\nfunction = 'var'\n\n    @pytest.mark.parametrize(\n        \"values\",\n        [\n            {\n                \"a\": [1, 1, 1, 2, 2, 2, 3, 3, 3],\n                \"b\": [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2],\n            },\n            {\"a\": [1, 1, 2, 2, 3, 3], \"b\": [1, 2, 1, 2, 1, 2]},\n        ],\n    )\n    @pytest.mark.parametrize(\"function\", [\"mean\", \"median\", \"var\"])\n    def test_apply_to_nullable_integer_returns_float(values, function):\n        # https://github.com/pandas-dev/pandas/issues/32219\n        output = 0.5 if function == \"var\" else 1.5\n        arr = np.array([output] * 3, dtype=float)\n        idx = pd.Index([1, 2, 3], dtype=object, name=\"a\")\n        expected = pd.DataFrame({\"b\": arr}, index=idx)\n    \n        groups = pd.DataFrame(values, dtype=\"Int64\").groupby(\"a\")\n    \n>       result = getattr(groups, function)()\n\npandas/tests/groupby/test_function.py:1630: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/groupby/groupby.py:1294: in var\n    return self._cython_agg_general(\npandas/core/groupby/generic.py:994: in _cython_agg_general\n    agg_blocks, agg_items = self._cython_agg_blocks(\npandas/core/groupby/generic.py:1083: in _cython_agg_blocks\n    result = type(block.values)._from_sequence(\npandas/core/arrays/integer.py:358: in _from_sequence\n    return integer_array(scalars, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:144: in integer_array\n    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:261: in coerce_to_array\n    values = safe_cast(values, dtype, copy=False)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalues = array([0.5, 0.5, 0.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n            return values.astype(dtype, casting=\"safe\", copy=copy)\n        except TypeError as err:\n    \n            casted = values.astype(dtype, copy=copy)\n            if (casted == values).all():\n                return casted\n    \n>           raise TypeError(\n                f\"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}\"\n            ) from err\nE           TypeError: cannot safely cast non-equivalent float64 to int64\n\npandas/core/arrays/integer.py:163: TypeError",
                "traceback": "pandas/core/groupby/groupby.py:1294: in var\n    return self._cython_agg_general(\npandas/core/groupby/generic.py:994: in _cython_agg_general\n    agg_blocks, agg_items = self._cython_agg_blocks(\npandas/core/groupby/generic.py:1083: in _cython_agg_blocks\n    result = type(block.values)._from_sequence(\npandas/core/arrays/integer.py:358: in _from_sequence\n    return integer_array(scalars, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:144: in integer_array\n    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:261: in coerce_to_array\n    values = safe_cast(values, dtype, copy=False)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalues = array([0.5, 0.5, 0.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n            return values.astype(dtype, casting=\"safe\", copy=copy)\n        except TypeError as err:\n    \n            casted = values.astype(dtype, copy=copy)\n            if (casted == values).all():\n                return casted\n    \n>           raise TypeError(\n                f\"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}\"\n            ) from err\nE           TypeError: cannot safely cast non-equivalent float64 to int64\n\npandas/core/arrays/integer.py:163: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('values', [{'a': [1, 1, 1, 2, 2, 2, 3, 3, 3], 'b': [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2]}, {'a': [1, 1, 2, 2, 3, 3], 'b': [1, 2, 1, 2, 1, 2]}])",
                    "pytest.mark.parametrize('function', ['mean', 'median', 'var'])"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/groupby/test_function.py",
                "test_function": "test_apply_to_nullable_integer_returns_float",
                "test_function_code": "@pytest.mark.parametrize(\n    \"values\",\n    [\n        {\n            \"a\": [1, 1, 1, 2, 2, 2, 3, 3, 3],\n            \"b\": [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2],\n        },\n        {\"a\": [1, 1, 2, 2, 3, 3], \"b\": [1, 2, 1, 2, 1, 2]},\n    ],\n)\n@pytest.mark.parametrize(\"function\", [\"mean\", \"median\", \"var\"])\ndef test_apply_to_nullable_integer_returns_float(values, function):\n    # https://github.com/pandas-dev/pandas/issues/32219\n    output = 0.5 if function == \"var\" else 1.5\n    arr = np.array([output] * 3, dtype=float)\n    idx = pd.Index([1, 2, 3], dtype=object, name=\"a\")\n    expected = pd.DataFrame({\"b\": arr}, index=idx)\n\n    groups = pd.DataFrame(values, dtype=\"Int64\").groupby(\"a\")\n\n    result = getattr(groups, function)()\n    tm.assert_frame_equal(result, expected)\n\n    result = groups.agg(function)\n    tm.assert_frame_equal(result, expected)\n\n    result = groups.agg([function])\n    expected.columns = MultiIndex.from_tuples([(\"b\", function)])\n    tm.assert_frame_equal(result, expected)",
                "test_error": "TypeError: cannot safely cast non-equivalent float64 to int64",
                "full_test_error": "values = array([0.5, 0.5, 0.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n>           return values.astype(dtype, casting=\"safe\", copy=copy)\nE           TypeError: Cannot cast array from dtype('float64') to dtype('int64') according to the rule 'safe'\n\npandas/core/arrays/integer.py:156: TypeError\n\nThe above exception was the direct cause of the following exception:\n\nvalues = {'a': [1, 1, 2, 2, 3, 3], 'b': [1, 2, 1, 2, 1, 2]}, function = 'var'\n\n    @pytest.mark.parametrize(\n        \"values\",\n        [\n            {\n                \"a\": [1, 1, 1, 2, 2, 2, 3, 3, 3],\n                \"b\": [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2],\n            },\n            {\"a\": [1, 1, 2, 2, 3, 3], \"b\": [1, 2, 1, 2, 1, 2]},\n        ],\n    )\n    @pytest.mark.parametrize(\"function\", [\"mean\", \"median\", \"var\"])\n    def test_apply_to_nullable_integer_returns_float(values, function):\n        # https://github.com/pandas-dev/pandas/issues/32219\n        output = 0.5 if function == \"var\" else 1.5\n        arr = np.array([output] * 3, dtype=float)\n        idx = pd.Index([1, 2, 3], dtype=object, name=\"a\")\n        expected = pd.DataFrame({\"b\": arr}, index=idx)\n    \n        groups = pd.DataFrame(values, dtype=\"Int64\").groupby(\"a\")\n    \n>       result = getattr(groups, function)()\n\npandas/tests/groupby/test_function.py:1630: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/groupby/groupby.py:1294: in var\n    return self._cython_agg_general(\npandas/core/groupby/generic.py:994: in _cython_agg_general\n    agg_blocks, agg_items = self._cython_agg_blocks(\npandas/core/groupby/generic.py:1083: in _cython_agg_blocks\n    result = type(block.values)._from_sequence(\npandas/core/arrays/integer.py:358: in _from_sequence\n    return integer_array(scalars, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:144: in integer_array\n    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:261: in coerce_to_array\n    values = safe_cast(values, dtype, copy=False)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalues = array([0.5, 0.5, 0.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n            return values.astype(dtype, casting=\"safe\", copy=copy)\n        except TypeError as err:\n    \n            casted = values.astype(dtype, copy=copy)\n            if (casted == values).all():\n                return casted\n    \n>           raise TypeError(\n                f\"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}\"\n            ) from err\nE           TypeError: cannot safely cast non-equivalent float64 to int64\n\npandas/core/arrays/integer.py:163: TypeError",
                "traceback": "pandas/core/groupby/groupby.py:1294: in var\n    return self._cython_agg_general(\npandas/core/groupby/generic.py:994: in _cython_agg_general\n    agg_blocks, agg_items = self._cython_agg_blocks(\npandas/core/groupby/generic.py:1083: in _cython_agg_blocks\n    result = type(block.values)._from_sequence(\npandas/core/arrays/integer.py:358: in _from_sequence\n    return integer_array(scalars, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:144: in integer_array\n    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:261: in coerce_to_array\n    values = safe_cast(values, dtype, copy=False)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalues = array([0.5, 0.5, 0.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n            return values.astype(dtype, casting=\"safe\", copy=copy)\n        except TypeError as err:\n    \n            casted = values.astype(dtype, copy=copy)\n            if (casted == values).all():\n                return casted\n    \n>           raise TypeError(\n                f\"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}\"\n            ) from err\nE           TypeError: cannot safely cast non-equivalent float64 to int64\n\npandas/core/arrays/integer.py:163: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('values', [{'a': [1, 1, 1, 2, 2, 2, 3, 3, 3], 'b': [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2]}, {'a': [1, 1, 2, 2, 3, 3], 'b': [1, 2, 1, 2, 1, 2]}])",
                    "pytest.mark.parametrize('function', ['mean', 'median', 'var'])"
                ]
            }
        ]
    }
}