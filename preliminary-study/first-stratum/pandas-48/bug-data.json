{
    "pandas:48": {
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/core/groupby/generic.py": {
            "buggy_functions": [
                {
                    "function_name": "_cython_agg_blocks",
                    "function_code": "    def _cython_agg_blocks(\n        self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n    ) -> \"Tuple[List[Block], Index]\":\n        # TODO: the actual managing of mgr_locs is a PITA\n        # here, it should happen via BlockManager.combine\n\n        data: BlockManager = self._get_data_to_aggregate()\n\n        if numeric_only:\n            data = data.get_numeric_data(copy=False)\n\n        agg_blocks: List[Block] = []\n        new_items: List[np.ndarray] = []\n        deleted_items: List[np.ndarray] = []\n        # Some object-dtype blocks might be split into List[Block[T], Block[U]]\n        split_items: List[np.ndarray] = []\n        split_frames: List[DataFrame] = []\n\n        no_result = object()\n        for block in data.blocks:\n            # Avoid inheriting result from earlier in the loop\n            result = no_result\n            locs = block.mgr_locs.as_array\n            try:\n                result, _ = self.grouper.aggregate(\n                    block.values, how, axis=1, min_count=min_count\n                )\n            except NotImplementedError:\n                # generally if we have numeric_only=False\n                # and non-applicable functions\n                # try to python agg\n\n                if alt is None:\n                    # we cannot perform the operation\n                    # in an alternate way, exclude the block\n                    assert how == \"ohlc\"\n                    deleted_items.append(locs)\n                    continue\n\n                # call our grouper again with only this block\n                obj = self.obj[data.items[locs]]\n                if obj.shape[1] == 1:\n                    # Avoid call to self.values that can occur in DataFrame\n                    #  reductions; see GH#28949\n                    obj = obj.iloc[:, 0]\n\n                s = get_groupby(obj, self.grouper)\n                try:\n                    result = s.aggregate(lambda x: alt(x, axis=self.axis))\n                except TypeError:\n                    # we may have an exception in trying to aggregate\n                    # continue and exclude the block\n                    deleted_items.append(locs)\n                    continue\n                else:\n                    result = cast(DataFrame, result)\n                    # unwrap DataFrame to get array\n                    if len(result._data.blocks) != 1:\n                        # We've split an object block! Everything we've assumed\n                        # about a single block input returning a single block output\n                        # is a lie. To keep the code-path for the typical non-split case\n                        # clean, we choose to clean up this mess later on.\n                        split_items.append(locs)\n                        split_frames.append(result)\n                        continue\n\n                    assert len(result._data.blocks) == 1\n                    result = result._data.blocks[0].values\n                    if isinstance(result, np.ndarray) and result.ndim == 1:\n                        result = result.reshape(1, -1)\n\n            assert not isinstance(result, DataFrame)\n\n            if result is not no_result:\n                # see if we can cast the block back to the original dtype\n                result = maybe_downcast_numeric(result, block.dtype)\n\n                if block.is_extension and isinstance(result, np.ndarray):\n                    # e.g. block.values was an IntegerArray\n                    # (1, N) case can occur if block.values was Categorical\n                    #  and result is ndarray[object]\n                    assert result.ndim == 1 or result.shape[0] == 1\n                    try:\n                        # Cast back if feasible\n                        result = type(block.values)._from_sequence(\n                            result.ravel(), dtype=block.values.dtype\n                        )\n                    except ValueError:\n                        # reshape to be valid for non-Extension Block\n                        result = result.reshape(1, -1)\n\n                agg_block: Block = block.make_block(result)\n\n            new_items.append(locs)\n            agg_blocks.append(agg_block)\n\n        if not (agg_blocks or split_frames):\n            raise DataError(\"No numeric types to aggregate\")\n\n        if split_items:\n            # Clean up the mess left over from split blocks.\n            for locs, result in zip(split_items, split_frames):\n                assert len(locs) == result.shape[1]\n                for i, loc in enumerate(locs):\n                    new_items.append(np.array([loc], dtype=locs.dtype))\n                    agg_blocks.append(result.iloc[:, [i]]._data.blocks[0])\n\n        # reset the locs in the blocks to correspond to our\n        # current ordering\n        indexer = np.concatenate(new_items)\n        agg_items = data.items.take(np.sort(indexer))\n\n        if deleted_items:\n\n            # we need to adjust the indexer to account for the\n            # items we have removed\n            # really should be done in internals :<\n\n            deleted = np.concatenate(deleted_items)\n            ai = np.arange(len(data))\n            mask = np.zeros(len(data))\n            mask[deleted] = 1\n            indexer = (ai - mask.cumsum())[indexer]\n\n        offset = 0\n        for blk in agg_blocks:\n            loc = len(blk.mgr_locs)\n            blk.mgr_locs = indexer[offset : (offset + loc)]\n            offset += loc\n\n        return agg_blocks, agg_items\n",
                    "decorators": [],
                    "start_line": 999,
                    "variables": {
                        "str": [
                            1000
                        ],
                        "bool": [
                            1000
                        ],
                        "int": [
                            1000
                        ],
                        "data": [
                            1005,
                            1039,
                            1008,
                            1109,
                            1018,
                            1118,
                            1119
                        ],
                        "BlockManager": [
                            1005
                        ],
                        "self._get_data_to_aggregate": [
                            1005
                        ],
                        "self": [
                            1005,
                            1039,
                            1045,
                            1047,
                            1023
                        ],
                        "numeric_only": [
                            1007
                        ],
                        "data.get_numeric_data": [
                            1008
                        ],
                        "agg_blocks": [
                            1124,
                            1093,
                            1095,
                            1129,
                            1104,
                            1010
                        ],
                        "List": [
                            1010,
                            1011,
                            1012,
                            1014,
                            1015
                        ],
                        "Block": [
                            1010,
                            1090
                        ],
                        "new_items": [
                            1011,
                            1092,
                            1108,
                            1103
                        ],
                        "np.ndarray": [
                            1067,
                            1011,
                            1076,
                            1012,
                            1014
                        ],
                        "np": [
                            1067,
                            1103,
                            1011,
                            1076,
                            1012,
                            1014,
                            1108,
                            1109,
                            1117,
                            1118,
                            1119
                        ],
                        "deleted_items": [
                            1035,
                            1012,
                            1111,
                            1051,
                            1117
                        ],
                        "split_items": [
                            1098,
                            1100,
                            1061,
                            1014
                        ],
                        "split_frames": [
                            1095,
                            1100,
                            1062,
                            1015
                        ],
                        "DataFrame": [
                            1070,
                            1054,
                            1015
                        ],
                        "no_result": [
                            1072,
                            1017,
                            1020
                        ],
                        "object": [
                            1017
                        ],
                        "block": [
                            1024,
                            1090,
                            1074,
                            1076,
                            1018,
                            1083,
                            1084,
                            1021
                        ],
                        "data.blocks": [
                            1018
                        ],
                        "result": [
                            1047,
                            1054,
                            1056,
                            1062,
                            1065,
                            1066,
                            1067,
                            1068,
                            1070,
                            1072,
                            1074,
                            1076,
                            1080,
                            1083,
                            1084,
                            1088,
                            1090,
                            1100,
                            1101,
                            1104,
                            1020,
                            1023
                        ],
                        "locs": [
                            1092,
                            1061,
                            1035,
                            1100,
                            1101,
                            1102,
                            1039,
                            1103,
                            1051,
                            1021
                        ],
                        "block.mgr_locs.as_array": [
                            1021
                        ],
                        "block.mgr_locs": [
                            1021
                        ],
                        "_": [
                            1023
                        ],
                        "self.grouper.aggregate": [
                            1023
                        ],
                        "self.grouper": [
                            1045,
                            1023
                        ],
                        "block.values": [
                            1024,
                            1083,
                            1084
                        ],
                        "how": [
                            1024,
                            1034
                        ],
                        "min_count": [
                            1024
                        ],
                        "NotImplementedError": [
                            1026
                        ],
                        "alt": [
                            1047,
                            1031
                        ],
                        "deleted_items.append": [
                            1051,
                            1035
                        ],
                        "obj": [
                            1040,
                            1043,
                            1045,
                            1039
                        ],
                        "self.obj": [
                            1039
                        ],
                        "data.items": [
                            1109,
                            1039
                        ],
                        "obj.shape": [
                            1040
                        ],
                        "obj.iloc": [
                            1043
                        ],
                        "s": [
                            1045,
                            1047
                        ],
                        "get_groupby": [
                            1045
                        ],
                        "s.aggregate": [
                            1047
                        ],
                        "x": [
                            1047
                        ],
                        "self.axis": [
                            1047
                        ],
                        "TypeError": [
                            1048
                        ],
                        "cast": [
                            1054
                        ],
                        "len": [
                            1056,
                            1125,
                            1065,
                            1101,
                            1118,
                            1119
                        ],
                        "result._data.blocks": [
                            1056,
                            1065,
                            1066
                        ],
                        "result._data": [
                            1056,
                            1065,
                            1066
                        ],
                        "split_items.append": [
                            1061
                        ],
                        "split_frames.append": [
                            1062
                        ],
                        "values": [
                            1066
                        ],
                        "isinstance": [
                            1067,
                            1076,
                            1070
                        ],
                        "result.ndim": [
                            1080,
                            1067
                        ],
                        "result.reshape": [
                            1088,
                            1068
                        ],
                        "maybe_downcast_numeric": [
                            1074
                        ],
                        "block.dtype": [
                            1074
                        ],
                        "block.is_extension": [
                            1076
                        ],
                        "result.shape": [
                            1080,
                            1101
                        ],
                        "_from_sequence": [
                            1083
                        ],
                        "type": [
                            1083
                        ],
                        "result.ravel": [
                            1084
                        ],
                        "block.values.dtype": [
                            1084
                        ],
                        "ValueError": [
                            1086
                        ],
                        "agg_block": [
                            1090,
                            1093
                        ],
                        "block.make_block": [
                            1090
                        ],
                        "new_items.append": [
                            1092,
                            1103
                        ],
                        "agg_blocks.append": [
                            1104,
                            1093
                        ],
                        "DataError": [
                            1096
                        ],
                        "zip": [
                            1100
                        ],
                        "i": [
                            1104,
                            1102
                        ],
                        "loc": [
                            1125,
                            1126,
                            1127,
                            1102,
                            1103
                        ],
                        "enumerate": [
                            1102
                        ],
                        "np.array": [
                            1103
                        ],
                        "locs.dtype": [
                            1103
                        ],
                        "_data.blocks": [
                            1104
                        ],
                        "_data": [
                            1104
                        ],
                        "result.iloc": [
                            1104
                        ],
                        "indexer": [
                            1121,
                            1108,
                            1109,
                            1126
                        ],
                        "np.concatenate": [
                            1108,
                            1117
                        ],
                        "agg_items": [
                            1129,
                            1109
                        ],
                        "data.items.take": [
                            1109
                        ],
                        "np.sort": [
                            1109
                        ],
                        "deleted": [
                            1120,
                            1117
                        ],
                        "ai": [
                            1121,
                            1118
                        ],
                        "np.arange": [
                            1118
                        ],
                        "mask": [
                            1120,
                            1121,
                            1119
                        ],
                        "np.zeros": [
                            1119
                        ],
                        "mask.cumsum": [
                            1121
                        ],
                        "offset": [
                            1123,
                            1126,
                            1127
                        ],
                        "blk": [
                            1124,
                            1125,
                            1126
                        ],
                        "blk.mgr_locs": [
                            1125,
                            1126
                        ]
                    },
                    "filtered_variables": {
                        "str": [
                            1000
                        ],
                        "bool": [
                            1000
                        ],
                        "int": [
                            1000
                        ],
                        "data": [
                            1005,
                            1039,
                            1008,
                            1109,
                            1018,
                            1118,
                            1119
                        ],
                        "BlockManager": [
                            1005
                        ],
                        "self._get_data_to_aggregate": [
                            1005
                        ],
                        "self": [
                            1005,
                            1039,
                            1045,
                            1047,
                            1023
                        ],
                        "numeric_only": [
                            1007
                        ],
                        "data.get_numeric_data": [
                            1008
                        ],
                        "agg_blocks": [
                            1124,
                            1093,
                            1095,
                            1129,
                            1104,
                            1010
                        ],
                        "List": [
                            1010,
                            1011,
                            1012,
                            1014,
                            1015
                        ],
                        "Block": [
                            1010,
                            1090
                        ],
                        "new_items": [
                            1011,
                            1092,
                            1108,
                            1103
                        ],
                        "np.ndarray": [
                            1067,
                            1011,
                            1076,
                            1012,
                            1014
                        ],
                        "np": [
                            1067,
                            1103,
                            1011,
                            1076,
                            1012,
                            1014,
                            1108,
                            1109,
                            1117,
                            1118,
                            1119
                        ],
                        "deleted_items": [
                            1035,
                            1012,
                            1111,
                            1051,
                            1117
                        ],
                        "split_items": [
                            1098,
                            1100,
                            1061,
                            1014
                        ],
                        "split_frames": [
                            1095,
                            1100,
                            1062,
                            1015
                        ],
                        "DataFrame": [
                            1070,
                            1054,
                            1015
                        ],
                        "no_result": [
                            1072,
                            1017,
                            1020
                        ],
                        "object": [
                            1017
                        ],
                        "block": [
                            1024,
                            1090,
                            1074,
                            1076,
                            1018,
                            1083,
                            1084,
                            1021
                        ],
                        "data.blocks": [
                            1018
                        ],
                        "result": [
                            1047,
                            1054,
                            1056,
                            1062,
                            1065,
                            1066,
                            1067,
                            1068,
                            1070,
                            1072,
                            1074,
                            1076,
                            1080,
                            1083,
                            1084,
                            1088,
                            1090,
                            1100,
                            1101,
                            1104,
                            1020,
                            1023
                        ],
                        "locs": [
                            1092,
                            1061,
                            1035,
                            1100,
                            1101,
                            1102,
                            1039,
                            1103,
                            1051,
                            1021
                        ],
                        "block.mgr_locs.as_array": [
                            1021
                        ],
                        "block.mgr_locs": [
                            1021
                        ],
                        "_": [
                            1023
                        ],
                        "self.grouper.aggregate": [
                            1023
                        ],
                        "self.grouper": [
                            1045,
                            1023
                        ],
                        "block.values": [
                            1024,
                            1083,
                            1084
                        ],
                        "how": [
                            1024,
                            1034
                        ],
                        "min_count": [
                            1024
                        ],
                        "NotImplementedError": [
                            1026
                        ],
                        "alt": [
                            1047,
                            1031
                        ],
                        "deleted_items.append": [
                            1051,
                            1035
                        ],
                        "obj": [
                            1040,
                            1043,
                            1045,
                            1039
                        ],
                        "self.obj": [
                            1039
                        ],
                        "data.items": [
                            1109,
                            1039
                        ],
                        "obj.shape": [
                            1040
                        ],
                        "obj.iloc": [
                            1043
                        ],
                        "s": [
                            1045,
                            1047
                        ],
                        "get_groupby": [
                            1045
                        ],
                        "s.aggregate": [
                            1047
                        ],
                        "x": [
                            1047
                        ],
                        "self.axis": [
                            1047
                        ],
                        "TypeError": [
                            1048
                        ],
                        "cast": [
                            1054
                        ],
                        "len": [
                            1056,
                            1125,
                            1065,
                            1101,
                            1118,
                            1119
                        ],
                        "result._data.blocks": [
                            1056,
                            1065,
                            1066
                        ],
                        "result._data": [
                            1056,
                            1065,
                            1066
                        ],
                        "split_items.append": [
                            1061
                        ],
                        "split_frames.append": [
                            1062
                        ],
                        "values": [
                            1066
                        ],
                        "isinstance": [
                            1067,
                            1076,
                            1070
                        ],
                        "result.ndim": [
                            1080,
                            1067
                        ],
                        "result.reshape": [
                            1088,
                            1068
                        ],
                        "maybe_downcast_numeric": [
                            1074
                        ],
                        "block.dtype": [
                            1074
                        ],
                        "block.is_extension": [
                            1076
                        ],
                        "result.shape": [
                            1080,
                            1101
                        ],
                        "_from_sequence": [
                            1083
                        ],
                        "type": [
                            1083
                        ],
                        "result.ravel": [
                            1084
                        ],
                        "block.values.dtype": [
                            1084
                        ],
                        "ValueError": [
                            1086
                        ],
                        "agg_block": [
                            1090,
                            1093
                        ],
                        "block.make_block": [
                            1090
                        ],
                        "new_items.append": [
                            1092,
                            1103
                        ],
                        "agg_blocks.append": [
                            1104,
                            1093
                        ],
                        "DataError": [
                            1096
                        ],
                        "zip": [
                            1100
                        ],
                        "i": [
                            1104,
                            1102
                        ],
                        "loc": [
                            1125,
                            1126,
                            1127,
                            1102,
                            1103
                        ],
                        "enumerate": [
                            1102
                        ],
                        "np.array": [
                            1103
                        ],
                        "locs.dtype": [
                            1103
                        ],
                        "_data.blocks": [
                            1104
                        ],
                        "_data": [
                            1104
                        ],
                        "result.iloc": [
                            1104
                        ],
                        "indexer": [
                            1121,
                            1108,
                            1109,
                            1126
                        ],
                        "np.concatenate": [
                            1108,
                            1117
                        ],
                        "agg_items": [
                            1129,
                            1109
                        ],
                        "data.items.take": [
                            1109
                        ],
                        "np.sort": [
                            1109
                        ],
                        "deleted": [
                            1120,
                            1117
                        ],
                        "ai": [
                            1121,
                            1118
                        ],
                        "np.arange": [
                            1118
                        ],
                        "mask": [
                            1120,
                            1121,
                            1119
                        ],
                        "np.zeros": [
                            1119
                        ],
                        "mask.cumsum": [
                            1121
                        ],
                        "offset": [
                            1123,
                            1126,
                            1127
                        ],
                        "blk": [
                            1124,
                            1125,
                            1126
                        ],
                        "blk.mgr_locs": [
                            1125,
                            1126
                        ]
                    },
                    "diff_line_number": 1086,
                    "class_data": {
                        "signature": "class DataFrameGroupBy(GroupBy)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "aggregate(self, func=None, *args, **kwargs)",
                            "_iterate_slices(self) -> Iterable[Series]",
                            "_cython_agg_general(self, how: str, alt=None, numeric_only: bool=True, min_count: int=-1) -> DataFrame",
                            "_cython_agg_blocks(self, how: str, alt=None, numeric_only: bool=True, min_count: int=-1) -> 'Tuple[List[Block], Index]'",
                            "_aggregate_frame(self, func, *args, **kwargs) -> DataFrame",
                            "_aggregate_item_by_item(self, func, *args, **kwargs) -> DataFrame",
                            "_wrap_applied_output(self, keys, values, not_indexed_same=False)",
                            "_transform_general(self, func, *args, **kwargs)",
                            "transform(self, func, *args, **kwargs)",
                            "_transform_fast(self, result: DataFrame, func_nm: str) -> DataFrame",
                            "_define_paths(self, func, *args, **kwargs)",
                            "_choose_path(self, fast_path: Callable, slow_path: Callable, group: DataFrame)",
                            "_transform_item_by_item(self, obj: DataFrame, wrapper) -> DataFrame",
                            "filter(self, func, dropna=True, *args, **kwargs)",
                            "__getitem__(self, key)",
                            "_gotitem(self, key, ndim: int, subset=None)",
                            "_wrap_frame_output(self, result, obj) -> DataFrame",
                            "_get_data_to_aggregate(self) -> BlockManager",
                            "_insert_inaxis_grouper_inplace(self, result)",
                            "_wrap_aggregated_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]) -> DataFrame",
                            "_wrap_transformed_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]) -> DataFrame",
                            "_wrap_agged_blocks(self, blocks: 'Sequence[Block]', items: Index) -> DataFrame",
                            "_iterate_column_groupbys(self)",
                            "_apply_to_column_groupbys(self, func)",
                            "count(self)",
                            "nunique(self, dropna: bool=True)",
                            "first_not_none(values)",
                            "groupby_series(obj, col=None)"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [
                            "_apply_whitelist",
                            "_agg_see_also_doc",
                            "_agg_examples_doc",
                            "agg",
                            "boxplot"
                        ],
                        "class_decorators": [
                            "pin_whitelisted_properties(DataFrame, base.dataframe_apply_whitelist)"
                        ]
                    }
                }
            ],
            "inscope_functions": [
                "generate_property(name: str, klass: Type[FrameOrSeries])",
                "pin_whitelisted_properties(klass: Type[FrameOrSeries], whitelist: FrozenSet[str])",
                "_recast_datetimelike_result(result: DataFrame) -> DataFrame",
                "prop(self)",
                "pinner(cls)",
                "_iterate_slices(self) -> Iterable[Series]",
                "_selection_name(self)",
                "apply(self, func, *args, **kwargs)",
                "aggregate(self, func=None, *args, **kwargs)",
                "_aggregate_multiple_funcs(self, arg)",
                "_wrap_series_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]], index: Index) -> Union[Series, DataFrame]",
                "_wrap_aggregated_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]) -> Union[Series, DataFrame]",
                "_wrap_transformed_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]) -> Series",
                "_wrap_applied_output(self, keys, values, not_indexed_same=False)",
                "_aggregate_named(self, func, *args, **kwargs)",
                "transform(self, func, *args, **kwargs)",
                "_transform_general(self, func, *args, **kwargs)",
                "_transform_fast(self, result, func_nm: str) -> Series",
                "filter(self, func, dropna=True, *args, **kwargs)",
                "nunique(self, dropna: bool=True) -> Series",
                "describe(self, **kwargs)",
                "value_counts(self, normalize=False, sort=True, ascending=False, bins=None, dropna=True)",
                "count(self) -> Series",
                "_apply_to_column_groupbys(self, func)",
                "pct_change(self, periods=1, fill_method='pad', limit=None, freq=None)",
                "aggregate(self, func=None, *args, **kwargs)",
                "_iterate_slices(self) -> Iterable[Series]",
                "_cython_agg_general(self, how: str, alt=None, numeric_only: bool=True, min_count: int=-1) -> DataFrame",
                "_cython_agg_blocks(self, how: str, alt=None, numeric_only: bool=True, min_count: int=-1) -> 'Tuple[List[Block], Index]'",
                "_aggregate_frame(self, func, *args, **kwargs) -> DataFrame",
                "_aggregate_item_by_item(self, func, *args, **kwargs) -> DataFrame",
                "_wrap_applied_output(self, keys, values, not_indexed_same=False)",
                "_transform_general(self, func, *args, **kwargs)",
                "transform(self, func, *args, **kwargs)",
                "_transform_fast(self, result: DataFrame, func_nm: str) -> DataFrame",
                "_define_paths(self, func, *args, **kwargs)",
                "_choose_path(self, fast_path: Callable, slow_path: Callable, group: DataFrame)",
                "_transform_item_by_item(self, obj: DataFrame, wrapper) -> DataFrame",
                "filter(self, func, dropna=True, *args, **kwargs)",
                "__getitem__(self, key)",
                "_gotitem(self, key, ndim: int, subset=None)",
                "_wrap_frame_output(self, result, obj) -> DataFrame",
                "_get_data_to_aggregate(self) -> BlockManager",
                "_insert_inaxis_grouper_inplace(self, result)",
                "_wrap_aggregated_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]) -> DataFrame",
                "_wrap_transformed_output(self, output: Mapping[base.OutputKey, Union[Series, np.ndarray]]) -> DataFrame",
                "_wrap_agged_blocks(self, blocks: 'Sequence[Block]', items: Index) -> DataFrame",
                "_iterate_column_groupbys(self)",
                "_apply_to_column_groupbys(self, func)",
                "count(self)",
                "nunique(self, dropna: bool=True)",
                "_get_index() -> Index",
                "true_and_notna(x, *args, **kwargs) -> bool",
                "build_codes(lev_codes: np.ndarray) -> np.ndarray",
                "first_not_none(values)",
                "groupby_series(obj, col=None)"
            ],
            "variables_in_file": {
                "TYPE_CHECKING": [
                    79
                ],
                "NamedAgg": [
                    83
                ],
                "namedtuple": [
                    83
                ],
                "AggScalar": [
                    85
                ],
                "Union": [
                    1155,
                    357,
                    1670,
                    1703,
                    392,
                    333,
                    334,
                    367,
                    368,
                    1138,
                    85
                ],
                "str": [
                    992,
                    1442,
                    1155,
                    520,
                    1000,
                    1417,
                    1166,
                    561,
                    1138,
                    115,
                    467,
                    85,
                    1467,
                    249,
                    953,
                    92
                ],
                "Callable": [
                    85,
                    1479
                ],
                "Any": [
                    85
                ],
                "ScalarResult": [
                    89
                ],
                "typing.TypeVar": [
                    89
                ],
                "typing": [
                    89
                ],
                "Type": [
                    115,
                    92
                ],
                "FrameOrSeries": [
                    115,
                    92
                ],
                "self._make_wrapper": [
                    107
                ],
                "self": [
                    512,
                    516,
                    517,
                    525,
                    526,
                    1039,
                    529,
                    530,
                    1045,
                    1047,
                    1564,
                    1565,
                    1580,
                    1588,
                    573,
                    578,
                    590,
                    592,
                    1618,
                    1621,
                    1623,
                    1624,
                    1625,
                    1626,
                    1630,
                    1632,
                    1638,
                    1640,
                    107,
                    1132,
                    1646,
                    1135,
                    624,
                    1136,
                    1647,
                    1140,
                    631,
                    632,
                    1144,
                    1145,
                    1658,
                    636,
                    637,
                    1149,
                    1659,
                    1660,
                    1154,
                    1159,
                    1161,
                    651,
                    659,
                    660,
                    1176,
                    1690,
                    1691,
                    156,
                    1694,
                    1697,
                    1188,
                    165,
                    166,
                    1700,
                    168,
                    1204,
                    1205,
                    1206,
                    1207,
                    698,
                    1210,
                    700,
                    701,
                    1722,
                    1727,
                    1732,
                    1735,
                    1225,
                    1739,
                    1742,
                    1745,
                    1747,
                    1749,
                    1750,
                    733,
                    1757,
                    1758,
                    1250,
                    1257,
                    1771,
                    1772,
                    1268,
                    1784,
                    250,
                    765,
                    256,
                    1281,
                    1283,
                    260,
                    262,
                    264,
                    265,
                    776,
                    777,
                    268,
                    272,
                    274,
                    786,
                    787,
                    790,
                    279,
                    794,
                    800,
                    1316,
                    1831,
                    296,
                    808,
                    809,
                    1834,
                    1329,
                    1333,
                    1845,
                    1339,
                    316,
                    320,
                    1860,
                    1354,
                    1360,
                    1361,
                    1362,
                    1371,
                    1373,
                    1404,
                    1405,
                    1406,
                    1408,
                    386,
                    387,
                    389,
                    1415,
                    1418,
                    1425,
                    1433,
                    412,
                    1436,
                    1438,
                    1440,
                    931,
                    421,
                    424,
                    425,
                    938,
                    427,
                    939,
                    941,
                    1448,
                    943,
                    1450,
                    433,
                    945,
                    1454,
                    436,
                    437,
                    1461,
                    951,
                    441,
                    444,
                    956,
                    1470,
                    447,
                    448,
                    959,
                    962,
                    963,
                    1475,
                    453,
                    465,
                    977,
                    978,
                    468,
                    981,
                    986,
                    475,
                    480,
                    481,
                    994,
                    997,
                    487,
                    1512,
                    490,
                    1005,
                    497,
                    1023
                ],
                "name": [
                    1665,
                    1667,
                    137,
                    138,
                    143,
                    144,
                    1567,
                    1568,
                    1580,
                    315,
                    573,
                    320,
                    323,
                    324,
                    453,
                    454,
                    458,
                    1365,
                    1366,
                    490,
                    107,
                    491,
                    109,
                    1260,
                    111,
                    497,
                    1140,
                    1142,
                    1144,
                    1145,
                    1147
                ],
                "parent_method": [
                    109,
                    110
                ],
                "getattr": [
                    480,
                    262,
                    808,
                    109,
                    1425,
                    562,
                    1433,
                    250,
                    475,
                    1468,
                    1470
                ],
                "klass": [
                    498,
                    487,
                    109,
                    143
                ],
                "prop.__doc__": [
                    110
                ],
                "prop": [
                    110,
                    143,
                    112,
                    144,
                    111
                ],
                "parent_method.__doc__": [
                    110
                ],
                "prop.__name__": [
                    111
                ],
                "property": [
                    112,
                    158
                ],
                "FrozenSet": [
                    115
                ],
                "whitelist": [
                    137
                ],
                "hasattr": [
                    138
                ],
                "cls": [
                    144,
                    138,
                    146
                ],
                "generate_property": [
                    143
                ],
                "setattr": [
                    144
                ],
                "pinner": [
                    148
                ],
                "GroupBy": [
                    152,
                    816
                ],
                "_apply_whitelist": [
                    153,
                    818
                ],
                "base.series_apply_whitelist": [
                    153,
                    151
                ],
                "base": [
                    1670,
                    1703,
                    392,
                    473,
                    333,
                    1420,
                    367,
                    1423,
                    815,
                    818,
                    1429,
                    470,
                    151,
                    153
                ],
                "self._selected_obj": [
                    512,
                    320,
                    1250,
                    516,
                    517,
                    487,
                    296,
                    1831,
                    977,
                    1745,
                    1747,
                    1333,
                    156,
                    1564,
                    1758,
                    959
                ],
                "Iterable": [
                    976,
                    155
                ],
                "Series": [
                    1670,
                    392,
                    393,
                    520,
                    652,
                    784,
                    530,
                    151,
                    155,
                    415,
                    672,
                    421,
                    1703,
                    296,
                    1838,
                    1329,
                    440,
                    447,
                    1348,
                    581,
                    456,
                    333,
                    334,
                    976,
                    981,
                    1237,
                    733,
                    1248,
                    1249,
                    1380,
                    357,
                    362,
                    367,
                    368,
                    631,
                    634,
                    507,
                    765,
                    767
                ],
                "self._selection": [
                    168,
                    165
                ],
                "self.obj.name": [
                    530,
                    166
                ],
                "self.obj": [
                    166,
                    777,
                    1039,
                    592,
                    529,
                    530,
                    1618,
                    660,
                    1722,
                    412,
                    1630
                ],
                "_agg_see_also_doc": [
                    170,
                    820,
                    230,
                    903
                ],
                "dedent": [
                    830,
                    170,
                    180,
                    820
                ],
                "_agg_examples_doc": [
                    904,
                    180,
                    830,
                    231
                ],
                "apply": [
                    227
                ],
                "super": [
                    1601,
                    227
                ],
                "func": [
                    256,
                    260,
                    1146,
                    1415,
                    265,
                    1161,
                    1163,
                    268,
                    1417,
                    1418,
                    1420,
                    272,
                    912,
                    914,
                    1421,
                    1423,
                    917,
                    1425,
                    1429,
                    1433,
                    794,
                    925,
                    1438,
                    1440,
                    929,
                    1570,
                    931,
                    939,
                    941,
                    561,
                    562,
                    945,
                    564,
                    951,
                    315,
                    956,
                    1467,
                    1468,
                    1470,
                    1473,
                    1475,
                    324,
                    455,
                    465,
                    1362,
                    467,
                    468,
                    470,
                    471,
                    473,
                    475,
                    1757,
                    480,
                    481,
                    227,
                    492,
                    239,
                    244,
                    1141,
                    249,
                    250,
                    252,
                    255
                ],
                "args": [
                    261,
                    1146,
                    265,
                    1418,
                    1163,
                    268,
                    272,
                    1425,
                    1433,
                    1440,
                    1570,
                    931,
                    939,
                    940,
                    941,
                    562,
                    564,
                    568,
                    1468,
                    1470,
                    1473,
                    1475,
                    455,
                    1362,
                    468,
                    475,
                    480,
                    227,
                    492,
                    1141,
                    250
                ],
                "kwargs": [
                    261,
                    1146,
                    265,
                    1418,
                    1163,
                    268,
                    272,
                    912,
                    914,
                    1425,
                    916,
                    1433,
                    1440,
                    1570,
                    931,
                    939,
                    940,
                    941,
                    562,
                    564,
                    568,
                    1468,
                    1470,
                    1473,
                    1475,
                    455,
                    1362,
                    468,
                    1236,
                    1239,
                    1242,
                    475,
                    480,
                    227,
                    492,
                    243,
                    244,
                    245,
                    1141,
                    250,
                    636
                ],
                "Appender": [
                    1411,
                    236,
                    909,
                    463,
                    634,
                    221
                ],
                "format": [
                    222
                ],
                "_apply_docs": [
                    222,
                    223
                ],
                "relabeling": [
                    257,
                    966,
                    239,
                    912,
                    913,
                    242
                ],
                "columns": [
                    258,
                    914,
                    1685,
                    1688,
                    299,
                    305,
                    308,
                    310,
                    1718,
                    312,
                    1721,
                    330,
                    970,
                    355,
                    360,
                    362,
                    240,
                    1522,
                    243,
                    244,
                    1524,
                    246,
                    1526
                ],
                "no_arg_message": [
                    241,
                    247
                ],
                "list": [
                    299,
                    301,
                    302,
                    1294,
                    243,
                    917
                ],
                "col": [
                    1512,
                    1834,
                    244,
                    1510
                ],
                "TypeError": [
                    576,
                    1513,
                    575,
                    1583,
                    1520,
                    247,
                    1048,
                    1372,
                    927
                ],
                "isinstance": [
                    1283,
                    1417,
                    1299,
                    917,
                    1301,
                    282,
                    1435,
                    415,
                    291,
                    1319,
                    296,
                    1067,
                    301,
                    302,
                    430,
                    1070,
                    561,
                    1838,
                    1203,
                    1076,
                    440,
                    1592,
                    442,
                    1467,
                    1344,
                    326,
                    456,
                    1232,
                    467,
                    981,
                    1495,
                    1248,
                    1249,
                    1380,
                    494,
                    249,
                    252
                ],
                "abc.Iterable": [
                    252
                ],
                "abc": [
                    252
                ],
                "maybe_mangle_lambdas": [
                    929,
                    255
                ],
                "ret": [
                    256,
                    258,
                    275,
                    282,
                    285,
                    286
                ],
                "self._aggregate_multiple_funcs": [
                    256,
                    951
                ],
                "ret.columns": [
                    258
                ],
                "cyfunc": [
                    260,
                    261,
                    262
                ],
                "self._get_cython_func": [
                    465,
                    260,
                    1415
                ],
                "self.grouper.nkeys": [
                    264,
                    938,
                    1132,
                    424
                ],
                "self.grouper": [
                    387,
                    1159,
                    264,
                    776,
                    525,
                    274,
                    659,
                    786,
                    1045,
                    1565,
                    1694,
                    1188,
                    424,
                    425,
                    809,
                    427,
                    938,
                    1834,
                    1454,
                    1205,
                    1206,
                    1207,
                    698,
                    1210,
                    700,
                    701,
                    1735,
                    590,
                    1361,
                    1621,
                    1749,
                    1623,
                    1632,
                    1638,
                    1132,
                    1772,
                    624,
                    1658,
                    1659,
                    1660,
                    1023
                ],
                "self._python_agg_general": [
                    265,
                    939,
                    268
                ],
                "ValueError": [
                    1376,
                    1374,
                    457,
                    269,
                    1165,
                    1422,
                    952,
                    472,
                    1086,
                    575
                ],
                "KeyError": [
                    269
                ],
                "result": [
                    514,
                    516,
                    517,
                    518,
                    527,
                    1047,
                    1054,
                    1056,
                    1062,
                    1065,
                    1066,
                    1067,
                    1068,
                    1070,
                    1072,
                    1074,
                    1076,
                    1080,
                    1083,
                    1084,
                    1088,
                    1090,
                    1100,
                    1101,
                    1104,
                    1641,
                    1643,
                    1138,
                    1142,
                    631,
                    632,
                    1147,
                    636,
                    1149,
                    638,
                    639,
                    1155,
                    1667,
                    1163,
                    1687,
                    1176,
                    1688,
                    1691,
                    1692,
                    1182,
                    1695,
                    1698,
                    1700,
                    1720,
                    1721,
                    1722,
                    1724,
                    1730,
                    1732,
                    1733,
                    1737,
                    1740,
                    1742,
                    272,
                    784,
                    274,
                    276,
                    790,
                    1304,
                    1312,
                    1318,
                    1321,
                    1335,
                    1337,
                    1339,
                    1885,
                    1889,
                    1890,
                    357,
                    359,
                    360,
                    1896,
                    362,
                    1899,
                    364,
                    1900,
                    386,
                    389,
                    1433,
                    1435,
                    412,
                    1438,
                    415,
                    416,
                    931,
                    933,
                    935,
                    941,
                    1456,
                    433,
                    945,
                    1457,
                    436,
                    437,
                    438,
                    951,
                    1464,
                    956,
                    958,
                    447,
                    448,
                    959,
                    451,
                    963,
                    964,
                    969,
                    458,
                    970,
                    460,
                    972,
                    480,
                    481,
                    505,
                    507,
                    1020,
                    1023
                ],
                "self._aggregate_named": [
                    272
                ],
                "index": [
                    1286,
                    1287,
                    1294,
                    274,
                    276,
                    1305,
                    1694,
                    1695,
                    1318,
                    425,
                    427,
                    428,
                    432,
                    433,
                    1728,
                    1729,
                    1735,
                    1736,
                    359,
                    362
                ],
                "Index": [
                    1248,
                    355,
                    1222,
                    423,
                    456,
                    427,
                    1726,
                    333,
                    274,
                    1685,
                    1718,
                    958,
                    1215
                ],
                "sorted": [
                    274
                ],
                "self.grouper.names": [
                    1188,
                    425,
                    427,
                    274,
                    1658,
                    701
                ],
                "create_series_with_explicit_dtype": [
                    275,
                    1238
                ],
                "object": [
                    1568,
                    491,
                    276,
                    1366,
                    1239,
                    1017
                ],
                "self.as_index": [
                    962,
                    1860,
                    1225,
                    279,
                    1625,
                    1690,
                    1727
                ],
                "print": [
                    280
                ],
                "dict": [
                    282,
                    291,
                    430
                ],
                "concat": [
                    1312,
                    1853,
                    1388,
                    505,
                    1756,
                    285,
                    1406,
                    1277
                ],
                "Substitution": [
                    1410,
                    902,
                    229,
                    462
                ],
                "_shared_docs": [
                    236,
                    909
                ],
                "agg": [
                    288,
                    974
                ],
                "aggregate": [
                    288,
                    974
                ],
                "arg": [
                    291,
                    299,
                    300,
                    301,
                    302,
                    305,
                    309,
                    312,
                    315
                ],
                "SpecificationError": [
                    297,
                    921
                ],
                "arg.keys": [
                    299
                ],
                "arg.items": [
                    300
                ],
                "any": [
                    1334,
                    1344,
                    301,
                    326
                ],
                "x": [
                    1344,
                    801,
                    1251,
                    1475,
                    326,
                    301,
                    302,
                    562,
                    1244,
                    564,
                    1780,
                    1047,
                    568,
                    636,
                    1470
                ],
                "tuple": [
                    1592,
                    301,
                    302
                ],
                "next": [
                    305,
                    1193
                ],
                "zip": [
                    1100,
                    305,
                    1654,
                    1782,
                    312
                ],
                "f": [
                    309,
                    310
                ],
                "columns.append": [
                    310
                ],
                "com.get_callable_name": [
                    310
                ],
                "com": [
                    1193,
                    310
                ],
                "results": [
                    1856,
                    1858,
                    324,
                    1861,
                    326,
                    1862,
                    328,
                    489,
                    330,
                    1839,
                    499,
                    502,
                    505,
                    314,
                    1852,
                    1853
                ],
                "obj": [
                    1154,
                    1157,
                    1158,
                    1039,
                    1040,
                    1043,
                    1045,
                    1178,
                    1564,
                    1565,
                    1831,
                    1450,
                    1834,
                    1838,
                    1839,
                    1461,
                    1845,
                    1464,
                    1848,
                    1850,
                    316,
                    321,
                    322,
                    323,
                    324,
                    1858,
                    1360,
                    977,
                    1361,
                    979,
                    981,
                    983,
                    985,
                    1373,
                    1510,
                    1641,
                    1387,
                    1643,
                    1646,
                    1136,
                    1648,
                    1522,
                    1139,
                    1523,
                    1650,
                    1526,
                    1145,
                    1404,
                    1149
                ],
                "copy.copy": [
                    321
                ],
                "copy": [
                    321
                ],
                "obj._reset_cache": [
                    322
                ],
                "obj._selection": [
                    323
                ],
                "obj.aggregate": [
                    324
                ],
                "DataFrame": [
                    1671,
                    1687,
                    1304,
                    1435,
                    1182,
                    1054,
                    1186,
                    1442,
                    1704,
                    1321,
                    1070,
                    815,
                    433,
                    1202,
                    1203,
                    1464,
                    1720,
                    442,
                    1726,
                    1730,
                    326,
                    1479,
                    1737,
                    330,
                    1867,
                    334,
                    1231,
                    1495,
                    993,
                    1506,
                    357,
                    1637,
                    359,
                    1641,
                    1131,
                    1643,
                    368,
                    1392,
                    1526,
                    1015,
                    1151
                ],
                "results.values": [
                    326
                ],
                "Mapping": [
                    1670,
                    1703,
                    392,
                    333,
                    367
                ],
                "base.OutputKey": [
                    1670,
                    1703,
                    392,
                    333,
                    367
                ],
                "np.ndarray": [
                    1248,
                    1670,
                    1703,
                    392,
                    456,
                    1067,
                    333,
                    367,
                    1138,
                    755,
                    1011,
                    1012,
                    1014,
                    1076
                ],
                "np": [
                    1670,
                    392,
                    648,
                    782,
                    1303,
                    421,
                    679,
                    1320,
                    681,
                    1703,
                    1067,
                    686,
                    690,
                    692,
                    1076,
                    695,
                    1728,
                    964,
                    456,
                    712,
                    715,
                    333,
                    1103,
                    595,
                    723,
                    1108,
                    1109,
                    601,
                    602,
                    1117,
                    1118,
                    1119,
                    1248,
                    737,
                    610,
                    739,
                    613,
                    743,
                    1385,
                    619,
                    748,
                    367,
                    751,
                    1393,
                    1138,
                    755,
                    628,
                    756,
                    1011,
                    1012,
                    1014,
                    507
                ],
                "indexed_output": [
                    354,
                    359,
                    362,
                    1684,
                    1717,
                    1687,
                    1720
                ],
                "key.position": [
                    354,
                    1684,
                    1717
                ],
                "key": [
                    1632,
                    1601,
                    354,
                    355,
                    1684,
                    1685,
                    1622,
                    1717,
                    1592,
                    1718,
                    1630
                ],
                "val": [
                    672,
                    354,
                    777,
                    779,
                    592,
                    594,
                    660,
                    1684,
                    1717,
                    1782,
                    664,
                    667
                ],
                "output.items": [
                    354,
                    1684,
                    1717
                ],
                "output": [
                    387,
                    1684,
                    1685,
                    411,
                    412,
                    1455,
                    1717,
                    1462,
                    1718,
                    1464,
                    455,
                    456,
                    458,
                    354,
                    355,
                    1508,
                    358,
                    1512,
                    1519,
                    1523,
                    1526
                ],
                "key.label": [
                    355,
                    1685,
                    1718
                ],
                "len": [
                    1293,
                    917,
                    411,
                    1056,
                    1185,
                    419,
                    1065,
                    1206,
                    1592,
                    1211,
                    964,
                    1861,
                    712,
                    1101,
                    1118,
                    1119,
                    737,
                    1889,
                    1252,
                    741,
                    614,
                    358,
                    1125,
                    1388,
                    1519,
                    1393,
                    627,
                    628,
                    1523
                ],
                "result.columns": [
                    1889,
                    1318,
                    360,
                    970,
                    1688,
                    1456,
                    1464,
                    1721,
                    1435,
                    958,
                    959
                ],
                "self._wrap_series_output": [
                    386,
                    412
                ],
                "self.grouper.result_index": [
                    387,
                    1735,
                    624,
                    786,
                    1207,
                    1694
                ],
                "_convert": [
                    1700,
                    1348,
                    389,
                    1742
                ],
                "self._reindex_output": [
                    448,
                    1700,
                    389,
                    1742,
                    433,
                    790,
                    632,
                    1339
                ],
                "self.obj.index": [
                    1722,
                    530,
                    412
                ],
                "keys": [
                    1185,
                    1186,
                    419,
                    1281,
                    421,
                    1222,
                    425,
                    1354,
                    427,
                    1260,
                    1204,
                    1269,
                    441,
                    1211,
                    444,
                    1215
                ],
                "self._selection_name": [
                    421,
                    733,
                    765,
                    1329,
                    787,
                    437,
                    631,
                    701,
                    447
                ],
                "np.float64": [
                    507,
                    421
                ],
                "MultiIndex.from_tuples": [
                    425
                ],
                "MultiIndex": [
                    425,
                    1299,
                    1301,
                    727,
                    761
                ],
                "values": [
                    1281,
                    1292,
                    1303,
                    1313,
                    1320,
                    1193,
                    1066,
                    1197,
                    430,
                    433,
                    1329,
                    1457,
                    1204,
                    440,
                    441,
                    442,
                    444,
                    447,
                    1344,
                    1728,
                    1219,
                    1348,
                    1354,
                    1229,
                    985,
                    1244,
                    989,
                    1246,
                    1251,
                    1252,
                    1896,
                    1260,
                    1269,
                    1277
                ],
                "_get_index": [
                    432,
                    447
                ],
                "result.stack": [
                    436
                ],
                "self.observed": [
                    1632,
                    1626,
                    436
                ],
                "result.name": [
                    516,
                    437
                ],
                "self._concat_objects": [
                    1281,
                    1354,
                    1204,
                    1268,
                    441,
                    444
                ],
                "not_indexed_same": [
                    1354,
                    1204,
                    1269,
                    441,
                    444
                ],
                "group": [
                    1567,
                    1568,
                    1570,
                    1468,
                    573,
                    1469,
                    1473,
                    1474,
                    453,
                    454,
                    455,
                    1481,
                    1485,
                    1365,
                    1366,
                    1498,
                    1371,
                    1378,
                    1385,
                    490,
                    491,
                    492,
                    1388,
                    1389,
                    1390,
                    1393,
                    1394,
                    1396,
                    1397
                ],
                "group.name": [
                    454
                ],
                "self._transform_general": [
                    1440,
                    1418,
                    468
                ],
                "base.transform_kernel_whitelist": [
                    1420,
                    470
                ],
                "msg": [
                    1376,
                    1421,
                    1422,
                    471,
                    472,
                    1375
                ],
                "base.cythonized_kernels": [
                    473,
                    1423
                ],
                "self._transform_fast": [
                    481,
                    1438
                ],
                "_transform_template": [
                    1411,
                    463
                ],
                "type": [
                    1584,
                    1083,
                    487
                ],
                "object.__setattr__": [
                    1568,
                    491,
                    1366
                ],
                "res": [
                    1570,
                    1573,
                    1578,
                    1579,
                    1584,
                    1457,
                    1461,
                    1462,
                    1481,
                    1491,
                    1496,
                    1371,
                    1499,
                    1501,
                    1504,
                    1378,
                    1380,
                    618,
                    1387,
                    492,
                    621,
                    494,
                    495,
                    623,
                    1388,
                    498,
                    627,
                    628,
                    629,
                    1393,
                    631,
                    1402
                ],
                "ABCDataFrame": [
                    494
                ],
                "ABCSeries": [
                    1283,
                    494,
                    1319
                ],
                "res._values": [
                    495
                ],
                "indexer": [
                    1216,
                    1121,
                    1219,
                    1126,
                    497,
                    498,
                    1108,
                    1109
                ],
                "self._get_index": [
                    497,
                    1580,
                    573
                ],
                "ser": [
                    498,
                    499
                ],
                "results.append": [
                    499
                ],
                "sort_index": [
                    505
                ],
                "dtype": [
                    512,
                    513,
                    514
                ],
                "self._selected_obj.dtype": [
                    512
                ],
                "is_numeric_dtype": [
                    513
                ],
                "maybe_downcast_to_dtype": [
                    514
                ],
                "self._selected_obj.name": [
                    516
                ],
                "result.index": [
                    1722,
                    964,
                    517,
                    1695
                ],
                "self._selected_obj.index": [
                    517
                ],
                "ids": [
                    776,
                    779,
                    780,
                    525,
                    782,
                    527,
                    659,
                    663,
                    664,
                    679,
                    681,
                    683,
                    686,
                    1454,
                    1457,
                    712,
                    714,
                    590,
                    722,
                    595,
                    597,
                    601,
                    614,
                    617,
                    1772,
                    1773,
                    1780,
                    629
                ],
                "_": [
                    776,
                    747,
                    1772,
                    525,
                    590,
                    1454,
                    1456,
                    594,
                    659,
                    1757,
                    1023
                ],
                "ngroup": [
                    525,
                    1454
                ],
                "self.grouper.group_info": [
                    776,
                    1772,
                    525,
                    1454,
                    590,
                    659
                ],
                "cast": [
                    1448,
                    1161,
                    526,
                    528,
                    1460,
                    1175,
                    1054
                ],
                "self._transform_should_cast": [
                    1448,
                    1161,
                    526
                ],
                "func_nm": [
                    1448,
                    526
                ],
                "out": [
                    782,
                    527,
                    529,
                    530,
                    785,
                    692,
                    708,
                    711,
                    719,
                    723,
                    724,
                    731,
                    732,
                    733,
                    737,
                    613,
                    618,
                    748,
                    621,
                    623,
                    751,
                    752,
                    628,
                    629,
                    763,
                    764,
                    765
                ],
                "algorithms.take_1d": [
                    1457,
                    527
                ],
                "algorithms": [
                    1457,
                    594,
                    667,
                    527
                ],
                "result._values": [
                    527
                ],
                "self._try_cast": [
                    1176,
                    529,
                    1461
                ],
                "wrapper": [
                    568,
                    562,
                    1512,
                    564
                ],
                "b": [
                    568,
                    569
                ],
                "notna": [
                    569,
                    1579
                ],
                "bool": [
                    992,
                    581,
                    1000,
                    567,
                    1786
                ],
                "indices": [
                    578,
                    1580,
                    1588,
                    1562,
                    572
                ],
                "true_and_notna": [
                    573
                ],
                "err": [
                    576,
                    953,
                    1376,
                    1166
                ],
                "filtered": [
                    578,
                    579
                ],
                "self._apply_filter": [
                    578,
                    1588
                ],
                "dropna": [
                    706,
                    578,
                    713,
                    1835,
                    722,
                    1588,
                    606,
                    703
                ],
                "self.obj._values": [
                    592,
                    777,
                    660
                ],
                "codes": [
                    704,
                    738,
                    708,
                    745,
                    728,
                    594,
                    595,
                    596,
                    724,
                    758,
                    759,
                    698,
                    761,
                    602,
                    699,
                    605
                ],
                "algorithms.factorize": [
                    594,
                    667
                ],
                "sorter": [
                    679,
                    681,
                    683,
                    751,
                    752,
                    595,
                    596,
                    597,
                    723,
                    724
                ],
                "np.lexsort": [
                    679,
                    681,
                    751,
                    595,
                    723
                ],
                "idx": [
                    1888,
                    1889,
                    1890,
                    611,
                    613,
                    712,
                    619,
                    747,
                    748,
                    686,
                    691,
                    629,
                    695,
                    601,
                    607
                ],
                "np.r_": [
                    610,
                    739,
                    712,
                    686,
                    690,
                    692,
                    601,
                    602
                ],
                "np.nonzero": [
                    601,
                    692,
                    686
                ],
                "inc": [
                    608,
                    610,
                    611,
                    675,
                    613,
                    690,
                    691,
                    692,
                    722,
                    695,
                    602,
                    699,
                    668,
                    607
                ],
                "mask": [
                    608,
                    704,
                    610,
                    705,
                    708,
                    1120,
                    1121,
                    779,
                    716,
                    1773,
                    782,
                    1776,
                    722,
                    663,
                    664,
                    605,
                    1119
                ],
                "astype": [
                    613
                ],
                "np.add.reduceat": [
                    613,
                    695
                ],
                "np.add": [
                    715,
                    613,
                    695
                ],
                "np.flatnonzero": [
                    619
                ],
                "ri": [
                    624,
                    627,
                    628,
                    631
                ],
                "np.zeros": [
                    737,
                    628,
                    1119
                ],
                "out.dtype": [
                    628
                ],
                "self.apply": [
                    800,
                    651,
                    636
                ],
                "x.describe": [
                    636
                ],
                "self.axis": [
                    1283,
                    637,
                    1047,
                    1565,
                    1697,
                    1316,
                    943,
                    1845,
                    951,
                    1470,
                    1475,
                    1739,
                    1361,
                    978,
                    1250,
                    1640,
                    1135,
                    1647,
                    1404,
                    1405,
                    1406
                ],
                "result.T": [
                    1698,
                    1740,
                    638
                ],
                "result.unstack": [
                    639
                ],
                "Series.describe.__doc__": [
                    634
                ],
                "Series.describe": [
                    634
                ],
                "bins": [
                    672,
                    648,
                    656,
                    721,
                    726,
                    666
                ],
                "np.iterable": [
                    648
                ],
                "Series.value_counts": [
                    652
                ],
                "normalize": [
                    653,
                    710
                ],
                "sort": [
                    721,
                    654,
                    750
                ],
                "ascending": [
                    751,
                    723,
                    655
                ],
                "lab": [
                    672,
                    673,
                    674,
                    675,
                    677,
                    679,
                    681,
                    714,
                    683,
                    689,
                    667,
                    668,
                    699
                ],
                "lev": [
                    673,
                    674,
                    1665,
                    1667,
                    667,
                    700
                ],
                "llab": [
                    689,
                    675,
                    668,
                    699
                ],
                "cut": [
                    672
                ],
                "lab.cat.categories": [
                    673
                ],
                "lab.cat": [
                    673,
                    674
                ],
                "lev.take": [
                    674
                ],
                "lab.cat.codes": [
                    674
                ],
                "_multiindex.codes": [
                    675
                ],
                "_multiindex": [
                    675
                ],
                "is_interval_dtype": [
                    677
                ],
                "lab.left": [
                    679
                ],
                "lab.right": [
                    679
                ],
                "lchanges": [
                    689,
                    690
                ],
                "slice": [
                    689
                ],
                "np.diff": [
                    712,
                    692
                ],
                "rep": [
                    699,
                    716,
                    718,
                    695
                ],
                "partial": [
                    695
                ],
                "np.repeat": [
                    743,
                    756,
                    695
                ],
                "self.grouper.reconstructed_codes": [
                    698
                ],
                "level_codes": [
                    738,
                    699,
                    708,
                    739
                ],
                "levels": [
                    728,
                    761,
                    700,
                    741
                ],
                "ping.group_index": [
                    1212,
                    700
                ],
                "ping": [
                    1210,
                    1211,
                    700,
                    1212
                ],
                "self.grouper.groupings": [
                    700,
                    1205,
                    1206,
                    1210,
                    1660
                ],
                "names": [
                    1858,
                    1292,
                    1293,
                    1294,
                    728,
                    761,
                    701
                ],
                "mask.all": [
                    705
                ],
                "out.astype": [
                    711
                ],
                "d": [
                    712,
                    715,
                    716,
                    718
                ],
                "m": [
                    714,
                    715
                ],
                "np.add.at": [
                    715
                ],
                "acc": [
                    716,
                    718,
                    719
                ],
                "cat": [
                    722,
                    723
                ],
                "mi": [
                    761,
                    733,
                    765,
                    727
                ],
                "is_integer_dtype": [
                    731,
                    763
                ],
                "ensure_int64": [
                    732,
                    764
                ],
                "diff": [
                    737,
                    739,
                    741,
                    745,
                    756
                ],
                "ncat": [
                    741,
                    743
                ],
                "nbin": [
                    756,
                    741,
                    743
                ],
                "diff.sum": [
                    741
                ],
                "left": [
                    743,
                    747,
                    751,
                    752,
                    759
                ],
                "np.arange": [
                    1728,
                    964,
                    1118,
                    743
                ],
                "np.tile": [
                    743
                ],
                "right": [
                    745,
                    747
                ],
                "diff.cumsum": [
                    745
                ],
                "_get_join_indexers": [
                    747
                ],
                "np.where": [
                    748
                ],
                "lev_codes": [
                    756,
                    758
                ],
                "build_codes": [
                    758
                ],
                "codes.append": [
                    759
                ],
                "ngroups": [
                    776,
                    1772,
                    781,
                    1780
                ],
                "isna": [
                    1776,
                    1578,
                    779
                ],
                "ensure_platform_int": [
                    780
                ],
                "minlength": [
                    781,
                    782
                ],
                "np.bincount": [
                    782
                ],
                "freq": [
                    802,
                    810,
                    799
                ],
                "x.pct_change": [
                    801
                ],
                "periods": [
                    802,
                    810
                ],
                "fill_method": [
                    808,
                    802,
                    805,
                    806
                ],
                "limit": [
                    808,
                    802,
                    807
                ],
                "filled": [
                    808,
                    809,
                    812
                ],
                "fill_grp": [
                    809,
                    810
                ],
                "filled.groupby": [
                    809
                ],
                "self.grouper.codes": [
                    809
                ],
                "shifted": [
                    810,
                    812
                ],
                "fill_grp.shift": [
                    810
                ],
                "pin_whitelisted_properties": [
                    815,
                    151
                ],
                "base.dataframe_apply_whitelist": [
                    818,
                    815
                ],
                "is_multi_agg_with_relabel": [
                    912
                ],
                "order": [
                    969,
                    914
                ],
                "normalize_keyword_aggregation": [
                    914
                ],
                "set": [
                    917
                ],
                "how": [
                    1024,
                    931,
                    932,
                    995,
                    1034
                ],
                "self._aggregate": [
                    931
                ],
                "self._aggregate_frame": [
                    945,
                    956,
                    941
                ],
                "result.columns.levels": [
                    959
                ],
                "self._selected_obj.columns.name": [
                    959
                ],
                "self._selected_obj.columns": [
                    1745,
                    1758,
                    959
                ],
                "self._insert_inaxis_grouper_inplace": [
                    1732,
                    963,
                    1691
                ],
                "result.iloc": [
                    1896,
                    969,
                    1899,
                    1104,
                    1457
                ],
                "result._convert": [
                    1337,
                    972
                ],
                "obj.T": [
                    1648,
                    979
                ],
                "obj.name": [
                    981
                ],
                "self.exclusions": [
                    1624,
                    986,
                    981,
                    1750
                ],
                "label": [
                    985,
                    986,
                    1852
                ],
                "obj.items": [
                    1848,
                    985
                ],
                "int": [
                    992,
                    1155,
                    1603,
                    1000,
                    1138,
                    1846
                ],
                "agg_blocks": [
                    994,
                    1124,
                    1093,
                    997,
                    1095,
                    1129,
                    1104,
                    1010
                ],
                "agg_items": [
                    1129,
                    994,
                    1109,
                    997
                ],
                "self._cython_agg_blocks": [
                    994
                ],
                "alt": [
                    995,
                    1047,
                    1031
                ],
                "numeric_only": [
                    995,
                    1007
                ],
                "min_count": [
                    1024,
                    995
                ],
                "self._wrap_agged_blocks": [
                    1784,
                    997
                ],
                "data": [
                    1146,
                    1158,
                    1159,
                    1771,
                    1005,
                    1039,
                    1008,
                    1776,
                    1777,
                    1784,
                    1140,
                    1109,
                    1141,
                    1176,
                    1145,
                    1018,
                    1118,
                    1119
                ],
                "BlockManager": [
                    1736,
                    1729,
                    1645,
                    1005
                ],
                "self._get_data_to_aggregate": [
                    1771,
                    1005
                ],
                "data.get_numeric_data": [
                    1008
                ],
                "List": [
                    1010,
                    1011,
                    1012,
                    1014,
                    1015
                ],
                "Block": [
                    1010,
                    1090
                ],
                "new_items": [
                    1011,
                    1092,
                    1108,
                    1103
                ],
                "deleted_items": [
                    1035,
                    1012,
                    1111,
                    1051,
                    1117
                ],
                "split_items": [
                    1098,
                    1100,
                    1061,
                    1014
                ],
                "split_frames": [
                    1095,
                    1100,
                    1062,
                    1015
                ],
                "no_result": [
                    1072,
                    1017,
                    1020
                ],
                "block": [
                    1024,
                    1090,
                    1074,
                    1076,
                    1018,
                    1083,
                    1084,
                    1021
                ],
                "data.blocks": [
                    1776,
                    1777,
                    1018
                ],
                "locs": [
                    1092,
                    1061,
                    1035,
                    1100,
                    1101,
                    1102,
                    1039,
                    1103,
                    1777,
                    1782,
                    1051,
                    1021
                ],
                "block.mgr_locs.as_array": [
                    1021
                ],
                "block.mgr_locs": [
                    1021
                ],
                "self.grouper.aggregate": [
                    1023
                ],
                "block.values": [
                    1024,
                    1083,
                    1084
                ],
                "NotImplementedError": [
                    1026
                ],
                "deleted_items.append": [
                    1051,
                    1035
                ],
                "data.items": [
                    1784,
                    1109,
                    1039
                ],
                "obj.shape": [
                    1040
                ],
                "obj.iloc": [
                    1043,
                    1461
                ],
                "s": [
                    1045,
                    1047
                ],
                "get_groupby": [
                    1045
                ],
                "s.aggregate": [
                    1047
                ],
                "result._data.blocks": [
                    1056,
                    1065,
                    1066
                ],
                "result._data": [
                    1056,
                    1065,
                    1066
                ],
                "split_items.append": [
                    1061
                ],
                "split_frames.append": [
                    1062
                ],
                "result.ndim": [
                    1080,
                    1067
                ],
                "result.reshape": [
                    1088,
                    1068
                ],
                "maybe_downcast_numeric": [
                    1074
                ],
                "block.dtype": [
                    1074
                ],
                "block.is_extension": [
                    1076
                ],
                "result.shape": [
                    1080,
                    1101
                ],
                "_from_sequence": [
                    1083
                ],
                "result.ravel": [
                    1084
                ],
                "block.values.dtype": [
                    1084
                ],
                "agg_block": [
                    1090,
                    1093
                ],
                "block.make_block": [
                    1090
                ],
                "new_items.append": [
                    1092,
                    1103
                ],
                "agg_blocks.append": [
                    1104,
                    1093
                ],
                "DataError": [
                    1096
                ],
                "i": [
                    1219,
                    1510,
                    1517,
                    1102,
                    1104,
                    1456,
                    1457,
                    1745,
                    1747,
                    1461
                ],
                "loc": [
                    1125,
                    1126,
                    1127,
                    1102,
                    1103,
                    1782
                ],
                "enumerate": [
                    1456,
                    1510,
                    1745,
                    1102
                ],
                "np.array": [
                    1103
                ],
                "locs.dtype": [
                    1103
                ],
                "_data.blocks": [
                    1104
                ],
                "_data": [
                    1104
                ],
                "np.concatenate": [
                    1393,
                    1108,
                    1117
                ],
                "data.items.take": [
                    1109
                ],
                "np.sort": [
                    1109
                ],
                "deleted": [
                    1120,
                    1117
                ],
                "ai": [
                    1121,
                    1118
                ],
                "mask.cumsum": [
                    1121
                ],
                "offset": [
                    1123,
                    1126,
                    1127
                ],
                "blk": [
                    1124,
                    1125,
                    1126,
                    1776,
                    1777
                ],
                "blk.mgr_locs": [
                    1777,
                    1125,
                    1126
                ],
                "AssertionError": [
                    1635,
                    1133,
                    1486
                ],
                "axis": [
                    1139,
                    1135
                ],
                "self._obj_with_exclusions": [
                    1154,
                    1450,
                    1646,
                    1136,
                    1360,
                    1436
                ],
                "Dict": [
                    1138,
                    1155
                ],
                "NDFrame": [
                    1232,
                    1138,
                    1155
                ],
                "obj._info_axis_number": [
                    1139
                ],
                "fres": [
                    1146,
                    1147,
                    1141,
                    1142
                ],
                "self.indices": [
                    1144
                ],
                "self.get_group": [
                    1145
                ],
                "self._wrap_frame_output": [
                    1149
                ],
                "cannot_agg": [
                    1180,
                    1171,
                    1156,
                    1179
                ],
                "item": [
                    1157,
                    1158,
                    1159,
                    1163,
                    1171,
                    1176
                ],
                "colg": [
                    1163,
                    1159
                ],
                "SeriesGroupBy": [
                    1746,
                    1834,
                    1631,
                    1159
                ],
                "colg.aggregate": [
                    1163
                ],
                "cannot_agg.append": [
                    1171
                ],
                "result_columns": [
                    1178,
                    1180,
                    1182
                ],
                "obj.columns": [
                    1641,
                    1522,
                    1523,
                    1178,
                    1404
                ],
                "result_columns.drop": [
                    1180
                ],
                "key_names": [
                    1188,
                    1213,
                    1222
                ],
                "com.not_none": [
                    1193
                ],
                "StopIteration": [
                    1194
                ],
                "v": [
                    1283,
                    1286,
                    1292,
                    1299,
                    1303,
                    1319,
                    1320,
                    1322,
                    1197,
                    1199,
                    1203,
                    1229,
                    1230,
                    1232,
                    1236,
                    1237,
                    1242,
                    1246,
                    1248,
                    1249
                ],
                "first_not_none": [
                    1229,
                    1197
                ],
                "key_index": [
                    1216,
                    1314,
                    1315,
                    1348,
                    1222,
                    1226,
                    1322,
                    1329,
                    1300,
                    1301,
                    1207,
                    1305,
                    1212,
                    1213
                ],
                "ping.ngroups": [
                    1211
                ],
                "key_index.name": [
                    1213
                ],
                "key_lookup": [
                    1216,
                    1215
                ],
                "key_lookup.get_indexer": [
                    1216
                ],
                "v._construct_axes_dict": [
                    1236
                ],
                "v._constructor": [
                    1242,
                    1237
                ],
                "backup": [
                    1242,
                    1244,
                    1238
                ],
                "applied_index": [
                    1250,
                    1252
                ],
                "self._selected_obj._get_axis": [
                    1250
                ],
                "all_indexed_same": [
                    1274,
                    1251,
                    1279
                ],
                "all_indexes_same": [
                    1251
                ],
                "x.index": [
                    1251
                ],
                "singular_series": [
                    1259,
                    1252
                ],
                "applied_index.nlevels": [
                    1252
                ],
                "self.squeeze": [
                    1257
                ],
                "v.index.copy": [
                    1286
                ],
                "v.index": [
                    1322,
                    1299,
                    1286
                ],
                "index.name": [
                    1294,
                    1287
                ],
                "v.name": [
                    1292
                ],
                "stacked_values": [
                    1320,
                    1305,
                    1322,
                    1303
                ],
                "np.vstack": [
                    1320,
                    1303
                ],
                "np.asarray": [
                    1320,
                    1303
                ],
                "unstack": [
                    1312
                ],
                "key_index.names": [
                    1315
                ],
                "stacked_values.T": [
                    1322
                ],
                "so": [
                    1333,
                    1334
                ],
                "so.ndim": [
                    1334
                ],
                "so.dtypes.apply": [
                    1334
                ],
                "so.dtypes": [
                    1334
                ],
                "needs_i8_conversion": [
                    1334
                ],
                "_recast_datetimelike_result": [
                    1335
                ],
                "should_coerce": [
                    1344,
                    1349
                ],
                "Timestamp": [
                    1344
                ],
                "applied": [
                    1400,
                    1402,
                    1406,
                    1359
                ],
                "gen": [
                    1361,
                    1565,
                    1365,
                    1567
                ],
                "self.grouper.get_iterator": [
                    1361,
                    1565
                ],
                "fast_path": [
                    1473,
                    1477,
                    1485,
                    1362,
                    1371,
                    1468,
                    1373,
                    1502
                ],
                "slow_path": [
                    1474,
                    1477,
                    1480,
                    1481,
                    1362,
                    1371,
                    1469
                ],
                "self._define_paths": [
                    1362
                ],
                "path": [
                    1504,
                    1378,
                    1496,
                    1480,
                    1491,
                    1364,
                    1499,
                    1368,
                    1371,
                    1502
                ],
                "self._choose_path": [
                    1371
                ],
                "self._transform_item_by_item": [
                    1373
                ],
                "np.prod": [
                    1385
                ],
                "group.shape": [
                    1385,
                    1394
                ],
                "res.index.is_": [
                    1387
                ],
                "res.index": [
                    1387
                ],
                "obj.index": [
                    1643,
                    1387,
                    1526,
                    1464,
                    1404
                ],
                "r": [
                    1388,
                    1389,
                    1390,
                    1392,
                    1400
                ],
                "group.columns": [
                    1396,
                    1498,
                    1388,
                    1389
                ],
                "r.columns": [
                    1389
                ],
                "r.index": [
                    1390
                ],
                "group.index": [
                    1393,
                    1397,
                    1390
                ],
                "reshape": [
                    1776,
                    1393
                ],
                "res.values": [
                    1393
                ],
                "applied.append": [
                    1400,
                    1402
                ],
                "concat_index": [
                    1404,
                    1407
                ],
                "other_axis": [
                    1858,
                    1405,
                    1846,
                    1407
                ],
                "concatenated": [
                    1408,
                    1406,
                    1407
                ],
                "concatenated.reindex": [
                    1407
                ],
                "self._set_result_index_ordered": [
                    1408
                ],
                "base.reduction_kernels": [
                    1429
                ],
                "result.columns.equals": [
                    1435
                ],
                "self._obj_with_exclusions.columns": [
                    1436
                ],
                "output.append": [
                    1462
                ],
                "DataFrame._from_arrays": [
                    1464
                ],
                "group.apply": [
                    1474,
                    1469
                ],
                "res_fast": [
                    1501,
                    1498,
                    1485,
                    1495
                ],
                "Exception": [
                    1488
                ],
                "res_fast.columns.equals": [
                    1498
                ],
                "res_fast.columns": [
                    1498
                ],
                "res_fast.equals": [
                    1501
                ],
                "inds": [
                    1517,
                    1524,
                    1509
                ],
                "transform": [
                    1512
                ],
                "inds.append": [
                    1517
                ],
                "columns.take": [
                    1524
                ],
                "res.squeeze": [
                    1573
                ],
                "AttributeError": [
                    1574
                ],
                "is_bool": [
                    1578
                ],
                "is_scalar": [
                    1578
                ],
                "indices.append": [
                    1580
                ],
                "__name__": [
                    1584
                ],
                "warnings.warn": [
                    1595
                ],
                "warnings": [
                    1595
                ],
                "FutureWarning": [
                    1598
                ],
                "__getitem__": [
                    1601
                ],
                "ndim": [
                    1616,
                    1628
                ],
                "subset": [
                    1632,
                    1617,
                    1618,
                    1620,
                    1629,
                    1630
                ],
                "DataFrameGroupBy": [
                    1619
                ],
                "result_index": [
                    1641,
                    1643,
                    1638
                ],
                "self.grouper.levels": [
                    1638
                ],
                "T": [
                    1641
                ],
                "obj.T._data": [
                    1648
                ],
                "obj._data": [
                    1650
                ],
                "izip": [
                    1665,
                    1654
                ],
                "map": [
                    1655
                ],
                "reversed": [
                    1656
                ],
                "self.grouper.get_group_levels": [
                    1659
                ],
                "grp.in_axis": [
                    1660
                ],
                "grp": [
                    1660
                ],
                "in_axis": [
                    1665,
                    1666
                ],
                "result.insert": [
                    1667
                ],
                "result._consolidate": [
                    1692,
                    1733
                ],
                "values.shape": [
                    1728
                ],
                "blocks": [
                    1728,
                    1729,
                    1736,
                    1782,
                    1784
                ],
                "mgr": [
                    1736,
                    1729,
                    1730,
                    1737
                ],
                "items": [
                    1736,
                    1729
                ],
                "colname": [
                    1745,
                    1746,
                    1748
                ],
                "self._selected_obj.iloc": [
                    1747
                ],
                "col_groupby": [
                    1757
                ],
                "self._iterate_column_groupbys": [
                    1757
                ],
                "vals": [
                    1776,
                    1780
                ],
                "blk.values": [
                    1776
                ],
                "blk.shape": [
                    1776
                ],
                "counted": [
                    1779,
                    1782
                ],
                "lib.count_level_2d": [
                    1780
                ],
                "lib": [
                    1780
                ],
                "make_block": [
                    1782
                ],
                "nunique": [
                    1834
                ],
                "groupby_series": [
                    1852,
                    1839
                ],
                "axis_number": [
                    1855,
                    1845,
                    1846,
                    1847
                ],
                "obj._get_axis_number": [
                    1845
                ],
                "iter_func": [
                    1848,
                    1850,
                    1852
                ],
                "obj.iterrows": [
                    1850
                ],
                "content": [
                    1852
                ],
                "results.T": [
                    1856
                ],
                "results._get_axis": [
                    1858
                ],
                "obj._get_axis": [
                    1858
                ],
                "results.index": [
                    1861
                ],
                "ibase.default_index": [
                    1861
                ],
                "ibase": [
                    1861
                ],
                "boxplot": [
                    1864
                ],
                "boxplot_frame_groupby": [
                    1864
                ],
                "result.copy": [
                    1885
                ],
                "obj_cols": [
                    1894,
                    1887
                ],
                "range": [
                    1889
                ],
                "is_object_dtype": [
                    1890
                ],
                "result.dtypes.iloc": [
                    1890
                ],
                "result.dtypes": [
                    1890
                ],
                "n": [
                    1896,
                    1899,
                    1894
                ],
                "converted": [
                    1899,
                    1895
                ],
                "maybe_convert_objects": [
                    1895
                ]
            },
            "filtered_variables_in_file": {
                "TYPE_CHECKING": [
                    79
                ],
                "NamedAgg": [
                    83
                ],
                "namedtuple": [
                    83
                ],
                "AggScalar": [
                    85
                ],
                "Union": [
                    1155,
                    357,
                    1670,
                    1703,
                    392,
                    333,
                    334,
                    367,
                    368,
                    1138,
                    85
                ],
                "str": [
                    992,
                    1442,
                    1155,
                    520,
                    1000,
                    1417,
                    1166,
                    561,
                    1138,
                    115,
                    467,
                    85,
                    1467,
                    249,
                    953,
                    92
                ],
                "Callable": [
                    85,
                    1479
                ],
                "Any": [
                    85
                ],
                "ScalarResult": [
                    89
                ],
                "typing.TypeVar": [
                    89
                ],
                "typing": [
                    89
                ],
                "Type": [
                    115,
                    92
                ],
                "FrameOrSeries": [
                    115,
                    92
                ],
                "self._make_wrapper": [
                    107
                ],
                "self": [
                    512,
                    516,
                    517,
                    525,
                    526,
                    1039,
                    529,
                    530,
                    1045,
                    1047,
                    1564,
                    1565,
                    1580,
                    1588,
                    573,
                    578,
                    590,
                    592,
                    1618,
                    1621,
                    1623,
                    1624,
                    1625,
                    1626,
                    1630,
                    1632,
                    1638,
                    1640,
                    107,
                    1132,
                    1646,
                    1135,
                    624,
                    1136,
                    1647,
                    1140,
                    631,
                    632,
                    1144,
                    1145,
                    1658,
                    636,
                    637,
                    1149,
                    1659,
                    1660,
                    1154,
                    1159,
                    1161,
                    651,
                    659,
                    660,
                    1176,
                    1690,
                    1691,
                    156,
                    1694,
                    1697,
                    1188,
                    165,
                    166,
                    1700,
                    168,
                    1204,
                    1205,
                    1206,
                    1207,
                    698,
                    1210,
                    700,
                    701,
                    1722,
                    1727,
                    1732,
                    1735,
                    1225,
                    1739,
                    1742,
                    1745,
                    1747,
                    1749,
                    1750,
                    733,
                    1757,
                    1758,
                    1250,
                    1257,
                    1771,
                    1772,
                    1268,
                    1784,
                    250,
                    765,
                    256,
                    1281,
                    1283,
                    260,
                    262,
                    264,
                    265,
                    776,
                    777,
                    268,
                    272,
                    274,
                    786,
                    787,
                    790,
                    279,
                    794,
                    800,
                    1316,
                    1831,
                    296,
                    808,
                    809,
                    1834,
                    1329,
                    1333,
                    1845,
                    1339,
                    316,
                    320,
                    1860,
                    1354,
                    1360,
                    1361,
                    1362,
                    1371,
                    1373,
                    1404,
                    1405,
                    1406,
                    1408,
                    386,
                    387,
                    389,
                    1415,
                    1418,
                    1425,
                    1433,
                    412,
                    1436,
                    1438,
                    1440,
                    931,
                    421,
                    424,
                    425,
                    938,
                    427,
                    939,
                    941,
                    1448,
                    943,
                    1450,
                    433,
                    945,
                    1454,
                    436,
                    437,
                    1461,
                    951,
                    441,
                    444,
                    956,
                    1470,
                    447,
                    448,
                    959,
                    962,
                    963,
                    1475,
                    453,
                    465,
                    977,
                    978,
                    468,
                    981,
                    986,
                    475,
                    480,
                    481,
                    994,
                    997,
                    487,
                    1512,
                    490,
                    1005,
                    497,
                    1023
                ],
                "name": [
                    1665,
                    1667,
                    137,
                    138,
                    143,
                    144,
                    1567,
                    1568,
                    1580,
                    315,
                    573,
                    320,
                    323,
                    324,
                    453,
                    454,
                    458,
                    1365,
                    1366,
                    490,
                    107,
                    491,
                    109,
                    1260,
                    111,
                    497,
                    1140,
                    1142,
                    1144,
                    1145,
                    1147
                ],
                "parent_method": [
                    109,
                    110
                ],
                "getattr": [
                    480,
                    262,
                    808,
                    109,
                    1425,
                    562,
                    1433,
                    250,
                    475,
                    1468,
                    1470
                ],
                "klass": [
                    498,
                    487,
                    109,
                    143
                ],
                "prop.__doc__": [
                    110
                ],
                "prop": [
                    110,
                    143,
                    112,
                    144,
                    111
                ],
                "parent_method.__doc__": [
                    110
                ],
                "prop.__name__": [
                    111
                ],
                "property": [
                    112,
                    158
                ],
                "FrozenSet": [
                    115
                ],
                "whitelist": [
                    137
                ],
                "hasattr": [
                    138
                ],
                "cls": [
                    144,
                    138,
                    146
                ],
                "generate_property": [
                    143
                ],
                "setattr": [
                    144
                ],
                "pinner": [
                    148
                ],
                "GroupBy": [
                    152,
                    816
                ],
                "_apply_whitelist": [
                    153,
                    818
                ],
                "base.series_apply_whitelist": [
                    153,
                    151
                ],
                "base": [
                    1670,
                    1703,
                    392,
                    473,
                    333,
                    1420,
                    367,
                    1423,
                    815,
                    818,
                    1429,
                    470,
                    151,
                    153
                ],
                "self._selected_obj": [
                    512,
                    320,
                    1250,
                    516,
                    517,
                    487,
                    296,
                    1831,
                    977,
                    1745,
                    1747,
                    1333,
                    156,
                    1564,
                    1758,
                    959
                ],
                "Iterable": [
                    976,
                    155
                ],
                "Series": [
                    1670,
                    392,
                    393,
                    520,
                    652,
                    784,
                    530,
                    151,
                    155,
                    415,
                    672,
                    421,
                    1703,
                    296,
                    1838,
                    1329,
                    440,
                    447,
                    1348,
                    581,
                    456,
                    333,
                    334,
                    976,
                    981,
                    1237,
                    733,
                    1248,
                    1249,
                    1380,
                    357,
                    362,
                    367,
                    368,
                    631,
                    634,
                    507,
                    765,
                    767
                ],
                "self._selection": [
                    168,
                    165
                ],
                "self.obj.name": [
                    530,
                    166
                ],
                "self.obj": [
                    166,
                    777,
                    1039,
                    592,
                    529,
                    530,
                    1618,
                    660,
                    1722,
                    412,
                    1630
                ],
                "_agg_see_also_doc": [
                    170,
                    820,
                    230,
                    903
                ],
                "dedent": [
                    830,
                    170,
                    180,
                    820
                ],
                "_agg_examples_doc": [
                    904,
                    180,
                    830,
                    231
                ],
                "apply": [
                    227
                ],
                "super": [
                    1601,
                    227
                ],
                "func": [
                    256,
                    260,
                    1146,
                    1415,
                    265,
                    1161,
                    1163,
                    268,
                    1417,
                    1418,
                    1420,
                    272,
                    912,
                    914,
                    1421,
                    1423,
                    917,
                    1425,
                    1429,
                    1433,
                    794,
                    925,
                    1438,
                    1440,
                    929,
                    1570,
                    931,
                    939,
                    941,
                    561,
                    562,
                    945,
                    564,
                    951,
                    315,
                    956,
                    1467,
                    1468,
                    1470,
                    1473,
                    1475,
                    324,
                    455,
                    465,
                    1362,
                    467,
                    468,
                    470,
                    471,
                    473,
                    475,
                    1757,
                    480,
                    481,
                    227,
                    492,
                    239,
                    244,
                    1141,
                    249,
                    250,
                    252,
                    255
                ],
                "args": [
                    261,
                    1146,
                    265,
                    1418,
                    1163,
                    268,
                    272,
                    1425,
                    1433,
                    1440,
                    1570,
                    931,
                    939,
                    940,
                    941,
                    562,
                    564,
                    568,
                    1468,
                    1470,
                    1473,
                    1475,
                    455,
                    1362,
                    468,
                    475,
                    480,
                    227,
                    492,
                    1141,
                    250
                ],
                "kwargs": [
                    261,
                    1146,
                    265,
                    1418,
                    1163,
                    268,
                    272,
                    912,
                    914,
                    1425,
                    916,
                    1433,
                    1440,
                    1570,
                    931,
                    939,
                    940,
                    941,
                    562,
                    564,
                    568,
                    1468,
                    1470,
                    1473,
                    1475,
                    455,
                    1362,
                    468,
                    1236,
                    1239,
                    1242,
                    475,
                    480,
                    227,
                    492,
                    243,
                    244,
                    245,
                    1141,
                    250,
                    636
                ],
                "Appender": [
                    1411,
                    236,
                    909,
                    463,
                    634,
                    221
                ],
                "format": [
                    222
                ],
                "_apply_docs": [
                    222,
                    223
                ],
                "relabeling": [
                    257,
                    966,
                    239,
                    912,
                    913,
                    242
                ],
                "columns": [
                    258,
                    914,
                    1685,
                    1688,
                    299,
                    305,
                    308,
                    310,
                    1718,
                    312,
                    1721,
                    330,
                    970,
                    355,
                    360,
                    362,
                    240,
                    1522,
                    243,
                    244,
                    1524,
                    246,
                    1526
                ],
                "no_arg_message": [
                    241,
                    247
                ],
                "list": [
                    299,
                    301,
                    302,
                    1294,
                    243,
                    917
                ],
                "col": [
                    1512,
                    1834,
                    244,
                    1510
                ],
                "TypeError": [
                    576,
                    1513,
                    575,
                    1583,
                    1520,
                    247,
                    1048,
                    1372,
                    927
                ],
                "isinstance": [
                    1283,
                    1417,
                    1299,
                    917,
                    1301,
                    282,
                    1435,
                    415,
                    291,
                    1319,
                    296,
                    1067,
                    301,
                    302,
                    430,
                    1070,
                    561,
                    1838,
                    1203,
                    1076,
                    440,
                    1592,
                    442,
                    1467,
                    1344,
                    326,
                    456,
                    1232,
                    467,
                    981,
                    1495,
                    1248,
                    1249,
                    1380,
                    494,
                    249,
                    252
                ],
                "abc.Iterable": [
                    252
                ],
                "abc": [
                    252
                ],
                "maybe_mangle_lambdas": [
                    929,
                    255
                ],
                "ret": [
                    256,
                    258,
                    275,
                    282,
                    285,
                    286
                ],
                "self._aggregate_multiple_funcs": [
                    256,
                    951
                ],
                "ret.columns": [
                    258
                ],
                "cyfunc": [
                    260,
                    261,
                    262
                ],
                "self._get_cython_func": [
                    465,
                    260,
                    1415
                ],
                "self.grouper.nkeys": [
                    264,
                    938,
                    1132,
                    424
                ],
                "self.grouper": [
                    387,
                    1159,
                    264,
                    776,
                    525,
                    274,
                    659,
                    786,
                    1045,
                    1565,
                    1694,
                    1188,
                    424,
                    425,
                    809,
                    427,
                    938,
                    1834,
                    1454,
                    1205,
                    1206,
                    1207,
                    698,
                    1210,
                    700,
                    701,
                    1735,
                    590,
                    1361,
                    1621,
                    1749,
                    1623,
                    1632,
                    1638,
                    1132,
                    1772,
                    624,
                    1658,
                    1659,
                    1660,
                    1023
                ],
                "self._python_agg_general": [
                    265,
                    939,
                    268
                ],
                "ValueError": [
                    1376,
                    1374,
                    457,
                    269,
                    1165,
                    1422,
                    952,
                    472,
                    1086,
                    575
                ],
                "KeyError": [
                    269
                ],
                "result": [
                    514,
                    516,
                    517,
                    518,
                    527,
                    1047,
                    1054,
                    1056,
                    1062,
                    1065,
                    1066,
                    1067,
                    1068,
                    1070,
                    1072,
                    1074,
                    1076,
                    1080,
                    1083,
                    1084,
                    1088,
                    1090,
                    1100,
                    1101,
                    1104,
                    1641,
                    1643,
                    1138,
                    1142,
                    631,
                    632,
                    1147,
                    636,
                    1149,
                    638,
                    639,
                    1155,
                    1667,
                    1163,
                    1687,
                    1176,
                    1688,
                    1691,
                    1692,
                    1182,
                    1695,
                    1698,
                    1700,
                    1720,
                    1721,
                    1722,
                    1724,
                    1730,
                    1732,
                    1733,
                    1737,
                    1740,
                    1742,
                    272,
                    784,
                    274,
                    276,
                    790,
                    1304,
                    1312,
                    1318,
                    1321,
                    1335,
                    1337,
                    1339,
                    1885,
                    1889,
                    1890,
                    357,
                    359,
                    360,
                    1896,
                    362,
                    1899,
                    364,
                    1900,
                    386,
                    389,
                    1433,
                    1435,
                    412,
                    1438,
                    415,
                    416,
                    931,
                    933,
                    935,
                    941,
                    1456,
                    433,
                    945,
                    1457,
                    436,
                    437,
                    438,
                    951,
                    1464,
                    956,
                    958,
                    447,
                    448,
                    959,
                    451,
                    963,
                    964,
                    969,
                    458,
                    970,
                    460,
                    972,
                    480,
                    481,
                    505,
                    507,
                    1020,
                    1023
                ],
                "self._aggregate_named": [
                    272
                ],
                "index": [
                    1286,
                    1287,
                    1294,
                    274,
                    276,
                    1305,
                    1694,
                    1695,
                    1318,
                    425,
                    427,
                    428,
                    432,
                    433,
                    1728,
                    1729,
                    1735,
                    1736,
                    359,
                    362
                ],
                "Index": [
                    1248,
                    355,
                    1222,
                    423,
                    456,
                    427,
                    1726,
                    333,
                    274,
                    1685,
                    1718,
                    958,
                    1215
                ],
                "sorted": [
                    274
                ],
                "self.grouper.names": [
                    1188,
                    425,
                    427,
                    274,
                    1658,
                    701
                ],
                "create_series_with_explicit_dtype": [
                    275,
                    1238
                ],
                "object": [
                    1568,
                    491,
                    276,
                    1366,
                    1239,
                    1017
                ],
                "self.as_index": [
                    962,
                    1860,
                    1225,
                    279,
                    1625,
                    1690,
                    1727
                ],
                "print": [
                    280
                ],
                "dict": [
                    282,
                    291,
                    430
                ],
                "concat": [
                    1312,
                    1853,
                    1388,
                    505,
                    1756,
                    285,
                    1406,
                    1277
                ],
                "Substitution": [
                    1410,
                    902,
                    229,
                    462
                ],
                "_shared_docs": [
                    236,
                    909
                ],
                "agg": [
                    288,
                    974
                ],
                "aggregate": [
                    288,
                    974
                ],
                "arg": [
                    291,
                    299,
                    300,
                    301,
                    302,
                    305,
                    309,
                    312,
                    315
                ],
                "SpecificationError": [
                    297,
                    921
                ],
                "arg.keys": [
                    299
                ],
                "arg.items": [
                    300
                ],
                "any": [
                    1334,
                    1344,
                    301,
                    326
                ],
                "x": [
                    1344,
                    801,
                    1251,
                    1475,
                    326,
                    301,
                    302,
                    562,
                    1244,
                    564,
                    1780,
                    1047,
                    568,
                    636,
                    1470
                ],
                "tuple": [
                    1592,
                    301,
                    302
                ],
                "next": [
                    305,
                    1193
                ],
                "zip": [
                    1100,
                    305,
                    1654,
                    1782,
                    312
                ],
                "f": [
                    309,
                    310
                ],
                "columns.append": [
                    310
                ],
                "com.get_callable_name": [
                    310
                ],
                "com": [
                    1193,
                    310
                ],
                "results": [
                    1856,
                    1858,
                    324,
                    1861,
                    326,
                    1862,
                    328,
                    489,
                    330,
                    1839,
                    499,
                    502,
                    505,
                    314,
                    1852,
                    1853
                ],
                "obj": [
                    1154,
                    1157,
                    1158,
                    1039,
                    1040,
                    1043,
                    1045,
                    1178,
                    1564,
                    1565,
                    1831,
                    1450,
                    1834,
                    1838,
                    1839,
                    1461,
                    1845,
                    1464,
                    1848,
                    1850,
                    316,
                    321,
                    322,
                    323,
                    324,
                    1858,
                    1360,
                    977,
                    1361,
                    979,
                    981,
                    983,
                    985,
                    1373,
                    1510,
                    1641,
                    1387,
                    1643,
                    1646,
                    1136,
                    1648,
                    1522,
                    1139,
                    1523,
                    1650,
                    1526,
                    1145,
                    1404,
                    1149
                ],
                "copy.copy": [
                    321
                ],
                "copy": [
                    321
                ],
                "obj._reset_cache": [
                    322
                ],
                "obj._selection": [
                    323
                ],
                "obj.aggregate": [
                    324
                ],
                "DataFrame": [
                    1671,
                    1687,
                    1304,
                    1435,
                    1182,
                    1054,
                    1186,
                    1442,
                    1704,
                    1321,
                    1070,
                    815,
                    433,
                    1202,
                    1203,
                    1464,
                    1720,
                    442,
                    1726,
                    1730,
                    326,
                    1479,
                    1737,
                    330,
                    1867,
                    334,
                    1231,
                    1495,
                    993,
                    1506,
                    357,
                    1637,
                    359,
                    1641,
                    1131,
                    1643,
                    368,
                    1392,
                    1526,
                    1015,
                    1151
                ],
                "results.values": [
                    326
                ],
                "Mapping": [
                    1670,
                    1703,
                    392,
                    333,
                    367
                ],
                "base.OutputKey": [
                    1670,
                    1703,
                    392,
                    333,
                    367
                ],
                "np.ndarray": [
                    1248,
                    1670,
                    1703,
                    392,
                    456,
                    1067,
                    333,
                    367,
                    1138,
                    755,
                    1011,
                    1012,
                    1014,
                    1076
                ],
                "np": [
                    1670,
                    392,
                    648,
                    782,
                    1303,
                    421,
                    679,
                    1320,
                    681,
                    1703,
                    1067,
                    686,
                    690,
                    692,
                    1076,
                    695,
                    1728,
                    964,
                    456,
                    712,
                    715,
                    333,
                    1103,
                    595,
                    723,
                    1108,
                    1109,
                    601,
                    602,
                    1117,
                    1118,
                    1119,
                    1248,
                    737,
                    610,
                    739,
                    613,
                    743,
                    1385,
                    619,
                    748,
                    367,
                    751,
                    1393,
                    1138,
                    755,
                    628,
                    756,
                    1011,
                    1012,
                    1014,
                    507
                ],
                "indexed_output": [
                    354,
                    359,
                    362,
                    1684,
                    1717,
                    1687,
                    1720
                ],
                "key.position": [
                    354,
                    1684,
                    1717
                ],
                "key": [
                    1632,
                    1601,
                    354,
                    355,
                    1684,
                    1685,
                    1622,
                    1717,
                    1592,
                    1718,
                    1630
                ],
                "val": [
                    672,
                    354,
                    777,
                    779,
                    592,
                    594,
                    660,
                    1684,
                    1717,
                    1782,
                    664,
                    667
                ],
                "output.items": [
                    354,
                    1684,
                    1717
                ],
                "output": [
                    387,
                    1684,
                    1685,
                    411,
                    412,
                    1455,
                    1717,
                    1462,
                    1718,
                    1464,
                    455,
                    456,
                    458,
                    354,
                    355,
                    1508,
                    358,
                    1512,
                    1519,
                    1523,
                    1526
                ],
                "key.label": [
                    355,
                    1685,
                    1718
                ],
                "len": [
                    1293,
                    917,
                    411,
                    1056,
                    1185,
                    419,
                    1065,
                    1206,
                    1592,
                    1211,
                    964,
                    1861,
                    712,
                    1101,
                    1118,
                    1119,
                    737,
                    1889,
                    1252,
                    741,
                    614,
                    358,
                    1125,
                    1388,
                    1519,
                    1393,
                    627,
                    628,
                    1523
                ],
                "result.columns": [
                    1889,
                    1318,
                    360,
                    970,
                    1688,
                    1456,
                    1464,
                    1721,
                    1435,
                    958,
                    959
                ],
                "self._wrap_series_output": [
                    386,
                    412
                ],
                "self.grouper.result_index": [
                    387,
                    1735,
                    624,
                    786,
                    1207,
                    1694
                ],
                "_convert": [
                    1700,
                    1348,
                    389,
                    1742
                ],
                "self._reindex_output": [
                    448,
                    1700,
                    389,
                    1742,
                    433,
                    790,
                    632,
                    1339
                ],
                "self.obj.index": [
                    1722,
                    530,
                    412
                ],
                "keys": [
                    1185,
                    1186,
                    419,
                    1281,
                    421,
                    1222,
                    425,
                    1354,
                    427,
                    1260,
                    1204,
                    1269,
                    441,
                    1211,
                    444,
                    1215
                ],
                "self._selection_name": [
                    421,
                    733,
                    765,
                    1329,
                    787,
                    437,
                    631,
                    701,
                    447
                ],
                "np.float64": [
                    507,
                    421
                ],
                "MultiIndex.from_tuples": [
                    425
                ],
                "MultiIndex": [
                    425,
                    1299,
                    1301,
                    727,
                    761
                ],
                "values": [
                    1281,
                    1292,
                    1303,
                    1313,
                    1320,
                    1193,
                    1066,
                    1197,
                    430,
                    433,
                    1329,
                    1457,
                    1204,
                    440,
                    441,
                    442,
                    444,
                    447,
                    1344,
                    1728,
                    1219,
                    1348,
                    1354,
                    1229,
                    985,
                    1244,
                    989,
                    1246,
                    1251,
                    1252,
                    1896,
                    1260,
                    1269,
                    1277
                ],
                "_get_index": [
                    432,
                    447
                ],
                "result.stack": [
                    436
                ],
                "self.observed": [
                    1632,
                    1626,
                    436
                ],
                "result.name": [
                    516,
                    437
                ],
                "self._concat_objects": [
                    1281,
                    1354,
                    1204,
                    1268,
                    441,
                    444
                ],
                "not_indexed_same": [
                    1354,
                    1204,
                    1269,
                    441,
                    444
                ],
                "group": [
                    1567,
                    1568,
                    1570,
                    1468,
                    573,
                    1469,
                    1473,
                    1474,
                    453,
                    454,
                    455,
                    1481,
                    1485,
                    1365,
                    1366,
                    1498,
                    1371,
                    1378,
                    1385,
                    490,
                    491,
                    492,
                    1388,
                    1389,
                    1390,
                    1393,
                    1394,
                    1396,
                    1397
                ],
                "group.name": [
                    454
                ],
                "self._transform_general": [
                    1440,
                    1418,
                    468
                ],
                "base.transform_kernel_whitelist": [
                    1420,
                    470
                ],
                "msg": [
                    1376,
                    1421,
                    1422,
                    471,
                    472,
                    1375
                ],
                "base.cythonized_kernels": [
                    473,
                    1423
                ],
                "self._transform_fast": [
                    481,
                    1438
                ],
                "_transform_template": [
                    1411,
                    463
                ],
                "type": [
                    1584,
                    1083,
                    487
                ],
                "object.__setattr__": [
                    1568,
                    491,
                    1366
                ],
                "res": [
                    1570,
                    1573,
                    1578,
                    1579,
                    1584,
                    1457,
                    1461,
                    1462,
                    1481,
                    1491,
                    1496,
                    1371,
                    1499,
                    1501,
                    1504,
                    1378,
                    1380,
                    618,
                    1387,
                    492,
                    621,
                    494,
                    495,
                    623,
                    1388,
                    498,
                    627,
                    628,
                    629,
                    1393,
                    631,
                    1402
                ],
                "ABCDataFrame": [
                    494
                ],
                "ABCSeries": [
                    1283,
                    494,
                    1319
                ],
                "res._values": [
                    495
                ],
                "indexer": [
                    1216,
                    1121,
                    1219,
                    1126,
                    497,
                    498,
                    1108,
                    1109
                ],
                "self._get_index": [
                    497,
                    1580,
                    573
                ],
                "ser": [
                    498,
                    499
                ],
                "results.append": [
                    499
                ],
                "sort_index": [
                    505
                ],
                "dtype": [
                    512,
                    513,
                    514
                ],
                "self._selected_obj.dtype": [
                    512
                ],
                "is_numeric_dtype": [
                    513
                ],
                "maybe_downcast_to_dtype": [
                    514
                ],
                "self._selected_obj.name": [
                    516
                ],
                "result.index": [
                    1722,
                    964,
                    517,
                    1695
                ],
                "self._selected_obj.index": [
                    517
                ],
                "ids": [
                    776,
                    779,
                    780,
                    525,
                    782,
                    527,
                    659,
                    663,
                    664,
                    679,
                    681,
                    683,
                    686,
                    1454,
                    1457,
                    712,
                    714,
                    590,
                    722,
                    595,
                    597,
                    601,
                    614,
                    617,
                    1772,
                    1773,
                    1780,
                    629
                ],
                "_": [
                    776,
                    747,
                    1772,
                    525,
                    590,
                    1454,
                    1456,
                    594,
                    659,
                    1757,
                    1023
                ],
                "ngroup": [
                    525,
                    1454
                ],
                "self.grouper.group_info": [
                    776,
                    1772,
                    525,
                    1454,
                    590,
                    659
                ],
                "cast": [
                    1448,
                    1161,
                    526,
                    528,
                    1460,
                    1175,
                    1054
                ],
                "self._transform_should_cast": [
                    1448,
                    1161,
                    526
                ],
                "func_nm": [
                    1448,
                    526
                ],
                "out": [
                    782,
                    527,
                    529,
                    530,
                    785,
                    692,
                    708,
                    711,
                    719,
                    723,
                    724,
                    731,
                    732,
                    733,
                    737,
                    613,
                    618,
                    748,
                    621,
                    623,
                    751,
                    752,
                    628,
                    629,
                    763,
                    764,
                    765
                ],
                "algorithms.take_1d": [
                    1457,
                    527
                ],
                "algorithms": [
                    1457,
                    594,
                    667,
                    527
                ],
                "result._values": [
                    527
                ],
                "self._try_cast": [
                    1176,
                    529,
                    1461
                ],
                "wrapper": [
                    568,
                    562,
                    1512,
                    564
                ],
                "b": [
                    568,
                    569
                ],
                "notna": [
                    569,
                    1579
                ],
                "bool": [
                    992,
                    581,
                    1000,
                    567,
                    1786
                ],
                "indices": [
                    578,
                    1580,
                    1588,
                    1562,
                    572
                ],
                "true_and_notna": [
                    573
                ],
                "err": [
                    576,
                    953,
                    1376,
                    1166
                ],
                "filtered": [
                    578,
                    579
                ],
                "self._apply_filter": [
                    578,
                    1588
                ],
                "dropna": [
                    706,
                    578,
                    713,
                    1835,
                    722,
                    1588,
                    606,
                    703
                ],
                "self.obj._values": [
                    592,
                    777,
                    660
                ],
                "codes": [
                    704,
                    738,
                    708,
                    745,
                    728,
                    594,
                    595,
                    596,
                    724,
                    758,
                    759,
                    698,
                    761,
                    602,
                    699,
                    605
                ],
                "algorithms.factorize": [
                    594,
                    667
                ],
                "sorter": [
                    679,
                    681,
                    683,
                    751,
                    752,
                    595,
                    596,
                    597,
                    723,
                    724
                ],
                "np.lexsort": [
                    679,
                    681,
                    751,
                    595,
                    723
                ],
                "idx": [
                    1888,
                    1889,
                    1890,
                    611,
                    613,
                    712,
                    619,
                    747,
                    748,
                    686,
                    691,
                    629,
                    695,
                    601,
                    607
                ],
                "np.r_": [
                    610,
                    739,
                    712,
                    686,
                    690,
                    692,
                    601,
                    602
                ],
                "np.nonzero": [
                    601,
                    692,
                    686
                ],
                "inc": [
                    608,
                    610,
                    611,
                    675,
                    613,
                    690,
                    691,
                    692,
                    722,
                    695,
                    602,
                    699,
                    668,
                    607
                ],
                "mask": [
                    608,
                    704,
                    610,
                    705,
                    708,
                    1120,
                    1121,
                    779,
                    716,
                    1773,
                    782,
                    1776,
                    722,
                    663,
                    664,
                    605,
                    1119
                ],
                "astype": [
                    613
                ],
                "np.add.reduceat": [
                    613,
                    695
                ],
                "np.add": [
                    715,
                    613,
                    695
                ],
                "np.flatnonzero": [
                    619
                ],
                "ri": [
                    624,
                    627,
                    628,
                    631
                ],
                "np.zeros": [
                    737,
                    628,
                    1119
                ],
                "out.dtype": [
                    628
                ],
                "self.apply": [
                    800,
                    651,
                    636
                ],
                "x.describe": [
                    636
                ],
                "self.axis": [
                    1283,
                    637,
                    1047,
                    1565,
                    1697,
                    1316,
                    943,
                    1845,
                    951,
                    1470,
                    1475,
                    1739,
                    1361,
                    978,
                    1250,
                    1640,
                    1135,
                    1647,
                    1404,
                    1405,
                    1406
                ],
                "result.T": [
                    1698,
                    1740,
                    638
                ],
                "result.unstack": [
                    639
                ],
                "Series.describe.__doc__": [
                    634
                ],
                "Series.describe": [
                    634
                ],
                "bins": [
                    672,
                    648,
                    656,
                    721,
                    726,
                    666
                ],
                "np.iterable": [
                    648
                ],
                "Series.value_counts": [
                    652
                ],
                "normalize": [
                    653,
                    710
                ],
                "sort": [
                    721,
                    654,
                    750
                ],
                "ascending": [
                    751,
                    723,
                    655
                ],
                "lab": [
                    672,
                    673,
                    674,
                    675,
                    677,
                    679,
                    681,
                    714,
                    683,
                    689,
                    667,
                    668,
                    699
                ],
                "lev": [
                    673,
                    674,
                    1665,
                    1667,
                    667,
                    700
                ],
                "llab": [
                    689,
                    675,
                    668,
                    699
                ],
                "cut": [
                    672
                ],
                "lab.cat.categories": [
                    673
                ],
                "lab.cat": [
                    673,
                    674
                ],
                "lev.take": [
                    674
                ],
                "lab.cat.codes": [
                    674
                ],
                "_multiindex.codes": [
                    675
                ],
                "_multiindex": [
                    675
                ],
                "is_interval_dtype": [
                    677
                ],
                "lab.left": [
                    679
                ],
                "lab.right": [
                    679
                ],
                "lchanges": [
                    689,
                    690
                ],
                "slice": [
                    689
                ],
                "np.diff": [
                    712,
                    692
                ],
                "rep": [
                    699,
                    716,
                    718,
                    695
                ],
                "partial": [
                    695
                ],
                "np.repeat": [
                    743,
                    756,
                    695
                ],
                "self.grouper.reconstructed_codes": [
                    698
                ],
                "level_codes": [
                    738,
                    699,
                    708,
                    739
                ],
                "levels": [
                    728,
                    761,
                    700,
                    741
                ],
                "ping.group_index": [
                    1212,
                    700
                ],
                "ping": [
                    1210,
                    1211,
                    700,
                    1212
                ],
                "self.grouper.groupings": [
                    700,
                    1205,
                    1206,
                    1210,
                    1660
                ],
                "names": [
                    1858,
                    1292,
                    1293,
                    1294,
                    728,
                    761,
                    701
                ],
                "mask.all": [
                    705
                ],
                "out.astype": [
                    711
                ],
                "d": [
                    712,
                    715,
                    716,
                    718
                ],
                "m": [
                    714,
                    715
                ],
                "np.add.at": [
                    715
                ],
                "acc": [
                    716,
                    718,
                    719
                ],
                "cat": [
                    722,
                    723
                ],
                "mi": [
                    761,
                    733,
                    765,
                    727
                ],
                "is_integer_dtype": [
                    731,
                    763
                ],
                "ensure_int64": [
                    732,
                    764
                ],
                "diff": [
                    737,
                    739,
                    741,
                    745,
                    756
                ],
                "ncat": [
                    741,
                    743
                ],
                "nbin": [
                    756,
                    741,
                    743
                ],
                "diff.sum": [
                    741
                ],
                "left": [
                    743,
                    747,
                    751,
                    752,
                    759
                ],
                "np.arange": [
                    1728,
                    964,
                    1118,
                    743
                ],
                "np.tile": [
                    743
                ],
                "right": [
                    745,
                    747
                ],
                "diff.cumsum": [
                    745
                ],
                "_get_join_indexers": [
                    747
                ],
                "np.where": [
                    748
                ],
                "lev_codes": [
                    756,
                    758
                ],
                "build_codes": [
                    758
                ],
                "codes.append": [
                    759
                ],
                "ngroups": [
                    776,
                    1772,
                    781,
                    1780
                ],
                "isna": [
                    1776,
                    1578,
                    779
                ],
                "ensure_platform_int": [
                    780
                ],
                "minlength": [
                    781,
                    782
                ],
                "np.bincount": [
                    782
                ],
                "freq": [
                    802,
                    810,
                    799
                ],
                "x.pct_change": [
                    801
                ],
                "periods": [
                    802,
                    810
                ],
                "fill_method": [
                    808,
                    802,
                    805,
                    806
                ],
                "limit": [
                    808,
                    802,
                    807
                ],
                "filled": [
                    808,
                    809,
                    812
                ],
                "fill_grp": [
                    809,
                    810
                ],
                "filled.groupby": [
                    809
                ],
                "self.grouper.codes": [
                    809
                ],
                "shifted": [
                    810,
                    812
                ],
                "fill_grp.shift": [
                    810
                ],
                "pin_whitelisted_properties": [
                    815,
                    151
                ],
                "base.dataframe_apply_whitelist": [
                    818,
                    815
                ],
                "is_multi_agg_with_relabel": [
                    912
                ],
                "order": [
                    969,
                    914
                ],
                "normalize_keyword_aggregation": [
                    914
                ],
                "set": [
                    917
                ],
                "how": [
                    1024,
                    931,
                    932,
                    995,
                    1034
                ],
                "self._aggregate": [
                    931
                ],
                "self._aggregate_frame": [
                    945,
                    956,
                    941
                ],
                "result.columns.levels": [
                    959
                ],
                "self._selected_obj.columns.name": [
                    959
                ],
                "self._selected_obj.columns": [
                    1745,
                    1758,
                    959
                ],
                "self._insert_inaxis_grouper_inplace": [
                    1732,
                    963,
                    1691
                ],
                "result.iloc": [
                    1896,
                    969,
                    1899,
                    1104,
                    1457
                ],
                "result._convert": [
                    1337,
                    972
                ],
                "obj.T": [
                    1648,
                    979
                ],
                "obj.name": [
                    981
                ],
                "self.exclusions": [
                    1624,
                    986,
                    981,
                    1750
                ],
                "label": [
                    985,
                    986,
                    1852
                ],
                "obj.items": [
                    1848,
                    985
                ],
                "int": [
                    992,
                    1155,
                    1603,
                    1000,
                    1138,
                    1846
                ],
                "agg_blocks": [
                    994,
                    1124,
                    1093,
                    997,
                    1095,
                    1129,
                    1104,
                    1010
                ],
                "agg_items": [
                    1129,
                    994,
                    1109,
                    997
                ],
                "self._cython_agg_blocks": [
                    994
                ],
                "alt": [
                    995,
                    1047,
                    1031
                ],
                "numeric_only": [
                    995,
                    1007
                ],
                "min_count": [
                    1024,
                    995
                ],
                "self._wrap_agged_blocks": [
                    1784,
                    997
                ],
                "data": [
                    1146,
                    1158,
                    1159,
                    1771,
                    1005,
                    1039,
                    1008,
                    1776,
                    1777,
                    1784,
                    1140,
                    1109,
                    1141,
                    1176,
                    1145,
                    1018,
                    1118,
                    1119
                ],
                "BlockManager": [
                    1736,
                    1729,
                    1645,
                    1005
                ],
                "self._get_data_to_aggregate": [
                    1771,
                    1005
                ],
                "data.get_numeric_data": [
                    1008
                ],
                "List": [
                    1010,
                    1011,
                    1012,
                    1014,
                    1015
                ],
                "Block": [
                    1010,
                    1090
                ],
                "new_items": [
                    1011,
                    1092,
                    1108,
                    1103
                ],
                "deleted_items": [
                    1035,
                    1012,
                    1111,
                    1051,
                    1117
                ],
                "split_items": [
                    1098,
                    1100,
                    1061,
                    1014
                ],
                "split_frames": [
                    1095,
                    1100,
                    1062,
                    1015
                ],
                "no_result": [
                    1072,
                    1017,
                    1020
                ],
                "block": [
                    1024,
                    1090,
                    1074,
                    1076,
                    1018,
                    1083,
                    1084,
                    1021
                ],
                "data.blocks": [
                    1776,
                    1777,
                    1018
                ],
                "locs": [
                    1092,
                    1061,
                    1035,
                    1100,
                    1101,
                    1102,
                    1039,
                    1103,
                    1777,
                    1782,
                    1051,
                    1021
                ],
                "block.mgr_locs.as_array": [
                    1021
                ],
                "block.mgr_locs": [
                    1021
                ],
                "self.grouper.aggregate": [
                    1023
                ],
                "block.values": [
                    1024,
                    1083,
                    1084
                ],
                "NotImplementedError": [
                    1026
                ],
                "deleted_items.append": [
                    1051,
                    1035
                ],
                "data.items": [
                    1784,
                    1109,
                    1039
                ],
                "obj.shape": [
                    1040
                ],
                "obj.iloc": [
                    1043,
                    1461
                ],
                "s": [
                    1045,
                    1047
                ],
                "get_groupby": [
                    1045
                ],
                "s.aggregate": [
                    1047
                ],
                "result._data.blocks": [
                    1056,
                    1065,
                    1066
                ],
                "result._data": [
                    1056,
                    1065,
                    1066
                ],
                "split_items.append": [
                    1061
                ],
                "split_frames.append": [
                    1062
                ],
                "result.ndim": [
                    1080,
                    1067
                ],
                "result.reshape": [
                    1088,
                    1068
                ],
                "maybe_downcast_numeric": [
                    1074
                ],
                "block.dtype": [
                    1074
                ],
                "block.is_extension": [
                    1076
                ],
                "result.shape": [
                    1080,
                    1101
                ],
                "_from_sequence": [
                    1083
                ],
                "result.ravel": [
                    1084
                ],
                "block.values.dtype": [
                    1084
                ],
                "agg_block": [
                    1090,
                    1093
                ],
                "block.make_block": [
                    1090
                ],
                "new_items.append": [
                    1092,
                    1103
                ],
                "agg_blocks.append": [
                    1104,
                    1093
                ],
                "DataError": [
                    1096
                ],
                "i": [
                    1219,
                    1510,
                    1517,
                    1102,
                    1104,
                    1456,
                    1457,
                    1745,
                    1747,
                    1461
                ],
                "loc": [
                    1125,
                    1126,
                    1127,
                    1102,
                    1103,
                    1782
                ],
                "enumerate": [
                    1456,
                    1510,
                    1745,
                    1102
                ],
                "np.array": [
                    1103
                ],
                "locs.dtype": [
                    1103
                ],
                "_data.blocks": [
                    1104
                ],
                "_data": [
                    1104
                ],
                "np.concatenate": [
                    1393,
                    1108,
                    1117
                ],
                "data.items.take": [
                    1109
                ],
                "np.sort": [
                    1109
                ],
                "deleted": [
                    1120,
                    1117
                ],
                "ai": [
                    1121,
                    1118
                ],
                "mask.cumsum": [
                    1121
                ],
                "offset": [
                    1123,
                    1126,
                    1127
                ],
                "blk": [
                    1124,
                    1125,
                    1126,
                    1776,
                    1777
                ],
                "blk.mgr_locs": [
                    1777,
                    1125,
                    1126
                ],
                "AssertionError": [
                    1635,
                    1133,
                    1486
                ],
                "axis": [
                    1139,
                    1135
                ],
                "self._obj_with_exclusions": [
                    1154,
                    1450,
                    1646,
                    1136,
                    1360,
                    1436
                ],
                "Dict": [
                    1138,
                    1155
                ],
                "NDFrame": [
                    1232,
                    1138,
                    1155
                ],
                "obj._info_axis_number": [
                    1139
                ],
                "fres": [
                    1146,
                    1147,
                    1141,
                    1142
                ],
                "self.indices": [
                    1144
                ],
                "self.get_group": [
                    1145
                ],
                "self._wrap_frame_output": [
                    1149
                ],
                "cannot_agg": [
                    1180,
                    1171,
                    1156,
                    1179
                ],
                "item": [
                    1157,
                    1158,
                    1159,
                    1163,
                    1171,
                    1176
                ],
                "colg": [
                    1163,
                    1159
                ],
                "SeriesGroupBy": [
                    1746,
                    1834,
                    1631,
                    1159
                ],
                "colg.aggregate": [
                    1163
                ],
                "cannot_agg.append": [
                    1171
                ],
                "result_columns": [
                    1178,
                    1180,
                    1182
                ],
                "obj.columns": [
                    1641,
                    1522,
                    1523,
                    1178,
                    1404
                ],
                "result_columns.drop": [
                    1180
                ],
                "key_names": [
                    1188,
                    1213,
                    1222
                ],
                "com.not_none": [
                    1193
                ],
                "StopIteration": [
                    1194
                ],
                "v": [
                    1283,
                    1286,
                    1292,
                    1299,
                    1303,
                    1319,
                    1320,
                    1322,
                    1197,
                    1199,
                    1203,
                    1229,
                    1230,
                    1232,
                    1236,
                    1237,
                    1242,
                    1246,
                    1248,
                    1249
                ],
                "first_not_none": [
                    1229,
                    1197
                ],
                "key_index": [
                    1216,
                    1314,
                    1315,
                    1348,
                    1222,
                    1226,
                    1322,
                    1329,
                    1300,
                    1301,
                    1207,
                    1305,
                    1212,
                    1213
                ],
                "ping.ngroups": [
                    1211
                ],
                "key_index.name": [
                    1213
                ],
                "key_lookup": [
                    1216,
                    1215
                ],
                "key_lookup.get_indexer": [
                    1216
                ],
                "v._construct_axes_dict": [
                    1236
                ],
                "v._constructor": [
                    1242,
                    1237
                ],
                "backup": [
                    1242,
                    1244,
                    1238
                ],
                "applied_index": [
                    1250,
                    1252
                ],
                "self._selected_obj._get_axis": [
                    1250
                ],
                "all_indexed_same": [
                    1274,
                    1251,
                    1279
                ],
                "all_indexes_same": [
                    1251
                ],
                "x.index": [
                    1251
                ],
                "singular_series": [
                    1259,
                    1252
                ],
                "applied_index.nlevels": [
                    1252
                ],
                "self.squeeze": [
                    1257
                ],
                "v.index.copy": [
                    1286
                ],
                "v.index": [
                    1322,
                    1299,
                    1286
                ],
                "index.name": [
                    1294,
                    1287
                ],
                "v.name": [
                    1292
                ],
                "stacked_values": [
                    1320,
                    1305,
                    1322,
                    1303
                ],
                "np.vstack": [
                    1320,
                    1303
                ],
                "np.asarray": [
                    1320,
                    1303
                ],
                "unstack": [
                    1312
                ],
                "key_index.names": [
                    1315
                ],
                "stacked_values.T": [
                    1322
                ],
                "so": [
                    1333,
                    1334
                ],
                "so.ndim": [
                    1334
                ],
                "so.dtypes.apply": [
                    1334
                ],
                "so.dtypes": [
                    1334
                ],
                "needs_i8_conversion": [
                    1334
                ],
                "_recast_datetimelike_result": [
                    1335
                ],
                "should_coerce": [
                    1344,
                    1349
                ],
                "Timestamp": [
                    1344
                ],
                "applied": [
                    1400,
                    1402,
                    1406,
                    1359
                ],
                "gen": [
                    1361,
                    1565,
                    1365,
                    1567
                ],
                "self.grouper.get_iterator": [
                    1361,
                    1565
                ],
                "fast_path": [
                    1473,
                    1477,
                    1485,
                    1362,
                    1371,
                    1468,
                    1373,
                    1502
                ],
                "slow_path": [
                    1474,
                    1477,
                    1480,
                    1481,
                    1362,
                    1371,
                    1469
                ],
                "self._define_paths": [
                    1362
                ],
                "path": [
                    1504,
                    1378,
                    1496,
                    1480,
                    1491,
                    1364,
                    1499,
                    1368,
                    1371,
                    1502
                ],
                "self._choose_path": [
                    1371
                ],
                "self._transform_item_by_item": [
                    1373
                ],
                "np.prod": [
                    1385
                ],
                "group.shape": [
                    1385,
                    1394
                ],
                "res.index.is_": [
                    1387
                ],
                "res.index": [
                    1387
                ],
                "obj.index": [
                    1643,
                    1387,
                    1526,
                    1464,
                    1404
                ],
                "r": [
                    1388,
                    1389,
                    1390,
                    1392,
                    1400
                ],
                "group.columns": [
                    1396,
                    1498,
                    1388,
                    1389
                ],
                "r.columns": [
                    1389
                ],
                "r.index": [
                    1390
                ],
                "group.index": [
                    1393,
                    1397,
                    1390
                ],
                "reshape": [
                    1776,
                    1393
                ],
                "res.values": [
                    1393
                ],
                "applied.append": [
                    1400,
                    1402
                ],
                "concat_index": [
                    1404,
                    1407
                ],
                "other_axis": [
                    1858,
                    1405,
                    1846,
                    1407
                ],
                "concatenated": [
                    1408,
                    1406,
                    1407
                ],
                "concatenated.reindex": [
                    1407
                ],
                "self._set_result_index_ordered": [
                    1408
                ],
                "base.reduction_kernels": [
                    1429
                ],
                "result.columns.equals": [
                    1435
                ],
                "self._obj_with_exclusions.columns": [
                    1436
                ],
                "output.append": [
                    1462
                ],
                "DataFrame._from_arrays": [
                    1464
                ],
                "group.apply": [
                    1474,
                    1469
                ],
                "res_fast": [
                    1501,
                    1498,
                    1485,
                    1495
                ],
                "Exception": [
                    1488
                ],
                "res_fast.columns.equals": [
                    1498
                ],
                "res_fast.columns": [
                    1498
                ],
                "res_fast.equals": [
                    1501
                ],
                "inds": [
                    1517,
                    1524,
                    1509
                ],
                "transform": [
                    1512
                ],
                "inds.append": [
                    1517
                ],
                "columns.take": [
                    1524
                ],
                "res.squeeze": [
                    1573
                ],
                "AttributeError": [
                    1574
                ],
                "is_bool": [
                    1578
                ],
                "is_scalar": [
                    1578
                ],
                "indices.append": [
                    1580
                ],
                "__name__": [
                    1584
                ],
                "warnings.warn": [
                    1595
                ],
                "warnings": [
                    1595
                ],
                "FutureWarning": [
                    1598
                ],
                "__getitem__": [
                    1601
                ],
                "ndim": [
                    1616,
                    1628
                ],
                "subset": [
                    1632,
                    1617,
                    1618,
                    1620,
                    1629,
                    1630
                ],
                "DataFrameGroupBy": [
                    1619
                ],
                "result_index": [
                    1641,
                    1643,
                    1638
                ],
                "self.grouper.levels": [
                    1638
                ],
                "T": [
                    1641
                ],
                "obj.T._data": [
                    1648
                ],
                "obj._data": [
                    1650
                ],
                "izip": [
                    1665,
                    1654
                ],
                "map": [
                    1655
                ],
                "reversed": [
                    1656
                ],
                "self.grouper.get_group_levels": [
                    1659
                ],
                "grp.in_axis": [
                    1660
                ],
                "grp": [
                    1660
                ],
                "in_axis": [
                    1665,
                    1666
                ],
                "result.insert": [
                    1667
                ],
                "result._consolidate": [
                    1692,
                    1733
                ],
                "values.shape": [
                    1728
                ],
                "blocks": [
                    1728,
                    1729,
                    1736,
                    1782,
                    1784
                ],
                "mgr": [
                    1736,
                    1729,
                    1730,
                    1737
                ],
                "items": [
                    1736,
                    1729
                ],
                "colname": [
                    1745,
                    1746,
                    1748
                ],
                "self._selected_obj.iloc": [
                    1747
                ],
                "col_groupby": [
                    1757
                ],
                "self._iterate_column_groupbys": [
                    1757
                ],
                "vals": [
                    1776,
                    1780
                ],
                "blk.values": [
                    1776
                ],
                "blk.shape": [
                    1776
                ],
                "counted": [
                    1779,
                    1782
                ],
                "lib.count_level_2d": [
                    1780
                ],
                "lib": [
                    1780
                ],
                "make_block": [
                    1782
                ],
                "nunique": [
                    1834
                ],
                "groupby_series": [
                    1852,
                    1839
                ],
                "axis_number": [
                    1855,
                    1845,
                    1846,
                    1847
                ],
                "obj._get_axis_number": [
                    1845
                ],
                "iter_func": [
                    1848,
                    1850,
                    1852
                ],
                "obj.iterrows": [
                    1850
                ],
                "content": [
                    1852
                ],
                "results.T": [
                    1856
                ],
                "results._get_axis": [
                    1858
                ],
                "obj._get_axis": [
                    1858
                ],
                "results.index": [
                    1861
                ],
                "ibase.default_index": [
                    1861
                ],
                "ibase": [
                    1861
                ],
                "boxplot": [
                    1864
                ],
                "boxplot_frame_groupby": [
                    1864
                ],
                "result.copy": [
                    1885
                ],
                "obj_cols": [
                    1894,
                    1887
                ],
                "range": [
                    1889
                ],
                "is_object_dtype": [
                    1890
                ],
                "result.dtypes.iloc": [
                    1890
                ],
                "result.dtypes": [
                    1890
                ],
                "n": [
                    1896,
                    1899,
                    1894
                ],
                "converted": [
                    1899,
                    1895
                ],
                "maybe_convert_objects": [
                    1895
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/groupby/test_function.py",
                "test_function": "test_apply_to_nullable_integer_returns_float",
                "test_function_code": "@pytest.mark.parametrize(\n    \"values\",\n    [\n        {\n            \"a\": [1, 1, 1, 2, 2, 2, 3, 3, 3],\n            \"b\": [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2],\n        },\n        {\"a\": [1, 1, 2, 2, 3, 3], \"b\": [1, 2, 1, 2, 1, 2]},\n    ],\n)\n@pytest.mark.parametrize(\"function\", [\"mean\", \"median\", \"var\"])\ndef test_apply_to_nullable_integer_returns_float(values, function):\n    # https://github.com/pandas-dev/pandas/issues/32219\n    output = 0.5 if function == \"var\" else 1.5\n    arr = np.array([output] * 3, dtype=float)\n    idx = pd.Index([1, 2, 3], dtype=object, name=\"a\")\n    expected = pd.DataFrame({\"b\": arr}, index=idx)\n\n    groups = pd.DataFrame(values, dtype=\"Int64\").groupby(\"a\")\n\n    result = getattr(groups, function)()\n    tm.assert_frame_equal(result, expected)\n\n    result = groups.agg(function)\n    tm.assert_frame_equal(result, expected)\n\n    result = groups.agg([function])\n    expected.columns = MultiIndex.from_tuples([(\"b\", function)])\n    tm.assert_frame_equal(result, expected)",
                "test_error": "TypeError: cannot safely cast non-equivalent float64 to int64",
                "full_test_error": "values = array([1.5, 1.5, 1.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n>           return values.astype(dtype, casting=\"safe\", copy=copy)\nE           TypeError: Cannot cast array from dtype('float64') to dtype('int64') according to the rule 'safe'\n\npandas/core/arrays/integer.py:156: TypeError\n\nThe above exception was the direct cause of the following exception:\n\nvalues = {'a': [1, 1, 1, 2, 2, 2, ...], 'b': [1, <NA>, 2, 1, <NA>, 2, ...]}\nfunction = 'mean'\n\n    @pytest.mark.parametrize(\n        \"values\",\n        [\n            {\n                \"a\": [1, 1, 1, 2, 2, 2, 3, 3, 3],\n                \"b\": [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2],\n            },\n            {\"a\": [1, 1, 2, 2, 3, 3], \"b\": [1, 2, 1, 2, 1, 2]},\n        ],\n    )\n    @pytest.mark.parametrize(\"function\", [\"mean\", \"median\", \"var\"])\n    def test_apply_to_nullable_integer_returns_float(values, function):\n        # https://github.com/pandas-dev/pandas/issues/32219\n        output = 0.5 if function == \"var\" else 1.5\n        arr = np.array([output] * 3, dtype=float)\n        idx = pd.Index([1, 2, 3], dtype=object, name=\"a\")\n        expected = pd.DataFrame({\"b\": arr}, index=idx)\n    \n        groups = pd.DataFrame(values, dtype=\"Int64\").groupby(\"a\")\n    \n>       result = getattr(groups, function)()\n\npandas/tests/groupby/test_function.py:1630: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/groupby/groupby.py:1223: in mean\n    return self._cython_agg_general(\npandas/core/groupby/generic.py:994: in _cython_agg_general\n    agg_blocks, agg_items = self._cython_agg_blocks(\npandas/core/groupby/generic.py:1083: in _cython_agg_blocks\n    result = type(block.values)._from_sequence(\npandas/core/arrays/integer.py:358: in _from_sequence\n    return integer_array(scalars, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:144: in integer_array\n    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:261: in coerce_to_array\n    values = safe_cast(values, dtype, copy=False)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalues = array([1.5, 1.5, 1.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n            return values.astype(dtype, casting=\"safe\", copy=copy)\n        except TypeError as err:\n    \n            casted = values.astype(dtype, copy=copy)\n            if (casted == values).all():\n                return casted\n    \n>           raise TypeError(\n                f\"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}\"\n            ) from err\nE           TypeError: cannot safely cast non-equivalent float64 to int64\n\npandas/core/arrays/integer.py:163: TypeError",
                "traceback": "pandas/core/groupby/groupby.py:1223: in mean\n    return self._cython_agg_general(\npandas/core/groupby/generic.py:994: in _cython_agg_general\n    agg_blocks, agg_items = self._cython_agg_blocks(\npandas/core/groupby/generic.py:1083: in _cython_agg_blocks\n    result = type(block.values)._from_sequence(\npandas/core/arrays/integer.py:358: in _from_sequence\n    return integer_array(scalars, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:144: in integer_array\n    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:261: in coerce_to_array\n    values = safe_cast(values, dtype, copy=False)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalues = array([1.5, 1.5, 1.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n            return values.astype(dtype, casting=\"safe\", copy=copy)\n        except TypeError as err:\n    \n            casted = values.astype(dtype, copy=copy)\n            if (casted == values).all():\n                return casted\n    \n>           raise TypeError(\n                f\"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}\"\n            ) from err\nE           TypeError: cannot safely cast non-equivalent float64 to int64\n\npandas/core/arrays/integer.py:163: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('values', [{'a': [1, 1, 1, 2, 2, 2, 3, 3, 3], 'b': [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2]}, {'a': [1, 1, 2, 2, 3, 3], 'b': [1, 2, 1, 2, 1, 2]}])",
                    "pytest.mark.parametrize('function', ['mean', 'median', 'var'])"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/groupby/test_function.py",
                "test_function": "test_apply_to_nullable_integer_returns_float",
                "test_function_code": "@pytest.mark.parametrize(\n    \"values\",\n    [\n        {\n            \"a\": [1, 1, 1, 2, 2, 2, 3, 3, 3],\n            \"b\": [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2],\n        },\n        {\"a\": [1, 1, 2, 2, 3, 3], \"b\": [1, 2, 1, 2, 1, 2]},\n    ],\n)\n@pytest.mark.parametrize(\"function\", [\"mean\", \"median\", \"var\"])\ndef test_apply_to_nullable_integer_returns_float(values, function):\n    # https://github.com/pandas-dev/pandas/issues/32219\n    output = 0.5 if function == \"var\" else 1.5\n    arr = np.array([output] * 3, dtype=float)\n    idx = pd.Index([1, 2, 3], dtype=object, name=\"a\")\n    expected = pd.DataFrame({\"b\": arr}, index=idx)\n\n    groups = pd.DataFrame(values, dtype=\"Int64\").groupby(\"a\")\n\n    result = getattr(groups, function)()\n    tm.assert_frame_equal(result, expected)\n\n    result = groups.agg(function)\n    tm.assert_frame_equal(result, expected)\n\n    result = groups.agg([function])\n    expected.columns = MultiIndex.from_tuples([(\"b\", function)])\n    tm.assert_frame_equal(result, expected)",
                "test_error": "TypeError: cannot safely cast non-equivalent float64 to int64",
                "full_test_error": "values = array([1.5, 1.5, 1.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n>           return values.astype(dtype, casting=\"safe\", copy=copy)\nE           TypeError: Cannot cast array from dtype('float64') to dtype('int64') according to the rule 'safe'\n\npandas/core/arrays/integer.py:156: TypeError\n\nThe above exception was the direct cause of the following exception:\n\nvalues = {'a': [1, 1, 2, 2, 3, 3], 'b': [1, 2, 1, 2, 1, 2]}, function = 'mean'\n\n    @pytest.mark.parametrize(\n        \"values\",\n        [\n            {\n                \"a\": [1, 1, 1, 2, 2, 2, 3, 3, 3],\n                \"b\": [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2],\n            },\n            {\"a\": [1, 1, 2, 2, 3, 3], \"b\": [1, 2, 1, 2, 1, 2]},\n        ],\n    )\n    @pytest.mark.parametrize(\"function\", [\"mean\", \"median\", \"var\"])\n    def test_apply_to_nullable_integer_returns_float(values, function):\n        # https://github.com/pandas-dev/pandas/issues/32219\n        output = 0.5 if function == \"var\" else 1.5\n        arr = np.array([output] * 3, dtype=float)\n        idx = pd.Index([1, 2, 3], dtype=object, name=\"a\")\n        expected = pd.DataFrame({\"b\": arr}, index=idx)\n    \n        groups = pd.DataFrame(values, dtype=\"Int64\").groupby(\"a\")\n    \n>       result = getattr(groups, function)()\n\npandas/tests/groupby/test_function.py:1630: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/groupby/groupby.py:1223: in mean\n    return self._cython_agg_general(\npandas/core/groupby/generic.py:994: in _cython_agg_general\n    agg_blocks, agg_items = self._cython_agg_blocks(\npandas/core/groupby/generic.py:1083: in _cython_agg_blocks\n    result = type(block.values)._from_sequence(\npandas/core/arrays/integer.py:358: in _from_sequence\n    return integer_array(scalars, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:144: in integer_array\n    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:261: in coerce_to_array\n    values = safe_cast(values, dtype, copy=False)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalues = array([1.5, 1.5, 1.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n            return values.astype(dtype, casting=\"safe\", copy=copy)\n        except TypeError as err:\n    \n            casted = values.astype(dtype, copy=copy)\n            if (casted == values).all():\n                return casted\n    \n>           raise TypeError(\n                f\"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}\"\n            ) from err\nE           TypeError: cannot safely cast non-equivalent float64 to int64\n\npandas/core/arrays/integer.py:163: TypeError",
                "traceback": "pandas/core/groupby/groupby.py:1223: in mean\n    return self._cython_agg_general(\npandas/core/groupby/generic.py:994: in _cython_agg_general\n    agg_blocks, agg_items = self._cython_agg_blocks(\npandas/core/groupby/generic.py:1083: in _cython_agg_blocks\n    result = type(block.values)._from_sequence(\npandas/core/arrays/integer.py:358: in _from_sequence\n    return integer_array(scalars, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:144: in integer_array\n    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:261: in coerce_to_array\n    values = safe_cast(values, dtype, copy=False)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalues = array([1.5, 1.5, 1.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n            return values.astype(dtype, casting=\"safe\", copy=copy)\n        except TypeError as err:\n    \n            casted = values.astype(dtype, copy=copy)\n            if (casted == values).all():\n                return casted\n    \n>           raise TypeError(\n                f\"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}\"\n            ) from err\nE           TypeError: cannot safely cast non-equivalent float64 to int64\n\npandas/core/arrays/integer.py:163: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('values', [{'a': [1, 1, 1, 2, 2, 2, 3, 3, 3], 'b': [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2]}, {'a': [1, 1, 2, 2, 3, 3], 'b': [1, 2, 1, 2, 1, 2]}])",
                    "pytest.mark.parametrize('function', ['mean', 'median', 'var'])"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/groupby/test_function.py",
                "test_function": "test_apply_to_nullable_integer_returns_float",
                "test_function_code": "@pytest.mark.parametrize(\n    \"values\",\n    [\n        {\n            \"a\": [1, 1, 1, 2, 2, 2, 3, 3, 3],\n            \"b\": [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2],\n        },\n        {\"a\": [1, 1, 2, 2, 3, 3], \"b\": [1, 2, 1, 2, 1, 2]},\n    ],\n)\n@pytest.mark.parametrize(\"function\", [\"mean\", \"median\", \"var\"])\ndef test_apply_to_nullable_integer_returns_float(values, function):\n    # https://github.com/pandas-dev/pandas/issues/32219\n    output = 0.5 if function == \"var\" else 1.5\n    arr = np.array([output] * 3, dtype=float)\n    idx = pd.Index([1, 2, 3], dtype=object, name=\"a\")\n    expected = pd.DataFrame({\"b\": arr}, index=idx)\n\n    groups = pd.DataFrame(values, dtype=\"Int64\").groupby(\"a\")\n\n    result = getattr(groups, function)()\n    tm.assert_frame_equal(result, expected)\n\n    result = groups.agg(function)\n    tm.assert_frame_equal(result, expected)\n\n    result = groups.agg([function])\n    expected.columns = MultiIndex.from_tuples([(\"b\", function)])\n    tm.assert_frame_equal(result, expected)",
                "test_error": "TypeError: cannot safely cast non-equivalent float64 to int64",
                "full_test_error": "values = array([1.5, 1.5, 1.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n>           return values.astype(dtype, casting=\"safe\", copy=copy)\nE           TypeError: Cannot cast array from dtype('float64') to dtype('int64') according to the rule 'safe'\n\npandas/core/arrays/integer.py:156: TypeError\n\nThe above exception was the direct cause of the following exception:\n\nvalues = {'a': [1, 1, 1, 2, 2, 2, ...], 'b': [1, <NA>, 2, 1, <NA>, 2, ...]}\nfunction = 'median'\n\n    @pytest.mark.parametrize(\n        \"values\",\n        [\n            {\n                \"a\": [1, 1, 1, 2, 2, 2, 3, 3, 3],\n                \"b\": [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2],\n            },\n            {\"a\": [1, 1, 2, 2, 3, 3], \"b\": [1, 2, 1, 2, 1, 2]},\n        ],\n    )\n    @pytest.mark.parametrize(\"function\", [\"mean\", \"median\", \"var\"])\n    def test_apply_to_nullable_integer_returns_float(values, function):\n        # https://github.com/pandas-dev/pandas/issues/32219\n        output = 0.5 if function == \"var\" else 1.5\n        arr = np.array([output] * 3, dtype=float)\n        idx = pd.Index([1, 2, 3], dtype=object, name=\"a\")\n        expected = pd.DataFrame({\"b\": arr}, index=idx)\n    \n        groups = pd.DataFrame(values, dtype=\"Int64\").groupby(\"a\")\n    \n>       result = getattr(groups, function)()\n\npandas/tests/groupby/test_function.py:1630: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/groupby/groupby.py:1248: in median\n    return self._cython_agg_general(\npandas/core/groupby/generic.py:994: in _cython_agg_general\n    agg_blocks, agg_items = self._cython_agg_blocks(\npandas/core/groupby/generic.py:1083: in _cython_agg_blocks\n    result = type(block.values)._from_sequence(\npandas/core/arrays/integer.py:358: in _from_sequence\n    return integer_array(scalars, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:144: in integer_array\n    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:261: in coerce_to_array\n    values = safe_cast(values, dtype, copy=False)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalues = array([1.5, 1.5, 1.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n            return values.astype(dtype, casting=\"safe\", copy=copy)\n        except TypeError as err:\n    \n            casted = values.astype(dtype, copy=copy)\n            if (casted == values).all():\n                return casted\n    \n>           raise TypeError(\n                f\"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}\"\n            ) from err\nE           TypeError: cannot safely cast non-equivalent float64 to int64\n\npandas/core/arrays/integer.py:163: TypeError",
                "traceback": "pandas/core/groupby/groupby.py:1248: in median\n    return self._cython_agg_general(\npandas/core/groupby/generic.py:994: in _cython_agg_general\n    agg_blocks, agg_items = self._cython_agg_blocks(\npandas/core/groupby/generic.py:1083: in _cython_agg_blocks\n    result = type(block.values)._from_sequence(\npandas/core/arrays/integer.py:358: in _from_sequence\n    return integer_array(scalars, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:144: in integer_array\n    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:261: in coerce_to_array\n    values = safe_cast(values, dtype, copy=False)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalues = array([1.5, 1.5, 1.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n            return values.astype(dtype, casting=\"safe\", copy=copy)\n        except TypeError as err:\n    \n            casted = values.astype(dtype, copy=copy)\n            if (casted == values).all():\n                return casted\n    \n>           raise TypeError(\n                f\"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}\"\n            ) from err\nE           TypeError: cannot safely cast non-equivalent float64 to int64\n\npandas/core/arrays/integer.py:163: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('values', [{'a': [1, 1, 1, 2, 2, 2, 3, 3, 3], 'b': [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2]}, {'a': [1, 1, 2, 2, 3, 3], 'b': [1, 2, 1, 2, 1, 2]}])",
                    "pytest.mark.parametrize('function', ['mean', 'median', 'var'])"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/groupby/test_function.py",
                "test_function": "test_apply_to_nullable_integer_returns_float",
                "test_function_code": "@pytest.mark.parametrize(\n    \"values\",\n    [\n        {\n            \"a\": [1, 1, 1, 2, 2, 2, 3, 3, 3],\n            \"b\": [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2],\n        },\n        {\"a\": [1, 1, 2, 2, 3, 3], \"b\": [1, 2, 1, 2, 1, 2]},\n    ],\n)\n@pytest.mark.parametrize(\"function\", [\"mean\", \"median\", \"var\"])\ndef test_apply_to_nullable_integer_returns_float(values, function):\n    # https://github.com/pandas-dev/pandas/issues/32219\n    output = 0.5 if function == \"var\" else 1.5\n    arr = np.array([output] * 3, dtype=float)\n    idx = pd.Index([1, 2, 3], dtype=object, name=\"a\")\n    expected = pd.DataFrame({\"b\": arr}, index=idx)\n\n    groups = pd.DataFrame(values, dtype=\"Int64\").groupby(\"a\")\n\n    result = getattr(groups, function)()\n    tm.assert_frame_equal(result, expected)\n\n    result = groups.agg(function)\n    tm.assert_frame_equal(result, expected)\n\n    result = groups.agg([function])\n    expected.columns = MultiIndex.from_tuples([(\"b\", function)])\n    tm.assert_frame_equal(result, expected)",
                "test_error": "TypeError: cannot safely cast non-equivalent float64 to int64",
                "full_test_error": "values = array([1.5, 1.5, 1.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n>           return values.astype(dtype, casting=\"safe\", copy=copy)\nE           TypeError: Cannot cast array from dtype('float64') to dtype('int64') according to the rule 'safe'\n\npandas/core/arrays/integer.py:156: TypeError\n\nThe above exception was the direct cause of the following exception:\n\nvalues = {'a': [1, 1, 2, 2, 3, 3], 'b': [1, 2, 1, 2, 1, 2]}, function = 'median'\n\n    @pytest.mark.parametrize(\n        \"values\",\n        [\n            {\n                \"a\": [1, 1, 1, 2, 2, 2, 3, 3, 3],\n                \"b\": [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2],\n            },\n            {\"a\": [1, 1, 2, 2, 3, 3], \"b\": [1, 2, 1, 2, 1, 2]},\n        ],\n    )\n    @pytest.mark.parametrize(\"function\", [\"mean\", \"median\", \"var\"])\n    def test_apply_to_nullable_integer_returns_float(values, function):\n        # https://github.com/pandas-dev/pandas/issues/32219\n        output = 0.5 if function == \"var\" else 1.5\n        arr = np.array([output] * 3, dtype=float)\n        idx = pd.Index([1, 2, 3], dtype=object, name=\"a\")\n        expected = pd.DataFrame({\"b\": arr}, index=idx)\n    \n        groups = pd.DataFrame(values, dtype=\"Int64\").groupby(\"a\")\n    \n>       result = getattr(groups, function)()\n\npandas/tests/groupby/test_function.py:1630: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/groupby/groupby.py:1248: in median\n    return self._cython_agg_general(\npandas/core/groupby/generic.py:994: in _cython_agg_general\n    agg_blocks, agg_items = self._cython_agg_blocks(\npandas/core/groupby/generic.py:1083: in _cython_agg_blocks\n    result = type(block.values)._from_sequence(\npandas/core/arrays/integer.py:358: in _from_sequence\n    return integer_array(scalars, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:144: in integer_array\n    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:261: in coerce_to_array\n    values = safe_cast(values, dtype, copy=False)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalues = array([1.5, 1.5, 1.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n            return values.astype(dtype, casting=\"safe\", copy=copy)\n        except TypeError as err:\n    \n            casted = values.astype(dtype, copy=copy)\n            if (casted == values).all():\n                return casted\n    \n>           raise TypeError(\n                f\"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}\"\n            ) from err\nE           TypeError: cannot safely cast non-equivalent float64 to int64\n\npandas/core/arrays/integer.py:163: TypeError",
                "traceback": "pandas/core/groupby/groupby.py:1248: in median\n    return self._cython_agg_general(\npandas/core/groupby/generic.py:994: in _cython_agg_general\n    agg_blocks, agg_items = self._cython_agg_blocks(\npandas/core/groupby/generic.py:1083: in _cython_agg_blocks\n    result = type(block.values)._from_sequence(\npandas/core/arrays/integer.py:358: in _from_sequence\n    return integer_array(scalars, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:144: in integer_array\n    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:261: in coerce_to_array\n    values = safe_cast(values, dtype, copy=False)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalues = array([1.5, 1.5, 1.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n            return values.astype(dtype, casting=\"safe\", copy=copy)\n        except TypeError as err:\n    \n            casted = values.astype(dtype, copy=copy)\n            if (casted == values).all():\n                return casted\n    \n>           raise TypeError(\n                f\"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}\"\n            ) from err\nE           TypeError: cannot safely cast non-equivalent float64 to int64\n\npandas/core/arrays/integer.py:163: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('values', [{'a': [1, 1, 1, 2, 2, 2, 3, 3, 3], 'b': [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2]}, {'a': [1, 1, 2, 2, 3, 3], 'b': [1, 2, 1, 2, 1, 2]}])",
                    "pytest.mark.parametrize('function', ['mean', 'median', 'var'])"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/groupby/test_function.py",
                "test_function": "test_apply_to_nullable_integer_returns_float",
                "test_function_code": "@pytest.mark.parametrize(\n    \"values\",\n    [\n        {\n            \"a\": [1, 1, 1, 2, 2, 2, 3, 3, 3],\n            \"b\": [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2],\n        },\n        {\"a\": [1, 1, 2, 2, 3, 3], \"b\": [1, 2, 1, 2, 1, 2]},\n    ],\n)\n@pytest.mark.parametrize(\"function\", [\"mean\", \"median\", \"var\"])\ndef test_apply_to_nullable_integer_returns_float(values, function):\n    # https://github.com/pandas-dev/pandas/issues/32219\n    output = 0.5 if function == \"var\" else 1.5\n    arr = np.array([output] * 3, dtype=float)\n    idx = pd.Index([1, 2, 3], dtype=object, name=\"a\")\n    expected = pd.DataFrame({\"b\": arr}, index=idx)\n\n    groups = pd.DataFrame(values, dtype=\"Int64\").groupby(\"a\")\n\n    result = getattr(groups, function)()\n    tm.assert_frame_equal(result, expected)\n\n    result = groups.agg(function)\n    tm.assert_frame_equal(result, expected)\n\n    result = groups.agg([function])\n    expected.columns = MultiIndex.from_tuples([(\"b\", function)])\n    tm.assert_frame_equal(result, expected)",
                "test_error": "TypeError: cannot safely cast non-equivalent float64 to int64",
                "full_test_error": "values = array([0.5, 0.5, 0.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n>           return values.astype(dtype, casting=\"safe\", copy=copy)\nE           TypeError: Cannot cast array from dtype('float64') to dtype('int64') according to the rule 'safe'\n\npandas/core/arrays/integer.py:156: TypeError\n\nThe above exception was the direct cause of the following exception:\n\nvalues = {'a': [1, 1, 1, 2, 2, 2, ...], 'b': [1, <NA>, 2, 1, <NA>, 2, ...]}\nfunction = 'var'\n\n    @pytest.mark.parametrize(\n        \"values\",\n        [\n            {\n                \"a\": [1, 1, 1, 2, 2, 2, 3, 3, 3],\n                \"b\": [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2],\n            },\n            {\"a\": [1, 1, 2, 2, 3, 3], \"b\": [1, 2, 1, 2, 1, 2]},\n        ],\n    )\n    @pytest.mark.parametrize(\"function\", [\"mean\", \"median\", \"var\"])\n    def test_apply_to_nullable_integer_returns_float(values, function):\n        # https://github.com/pandas-dev/pandas/issues/32219\n        output = 0.5 if function == \"var\" else 1.5\n        arr = np.array([output] * 3, dtype=float)\n        idx = pd.Index([1, 2, 3], dtype=object, name=\"a\")\n        expected = pd.DataFrame({\"b\": arr}, index=idx)\n    \n        groups = pd.DataFrame(values, dtype=\"Int64\").groupby(\"a\")\n    \n>       result = getattr(groups, function)()\n\npandas/tests/groupby/test_function.py:1630: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/groupby/groupby.py:1294: in var\n    return self._cython_agg_general(\npandas/core/groupby/generic.py:994: in _cython_agg_general\n    agg_blocks, agg_items = self._cython_agg_blocks(\npandas/core/groupby/generic.py:1083: in _cython_agg_blocks\n    result = type(block.values)._from_sequence(\npandas/core/arrays/integer.py:358: in _from_sequence\n    return integer_array(scalars, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:144: in integer_array\n    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:261: in coerce_to_array\n    values = safe_cast(values, dtype, copy=False)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalues = array([0.5, 0.5, 0.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n            return values.astype(dtype, casting=\"safe\", copy=copy)\n        except TypeError as err:\n    \n            casted = values.astype(dtype, copy=copy)\n            if (casted == values).all():\n                return casted\n    \n>           raise TypeError(\n                f\"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}\"\n            ) from err\nE           TypeError: cannot safely cast non-equivalent float64 to int64\n\npandas/core/arrays/integer.py:163: TypeError",
                "traceback": "pandas/core/groupby/groupby.py:1294: in var\n    return self._cython_agg_general(\npandas/core/groupby/generic.py:994: in _cython_agg_general\n    agg_blocks, agg_items = self._cython_agg_blocks(\npandas/core/groupby/generic.py:1083: in _cython_agg_blocks\n    result = type(block.values)._from_sequence(\npandas/core/arrays/integer.py:358: in _from_sequence\n    return integer_array(scalars, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:144: in integer_array\n    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:261: in coerce_to_array\n    values = safe_cast(values, dtype, copy=False)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalues = array([0.5, 0.5, 0.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n            return values.astype(dtype, casting=\"safe\", copy=copy)\n        except TypeError as err:\n    \n            casted = values.astype(dtype, copy=copy)\n            if (casted == values).all():\n                return casted\n    \n>           raise TypeError(\n                f\"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}\"\n            ) from err\nE           TypeError: cannot safely cast non-equivalent float64 to int64\n\npandas/core/arrays/integer.py:163: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('values', [{'a': [1, 1, 1, 2, 2, 2, 3, 3, 3], 'b': [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2]}, {'a': [1, 1, 2, 2, 3, 3], 'b': [1, 2, 1, 2, 1, 2]}])",
                    "pytest.mark.parametrize('function', ['mean', 'median', 'var'])"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/groupby/test_function.py",
                "test_function": "test_apply_to_nullable_integer_returns_float",
                "test_function_code": "@pytest.mark.parametrize(\n    \"values\",\n    [\n        {\n            \"a\": [1, 1, 1, 2, 2, 2, 3, 3, 3],\n            \"b\": [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2],\n        },\n        {\"a\": [1, 1, 2, 2, 3, 3], \"b\": [1, 2, 1, 2, 1, 2]},\n    ],\n)\n@pytest.mark.parametrize(\"function\", [\"mean\", \"median\", \"var\"])\ndef test_apply_to_nullable_integer_returns_float(values, function):\n    # https://github.com/pandas-dev/pandas/issues/32219\n    output = 0.5 if function == \"var\" else 1.5\n    arr = np.array([output] * 3, dtype=float)\n    idx = pd.Index([1, 2, 3], dtype=object, name=\"a\")\n    expected = pd.DataFrame({\"b\": arr}, index=idx)\n\n    groups = pd.DataFrame(values, dtype=\"Int64\").groupby(\"a\")\n\n    result = getattr(groups, function)()\n    tm.assert_frame_equal(result, expected)\n\n    result = groups.agg(function)\n    tm.assert_frame_equal(result, expected)\n\n    result = groups.agg([function])\n    expected.columns = MultiIndex.from_tuples([(\"b\", function)])\n    tm.assert_frame_equal(result, expected)",
                "test_error": "TypeError: cannot safely cast non-equivalent float64 to int64",
                "full_test_error": "values = array([0.5, 0.5, 0.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n>           return values.astype(dtype, casting=\"safe\", copy=copy)\nE           TypeError: Cannot cast array from dtype('float64') to dtype('int64') according to the rule 'safe'\n\npandas/core/arrays/integer.py:156: TypeError\n\nThe above exception was the direct cause of the following exception:\n\nvalues = {'a': [1, 1, 2, 2, 3, 3], 'b': [1, 2, 1, 2, 1, 2]}, function = 'var'\n\n    @pytest.mark.parametrize(\n        \"values\",\n        [\n            {\n                \"a\": [1, 1, 1, 2, 2, 2, 3, 3, 3],\n                \"b\": [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2],\n            },\n            {\"a\": [1, 1, 2, 2, 3, 3], \"b\": [1, 2, 1, 2, 1, 2]},\n        ],\n    )\n    @pytest.mark.parametrize(\"function\", [\"mean\", \"median\", \"var\"])\n    def test_apply_to_nullable_integer_returns_float(values, function):\n        # https://github.com/pandas-dev/pandas/issues/32219\n        output = 0.5 if function == \"var\" else 1.5\n        arr = np.array([output] * 3, dtype=float)\n        idx = pd.Index([1, 2, 3], dtype=object, name=\"a\")\n        expected = pd.DataFrame({\"b\": arr}, index=idx)\n    \n        groups = pd.DataFrame(values, dtype=\"Int64\").groupby(\"a\")\n    \n>       result = getattr(groups, function)()\n\npandas/tests/groupby/test_function.py:1630: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/groupby/groupby.py:1294: in var\n    return self._cython_agg_general(\npandas/core/groupby/generic.py:994: in _cython_agg_general\n    agg_blocks, agg_items = self._cython_agg_blocks(\npandas/core/groupby/generic.py:1083: in _cython_agg_blocks\n    result = type(block.values)._from_sequence(\npandas/core/arrays/integer.py:358: in _from_sequence\n    return integer_array(scalars, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:144: in integer_array\n    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:261: in coerce_to_array\n    values = safe_cast(values, dtype, copy=False)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalues = array([0.5, 0.5, 0.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n            return values.astype(dtype, casting=\"safe\", copy=copy)\n        except TypeError as err:\n    \n            casted = values.astype(dtype, copy=copy)\n            if (casted == values).all():\n                return casted\n    \n>           raise TypeError(\n                f\"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}\"\n            ) from err\nE           TypeError: cannot safely cast non-equivalent float64 to int64\n\npandas/core/arrays/integer.py:163: TypeError",
                "traceback": "pandas/core/groupby/groupby.py:1294: in var\n    return self._cython_agg_general(\npandas/core/groupby/generic.py:994: in _cython_agg_general\n    agg_blocks, agg_items = self._cython_agg_blocks(\npandas/core/groupby/generic.py:1083: in _cython_agg_blocks\n    result = type(block.values)._from_sequence(\npandas/core/arrays/integer.py:358: in _from_sequence\n    return integer_array(scalars, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:144: in integer_array\n    values, mask = coerce_to_array(values, dtype=dtype, copy=copy)\npandas/core/arrays/integer.py:261: in coerce_to_array\n    values = safe_cast(values, dtype, copy=False)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalues = array([0.5, 0.5, 0.5]), dtype = <class 'numpy.int64'>, copy = False\n\n    def safe_cast(values, dtype, copy: bool):\n        \"\"\"\n        Safely cast the values to the dtype if they\n        are equivalent, meaning floats must be equivalent to the\n        ints.\n    \n        \"\"\"\n        try:\n            return values.astype(dtype, casting=\"safe\", copy=copy)\n        except TypeError as err:\n    \n            casted = values.astype(dtype, copy=copy)\n            if (casted == values).all():\n                return casted\n    \n>           raise TypeError(\n                f\"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}\"\n            ) from err\nE           TypeError: cannot safely cast non-equivalent float64 to int64\n\npandas/core/arrays/integer.py:163: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('values', [{'a': [1, 1, 1, 2, 2, 2, 3, 3, 3], 'b': [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2]}, {'a': [1, 1, 2, 2, 3, 3], 'b': [1, 2, 1, 2, 1, 2]}])",
                    "pytest.mark.parametrize('function', ['mean', 'median', 'var'])"
                ]
            }
        ]
    }
}