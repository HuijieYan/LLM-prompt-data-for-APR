{
    "1.3.2": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/luigi/luigi/contrib/redshift.py",
    "1.1.1": "def copy(self, cursor, f):\n    \n    logger.info(\"Inserting file: %s\", f)\n    colnames = ''\n    if len(self.columns) > 0:\n        colnames = \",\".join([x[0] for x in self.columns])\n        colnames = '({})'.format(colnames)\n\n    cursor.execute(.format(\n        table=self.table,\n        colnames=colnames,\n        source=f,\n        creds=self._credentials(),\n        options=self.copy_options)\n    )\n",
    "1.1.2": "Defines copying from s3 into redshift.\n\nIf both key-based and role-based credentials are provided, role-based will be used.",
    "1.2.1": "class S3CopyToTable(rdbms.CopyToTable, _CredentialsMixin)",
    "1.2.2": "Template task for inserting a data set into Redshift from s3.\n\nUsage:\n\n* Subclass and override the required attributes:\n\n  * `host`,\n  * `database`,\n  * `user`,\n  * `password`,\n  * `table`,\n  * `columns`,\n  * `s3_load_path`.\n\n* You can also override the attributes provided by the\n  CredentialsMixin if they are not supplied by your\n  configuration or environment variables.",
    "1.2.4": [
        "copy_options(self)"
    ],
    "1.3.4": [
        "_credentials(self)",
        "copy_options(self)"
    ],
    "2.1.1": [
        "    @mock.patch(\"luigi.contrib.redshift.RedshiftTarget\")\n    def test_s3_copy_with_nonetype_columns(self, mock_redshift_target):\n        task = DummyS3CopyToTableKey(columns=None)\n        task.run()\n\n        # The mocked connection cursor passed to\n        # S3CopyToTable.copy(self, cursor, f).\n        mock_cursor = (mock_redshift_target.return_value\n                                           .connect\n                                           .return_value\n                                           .cursor\n                                           .return_value)\n\n        # `mock_redshift_target` is the mocked `RedshiftTarget` object\n        # returned by S3CopyToTable.output(self).\n        mock_redshift_target.assert_called_once_with(\n            database=task.database,\n            host=task.host,\n            update_id=task.task_id,\n            user=task.user,\n            table=task.table,\n            password=task.password,\n        )\n\n        # To get the proper intendation in the multiline `COPY` statement the\n        # SQL string was copied from redshift.py.\n        mock_cursor.execute.assert_called_with(\"\"\"\n         COPY {table} {colnames} from '{source}'\n         CREDENTIALS '{creds}'\n         {options}\n         ;\"\"\".format(\n            table='dummy_table',\n            colnames='',\n            source='s3://bucket/key',\n            creds='aws_access_key_id=key;aws_secret_access_key=secret',\n            options='')\n        )"
    ],
    "2.1.2": [
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/luigi/test/contrib/redshift_test.py"
    ],
    "2.2.1": [
        [
            "E       TypeError: object of type 'NoneType' has no len()"
        ]
    ],
    "2.2.2": [
        [
            "self = <contrib.redshift_test.TestS3CopyToTable testMethod=test_s3_copy_with_nonetype_columns>\nmock_redshift_target = <MagicMock name='RedshiftTarget' id='4384615920'>\n\n    @mock.patch(\"luigi.contrib.redshift.RedshiftTarget\")\n    def test_s3_copy_with_nonetype_columns(self, mock_redshift_target):\n        task = DummyS3CopyToTableKey(columns=None)\n>       task.run()\n\ntest/contrib/redshift_test.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nluigi/contrib/redshift.py:338: in run\n    self.copy(cursor, path)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = DummyS3CopyToTableKey(table=dummy_table, columns=null)\ncursor = <MagicMock name='RedshiftTarget().connect().cursor()' id='4385178720'>\nf = 's3://bucket/key'\n\n    def copy(self, cursor, f):\n        \"\"\"\n        Defines copying from s3 into redshift.\n    \n        If both key-based and role-based credentials are provided, role-based will be used.\n        \"\"\"\n        logger.info(\"Inserting file: %s\", f)\n        colnames = ''\n>       if len(self.columns) > 0:",
            "\nluigi/contrib/redshift.py:356: TypeError"
        ]
    ],
    "3.1.1": [
        "Redshift COPY fails in luigi 2.7.1 when columns are not provided\n"
    ],
    "3.1.2": [
        "Running Redshift COPY jobs with columns = None to prohibit table creation fails in luigi 2.7.1 with\n\nTypeError: object of type 'NoneType' has no len()\nThe root cause seems to be https://github.com/spotify/luigi/pull/2245/files#diff-778ea3db4cccaf4de6564889c5eb670fR338\n\nA possible solution would be to change the line to\n\nif self.columns and len(self.columns) > 0:\nunless I am missing some reason to explicitly ask only for len(self.columns).\n"
    ]
}