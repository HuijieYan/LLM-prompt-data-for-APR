{
    "luigi:4": {
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/luigi/luigi/contrib/redshift.py": {
            "buggy_functions": [
                {
                    "function_name": "copy",
                    "function_code": "    def copy(self, cursor, f):\n        \"\"\"\n        Defines copying from s3 into redshift.\n\n        If both key-based and role-based credentials are provided, role-based will be used.\n        \"\"\"\n        logger.info(\"Inserting file: %s\", f)\n        colnames = ''\n        if len(self.columns) > 0:\n            colnames = \",\".join([x[0] for x in self.columns])\n            colnames = '({})'.format(colnames)\n\n        cursor.execute(\"\"\"\n         COPY {table} {colnames} from '{source}'\n         CREDENTIALS '{creds}'\n         {options}\n         ;\"\"\".format(\n            table=self.table,\n            colnames=colnames,\n            source=f,\n            creds=self._credentials(),\n            options=self.copy_options)\n        )\n",
                    "start_line": 348,
                    "variables": [
                        "logger.info",
                        "logger",
                        "f",
                        "colnames",
                        "len",
                        "self.columns",
                        "self",
                        "join",
                        "x",
                        "format",
                        "cursor.execute",
                        "cursor",
                        "self.table",
                        "self._credentials",
                        "self.copy_options"
                    ],
                    "diff_line_number": 356,
                    "class_data": {
                        "signature": "class S3CopyToTable(rdbms.CopyToTable, _CredentialsMixin)",
                        "docstring": "Template task for inserting a data set into Redshift from s3.\n\nUsage:\n\n* Subclass and override the required attributes:\n\n  * `host`,\n  * `database`,\n  * `user`,\n  * `password`,\n  * `table`,\n  * `columns`,\n  * `s3_load_path`.\n\n* You can also override the attributes provided by the\n  CredentialsMixin if they are not supplied by your\n  configuration or environment variables.",
                        "constructor_docstring": null,
                        "functions": [
                            "s3_load_path(self)",
                            "copy_options(self)",
                            "prune_table(self)",
                            "prune_column(self)",
                            "prune_date(self)",
                            "table_attributes(self)",
                            "do_truncate_table(self)",
                            "do_prune(self)",
                            "table_type(self)",
                            "queries(self)",
                            "truncate_table(self, connection)",
                            "prune(self, connection)",
                            "create_table(self, connection)",
                            "run(self)",
                            "copy(self, cursor, f)",
                            "output(self)",
                            "does_table_exist(self, connection)",
                            "init_copy(self, connection)",
                            "post_copy(self, cursor)"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": []
                    }
                }
            ],
            "inscope_functions": [
                "configuration_section(self)",
                "aws_access_key_id(self)",
                "aws_secret_access_key(self)",
                "aws_account_id(self)",
                "aws_arn_role_name(self)",
                "aws_session_token(self)",
                "_get_configuration_attribute(self, attribute)",
                "_credentials(self)",
                "s3_load_path(self)",
                "copy_options(self)",
                "prune_table(self)",
                "prune_column(self)",
                "prune_date(self)",
                "table_attributes(self)",
                "do_truncate_table(self)",
                "do_prune(self)",
                "table_type(self)",
                "queries(self)",
                "truncate_table(self, connection)",
                "prune(self, connection)",
                "create_table(self, connection)",
                "run(self)",
                "copy(self, cursor, f)",
                "output(self)",
                "does_table_exist(self, connection)",
                "init_copy(self, connection)",
                "post_copy(self, cursor)",
                "jsonpath(self)",
                "copy_json_options(self)",
                "copy(self, cursor, f)",
                "run(self)",
                "host(self)",
                "database(self)",
                "user(self)",
                "password(self)",
                "update_id(self)",
                "output(self)",
                "run(self)",
                "output(self)",
                "s3_unload_path(self)",
                "unload_options(self)",
                "unload_query(self)",
                "run(self)",
                "output(self)"
            ],
            "variables_in_file": {
                "logger": [
                    417,
                    354,
                    707,
                    36,
                    421,
                    615,
                    711,
                    617,
                    428,
                    628,
                    412,
                    29,
                    478,
                    604
                ],
                "logging.getLogger": [
                    29
                ],
                "logging": [
                    29
                ],
                "ImportError": [
                    35
                ],
                "logger.warning": [
                    36
                ],
                "property": [
                    674,
                    69,
                    200,
                    681,
                    76,
                    47,
                    240,
                    209,
                    688,
                    83,
                    182,
                    55,
                    568,
                    247,
                    220,
                    62,
                    191
                ],
                "self._get_configuration_attribute": [
                    67,
                    74,
                    81,
                    88,
                    60
                ],
                "self": [
                    517,
                    526,
                    528,
                    60,
                    574,
                    67,
                    584,
                    585,
                    74,
                    586,
                    587,
                    588,
                    589,
                    81,
                    595,
                    88,
                    604,
                    93,
                    606,
                    615,
                    616,
                    618,
                    106,
                    108,
                    109,
                    111,
                    623,
                    113,
                    114,
                    115,
                    628,
                    652,
                    653,
                    654,
                    655,
                    656,
                    657,
                    698,
                    701,
                    702,
                    703,
                    704,
                    705,
                    707,
                    714,
                    726,
                    727,
                    728,
                    729,
                    730,
                    731,
                    233,
                    235,
                    255,
                    263,
                    281,
                    285,
                    286,
                    291,
                    296,
                    297,
                    299,
                    302,
                    309,
                    314,
                    315,
                    317,
                    322,
                    329,
                    332,
                    333,
                    337,
                    338,
                    339,
                    356,
                    357,
                    365,
                    368,
                    369,
                    379,
                    380,
                    381,
                    382,
                    383,
                    384,
                    391,
                    401,
                    411,
                    412,
                    414,
                    416,
                    417,
                    418,
                    420,
                    421,
                    422,
                    429,
                    484,
                    485
                ],
                "config": [
                    91,
                    93
                ],
                "luigi.configuration.get_config": [
                    91,
                    133
                ],
                "luigi.configuration": [
                    91,
                    133
                ],
                "luigi": [
                    512,
                    133,
                    550,
                    534,
                    91
                ],
                "value": [
                    96,
                    98,
                    93,
                    95
                ],
                "config.get": [
                    93
                ],
                "self.configuration_section": [
                    93
                ],
                "attribute": [
                    96,
                    93
                ],
                "os.environ.get": [
                    96
                ],
                "os.environ": [
                    96
                ],
                "os": [
                    96
                ],
                "attribute.upper": [
                    96
                ],
                "self.aws_account_id": [
                    106,
                    108
                ],
                "self.aws_arn_role_name": [
                    106,
                    109
                ],
                "format": [
                    289,
                    707,
                    293,
                    358,
                    360,
                    107,
                    112,
                    306,
                    115,
                    311
                ],
                "self.aws_access_key_id": [
                    113,
                    111
                ],
                "self.aws_secret_access_key": [
                    114,
                    111
                ],
                "self.aws_session_token": [
                    115
                ],
                "NotImplementedError": [
                    283,
                    118
                ],
                "postgres.PostgresTarget": [
                    126
                ],
                "postgres": [
                    661,
                    126,
                    631
                ],
                "marker_table": [
                    133
                ],
                "get": [
                    133
                ],
                "use_db_timestamps": [
                    138
                ],
                "rdbms.CopyToTable": [
                    141
                ],
                "rdbms": [
                    141
                ],
                "_CredentialsMixin": [
                    433,
                    141,
                    661
                ],
                "abc.abstractmethod": [
                    162
                ],
                "abc": [
                    162,
                    456,
                    169,
                    552,
                    556,
                    463,
                    560,
                    564
                ],
                "abc.abstractproperty": [
                    456,
                    169,
                    552,
                    556,
                    463,
                    560,
                    564
                ],
                "self.prune_table": [
                    233,
                    235,
                    421,
                    263
                ],
                "self.prune_column": [
                    233,
                    235,
                    421,
                    263
                ],
                "self.prune_date": [
                    233,
                    235,
                    421,
                    263
                ],
                "Exception": [
                    330,
                    236
                ],
                "query": [
                    258,
                    293,
                    319,
                    263,
                    392,
                    266,
                    396,
                    301,
                    429,
                    430,
                    401,
                    598,
                    311,
                    606,
                    255
                ],
                "self.table": [
                    417,
                    322,
                    484,
                    383,
                    391,
                    297,
                    329,
                    365,
                    656,
                    401,
                    730,
                    315,
                    412,
                    285,
                    255
                ],
                "cursor": [
                    256,
                    258,
                    260,
                    264,
                    266,
                    268,
                    399,
                    401,
                    402,
                    405,
                    430,
                    699,
                    709,
                    710,
                    711,
                    335,
                    338,
                    339,
                    603,
                    606,
                    607,
                    479,
                    360
                ],
                "connection.cursor": [
                    256,
                    709,
                    264,
                    301,
                    335,
                    399,
                    603,
                    699,
                    319
                ],
                "connection": [
                    256,
                    264,
                    399,
                    411,
                    413,
                    414,
                    418,
                    422,
                    301,
                    698,
                    699,
                    319,
                    709,
                    714,
                    716,
                    717,
                    334,
                    335,
                    337,
                    595,
                    342,
                    343,
                    346,
                    603,
                    608,
                    614,
                    618,
                    623,
                    624,
                    626
                ],
                "cursor.execute": [
                    258,
                    710,
                    360,
                    266,
                    430,
                    401,
                    606,
                    479
                ],
                "cursor.close": [
                    260,
                    268,
                    405,
                    607
                ],
                "len": [
                    302,
                    281,
                    356,
                    286
                ],
                "self.columns": [
                    291,
                    356,
                    357,
                    302,
                    309,
                    281,
                    286
                ],
                "coldefs": [
                    288,
                    305,
                    298,
                    316
                ],
                "join": [
                    288,
                    305,
                    357
                ],
                "name": [
                    307,
                    290,
                    291,
                    309
                ],
                "type": [
                    291,
                    308,
                    309
                ],
                "self.table_type": [
                    296,
                    314
                ],
                "self.table_attributes": [
                    299,
                    317
                ],
                "execute": [
                    301,
                    319
                ],
                "encoding": [
                    309
                ],
                "ValueError": [
                    321
                ],
                "path": [
                    338,
                    332
                ],
                "self.s3_load_path": [
                    332
                ],
                "output": [
                    342,
                    333,
                    334
                ],
                "self.output": [
                    618,
                    714,
                    333,
                    526,
                    623,
                    595,
                    698
                ],
                "output.connect": [
                    334
                ],
                "self.init_copy": [
                    337
                ],
                "self.copy": [
                    338
                ],
                "self.post_copy": [
                    339
                ],
                "output.touch": [
                    342
                ],
                "connection.commit": [
                    608,
                    716,
                    624,
                    343
                ],
                "connection.close": [
                    346,
                    717,
                    614,
                    626
                ],
                "logger.info": [
                    417,
                    354,
                    707,
                    421,
                    615,
                    711,
                    617,
                    428,
                    628,
                    412,
                    478,
                    604
                ],
                "f": [
                    354,
                    484,
                    478,
                    367
                ],
                "colnames": [
                    366,
                    355,
                    357,
                    358
                ],
                "x": [
                    357
                ],
                "self._credentials": [
                    368,
                    705,
                    484
                ],
                "self.copy_options": [
                    369,
                    485
                ],
                "RedshiftTarget": [
                    378,
                    651,
                    725,
                    583
                ],
                "self.host": [
                    584,
                    379,
                    652,
                    726
                ],
                "self.database": [
                    585,
                    653,
                    628,
                    727,
                    380,
                    606,
                    604
                ],
                "self.user": [
                    728,
                    586,
                    381,
                    654
                ],
                "self.password": [
                    729,
                    587,
                    382,
                    655
                ],
                "self.update_id": [
                    384,
                    657,
                    731,
                    589
                ],
                "tuple": [
                    401
                ],
                "self.table.split": [
                    401
                ],
                "result": [
                    402,
                    403
                ],
                "cursor.fetchone": [
                    402
                ],
                "bool": [
                    403
                ],
                "self.does_table_exist": [
                    411
                ],
                "connection.reset": [
                    413
                ],
                "self.create_table": [
                    414
                ],
                "self.do_truncate_table": [
                    416
                ],
                "self.truncate_table": [
                    418
                ],
                "self.do_prune": [
                    420
                ],
                "self.prune": [
                    422
                ],
                "self.queries": [
                    429
                ],
                "S3CopyToTable": [
                    433
                ],
                "self.jsonpath": [
                    485
                ],
                "self.copy_json_options": [
                    485
                ],
                "S3PathTask": [
                    488
                ],
                "folder_paths": [
                    512
                ],
                "luigi.Parameter": [
                    512
                ],
                "text_target": [
                    513
                ],
                "entries": [
                    521,
                    516,
                    525
                ],
                "folder_path": [
                    522,
                    517,
                    518
                ],
                "self.folder_paths": [
                    517
                ],
                "s3": [
                    520,
                    518,
                    519
                ],
                "S3Target": [
                    518
                ],
                "client": [
                    520,
                    519
                ],
                "s3.fs": [
                    519
                ],
                "file_name": [
                    520,
                    522
                ],
                "client.list": [
                    520
                ],
                "s3.path": [
                    520
                ],
                "entries.append": [
                    521
                ],
                "manifest": [
                    525,
                    527
                ],
                "target": [
                    530,
                    531,
                    526
                ],
                "open": [
                    526
                ],
                "dump": [
                    529,
                    530,
                    527
                ],
                "json.dumps": [
                    527
                ],
                "json": [
                    527
                ],
                "self.text_target": [
                    528
                ],
                "dump.encode": [
                    529
                ],
                "target.write": [
                    530
                ],
                "target.close": [
                    531
                ],
                "luigi.Task": [
                    534
                ],
                "connection_reset_wait_seconds": [
                    550
                ],
                "luigi.IntParameter": [
                    550
                ],
                "self.task_id": [
                    574
                ],
                "self.__class__.__name__": [
                    588
                ],
                "self.__class__": [
                    707,
                    588
                ],
                "connect": [
                    698,
                    618,
                    595
                ],
                "psycopg2.DatabaseError": [
                    609
                ],
                "psycopg2": [
                    609
                ],
                "e.message": [
                    610
                ],
                "e": [
                    610
                ],
                "self.connection_reset_wait_seconds": [
                    616,
                    615
                ],
                "time.sleep": [
                    616
                ],
                "time": [
                    616
                ],
                "touch": [
                    714,
                    623
                ],
                "postgres.PostgresQuery": [
                    661,
                    631
                ],
                "unload_query": [
                    701,
                    710
                ],
                "self.unload_query.format": [
                    701
                ],
                "self.unload_query": [
                    701
                ],
                "replace": [
                    702
                ],
                "self.query": [
                    702
                ],
                "self.s3_unload_path": [
                    703
                ],
                "self.unload_options": [
                    704
                ],
                "cursor.statusmessage": [
                    711
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/luigi/test/contrib/redshift_test.py",
                "test_function": "test_s3_copy_with_nonetype_columns",
                "test_function_code": "    def test_s3_copy_with_nonetype_columns(self, mock_redshift_target):\n        task = DummyS3CopyToTableKey(columns=None)\n        task.run()\n\n        # The mocked connection cursor passed to\n        # S3CopyToTable.copy(self, cursor, f).\n        mock_cursor = (mock_redshift_target.return_value\n                                           .connect\n                                           .return_value\n                                           .cursor\n                                           .return_value)\n\n        # `mock_redshift_target` is the mocked `RedshiftTarget` object\n        # returned by S3CopyToTable.output(self).\n        mock_redshift_target.assert_called_once_with(\n            database=task.database,\n            host=task.host,\n            update_id=task.task_id,\n            user=task.user,\n            table=task.table,\n            password=task.password,\n        )\n\n        # To get the proper intendation in the multiline `COPY` statement the\n        # SQL string was copied from redshift.py.\n        mock_cursor.execute.assert_called_with(\"\"\"\n         COPY {table} {colnames} from '{source}'\n         CREDENTIALS '{creds}'\n         {options}\n         ;\"\"\".format(\n            table='dummy_table',\n            colnames='',\n            source='s3://bucket/key',\n            creds='aws_access_key_id=key;aws_secret_access_key=secret',\n            options='')\n        )",
                "test_error": "TypeError: object of type 'NoneType' has no len()",
                "full_test_error": "self = <contrib.redshift_test.TestS3CopyToTable testMethod=test_s3_copy_with_nonetype_columns>\nmock_redshift_target = <MagicMock name='RedshiftTarget' id='4585000336'>\n\n    @mock.patch(\"luigi.contrib.redshift.RedshiftTarget\")\n    def test_s3_copy_with_nonetype_columns(self, mock_redshift_target):\n        task = DummyS3CopyToTableKey(columns=None)\n>       task.run()\n\ntest/contrib/redshift_test.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nluigi/contrib/redshift.py:338: in run\n    self.copy(cursor, path)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = DummyS3CopyToTableKey(table=dummy_table, columns=null)\ncursor = <MagicMock name='RedshiftTarget().connect().cursor()' id='4586099760'>\nf = 's3://bucket/key'\n\n    def copy(self, cursor, f):\n        \"\"\"\n        Defines copying from s3 into redshift.\n    \n        If both key-based and role-based credentials are provided, role-based will be used.\n        \"\"\"\n        logger.info(\"Inserting file: %s\", f)\n        colnames = ''\n>       if len(self.columns) > 0:\nE       TypeError: object of type 'NoneType' has no len()\n\nluigi/contrib/redshift.py:356: TypeError"
            }
        ]
    }
}