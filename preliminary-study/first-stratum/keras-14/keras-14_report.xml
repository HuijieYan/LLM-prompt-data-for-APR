<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="1" hostname="boyudeMacBook-Pro.local" name="pytest" skipped="0" tests="1" time="5.396" timestamp="2023-11-15T22:58:33.844801"><testcase classname="tests.keras.metrics_test" file="tests/keras/metrics_test.py" line="96" name="test_sparse_top_k_categorical_accuracy[y_pred1-y_true1]" time="0.012"><failure message="ValueError: Shape must be rank 1 but is rank 0 for &apos;in_top_k/InTopKV2&apos; (op: &apos;InTopKV2&apos;) with input shapes: [2,3], [], [].">graph = &lt;tensorflow.python.framework.ops.Graph object at 0x7f93c9b70710&gt;
node_def = name: &quot;in_top_k/InTopKV2&quot;
op: &quot;InTopKV2&quot;
attr {
  key: &quot;T&quot;
  value {
    type: DT_INT32
  }
}

inputs = [&lt;tf.Tensor &apos;Variable/read:0&apos; shape=(2, 3) dtype=float32&gt;, &lt;tf.Tensor &apos;Cast:0&apos; shape=() dtype=int32&gt;, &lt;tf.Tensor &apos;in_top_k/InTopKV2/k:0&apos; shape=() dtype=int32&gt;]
control_inputs = []

    def _create_c_op(graph, node_def, inputs, control_inputs):
      &quot;&quot;&quot;Creates a TF_Operation.
    
      Args:
        graph: a `Graph`.
        node_def: `node_def_pb2.NodeDef` for the operation to create.
        inputs: A list of `Tensor`s (corresponding to scalar inputs) and lists of
          `Tensor`s (corresponding to sequence inputs, e.g. &quot;int64 * N&quot;,
          &quot;list(int64)&quot;). The length of the list should be equal to the number of
          inputs specified by this operation&apos;s op def.
        control_inputs: A list of `Operation`s to set as control dependencies.
    
      Returns:
        A wrapped TF_Operation*.
      &quot;&quot;&quot;
      # pylint: disable=protected-access
      op_desc = c_api.TF_NewOperation(graph._c_graph, compat.as_str(node_def.op),
                                      compat.as_str(node_def.name))
      if node_def.device:
        c_api.TF_SetDevice(op_desc, compat.as_str(node_def.device))
      # Add inputs
      for op_input in inputs:
        if isinstance(op_input, (list, tuple)):
          c_api.TF_AddInputList(op_desc, [t._as_tf_output() for t in op_input])
        else:
          c_api.TF_AddInput(op_desc, op_input._as_tf_output())
    
      # Add control inputs
      for control_input in control_inputs:
        c_api.TF_AddControlInput(op_desc, control_input._c_op)
      # pylint: enable=protected-access
    
      # Add attrs
      for name, attr_value in node_def.attr.items():
        serialized = attr_value.SerializeToString()
        # TODO(skyewm): this creates and deletes a new TF_Status for every attr.
        # It might be worth creating a convenient way to re-use the same status.
        c_api.TF_SetAttrValueProto(op_desc, compat.as_str(name), serialized)
    
      try:
&gt;       c_op = c_api.TF_FinishOperation(op_desc)
E       tensorflow.python.framework.errors_impl.InvalidArgumentError: Shape must be rank 1 but is rank 0 for &apos;in_top_k/InTopKV2&apos; (op: &apos;InTopKV2&apos;) with input shapes: [2,3], [], [].

../../envs/20/lib/python3.7/site-packages/tensorflow_core/python/framework/ops.py:1607: InvalidArgumentError

During handling of the above exception, another exception occurred:

y_pred = &lt;tf.Variable &apos;Variable:0&apos; shape=(2, 3) dtype=float32_ref&gt;
y_true = &lt;tf.Variable &apos;Variable_1:0&apos; shape=(2,) dtype=float32_ref&gt;

    @pytest.mark.skipif((K.backend() == &apos;cntk&apos;),
                        reason=&apos;CNTK backend does not support top_k yet&apos;)
    @pytest.mark.parametrize(&apos;y_pred, y_true&apos;, [
        # Test correctness if the shape of y_true is (num_samples, 1)
        (np.array([[0.3, 0.2, 0.1], [0.1, 0.2, 0.7]]), np.array([[1], [0]])),
        # Test correctness if the shape of y_true is (num_samples,)
        (np.array([[0.3, 0.2, 0.1], [0.1, 0.2, 0.7]]), np.array([1, 0])),
    ])
    def test_sparse_top_k_categorical_accuracy(y_pred, y_true):
        y_pred = K.variable(y_pred)
        y_true = K.variable(y_true)
        success_result = K.eval(
&gt;           metrics.sparse_top_k_categorical_accuracy(y_true, y_pred, k=3))

tests/keras/metrics_test.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
keras/metrics.py:48: in sparse_top_k_categorical_accuracy
    return K.mean(K.in_top_k(y_pred, K.cast(K.max(y_true, axis=-1), &apos;int32&apos;), k),
keras/backend/tensorflow_backend.py:3446: in in_top_k
    return tf.nn.in_top_k(predictions, targets, k)
../../envs/20/lib/python3.7/site-packages/tensorflow_core/python/ops/nn_ops.py:4843: in in_top_k
    return gen_nn_ops.in_top_kv2(predictions, targets, k, name=name)
../../envs/20/lib/python3.7/site-packages/tensorflow_core/python/ops/gen_nn_ops.py:5042: in in_top_kv2
    &quot;InTopKV2&quot;, predictions=predictions, targets=targets, k=k, name=name)
../../envs/20/lib/python3.7/site-packages/tensorflow_core/python/framework/op_def_library.py:794: in _apply_op_helper
    op_def=op_def)
../../envs/20/lib/python3.7/site-packages/tensorflow_core/python/util/deprecation.py:507: in new_func
    return func(*args, **kwargs)
../../envs/20/lib/python3.7/site-packages/tensorflow_core/python/framework/ops.py:3357: in create_op
    attrs, op_def, compute_device)
../../envs/20/lib/python3.7/site-packages/tensorflow_core/python/framework/ops.py:3426: in _create_op_internal
    op_def=op_def)
../../envs/20/lib/python3.7/site-packages/tensorflow_core/python/framework/ops.py:1770: in __init__
    control_input_ops)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

graph = &lt;tensorflow.python.framework.ops.Graph object at 0x7f93c9b70710&gt;
node_def = name: &quot;in_top_k/InTopKV2&quot;
op: &quot;InTopKV2&quot;
attr {
  key: &quot;T&quot;
  value {
    type: DT_INT32
  }
}

inputs = [&lt;tf.Tensor &apos;Variable/read:0&apos; shape=(2, 3) dtype=float32&gt;, &lt;tf.Tensor &apos;Cast:0&apos; shape=() dtype=int32&gt;, &lt;tf.Tensor &apos;in_top_k/InTopKV2/k:0&apos; shape=() dtype=int32&gt;]
control_inputs = []

    def _create_c_op(graph, node_def, inputs, control_inputs):
      &quot;&quot;&quot;Creates a TF_Operation.
    
      Args:
        graph: a `Graph`.
        node_def: `node_def_pb2.NodeDef` for the operation to create.
        inputs: A list of `Tensor`s (corresponding to scalar inputs) and lists of
          `Tensor`s (corresponding to sequence inputs, e.g. &quot;int64 * N&quot;,
          &quot;list(int64)&quot;). The length of the list should be equal to the number of
          inputs specified by this operation&apos;s op def.
        control_inputs: A list of `Operation`s to set as control dependencies.
    
      Returns:
        A wrapped TF_Operation*.
      &quot;&quot;&quot;
      # pylint: disable=protected-access
      op_desc = c_api.TF_NewOperation(graph._c_graph, compat.as_str(node_def.op),
                                      compat.as_str(node_def.name))
      if node_def.device:
        c_api.TF_SetDevice(op_desc, compat.as_str(node_def.device))
      # Add inputs
      for op_input in inputs:
        if isinstance(op_input, (list, tuple)):
          c_api.TF_AddInputList(op_desc, [t._as_tf_output() for t in op_input])
        else:
          c_api.TF_AddInput(op_desc, op_input._as_tf_output())
    
      # Add control inputs
      for control_input in control_inputs:
        c_api.TF_AddControlInput(op_desc, control_input._c_op)
      # pylint: enable=protected-access
    
      # Add attrs
      for name, attr_value in node_def.attr.items():
        serialized = attr_value.SerializeToString()
        # TODO(skyewm): this creates and deletes a new TF_Status for every attr.
        # It might be worth creating a convenient way to re-use the same status.
        c_api.TF_SetAttrValueProto(op_desc, compat.as_str(name), serialized)
    
      try:
        c_op = c_api.TF_FinishOperation(op_desc)
      except errors.InvalidArgumentError as e:
        # Convert to ValueError for backwards compatibility.
&gt;       raise ValueError(str(e))
E       ValueError: Shape must be rank 1 but is rank 0 for &apos;in_top_k/InTopKV2&apos; (op: &apos;InTopKV2&apos;) with input shapes: [2,3], [], [].

../../envs/20/lib/python3.7/site-packages/tensorflow_core/python/framework/ops.py:1610: ValueError</failure></testcase></testsuite></testsuites>