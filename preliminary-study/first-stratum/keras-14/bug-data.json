{
    "keras:14": {
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/keras/keras/metrics.py": {
            "buggy_functions": [
                {
                    "function_name": "sparse_top_k_categorical_accuracy",
                    "function_code": "def sparse_top_k_categorical_accuracy(y_true, y_pred, k=5):\n    return K.mean(K.in_top_k(y_pred, K.cast(K.max(y_true, axis=-1), 'int32'), k),\n                  axis=-1)\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 47,
                    "variables": {
                        "K.mean": [
                            48
                        ],
                        "K": [
                            48
                        ],
                        "K.in_top_k": [
                            48
                        ],
                        "y_pred": [
                            48
                        ],
                        "K.cast": [
                            48
                        ],
                        "K.max": [
                            48
                        ],
                        "y_true": [
                            48
                        ],
                        "k": [
                            48
                        ]
                    },
                    "filtered_variables": {
                        "K.mean": [
                            48
                        ],
                        "K": [
                            48
                        ],
                        "K.in_top_k": [
                            48
                        ],
                        "y_pred": [
                            48
                        ],
                        "K.cast": [
                            48
                        ],
                        "K.max": [
                            48
                        ],
                        "y_true": [
                            48
                        ],
                        "k": [
                            48
                        ]
                    },
                    "diff_line_number": 48,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "K.mean": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "K": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "K.in_top_k": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "y_pred": {
                                    "variable_value": "<tf.Variable 'Variable:0' shape=(2, 3) dtype=float32_ref>",
                                    "variable_type": "RefVariable"
                                },
                                "K.cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "K.max": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "y_true": {
                                    "variable_value": "<tf.Variable 'Variable_1:0' shape=(2,) dtype=float32_ref>",
                                    "variable_type": "RefVariable"
                                },
                                "k": {
                                    "variable_value": "3",
                                    "variable_type": "int"
                                }
                            },
                            {
                                "K.mean": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "K": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "K.in_top_k": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "y_pred": {
                                    "variable_value": "<tf.Variable 'Variable:0' shape=(2, 3) dtype=float32_ref>",
                                    "variable_type": "RefVariable"
                                },
                                "K.cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "K.max": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "y_true": {
                                    "variable_value": "<tf.Variable 'Variable_1:0' shape=(2,) dtype=float32_ref>",
                                    "variable_type": "RefVariable"
                                },
                                "k": {
                                    "variable_value": "3",
                                    "variable_type": "int"
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "K.mean": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "K": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "K.in_top_k": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "y_pred": {
                                    "variable_value": "<tf.Variable 'Variable:0' shape=(2, 3) dtype=float32_ref>",
                                    "variable_type": "RefVariable"
                                },
                                "K.cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "K.flatten": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "y_true": {
                                    "variable_value": "<tf.Variable 'Variable_1:0' shape=(2,) dtype=float32_ref>",
                                    "variable_type": "RefVariable"
                                },
                                "k": {
                                    "variable_value": "3",
                                    "variable_type": "int"
                                }
                            },
                            {
                                "K.mean": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "K": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "K.in_top_k": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "y_pred": {
                                    "variable_value": "<tf.Variable 'Variable:0' shape=(2, 3) dtype=float32_ref>",
                                    "variable_type": "RefVariable"
                                },
                                "K.cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "K.flatten": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "y_true": {
                                    "variable_value": "<tf.Variable 'Variable_1:0' shape=(2,) dtype=float32_ref>",
                                    "variable_type": "RefVariable"
                                },
                                "k": {
                                    "variable_value": "3",
                                    "variable_type": "int"
                                }
                            }
                        ],
                        [
                            {
                                "K.mean": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "K": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "K.in_top_k": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "y_pred": {
                                    "variable_value": "<tf.Variable 'Variable:0' shape=(2, 3) dtype=float32_ref>",
                                    "variable_type": "RefVariable"
                                },
                                "K.cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "K.flatten": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "y_true": {
                                    "variable_value": "<tf.Variable 'Variable_1:0' shape=(2,) dtype=float32_ref>",
                                    "variable_type": "RefVariable"
                                },
                                "k": {
                                    "variable_value": "2",
                                    "variable_type": "int"
                                }
                            },
                            {
                                "K.mean": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "K": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "K.in_top_k": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "y_pred": {
                                    "variable_value": "<tf.Variable 'Variable:0' shape=(2, 3) dtype=float32_ref>",
                                    "variable_type": "RefVariable"
                                },
                                "K.cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "K.flatten": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "y_true": {
                                    "variable_value": "<tf.Variable 'Variable_1:0' shape=(2,) dtype=float32_ref>",
                                    "variable_type": "RefVariable"
                                },
                                "k": {
                                    "variable_value": "2",
                                    "variable_type": "int"
                                }
                            }
                        ],
                        [
                            {
                                "K.mean": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "K": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "K.in_top_k": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "y_pred": {
                                    "variable_value": "<tf.Variable 'Variable:0' shape=(2, 3) dtype=float32_ref>",
                                    "variable_type": "RefVariable"
                                },
                                "K.cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "K.flatten": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "y_true": {
                                    "variable_value": "<tf.Variable 'Variable_1:0' shape=(2,) dtype=float32_ref>",
                                    "variable_type": "RefVariable"
                                },
                                "k": {
                                    "variable_value": "1",
                                    "variable_type": "int"
                                }
                            },
                            {
                                "K.mean": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "K": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "K.in_top_k": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "y_pred": {
                                    "variable_value": "<tf.Variable 'Variable:0' shape=(2, 3) dtype=float32_ref>",
                                    "variable_type": "RefVariable"
                                },
                                "K.cast": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "K.flatten": {
                                    "variable_value": "None",
                                    "variable_type": "None"
                                },
                                "y_true": {
                                    "variable_value": "<tf.Variable 'Variable_1:0' shape=(2,) dtype=float32_ref>",
                                    "variable_type": "RefVariable"
                                },
                                "k": {
                                    "variable_value": "1",
                                    "variable_type": "int"
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def binary_accuracy(y_true, y_pred):\n    return K.mean(K.equal(y_true, K.round(y_pred)), axis=-1)",
                "def categorical_accuracy(y_true, y_pred):\n    return K.cast(K.equal(K.argmax(y_true, axis=-1),\n                          K.argmax(y_pred, axis=-1)),\n                  K.floatx())",
                "def sparse_categorical_accuracy(y_true, y_pred):\n    # flatten y_true in case it's in shape (num_samples, 1) instead of (num_samples,)\n    return K.cast(K.equal(K.flatten(y_true),\n                          K.cast(K.argmax(y_pred, axis=-1), K.floatx())),\n                  K.floatx())",
                "def top_k_categorical_accuracy(y_true, y_pred, k=5):\n    return K.mean(K.in_top_k(y_pred, K.argmax(y_true, axis=-1), k), axis=-1)",
                "def sparse_top_k_categorical_accuracy(y_true, y_pred, k=5):\n    return K.mean(K.in_top_k(y_pred, K.cast(K.max(y_true, axis=-1), 'int32'), k),\n                  axis=-1)",
                "def serialize(metric):\n    return serialize_keras_object(metric)",
                "def deserialize(config, custom_objects=None):\n    return deserialize_keras_object(config,\n                                    module_objects=globals(),\n                                    custom_objects=custom_objects,\n                                    printable_module_name='metric function')",
                "def get(identifier):\n    if isinstance(identifier, dict):\n        config = {'class_name': str(identifier), 'config': {}}\n        return deserialize(config)\n    elif isinstance(identifier, six.string_types):\n        return deserialize(str(identifier))\n    elif callable(identifier):\n        return identifier\n    else:\n        raise ValueError('Could not interpret '\n                         'metric function identifier:', identifier)"
            ],
            "inscope_function_signatures": [
                "binary_accuracy(y_true, y_pred)",
                "categorical_accuracy(y_true, y_pred)",
                "sparse_categorical_accuracy(y_true, y_pred)",
                "top_k_categorical_accuracy(y_true, y_pred, k=5)",
                "sparse_top_k_categorical_accuracy(y_true, y_pred, k=5)",
                "serialize(metric)",
                "deserialize(config, custom_objects=None)",
                "get(identifier)"
            ],
            "variables_in_file": {
                "K.mean": [
                    48,
                    27,
                    44
                ],
                "K": [
                    32,
                    33,
                    38,
                    39,
                    40,
                    44,
                    48,
                    27,
                    31
                ],
                "K.equal": [
                    27,
                    38,
                    31
                ],
                "y_true": [
                    38,
                    44,
                    48,
                    27,
                    31
                ],
                "K.round": [
                    27
                ],
                "y_pred": [
                    32,
                    39,
                    44,
                    48,
                    27
                ],
                "K.cast": [
                    48,
                    39,
                    38,
                    31
                ],
                "K.argmax": [
                    32,
                    44,
                    39,
                    31
                ],
                "K.floatx": [
                    40,
                    33,
                    39
                ],
                "K.flatten": [
                    38
                ],
                "K.in_top_k": [
                    48,
                    44
                ],
                "k": [
                    48,
                    44
                ],
                "K.max": [
                    48
                ],
                "mse": [
                    54
                ],
                "MSE": [
                    54
                ],
                "mean_squared_error": [
                    54
                ],
                "mae": [
                    55
                ],
                "MAE": [
                    55
                ],
                "mean_absolute_error": [
                    55
                ],
                "mape": [
                    56
                ],
                "MAPE": [
                    56
                ],
                "mean_absolute_percentage_error": [
                    56
                ],
                "msle": [
                    57
                ],
                "MSLE": [
                    57
                ],
                "mean_squared_logarithmic_error": [
                    57
                ],
                "cosine": [
                    58
                ],
                "cosine_proximity": [
                    58
                ],
                "serialize_keras_object": [
                    62
                ],
                "metric": [
                    62
                ],
                "deserialize_keras_object": [
                    66
                ],
                "config": [
                    66,
                    75,
                    74
                ],
                "globals": [
                    67
                ],
                "custom_objects": [
                    68
                ],
                "isinstance": [
                    73,
                    76
                ],
                "identifier": [
                    73,
                    74,
                    76,
                    77,
                    78,
                    79,
                    82
                ],
                "dict": [
                    73
                ],
                "str": [
                    74,
                    77
                ],
                "deserialize": [
                    75,
                    77
                ],
                "six.string_types": [
                    76
                ],
                "six": [
                    76
                ],
                "callable": [
                    78
                ],
                "ValueError": [
                    81
                ]
            },
            "filtered_variables_in_file": {
                "K.mean": [
                    48,
                    27,
                    44
                ],
                "K": [
                    32,
                    33,
                    38,
                    39,
                    40,
                    44,
                    48,
                    27,
                    31
                ],
                "K.equal": [
                    27,
                    38,
                    31
                ],
                "y_true": [
                    38,
                    44,
                    48,
                    27,
                    31
                ],
                "K.round": [
                    27
                ],
                "y_pred": [
                    32,
                    39,
                    44,
                    48,
                    27
                ],
                "K.cast": [
                    48,
                    39,
                    38,
                    31
                ],
                "K.argmax": [
                    32,
                    44,
                    39,
                    31
                ],
                "K.floatx": [
                    40,
                    33,
                    39
                ],
                "K.flatten": [
                    38
                ],
                "K.in_top_k": [
                    48,
                    44
                ],
                "k": [
                    48,
                    44
                ],
                "K.max": [
                    48
                ],
                "mse": [
                    54
                ],
                "MSE": [
                    54
                ],
                "mean_squared_error": [
                    54
                ],
                "mae": [
                    55
                ],
                "MAE": [
                    55
                ],
                "mean_absolute_error": [
                    55
                ],
                "mape": [
                    56
                ],
                "MAPE": [
                    56
                ],
                "mean_absolute_percentage_error": [
                    56
                ],
                "msle": [
                    57
                ],
                "MSLE": [
                    57
                ],
                "mean_squared_logarithmic_error": [
                    57
                ],
                "cosine": [
                    58
                ],
                "cosine_proximity": [
                    58
                ],
                "serialize_keras_object": [
                    62
                ],
                "metric": [
                    62
                ],
                "deserialize_keras_object": [
                    66
                ],
                "config": [
                    66,
                    75,
                    74
                ],
                "custom_objects": [
                    68
                ],
                "identifier": [
                    73,
                    74,
                    76,
                    77,
                    78,
                    79,
                    82
                ],
                "deserialize": [
                    75,
                    77
                ],
                "six.string_types": [
                    76
                ],
                "six": [
                    76
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/keras/tests/keras/metrics_test.py",
                "test_function": "test_sparse_top_k_categorical_accuracy",
                "test_function_code": "@pytest.mark.skipif((K.backend() == 'cntk'),\n                    reason='CNTK backend does not support top_k yet')\n@pytest.mark.parametrize('y_pred, y_true', [\n    # Test correctness if the shape of y_true is (num_samples, 1)\n    (np.array([[0.3, 0.2, 0.1], [0.1, 0.2, 0.7]]), np.array([[1], [0]])),\n    # Test correctness if the shape of y_true is (num_samples,)\n    (np.array([[0.3, 0.2, 0.1], [0.1, 0.2, 0.7]]), np.array([1, 0])),\n])\ndef test_sparse_top_k_categorical_accuracy(y_pred, y_true):\n    y_pred = K.variable(y_pred)\n    y_true = K.variable(y_true)\n    success_result = K.eval(\n        metrics.sparse_top_k_categorical_accuracy(y_true, y_pred, k=3))\n\n    assert success_result == 1\n    partial_result = K.eval(\n        metrics.sparse_top_k_categorical_accuracy(y_true, y_pred, k=2))\n\n    assert partial_result == 0.5\n    failure_result = K.eval(\n        metrics.sparse_top_k_categorical_accuracy(y_true, y_pred, k=1))\n\n    assert failure_result == 0",
                "test_error": "ValueError: Shape must be rank 1 but is rank 0 for 'in_top_k/InTopKV2' (op: 'InTopKV2') with input shapes: [2,3], [], [].",
                "full_test_error": "graph = <tensorflow.python.framework.ops.Graph object at 0x7f79383ab550>\nnode_def = name: \"in_top_k/InTopKV2\"\nop: \"InTopKV2\"\nattr {\n  key: \"T\"\n  value {\n    type: DT_INT32\n  }\n}\n\ninputs = [<tf.Tensor 'Variable/read:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'Cast:0' shape=() dtype=int32>, <tf.Tensor 'in_top_k/InTopKV2/k:0' shape=() dtype=int32>]\ncontrol_inputs = []\n\n    def _create_c_op(graph, node_def, inputs, control_inputs):\n      \"\"\"Creates a TF_Operation.\n    \n      Args:\n        graph: a `Graph`.\n        node_def: `node_def_pb2.NodeDef` for the operation to create.\n        inputs: A list of `Tensor`s (corresponding to scalar inputs) and lists of\n          `Tensor`s (corresponding to sequence inputs, e.g. \"int64 * N\",\n          \"list(int64)\"). The length of the list should be equal to the number of\n          inputs specified by this operation's op def.\n        control_inputs: A list of `Operation`s to set as control dependencies.\n    \n      Returns:\n        A wrapped TF_Operation*.\n      \"\"\"\n      # pylint: disable=protected-access\n      op_desc = c_api.TF_NewOperation(graph._c_graph, compat.as_str(node_def.op),\n                                      compat.as_str(node_def.name))\n      if node_def.device:\n        c_api.TF_SetDevice(op_desc, compat.as_str(node_def.device))\n      # Add inputs\n      for op_input in inputs:\n        if isinstance(op_input, (list, tuple)):\n          c_api.TF_AddInputList(op_desc, [t._as_tf_output() for t in op_input])\n        else:\n          c_api.TF_AddInput(op_desc, op_input._as_tf_output())\n    \n      # Add control inputs\n      for control_input in control_inputs:\n        c_api.TF_AddControlInput(op_desc, control_input._c_op)\n      # pylint: enable=protected-access\n    \n      # Add attrs\n      for name, attr_value in node_def.attr.items():\n        serialized = attr_value.SerializeToString()\n        # TODO(skyewm): this creates and deletes a new TF_Status for every attr.\n        # It might be worth creating a convenient way to re-use the same status.\n        c_api.TF_SetAttrValueProto(op_desc, compat.as_str(name), serialized)\n    \n      try:\n>       c_op = c_api.TF_FinishOperation(op_desc)\nE       tensorflow.python.framework.errors_impl.InvalidArgumentError: Shape must be rank 1 but is rank 0 for 'in_top_k/InTopKV2' (op: 'InTopKV2') with input shapes: [2,3], [], [].\n\n../../envs/33/lib/python3.7/site-packages/tensorflow_core/python/framework/ops.py:1607: InvalidArgumentError\n\nDuring handling of the above exception, another exception occurred:\n\ny_pred = <tf.Variable 'Variable:0' shape=(2, 3) dtype=float32_ref>\ny_true = <tf.Variable 'Variable_1:0' shape=(2,) dtype=float32_ref>\n\n    @pytest.mark.skipif((K.backend() == 'cntk'),\n                        reason='CNTK backend does not support top_k yet')\n    @pytest.mark.parametrize('y_pred, y_true', [\n        # Test correctness if the shape of y_true is (num_samples, 1)\n        (np.array([[0.3, 0.2, 0.1], [0.1, 0.2, 0.7]]), np.array([[1], [0]])),\n        # Test correctness if the shape of y_true is (num_samples,)\n        (np.array([[0.3, 0.2, 0.1], [0.1, 0.2, 0.7]]), np.array([1, 0])),\n    ])\n    def test_sparse_top_k_categorical_accuracy(y_pred, y_true):\n        y_pred = K.variable(y_pred)\n        y_true = K.variable(y_true)\n        success_result = K.eval(\n>           metrics.sparse_top_k_categorical_accuracy(y_true, y_pred, k=3))\n\ntests/keras/metrics_test.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nkeras/metrics.py:48: in sparse_top_k_categorical_accuracy\n    return K.mean(K.in_top_k(y_pred, K.cast(K.max(y_true, axis=-1), 'int32'), k),\nkeras/backend/tensorflow_backend.py:3446: in in_top_k\n    return tf.nn.in_top_k(predictions, targets, k)\n../../envs/33/lib/python3.7/site-packages/tensorflow_core/python/ops/nn_ops.py:4843: in in_top_k\n    return gen_nn_ops.in_top_kv2(predictions, targets, k, name=name)\n../../envs/33/lib/python3.7/site-packages/tensorflow_core/python/ops/gen_nn_ops.py:5042: in in_top_kv2\n    \"InTopKV2\", predictions=predictions, targets=targets, k=k, name=name)\n../../envs/33/lib/python3.7/site-packages/tensorflow_core/python/framework/op_def_library.py:794: in _apply_op_helper\n    op_def=op_def)\n../../envs/33/lib/python3.7/site-packages/tensorflow_core/python/util/deprecation.py:507: in new_func\n    return func(*args, **kwargs)\n../../envs/33/lib/python3.7/site-packages/tensorflow_core/python/framework/ops.py:3357: in create_op\n    attrs, op_def, compute_device)\n../../envs/33/lib/python3.7/site-packages/tensorflow_core/python/framework/ops.py:3426: in _create_op_internal\n    op_def=op_def)\n../../envs/33/lib/python3.7/site-packages/tensorflow_core/python/framework/ops.py:1770: in __init__\n    control_input_ops)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = <tensorflow.python.framework.ops.Graph object at 0x7f79383ab550>\nnode_def = name: \"in_top_k/InTopKV2\"\nop: \"InTopKV2\"\nattr {\n  key: \"T\"\n  value {\n    type: DT_INT32\n  }\n}\n\ninputs = [<tf.Tensor 'Variable/read:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'Cast:0' shape=() dtype=int32>, <tf.Tensor 'in_top_k/InTopKV2/k:0' shape=() dtype=int32>]\ncontrol_inputs = []\n\n    def _create_c_op(graph, node_def, inputs, control_inputs):\n      \"\"\"Creates a TF_Operation.\n    \n      Args:\n        graph: a `Graph`.\n        node_def: `node_def_pb2.NodeDef` for the operation to create.\n        inputs: A list of `Tensor`s (corresponding to scalar inputs) and lists of\n          `Tensor`s (corresponding to sequence inputs, e.g. \"int64 * N\",\n          \"list(int64)\"). The length of the list should be equal to the number of\n          inputs specified by this operation's op def.\n        control_inputs: A list of `Operation`s to set as control dependencies.\n    \n      Returns:\n        A wrapped TF_Operation*.\n      \"\"\"\n      # pylint: disable=protected-access\n      op_desc = c_api.TF_NewOperation(graph._c_graph, compat.as_str(node_def.op),\n                                      compat.as_str(node_def.name))\n      if node_def.device:\n        c_api.TF_SetDevice(op_desc, compat.as_str(node_def.device))\n      # Add inputs\n      for op_input in inputs:\n        if isinstance(op_input, (list, tuple)):\n          c_api.TF_AddInputList(op_desc, [t._as_tf_output() for t in op_input])\n        else:\n          c_api.TF_AddInput(op_desc, op_input._as_tf_output())\n    \n      # Add control inputs\n      for control_input in control_inputs:\n        c_api.TF_AddControlInput(op_desc, control_input._c_op)\n      # pylint: enable=protected-access\n    \n      # Add attrs\n      for name, attr_value in node_def.attr.items():\n        serialized = attr_value.SerializeToString()\n        # TODO(skyewm): this creates and deletes a new TF_Status for every attr.\n        # It might be worth creating a convenient way to re-use the same status.\n        c_api.TF_SetAttrValueProto(op_desc, compat.as_str(name), serialized)\n    \n      try:\n        c_op = c_api.TF_FinishOperation(op_desc)\n      except errors.InvalidArgumentError as e:\n        # Convert to ValueError for backwards compatibility.\n>       raise ValueError(str(e))\nE       ValueError: Shape must be rank 1 but is rank 0 for 'in_top_k/InTopKV2' (op: 'InTopKV2') with input shapes: [2,3], [], [].\n\n../../envs/33/lib/python3.7/site-packages/tensorflow_core/python/framework/ops.py:1610: ValueError",
                "traceback": "keras/metrics.py:48: in sparse_top_k_categorical_accuracy\n    return K.mean(K.in_top_k(y_pred, K.cast(K.max(y_true, axis=-1), 'int32'), k),\nkeras/backend/tensorflow_backend.py:3446: in in_top_k\n    return tf.nn.in_top_k(predictions, targets, k)\n../../envs/33/lib/python3.7/site-packages/tensorflow_core/python/ops/nn_ops.py:4843: in in_top_k\n    return gen_nn_ops.in_top_kv2(predictions, targets, k, name=name)\n../../envs/33/lib/python3.7/site-packages/tensorflow_core/python/ops/gen_nn_ops.py:5042: in in_top_kv2\n    \"InTopKV2\", predictions=predictions, targets=targets, k=k, name=name)\n../../envs/33/lib/python3.7/site-packages/tensorflow_core/python/framework/op_def_library.py:794: in _apply_op_helper\n    op_def=op_def)\n../../envs/33/lib/python3.7/site-packages/tensorflow_core/python/util/deprecation.py:507: in new_func\n    return func(*args, **kwargs)\n../../envs/33/lib/python3.7/site-packages/tensorflow_core/python/framework/ops.py:3357: in create_op\n    attrs, op_def, compute_device)\n../../envs/33/lib/python3.7/site-packages/tensorflow_core/python/framework/ops.py:3426: in _create_op_internal\n    op_def=op_def)\n../../envs/33/lib/python3.7/site-packages/tensorflow_core/python/framework/ops.py:1770: in __init__\n    control_input_ops)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = <tensorflow.python.framework.ops.Graph object at 0x7f79383ab550>\nnode_def = name: \"in_top_k/InTopKV2\"\nop: \"InTopKV2\"\nattr {\n  key: \"T\"\n  value {\n    type: DT_INT32\n  }\n}\n\ninputs = [<tf.Tensor 'Variable/read:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'Cast:0' shape=() dtype=int32>, <tf.Tensor 'in_top_k/InTopKV2/k:0' shape=() dtype=int32>]\ncontrol_inputs = []\n\n    def _create_c_op(graph, node_def, inputs, control_inputs):\n      \"\"\"Creates a TF_Operation.\n    \n      Args:\n        graph: a `Graph`.\n        node_def: `node_def_pb2.NodeDef` for the operation to create.\n        inputs: A list of `Tensor`s (corresponding to scalar inputs) and lists of\n          `Tensor`s (corresponding to sequence inputs, e.g. \"int64 * N\",\n          \"list(int64)\"). The length of the list should be equal to the number of\n          inputs specified by this operation's op def.\n        control_inputs: A list of `Operation`s to set as control dependencies.\n    \n      Returns:\n        A wrapped TF_Operation*.\n      \"\"\"\n      # pylint: disable=protected-access\n      op_desc = c_api.TF_NewOperation(graph._c_graph, compat.as_str(node_def.op),\n                                      compat.as_str(node_def.name))\n      if node_def.device:\n        c_api.TF_SetDevice(op_desc, compat.as_str(node_def.device))\n      # Add inputs\n      for op_input in inputs:\n        if isinstance(op_input, (list, tuple)):\n          c_api.TF_AddInputList(op_desc, [t._as_tf_output() for t in op_input])\n        else:\n          c_api.TF_AddInput(op_desc, op_input._as_tf_output())\n    \n      # Add control inputs\n      for control_input in control_inputs:\n        c_api.TF_AddControlInput(op_desc, control_input._c_op)\n      # pylint: enable=protected-access\n    \n      # Add attrs\n      for name, attr_value in node_def.attr.items():\n        serialized = attr_value.SerializeToString()\n        # TODO(skyewm): this creates and deletes a new TF_Status for every attr.\n        # It might be worth creating a convenient way to re-use the same status.\n        c_api.TF_SetAttrValueProto(op_desc, compat.as_str(name), serialized)\n    \n      try:\n        c_op = c_api.TF_FinishOperation(op_desc)\n      except errors.InvalidArgumentError as e:\n        # Convert to ValueError for backwards compatibility.\n>       raise ValueError(str(e))\nE       ValueError: Shape must be rank 1 but is rank 0 for 'in_top_k/InTopKV2' (op: 'InTopKV2') with input shapes: [2,3], [], [].\n\n../../envs/33/lib/python3.7/site-packages/tensorflow_core/python/framework/ops.py:1610: ValueError",
                "test_function_decorators": [
                    "pytest.mark.skipif(K.backend() == 'cntk', reason='CNTK backend does not support top_k yet')",
                    "pytest.mark.parametrize('y_pred, y_true', [(np.array([[0.3, 0.2, 0.1], [0.1, 0.2, 0.7]]), np.array([[1], [0]])), (np.array([[0.3, 0.2, 0.1], [0.1, 0.2, 0.7]]), np.array([1, 0]))])"
                ]
            }
        ]
    }
}