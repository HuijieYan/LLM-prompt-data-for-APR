{
    "1.1.1": "def table_exists(self, table, database='default', partition=None):\n    if partition is None:\n        stdout = run_hive_cmd('use {0}; show tables like \"{1}\";'.format(database, table))\n\n        return stdout and table in stdout\n    else:\n        stdout = run_hive_cmd(\"\"\"use %s; show partitions %s partition\n                            (%s)\"\"\" % (database, table, self.partition_spec(partition)))\n\n        if stdout:\n            return True\n        else:\n            return False\n",
    "1.1.2": null,
    "1.2.1": "class HiveCommandClient(HiveClient)",
    "1.2.2": "Uses `hive` invocations to find information.",
    "1.2.3": [
        "partition_spec(self, partition)"
    ],
    "1.3.1": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/luigi/luigi/contrib/hive.py",
    "1.3.2": [
        "run_hive_cmd(hivecmd, check_return_code=True)",
        "partition_spec(self, partition)",
        "partition_spec(self, partition)",
        "partition_spec(self, partition)"
    ],
    "2.1.1": [
        "    @mock.patch(\"luigi.contrib.hive.run_hive_cmd\")\n    def test_table_exists(self, run_command):\n        run_command.return_value = \"OK\"\n        returned = self.client.table_exists(\"mytable\")\n        self.assertFalse(returned)\n\n        run_command.return_value = \"OK\\n\" \\\n                                   \"mytable\"\n        returned = self.client.table_exists(\"mytable\")\n        self.assertTrue(returned)\n\n        # Issue #896 test case insensitivity\n        returned = self.client.table_exists(\"MyTable\")\n        self.assertTrue(returned)\n\n        run_command.return_value = \"day=2013-06-28/hour=3\\n\" \\\n                                   \"day=2013-06-28/hour=4\\n\" \\\n                                   \"day=2013-07-07/hour=2\\n\"\n        self.client.partition_spec = mock.Mock(name=\"partition_spec\")\n        self.client.partition_spec.return_value = \"somepart\"\n        returned = self.client.table_exists(\"mytable\", partition={'a': 'b'})\n        self.assertTrue(returned)\n\n        run_command.return_value = \"\"\n        returned = self.client.table_exists(\"mytable\", partition={'a': 'b'})\n        self.assertFalse(returned)"
    ],
    "2.1.2": [
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/luigi/test/contrib/hive_test.py"
    ],
    "2.2.1": [
        [
            "E       AssertionError: False is not true"
        ]
    ],
    "2.2.2": [
        [
            "self = <contrib.hive_test.HiveCommandClientTest testMethod=test_table_exists>\nrun_command = <MagicMock name='run_hive_cmd' id='4488202704'>\n\n    @mock.patch(\"luigi.contrib.hive.run_hive_cmd\")\n    def test_table_exists(self, run_command):\n        run_command.return_value = \"OK\"\n        returned = self.client.table_exists(\"mytable\")\n        self.assertFalse(returned)\n    \n        run_command.return_value = \"OK\\n\" \\\n                                   \"mytable\"\n        returned = self.client.table_exists(\"mytable\")\n        self.assertTrue(returned)\n    \n        # Issue #896 test case insensitivity\n        returned = self.client.table_exists(\"MyTable\")\n>       self.assertTrue(returned)",
            "\ntest/contrib/hive_test.py:111: AssertionError"
        ]
    ],
    "2.2.3": [
        [
            {
                "database": "default",
                "table": "mytable",
                "self": "<luigi.contrib.hive.HiveCommandClient object at 0x112caca30>"
            },
            {
                "stdout": "OK",
                "database": "default",
                "table": "mytable",
                "self": "<luigi.contrib.hive.HiveCommandClient object at 0x112caca30>"
            }
        ],
        [
            {
                "database": "default",
                "table": "MyTable",
                "self": "<luigi.contrib.hive.HiveCommandClient object at 0x112caca30>"
            },
            {
                "stdout": "OK\\nmytable",
                "database": "default",
                "table": "MyTable",
                "self": "<luigi.contrib.hive.HiveCommandClient object at 0x112caca30>"
            }
        ]
    ],
    "2.2.4": [
        [
            {
                "database": "str",
                "table": "str",
                "self": "HiveCommandClient"
            },
            {
                "stdout": "str",
                "database": "str",
                "table": "str",
                "self": "HiveCommandClient"
            }
        ],
        [
            {
                "database": "str",
                "table": "str",
                "self": "HiveCommandClient"
            },
            {
                "stdout": "str",
                "database": "str",
                "table": "str",
                "self": "HiveCommandClient"
            }
        ]
    ],
    "2.2.5": [
        [
            {
                "database": "default",
                "table": "mytable",
                "self": "<luigi.contrib.hive.HiveCommandClient object at 0x1048a9c40>"
            },
            {
                "stdout": "OK",
                "database": "default",
                "table": "mytable",
                "self": "<luigi.contrib.hive.HiveCommandClient object at 0x1048a9c40>"
            }
        ],
        [
            {
                "database": "default",
                "table": "MyTable",
                "self": "<luigi.contrib.hive.HiveCommandClient object at 0x1048a9c40>"
            },
            {
                "stdout": "OK\\nmytable",
                "database": "default",
                "table": "MyTable",
                "self": "<luigi.contrib.hive.HiveCommandClient object at 0x1048a9c40>"
            }
        ]
    ],
    "2.2.6": [
        [
            {
                "database": "str",
                "table": "str",
                "self": "HiveCommandClient"
            },
            {
                "stdout": "str",
                "database": "str",
                "table": "str",
                "self": "HiveCommandClient"
            }
        ],
        [
            {
                "database": "str",
                "table": "str",
                "self": "HiveCommandClient"
            },
            {
                "stdout": "str",
                "database": "str",
                "table": "str",
                "self": "HiveCommandClient"
            }
        ]
    ],
    "3.1.1": [
        "hive table_exists should be case insensitive?\n",
        "Fix #896: make table_exists case insensitive\n"
    ],
    "3.1.2": [
        "Any thoughts on this one?\\n\\nIn https://github.com/spotify/luigi/blob/master/luigi/contrib/hive.py#L141\\n(possibly here too, but we're not on CDH: https://github.com/spotify/luigi/blob/master/luigi/contrib/hive.py#L192)\\n\\nSometimes we have tables that are defined as capitalized, rather than lower case underscored names. These are easier to read in code if left capitalized, though hive is case insensitive, and will return them as lower case.\\n\\nE.g. when checking for an existing table table = 'FooBar', stdout will return with foobar and the test will fail\\n\\nThis wasn't an issue in older versions, which just checked for string \\\"does not exist\\\" or \\\"Table not found\\\" in stdout.\\n\\nWould be easy to fix using return stdout and table.lower() in stdout or return stdout and table.lower() in stdout.lower()\\n\\nLet me know your thoughts on this. I can supply a pull request if necessary.\\n\\nThanks,\\nLin.\n",
        "Check stdout against table.lower() to avoid case issues\n"
    ]
}