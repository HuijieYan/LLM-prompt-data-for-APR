{
    "pandas": [
        {
            "bugID": 34,
            "bitvector": {
                "1.3.1": 1,
                "1.3.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.1.2": 0,
                "2.2.3": 1,
                "2.2.4": 1,
                "2.2.5": 1,
                "2.2.6": 1,
                "2.1.1": 1,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n    from pandas.core.resample import date_range\n    from pandas import DatetimeIndex, Timestamp, lib, NaT, Series\n    from pandas.core.api import DataFrame\n    from pandas.tseries.frequencies import Day\n    from datetime import datetime\n    if not isinstance(ax, DatetimeIndex):\n        raise TypeError(\n            \"axis must be a DatetimeIndex, but got \"\n            f\"an instance of {type(ax).__name__}\"\n        )\n    \n    if len(ax) == 0:\n        binner = labels = DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n        return binner, Series([], dtype='int64'), labels\n    \n    freq = ax.freq or self.freq\n    binner = labels = date_range(\n        start=ax.min(),\n        end=ax.max(),\n        freq=freq,\n        tz=ax.tz,\n        name=ax.name,\n        ambiguous=\"infer\",\n        nonexistent=\"shift_forward\",\n    )\n    \n    unique_dates = binner.normalize().unique()\n    bins_values = [(ax >= date).sum() for date in unique_dates]\n    bins = Series(bins_values, index=unique_dates)\n    \n    if self.closed == \"right\":\n        labels = binner\n        if self.label == \"right\":\n            labels = labels[1:]\n    elif self.label == \"right\":\n        labels = labels[1:]\n    \n    if ax.hasnans:\n        binner = binner.insert(0, NaT)\n        labels = labels.insert(0, NaT)\n    \n    # if we end up with more labels than bins, adjust the labels\n    if len(bins) < len(labels):\n        labels = labels[:len(bins)]\n    \n    return binner, bins, labels"
        }
    ]
}