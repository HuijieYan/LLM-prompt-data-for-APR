{
    "1.1.1": "def _convert_key(self, key, is_setter: bool = False):\n    \n    # allow arbitrary setting\n    if is_setter:\n        return list(key)\n\n    for ax, i in zip(self.obj.axes, key):\n        if ax.is_integer():\n            if not is_integer(i):\n                raise ValueError(\n                    \"At based indexing on an integer index \"\n                    \"can only have integer indexers\"\n                )\n        else:\n            if is_integer(i) and not ax.holds_integer():\n                raise ValueError(\n                    \"At based indexing on an non-integer \"\n                    \"index can only have non-integer \"\n                    \"indexers\"\n                )\n    return key\n",
    "1.1.2": "Require they keys to be the same type as the index. (so we don't\nfallback)",
    "1.2.1": "@Appender(IndexingMixin.at.__doc__)\nclass _AtIndexer(_ScalarAccessIndexer)",
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/core/indexing.py",
    "1.3.2": null,
    "1.4.1": [
        "    @pytest.mark.parametrize(\n        \"vals\",\n        [\n            pd.date_range(\"2016-01-01\", periods=3),\n            pd.timedelta_range(\"1 Day\", periods=3),\n        ],\n    )\n    def test_lookups_datetimelike_values(self, vals):\n        # If we have datetime64 or timedelta64 values, make sure they are\n        #  wrappped correctly  GH#31163\n        ser = pd.Series(vals, index=range(3, 6))\n        ser.index = ser.index.astype(\"float64\")\n\n        expected = vals[1]\n\n        result = ser.index.get_value(ser, 4.0)\n        assert isinstance(result, type(expected)) and result == expected\n        result = ser.index.get_value(ser, 4)\n        assert isinstance(result, type(expected)) and result == expected\n\n        result = ser[4.0]\n        assert isinstance(result, type(expected)) and result == expected\n        result = ser[4]\n        assert isinstance(result, type(expected)) and result == expected\n\n        result = ser.loc[4.0]\n        assert isinstance(result, type(expected)) and result == expected\n        result = ser.loc[4]\n        assert isinstance(result, type(expected)) and result == expected\n\n        result = ser.at[4.0]\n        assert isinstance(result, type(expected)) and result == expected\n        # GH#31329 .at[4] should cast to 4.0, matching .loc behavior\n        result = ser.at[4]\n        assert isinstance(result, type(expected)) and result == expected\n\n        result = ser.iloc[1]\n        assert isinstance(result, type(expected)) and result == expected\n\n        result = ser.iat[1]\n        assert isinstance(result, type(expected)) and result == expected",
        "    @pytest.mark.parametrize(\n        \"vals\",\n        [\n            pd.date_range(\"2016-01-01\", periods=3),\n            pd.timedelta_range(\"1 Day\", periods=3),\n        ],\n    )\n    def test_lookups_datetimelike_values(self, vals):\n        # If we have datetime64 or timedelta64 values, make sure they are\n        #  wrappped correctly  GH#31163\n        ser = pd.Series(vals, index=range(3, 6))\n        ser.index = ser.index.astype(\"float64\")\n\n        expected = vals[1]\n\n        result = ser.index.get_value(ser, 4.0)\n        assert isinstance(result, type(expected)) and result == expected\n        result = ser.index.get_value(ser, 4)\n        assert isinstance(result, type(expected)) and result == expected\n\n        result = ser[4.0]\n        assert isinstance(result, type(expected)) and result == expected\n        result = ser[4]\n        assert isinstance(result, type(expected)) and result == expected\n\n        result = ser.loc[4.0]\n        assert isinstance(result, type(expected)) and result == expected\n        result = ser.loc[4]\n        assert isinstance(result, type(expected)) and result == expected\n\n        result = ser.at[4.0]\n        assert isinstance(result, type(expected)) and result == expected\n        # GH#31329 .at[4] should cast to 4.0, matching .loc behavior\n        result = ser.at[4]\n        assert isinstance(result, type(expected)) and result == expected\n\n        result = ser.iloc[1]\n        assert isinstance(result, type(expected)) and result == expected\n\n        result = ser.iat[1]\n        assert isinstance(result, type(expected)) and result == expected"
    ],
    "1.4.2": [
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/indexes/test_numeric.py",
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/indexes/test_numeric.py"
    ],
    "2.1.1": [
        [
            "E                   ValueError: At based indexing on an non-integer index can only have non-integer indexers"
        ],
        [
            "E                   ValueError: At based indexing on an non-integer index can only have non-integer indexers"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.indexes.test_numeric.TestFloat64Index object at 0x114480ca0>\nvals = DatetimeIndex(['2016-01-01', '2016-01-02', '2016-01-03'], dtype='datetime64[ns]', freq='D')\n\n    @pytest.mark.parametrize(\n        \"vals\",\n        [\n            pd.date_range(\"2016-01-01\", periods=3),\n            pd.timedelta_range(\"1 Day\", periods=3),\n        ],\n    )\n    def test_lookups_datetimelike_values(self, vals):\n        # If we have datetime64 or timedelta64 values, make sure they are\n        #  wrappped correctly  GH#31163\n        ser = pd.Series(vals, index=range(3, 6))\n        ser.index = ser.index.astype(\"float64\")\n    \n        expected = vals[1]\n    \n        result = ser.index.get_value(ser, 4.0)\n        assert isinstance(result, type(expected)) and result == expected\n        result = ser.index.get_value(ser, 4)\n        assert isinstance(result, type(expected)) and result == expected\n    \n        result = ser[4.0]\n        assert isinstance(result, type(expected)) and result == expected\n        result = ser[4]\n        assert isinstance(result, type(expected)) and result == expected\n    \n        result = ser.loc[4.0]\n        assert isinstance(result, type(expected)) and result == expected\n        result = ser.loc[4]\n        assert isinstance(result, type(expected)) and result == expected\n    \n        result = ser.at[4.0]\n        assert isinstance(result, type(expected)) and result == expected\n        # GH#31329 .at[4] should cast to 4.0, matching .loc behavior\n>       result = ser.at[4]\n\npandas/tests/indexes/test_numeric.py:429: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/indexing.py:2088: in __getitem__\n    key = self._convert_key(key)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pandas.core.indexing._AtIndexer object at 0x1145dda40>, key = (4,)\nis_setter = False\n\n    def _convert_key(self, key, is_setter: bool = False):\n        \"\"\"\n        Require they keys to be the same type as the index. (so we don't\n        fallback)\n        \"\"\"\n        # allow arbitrary setting\n        if is_setter:\n            return list(key)\n    \n        for ax, i in zip(self.obj.axes, key):\n            if ax.is_integer():\n                if not is_integer(i):\n                    raise ValueError(\n                        \"At based indexing on an integer index \"\n                        \"can only have integer indexers\"\n                    )\n            else:\n                if is_integer(i) and not ax.holds_integer():\n>                   raise ValueError(\n                        \"At based indexing on an non-integer \"\n                        \"index can only have non-integer \"\n                        \"indexers\"\n                    )",
            "\npandas/core/indexing.py:2128: ValueError"
        ],
        [
            "self = <pandas.tests.indexes.test_numeric.TestFloat64Index object at 0x1145e9520>\nvals = TimedeltaIndex(['1 days', '2 days', '3 days'], dtype='timedelta64[ns]', freq='D')\n\n    @pytest.mark.parametrize(\n        \"vals\",\n        [\n            pd.date_range(\"2016-01-01\", periods=3),\n            pd.timedelta_range(\"1 Day\", periods=3),\n        ],\n    )\n    def test_lookups_datetimelike_values(self, vals):\n        # If we have datetime64 or timedelta64 values, make sure they are\n        #  wrappped correctly  GH#31163\n        ser = pd.Series(vals, index=range(3, 6))\n        ser.index = ser.index.astype(\"float64\")\n    \n        expected = vals[1]\n    \n        result = ser.index.get_value(ser, 4.0)\n        assert isinstance(result, type(expected)) and result == expected\n        result = ser.index.get_value(ser, 4)\n        assert isinstance(result, type(expected)) and result == expected\n    \n        result = ser[4.0]\n        assert isinstance(result, type(expected)) and result == expected\n        result = ser[4]\n        assert isinstance(result, type(expected)) and result == expected\n    \n        result = ser.loc[4.0]\n        assert isinstance(result, type(expected)) and result == expected\n        result = ser.loc[4]\n        assert isinstance(result, type(expected)) and result == expected\n    \n        result = ser.at[4.0]\n        assert isinstance(result, type(expected)) and result == expected\n        # GH#31329 .at[4] should cast to 4.0, matching .loc behavior\n>       result = ser.at[4]\n\npandas/tests/indexes/test_numeric.py:429: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/indexing.py:2088: in __getitem__\n    key = self._convert_key(key)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pandas.core.indexing._AtIndexer object at 0x1145f7810>, key = (4,)\nis_setter = False\n\n    def _convert_key(self, key, is_setter: bool = False):\n        \"\"\"\n        Require they keys to be the same type as the index. (so we don't\n        fallback)\n        \"\"\"\n        # allow arbitrary setting\n        if is_setter:\n            return list(key)\n    \n        for ax, i in zip(self.obj.axes, key):\n            if ax.is_integer():\n                if not is_integer(i):\n                    raise ValueError(\n                        \"At based indexing on an integer index \"\n                        \"can only have integer indexers\"\n                    )\n            else:\n                if is_integer(i) and not ax.holds_integer():\n>                   raise ValueError(\n                        \"At based indexing on an non-integer \"\n                        \"index can only have non-integer \"\n                        \"indexers\"\n                    )",
            "\npandas/core/indexing.py:2128: ValueError"
        ]
    ],
    "2.1.3": [
        [
            {
                "is_setter": "False",
                "key": "(4.0,)",
                "self.obj": "3.0   2016-01-01\n4.0   2016-01-02\n5.0   2016-01-03\ndtype: datetime64[ns]",
                "self": "<pandas.core.indexing._AtIndexer object at 0x11d800860>"
            },
            {
                "ax": "Float64Index([3.0, 4.0, 5.0], dtype='float64')",
                "i": "4.0",
                "ax.is_integer": "<bound method Index.is_integer of Float64Index([3.0, 4.0, 5.0], dtype='float64')>",
                "ax.holds_integer": "<bound method Index.holds_integer of Float64Index([3.0, 4.0, 5.0], dtype='float64')>"
            }
        ],
        [
            {
                "is_setter": "False",
                "key": "(4.0,)",
                "self.obj": "3.0   1 days\n4.0   2 days\n5.0   3 days\ndtype: timedelta64[ns]",
                "self": "<pandas.core.indexing._AtIndexer object at 0x11d7eb9a0>"
            },
            {
                "ax": "Float64Index([3.0, 4.0, 5.0], dtype='float64')",
                "i": "4.0",
                "ax.is_integer": "<bound method Index.is_integer of Float64Index([3.0, 4.0, 5.0], dtype='float64')>",
                "ax.holds_integer": "<bound method Index.holds_integer of Float64Index([3.0, 4.0, 5.0], dtype='float64')>"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "is_setter": "bool",
                "key": "tuple",
                "self.obj": "Series",
                "self": "_AtIndexer"
            },
            {
                "ax": "Float64Index",
                "i": "float",
                "ax.is_integer": "method",
                "ax.holds_integer": "method"
            }
        ],
        [
            {
                "is_setter": "bool",
                "key": "tuple",
                "self.obj": "Series",
                "self": "_AtIndexer"
            },
            {
                "ax": "Float64Index",
                "i": "float",
                "ax.is_integer": "method",
                "ax.holds_integer": "method"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "is_setter": "False",
                "key": "(4.0,)",
                "self.obj": "3.0   2016-01-01\n4.0   2016-01-02\n5.0   2016-01-03\ndtype: datetime64[ns]",
                "self": "<pandas.core.indexing._AtIndexer object at 0x122e54a90>"
            },
            {
                "ax": "Float64Index([3.0, 4.0, 5.0], dtype='float64')",
                "i": "4.0",
                "ax.is_integer": "<bound method Index.is_integer of Float64Index([3.0, 4.0, 5.0], dtype='float64')>",
                "ax.holds_integer": "<bound method Index.holds_integer of Float64Index([3.0, 4.0, 5.0], dtype='float64')>",
                "ax.is_floating": "<bound method Index.is_floating of Float64Index([3.0, 4.0, 5.0], dtype='float64')>"
            }
        ],
        [
            {
                "is_setter": "False",
                "key": "(4,)",
                "self.obj": "3.0   2016-01-01\n4.0   2016-01-02\n5.0   2016-01-03\ndtype: datetime64[ns]",
                "self": "<pandas.core.indexing._AtIndexer object at 0x122e54a90>"
            },
            {
                "ax": "Float64Index([3.0, 4.0, 5.0], dtype='float64')",
                "i": "4",
                "ax.is_integer": "<bound method Index.is_integer of Float64Index([3.0, 4.0, 5.0], dtype='float64')>",
                "ax.holds_integer": "<bound method Index.holds_integer of Float64Index([3.0, 4.0, 5.0], dtype='float64')>",
                "ax.is_floating": "<bound method Index.is_floating of Float64Index([3.0, 4.0, 5.0], dtype='float64')>"
            }
        ],
        [
            {
                "is_setter": "False",
                "key": "(4.0,)",
                "self.obj": "3.0   1 days\n4.0   2 days\n5.0   3 days\ndtype: timedelta64[ns]",
                "self": "<pandas.core.indexing._AtIndexer object at 0x122f28ea0>"
            },
            {
                "ax": "Float64Index([3.0, 4.0, 5.0], dtype='float64')",
                "i": "4.0",
                "ax.is_integer": "<bound method Index.is_integer of Float64Index([3.0, 4.0, 5.0], dtype='float64')>",
                "ax.holds_integer": "<bound method Index.holds_integer of Float64Index([3.0, 4.0, 5.0], dtype='float64')>",
                "ax.is_floating": "<bound method Index.is_floating of Float64Index([3.0, 4.0, 5.0], dtype='float64')>"
            }
        ],
        [
            {
                "is_setter": "False",
                "key": "(4,)",
                "self.obj": "3.0   1 days\n4.0   2 days\n5.0   3 days\ndtype: timedelta64[ns]",
                "self": "<pandas.core.indexing._AtIndexer object at 0x122f28ea0>"
            },
            {
                "ax": "Float64Index([3.0, 4.0, 5.0], dtype='float64')",
                "i": "4",
                "ax.is_integer": "<bound method Index.is_integer of Float64Index([3.0, 4.0, 5.0], dtype='float64')>",
                "ax.holds_integer": "<bound method Index.holds_integer of Float64Index([3.0, 4.0, 5.0], dtype='float64')>",
                "ax.is_floating": "<bound method Index.is_floating of Float64Index([3.0, 4.0, 5.0], dtype='float64')>"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "is_setter": "bool",
                "key": "tuple",
                "self.obj": "Series",
                "self": "_AtIndexer"
            },
            {
                "ax": "Float64Index",
                "i": "float",
                "ax.is_integer": "method",
                "ax.holds_integer": "method",
                "ax.is_floating": "method"
            }
        ],
        [
            {
                "is_setter": "bool",
                "key": "tuple",
                "self.obj": "Series",
                "self": "_AtIndexer"
            },
            {
                "ax": "Float64Index",
                "i": "int",
                "ax.is_integer": "method",
                "ax.holds_integer": "method",
                "ax.is_floating": "method"
            }
        ],
        [
            {
                "is_setter": "bool",
                "key": "tuple",
                "self.obj": "Series",
                "self": "_AtIndexer"
            },
            {
                "ax": "Float64Index",
                "i": "float",
                "ax.is_integer": "method",
                "ax.holds_integer": "method",
                "ax.is_floating": "method"
            }
        ],
        [
            {
                "is_setter": "bool",
                "key": "tuple",
                "self.obj": "Series",
                "self": "_AtIndexer"
            },
            {
                "ax": "Float64Index",
                "i": "int",
                "ax.is_integer": "method",
                "ax.holds_integer": "method",
                "ax.is_floating": "method"
            }
        ]
    ],
    "3.1.1": [
        "BUG: corner cases in DTI.get_value, Float64Index.get_value\n"
    ],
    "3.1.2": [
        "Series lookups are affected for the Float64Index case.\n"
    ]
}