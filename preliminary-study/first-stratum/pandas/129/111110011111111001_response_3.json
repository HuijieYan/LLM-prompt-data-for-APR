{
    "pandas": [
        {
            "bugID": 129,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1302,
            "file_name": "pandas/core/arrays/datetimelike.py",
            "replace_code": "def __rsub__(self, other):\n    from pandas.core.arrays import DatetimeArray\n    if is_datetime64_any_dtype(other) and is_timedelta64_dtype(self.dtype):\n        from pandas.core.arrays import DatetimeArray\n    \n        if not isinstance(other, DatetimeArray):\n            other_values = np.array([other], dtype='datetime64[ns]')\n            other = DatetimeArray(other_values)\n        return other - self\n    elif is_datetime64_any_dtype(self.dtype) and isinstance(other, (DatetimeArray, np.datetime64)):\n        if hasattr(other, \"dtype\") and not is_datetime64_any_dtype(other.dtype):\n            raise TypeError(\n                \"cannot subtract {cls} from {typ}\".format(\n                    cls=type(self).__name__, typ=type(other).__name__\n                )\n            )\n        else:\n            return other - self\n    elif is_period_dtype(self.dtype) and is_timedelta64_dtype(other.dtype):\n        raise TypeError(\n            \"cannot subtract {cls} from {dtype}\".format(\n                cls=type(self).__name__, dtype=other.dtype\n            )\n        )\n    elif is_timedelta64_dtype(self.dtype):\n        if lib.is_scalar(other) or is_scalar(other):\n            return -(self - other)\n        return (-self) + other\n    \n    return -(self - other)"
        }
    ]
}