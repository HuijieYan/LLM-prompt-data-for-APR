{
    "pandas": [
        {
            "bugID": 129,
            "bitvector": {
                "1.3.1": 1,
                "1.3.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.1.2": 0,
                "2.2.3": 0,
                "2.2.4": 1,
                "2.2.5": 1,
                "2.2.6": 0,
                "2.1.1": 1,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "start_line": 1302,
            "file_name": "pandas/core/arrays/datetimelike.py",
            "replace_code": "def __rsub__(self, other):\n    import numpy as np\n    from pandas.core.arrays import DatetimeArray\n    if np.is_datetime64_any_dtype(other) and np.is_timedelta64_dtype(self.dtype):\n        # ndarray[datetime64] cannot be subtracted from self, so\n        # we need to wrap in DatetimeArray/Index and flip the operation\n        if not isinstance(other, DatetimeArray):\n            other = DatetimeArray(other)\n        return other - self\n    elif (\n        np.is_datetime64_any_dtype(self.dtype)\n        and hasattr(other, \"dtype\")\n        and not np.is_datetime64_any_dtype(other.dtype)\n    ):\n        # GH#19959 datetime - datetime is well-defined as timedelta,\n        raise TypeError(\n            \"cannot subtract {typ} from {cls}\".format(\n                cls=type(self).__name__, typ=type(other).__name__\n            )\n        )\n    elif np.is_timedelta64_dtype(self.dtype):\n        if isinstance(other, int) or np.issubdtype(type(other), np.integer):  # check if other is an integer\n            return -(self - other)\n        return (-self) + other\n    return -(self - other)"
        }
    ]
}