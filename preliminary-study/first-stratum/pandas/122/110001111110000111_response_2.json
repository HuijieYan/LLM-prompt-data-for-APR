{
    "pandas": [
        {
            "bugID": 122,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 1386,
            "file_name": "pandas/core/internals/managers.py",
            "replace_code": "def equals(self, other):\n    self_axis = self.axes\n    other_axis = other.axes\n    if len(self_axis) != len(other_axis):\n        return False\n    if not all(ax1.equals(ax2) for ax1, ax2 in zip(self_axis, other_axis)):\n        return False\n    \n    # Consolidate blocks inplace before comparison\n    self._consolidate_inplace()\n    other._consolidate_inplace()\n    \n    if len(self._mgr.blocks) != len(other.blocks):\n        return False\n\n    # Used to canonicalize block order for sorting\n    def canonicalize(block):\n        return (block.values, block.index, block.columns)\n\n    self_blocks = sorted(self.blocks, key=canonicalize)\n    other_blocks = sorted(other.blocks, key=canonicalize)\n    return all(\n        block.values.equals(oblock.values) and\n        block.index.equals(oblock.index) and\n        block.columns.equals(oblock.columns)\n        for block, oblock in zip(self_blocks, other_blocks)\n    )",
            "imports": []
        }
    ]
}