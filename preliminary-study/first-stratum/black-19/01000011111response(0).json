{
    "black": [
        {
            "bugID": 19,
            "bitvector": {
                "1.3.2": 0,
                "1.2.4": 1,
                "1.2.1": 0,
                "1.3.4": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    from typing import Tuple\n    before = 0\n    depth = current_line.depth\n    \n    if current_line.leaves:\n        # Consume the first leaf's extra newlines.\n        first_leaf = current_line.leaves[0]\n        before = min(first_leaf.prefix.count(\"\\n\"), 1)\n        first_leaf.prefix = \"\"\n    \n    while self.previous_defs and self.previous_defs[-1] >= depth:\n        self.previous_defs.pop()\n        before = 1 if depth else 2\n    \n    is_decorator = current_line.is_decorator\n    if is_decorator or current_line.is_def or current_line.is_class:\n        if not is_decorator:\n            self.previous_defs.append(depth)\n        if self.previous_line is None or (self.previous_line and self.previous_line.is_decorator):\n            return 0, 0\n        \n        newlines = 2 if current_line.depth else 1\n        return newlines, 0\n    \n    if current_line.is_flow_control:\n        return before, 1\n    \n    if (\n        self.previous_line\n        and self.previous_line.is_import\n        and not current_line.is_import\n        and depth == self.previous_line.depth\n    ):\n        return max(before, 1), 0\n    \n    if (\n        self.previous_line\n        and self.previous_line.is_yield\n        and (not current_line.is_yield or depth != self.previous_line.depth)\n    ):\n        return max(before, 1), 0\n    \n    return before, 0"
        }
    ]
}