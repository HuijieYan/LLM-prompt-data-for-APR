{
    "keras:25": {
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/keras/keras/applications/imagenet_utils.py": {
            "buggy_functions": [
                {
                    "function_name": "_preprocess_numpy_input",
                    "function_code": "def _preprocess_numpy_input(x, data_format, mode):\n    \"\"\"Preprocesses a Numpy array encoding a batch of images.\n\n    # Arguments\n        x: Input array, 3D or 4D.\n        data_format: Data format of the image array.\n        mode: One of \"caffe\", \"tf\" or \"torch\".\n            - caffe: will convert the images from RGB to BGR,\n                then will zero-center each color channel with\n                respect to the ImageNet dataset,\n                without scaling.\n            - tf: will scale pixels between -1 and 1,\n                sample-wise.\n            - torch: will scale pixels between 0 and 1 and then\n                will normalize each channel with respect to the\n                ImageNet dataset.\n\n    # Returns\n        Preprocessed Numpy array.\n    \"\"\"\n    if mode == 'tf':\n        x /= 127.5\n        x -= 1.\n        return x\n\n    if mode == 'torch':\n        x /= 255.\n        mean = [0.485, 0.456, 0.406]\n        std = [0.229, 0.224, 0.225]\n    else:\n        if data_format == 'channels_first':\n            # 'RGB'->'BGR'\n            if x.ndim == 3:\n                x = x[::-1, ...]\n            else:\n                x = x[:, ::-1, ...]\n        else:\n            # 'RGB'->'BGR'\n            x = x[..., ::-1]\n        mean = [103.939, 116.779, 123.68]\n        std = None\n\n    # Zero-center by mean pixel\n    if data_format == 'channels_first':\n        if x.ndim == 3:\n            x[0, :, :] -= mean[0]\n            x[1, :, :] -= mean[1]\n            x[2, :, :] -= mean[2]\n            if std is not None:\n                x[0, :, :] /= std[0]\n                x[1, :, :] /= std[1]\n                x[2, :, :] /= std[2]\n        else:\n            x[:, 0, :, :] -= mean[0]\n            x[:, 1, :, :] -= mean[1]\n            x[:, 2, :, :] -= mean[2]\n            if std is not None:\n                x[:, 0, :, :] /= std[0]\n                x[:, 1, :, :] /= std[1]\n                x[:, 2, :, :] /= std[2]\n    else:\n        x[..., 0] -= mean[0]\n        x[..., 1] -= mean[1]\n        x[..., 2] -= mean[2]\n        if std is not None:\n            x[..., 0] /= std[0]\n            x[..., 1] /= std[1]\n            x[..., 2] /= std[2]\n    return x\n",
                    "decorators": [],
                    "start_line": 21,
                    "variables": {
                        "mode": [
                            41,
                            46
                        ],
                        "x": [
                            42,
                            43,
                            44,
                            47,
                            53,
                            54,
                            56,
                            59,
                            65,
                            66,
                            67,
                            68,
                            70,
                            71,
                            72,
                            74,
                            75,
                            76,
                            78,
                            79,
                            80,
                            82,
                            83,
                            84,
                            86,
                            87,
                            88,
                            89
                        ],
                        "mean": [
                            66,
                            67,
                            68,
                            74,
                            75,
                            76,
                            48,
                            82,
                            83,
                            84,
                            60
                        ],
                        "std": [
                            69,
                            70,
                            71,
                            72,
                            77,
                            78,
                            79,
                            80,
                            49,
                            85,
                            86,
                            87,
                            88,
                            61
                        ],
                        "data_format": [
                            64,
                            51
                        ],
                        "x.ndim": [
                            65,
                            53
                        ]
                    },
                    "filtered_variables": {
                        "mode": [
                            41,
                            46
                        ],
                        "x": [
                            42,
                            43,
                            44,
                            47,
                            53,
                            54,
                            56,
                            59,
                            65,
                            66,
                            67,
                            68,
                            70,
                            71,
                            72,
                            74,
                            75,
                            76,
                            78,
                            79,
                            80,
                            82,
                            83,
                            84,
                            86,
                            87,
                            88,
                            89
                        ],
                        "mean": [
                            66,
                            67,
                            68,
                            74,
                            75,
                            76,
                            48,
                            82,
                            83,
                            84,
                            60
                        ],
                        "std": [
                            69,
                            70,
                            71,
                            72,
                            77,
                            78,
                            79,
                            80,
                            49,
                            85,
                            86,
                            87,
                            88,
                            61
                        ],
                        "data_format": [
                            64,
                            51
                        ],
                        "x.ndim": [
                            65,
                            53
                        ]
                    },
                    "diff_line_number": 40,
                    "class_data": null
                }
            ],
            "inscope_functions": [
                "_preprocess_numpy_input(x, data_format, mode)",
                "_preprocess_symbolic_input(x, data_format, mode)",
                "preprocess_input(x, data_format=None, mode='caffe')",
                "decode_predictions(preds, top=5)",
                "_obtain_input_shape(input_shape, default_size, min_size, data_format, require_flatten, weights=None)"
            ],
            "variables_in_file": {
                "CLASS_INDEX": [
                    216,
                    212,
                    206,
                    14
                ],
                "CLASS_INDEX_PATH": [
                    208,
                    15
                ],
                "_IMAGENET_MEAN": [
                    136,
                    137,
                    140,
                    141,
                    143,
                    18
                ],
                "mode": [
                    41,
                    46,
                    178,
                    114,
                    181,
                    119
                ],
                "x": [
                    129,
                    132,
                    140,
                    141,
                    143,
                    145,
                    146,
                    42,
                    43,
                    44,
                    47,
                    177,
                    178,
                    180,
                    53,
                    54,
                    56,
                    59,
                    65,
                    66,
                    67,
                    68,
                    70,
                    71,
                    72,
                    74,
                    75,
                    76,
                    78,
                    79,
                    80,
                    82,
                    83,
                    84,
                    86,
                    87,
                    88,
                    89,
                    217,
                    115,
                    116,
                    117,
                    120,
                    126,
                    127
                ],
                "mean": [
                    66,
                    67,
                    68,
                    133,
                    137,
                    74,
                    75,
                    76,
                    48,
                    82,
                    83,
                    84,
                    121,
                    60
                ],
                "std": [
                    69,
                    70,
                    71,
                    72,
                    134,
                    77,
                    78,
                    79,
                    80,
                    49,
                    144,
                    145,
                    85,
                    86,
                    87,
                    88,
                    122,
                    61
                ],
                "data_format": [
                    64,
                    264,
                    172,
                    141,
                    173,
                    143,
                    174,
                    175,
                    178,
                    51,
                    180,
                    277,
                    307,
                    249,
                    124
                ],
                "x.ndim": [
                    65,
                    53
                ],
                "K.ndim": [
                    126
                ],
                "K": [
                    137,
                    140,
                    141,
                    173,
                    143,
                    126
                ],
                "K.constant": [
                    137
                ],
                "np.array": [
                    137
                ],
                "np": [
                    137,
                    177
                ],
                "K.dtype": [
                    140,
                    141
                ],
                "K.bias_add": [
                    141,
                    143
                ],
                "K.cast": [
                    141
                ],
                "K.image_data_format": [
                    173
                ],
                "ValueError": [
                    293,
                    296,
                    202,
                    300,
                    271,
                    175,
                    280,
                    313,
                    283,
                    287
                ],
                "str": [
                    288,
                    289,
                    261,
                    297,
                    205,
                    301,
                    175,
                    302,
                    274,
                    216,
                    315,
                    284,
                    254
                ],
                "isinstance": [
                    177
                ],
                "np.ndarray": [
                    177
                ],
                "_preprocess_numpy_input": [
                    178
                ],
                "_preprocess_symbolic_input": [
                    180
                ],
                "len": [
                    248,
                    201,
                    292,
                    279
                ],
                "preds.shape": [
                    201,
                    205
                ],
                "preds": [
                    201,
                    205,
                    214
                ],
                "fpath": [
                    211,
                    207
                ],
                "get_file": [
                    207
                ],
                "open": [
                    211
                ],
                "f": [
                    211,
                    212
                ],
                "json.load": [
                    212
                ],
                "json": [
                    212
                ],
                "results": [
                    218,
                    219,
                    213
                ],
                "pred": [
                    216,
                    214,
                    215
                ],
                "top_indices": [
                    216,
                    215
                ],
                "pred.argsort": [
                    215
                ],
                "top": [
                    215
                ],
                "result": [
                    216,
                    217,
                    218
                ],
                "tuple": [
                    216
                ],
                "i": [
                    216
                ],
                "result.sort": [
                    217
                ],
                "results.append": [
                    218
                ],
                "weights": [
                    248,
                    282,
                    268,
                    295
                ],
                "input_shape": [
                    257,
                    261,
                    262,
                    269,
                    270,
                    276,
                    278,
                    279,
                    282,
                    284,
                    285,
                    286,
                    289,
                    291,
                    292,
                    295,
                    297,
                    298,
                    299,
                    302,
                    305,
                    308,
                    310,
                    312,
                    315,
                    316,
                    248,
                    250,
                    254,
                    255
                ],
                "warnings.warn": [
                    258,
                    251
                ],
                "warnings": [
                    258,
                    251
                ],
                "default_shape": [
                    262,
                    265,
                    267,
                    270,
                    305,
                    274,
                    275,
                    255
                ],
                "default_size": [
                    265,
                    267,
                    262,
                    255
                ],
                "require_flatten": [
                    304,
                    268,
                    311
                ],
                "min_size": [
                    288,
                    298,
                    299,
                    301,
                    285,
                    286
                ]
            },
            "filtered_variables_in_file": {
                "CLASS_INDEX": [
                    216,
                    212,
                    206,
                    14
                ],
                "CLASS_INDEX_PATH": [
                    208,
                    15
                ],
                "_IMAGENET_MEAN": [
                    136,
                    137,
                    140,
                    141,
                    143,
                    18
                ],
                "mode": [
                    41,
                    46,
                    178,
                    114,
                    181,
                    119
                ],
                "x": [
                    129,
                    132,
                    140,
                    141,
                    143,
                    145,
                    146,
                    42,
                    43,
                    44,
                    47,
                    177,
                    178,
                    180,
                    53,
                    54,
                    56,
                    59,
                    65,
                    66,
                    67,
                    68,
                    70,
                    71,
                    72,
                    74,
                    75,
                    76,
                    78,
                    79,
                    80,
                    82,
                    83,
                    84,
                    86,
                    87,
                    88,
                    89,
                    217,
                    115,
                    116,
                    117,
                    120,
                    126,
                    127
                ],
                "mean": [
                    66,
                    67,
                    68,
                    133,
                    137,
                    74,
                    75,
                    76,
                    48,
                    82,
                    83,
                    84,
                    121,
                    60
                ],
                "std": [
                    69,
                    70,
                    71,
                    72,
                    134,
                    77,
                    78,
                    79,
                    80,
                    49,
                    144,
                    145,
                    85,
                    86,
                    87,
                    88,
                    122,
                    61
                ],
                "data_format": [
                    64,
                    264,
                    172,
                    141,
                    173,
                    143,
                    174,
                    175,
                    178,
                    51,
                    180,
                    277,
                    307,
                    249,
                    124
                ],
                "x.ndim": [
                    65,
                    53
                ],
                "K.ndim": [
                    126
                ],
                "K": [
                    137,
                    140,
                    141,
                    173,
                    143,
                    126
                ],
                "K.constant": [
                    137
                ],
                "np.array": [
                    137
                ],
                "np": [
                    137,
                    177
                ],
                "K.dtype": [
                    140,
                    141
                ],
                "K.bias_add": [
                    141,
                    143
                ],
                "K.cast": [
                    141
                ],
                "K.image_data_format": [
                    173
                ],
                "ValueError": [
                    293,
                    296,
                    202,
                    300,
                    271,
                    175,
                    280,
                    313,
                    283,
                    287
                ],
                "str": [
                    288,
                    289,
                    261,
                    297,
                    205,
                    301,
                    175,
                    302,
                    274,
                    216,
                    315,
                    284,
                    254
                ],
                "isinstance": [
                    177
                ],
                "np.ndarray": [
                    177
                ],
                "_preprocess_numpy_input": [
                    178
                ],
                "_preprocess_symbolic_input": [
                    180
                ],
                "len": [
                    248,
                    201,
                    292,
                    279
                ],
                "preds.shape": [
                    201,
                    205
                ],
                "preds": [
                    201,
                    205,
                    214
                ],
                "fpath": [
                    211,
                    207
                ],
                "get_file": [
                    207
                ],
                "open": [
                    211
                ],
                "f": [
                    211,
                    212
                ],
                "json.load": [
                    212
                ],
                "json": [
                    212
                ],
                "results": [
                    218,
                    219,
                    213
                ],
                "pred": [
                    216,
                    214,
                    215
                ],
                "top_indices": [
                    216,
                    215
                ],
                "pred.argsort": [
                    215
                ],
                "top": [
                    215
                ],
                "result": [
                    216,
                    217,
                    218
                ],
                "tuple": [
                    216
                ],
                "i": [
                    216
                ],
                "result.sort": [
                    217
                ],
                "results.append": [
                    218
                ],
                "weights": [
                    248,
                    282,
                    268,
                    295
                ],
                "input_shape": [
                    257,
                    261,
                    262,
                    269,
                    270,
                    276,
                    278,
                    279,
                    282,
                    284,
                    285,
                    286,
                    289,
                    291,
                    292,
                    295,
                    297,
                    298,
                    299,
                    302,
                    305,
                    308,
                    310,
                    312,
                    315,
                    316,
                    248,
                    250,
                    254,
                    255
                ],
                "warnings.warn": [
                    258,
                    251
                ],
                "warnings": [
                    258,
                    251
                ],
                "default_shape": [
                    262,
                    265,
                    267,
                    270,
                    305,
                    274,
                    275,
                    255
                ],
                "default_size": [
                    265,
                    267,
                    262,
                    255
                ],
                "require_flatten": [
                    304,
                    268,
                    311
                ],
                "min_size": [
                    288,
                    298,
                    299,
                    301,
                    285,
                    286
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/keras/tests/keras/applications/imagenet_utils_test.py",
                "test_function": "test_preprocess_input",
                "test_function_code": "def test_preprocess_input():\n    # Test image batch with float and int image input\n    x = np.random.uniform(0, 255, (2, 10, 10, 3))\n    xint = x.astype('int32')\n    assert utils.preprocess_input(x).shape == x.shape\n    assert utils.preprocess_input(xint).shape == xint.shape\n\n    out1 = utils.preprocess_input(x, 'channels_last')\n    out1int = utils.preprocess_input(xint, 'channels_last')\n    out2 = utils.preprocess_input(np.transpose(x, (0, 3, 1, 2)),\n                                  'channels_first')\n    out2int = utils.preprocess_input(np.transpose(xint, (0, 3, 1, 2)),\n                                     'channels_first')\n    assert_allclose(out1, out2.transpose(0, 2, 3, 1))\n    assert_allclose(out1int, out2int.transpose(0, 2, 3, 1))\n\n    # Test single image\n    x = np.random.uniform(0, 255, (10, 10, 3))\n    xint = x.astype('int32')\n    assert utils.preprocess_input(x).shape == x.shape\n    assert utils.preprocess_input(xint).shape == xint.shape\n\n    out1 = utils.preprocess_input(x, 'channels_last')\n    out1int = utils.preprocess_input(xint, 'channels_last')\n    out2 = utils.preprocess_input(np.transpose(x, (2, 0, 1)),\n                                  'channels_first')\n    out2int = utils.preprocess_input(np.transpose(xint, (2, 0, 1)),\n                                     'channels_first')\n    assert_allclose(out1, out2.transpose(1, 2, 0))\n    assert_allclose(out1int, out2int.transpose(1, 2, 0))",
                "test_error": "numpy.core._exceptions.UFuncTypeError: Cannot cast ufunc 'subtract' output from dtype('float64') to dtype('int32') with casting rule 'same_kind'",
                "full_test_error": "def test_preprocess_input():\n        # Test image batch with float and int image input\n        x = np.random.uniform(0, 255, (2, 10, 10, 3))\n        xint = x.astype('int32')\n        assert utils.preprocess_input(x).shape == x.shape\n>       assert utils.preprocess_input(xint).shape == xint.shape\n\ntests/keras/applications/imagenet_utils_test.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nkeras/applications/imagenet_utils.py:178: in preprocess_input\n    return _preprocess_numpy_input(x, data_format=data_format, mode=mode)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nx = array([[[[223, 216, 158],\n         [166, 102,  99],\n         [  0,  92, 182],\n         [206, 201, 248],\n         [  4,...         [181, 113, 132],\n         [ 64, 219,  53],\n         [231,  67, 114],\n         [ 31, 157, 179]]]], dtype=int32)\ndata_format = 'channels_last', mode = 'caffe'\n\n    def _preprocess_numpy_input(x, data_format, mode):\n        \"\"\"Preprocesses a Numpy array encoding a batch of images.\n    \n        # Arguments\n            x: Input array, 3D or 4D.\n            data_format: Data format of the image array.\n            mode: One of \"caffe\", \"tf\" or \"torch\".\n                - caffe: will convert the images from RGB to BGR,\n                    then will zero-center each color channel with\n                    respect to the ImageNet dataset,\n                    without scaling.\n                - tf: will scale pixels between -1 and 1,\n                    sample-wise.\n                - torch: will scale pixels between 0 and 1 and then\n                    will normalize each channel with respect to the\n                    ImageNet dataset.\n    \n        # Returns\n            Preprocessed Numpy array.\n        \"\"\"\n        if mode == 'tf':\n            x /= 127.5\n            x -= 1.\n            return x\n    \n        if mode == 'torch':\n            x /= 255.\n            mean = [0.485, 0.456, 0.406]\n            std = [0.229, 0.224, 0.225]\n        else:\n            if data_format == 'channels_first':\n                # 'RGB'->'BGR'\n                if x.ndim == 3:\n                    x = x[::-1, ...]\n                else:\n                    x = x[:, ::-1, ...]\n            else:\n                # 'RGB'->'BGR'\n                x = x[..., ::-1]\n            mean = [103.939, 116.779, 123.68]\n            std = None\n    \n        # Zero-center by mean pixel\n        if data_format == 'channels_first':\n            if x.ndim == 3:\n                x[0, :, :] -= mean[0]\n                x[1, :, :] -= mean[1]\n                x[2, :, :] -= mean[2]\n                if std is not None:\n                    x[0, :, :] /= std[0]\n                    x[1, :, :] /= std[1]\n                    x[2, :, :] /= std[2]\n            else:\n                x[:, 0, :, :] -= mean[0]\n                x[:, 1, :, :] -= mean[1]\n                x[:, 2, :, :] -= mean[2]\n                if std is not None:\n                    x[:, 0, :, :] /= std[0]\n                    x[:, 1, :, :] /= std[1]\n                    x[:, 2, :, :] /= std[2]\n        else:\n>           x[..., 0] -= mean[0]\nE           numpy.core._exceptions.UFuncTypeError: Cannot cast ufunc 'subtract' output from dtype('float64') to dtype('int32') with casting rule 'same_kind'\n\nkeras/applications/imagenet_utils.py:82: UFuncTypeError",
                "traceback": "keras/applications/imagenet_utils.py:178: in preprocess_input\n    return _preprocess_numpy_input(x, data_format=data_format, mode=mode)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nx = array([[[[223, 216, 158],\n         [166, 102,  99],\n         [  0,  92, 182],\n         [206, 201, 248],\n         [  4,...         [181, 113, 132],\n         [ 64, 219,  53],\n         [231,  67, 114],\n         [ 31, 157, 179]]]], dtype=int32)\ndata_format = 'channels_last', mode = 'caffe'\n\n    def _preprocess_numpy_input(x, data_format, mode):\n        \"\"\"Preprocesses a Numpy array encoding a batch of images.\n    \n        # Arguments\n            x: Input array, 3D or 4D.\n            data_format: Data format of the image array.\n            mode: One of \"caffe\", \"tf\" or \"torch\".\n                - caffe: will convert the images from RGB to BGR,\n                    then will zero-center each color channel with\n                    respect to the ImageNet dataset,\n                    without scaling.\n                - tf: will scale pixels between -1 and 1,\n                    sample-wise.\n                - torch: will scale pixels between 0 and 1 and then\n                    will normalize each channel with respect to the\n                    ImageNet dataset.\n    \n        # Returns\n            Preprocessed Numpy array.\n        \"\"\"\n        if mode == 'tf':\n            x /= 127.5\n            x -= 1.\n            return x\n    \n        if mode == 'torch':\n            x /= 255.\n            mean = [0.485, 0.456, 0.406]\n            std = [0.229, 0.224, 0.225]\n        else:\n            if data_format == 'channels_first':\n                # 'RGB'->'BGR'\n                if x.ndim == 3:\n                    x = x[::-1, ...]\n                else:\n                    x = x[:, ::-1, ...]\n            else:\n                # 'RGB'->'BGR'\n                x = x[..., ::-1]\n            mean = [103.939, 116.779, 123.68]\n            std = None\n    \n        # Zero-center by mean pixel\n        if data_format == 'channels_first':\n            if x.ndim == 3:\n                x[0, :, :] -= mean[0]\n                x[1, :, :] -= mean[1]\n                x[2, :, :] -= mean[2]\n                if std is not None:\n                    x[0, :, :] /= std[0]\n                    x[1, :, :] /= std[1]\n                    x[2, :, :] /= std[2]\n            else:\n                x[:, 0, :, :] -= mean[0]\n                x[:, 1, :, :] -= mean[1]\n                x[:, 2, :, :] -= mean[2]\n                if std is not None:\n                    x[:, 0, :, :] /= std[0]\n                    x[:, 1, :, :] /= std[1]\n                    x[:, 2, :, :] /= std[2]\n        else:\n>           x[..., 0] -= mean[0]\nE           numpy.core._exceptions.UFuncTypeError: Cannot cast ufunc 'subtract' output from dtype('float64') to dtype('int32') with casting rule 'same_kind'\n\nkeras/applications/imagenet_utils.py:82: UFuncTypeError",
                "test_function_decorators": []
            }
        ]
    }
}