{
    "luigi:25": {
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/luigi/luigi/contrib/redshift.py": {
            "buggy_functions": [
                {
                    "function_name": "run",
                    "function_code": "    def run(self):\n        \"\"\"\n        If the target table doesn't exist, self.create_table\n        will be called to attempt to create the table.\n        \"\"\"\n        if not (self.table):\n            raise Exception(\"table need to be specified\")\n\n        path = self.s3_load_path()\n        connection = self.output().connect()\n        if not self.does_table_exist(connection):\n            # try creating table\n            logger.info(\"Creating table %s\", self.table)\n            connection.reset()\n            self.create_table(connection)\n        elif self.do_truncate_table():\n            logger.info(\"Truncating table %s\", self.table)\n            self.truncate_table(connection)\n\n        logger.info(\"Inserting file: %s\", path)\n        cursor = connection.cursor()\n        self.init_copy(connection)\n        self.copy(cursor, path)\n        self.output().touch(connection)\n        connection.commit()\n\n        # commit and clean up\n        connection.close()\n",
                    "decorators": [],
                    "start_line": 158,
                    "variables": {
                        "self.table": [
                            170,
                            163,
                            174
                        ],
                        "self": [
                            163,
                            166,
                            167,
                            168,
                            170,
                            172,
                            173,
                            174,
                            175,
                            179,
                            180,
                            181
                        ],
                        "Exception": [
                            164
                        ],
                        "path": [
                            177,
                            180,
                            166
                        ],
                        "self.s3_load_path": [
                            166
                        ],
                        "connection": [
                            167,
                            168,
                            171,
                            172,
                            175,
                            178,
                            179,
                            181,
                            182,
                            185
                        ],
                        "connect": [
                            167
                        ],
                        "self.output": [
                            181,
                            167
                        ],
                        "self.does_table_exist": [
                            168
                        ],
                        "logger.info": [
                            177,
                            170,
                            174
                        ],
                        "logger": [
                            177,
                            170,
                            174
                        ],
                        "connection.reset": [
                            171
                        ],
                        "self.create_table": [
                            172
                        ],
                        "self.do_truncate_table": [
                            173
                        ],
                        "self.truncate_table": [
                            175
                        ],
                        "cursor": [
                            178,
                            180
                        ],
                        "connection.cursor": [
                            178
                        ],
                        "self.init_copy": [
                            179
                        ],
                        "self.copy": [
                            180
                        ],
                        "touch": [
                            181
                        ],
                        "connection.commit": [
                            182
                        ],
                        "connection.close": [
                            185
                        ]
                    },
                    "filtered_variables": {
                        "self.table": [
                            170,
                            163,
                            174
                        ],
                        "self": [
                            163,
                            166,
                            167,
                            168,
                            170,
                            172,
                            173,
                            174,
                            175,
                            179,
                            180,
                            181
                        ],
                        "Exception": [
                            164
                        ],
                        "path": [
                            177,
                            180,
                            166
                        ],
                        "self.s3_load_path": [
                            166
                        ],
                        "connection": [
                            167,
                            168,
                            171,
                            172,
                            175,
                            178,
                            179,
                            181,
                            182,
                            185
                        ],
                        "connect": [
                            167
                        ],
                        "self.output": [
                            181,
                            167
                        ],
                        "self.does_table_exist": [
                            168
                        ],
                        "logger.info": [
                            177,
                            170,
                            174
                        ],
                        "logger": [
                            177,
                            170,
                            174
                        ],
                        "connection.reset": [
                            171
                        ],
                        "self.create_table": [
                            172
                        ],
                        "self.do_truncate_table": [
                            173
                        ],
                        "self.truncate_table": [
                            175
                        ],
                        "cursor": [
                            178,
                            180
                        ],
                        "connection.cursor": [
                            178
                        ],
                        "self.init_copy": [
                            179
                        ],
                        "self.copy": [
                            180
                        ],
                        "touch": [
                            181
                        ],
                        "connection.commit": [
                            182
                        ],
                        "connection.close": [
                            185
                        ]
                    },
                    "diff_line_number": 166,
                    "class_data": {
                        "signature": "class S3CopyToTable(rdbms.CopyToTable)",
                        "docstring": "Template task for inserting a data set into Redshift from s3.\n\nUsage:\n\n* Subclass and override the required attributes:\n  * `host`,\n  * `database`,\n  * `user`,\n  * `password`,\n  * `table`,\n  * `columns`,\n  * `aws_access_key_id`,\n  * `aws_secret_access_key`,\n  * `s3_load_path`.",
                        "constructor_docstring": null,
                        "functions": [
                            "s3_load_path(self)",
                            "aws_access_key_id(self)",
                            "aws_secret_access_key(self)",
                            "copy_options(self)",
                            "table_attributes(self)",
                            "do_truncate_table(self)",
                            "truncate_table(self, connection)",
                            "create_table(self, connection)",
                            "run(self)",
                            "copy(self, cursor, f)",
                            "output(self)",
                            "does_table_exist(self, connection)"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": []
                    }
                }
            ],
            "inscope_functions": [
                "s3_load_path(self)",
                "aws_access_key_id(self)",
                "aws_secret_access_key(self)",
                "copy_options(self)",
                "table_attributes(self)",
                "do_truncate_table(self)",
                "truncate_table(self, connection)",
                "create_table(self, connection)",
                "run(self)",
                "copy(self, cursor, f)",
                "output(self)",
                "does_table_exist(self, connection)",
                "jsonpath(self)",
                "copy_json_options(self)",
                "copy(self, cursor, f)",
                "run(self)",
                "host(self)",
                "database(self)",
                "user(self)",
                "password(self)",
                "update_id(self)",
                "output(self)",
                "run(self)"
            ],
            "variables_in_file": {
                "logger": [
                    35,
                    423,
                    170,
                    174,
                    399,
                    177,
                    412,
                    410,
                    28
                ],
                "logging.getLogger": [
                    28
                ],
                "logging": [
                    28
                ],
                "ImportError": [
                    34
                ],
                "logger.warning": [
                    35
                ],
                "postgres.PostgresTarget": [
                    39
                ],
                "postgres": [
                    39
                ],
                "marker_table": [
                    46
                ],
                "get": [
                    46
                ],
                "luigi.configuration.get_config": [
                    46
                ],
                "luigi.configuration": [
                    46
                ],
                "luigi": [
                    330,
                    308,
                    346,
                    46
                ],
                "use_db_timestamps": [
                    51
                ],
                "rdbms.CopyToTable": [
                    54
                ],
                "rdbms": [
                    54
                ],
                "abc.abstractproperty": [
                    352,
                    259,
                    356,
                    72,
                    360,
                    79,
                    86,
                    348,
                    252,
                    93
                ],
                "abc": [
                    352,
                    259,
                    356,
                    72,
                    360,
                    79,
                    86,
                    348,
                    252,
                    93
                ],
                "query": [
                    224,
                    393,
                    219,
                    401,
                    150,
                    120,
                    123,
                    156
                ],
                "self.table": [
                    224,
                    163,
                    197,
                    170,
                    142,
                    174,
                    212,
                    279,
                    120,
                    153
                ],
                "self": [
                    384,
                    390,
                    138,
                    142,
                    143,
                    399,
                    401,
                    148,
                    279,
                    280,
                    153,
                    281,
                    155,
                    410,
                    411,
                    413,
                    418,
                    163,
                    166,
                    167,
                    168,
                    423,
                    170,
                    172,
                    173,
                    174,
                    175,
                    179,
                    180,
                    181,
                    313,
                    322,
                    324,
                    197,
                    198,
                    199,
                    208,
                    209,
                    210,
                    211,
                    212,
                    213,
                    224,
                    369,
                    120,
                    379,
                    380,
                    381,
                    382,
                    383
                ],
                "cursor": [
                    192,
                    224,
                    225,
                    228,
                    398,
                    401,
                    178,
                    274,
                    180,
                    402,
                    121,
                    123,
                    125,
                    222
                ],
                "connection.cursor": [
                    398,
                    178,
                    121,
                    156,
                    222
                ],
                "connection": [
                    390,
                    398,
                    403,
                    409,
                    156,
                    413,
                    418,
                    419,
                    421,
                    167,
                    168,
                    171,
                    172,
                    175,
                    178,
                    179,
                    181,
                    182,
                    185,
                    222,
                    121
                ],
                "cursor.execute": [
                    192,
                    224,
                    401,
                    274,
                    123
                ],
                "cursor.close": [
                    402,
                    228,
                    125
                ],
                "len": [
                    138,
                    143
                ],
                "self.columns": [
                    138,
                    148,
                    143
                ],
                "NotImplementedError": [
                    140
                ],
                "coldefs": [
                    145,
                    154
                ],
                "join": [
                    145
                ],
                "format": [
                    146,
                    150
                ],
                "name": [
                    147,
                    148
                ],
                "type": [
                    148
                ],
                "self.table_attributes": [
                    155
                ],
                "execute": [
                    156
                ],
                "Exception": [
                    164
                ],
                "path": [
                    177,
                    180,
                    166
                ],
                "self.s3_load_path": [
                    166
                ],
                "connect": [
                    413,
                    390,
                    167
                ],
                "self.output": [
                    322,
                    418,
                    390,
                    167,
                    181,
                    413
                ],
                "self.does_table_exist": [
                    168
                ],
                "logger.info": [
                    423,
                    170,
                    174,
                    399,
                    177,
                    410,
                    412
                ],
                "connection.reset": [
                    171
                ],
                "self.create_table": [
                    172
                ],
                "self.do_truncate_table": [
                    173
                ],
                "self.truncate_table": [
                    175
                ],
                "self.init_copy": [
                    179
                ],
                "self.copy": [
                    180
                ],
                "touch": [
                    418,
                    181
                ],
                "connection.commit": [
                    403,
                    419,
                    182
                ],
                "connection.close": [
                    185,
                    409,
                    421
                ],
                "f": [
                    197,
                    279
                ],
                "self.aws_access_key_id": [
                    197,
                    279
                ],
                "self.aws_secret_access_key": [
                    280,
                    198
                ],
                "self.column_separator": [
                    198
                ],
                "self.copy_options": [
                    281,
                    199
                ],
                "RedshiftTarget": [
                    378,
                    207
                ],
                "self.host": [
                    208,
                    379
                ],
                "self.database": [
                    423,
                    399,
                    209,
                    401,
                    380
                ],
                "self.user": [
                    210,
                    381
                ],
                "self.password": [
                    211,
                    382
                ],
                "self.update_id": [
                    384,
                    213
                ],
                "result": [
                    225,
                    226
                ],
                "cursor.fetchone": [
                    225
                ],
                "bool": [
                    226
                ],
                "S3CopyToTable": [
                    231
                ],
                "self.jsonpath": [
                    280
                ],
                "self.copy_json_options": [
                    281
                ],
                "S3PathTask": [
                    284
                ],
                "folder_paths": [
                    308
                ],
                "luigi.Parameter": [
                    308
                ],
                "text_target": [
                    309
                ],
                "entries": [
                    312,
                    321,
                    317
                ],
                "folder_path": [
                    313,
                    314,
                    318
                ],
                "self.folder_paths": [
                    313
                ],
                "s3": [
                    314,
                    315,
                    316
                ],
                "S3Target": [
                    314
                ],
                "client": [
                    315,
                    316
                ],
                "s3.fs": [
                    315
                ],
                "file_name": [
                    316,
                    318
                ],
                "client.list": [
                    316
                ],
                "s3.path": [
                    316
                ],
                "entries.append": [
                    317
                ],
                "manifest": [
                    321,
                    323
                ],
                "target": [
                    322,
                    326,
                    327
                ],
                "open": [
                    322
                ],
                "dump": [
                    323,
                    325,
                    326
                ],
                "json.dumps": [
                    323
                ],
                "json": [
                    323
                ],
                "self.text_target": [
                    324
                ],
                "dump.encode": [
                    325
                ],
                "target.write": [
                    326
                ],
                "target.close": [
                    327
                ],
                "luigi.Task": [
                    330
                ],
                "connection_reset_wait_seconds": [
                    346
                ],
                "luigi.IntParameter": [
                    346
                ],
                "self.task_id": [
                    369
                ],
                "self.__class__.__name__": [
                    383
                ],
                "self.__class__": [
                    383
                ],
                "psycopg2.DatabaseError": [
                    404
                ],
                "psycopg2": [
                    404
                ],
                "e.message": [
                    405
                ],
                "e": [
                    405
                ],
                "self.connection_reset_wait_seconds": [
                    410,
                    411
                ],
                "time.sleep": [
                    411
                ],
                "time": [
                    411
                ]
            },
            "filtered_variables_in_file": {
                "logger": [
                    35,
                    423,
                    170,
                    174,
                    399,
                    177,
                    412,
                    410,
                    28
                ],
                "logging.getLogger": [
                    28
                ],
                "logging": [
                    28
                ],
                "ImportError": [
                    34
                ],
                "logger.warning": [
                    35
                ],
                "postgres.PostgresTarget": [
                    39
                ],
                "postgres": [
                    39
                ],
                "marker_table": [
                    46
                ],
                "get": [
                    46
                ],
                "luigi.configuration.get_config": [
                    46
                ],
                "luigi.configuration": [
                    46
                ],
                "luigi": [
                    330,
                    308,
                    346,
                    46
                ],
                "use_db_timestamps": [
                    51
                ],
                "rdbms.CopyToTable": [
                    54
                ],
                "rdbms": [
                    54
                ],
                "abc.abstractproperty": [
                    352,
                    259,
                    356,
                    72,
                    360,
                    79,
                    86,
                    348,
                    252,
                    93
                ],
                "abc": [
                    352,
                    259,
                    356,
                    72,
                    360,
                    79,
                    86,
                    348,
                    252,
                    93
                ],
                "query": [
                    224,
                    393,
                    219,
                    401,
                    150,
                    120,
                    123,
                    156
                ],
                "self.table": [
                    224,
                    163,
                    197,
                    170,
                    142,
                    174,
                    212,
                    279,
                    120,
                    153
                ],
                "self": [
                    384,
                    390,
                    138,
                    142,
                    143,
                    399,
                    401,
                    148,
                    279,
                    280,
                    153,
                    281,
                    155,
                    410,
                    411,
                    413,
                    418,
                    163,
                    166,
                    167,
                    168,
                    423,
                    170,
                    172,
                    173,
                    174,
                    175,
                    179,
                    180,
                    181,
                    313,
                    322,
                    324,
                    197,
                    198,
                    199,
                    208,
                    209,
                    210,
                    211,
                    212,
                    213,
                    224,
                    369,
                    120,
                    379,
                    380,
                    381,
                    382,
                    383
                ],
                "cursor": [
                    192,
                    224,
                    225,
                    228,
                    398,
                    401,
                    178,
                    274,
                    180,
                    402,
                    121,
                    123,
                    125,
                    222
                ],
                "connection.cursor": [
                    398,
                    178,
                    121,
                    156,
                    222
                ],
                "connection": [
                    390,
                    398,
                    403,
                    409,
                    156,
                    413,
                    418,
                    419,
                    421,
                    167,
                    168,
                    171,
                    172,
                    175,
                    178,
                    179,
                    181,
                    182,
                    185,
                    222,
                    121
                ],
                "cursor.execute": [
                    192,
                    224,
                    401,
                    274,
                    123
                ],
                "cursor.close": [
                    402,
                    228,
                    125
                ],
                "len": [
                    138,
                    143
                ],
                "self.columns": [
                    138,
                    148,
                    143
                ],
                "NotImplementedError": [
                    140
                ],
                "coldefs": [
                    145,
                    154
                ],
                "join": [
                    145
                ],
                "format": [
                    146,
                    150
                ],
                "name": [
                    147,
                    148
                ],
                "type": [
                    148
                ],
                "self.table_attributes": [
                    155
                ],
                "execute": [
                    156
                ],
                "Exception": [
                    164
                ],
                "path": [
                    177,
                    180,
                    166
                ],
                "self.s3_load_path": [
                    166
                ],
                "connect": [
                    413,
                    390,
                    167
                ],
                "self.output": [
                    322,
                    418,
                    390,
                    167,
                    181,
                    413
                ],
                "self.does_table_exist": [
                    168
                ],
                "logger.info": [
                    423,
                    170,
                    174,
                    399,
                    177,
                    410,
                    412
                ],
                "connection.reset": [
                    171
                ],
                "self.create_table": [
                    172
                ],
                "self.do_truncate_table": [
                    173
                ],
                "self.truncate_table": [
                    175
                ],
                "self.init_copy": [
                    179
                ],
                "self.copy": [
                    180
                ],
                "touch": [
                    418,
                    181
                ],
                "connection.commit": [
                    403,
                    419,
                    182
                ],
                "connection.close": [
                    185,
                    409,
                    421
                ],
                "f": [
                    197,
                    279
                ],
                "self.aws_access_key_id": [
                    197,
                    279
                ],
                "self.aws_secret_access_key": [
                    280,
                    198
                ],
                "self.column_separator": [
                    198
                ],
                "self.copy_options": [
                    281,
                    199
                ],
                "RedshiftTarget": [
                    378,
                    207
                ],
                "self.host": [
                    208,
                    379
                ],
                "self.database": [
                    423,
                    399,
                    209,
                    401,
                    380
                ],
                "self.user": [
                    210,
                    381
                ],
                "self.password": [
                    211,
                    382
                ],
                "self.update_id": [
                    384,
                    213
                ],
                "result": [
                    225,
                    226
                ],
                "cursor.fetchone": [
                    225
                ],
                "bool": [
                    226
                ],
                "S3CopyToTable": [
                    231
                ],
                "self.jsonpath": [
                    280
                ],
                "self.copy_json_options": [
                    281
                ],
                "S3PathTask": [
                    284
                ],
                "folder_paths": [
                    308
                ],
                "luigi.Parameter": [
                    308
                ],
                "text_target": [
                    309
                ],
                "entries": [
                    312,
                    321,
                    317
                ],
                "folder_path": [
                    313,
                    314,
                    318
                ],
                "self.folder_paths": [
                    313
                ],
                "s3": [
                    314,
                    315,
                    316
                ],
                "S3Target": [
                    314
                ],
                "client": [
                    315,
                    316
                ],
                "s3.fs": [
                    315
                ],
                "file_name": [
                    316,
                    318
                ],
                "client.list": [
                    316
                ],
                "s3.path": [
                    316
                ],
                "entries.append": [
                    317
                ],
                "manifest": [
                    321,
                    323
                ],
                "target": [
                    322,
                    326,
                    327
                ],
                "open": [
                    322
                ],
                "dump": [
                    323,
                    325,
                    326
                ],
                "json.dumps": [
                    323
                ],
                "json": [
                    323
                ],
                "self.text_target": [
                    324
                ],
                "dump.encode": [
                    325
                ],
                "target.write": [
                    326
                ],
                "target.close": [
                    327
                ],
                "luigi.Task": [
                    330
                ],
                "connection_reset_wait_seconds": [
                    346
                ],
                "luigi.IntParameter": [
                    346
                ],
                "self.task_id": [
                    369
                ],
                "self.__class__.__name__": [
                    383
                ],
                "self.__class__": [
                    383
                ],
                "psycopg2.DatabaseError": [
                    404
                ],
                "psycopg2": [
                    404
                ],
                "e.message": [
                    405
                ],
                "e": [
                    405
                ],
                "self.connection_reset_wait_seconds": [
                    410,
                    411
                ],
                "time.sleep": [
                    411
                ],
                "time": [
                    411
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/luigi/test/contrib/redshift_test.py",
                "test_function": "test_s3_copy_to_table",
                "test_function_code": "    @mock.patch(\"luigi.contrib.redshift.S3CopyToTable.copy\")\n    @mock.patch(\"luigi.contrib.redshift.RedshiftTarget\")\n    def test_s3_copy_to_table(self, mock_redshift_target, mock_copy):\n        task = DummyS3CopyToTable()\n        task.run()\n\n        # The mocked connection cursor passed to\n        # S3CopyToTable.copy(self, cursor, f).\n        mock_cursor = (mock_redshift_target.return_value\n                                           .connect\n                                           .return_value\n                                           .cursor\n                                           .return_value)\n\n        # `mock_redshift_target` is the mocked `RedshiftTarget` object\n        # returned by S3CopyToTable.output(self).\n        mock_redshift_target.assert_called_with(database=task.database,\n                                                host=task.host,\n                                                update_id='DummyS3CopyToTable()',\n                                                user=task.user,\n                                                table=task.table,\n                                                password=task.password)\n\n        # Check if the `S3CopyToTable.s3_load_path` class attribute was\n        # successfully referenced in the `S3CopyToTable.run` method, which is\n        # in-turn passed to `S3CopyToTable.copy` and other functions in `run`\n        # (see issue #995).\n        mock_copy.assert_called_with(mock_cursor, task.s3_load_path)\n\n        # Check the SQL query in `S3CopyToTable.does_table_exist`.\n        mock_cursor.execute.assert_called_with(\"select 1 as table_exists \"\n                                               \"from pg_table_def \"\n                                               \"where tablename = %s limit 1\",\n                                               (task.table,))\n\n        return",
                "test_error": "TypeError: 'str' object is not callable",
                "full_test_error": "self = <contrib.redshift_test.TestS3CopyToTable testMethod=test_s3_copy_to_table>\nmock_redshift_target = <MagicMock name='RedshiftTarget' id='4442542528'>\nmock_copy = <MagicMock name='copy' id='4442657984'>\n\n    @mock.patch(\"luigi.contrib.redshift.S3CopyToTable.copy\")\n    @mock.patch(\"luigi.contrib.redshift.RedshiftTarget\")\n    def test_s3_copy_to_table(self, mock_redshift_target, mock_copy):\n        task = DummyS3CopyToTable()\n>       task.run()\n\ntest/contrib/redshift_test.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = DummyS3CopyToTable()\n\n    def run(self):\n        \"\"\"\n        If the target table doesn't exist, self.create_table\n        will be called to attempt to create the table.\n        \"\"\"\n        if not (self.table):\n            raise Exception(\"table need to be specified\")\n    \n>       path = self.s3_load_path()\nE       TypeError: 'str' object is not callable\n\nluigi/contrib/redshift.py:166: TypeError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "mock.patch('luigi.contrib.redshift.S3CopyToTable.copy')",
                    "mock.patch('luigi.contrib.redshift.RedshiftTarget')"
                ]
            }
        ]
    }
}