{
    "luigi": [
        {
            "bugID": 25,
            "bitvector": {
                "1.3.2": 0,
                "1.2.4": 0,
                "1.2.1": 0,
                "1.3.4": 1,
                "2.1.1": 1,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 1,
                "3.1.1": 0,
                "3.1.2": 1,
                "cot": 0
            },
            "start_line": 158,
            "file_name": "luigi/contrib/redshift.py",
            "replace_code": "# relative function's signature in this file\ndef s3_load_path(self):\n    # ... omitted code ...\n\n# relative function's signature in this file\ndef do_truncate_table(self):\n    # ... omitted code ...\n\n# relative function's signature in this file\ndef truncate_table(self, connection):\n    # ... omitted code ...\n\n# relative function's signature in this file\ndef create_table(self, connection):\n    # ... omitted code ...\n\n# relative function's signature in this file\ndef copy(self, cursor, f):\n    # ... omitted code ...\n\n# relative function's signature in this file\ndef output(self):\n    # ... omitted code ...\n\n# relative function's signature in this file\ndef does_table_exist(self, connection):\n    # ... omitted code ...\n\n# relative function's signature in this file\ndef copy(self, cursor, f):\n    # ... omitted code ...\n\n# relative function's signature in this file\ndef output(self):\n    # ... omitted code ...\n\n# this is the corrected function\ndef run(self):\n    \n    if not (self.table):\n        raise Exception(\"table need to be specified\")\n\n    path = self.s3_load_path\n    connection = self.output().connect()\n    if not self.does_table_exist(connection):\n        # try creating table\n        logger.info(\"Creating table %s\", self.table)\n        connection.reset()\n        self.create_table(connection)\n    elif self.do_truncate_table():\n        logger.info(\"Truncating table %s\", self.table)\n        self.truncate_table(connection)\n\n    logger.info(\"Inserting file: %s\", path)\n    cursor = connection.cursor()\n    self.init_copy(connection)\n    self.copy(cursor, path)\n    self.output().touch(connection)\n    connection.commit()\n\n    # commit and clean up\n    connection.close()"
        }
    ]
}