{
    "scrapy:29": {
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/scrapy/scrapy/utils/request.py": {
            "buggy_functions": [
                {
                    "function_name": "request_httprepr",
                    "function_code": "def request_httprepr(request):\n    \"\"\"Return the raw HTTP representation (as bytes) of the given request.\n    This is provided only for reference since it's not the actual stream of\n    bytes that will be send when performing the request (that's controlled\n    by Twisted).\n    \"\"\"\n    parsed = urlparse_cached(request)\n    path = urlunparse(('', '', parsed.path or '/', parsed.params, parsed.query, ''))\n    s = to_bytes(request.method) + b\" \" + to_bytes(path) + b\" HTTP/1.1\\r\\n\"\n    s += b\"Host: \" + to_bytes(parsed.hostname) + b\"\\r\\n\"\n    if request.headers:\n        s += request.headers.to_string() + b\"\\r\\n\"\n    s += b\"\\r\\n\"\n    s += request.body\n    return s\n",
                    "decorators": [],
                    "docstring": "Return the raw HTTP representation (as bytes) of the given request.\nThis is provided only for reference since it's not the actual stream of\nbytes that will be send when performing the request (that's controlled\nby Twisted).",
                    "start_line": 73,
                    "variables": {
                        "parsed": [
                            80,
                            82,
                            79
                        ],
                        "urlparse_cached": [
                            79
                        ],
                        "request": [
                            79,
                            81,
                            83,
                            84,
                            86
                        ],
                        "path": [
                            80,
                            81
                        ],
                        "urlunparse": [
                            80
                        ],
                        "parsed.path": [
                            80
                        ],
                        "parsed.params": [
                            80
                        ],
                        "parsed.query": [
                            80
                        ],
                        "s": [
                            81,
                            82,
                            84,
                            85,
                            86,
                            87
                        ],
                        "to_bytes": [
                            81,
                            82
                        ],
                        "request.method": [
                            81
                        ],
                        "parsed.hostname": [
                            82
                        ],
                        "request.headers": [
                            83,
                            84
                        ],
                        "request.headers.to_string": [
                            84
                        ],
                        "request.body": [
                            86
                        ]
                    },
                    "filtered_variables": {
                        "parsed": [
                            80,
                            82,
                            79
                        ],
                        "urlparse_cached": [
                            79
                        ],
                        "request": [
                            79,
                            81,
                            83,
                            84,
                            86
                        ],
                        "path": [
                            80,
                            81
                        ],
                        "urlunparse": [
                            80
                        ],
                        "parsed.path": [
                            80
                        ],
                        "parsed.params": [
                            80
                        ],
                        "parsed.query": [
                            80
                        ],
                        "s": [
                            81,
                            82,
                            84,
                            85,
                            86,
                            87
                        ],
                        "to_bytes": [
                            81,
                            82
                        ],
                        "request.method": [
                            81
                        ],
                        "parsed.hostname": [
                            82
                        ],
                        "request.headers": [
                            83,
                            84
                        ],
                        "request.headers.to_string": [
                            84
                        ],
                        "request.body": [
                            86
                        ]
                    },
                    "diff_line_number": 82,
                    "class_data": null,
                    "variable_values_start": [
                        {
                            "varName": "parsed",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "urlparse_cached",
                            "value": "<function urlparse_cached at 0x10f2ae0d0>",
                            "varType": "function"
                        },
                        {
                            "varName": "request",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "path",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "urlunparse",
                            "value": "<function urlunparse at 0x10d6d05e0>",
                            "varType": "function"
                        },
                        {
                            "varName": "parsed.path",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "parsed.params",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "parsed.query",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "s",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "to_bytes",
                            "value": "<function to_bytes at 0x10ed69310>",
                            "varType": "function"
                        },
                        {
                            "varName": "request.method",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "parsed.hostname",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "request.headers",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "request.headers.to_string",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "request.body",
                            "value": "None",
                            "varType": "None"
                        }
                    ],
                    "angelic_variable_values_start": [
                        {
                            "varName": "parsed",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "urlparse_cached",
                            "value": "<function urlparse_cached at 0x106553040>",
                            "varType": "function"
                        },
                        {
                            "varName": "request",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "path",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "urlunparse",
                            "value": "<function urlunparse at 0x1049a85e0>",
                            "varType": "function"
                        },
                        {
                            "varName": "parsed.path",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "parsed.params",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "parsed.query",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "s",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "to_bytes",
                            "value": "<function to_bytes at 0x10600d280>",
                            "varType": "function"
                        },
                        {
                            "varName": "request.method",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "parsed.hostname",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "request.headers",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "request.headers.to_string",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "request.body",
                            "value": "None",
                            "varType": "None"
                        }
                    ],
                    "angelic_variable_values_end": [
                        {
                            "varName": "parsed",
                            "value": "ParseResult(scheme='ftp', netloc='localhost', path='/tmp/foo.txt', params='', query='', fragment='')",
                            "varType": "ParseResult"
                        },
                        {
                            "varName": "urlparse_cached",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "request",
                            "value": "<GET ftp://localhost/tmp/foo.txt>",
                            "varType": "Request"
                        },
                        {
                            "varName": "path",
                            "value": "/tmp/foo.txt",
                            "varType": "str"
                        },
                        {
                            "varName": "urlunparse",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "parsed.path",
                            "value": "/tmp/foo.txt",
                            "varType": "str"
                        },
                        {
                            "varName": "parsed.params",
                            "value": "",
                            "varType": "str"
                        },
                        {
                            "varName": "parsed.query",
                            "value": "",
                            "varType": "str"
                        },
                        {
                            "varName": "s",
                            "value": "b'GET /tmp/foo.txt HTTP/1.1\\r\\nHost: localhost\\r\\n\\r\\n",
                            "varType": "bytes"
                        },
                        {
                            "varName": "to_bytes",
                            "value": "None",
                            "varType": "None"
                        },
                        {
                            "varName": "request.method",
                            "value": "GET",
                            "varType": "str"
                        },
                        {
                            "varName": "parsed.hostname",
                            "value": "localhost",
                            "varType": "str"
                        },
                        {
                            "varName": "request.headers",
                            "value": "{}",
                            "varType": "Headers"
                        },
                        {
                            "varName": "request.headers.to_string",
                            "value": "None",
                            "varType": "NoneType"
                        },
                        {
                            "varName": "request.body",
                            "value": "b",
                            "varType": "bytes"
                        }
                    ]
                }
            ],
            "inscope_functions": [],
            "variables_in_file": {
                "_fingerprint_cache": [
                    50,
                    19
                ],
                "weakref.WeakKeyDictionary": [
                    19
                ],
                "weakref": [
                    19
                ],
                "include_headers": [
                    47,
                    48,
                    49,
                    51,
                    56,
                    57,
                    62,
                    63
                ],
                "tuple": [
                    48
                ],
                "to_bytes": [
                    48,
                    81,
                    82,
                    53,
                    54
                ],
                "h.lower": [
                    48
                ],
                "h": [
                    48,
                    49
                ],
                "sorted": [
                    49
                ],
                "cache": [
                    50,
                    51,
                    62,
                    63
                ],
                "_fingerprint_cache.setdefault": [
                    50
                ],
                "request": [
                    70,
                    79,
                    81,
                    50,
                    83,
                    84,
                    53,
                    54,
                    55,
                    86,
                    58,
                    60
                ],
                "fp": [
                    52,
                    53,
                    54,
                    55,
                    59,
                    61,
                    62
                ],
                "hashlib.sha1": [
                    52
                ],
                "hashlib": [
                    52
                ],
                "fp.update": [
                    53,
                    54,
                    55,
                    59,
                    61
                ],
                "request.method": [
                    81,
                    53
                ],
                "canonicalize_url": [
                    54
                ],
                "request.url": [
                    54
                ],
                "request.body": [
                    86,
                    55
                ],
                "hdr": [
                    57,
                    58,
                    59,
                    60
                ],
                "request.headers": [
                    70,
                    83,
                    84,
                    58,
                    60
                ],
                "v": [
                    60,
                    61
                ],
                "request.headers.getlist": [
                    60
                ],
                "fp.hexdigest": [
                    62
                ],
                "basic_auth_header": [
                    70
                ],
                "username": [
                    70
                ],
                "password": [
                    70
                ],
                "parsed": [
                    80,
                    82,
                    79
                ],
                "urlparse_cached": [
                    79
                ],
                "path": [
                    80,
                    81
                ],
                "urlunparse": [
                    80
                ],
                "parsed.path": [
                    80
                ],
                "parsed.params": [
                    80
                ],
                "parsed.query": [
                    80
                ],
                "s": [
                    81,
                    82,
                    84,
                    85,
                    86,
                    87
                ],
                "parsed.hostname": [
                    82
                ],
                "request.headers.to_string": [
                    84
                ]
            },
            "filtered_variables_in_file": {
                "_fingerprint_cache": [
                    50,
                    19
                ],
                "weakref.WeakKeyDictionary": [
                    19
                ],
                "weakref": [
                    19
                ],
                "include_headers": [
                    47,
                    48,
                    49,
                    51,
                    56,
                    57,
                    62,
                    63
                ],
                "to_bytes": [
                    48,
                    81,
                    82,
                    53,
                    54
                ],
                "h.lower": [
                    48
                ],
                "h": [
                    48,
                    49
                ],
                "cache": [
                    50,
                    51,
                    62,
                    63
                ],
                "_fingerprint_cache.setdefault": [
                    50
                ],
                "request": [
                    70,
                    79,
                    81,
                    50,
                    83,
                    84,
                    53,
                    54,
                    55,
                    86,
                    58,
                    60
                ],
                "fp": [
                    52,
                    53,
                    54,
                    55,
                    59,
                    61,
                    62
                ],
                "hashlib.sha1": [
                    52
                ],
                "hashlib": [
                    52
                ],
                "fp.update": [
                    53,
                    54,
                    55,
                    59,
                    61
                ],
                "request.method": [
                    81,
                    53
                ],
                "canonicalize_url": [
                    54
                ],
                "request.url": [
                    54
                ],
                "request.body": [
                    86,
                    55
                ],
                "hdr": [
                    57,
                    58,
                    59,
                    60
                ],
                "request.headers": [
                    70,
                    83,
                    84,
                    58,
                    60
                ],
                "v": [
                    60,
                    61
                ],
                "request.headers.getlist": [
                    60
                ],
                "fp.hexdigest": [
                    62
                ],
                "basic_auth_header": [
                    70
                ],
                "username": [
                    70
                ],
                "password": [
                    70
                ],
                "parsed": [
                    80,
                    82,
                    79
                ],
                "urlparse_cached": [
                    79
                ],
                "path": [
                    80,
                    81
                ],
                "urlunparse": [
                    80
                ],
                "parsed.path": [
                    80
                ],
                "parsed.params": [
                    80
                ],
                "parsed.query": [
                    80
                ],
                "s": [
                    81,
                    82,
                    84,
                    85,
                    86,
                    87
                ],
                "parsed.hostname": [
                    82
                ],
                "request.headers.to_string": [
                    84
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/scrapy/tests/test_utils_request.py",
                "test_function": "test_request_httprepr_for_non_http_request",
                "test_function_code": "    def test_request_httprepr_for_non_http_request(self):\n        # the representation is not important but it must not fail.\n        request_httprepr(Request(\"file:///tmp/foo.txt\"))\n        request_httprepr(Request(\"ftp://localhost/tmp/foo.txt\"))",
                "test_error": "TypeError: to_bytes must receive a unicode, str or bytes object, got NoneType",
                "full_test_error": "self = <tests.test_utils_request.UtilsRequestTest testMethod=test_request_httprepr_for_non_http_request>\n\n    def test_request_httprepr_for_non_http_request(self):\n        # the representation is not important but it must not fail.\n>       request_httprepr(Request(\"file:///tmp/foo.txt\"))\n\n/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/scrapy/tests/test_utils_request.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/scrapy/scrapy/utils/request.py:82: in request_httprepr\n    s += b\"Host: \" + to_bytes(parsed.hostname) + b\"\\r\\n\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntext = None, encoding = None, errors = 'strict'\n\n    def to_bytes(text, encoding=None, errors='strict'):\n        \"\"\"Return the binary representation of `text`. If `text`\n        is already a bytes object, return it as-is.\"\"\"\n        if isinstance(text, bytes):\n            return text\n        if not isinstance(text, six.string_types):\n>           raise TypeError('to_bytes must receive a unicode, str or bytes '\n                            'object, got %s' % type(text).__name__)\nE           TypeError: to_bytes must receive a unicode, str or bytes object, got NoneType\n\n/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/scrapy/scrapy/utils/python.py:116: TypeError",
                "traceback": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/scrapy/scrapy/utils/request.py:82: in request_httprepr\n    s += b\"Host: \" + to_bytes(parsed.hostname) + b\"\\r\\n\"",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntext = None, encoding = None, errors = 'strict'\n\n    def to_bytes(text, encoding=None, errors='strict'):\n        \"\"\"Return the binary representation of `text`. If `text`\n        is already a bytes object, return it as-is.\"\"\"\n        if isinstance(text, bytes):\n            return text\n        if not isinstance(text, six.string_types):\n>           raise TypeError('to_bytes must receive a unicode, str or bytes '\n                            'object, got %s' % type(text).__name__)\nE           TypeError: to_bytes must receive a unicode, str or bytes object, got NoneType\n\n/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/scrapy/scrapy/utils/python.py:116: TypeError",
                "test_function_decorators": []
            }
        ]
    }
}