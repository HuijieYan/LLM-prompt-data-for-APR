{
    "tqdm": [
        {
            "bugID": 4,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 252,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='', ascii=False,\n                     unit='it', unit_scale=False, rate=None, bar_format=None,\n                     postfix=None, unit_divisor=1000, **extra_kwargs):\n    import math\n    \"\"\"\n    Return a string-based progress bar given some parameters\n    (other parameter descriptions remain unchanged)\n    \"\"\"\n    # equivalent code up to the point of 'elapsed_str = format_interval(elapsed)'\n    \n    # Calculate rate_fmt considering edge cases\n    if rate:\n        if math.isclose(rate, 0, abs_tol=1e-09):  # Check if rate is very close to 0\n            rate_noinv_fmt = '0.00' + unit + '/s'\n        else:\n            rate_noinv_fmt = ((format_sizeof(rate) if unit_scale else\n                               '{0:5.2f}'.format(rate)) + unit + '/s')\n        \n        inv_rate = 1 / rate\n        if math.isinf(inv_rate):  # Check if inv_rate is infinite\n            rate_inv_fmt = '0.00s/' + unit\n        else:\n            rate_inv_fmt = ((format_sizeof(inv_rate) if unit_scale else\n                             '{0:5.2f}'.format(inv_rate)) + 's/' + unit)\n        \n        rate_fmt = rate_inv_fmt if inv_rate > 1 else rate_noinv_fmt"
        }
    ]
}