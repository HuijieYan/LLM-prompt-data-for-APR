{
    "tqdm": [
        {
            "bugID": 4,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 252,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='', ascii=False,\n                 unit='it', unit_scale=False, rate=None, bar_format=None,\n                 postfix=None, unit_divisor=1000, **extra_kwargs):\n    # ... (rest of the function remains unchanged)\n\n    frac = n / total if total else 0\n    percentage = frac * 100\n\n    remaining = (total - n) / rate if rate else 0\n    remaining_str = format_interval(remaining) if rate else '?'\n\n    # format the stats displayed to the left and right sides of the bar\n    l_bar = '{0:3.0f}%|'.format(percentage)\n    r_bar = '| {0}/{1} [{2}<{3}, {4}{5}]'.format(\n        n_fmt, total_fmt, elapsed_str, remaining_str, rate_fmt, postfix)\n\n    if ncols == 0:\n        return l_bar[:-1] + r_bar[1:]\n\n    if bar_format:\n        # Custom bar formatting\n        # Populate a dict with all available progress indicators\n        format_dict = {\n            'n': n, 'n_fmt': n_fmt, 'total': total, 'total_fmt': total_fmt,\n            'percentage': percentage, 'rate': inv_rate if inv_rate and inv_rate > 1 else rate,\n            'rate_fmt': rate_fmt, 'elapsed': elapsed_str, 'remaining': remaining_str, 'desc': prefix or '',\n            'postfix': postfix, 'unit': unit,\n            # bar=full_bar,  # replaced by procedure below\n            **extra_kwargs\n        }\n\n        # auto-remove colon for empty `desc`\n        if not prefix:\n            bar_format = bar_format.replace(\"{desc}: \", '')\n\n        # Interpolate supplied bar format with the dict\n        if '{bar}' in bar_format:\n            l_bar_user, r_bar_user = bar_format.split('{bar}')\n            l_bar = l_bar_user.format(**format_dict)\n            r_bar = r_bar_user.format(**format_dict)\n        else:\n            # Else no progress bar, we can just format and return\n            return bar_format.format(**format_dict)",
            "imports": []
        }
    ]
}