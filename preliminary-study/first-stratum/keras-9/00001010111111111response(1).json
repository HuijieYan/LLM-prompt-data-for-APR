{
    "keras": [
        {
            "bugID": 9,
            "bitvector": {
                "1.3.1": 0,
                "1.3.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.1.2": 0,
                "2.2.3": 1,
                "2.2.4": 0,
                "2.2.5": 1,
                "2.2.6": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "start_line": 117,
            "file_name": "docs/autogen.py",
            "replace_code": "def process_list_block(docstring, starting_point, section_end,\n                       leading_spaces, marker):\n    import re\n    ending_point = docstring.find('\\n\\n', starting_point)\n    block = docstring[starting_point:(None if ending_point == -1 else\n                                      ending_point + 2)]\n    # Place marker for later reinjection.\n    docstring_slice = docstring[:starting_point] + marker + docstring[section_end:]\n    lines = block.split('\\n')\n    lines = [re.sub('^' + ' ' * leading_spaces, '', line) for line in lines]\n    lines = [re.sub(r'^    ([^\\s\\\\\\(]+):(.*)', r'- __\\1__:\\2', line) for line in lines]\n    lines = [re.sub(r'^    ', '', line) for line in lines]\n    \n    # Fix text lines after lists\n    new_lines = []\n    indent = 0\n    text_block = False\n    for line in lines:\n        spaces = re.search(r'\\S', line)\n        if spaces:\n            if line[spaces.start()] == '-':\n                indent = spaces.start() + 1\n                if text_block:\n                    text_block = False\n                    new_lines.append('\\n' + line)\n                else:\n                    new_lines.append(line)\n            elif spaces.start() < indent:\n                text_block = True\n                indent = spaces.start()\n                new_lines.append('\\n' + line)\n            else:\n                new_lines.append(line)\n        else:\n            text_block = False\n            indent = 0\n            new_lines.append(line)\n    \n    block = '\\n'.join(new_lines)\n    \n    return docstring_slice, block"
        }
    ]
}