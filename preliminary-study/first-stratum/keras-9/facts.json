{
    "1.3.1": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/keras/docs/autogen.py",
    "1.1.1": "def process_list_block(docstring, starting_point, section_end,\n                       leading_spaces, marker):\n    ending_point = docstring.find('\\n\\n', starting_point)\n    block = docstring[starting_point:(None if ending_point == -1 else\n                                      ending_point - 1)]\n    # Place marker for later reinjection.\n    docstring_slice = docstring[starting_point:section_end].replace(block, marker)\n    docstring = (docstring[:starting_point]\n                 + docstring_slice\n                 + docstring[section_end:])\n    lines = block.split('\\n')\n    # Remove the computed number of leading white spaces from each line.\n    lines = [re.sub('^' + ' ' * leading_spaces, '', line) for line in lines]\n    # Usually lines have at least 4 additional leading spaces.\n    # These have to be removed, but first the list roots have to be detected.\n    top_level_regex = r'^    ([^\\s\\\\\\(]+):(.*)'\n    top_level_replacement = r'- __\\1__:\\2'\n    lines = [re.sub(top_level_regex, top_level_replacement, line) for line in lines]\n    # All the other lines get simply the 4 leading space (if present) removed\n    lines = [re.sub(r'^    ', '', line) for line in lines]\n    # Fix text lines after lists\n    indent = 0\n    text_block = False\n    for i in range(len(lines)):\n        line = lines[i]\n        spaces = re.search(r'\\S', line)\n        if spaces:\n            # If it is a list element\n            if line[spaces.start()] == '-':\n                indent = spaces.start() + 1\n                if text_block:\n                    text_block = False\n                    lines[i] = '\\n' + line\n            elif spaces.start() < indent:\n                text_block = True\n                indent = spaces.start()\n                lines[i] = '\\n' + line\n        else:\n            text_block = False\n            indent = 0\n    block = '\\n'.join(lines)\n    return docstring, block\n",
    "2.2.3": [
        [
            {},
            {}
        ]
    ],
    "2.2.4": [
        [
            {},
            {}
        ]
    ],
    "2.2.5": [
        [
            {},
            {}
        ]
    ],
    "2.2.6": [
        [
            {},
            {}
        ]
    ],
    "3.1.1": [
        "Callbacks documentation not showing bullet points correctly\n",
        "EarlyStopping documentation with wrong format\n"
    ],
    "3.1.2": [
        "The current documentation on callbacks isn't showing bullet points correctly under the \"Arguments\" section of a few models. Here's the example for ModelCheckpoint:\n\nfilepath: string, path to save the model file. monitor: quantity to monitor. verbose: verbosity mode, 0 or 1. save_best_only: if save_best_only=True, the latest best model according to the quantity monitored will not be overwritten. mode: one of {auto, min, max}. If save_best_only=True, the decision to overwrite the current save file is made based on either the maximization or the minimization of the monitored quantity. For val_acc, this should be max, for val_loss this should be min, etc. In auto mode, the direction is automatically inferred from the name of the monitored quantity. save_weights_only: if True, then only the model's weights will be saved (model.save_weights(filepath)), else the full model is saved (model.save(filepath)). period: Interval (number of epochs) between checkpoints.\n\nLooking at the source code, the docstring seems to be organized correctly:\nkeras/keras/callbacks.py\n\nLines 371 to 390 in dc9e510\n\n     # Arguments \n         filepath: string, path to save the model file. \n         monitor: quantity to monitor. \n         verbose: verbosity mode, 0 or 1. \n         save_best_only: if `save_best_only=True`, \n             the latest best model according to \n             the quantity monitored will not be overwritten. \n         mode: one of {auto, min, max}. \n             If `save_best_only=True`, the decision \n             to overwrite the current save file is made \n             based on either the maximization or the \n             minimization of the monitored quantity. For `val_acc`, \n             this should be `max`, for `val_loss` this should \n             be `min`, etc. In `auto` mode, the direction is \n             automatically inferred from the name of the monitored quantity. \n         save_weights_only: if True, then only the model's weights will be \n             saved (`model.save_weights(filepath)`), else the full model \n             is saved (`model.save(filepath)`). \n         period: Interval (number of epochs) between checkpoints. \n     \"\"\" \nIt is however showing up correctly for other models, e.g. ProgbarLogger:\n\nArguments\ncount_mode: One of \"steps\" or \"samples\". Whether the progress bar should count samples seen or steps (batches) seen.\nstateful_metrics: Iterable of string names of metrics that should not be averaged over an epoch. Metrics in this list will be logged as-is. All others will be averaged over time (e.g. loss, etc).\n",
        "EarlyStopping documentation has the wrong format. See here:\nhttps://keras.io/callbacks/#earlystopping\n\nThe Arguments section is bugged.\n"
    ]
}