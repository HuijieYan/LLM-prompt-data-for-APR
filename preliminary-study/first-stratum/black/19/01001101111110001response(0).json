{
    "black": [
        {
            "bugID": 19,
            "bitvector": {
                "1.3.1": 0,
                "1.3.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.1.2": 1,
                "2.2.3": 0,
                "2.2.4": 1,
                "2.2.5": 1,
                "2.2.6": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n\n    max_allowed = 1\n    if current_line.depth == 0:\n        max_allowed = 2\n    if current_line.leaves:\n        first_leaf = current_line.leaves[0]\n        before = min(first_leaf.prefix.count(\"\\n\"), max_allowed)\n        first_leaf.prefix = \"\"\n    else:\n        before = 0\n    depth = current_line.depth\n    \n    # ... (omitting other parts of the function for brevity)\n    \n    if current_line.is_decorator or current_line.is_def or current_line.is_class:\n        if not current_line.is_decorator:\n            self.previous_defs.append(depth)\n        if self.previous_line is None:\n            return 0, 0\n        if self.previous_line.is_decorator:\n            return 0, 0\n        newlines = 2\n        if current_line.depth:\n            newlines -= 1\n        return newlines, 0\n    \n    if current_line.is_flow_control:\n        return before, 1\n    \n    # Add logic to insert empty lines when needed based on comments and code elements\n    if self.previous_line and self.previous_line.is_comment \\\n            and (current_line.is_decorator or current_line.is_def or current_line.is_class):\n        return (before or 1), 0\n    \n    if (\n        self.previous_line\n        and self.previous_line.is_import\n        and not any(\n            [\n                current_line.is_import,\n                current_line.is_yield\n                and depth != self.previous_line.depth,\n            ]\n        )\n    ):\n        return (before or 1), 0\n    \n    return before, 0"
        }
    ]
}