{
    "black": [
        {
            "bugID": 19,
            "bitvector": {
                "1.3.1": 0,
                "1.3.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.1.2": 0,
                "2.2.3": 1,
                "2.2.4": 0,
                "2.2.5": 0,
                "2.2.6": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n\n    max_allowed = 1\n    if current_line.depth == 0:\n        max_allowed = 2\n    if current_line.leaves:\n        first_leaf = current_line.leaves[0]\n        before = first_leaf.prefix.count(\"\\n\")\n        before = min(before, max_allowed)\n        first_leaf.prefix = \"\"\n    else:\n        before = 0\n    \n    previous_defs_depth = self.previous_defs[-1] if self.previous_defs else 0\n    while previous_defs_depth >= current_line.depth:\n        if current_line.depth:\n            before = 1\n        else:\n            before = 2\n        if self.previous_defs:\n            self.previous_defs.pop(-1)\n        else:\n            break\n    \n    is_decorator = current_line.is_decorator\n    if is_decorator or current_line.is_def or current_line.is_class:\n        if not is_decorator:\n            self.previous_defs.append(current_line.depth)\n        if self.previous_line is None:\n            return 0, 0\n    \n        if self.previous_line and self.previous_line.is_decorator:\n            return 0, 0\n    \n        newlines = 2\n        if current_line.depth:\n            newlines -= 1\n        return newlines, 0\n    \n    if current_line.is_flow_control:\n        return before, 1\n    \n    if (self.previous_line\n            and self.previous_line.is_import\n            and not current_line.is_import\n            and current_line.depth == self.previous_line.depth):\n        return (before or 1), 0\n    \n    if (self.previous_line\n            and self.previous_line.is_yield\n            and (not current_line.is_yield or current_line.depth != self.previous_line.depth)):\n        return (before or 1), 0\n    \n    return before, 0"
        }
    ]
}