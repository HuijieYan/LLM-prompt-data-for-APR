{
    "black": [
        {
            "bugID": 19,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1019,
            "file_name": "black.py",
            "replace_code": "def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:\n    from typing import Tuple\n    if current_line.is_decorator or current_line.is_def or current_line.is_class:\n        return 1, 0  # Add 1 empty line before the current line\n    \n    if current_line.is_flow_control:\n        return 0, 1  # Add 1 empty line after the current line\n    \n    if (\n        self.previous_line\n        and self.previous_line.is_import\n        and not current_line.is_import\n        and current_line.depth == self.previous_line.depth\n    ):\n        return 1, 0  # Add 1 empty line before the current line\n    \n    if (\n        self.previous_line\n        and self.previous_line.is_yield\n        and (not current_line.is_yield or current_line.depth != self.previous_line.depth)\n    ):\n        return 1, 0  # Add 1 empty line before the current line\n    \n    return 0, 0  # No empty lines needed before or after the current line"
        }
    ]
}