{
    "1.1.1": "def _partially_consume_prefix(self, prefix, column):\n    lines = []\n    current_line = \"\"\n    current_column = 0\n    wait_for_nl = False\n    for char in prefix:\n        current_line += char\n        if wait_for_nl:\n            if char == '\\n':\n                if current_line.strip() and current_column < column:\n                    res = ''.join(lines)\n                    return res, prefix[len(res):]\n\n                lines.append(current_line)\n                current_line = \"\"\n                current_column = 0\n                wait_for_nl = False\n        elif char == ' ':\n            current_column += 1\n        elif char == '\\t':\n            current_column += 4\n        elif char == '\\n':\n            # unexpected empty line\n            current_column = 0\n        else:\n            # indent is finished\n            wait_for_nl = True\n    return ''.join(lines), current_line\n",
    "1.1.2": null,
    "1.2.1": "class Driver(object)",
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/black/blib2to3/pgen2/driver.py",
    "1.3.2": null,
    "2.1.1": [
        "    def test_comment_indentation(self) -> None:\n        contents_tab = \"if 1:\\n\\tif 2:\\n\\t\\tpass\\n\\t# comment\\n\\tpass\\n\"\n        contents_spc = \"if 1:\\n    if 2:\\n        pass\\n    # comment\\n    pass\\n\"\n\n        self.assertFormatEqual(fs(contents_spc), contents_spc)\n        self.assertFormatEqual(fs(contents_tab), contents_spc)\n\n        contents_tab = \"if 1:\\n\\tif 2:\\n\\t\\tpass\\n\\t\\t# comment\\n\\tpass\\n\"\n        contents_spc = \"if 1:\\n    if 2:\\n        pass\\n        # comment\\n    pass\\n\"\n\n        self.assertFormatEqual(fs(contents_tab), contents_spc)\n        self.assertFormatEqual(fs(contents_spc), contents_spc)"
    ],
    "2.1.2": [
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/black/tests/test_black.py"
    ],
    "2.2.1": [
        [
            "E   AssertionError: 'if 1:\\n    if 2:\\n        pass\\n        # comment\\n    pass\\n' != 'if 1:\\n    if 2:\\n        pass\\n    # comment\\n    pass\\n'\nE     if 1:\nE         if 2:\nE             pass\nE   -         # comment\nE   ? ----\nE   +     # comment\nE         pass"
        ]
    ],
    "2.2.2": [
        [
            "self = <test_black.BlackTestCase testMethod=test_comment_indentation>\n\n    def test_comment_indentation(self) -> None:\n        contents_tab = \"if 1:\\n\\tif 2:\\n\\t\\tpass\\n\\t# comment\\n\\tpass\\n\"\n        contents_spc = \"if 1:\\n    if 2:\\n        pass\\n    # comment\\n    pass\\n\"\n    \n        self.assertFormatEqual(fs(contents_spc), contents_spc)\n>       self.assertFormatEqual(fs(contents_tab), contents_spc)\n\ntests/test_black.py:517: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/test_black.py:156: in assertFormatEqual\n    self.assertEqual(expected, actual)"
        ]
    ],
    "2.2.3": [
        [
            {
                "prefix": "    # comment\\n    ",
                "column": "8"
            },
            {
                "lines": "[]",
                "current_line": "    # comment\\n",
                "current_column": "4",
                "wait_for_nl": "True",
                "char": "\\n",
                "res": ""
            }
        ],
        [
            {
                "prefix": "",
                "column": "4"
            },
            {
                "lines": "[]",
                "current_line": "",
                "current_column": "0",
                "wait_for_nl": "False"
            }
        ],
        [
            {
                "prefix": "\\t# comment\\n\\t",
                "column": "2"
            },
            {
                "lines": "[]",
                "current_line": "\\t# comment\\n",
                "current_column": "1",
                "wait_for_nl": "True",
                "char": "\\n",
                "res": ""
            }
        ],
        [
            {
                "prefix": "",
                "column": "1"
            },
            {
                "lines": "[]",
                "current_line": "",
                "current_column": "0",
                "wait_for_nl": "False"
            }
        ],
        [
            {
                "prefix": "\\t\\t# comment\\n\\t",
                "column": "2"
            },
            {
                "lines": "['\\t\\t# comment\\n']",
                "current_line": "\\t",
                "current_column": "1",
                "wait_for_nl": "False",
                "char": "\\t"
            }
        ],
        [
            {
                "prefix": "        # comment\\n    ",
                "column": "8"
            },
            {
                "lines": "['        # comment\\n']",
                "current_line": "    ",
                "current_column": "4",
                "wait_for_nl": "False",
                "char": " "
            }
        ]
    ],
    "2.2.4": [
        [
            {
                "prefix": "str",
                "column": "int"
            },
            {
                "lines": "list",
                "current_line": "str",
                "current_column": "int",
                "wait_for_nl": "bool",
                "char": "str",
                "res": "str"
            }
        ],
        [
            {
                "prefix": "str",
                "column": "int"
            },
            {
                "lines": "list",
                "current_line": "str",
                "current_column": "int",
                "wait_for_nl": "bool"
            }
        ],
        [
            {
                "prefix": "str",
                "column": "int"
            },
            {
                "lines": "list",
                "current_line": "str",
                "current_column": "int",
                "wait_for_nl": "bool",
                "char": "str",
                "res": "str"
            }
        ],
        [
            {
                "prefix": "str",
                "column": "int"
            },
            {
                "lines": "list",
                "current_line": "str",
                "current_column": "int",
                "wait_for_nl": "bool"
            }
        ],
        [
            {
                "prefix": "str",
                "column": "int"
            },
            {
                "lines": "list",
                "current_line": "str",
                "current_column": "int",
                "wait_for_nl": "bool",
                "char": "str"
            }
        ],
        [
            {
                "prefix": "str",
                "column": "int"
            },
            {
                "lines": "list",
                "current_line": "str",
                "current_column": "int",
                "wait_for_nl": "bool",
                "char": "str"
            }
        ]
    ],
    "2.2.5": [
        [
            {
                "prefix": "    # comment\\n    ",
                "column": "8"
            },
            {
                "lines": "[]",
                "current_line": "    # comment\\n",
                "current_column": "4",
                "wait_for_nl": "True",
                "char": "\\n",
                "res": ""
            }
        ],
        [
            {
                "prefix": "",
                "column": "4"
            },
            {
                "lines": "[]",
                "current_line": "",
                "current_column": "0",
                "wait_for_nl": "False"
            }
        ],
        [
            {
                "prefix": "\\t# comment\\n\\t",
                "column": "2"
            },
            {
                "lines": "['\\t# comment\\n']",
                "current_line": "\\t",
                "current_column": "4",
                "wait_for_nl": "False",
                "char": "\\t"
            }
        ],
        [
            {
                "prefix": "",
                "column": "1"
            },
            {
                "lines": "[]",
                "current_line": "",
                "current_column": "0",
                "wait_for_nl": "False"
            }
        ],
        [
            {
                "prefix": "        # comment\\n    ",
                "column": "8"
            },
            {
                "lines": "['        # comment\\n']",
                "current_line": "    ",
                "current_column": "4",
                "wait_for_nl": "False",
                "char": " "
            }
        ]
    ],
    "2.2.6": [
        [
            {
                "prefix": "str",
                "column": "int"
            },
            {
                "lines": "list",
                "current_line": "str",
                "current_column": "int",
                "wait_for_nl": "bool",
                "char": "str",
                "res": "str"
            }
        ],
        [
            {
                "prefix": "str",
                "column": "int"
            },
            {
                "lines": "list",
                "current_line": "str",
                "current_column": "int",
                "wait_for_nl": "bool"
            }
        ],
        [
            {
                "prefix": "str",
                "column": "int"
            },
            {
                "lines": "list",
                "current_line": "str",
                "current_column": "int",
                "wait_for_nl": "bool",
                "char": "str"
            }
        ],
        [
            {
                "prefix": "str",
                "column": "int"
            },
            {
                "lines": "list",
                "current_line": "str",
                "current_column": "int",
                "wait_for_nl": "bool"
            }
        ],
        [
            {
                "prefix": "str",
                "column": "int"
            },
            {
                "lines": "list",
                "current_line": "str",
                "current_column": "int",
                "wait_for_nl": "bool",
                "char": "str"
            }
        ]
    ],
    "3.1.1": [
        "Indentation is incorrectly changed for tabulated comments after a dedent\n"
    ],
    "3.1.2": [
        "Operating system: Ubuntu 18.04\nPython version: 3.6.3\nBlack version: master\n\nThank you @ambv for this library. When trying to run this on a codebase that uses tabs, indentation for comments past depth 0 is changed incorrectly after a dedent. Sample input (NB tabs):\n\nif 1:\n\tif 2:\n\t\tpass\n\t# This comment should be indented the same as the next line\n\tpass\nBlack reformats this to:\n\nif 1:\n    if 2:\n        pass\n        # This comment should be indented the same as the next line\n    pass\nNote that this only happens when the input file uses tabs.\n"
    ]
}