{
    "keras": [
        {
            "bugID": 38,
            "bitvector": {
                "1.3.2": 1,
                "1.2.4": 1,
                "1.2.1": 1,
                "1.3.4": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "start_line": 101,
            "file_name": "keras/layers/recurrent.py",
            "replace_code": "class StackedRNNCells(Layer):\n    # class signature containing the buggy function\n    def __init__(self, cells):\n        super(StackedRNNCells, self).__init__()\n        self.cells = cells\n\n    def state_size(self):\n        # Calculate the state size based on the cells' state sizes\n        state_sizes = [cell.state_size for cell in self.cells]\n        return nest.flatten(state_sizes)\n\n    def build(self, input_shape):\n        for cell in self.cells:\n            if isinstance(cell, Layer):\n                cell.build(input_shape)\n            if hasattr(cell.state_size, '__len__'):\n                output_dim = cell.state_size[0]\n            else:\n                output_dim = cell.state_size\n            input_shape = (input_shape[0], input_shape[1], output_dim)\n        self.built = True"
        }
    ]
}