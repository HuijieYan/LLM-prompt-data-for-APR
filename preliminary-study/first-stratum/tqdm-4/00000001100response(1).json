{
    "tqdm": [
        {
            "bugID": 4,
            "bitvector": {
                "1.3.2": 0,
                "1.2.4": 0,
                "1.2.1": 0,
                "1.3.4": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 1,
                "3.1.1": 1,
                "3.1.2": 0,
                "cot": 0
            },
            "start_line": 252,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "def format_meter(self, n, total, elapsed, ncols=None, prefix='', ascii=False,\n                unit='it', unit_scale=False, rate=None, bar_format=None,\n                postfix=None, unit_divisor=1000, **extra_kwargs):\n\n    if total and n > total:\n        total = None\n    if unit_scale and unit_scale not in (True, 1):\n        if total:\n            total *= unit_scale\n        n *= unit_scale\n    format_interval = tqdm.format_interval\n    elapsed_str = format_interval(elapsed)\n    if rate is None and elapsed:\n        rate = n / elapsed\n    if rate :\n        inv_rate = 1 / rate\n    else:\n        inv_rate = None\n    self.format_sizeof = tqdm.format_sizeof\n    if unit_scale:\n        n_fmt = self.format_sizeof(n, divisor=unit_divisor)\n        if total:\n            total_fmt = self.format_sizeof(total, divisor=unit_divisor)\n        else:\n            total_fmt = None\n    else:\n        n_fmt = str(n)\n        total_fmt = str(total)\n    try:\n        if postfix:\n            postfix = ', ' + postfix\n    except TypeError:\n        pass\n    if total:\n        frac = n / total\n        percentage = frac * 100\n        remaining = (total - n) / rate if rate else 0\n        remaining_str = format_interval(remaining) if rate else '?'\n        if prefix:\n            bool_prefix_colon_already = (prefix[-2:] == \": \")\n            l_bar = prefix if bool_prefix_colon_already else prefix + \": \"\n        else:\n            l_bar = ''\n        l_bar += '{0:3.0f}%|'.format(percentage)\n        r_bar = '| {0}/{1} [{2}<{3}, {4}{5}]'.format(n_fmt, total_fmt, elapsed_str, remaining_str, rate, postfix)\n        if ncols == 0:\n            return l_bar[:-1] + r_bar[1:]\n        if bar_format:\n            format_dict = dict(\n                n=n,\n                n_fmt=n_fmt,\n                total=total,\n                total_fmt=total_fmt,\n                percentage=percentage,\n                rate=(inv_rate if inv_rate and inv_rate > 1 else rate),\n                rate_fmt=('{0:5.2f}'.format(rate) if rate else '?') + unit + '/s',\n                rate_noinv=rate,\n                rate_noinv_fmt=((self.format_sizeof(rate) if unit_scale else '{0:5.2f}'.format(rate)) if rate else '?') + unit + '/s',\n                rate_inv=inv_rate,\n                rate_inv_fmt=((self.format_sizeof(inv_rate) if unit_scale else '{0:5.2f}'.format(inv_rate)) if inv_rate else '?') + 's/' + unit,\n                elapsed=elapsed_str,\n                remaining=remaining_str,\n                l_bar=l_bar,\n                r_bar=r_bar,\n                desc=prefix or '',\n                postfix=postfix,\n                unit=unit,\n            )\n            if not prefix:\n                bar_format = bar_format.replace(\"{desc}: \", '')\n            if '{bar}' in bar_format:\n                l_bar_user, r_bar_user = bar_format.split('{bar}')\n                l_bar = l_bar_user.format(**format_dict)\n                r_bar = r_bar_user.format(**format_dict)\n            else:\n                return bar_format.format(**format_dict)\n        if ncols:\n            N_BARS = max(1, ncols - len(RE_ANSI.sub('', l_bar + r_bar)))\n        else:\n            N_BARS = 10\n        if ascii:\n            bar_length, frac_bar_length = divmod(int(frac * N_BARS * 10), 10)\n            bar = '#' * bar_length\n            frac_bar = chr(48 + frac_bar_length) if frac_bar_length else ' '\n        else:\n            bar_length, frac_bar_length = divmod(int(frac * N_BARS * 8), 8)\n            bar = _unich(0x2588) * bar_length\n            frac_bar = _unich(0x2590 - frac_bar_length) if frac_bar_length else ' '\n        if bar_length < N_BARS:\n            full_bar = bar + frac_bar + ' ' * max(N_BARS - bar_length - 1, 0)\n        else:\n            full_bar = bar + ' ' * max(N_BARS - bar_length, 0)\n        return l_bar + full_bar + r_bar\n    else:\n        return ((prefix + \": \") if prefix else '') + '{0}{1} [{2}, {3}{4}]'.format(n_fmt, unit, elapsed_str, rate, postfix)"
        }
    ]
}