{
    "tqdm": [
        {
            "bugID": 4,
            "bitvector": {
                "1.3.1": 1,
                "1.3.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.1.2": 0,
                "2.2.3": 1,
                "2.2.4": 1,
                "2.2.5": 1,
                "2.2.6": 1,
                "2.1.1": 1,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "start_line": 252,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "def format_meter(n, total, elapsed, ncols=None, prefix='', ascii=False,\n                 unit='it', unit_scale=False, rate=None, bar_format=None,\n                 postfix=None, unit_divisor=1000, **extra_kwargs):\n\n    # sanity check: total\n\n    if total is not None and n > total:\n        total = None\n    \n    # apply custom scale if necessary\n    if unit_scale and unit_scale not in (True, 1):\n        if total is not None:\n            total *= unit_scale\n        n *= unit_scale\n        if rate:\n            rate *= unit_scale  # by default rate = 1 / self.avg_time\n        unit_scale = False\n    \n    format_interval = tqdm.format_interval\n    elapsed_str = format_interval(elapsed)\n    \n    # if unspecified, attempt to use rate = average speed\n    # (we allow manual override since predicting time is an arcane art)\n    if rate is None and elapsed:\n        rate = n / elapsed\n    inv_rate = 1 / rate if rate else None\n    format_sizeof = tqdm.format_sizeof\n    rate_noinv_fmt = ((format_sizeof(rate) if unit_scale else\n                       '{0:5.2f}'.format(rate))\n                      if rate else '?') + unit + '/s'\n    rate_inv_fmt = ((format_sizeof(inv_rate) if unit_scale else\n                     '{0:5.2f}'.format(inv_rate))\n                    if inv_rate else '?') + 's/' + unit\n    rate_fmt = rate_inv_fmt if inv_rate and inv_rate > 1 else rate_noinv_fmt\n    \n    if unit_scale and total is not None:\n        n_fmt = format_sizeof(n, divisor=unit_divisor)\n        total_fmt = format_sizeof(total, divisor=unit_divisor)\n    else:\n        n_fmt = str(n)\n        total_fmt = str(total)\n    \n    try:\n        postfix = ', ' + postfix if postfix else ''\n    except TypeError:\n        pass\n    \n    # total is known: we can predict some stats\n    if total:\n        # fractional and percentage progress\n        frac = n / total\n        percentage = frac * 100\n    \n        remaining = (total - n) / rate if rate else 0\n        remaining_str = format_interval(remaining) if rate else '?'"
        }
    ]
}