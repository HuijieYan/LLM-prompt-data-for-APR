<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="1" hostname="boyudeMacBook-Pro.local" name="pytest" skipped="0" tests="1" time="0.171" timestamp="2023-11-15T23:11:46.686358"><testcase classname="test.contrib.redshift_test.TestS3CopyToTable" file="test/contrib/redshift_test.py" line="50" name="test_s3_copy_to_table" time="0.002"><failure message="TypeError: &apos;str&apos; object is not callable">self = &lt;contrib.redshift_test.TestS3CopyToTable testMethod=test_s3_copy_to_table&gt;
mock_redshift_target = &lt;MagicMock name=&apos;RedshiftTarget&apos; id=&apos;4462768528&apos;&gt;
mock_copy = &lt;MagicMock name=&apos;copy&apos; id=&apos;4462883504&apos;&gt;

    @mock.patch(&quot;luigi.contrib.redshift.S3CopyToTable.copy&quot;)
    @mock.patch(&quot;luigi.contrib.redshift.RedshiftTarget&quot;)
    def test_s3_copy_to_table(self, mock_redshift_target, mock_copy):
        task = DummyS3CopyToTable()
&gt;       task.run()

test/contrib/redshift_test.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = DummyS3CopyToTable()

    def run(self):
        &quot;&quot;&quot;
        If the target table doesn&apos;t exist, self.create_table
        will be called to attempt to create the table.
        &quot;&quot;&quot;
        if not (self.table):
            raise Exception(&quot;table need to be specified&quot;)
    
&gt;       path = self.s3_load_path()
E       TypeError: &apos;str&apos; object is not callable

luigi/contrib/redshift.py:166: TypeError</failure></testcase></testsuite></testsuites>