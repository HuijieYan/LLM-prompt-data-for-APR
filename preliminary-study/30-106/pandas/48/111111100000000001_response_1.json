{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    # Get the data to be aggregated\n    data: BlockManager = self._get_data_to_aggregate()\n\n    # Filter data to include only numeric columns if required\n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    # Initialize lists to store aggregated blocks and other relevant data\n    agg_blocks: List[Block] = []\n    new_items: List[np.ndarray] = []\n    deleted_items: List[np.ndarray] = []\n\n    # Iterate through each block and perform the aggregation\n    for block in data.blocks:\n        # Perform aggregation\n        result = self._aggregate_block(block, how, alt, min_count)\n\n        # Handle the result of the aggregation\n        self._handle_aggregation_result(result, block, agg_blocks, new_items, deleted_items)\n\n    # Check if any aggregated blocks or split frames are present\n    if not (agg_blocks or split_frames):\n        raise DataError(\"No numeric types to aggregate\")\n\n    # Handle split blocks if present\n    if split_items:\n        self._handle_split_blocks(split_items, split_frames, new_items, agg_blocks)\n\n    # Reorder the aggregated items according to the current ordering\n    indexer = np.concatenate(new_items)\n    agg_items = data.items.take(np.sort(indexer))\n\n    # Adjust the indexer to account for any removed items\n    if deleted_items:\n        indexer = self._adjust_indexer(indexer, deleted_items, len(data))\n\n    # Update the locs in the blocks to correspond to the current ordering\n    offset = self._update_block_locs(agg_blocks, indexer)\n\n    return agg_blocks, agg_items",
            "imports": []
        }
    ]
}