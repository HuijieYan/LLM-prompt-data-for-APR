{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n) -> \"Tuple[List[Block], Index]\":\n    # ... existing code ...\n\n    from pandas.core.groupby.groupby import _get_data_to_aggregate as get_data_to_aggregate\n    from pandas.core.arrays.integer import _return_true_for_all_not_none\n    from pandas.core.dtypes.common import is_integer_dtype\n\n    data: BlockManager = get_data_to_aggregate(self)\n    \n    if numeric_only:\n        data = data.get_numeric_data(copy=False)\n\n    if _return_true_for_all_not_none([is_integer_dtype(dtype) for dtype in data.dtypes]):\n        # Convert nullable integers to regular integers for aggregation\n        data = data.astype('int')\n\n    # ... existing code ...\n\n    return agg_blocks, agg_items",
            "imports": [
                "from pandas.core.groupby.groupby import _get_data_to_aggregate as get_data_to_aggregate",
                "from pandas.core.arrays.integer import _return_true_for_all_not_none",
                "from pandas.core.dtypes.common import is_integer_dtype"
            ]
        }
    ]
}