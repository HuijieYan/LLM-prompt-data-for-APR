{
    "pandas": [
        {
            "bugID": 48,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "def _cython_agg_blocks(self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1) -> \"Tuple[List[Block], Index]\":\n        data: BlockManager = self._get_data_to_aggregate()\n\n        if numeric_only:\n            data = data.get_numeric_data(copy=False)\n\n        agg_blocks: List[Block] = []\n        new_items: List[np.ndarray] = []\n        deleted_items: List[np.ndarray] = []\n        split_items: List[np.ndarray] = []\n        split_frames: List[DataFrame] = []\n\n        no_result = object()\n        for block in data.blocks:\n            result = no_result\n            locs = block.mgr_locs.as_array\n            try:\n                result, _ = self.grouper.aggregate(block.values, how, axis=1, min_count=min_count)\n            except Exception:\n                # error handling details omitted for brevity\n                continue\n\n            if isinstance(result, DataFrame):\n                # code for DataFrame result omitted for brevity\n                continue\n\n            if result is not no_result:\n                result = maybe_downcast_numeric(result, block.dtype)\n                agg_block: Block = block.make_block(result)\n                new_items.append(locs)\n                agg_blocks.append(agg_block)\n\n        if not (agg_blocks or split_frames):\n            raise DataError(\"No numeric types to aggregate\")\n\n        if split_items:\n            # Clean up the mess left over from split blocks.\n            for locs, result in zip(split_items, split_frames):\n                # code for cleaning up split blocks omitted for brevity\n                continue\n\n        indexer = np.concatenate(new_items)\n        agg_items = data.items.take(np.sort(indexer))\n\n        if deleted_items:\n            # code for handling deleted items omitted for brevity\n            continue\n\n        offset = 0\n        for blk in agg_blocks:\n            loc = len(blk.mgr_locs)\n            blk.mgr_locs = indexer[offset : (offset + loc)]\n            offset += loc\n\n        return agg_blocks, agg_items",
            "imports": []
        }
    ]
}