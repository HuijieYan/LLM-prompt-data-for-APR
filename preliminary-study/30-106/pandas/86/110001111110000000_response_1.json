{
    "pandas": [
        {
            "bugID": 86,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 429,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot(data: \"DataFrame\", index=None, columns=None, values=None) -> \"DataFrame\":\n    if columns is None:   # Add check for 'columns' instead of 'values'\n        cols = [index]  # Swap index and columns\n        append = False  # Set append to False\n        indexed = data.set_index(cols, append=append)\n    else:\n        if index is None:\n            index = data.index\n        else:\n            index = data[index]\n        index = pd.MultiIndex.from_arrays([index, data[columns]])  # Specify pd before MultiIndex\n\n        if pd.api.types.is_list_like(values) and not isinstance(values, tuple):  # Specify pd.api.types before is_list_like\n            # Exclude tuple because it is seen as a single column name\n            indexed = data._constructor(data[values].values, index=index, columns=values)  # Specify pd before _constructor\n        else:\n            indexed = data._constructor_sliced(data[values].values, index=index)  # Specify pd before _constructor_sliced\n    return indexed.unstack(columns)",
            "imports": []
        }
    ]
}