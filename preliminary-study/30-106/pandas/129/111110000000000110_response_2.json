{
    "pandas": [
        {
            "bugID": 129,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 1302,
            "file_name": "pandas/core/arrays/datetimelike.py",
            "replace_code": "def __rsub__(self, other):\n        if is_datetime64_any_dtype(other) and is_timedelta64_dtype(self.dtype):\n            # ndarray[datetime64] cannot be subtracted from self, so\n            # we need to wrap in DatetimeArray/Index and flip the operation\n            if not isinstance(other, DatetimeLikeArrayMixin):\n                # Avoid down-casting DatetimeIndex\n                from pandas.core.arrays import DatetimeArray\n    \n                other = DatetimeArray(other)\n            return other - self\n        elif (\n            is_datetime64_any_dtype(self.dtype)\n            and hasattr(other, \"dtype\")\n            and not is_datetime64_any_dtype(other.dtype)\n        ):\n            # GH#19959 datetime - datetime is well-defined as timedelta,\n            # but any other type - datetime is not well-defined.\n            raise TypeError(\n                \"cannot subtract {cls} from {typ}\".format(\n                    cls=type(self).__name__, typ=type(other).__name__\n                )\n            )\n        elif is_period_dtype(self.dtype) and is_timedelta64_dtype(other):\n            # TODO: Can we simplify/generalize these cases at all?\n            raise TypeError(\n                \"cannot subtract {cls} from {dtype}\".format(\n                    cls=type(self).__name__, dtype=other.dtype\n                )\n            )\n        elif is_timedelta64_dtype(self.dtype):\n            if lib.is_integer(other) or is_integer_dtype(other):\n                # need to subtract before negating, since that flips freq\n                # -self flips self.freq, messing up results\n                return -(self - other)\n    \n            return (-self) + other\n    \n        return other - self",
            "imports": [
                "from pandas.core.arrays import DatetimeArray"
            ]
        }
    ]
}