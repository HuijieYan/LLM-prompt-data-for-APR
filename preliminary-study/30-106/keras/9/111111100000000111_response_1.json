{
    "keras": [
        {
            "bugID": 9,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 117,
            "file_name": "docs/autogen.py",
            "replace_code": "def process_list_block(docstring, starting_point, section_end, leading_spaces, marker):\n    ending_point = docstring.find('\\n\\n', starting_point)\n    block = docstring[starting_point:(None if ending_point == -1 else ending_point - 1)]\n    \n    # Place marker for later reinjection.\n    docstring_slice = docstring[starting_point:section_end].replace(block, marker)\n    docstring = (docstring[:starting_point] + docstring_slice + docstring[section_end:])\n    \n    lines = block.split('\\n')\n    \n    # Remove the computed number of leading white spaces from each line.\n    lines = [re.sub('^' + ' ' * leading_spaces, '', line) for line in lines]\n    \n    # Process list formatting\n    indent = 4\n    for i in range(len(lines)):\n        # Detect list root and add formatting\n        lines[i] = re.sub(r'^    ([^\\s\\\\\\(]+):(.*)', r'- __\\1__:\\2', lines[i])\n        \n        # Remove 4 leading spaces from each line\n        lines[i] = re.sub(r'^    ', '', lines[i])\n    \n    # Fix text lines after lists\n    for i in range(1, len(lines)):\n        # Add new line after list element\n        if lines[i].strip().startswith('-'):\n            lines[i] = '\\n' + lines[i]\n        # Remove excess spaces\n        else:\n            lines[i] = lines[i].lstrip()\n\n    block = '\\n'.join(lines)\n    \n    return docstring, block",
            "imports": [
                "import re"
            ]
        }
    ]
}