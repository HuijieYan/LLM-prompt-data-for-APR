<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="1" hostname="boyudeMacBook-Pro.local" name="pytest" skipped="0" tests="1" time="7.585" timestamp="2023-11-15T23:11:34.423564"><testcase classname="tests.keras.layers.recurrent_test" file="tests/keras/layers/recurrent_test.py" line="508" name="test_minimal_rnn_cell_layer" time="0.582"><failure message="assert 3 == 2
  +3
  -2">@keras_test
    def test_minimal_rnn_cell_layer():
    
        class MinimalRNNCell(keras.layers.Layer):
    
            def __init__(self, units, **kwargs):
                self.units = units
                self.state_size = units
                super(MinimalRNNCell, self).__init__(**kwargs)
    
            def build(self, input_shape):
                # no time axis in the input shape passed to RNN cells
                assert len(input_shape) == 2
    
                self.kernel = self.add_weight(shape=(input_shape[-1], self.units),
                                              initializer=&apos;uniform&apos;,
                                              name=&apos;kernel&apos;)
                self.recurrent_kernel = self.add_weight(
                    shape=(self.units, self.units),
                    initializer=&apos;uniform&apos;,
                    name=&apos;recurrent_kernel&apos;)
                self.built = True
    
            def call(self, inputs, states):
                prev_output = states[0]
                h = keras.backend.dot(inputs, self.kernel)
                output = h + keras.backend.dot(prev_output, self.recurrent_kernel)
                return output, [output]
    
            def get_config(self):
                config = {&apos;units&apos;: self.units}
                base_config = super(MinimalRNNCell, self).get_config()
                return dict(list(base_config.items()) + list(config.items()))
    
        # Test basic case.
        x = keras.Input((None, 5))
        cell = MinimalRNNCell(32)
        layer = recurrent.RNN(cell)
        y = layer(x)
        model = keras.models.Model(x, y)
        model.compile(optimizer=&apos;rmsprop&apos;, loss=&apos;mse&apos;)
        model.train_on_batch(np.zeros((6, 5, 5)), np.zeros((6, 32)))
    
        # Test basic case serialization.
        x_np = np.random.random((6, 5, 5))
        y_np = model.predict(x_np)
        weights = model.get_weights()
        config = layer.get_config()
        with keras.utils.CustomObjectScope({&apos;MinimalRNNCell&apos;: MinimalRNNCell}):
            layer = recurrent.RNN.from_config(config)
        y = layer(x)
        model = keras.models.Model(x, y)
        model.set_weights(weights)
        y_np_2 = model.predict(x_np)
        assert_allclose(y_np, y_np_2, atol=1e-4)
    
        # Test stacking.
        cells = [MinimalRNNCell(8),
                 MinimalRNNCell(12),
                 MinimalRNNCell(32)]
        layer = recurrent.RNN(cells)
&gt;       y = layer(x)

tests/keras/layers/recurrent_test.py:570: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
keras/layers/recurrent.py:488: in __call__
    return super(RNN, self).__call__(inputs, **kwargs)
keras/engine/topology.py:590: in __call__
    self.build(input_shapes[0])
keras/layers/recurrent.py:450: in build
    self.cell.build(step_input_shape)
keras/layers/recurrent.py:104: in build
    cell.build(input_shape)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;recurrent_test.test_minimal_rnn_cell_layer.&lt;locals&gt;.MinimalRNNCell object at 0x7f8ee1056890&gt;
input_shape = (None, 5, 8)

    def build(self, input_shape):
        # no time axis in the input shape passed to RNN cells
&gt;       assert len(input_shape) == 2
E       assert 3 == 2
E         +3
E         -2

tests/keras/layers/recurrent_test.py:521: AssertionError</failure></testcase></testsuite></testsuites>