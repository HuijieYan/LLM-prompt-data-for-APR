{
    "matplotlib": [
        {
            "bugID": 22,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 6338,
            "file_name": "lib/matplotlib/axes/_axes.py",
            "replace_code": "def hist(self, x, bins=None, range=None, density=False, weights=None,\n         cumulative=False, bottom=None, histtype='bar', align='mid',\n         orientation='vertical', rwidth=None, log=False,\n         color=None, label=None, stacked=False, **kwargs):\n    \"\"\"\n    Plot a histogram.\n\n    Compute and draw the histogram of *x*. The return value is a tuple\n    (*n*, *bins*, *patches*) or ([*n0*, *n1*, ...], *bins*, [*patches0*,\n    *patches1*,...]) if the input contains multiple data. See the\n    documentation of the *weights* parameter to draw a histogram of\n    already-binned data.\n\n    Multiple data can be provided via *x* as a list of datasets\n    of potentially different length ([*x0*, *x1*, ...]), or as\n    a 2-D ndarray in which each column is a dataset. Note that\n    the ndarray form is transposed relative to the list form.\n\n    Masked arrays are not supported.\n\n    Parameters\n    ----------\n    x : (n,) array or sequence of (n,) arrays\n        Input values, this takes either a single array or a sequence of\n        arrays which are not required to be of the same length.\n\n    bins : int or sequence or str, optional\n        If *bins* is an integer, it defines the number of equal-width bins\n        in the range.\n\n        If *bins* is a sequence, it defines the bin edges, including the\n        left edge of the first bin and the right edge of the last bin;\n        in this case, bins may be unequally spaced. All but the last\n        (righthand-most) bin is half-open. In other words, if *bins* is::\n\n            [1, 2, 3, 4]\n\n        then the first bin is [1, 2) (including 1, but excluding 2) and\n        the second [2, 3). The last bin, however, is [3, 4], which\n        *includes* 4.\n\n        If *bins* is a string, it is one of the binning strategies\n        supported by `numpy.histogram_bin_edges`: 'auto', 'fd', 'doane',\n        'scott', 'stone', 'rice', 'sturges', or 'sqrt'.\n\n        The default is :rc:`hist.bins`.\n\n    range : tuple or None, optional\n        The lower and upper range of the bins. Lower and upper outliers\n        are ignored. If not provided, *range* is (x.min(), x.max()).\n        Range has no effect if *bins* is a sequence.\n\n        If *bins* is a sequence or *range* is specified, autoscaling\n        is based on the specified bin range instead of the\n        range of x.\n\n        Default is ``None``\n\n    density : bool, optional\n        If ``True``, the first element of the return tuple will\n        be the counts normalized to form a probability density, i.e.,\n        the area (or integral) under the histogram will sum to 1.\n        This is achieved by dividing the count by the number of\n        observations times the bin width and not dividing by the total\n        number of observations. If *stacked* is also ``True``, the sum of\n        the histograms is normalized to 1.\n\n        Default is ``False``.\n\n    weights : (n, ) array-like or None, optional\n        An array of weights, of the same shape as *x*. Each value in *x*\n        only contributes its associated weight towards the bin count\n        (instead of 1). If *normed* or *density* is ``True``,\n        the weights are normalized, so that the integral of the density\n        over the range remains 1.\n\n        Default is ``None``.\n\n        This parameter can be used to draw a histogram of data that has\n        already been binned, e.g. using `np.histogram` (by treating each\n        bin as a single point with a weight equal to its count) ::\n\n            counts, bins = np.histogram(data)\n            plt.hist(bins[:-1], bins, weights=counts)\n\n        (or you may alternatively use `~.bar()`).\n\n    cumulative : bool or -1, optional\n        If ``True``, then a histogram is computed where each bin gives the\n        counts in that bin plus all bins for smaller values. The last bin\n        gives the total number of datapoints.\n\n        If *density* is also ``True`` then the histogram is normalized such\n        that the last bin equals 1.\n\n        If *cumulative* is a number less than 0 (e.g., -1), the direction\n        of accumulation is reversed. In this case, if *density* is also\n        ``True``, then the histogram is normalized such that the first bin\n        equals 1.\n\n        Default is ``False``\n\n    <more details here>\n\n    Returns\n    -------\n    n : array or list of arrays\n        The values of the histogram bins. See *density* and *weights* for a\n        description of the possible semantics.  If input *x* is an array,\n        then this is an array of length *nbins*. If input is a sequence of\n        arrays ``[data1, data2, ...]``, then this is a list of arrays with\n        the values of the histograms for each of the arrays in the same\n        order.  The dtype of the array *n* (or of its element arrays) will\n        always be float even if no weighting or normalization is used.\n\n    bins : array\n        The edges of the bins. Length nbins + 1 (nbins left edges and right\n        edge of last bin).  Always a single array even when multiple data\n        sets are passed in.\n\n    patches : list or list of lists\n        Silent list of individual patches used to create the histogram\n        or list of such list if multiple input datasets.\n\n    Other Parameters\n    ----------------\n    **kwargs : `~matplotlib.patches.Patch` properties\n\n    See also\n    --------\n    hist2d : 2D histograms\n\n    \"\"\"",
            "imports": [
                "from datetime import datetime",
                "import numpy as np"
            ]
        }
    ]
}