{
    "matplotlib": [
        {
            "bugID": 22,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 6338,
            "file_name": "lib/matplotlib/axes/_axes.py",
            "replace_code": "def hist(self, x, bins=None, range=None, density=False, weights=None,\n         cumulative=False, bottom=None, histtype='bar', align='mid',\n         orientation='vertical', rwidth=None, log=False,\n         color=None, label=None, stacked=False, **kwargs):\n    \"\"\"\n    Plot a histogram.\n\n    Compute and draw the histogram of *x*.  The return value is a tuple\n    (*n*, *bins*, *patches*) or ([*n0*, *n1*, ...], *bins*, [*patches0*,\n    *patches1*,...]) if the input contains multiple data.  See the\n    documentation of the *weights* parameter to draw a histogram of\n    already-binned data.\n\n    Multiple data can be provided via *x* as a list of datasets\n    of potentially different length ([*x0*, *x1*, ...]), or as\n    a 2-D ndarray in which each column is a dataset.  Note that\n    the ndarray form is transposed relative to the list form.\n\n    Masked arrays are not supported.\n\n    The *bins*, *range*, *weights*, and *density* parameters behave as in\n    `numpy.histogram`.\n\n    Parameters\n    ----------\n    x : (n,) array or sequence of (n,) arrays\n        Input values, this takes either a single array or a sequence of\n        arrays which are not required to be of the same length.\n\n    bins : int or sequence or str, optional\n        If *bins* is an integer, it defines the number of equal-width bins\n        in the range.\n        \n        ...\n\n    range : tuple or None, optional\n        The lower and upper range of the bins. Lower and upper outliers\n        are ignored. If not provided, *range* is ``(x.min(), x.max())``.\n        Range has no effect if *bins* is a sequence.\n        \n        ...\n\n    density : bool, optional\n        If ``True``, the first element of the return tuple will\n        be the counts normalized to form a probability density, i.e.,\n        the area (or integral) under the histogram will sum to 1.\n        This is achieved by dividing the count by the number of\n        observations times the bin width and not dividing by the total\n        number of observations. If *stacked* is also ``True``, the sum of\n        the histograms is normalized to 1.\n        \n        ...\n\n    weights : (n, ) array-like or None, optional\n        An array of weights, of the same shape as *x*.  Each value in *x*\n        only contributes its associated weight towards the bin count\n        (instead of 1).  If *normed* or *density* is ``True``,\n        the weights are normalized, so that the integral of the density\n        over the range remains 1.\n        \n        ...\n\n    cumulative : bool or -1, optional\n        If ``True``, then a histogram is computed where each bin gives the\n        counts in that bin plus all bins for smaller values. The last bin\n        gives the total number of datapoints.\n        \n        ...\n\n    bottom : array-like, scalar, or None\n        Location of the bottom baseline of each bin.  If a scalar,\n        the base line for each bin is shifted by the same amount.\n        If an array, each bin is shifted independently and the length\n        of *bottom* must match the number of bins.  If None, defaults to 0.\n        \n        ...\n\n    histtype : {'bar', 'barstacked', 'step',  'stepfilled'}, optional\n        The type of histogram to draw.\n        \n        ...\n\n    align : {'left', 'mid', 'right'}, optional\n        Controls how the histogram is plotted.\n        \n        ...\n\n    orientation : {'horizontal', 'vertical'}, optional\n        If 'horizontal', `~matplotlib.pyplot.barh` will be used for\n        bar-type histograms and the *bottom* kwarg will be the left edges.\n        \n        ...\n\n    rwidth : scalar or None, optional\n        The relative width of the bars as a fraction of the bin width.  If\n        ``None``, automatically compute the width.\n        \n        ...\n\n    log : bool, optional\n        If ``True``, the histogram axis will be set to a log scale. If\n        *log* is ``True`` and *x* is a 1D array, empty bins will be\n        filtered out and only the non-empty ``(n, bins, patches)``\n        will be returned.\n        \n        ...\n\n    color : color or array-like of colors or None, optional\n        Color or sequence of colors, one per dataset.  Default (``None``)\n        uses the standard line color sequence.  \n        \n        Default is ``None``\n\n    label : str or None, optional\n        ...\n\n    stacked : bool, optional\n        If ``True``, multiple data are stacked on top of each other If\n        ``False`` multiple data are arranged side by side if histtype is\n        'bar' or on top of each other if histtype is 'step'\n        \n        ...\n\n    Returns\n    -------\n    n : array or list of arrays\n        The values of the histogram bins. See *density* and *weights* for a\n        description of the possible semantics.  If input *x* is an array,\n        then this is an array of length *nbins*. If input is a sequence of\n        arrays ``[data1, data2, ...]``, then this is a list of arrays with\n        the values of the histograms for each of the arrays in the same\n        order.  The dtype of the array *n* (or of its element arrays) will\n        always be float even if no weighting or normalization is used.\n        \n        ...\n\n    bins : array\n        The edges of the bins. Length nbins + 1 (nbins left edges and right\n        edge of last bin).  Always a single array even when multiple data\n        sets are passed in.\n        \n        ...\n\n    patches : list or list of lists\n        Silent list of individual patches used to create the histogram\n        or list of such list if multiple input datasets.\n        \n        ...\n\n    Other Parameters\n    ----------------\n    **kwargs : `~matplotlib.patches.Patch` properties\n\n    See also\n    --------\n    hist2d : 2D histograms\n\n    \"\"\"\n    import numpy as np\n    \n    if np.isscalar(x):\n        x = [x]\n\n    if bins is None:\n        bins = rcParams['hist.bins']\n        try:\n            bins = int(bins)\n        except:\n            # handle the case if bins is not an int or a sequence\n            raise ValueError('bins should be an int or a sequence of ints for histogram edges')\n\n    # ... (existing code)\n\n    if color is None:\n        color = [self._get_lines.get_next_color() for i in range(nx)]\n\n    # ... (existing code)\n\n    hist_kwargs = dict()\n    \n    if bin_range is None:\n        mask = ~np.isnan(x)\n        xmin = np.nanmin(x[mask])\n        xmax = np.nanmax(x[mask])\n        bin_range = (xmin, xmax)\n\n    # If bins are not specified either explicitly or via range,\n    # we need to figure out the range required for all datasets,\n    # and supply that to np.histogram.\n\n    # ... (existing code)\n\n    tops = np.empty((nx, len(bins)-1), float)\n\n    # Loop through datasets\n    for i in range(nx):\n        m, _ = np.histogram(x[i], bins, weights=w[i], **hist_kwargs)\n        tops[i] = m\n\n    patches = __plot_histogram(self, tops, bins, \n                               bottom, histtype, align, \n                               orientation, log, color, \n                               label, stacked, **kwargs)\n\n    if nx == 1:\n        return np.squeeze(tops), bins, cbook.silent_list('Patch', patches)\n    else:\n        return tops, bins, cbook.silent_list('Lists of Patches', patches)",
            "imports": [
                "import numpy as np"
            ]
        }
    ]
}