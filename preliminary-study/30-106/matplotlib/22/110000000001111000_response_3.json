{
    "matplotlib": [
        {
            "bugID": 22,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 6338,
            "file_name": "lib/matplotlib/axes/_axes.py",
            "replace_code": "def hist(self, x, bins=None, range=None, density=False, weights=None, cumulative=False, bottom=None, histtype='bar', align='mid', orientation='vertical', rwidth=None, log=False, color=None, label=None, stacked=False, **kwargs):\n    # Avoid shadowing the builtin.\n    bin_range = range\n\n    if np.isscalar(x):\n        x = [x]\n\n    if bins is None:\n        bins = self.rcParams['hist.bins']\n\n    # Validate string inputs here to avoid cluttering subsequent code.\n    self.cbook._check_in_list(['bar', 'barstacked', 'step', 'stepfilled'], histtype=histtype)\n    self.cbook._check_in_list(['left', 'mid', 'right'], align=align)\n    self.cbook._check_in_list(['horizontal', 'vertical'], orientation=orientation)\n\n    if histtype == 'barstacked' and not stacked:\n        stacked = True\n\n    input_empty = np.size(x) == 0\n    x = np.array([xi for xi in x])\n    nx = len(x)  # number of datasets\n\n    self._process_unit_info(x[0], kwargs)\n    x = [self.convert_xunits(xi) for xi in x]\n\n    if bin_range is not None:\n        bin_range = self.convert_xunits(bin_range)\n\n    if weights is not None:\n        w = np.array(weights)\n        w = w.reshape(1, -1) if w.ndim == 1 else w\n    else:\n        w = np.array([None] * nx)\n\n    if w.shape[0] != nx:\n        raise ValueError('weights should have the same shape as x')\n\n    color = np.array([self._get_lines.colors.get_next_color() for i in range(nx)])\n    \n    hist_kwargs = dict()\n\n    if bin_range is None:\n        xmin = np.inf\n        xmax = -np.inf\n        for xi in x:\n            if len(xi):\n                xmin = min(xmin, np.nanmin(xi))\n                xmax = max(xmax, np.nanmax(xi))\n        if not np.isnan([xmin, xmax]).any() and not (xmin > xmax):\n            bin_range = (xmin, xmax)\n\n    if input_empty and len(x) > 1:\n        if weights is not None:\n            _w = np.concatenate(w)\n        else:\n            _w = None\n\n        bins = np.histogram_bin_edges(np.concatenate(x), bins, bin_range, _w)\n    else:\n        hist_kwargs['range'] = bin_range\n\n    density = bool(density)\n    if density and not stacked:\n        hist_kwargs['density'] = density\n\n    tops = np.array([np.histogram(xi, bins, weights=wi, **hist_kwargs)[0] for xi, wi in zip(x, w)]).T\n    if stacked:\n        tops = tops.cumsum(axis=1)\n        if density:\n            tops = (tops / np.diff(bins)) / tops[-1].sum()\n    if cumulative:\n        tops = np.cumsum(tops, axis=1)\n\n    patches = []\n\n    _saved_autoscalex = self.get_autoscalex_on()\n    _saved_autoscaley = self.get_autoscaley_on()\n    self.set_autoscalex_on(False)\n    self.set_autoscaley_on(False)\n\n    if histtype.startswith('bar'):\n        totwidth = np.diff(bins)\n\n        if rwidth is not None:\n            dr = np.clip(rwidth, 0, 1)\n        elif (tops.shape[1] > 1 and ((not stacked) or self.rcParams['_internal.classic_mode'])):\n            dr = 0.8\n        else:\n            dr = 1.0\n\n        if histtype == 'bar' and not stacked:\n            width = dr * totwidth / nx\n            dw = width\n            boffset = -0.5 * dr * totwidth * (1 - 1 / nx)\n        elif histtype == 'barstacked' or stacked:\n            width = dr * totwidth\n            boffset, dw = 0.0, 0.0\n\n        if align == 'mid':\n            boffset += 0.5 * totwidth\n        elif align == 'right':\n            boffset += totwidth\n\n        if orientation == 'horizontal':\n            self.barh(bins[:-1]+boffset, np.diff(bins), align='center', log=log, color=color, bottom=0)\n        else:\n            self.bar(bins[:-1]+boffset, np.diff(bins), width=width, align='center', log=log, color=color, bottom=0)\n        \n    self.set_autoscalex_on(_saved_autoscalex)\n    self.set_autoscaley_on(_saved_autoscaley)\n\n    if isinstance(label, str):\n        labels = [label]\n    elif label is not None and not np.iterable(label):\n        labels = [str(label)]\n    else:\n        labels = [str(lab) for lab in label]\n\n    if label is not None:\n        for patch, lbl in zip(patches, labels):\n            for p in patch.patches:\n                p.set_label(lbl)\n\n    if nx == 1:\n        return tops[0], bins, [patches]\n    else:\n        return tops, bins, [patches]",
            "imports": [
                "import numpy as np"
            ]
        }
    ]
}