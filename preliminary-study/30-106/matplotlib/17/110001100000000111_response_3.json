{
    "matplotlib": [
        {
            "bugID": 17,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2758,
            "file_name": "lib/matplotlib/transforms.py",
            "replace_code": "def nonsingular(vmin, vmax, expander=0.001, tiny=1e-15, increasing=True):\n    # check for inf or NaN inputs\n    if (not np.isfinite(vmin)) or (not np.isfinite(vmax)):\n        return -expander, expander\n\n    # swap vmin and vmax if increasing is False and vmin is greater than vmax\n    if not increasing and vmin > vmax:\n        vmin, vmax = vmax, vmin\n\n    # calculate the maximum absolute value of vmin and vmax\n    maxabsvalue = max(abs(vmin), abs(vmax))\n\n    # check the interval size against the threshold and expand if necessary\n    if vmax - vmin <= maxabsvalue * tiny:\n        if abs(vmax - vmin) <= maxabsvalue * tiny:\n            if abs(vmax) <= tiny and abs(vmin) <= tiny:\n                vmin = -expander\n                vmax = expander\n            else:\n                vmin -= expander * abs(vmin)\n                vmax += expander * abs(vmax)\n\n    if not increasing and vmin > vmax:\n        vmin, vmax = vmax, vmin\n\n    return vmin, vmax",
            "imports": [
                "import numpy as np"
            ]
        }
    ]
}