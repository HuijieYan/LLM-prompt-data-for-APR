{
    "1.1.1": "@Substitution(\n    **dict(\n        _index_doc_kwargs,\n        **{\n            \"raises_section\": textwrap.dedent(\n                \"\"\"\n    Raises\n    ------\n    NotImplementedError\n        If any method argument other than the default of\n        None is specified as these are not yet implemented.\n    \"\"\"\n            )\n        },\n    )\n)\n@Appender(_index_shared_docs[\"get_indexer\"])\ndef get_indexer(\n    self,\n    target: AnyArrayLike,\n    method: Optional[str] = None,\n    limit: Optional[int] = None,\n    tolerance: Optional[Any] = None,\n) -> np.ndarray:\n\n    self._check_method(method)\n\n    if self.is_overlapping:\n        msg = (\n            \"cannot handle overlapping indices; use \"\n            \"IntervalIndex.get_indexer_non_unique\"\n        )\n        raise InvalidIndexError(msg)\n\n    target_as_index = ensure_index(target)\n\n    if isinstance(target_as_index, IntervalIndex):\n        # equal indexes -> 1:1 positional match\n        if self.equals(target_as_index):\n            return np.arange(len(self), dtype=\"intp\")\n\n        # different closed or incompatible subtype -> no matches\n        common_subtype = find_common_type(\n            [self.dtype.subtype, target_as_index.dtype.subtype]\n        )\n        if self.closed != target_as_index.closed or is_object_dtype(common_subtype):\n            return np.repeat(np.intp(-1), len(target_as_index))\n\n        # non-overlapping -> at most one match per interval in target_as_index\n        # want exact matches -> need both left/right to match, so defer to\n        # left/right get_indexer, compare elementwise, equality -> match\n        left_indexer = self.left.get_indexer(target_as_index.left)\n        right_indexer = self.right.get_indexer(target_as_index.right)\n        indexer = np.where(left_indexer == right_indexer, left_indexer, -1)\n    elif not is_object_dtype(target_as_index):\n        # homogeneous scalar index: use IntervalTree\n        target_as_index = self._maybe_convert_i8(target_as_index)\n        indexer = self._engine.get_indexer(target_as_index.values)\n    else:\n        # heterogeneous scalar index: defer elementwise to get_loc\n        # (non-overlapping so get_loc guarantees scalar of KeyError)\n        indexer = []\n        for key in target_as_index:\n            try:\n                loc = self.get_loc(key)\n            except KeyError:\n                loc = -1\n            indexer.append(loc)\n\n    return ensure_platform_int(indexer)\n",
    "1.1.2": null,
    "1.2.1": "@Appender(_interval_shared_docs['class'] % dict(klass='IntervalIndex', summary='Immutable index of intervals that are closed on the same side.', name=_index_doc_kwargs['name'], versionadded='0.20.0', extra_attributes='is_overlapping\\nvalues\\n', extra_methods='', examples=textwrap.dedent(\"    Examples\\n    --------\\n    A new ``IntervalIndex`` is typically constructed using\\n    :func:`interval_range`:\\n\\n    >>> pd.interval_range(start=0, end=5)\\n    IntervalIndex([(0, 1], (1, 2], (2, 3], (3, 4], (4, 5]],\\n                  closed='right',\\n                  dtype='interval[int64]')\\n\\n    It may also be constructed using one of the constructor\\n    methods: :meth:`IntervalIndex.from_arrays`,\\n    :meth:`IntervalIndex.from_breaks`, and :meth:`IntervalIndex.from_tuples`.\\n\\n    See further examples in the doc strings of ``interval_range`` and the\\n    mentioned constructor methods.\\n    \")))\nclass IntervalIndex(IntervalMixin, Index)",
    "1.2.2": null,
    "1.2.3": [
        "_engine(self)",
        "left(self)",
        "right(self)",
        "closed(self)",
        "values(self)",
        "dtype(self)",
        "is_overlapping(self)",
        "_maybe_convert_i8(self, key)",
        "_check_method(self, method)",
        "get_loc(self, key: Any, method: Optional[str]=None, tolerance=None) -> Union[int, slice, np.ndarray]",
        "get_indexer(self, target: AnyArrayLike, method: Optional[str]=None, limit: Optional[int]=None, tolerance: Optional[Any]=None) -> np.ndarray",
        "where(self, cond, other=None)",
        "equals(self, other) -> bool"
    ],
    "1.3.1": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/core/indexes/interval.py",
    "1.3.2": [
        "_engine(self)",
        "left(self)",
        "right(self)",
        "closed(self)",
        "values(self)",
        "dtype(self)",
        "is_overlapping(self)",
        "_maybe_convert_i8(self, key)",
        "_check_method(self, method)",
        "get_loc(self, key: Any, method: Optional[str]=None, tolerance=None) -> Union[int, slice, np.ndarray]",
        "get_indexer(self, target: AnyArrayLike, method: Optional[str]=None, limit: Optional[int]=None, tolerance: Optional[Any]=None) -> np.ndarray",
        "where(self, cond, other=None)",
        "equals(self, other) -> bool"
    ],
    "2.1.1": [
        "    def test_round_interval_category_columns(self):\n        # GH 30063\n        columns = pd.CategoricalIndex(pd.interval_range(0, 2))\n        df = DataFrame([[0.66, 1.1], [0.3, 0.25]], columns=columns)\n\n        result = df.round()\n        expected = DataFrame([[1.0, 1.0], [0.0, 0.0]], columns=columns)\n        tm.assert_frame_equal(result, expected)"
    ],
    "2.1.2": [
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/frame/test_analytics.py"
    ],
    "2.2.1": [
        [
            "E   TypeError: No matching signature found"
        ]
    ],
    "2.2.2": [
        [
            "self = <pandas.tests.frame.test_analytics.TestDataFrameAnalytics object at 0x11c3c0ee0>\n\n    def test_round_interval_category_columns(self):\n        # GH 30063\n        columns = pd.CategoricalIndex(pd.interval_range(0, 2))\n        df = DataFrame([[0.66, 1.1], [0.3, 0.25]], columns=columns)\n    \n>       result = df.round()\n\npandas/tests/frame/test_analytics.py:2280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/frame.py:7127: in round\n    return self._constructor(\npandas/core/frame.py:416: in __init__\n    mgr = self._init_mgr(\npandas/core/generic.py:219: in _init_mgr\n    mgr = mgr.reindex_axis(\npandas/core/internals/managers.py:1186: in reindex_axis\n    new_index, indexer = self.axes[axis].reindex(\npandas/core/indexes/base.py:3200: in reindex\n    indexer = self.get_indexer(\npandas/core/indexes/interval.py:964: in get_indexer\n    indexer = self._engine.get_indexer(target_as_index.values)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   def get_indexer(self, scalar_t[:] target):",
            "\npandas/_libs/intervaltree.pxi:154: TypeError"
        ]
    ],
    "2.2.3": [
        [
            {},
            {}
        ]
    ],
    "2.2.4": [
        [
            {},
            {}
        ]
    ],
    "2.2.5": [
        [
            {},
            {}
        ]
    ],
    "2.2.6": [
        [
            {},
            {}
        ]
    ],
    "3.1.1": [
        "round method fails when columns are CategoricalIndex of IntervalIndex\n"
    ],
    "3.1.2": [
        "Code Sample, a copy-pastable example if possible\ncols = pd.interval_range(0, 2)\ndata = np.random.rand(5, 2)\n\ndf = pd.DataFrame(data, columns=cols)\ndf.round() # works\n\ncols2 = pd.CategoricalIndex(cols)\ndf2 = pd.DataFrame(data, columns=cols2)\ndf2.round() # fails\n\nTypeError: No matching signature found\nProblem description\nThe round method fails whenever the columns are CategoricalIndex made from an IntervalIndex. The pd.cut function creates these types of value and they can appear in columns when using pivot_table.\n\nExpected Output\nShould round as normal.\n"
    ]
}