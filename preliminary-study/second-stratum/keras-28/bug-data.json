{
    "keras:28": {
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/keras/keras/preprocessing/sequence.py": {
            "buggy_functions": [
                {
                    "function_name": null,
                    "function_code": null,
                    "decorators": [],
                    "docstring": null,
                    "start_line": null,
                    "variables": {},
                    "filtered_variables": {},
                    "diff_line_number": 328,
                    "class_data": {
                        "signature": "class TimeseriesGenerator(Sequence)",
                        "docstring": "Utility class for generating batches of temporal data.\n\nThis class takes in a sequence of data-points gathered at\nequal intervals, along with time series parameters such as\nstride, length of history, etc., to produce batches for\ntraining/validation.\n\n# Arguments\n    data: Indexable generator (such as list or Numpy array)\n        containing consecutive data points (timesteps).\n        The data should be at 2D, and axis 0 is expected\n        to be the time dimension.\n    targets: Targets corresponding to timesteps in `data`.\n        It should have same length as `data`.\n    length: Length of the output sequences (in number of timesteps).\n    sampling_rate: Period between successive individual timesteps\n        within sequences. For rate `r`, timesteps\n        `data[i]`, `data[i-r]`, ... `data[i - length]`\n        are used for create a sample sequence.\n    stride: Period between successive output sequences.\n        For stride `s`, consecutive output samples would\n        be centered around `data[i]`, `data[i+s]`, `data[i+2*s]`, etc.\n    start_index, end_index: Data points earlier than `start_index`\n        or later than `end_index` will not be used in the output sequences.\n        This is useful to reserve part of the data for test or validation.\n    shuffle: Whether to shuffle output samples,\n        or instead draw them in chronological order.\n    reverse: Boolean: if `true`, timesteps in each output sample will be\n        in reverse chronological order.\n    batch_size: Number of timeseries samples in each batch\n        (except maybe the last one).\n\n# Returns\n    A [Sequence](/utils/#sequence) instance.\n\n# Examples\n\n```python\nfrom keras.preprocessing.sequence import TimeseriesGenerator\nimport numpy as np\n\ndata = np.array([[i] for i in range(50)])\ntargets = np.array([[i] for i in range(50)])\n\ndata_gen = TimeseriesGenerator(data, targets,\n                               length=10, sampling_rate=2,\n                               batch_size=2)\nassert len(data_gen) == 20\n\nbatch_0 = data_gen[0]\nx, y = batch_0\nassert np.array_equal(x,\n                      np.array([[[0], [2], [4], [6], [8]],\n                                [[1], [3], [5], [7], [9]]]))\nassert np.array_equal(y,\n                      np.array([[10], [11]]))\n```",
                        "constructor_docstring": null,
                        "functions": [
                            "__init__(self, data, targets, length, sampling_rate=1, stride=1, start_index=0, end_index=None, shuffle=False, reverse=False, batch_size=128)",
                            "__len__(self)",
                            "_empty_batch(self, num_rows)",
                            "__getitem__(self, index)"
                        ],
                        "constructor_variables": [
                            "shuffle",
                            "targets",
                            "stride",
                            "length",
                            "end_index",
                            "reverse",
                            "batch_size",
                            "start_index",
                            "data",
                            "sampling_rate"
                        ],
                        "class_level_variables": [],
                        "class_decorators": []
                    }
                },
                {
                    "function_name": "__len__",
                    "function_code": "def __len__(self):\n    return int(np.ceil(\n        (self.end_index - self.start_index) /\n        (self.batch_size * self.stride)))\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 329,
                    "variables": {
                        "int": [
                            330
                        ],
                        "np.ceil": [
                            330
                        ],
                        "np": [
                            330
                        ],
                        "self.end_index": [
                            331
                        ],
                        "self": [
                            331,
                            332
                        ],
                        "self.start_index": [
                            331
                        ],
                        "self.batch_size": [
                            332
                        ],
                        "self.stride": [
                            332
                        ]
                    },
                    "filtered_variables": {
                        "np.ceil": [
                            330
                        ],
                        "np": [
                            330
                        ],
                        "self.end_index": [
                            331
                        ],
                        "self": [
                            331,
                            332
                        ],
                        "self.start_index": [
                            331
                        ],
                        "self.batch_size": [
                            332
                        ],
                        "self.stride": [
                            332
                        ]
                    },
                    "diff_line_number": 329,
                    "class_data": {
                        "signature": "class TimeseriesGenerator(Sequence)",
                        "docstring": "Utility class for generating batches of temporal data.\n\nThis class takes in a sequence of data-points gathered at\nequal intervals, along with time series parameters such as\nstride, length of history, etc., to produce batches for\ntraining/validation.\n\n# Arguments\n    data: Indexable generator (such as list or Numpy array)\n        containing consecutive data points (timesteps).\n        The data should be at 2D, and axis 0 is expected\n        to be the time dimension.\n    targets: Targets corresponding to timesteps in `data`.\n        It should have same length as `data`.\n    length: Length of the output sequences (in number of timesteps).\n    sampling_rate: Period between successive individual timesteps\n        within sequences. For rate `r`, timesteps\n        `data[i]`, `data[i-r]`, ... `data[i - length]`\n        are used for create a sample sequence.\n    stride: Period between successive output sequences.\n        For stride `s`, consecutive output samples would\n        be centered around `data[i]`, `data[i+s]`, `data[i+2*s]`, etc.\n    start_index, end_index: Data points earlier than `start_index`\n        or later than `end_index` will not be used in the output sequences.\n        This is useful to reserve part of the data for test or validation.\n    shuffle: Whether to shuffle output samples,\n        or instead draw them in chronological order.\n    reverse: Boolean: if `true`, timesteps in each output sample will be\n        in reverse chronological order.\n    batch_size: Number of timeseries samples in each batch\n        (except maybe the last one).\n\n# Returns\n    A [Sequence](/utils/#sequence) instance.\n\n# Examples\n\n```python\nfrom keras.preprocessing.sequence import TimeseriesGenerator\nimport numpy as np\n\ndata = np.array([[i] for i in range(50)])\ntargets = np.array([[i] for i in range(50)])\n\ndata_gen = TimeseriesGenerator(data, targets,\n                               length=10, sampling_rate=2,\n                               batch_size=2)\nassert len(data_gen) == 20\n\nbatch_0 = data_gen[0]\nx, y = batch_0\nassert np.array_equal(x,\n                      np.array([[[0], [2], [4], [6], [8]],\n                                [[1], [3], [5], [7], [9]]]))\nassert np.array_equal(y,\n                      np.array([[10], [11]]))\n```",
                        "constructor_docstring": null,
                        "functions": [
                            "__init__(self, data, targets, length, sampling_rate=1, stride=1, start_index=0, end_index=None, shuffle=False, reverse=False, batch_size=128)",
                            "__len__(self)",
                            "_empty_batch(self, num_rows)",
                            "__getitem__(self, index)"
                        ],
                        "constructor_variables": [
                            "shuffle",
                            "targets",
                            "stride",
                            "length",
                            "end_index",
                            "reverse",
                            "batch_size",
                            "start_index",
                            "data",
                            "sampling_rate"
                        ],
                        "class_level_variables": [],
                        "class_decorators": []
                    }
                },
                {
                    "function_name": "__getitem__",
                    "function_code": "def __getitem__(self, index):\n    if self.shuffle:\n        rows = np.random.randint(\n            self.start_index, self.end_index, size=self.batch_size)\n    else:\n        i = self.start_index + self.batch_size * self.stride * index\n        rows = np.arange(i, min(i + self.batch_size *\n                                self.stride, self.end_index), self.stride)\n\n    samples, targets = self._empty_batch(len(rows))\n    for j, row in enumerate(rows):\n        indices = range(rows[j] - self.length, rows[j], self.sampling_rate)\n        samples[j] = self.data[indices]\n        targets[j] = self.targets[rows[j]]\n    if self.reverse:\n        return samples[:, ::-1, ...], targets\n    return samples, targets\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 341,
                    "variables": {
                        "self.shuffle": [
                            342
                        ],
                        "self": [
                            352,
                            353,
                            354,
                            355,
                            342,
                            344,
                            346,
                            347,
                            348,
                            350
                        ],
                        "rows": [
                            352,
                            354,
                            343,
                            347,
                            350,
                            351
                        ],
                        "np.random.randint": [
                            343
                        ],
                        "np.random": [
                            343
                        ],
                        "np": [
                            347,
                            343
                        ],
                        "self.start_index": [
                            344,
                            346
                        ],
                        "self.end_index": [
                            344,
                            348
                        ],
                        "self.batch_size": [
                            344,
                            346,
                            347
                        ],
                        "i": [
                            346,
                            347
                        ],
                        "self.stride": [
                            346,
                            348
                        ],
                        "index": [
                            346
                        ],
                        "np.arange": [
                            347
                        ],
                        "min": [
                            347
                        ],
                        "samples": [
                            353,
                            356,
                            357,
                            350
                        ],
                        "targets": [
                            354,
                            356,
                            357,
                            350
                        ],
                        "self._empty_batch": [
                            350
                        ],
                        "len": [
                            350
                        ],
                        "j": [
                            352,
                            353,
                            354,
                            351
                        ],
                        "row": [
                            351
                        ],
                        "enumerate": [
                            351
                        ],
                        "indices": [
                            352,
                            353
                        ],
                        "range": [
                            352
                        ],
                        "self.length": [
                            352
                        ],
                        "self.sampling_rate": [
                            352
                        ],
                        "self.data": [
                            353
                        ],
                        "self.targets": [
                            354
                        ],
                        "self.reverse": [
                            355
                        ]
                    },
                    "filtered_variables": {
                        "self.shuffle": [
                            342
                        ],
                        "self": [
                            352,
                            353,
                            354,
                            355,
                            342,
                            344,
                            346,
                            347,
                            348,
                            350
                        ],
                        "rows": [
                            352,
                            354,
                            343,
                            347,
                            350,
                            351
                        ],
                        "np.random.randint": [
                            343
                        ],
                        "np.random": [
                            343
                        ],
                        "np": [
                            347,
                            343
                        ],
                        "self.start_index": [
                            344,
                            346
                        ],
                        "self.end_index": [
                            344,
                            348
                        ],
                        "self.batch_size": [
                            344,
                            346,
                            347
                        ],
                        "i": [
                            346,
                            347
                        ],
                        "self.stride": [
                            346,
                            348
                        ],
                        "index": [
                            346
                        ],
                        "np.arange": [
                            347
                        ],
                        "samples": [
                            353,
                            356,
                            357,
                            350
                        ],
                        "targets": [
                            354,
                            356,
                            357,
                            350
                        ],
                        "self._empty_batch": [
                            350
                        ],
                        "j": [
                            352,
                            353,
                            354,
                            351
                        ],
                        "row": [
                            351
                        ],
                        "indices": [
                            352,
                            353
                        ],
                        "self.length": [
                            352
                        ],
                        "self.sampling_rate": [
                            352
                        ],
                        "self.data": [
                            353
                        ],
                        "self.targets": [
                            354
                        ],
                        "self.reverse": [
                            355
                        ]
                    },
                    "diff_line_number": 344,
                    "class_data": {
                        "signature": "class TimeseriesGenerator(Sequence)",
                        "docstring": "Utility class for generating batches of temporal data.\n\nThis class takes in a sequence of data-points gathered at\nequal intervals, along with time series parameters such as\nstride, length of history, etc., to produce batches for\ntraining/validation.\n\n# Arguments\n    data: Indexable generator (such as list or Numpy array)\n        containing consecutive data points (timesteps).\n        The data should be at 2D, and axis 0 is expected\n        to be the time dimension.\n    targets: Targets corresponding to timesteps in `data`.\n        It should have same length as `data`.\n    length: Length of the output sequences (in number of timesteps).\n    sampling_rate: Period between successive individual timesteps\n        within sequences. For rate `r`, timesteps\n        `data[i]`, `data[i-r]`, ... `data[i - length]`\n        are used for create a sample sequence.\n    stride: Period between successive output sequences.\n        For stride `s`, consecutive output samples would\n        be centered around `data[i]`, `data[i+s]`, `data[i+2*s]`, etc.\n    start_index, end_index: Data points earlier than `start_index`\n        or later than `end_index` will not be used in the output sequences.\n        This is useful to reserve part of the data for test or validation.\n    shuffle: Whether to shuffle output samples,\n        or instead draw them in chronological order.\n    reverse: Boolean: if `true`, timesteps in each output sample will be\n        in reverse chronological order.\n    batch_size: Number of timeseries samples in each batch\n        (except maybe the last one).\n\n# Returns\n    A [Sequence](/utils/#sequence) instance.\n\n# Examples\n\n```python\nfrom keras.preprocessing.sequence import TimeseriesGenerator\nimport numpy as np\n\ndata = np.array([[i] for i in range(50)])\ntargets = np.array([[i] for i in range(50)])\n\ndata_gen = TimeseriesGenerator(data, targets,\n                               length=10, sampling_rate=2,\n                               batch_size=2)\nassert len(data_gen) == 20\n\nbatch_0 = data_gen[0]\nx, y = batch_0\nassert np.array_equal(x,\n                      np.array([[[0], [2], [4], [6], [8]],\n                                [[1], [3], [5], [7], [9]]]))\nassert np.array_equal(y,\n                      np.array([[10], [11]]))\n```",
                        "constructor_docstring": null,
                        "functions": [
                            "__init__(self, data, targets, length, sampling_rate=1, stride=1, start_index=0, end_index=None, shuffle=False, reverse=False, batch_size=128)",
                            "__len__(self)",
                            "_empty_batch(self, num_rows)",
                            "__getitem__(self, index)"
                        ],
                        "constructor_variables": [
                            "shuffle",
                            "targets",
                            "stride",
                            "length",
                            "end_index",
                            "reverse",
                            "batch_size",
                            "start_index",
                            "data",
                            "sampling_rate"
                        ],
                        "class_level_variables": [],
                        "class_decorators": []
                    }
                }
            ],
            "inscope_functions": [
                "pad_sequences(sequences, maxlen=None, dtype='int32', padding='pre', truncating='pre', value=0.0)",
                "make_sampling_table(size, sampling_factor=1e-05)",
                "skipgrams(sequence, vocabulary_size, window_size=4, negative_samples=1.0, shuffle=True, categorical=False, sampling_table=None, seed=None)",
                "_remove_long_seq(maxlen, seq, label)",
                "__init__(self, data, targets, length, sampling_rate=1, stride=1, start_index=0, end_index=None, shuffle=False, reverse=False, batch_size=128)",
                "__len__(self)",
                "_empty_batch(self, num_rows)",
                "__getitem__(self, index)"
            ],
            "variables_in_file": {
                "hasattr": [
                    57,
                    53
                ],
                "sequences": [
                    69,
                    75,
                    53,
                    56,
                    62
                ],
                "ValueError": [
                    98,
                    83,
                    54,
                    89,
                    58
                ],
                "lengths": [
                    64,
                    60,
                    55
                ],
                "x": [
                    96,
                    99,
                    74,
                    241,
                    242,
                    243,
                    56,
                    57,
                    59,
                    60,
                    94
                ],
                "str": [
                    59
                ],
                "lengths.append": [
                    60
                ],
                "len": [
                    96,
                    193,
                    350,
                    323,
                    70,
                    76,
                    206,
                    210,
                    242,
                    62,
                    60,
                    94
                ],
                "num_samples": [
                    74,
                    62
                ],
                "maxlen": [
                    64,
                    74,
                    79,
                    81,
                    242,
                    63
                ],
                "np.max": [
                    64
                ],
                "np": [
                    64,
                    130,
                    132,
                    71,
                    135,
                    74,
                    330,
                    339,
                    87,
                    347,
                    343
                ],
                "sample_shape": [
                    68,
                    71,
                    74,
                    88,
                    91
                ],
                "tuple": [
                    68
                ],
                "s": [
                    69,
                    70,
                    71,
                    75,
                    76,
                    79,
                    81
                ],
                "shape": [
                    71
                ],
                "np.asarray": [
                    87,
                    71
                ],
                "astype": [
                    74
                ],
                "np.ones": [
                    74
                ],
                "value": [
                    74
                ],
                "dtype": [
                    74,
                    87
                ],
                "idx": [
                    96,
                    91,
                    75,
                    94
                ],
                "enumerate": [
                    185,
                    75,
                    351
                ],
                "truncating": [
                    80,
                    84,
                    78
                ],
                "trunc": [
                    96,
                    79,
                    81,
                    87,
                    88,
                    91,
                    94
                ],
                "trunc.shape": [
                    88,
                    91
                ],
                "padding": [
                    98,
                    93,
                    95
                ],
                "gamma": [
                    129,
                    132
                ],
                "rank": [
                    130,
                    131,
                    132
                ],
                "np.arange": [
                    130,
                    347
                ],
                "size": [
                    130
                ],
                "inv_fq": [
                    132,
                    133
                ],
                "np.log": [
                    132
                ],
                "f": [
                    133,
                    135
                ],
                "sampling_factor": [
                    133
                ],
                "np.minimum": [
                    135
                ],
                "np.sqrt": [
                    135
                ],
                "couples": [
                    226,
                    199,
                    207,
                    210,
                    183,
                    222
                ],
                "labels": [
                    224,
                    226,
                    201,
                    203,
                    206,
                    214,
                    184,
                    216
                ],
                "i": [
                    192,
                    193,
                    195,
                    210,
                    212,
                    185,
                    346,
                    347
                ],
                "wi": [
                    185,
                    186,
                    189,
                    199
                ],
                "sequence": [
                    185,
                    196,
                    193
                ],
                "sampling_table": [
                    188,
                    189
                ],
                "random.random": [
                    189
                ],
                "random": [
                    224,
                    208,
                    211,
                    189,
                    220,
                    221,
                    222,
                    223
                ],
                "window_start": [
                    192,
                    194
                ],
                "max": [
                    192
                ],
                "window_size": [
                    192,
                    193
                ],
                "window_end": [
                    193,
                    194
                ],
                "min": [
                    193,
                    347
                ],
                "j": [
                    352,
                    353,
                    194,
                    195,
                    196,
                    354,
                    351
                ],
                "range": [
                    352,
                    194,
                    212
                ],
                "wj": [
                    196,
                    197,
                    199
                ],
                "couples.append": [
                    199
                ],
                "categorical": [
                    200,
                    213
                ],
                "labels.append": [
                    201,
                    203
                ],
                "negative_samples": [
                    205,
                    206
                ],
                "num_negative_samples": [
                    216,
                    212,
                    214,
                    206
                ],
                "int": [
                    330,
                    206
                ],
                "words": [
                    208,
                    210,
                    207
                ],
                "c": [
                    207
                ],
                "random.shuffle": [
                    208,
                    224,
                    222
                ],
                "random.randint": [
                    211,
                    220
                ],
                "vocabulary_size": [
                    211
                ],
                "shuffle": [
                    218,
                    325
                ],
                "seed": [
                    219,
                    220,
                    221,
                    223
                ],
                "random.seed": [
                    221,
                    223
                ],
                "new_seq": [
                    240,
                    243,
                    245
                ],
                "new_label": [
                    240,
                    244,
                    245
                ],
                "y": [
                    241,
                    244
                ],
                "zip": [
                    241
                ],
                "seq": [
                    241
                ],
                "label": [
                    241
                ],
                "new_seq.append": [
                    243
                ],
                "new_label.append": [
                    244
                ],
                "Sequence": [
                    248
                ],
                "self.data": [
                    336,
                    353,
                    316
                ],
                "self": [
                    316,
                    317,
                    318,
                    319,
                    320,
                    321,
                    324,
                    325,
                    326,
                    327,
                    331,
                    332,
                    335,
                    336,
                    338,
                    342,
                    344,
                    346,
                    347,
                    348,
                    350,
                    352,
                    353,
                    354,
                    355
                ],
                "data": [
                    323,
                    316
                ],
                "self.targets": [
                    338,
                    317,
                    354
                ],
                "targets": [
                    354,
                    356,
                    357,
                    317,
                    350
                ],
                "self.length": [
                    352,
                    318,
                    335
                ],
                "length": [
                    321,
                    318
                ],
                "self.sampling_rate": [
                    352,
                    335,
                    319
                ],
                "sampling_rate": [
                    319
                ],
                "self.stride": [
                    320,
                    346,
                    332,
                    348
                ],
                "stride": [
                    320
                ],
                "self.start_index": [
                    344,
                    321,
                    346,
                    331
                ],
                "start_index": [
                    321
                ],
                "end_index": [
                    322,
                    323,
                    324
                ],
                "self.end_index": [
                    344,
                    331,
                    324,
                    348
                ],
                "self.shuffle": [
                    325,
                    342
                ],
                "self.reverse": [
                    355,
                    326
                ],
                "reverse": [
                    326
                ],
                "self.batch_size": [
                    327,
                    332,
                    344,
                    346,
                    347
                ],
                "batch_size": [
                    327
                ],
                "np.ceil": [
                    330
                ],
                "samples_shape": [
                    336,
                    339,
                    335
                ],
                "num_rows": [
                    337,
                    335
                ],
                "samples_shape.extend": [
                    336
                ],
                "self.data.shape": [
                    336
                ],
                "targets_shape": [
                    337,
                    338,
                    339
                ],
                "targets_shape.extend": [
                    338
                ],
                "self.targets.shape": [
                    338
                ],
                "np.empty": [
                    339
                ],
                "rows": [
                    352,
                    354,
                    343,
                    347,
                    350,
                    351
                ],
                "np.random.randint": [
                    343
                ],
                "np.random": [
                    343
                ],
                "index": [
                    346
                ],
                "samples": [
                    353,
                    356,
                    357,
                    350
                ],
                "self._empty_batch": [
                    350
                ],
                "row": [
                    351
                ],
                "indices": [
                    352,
                    353
                ]
            },
            "filtered_variables_in_file": {
                "sequences": [
                    69,
                    75,
                    53,
                    56,
                    62
                ],
                "lengths": [
                    64,
                    60,
                    55
                ],
                "x": [
                    96,
                    99,
                    74,
                    241,
                    242,
                    243,
                    56,
                    57,
                    59,
                    60,
                    94
                ],
                "lengths.append": [
                    60
                ],
                "num_samples": [
                    74,
                    62
                ],
                "maxlen": [
                    64,
                    74,
                    79,
                    81,
                    242,
                    63
                ],
                "np.max": [
                    64
                ],
                "np": [
                    64,
                    130,
                    132,
                    71,
                    135,
                    74,
                    330,
                    339,
                    87,
                    347,
                    343
                ],
                "sample_shape": [
                    68,
                    71,
                    74,
                    88,
                    91
                ],
                "s": [
                    69,
                    70,
                    71,
                    75,
                    76,
                    79,
                    81
                ],
                "shape": [
                    71
                ],
                "np.asarray": [
                    87,
                    71
                ],
                "astype": [
                    74
                ],
                "np.ones": [
                    74
                ],
                "value": [
                    74
                ],
                "dtype": [
                    74,
                    87
                ],
                "idx": [
                    96,
                    91,
                    75,
                    94
                ],
                "truncating": [
                    80,
                    84,
                    78
                ],
                "trunc": [
                    96,
                    79,
                    81,
                    87,
                    88,
                    91,
                    94
                ],
                "trunc.shape": [
                    88,
                    91
                ],
                "padding": [
                    98,
                    93,
                    95
                ],
                "gamma": [
                    129,
                    132
                ],
                "rank": [
                    130,
                    131,
                    132
                ],
                "np.arange": [
                    130,
                    347
                ],
                "size": [
                    130
                ],
                "inv_fq": [
                    132,
                    133
                ],
                "np.log": [
                    132
                ],
                "f": [
                    133,
                    135
                ],
                "sampling_factor": [
                    133
                ],
                "np.minimum": [
                    135
                ],
                "np.sqrt": [
                    135
                ],
                "couples": [
                    226,
                    199,
                    207,
                    210,
                    183,
                    222
                ],
                "labels": [
                    224,
                    226,
                    201,
                    203,
                    206,
                    214,
                    184,
                    216
                ],
                "i": [
                    192,
                    193,
                    195,
                    210,
                    212,
                    185,
                    346,
                    347
                ],
                "wi": [
                    185,
                    186,
                    189,
                    199
                ],
                "sequence": [
                    185,
                    196,
                    193
                ],
                "sampling_table": [
                    188,
                    189
                ],
                "random.random": [
                    189
                ],
                "random": [
                    224,
                    208,
                    211,
                    189,
                    220,
                    221,
                    222,
                    223
                ],
                "window_start": [
                    192,
                    194
                ],
                "window_size": [
                    192,
                    193
                ],
                "window_end": [
                    193,
                    194
                ],
                "j": [
                    352,
                    353,
                    194,
                    195,
                    196,
                    354,
                    351
                ],
                "wj": [
                    196,
                    197,
                    199
                ],
                "couples.append": [
                    199
                ],
                "categorical": [
                    200,
                    213
                ],
                "labels.append": [
                    201,
                    203
                ],
                "negative_samples": [
                    205,
                    206
                ],
                "num_negative_samples": [
                    216,
                    212,
                    214,
                    206
                ],
                "words": [
                    208,
                    210,
                    207
                ],
                "c": [
                    207
                ],
                "random.shuffle": [
                    208,
                    224,
                    222
                ],
                "random.randint": [
                    211,
                    220
                ],
                "vocabulary_size": [
                    211
                ],
                "shuffle": [
                    218,
                    325
                ],
                "seed": [
                    219,
                    220,
                    221,
                    223
                ],
                "random.seed": [
                    221,
                    223
                ],
                "new_seq": [
                    240,
                    243,
                    245
                ],
                "new_label": [
                    240,
                    244,
                    245
                ],
                "y": [
                    241,
                    244
                ],
                "seq": [
                    241
                ],
                "label": [
                    241
                ],
                "new_seq.append": [
                    243
                ],
                "new_label.append": [
                    244
                ],
                "Sequence": [
                    248
                ],
                "self.data": [
                    336,
                    353,
                    316
                ],
                "self": [
                    316,
                    317,
                    318,
                    319,
                    320,
                    321,
                    324,
                    325,
                    326,
                    327,
                    331,
                    332,
                    335,
                    336,
                    338,
                    342,
                    344,
                    346,
                    347,
                    348,
                    350,
                    352,
                    353,
                    354,
                    355
                ],
                "data": [
                    323,
                    316
                ],
                "self.targets": [
                    338,
                    317,
                    354
                ],
                "targets": [
                    354,
                    356,
                    357,
                    317,
                    350
                ],
                "self.length": [
                    352,
                    318,
                    335
                ],
                "length": [
                    321,
                    318
                ],
                "self.sampling_rate": [
                    352,
                    335,
                    319
                ],
                "sampling_rate": [
                    319
                ],
                "self.stride": [
                    320,
                    346,
                    332,
                    348
                ],
                "stride": [
                    320
                ],
                "self.start_index": [
                    344,
                    321,
                    346,
                    331
                ],
                "start_index": [
                    321
                ],
                "end_index": [
                    322,
                    323,
                    324
                ],
                "self.end_index": [
                    344,
                    331,
                    324,
                    348
                ],
                "self.shuffle": [
                    325,
                    342
                ],
                "self.reverse": [
                    355,
                    326
                ],
                "reverse": [
                    326
                ],
                "self.batch_size": [
                    327,
                    332,
                    344,
                    346,
                    347
                ],
                "batch_size": [
                    327
                ],
                "np.ceil": [
                    330
                ],
                "samples_shape": [
                    336,
                    339,
                    335
                ],
                "num_rows": [
                    337,
                    335
                ],
                "samples_shape.extend": [
                    336
                ],
                "self.data.shape": [
                    336
                ],
                "targets_shape": [
                    337,
                    338,
                    339
                ],
                "targets_shape.extend": [
                    338
                ],
                "self.targets.shape": [
                    338
                ],
                "np.empty": [
                    339
                ],
                "rows": [
                    352,
                    354,
                    343,
                    347,
                    350,
                    351
                ],
                "np.random.randint": [
                    343
                ],
                "np.random": [
                    343
                ],
                "index": [
                    346
                ],
                "samples": [
                    353,
                    356,
                    357,
                    350
                ],
                "self._empty_batch": [
                    350
                ],
                "row": [
                    351
                ],
                "indices": [
                    352,
                    353
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/keras/tests/keras/preprocessing/sequence_test.py",
                "test_function": "test_TimeSeriesGenerator_doesnt_miss_any_sample",
                "test_function_code": "def test_TimeSeriesGenerator_doesnt_miss_any_sample():\n    x = np.array([[i] for i in range(10)])\n\n    for length in range(3, 10):\n        g = TimeseriesGenerator(x, x,\n                                length=length,\n                                batch_size=1)\n        expected = max(0, len(x) - length)\n        actual = len(g)\n\n        assert expected == actual\n\n        if len(g) > 0:\n            # All elements in range(length, 10) should be used as current step\n            expected = np.arange(length, 10).reshape(-1, 1)\n\n            y = np.concatenate([g[ix][1] for ix in range(len(g))], axis=0)\n            assert_allclose(y, expected)\n\n    x = np.array([[i] for i in range(23)])\n\n    strides = (1, 1, 5, 7, 3, 5, 3)\n    lengths = (3, 3, 4, 3, 1, 3, 7)\n    batch_sizes = (6, 6, 6, 5, 6, 6, 6)\n    shuffles = (False, True, True, False, False, False, False)\n\n    for stride, length, batch_size, shuffle in zip(strides,\n                                                   lengths,\n                                                   batch_sizes,\n                                                   shuffles):\n        g = TimeseriesGenerator(x, x,\n                                length=length,\n                                sampling_rate=1,\n                                stride=stride,\n                                start_index=0,\n                                end_index=None,\n                                shuffle=shuffle,\n                                reverse=False,\n                                batch_size=batch_size)\n        if shuffle:\n            # all batches have the same size when shuffle is True.\n            expected_sequences = ceil(\n                (23 - length) / float(batch_size * stride)) * batch_size\n        else:\n            # last batch will be different if `(samples - length) / stride`\n            # is not a multiple of `batch_size`.\n            expected_sequences = ceil((23 - length) / float(stride))\n\n        expected_batches = ceil(expected_sequences / float(batch_size))\n\n        y = [g[ix][1] for ix in range(len(g))]\n\n        actual_sequences = sum(len(_y) for _y in y)\n        actual_batches = len(y)\n\n        assert expected_sequences == actual_sequences\n        assert expected_batches == actual_batches",
                "test_error": "assert 7 == 6   +7   -6",
                "full_test_error": "def test_TimeSeriesGenerator_doesnt_miss_any_sample():\n        x = np.array([[i] for i in range(10)])\n    \n        for length in range(3, 10):\n            g = TimeseriesGenerator(x, x,\n                                    length=length,\n                                    batch_size=1)\n            expected = max(0, len(x) - length)\n            actual = len(g)\n    \n>           assert expected == actual\nE           assert 7 == 6\nE             +7\nE             -6\n\ntests/keras/preprocessing/sequence_test.py:192: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}