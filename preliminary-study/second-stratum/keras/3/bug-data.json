{
    "keras:3": {
        "/Volumes/SSD2T/bgp_envs/repos/keras_3/keras/models.py": {
            "buggy_functions": [
                {
                    "function_name": "_clone_functional_model",
                    "function_code": "def _clone_functional_model(model, input_tensors=None):\n    \"\"\"Clone a functional `Model` instance.\n\n    Model cloning is similar to calling a model on new inputs,\n    except that it creates new layers (and thus new weights) instead\n    of sharing the weights of the existing layers.\n\n    # Arguments\n        model: Instance of `Model`.\n        input_tensors: optional list of input tensors\n            to build the model upon. If not provided,\n            placeholders will be created.\n\n    # Returns\n        An instance of `Model` reproducing the behavior\n        of the original model, on top of new inputs tensors,\n        using newly instantiated weights.\n\n    # Raises\n        ValueError: in case of invalid `model` argument value.\n    \"\"\"\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument '\n                         'to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument '\n                         'to be a functional `Model` instance, '\n                         'got a `Sequential` instance instead:', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_layers = []\n        input_tensors = []\n        for layer in model._input_layers:\n            input_tensor = Input(batch_shape=layer.batch_input_shape,\n                                 dtype=layer.dtype,\n                                 sparse=layer.sparse,\n                                 name=layer.name)\n            input_tensors.append(input_tensor)\n            # Cache newly created input layer.\n            newly_created_input_layer = input_tensor._keras_history[0]\n            layer_map[layer] = newly_created_input_layer\n        for _original, _cloned in zip(model._input_layers, input_layers):\n            layer_map[_original] = _cloned\n    else:\n        # Make sure that all input tensors come from a Keras layer.\n        # If tensor comes from an input layer: cache the input layer.\n        input_tensors = to_list(input_tensors)\n        _input_tensors = []\n        for i, x in enumerate(input_tensors):\n            if not K.is_keras_tensor(x):\n                name = model._input_layers[i].name\n                input_tensor = Input(tensor=x,\n                                     name='input_wrapper_for_' + name)\n                _input_tensors.append(input_tensor)\n                # Cache newly created input layer.\n                original_input_layer = x._keras_history[0]\n                newly_created_input_layer = input_tensor._keras_history[0]\n                layer_map[original_input_layer] = newly_created_input_layer\n            else:\n                _input_tensors.append(x)\n        input_tensors = _input_tensors\n\n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)  # tensor, mask\n\n    # Iterated over every node in the reference model, in depth order.\n    depth_keys = list(model._nodes_by_depth.keys())\n    depth_keys.sort(reverse=True)\n    for depth in depth_keys:\n        nodes = model._nodes_by_depth[depth]\n        for node in nodes:\n            # Recover the corresponding layer.\n            layer = node.outbound_layer\n\n            # Get or create layer.\n            if layer not in layer_map:\n                # Clone layer.\n                new_layer = layer.__class__.from_config(layer.get_config())\n                layer_map[layer] = new_layer\n                layer = new_layer\n            else:\n                # Reuse previously cloned layer.\n                layer = layer_map[layer]\n                # Don't call InputLayer multiple times.\n                if isinstance(layer, InputLayer):\n                    continue\n\n            # Gather inputs to call the new layer.\n            reference_input_tensors = node.input_tensors\n            reference_output_tensors = node.output_tensors\n\n            # If all previous input tensors are available in tensor_map,\n            # then call node.inbound_layer on them.\n            computed_data = []  # List of tuples (input, mask).\n            for x in reference_input_tensors:\n                if x in tensor_map:\n                    computed_data.append(tensor_map[x])\n\n            if len(computed_data) == len(reference_input_tensors):\n                # Call layer.\n                if node.arguments:\n                    kwargs = node.arguments\n                else:\n                    kwargs = {}\n                if len(computed_data) == 1:\n                    computed_tensor, computed_mask = computed_data[0]\n                    if has_arg(layer.call, 'mask'):\n                        if 'mask' not in kwargs:\n                            kwargs['mask'] = computed_mask\n                    output_tensors = to_list(\n                        layer(computed_tensor, **kwargs))\n                    output_masks = to_list(\n                        layer.compute_mask(computed_tensor,\n                                           computed_mask))\n                    computed_tensors = [computed_tensor]\n                    computed_masks = [computed_mask]\n                else:\n                    computed_tensors = [x[0] for x in computed_data]\n                    computed_masks = [x[1] for x in computed_data]\n                    if has_arg(layer.call, 'mask'):\n                        if 'mask' not in kwargs:\n                            kwargs['mask'] = computed_masks\n                    output_tensors = to_list(\n                        layer(computed_tensors, **kwargs))\n                    output_masks = to_list(\n                        layer.compute_mask(computed_tensors,\n                                           computed_masks))\n                # Update tensor_map.\n                for x, y, mask in zip(reference_output_tensors,\n                                      output_tensors,\n                                      output_masks):\n                    tensor_map[x] = (y, mask)\n\n    # Check that we did compute the model outputs,\n    # then instantiate a new model from inputs and outputs.\n    output_tensors = []\n    for x in model.outputs:\n        assert x in tensor_map, 'Could not compute output ' + str(x)\n        tensor, _ = tensor_map[x]\n        output_tensors.append(tensor)\n    return Model(input_tensors, output_tensors, name=model.name)\n",
                    "decorators": [],
                    "docstring": "Clone a functional `Model` instance.\n\nModel cloning is similar to calling a model on new inputs,\nexcept that it creates new layers (and thus new weights) instead\nof sharing the weights of the existing layers.\n\n# Arguments\n    model: Instance of `Model`.\n    input_tensors: optional list of input tensors\n        to build the model upon. If not provided,\n        placeholders will be created.\n\n# Returns\n    An instance of `Model` reproducing the behavior\n    of the original model, on top of new inputs tensors,\n    using newly instantiated weights.\n\n# Raises\n    ValueError: in case of invalid `model` argument value.",
                    "start_line": 26,
                    "end_line": 169,
                    "variables": {
                        "isinstance": [
                            113,
                            50,
                            47
                        ],
                        "model": [
                            98,
                            165,
                            70,
                            169,
                            47,
                            79,
                            49,
                            50,
                            53,
                            91,
                            61,
                            95
                        ],
                        "Model": [
                            169,
                            47
                        ],
                        "ValueError": [
                            48,
                            51
                        ],
                        "Sequential": [
                            50
                        ],
                        "layer_map": [
                            69,
                            71,
                            104,
                            107,
                            111,
                            86,
                            55
                        ],
                        "tensor_map": [
                            160,
                            166,
                            167,
                            92,
                            56,
                            124,
                            125
                        ],
                        "input_tensors": [
                            89,
                            66,
                            169,
                            75,
                            77,
                            57,
                            91,
                            60
                        ],
                        "input_layers": [
                            59,
                            70
                        ],
                        "layer": [
                            135,
                            139,
                            141,
                            148,
                            152,
                            154,
                            61,
                            62,
                            63,
                            64,
                            65,
                            69,
                            101,
                            104,
                            106,
                            107,
                            108,
                            111,
                            113
                        ],
                        "model._input_layers": [
                            61,
                            70,
                            79
                        ],
                        "input_tensor": [
                            66,
                            68,
                            80,
                            82,
                            85,
                            62
                        ],
                        "Input": [
                            80,
                            62
                        ],
                        "layer.batch_input_shape": [
                            62
                        ],
                        "layer.dtype": [
                            63
                        ],
                        "layer.sparse": [
                            64
                        ],
                        "layer.name": [
                            65
                        ],
                        "input_tensors.append": [
                            66
                        ],
                        "newly_created_input_layer": [
                            85,
                            68,
                            69,
                            86
                        ],
                        "input_tensor._keras_history": [
                            68,
                            85
                        ],
                        "_original": [
                            70,
                            71
                        ],
                        "_cloned": [
                            70,
                            71
                        ],
                        "zip": [
                            91,
                            157,
                            70
                        ],
                        "to_list": [
                            138,
                            75,
                            140,
                            151,
                            153
                        ],
                        "_input_tensors": [
                            88,
                            89,
                            82,
                            76
                        ],
                        "i": [
                            77,
                            79
                        ],
                        "x": [
                            160,
                            165,
                            166,
                            167,
                            123,
                            77,
                            78,
                            80,
                            124,
                            146,
                            147,
                            84,
                            157,
                            88,
                            91,
                            92,
                            125
                        ],
                        "enumerate": [
                            77
                        ],
                        "K.is_keras_tensor": [
                            78
                        ],
                        "K": [
                            78
                        ],
                        "name": [
                            81,
                            79
                        ],
                        "_input_tensors.append": [
                            88,
                            82
                        ],
                        "original_input_layer": [
                            84,
                            86
                        ],
                        "x._keras_history": [
                            84
                        ],
                        "y": [
                            160,
                            91,
                            92,
                            157
                        ],
                        "model.inputs": [
                            91
                        ],
                        "depth_keys": [
                            96,
                            97,
                            95
                        ],
                        "list": [
                            95
                        ],
                        "model._nodes_by_depth.keys": [
                            95
                        ],
                        "model._nodes_by_depth": [
                            98,
                            95
                        ],
                        "depth_keys.sort": [
                            96
                        ],
                        "depth": [
                            97,
                            98
                        ],
                        "nodes": [
                            98,
                            99
                        ],
                        "node": [
                            129,
                            130,
                            99,
                            101,
                            117,
                            118
                        ],
                        "node.outbound_layer": [
                            101
                        ],
                        "new_layer": [
                            106,
                            107,
                            108
                        ],
                        "layer.__class__.from_config": [
                            106
                        ],
                        "layer.__class__": [
                            106
                        ],
                        "layer.get_config": [
                            106
                        ],
                        "InputLayer": [
                            113
                        ],
                        "reference_input_tensors": [
                            123,
                            117,
                            127
                        ],
                        "node.input_tensors": [
                            117
                        ],
                        "reference_output_tensors": [
                            157,
                            118
                        ],
                        "node.output_tensors": [
                            118
                        ],
                        "computed_data": [
                            133,
                            134,
                            146,
                            147,
                            122,
                            125,
                            127
                        ],
                        "computed_data.append": [
                            125
                        ],
                        "len": [
                            133,
                            127
                        ],
                        "node.arguments": [
                            129,
                            130
                        ],
                        "kwargs": [
                            130,
                            132,
                            136,
                            137,
                            139,
                            149,
                            150,
                            152
                        ],
                        "computed_tensor": [
                            139,
                            141,
                            134,
                            143
                        ],
                        "computed_mask": [
                            144,
                            137,
                            142,
                            134
                        ],
                        "has_arg": [
                            148,
                            135
                        ],
                        "layer.call": [
                            148,
                            135
                        ],
                        "output_tensors": [
                            164,
                            168,
                            169,
                            138,
                            151,
                            158
                        ],
                        "output_masks": [
                            153,
                            140,
                            159
                        ],
                        "layer.compute_mask": [
                            154,
                            141
                        ],
                        "computed_tensors": [
                            152,
                            146,
                            154,
                            143
                        ],
                        "computed_masks": [
                            144,
                            147,
                            155,
                            150
                        ],
                        "mask": [
                            160,
                            157
                        ],
                        "model.outputs": [
                            165
                        ],
                        "str": [
                            166
                        ],
                        "tensor": [
                            168,
                            167
                        ],
                        "_": [
                            167
                        ],
                        "output_tensors.append": [
                            168
                        ],
                        "model.name": [
                            169
                        ]
                    },
                    "filtered_variables": {
                        "model": [
                            98,
                            165,
                            70,
                            169,
                            47,
                            79,
                            49,
                            50,
                            53,
                            91,
                            61,
                            95
                        ],
                        "Model": [
                            169,
                            47
                        ],
                        "Sequential": [
                            50
                        ],
                        "layer_map": [
                            69,
                            71,
                            104,
                            107,
                            111,
                            86,
                            55
                        ],
                        "tensor_map": [
                            160,
                            166,
                            167,
                            92,
                            56,
                            124,
                            125
                        ],
                        "input_tensors": [
                            89,
                            66,
                            169,
                            75,
                            77,
                            57,
                            91,
                            60
                        ],
                        "input_layers": [
                            59,
                            70
                        ],
                        "layer": [
                            135,
                            139,
                            141,
                            148,
                            152,
                            154,
                            61,
                            62,
                            63,
                            64,
                            65,
                            69,
                            101,
                            104,
                            106,
                            107,
                            108,
                            111,
                            113
                        ],
                        "model._input_layers": [
                            61,
                            70,
                            79
                        ],
                        "input_tensor": [
                            66,
                            68,
                            80,
                            82,
                            85,
                            62
                        ],
                        "Input": [
                            80,
                            62
                        ],
                        "layer.batch_input_shape": [
                            62
                        ],
                        "layer.dtype": [
                            63
                        ],
                        "layer.sparse": [
                            64
                        ],
                        "layer.name": [
                            65
                        ],
                        "input_tensors.append": [
                            66
                        ],
                        "newly_created_input_layer": [
                            85,
                            68,
                            69,
                            86
                        ],
                        "input_tensor._keras_history": [
                            68,
                            85
                        ],
                        "_original": [
                            70,
                            71
                        ],
                        "_cloned": [
                            70,
                            71
                        ],
                        "to_list": [
                            138,
                            75,
                            140,
                            151,
                            153
                        ],
                        "_input_tensors": [
                            88,
                            89,
                            82,
                            76
                        ],
                        "i": [
                            77,
                            79
                        ],
                        "x": [
                            160,
                            165,
                            166,
                            167,
                            123,
                            77,
                            78,
                            80,
                            124,
                            146,
                            147,
                            84,
                            157,
                            88,
                            91,
                            92,
                            125
                        ],
                        "K.is_keras_tensor": [
                            78
                        ],
                        "K": [
                            78
                        ],
                        "name": [
                            81,
                            79
                        ],
                        "_input_tensors.append": [
                            88,
                            82
                        ],
                        "original_input_layer": [
                            84,
                            86
                        ],
                        "x._keras_history": [
                            84
                        ],
                        "y": [
                            160,
                            91,
                            92,
                            157
                        ],
                        "model.inputs": [
                            91
                        ],
                        "depth_keys": [
                            96,
                            97,
                            95
                        ],
                        "model._nodes_by_depth.keys": [
                            95
                        ],
                        "model._nodes_by_depth": [
                            98,
                            95
                        ],
                        "depth_keys.sort": [
                            96
                        ],
                        "depth": [
                            97,
                            98
                        ],
                        "nodes": [
                            98,
                            99
                        ],
                        "node": [
                            129,
                            130,
                            99,
                            101,
                            117,
                            118
                        ],
                        "node.outbound_layer": [
                            101
                        ],
                        "new_layer": [
                            106,
                            107,
                            108
                        ],
                        "layer.__class__.from_config": [
                            106
                        ],
                        "layer.__class__": [
                            106
                        ],
                        "layer.get_config": [
                            106
                        ],
                        "InputLayer": [
                            113
                        ],
                        "reference_input_tensors": [
                            123,
                            117,
                            127
                        ],
                        "node.input_tensors": [
                            117
                        ],
                        "reference_output_tensors": [
                            157,
                            118
                        ],
                        "node.output_tensors": [
                            118
                        ],
                        "computed_data": [
                            133,
                            134,
                            146,
                            147,
                            122,
                            125,
                            127
                        ],
                        "computed_data.append": [
                            125
                        ],
                        "node.arguments": [
                            129,
                            130
                        ],
                        "kwargs": [
                            130,
                            132,
                            136,
                            137,
                            139,
                            149,
                            150,
                            152
                        ],
                        "computed_tensor": [
                            139,
                            141,
                            134,
                            143
                        ],
                        "computed_mask": [
                            144,
                            137,
                            142,
                            134
                        ],
                        "has_arg": [
                            148,
                            135
                        ],
                        "layer.call": [
                            148,
                            135
                        ],
                        "output_tensors": [
                            164,
                            168,
                            169,
                            138,
                            151,
                            158
                        ],
                        "output_masks": [
                            153,
                            140,
                            159
                        ],
                        "layer.compute_mask": [
                            154,
                            141
                        ],
                        "computed_tensors": [
                            152,
                            146,
                            154,
                            143
                        ],
                        "computed_masks": [
                            144,
                            147,
                            155,
                            150
                        ],
                        "mask": [
                            160,
                            157
                        ],
                        "model.outputs": [
                            165
                        ],
                        "tensor": [
                            168,
                            167
                        ],
                        "_": [
                            167
                        ],
                        "output_tensors.append": [
                            168
                        ],
                        "model.name": [
                            169
                        ]
                    },
                    "diff_line_number": 140,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x12b624650>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "Model": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Sequential": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_map": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor_map": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "input_layers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model._input_layers": {
                                    "variable_value": "[<keras.engine.input_layer.InputLayer object at 0x12b62d5d0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "input_tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.batch_input_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.sparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "newly_created_input_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensor._keras_history": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_original": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_cloned": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_input_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.is_keras_tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_input_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "original_input_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x._keras_history": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.inputs": {
                                    "variable_value": "[<tf.Tensor 'input_1:0' shape=(?, 4) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "depth_keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model._nodes_by_depth.keys": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model._nodes_by_depth": {
                                    "variable_value": "{0: [<keras.engine.base_layer.Node object at 0x12b6241d0>], 1: [<keras.engine.base_layer.Node object at 0x12b624690>], 2: [<keras.engine.base_layer.Node object at 0x12b624bd0>]}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "depth_keys.sort": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depth": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node.outbound_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.__class__.from_config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.__class__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.get_config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "InputLayer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reference_input_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node.input_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reference_output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node.output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "computed_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "computed_data.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node.arguments": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "computed_tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "computed_mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_arg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.call": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.compute_mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "computed_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "computed_masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.outputs": {
                                    "variable_value": "[<tf.Tensor 'swap_layer_1/Identity:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'swap_layer_1/Identity_1:0' shape=(?, 4) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.name": {
                                    "variable_value": "'model_1'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x128fd8990>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "Model": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Sequential": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_map": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor_map": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "input_layers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model._input_layers": {
                                    "variable_value": "[<keras.engine.input_layer.InputLayer object at 0x128e684d0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "input_tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.batch_input_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.sparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "newly_created_input_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensor._keras_history": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_original": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_cloned": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_input_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.is_keras_tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_input_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "original_input_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x._keras_history": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.inputs": {
                                    "variable_value": "[<tf.Tensor 'input_1:0' shape=(?, 4) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "depth_keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model._nodes_by_depth.keys": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model._nodes_by_depth": {
                                    "variable_value": "{0: [<keras.engine.base_layer.Node object at 0x128fd8610>], 1: [<keras.engine.base_layer.Node object at 0x128fd8450>], 2: [<keras.engine.base_layer.Node object at 0x128fd8b10>]}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "depth_keys.sort": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depth": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node.outbound_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.__class__.from_config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.__class__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.get_config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "InputLayer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reference_input_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node.input_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reference_output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node.output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "computed_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "computed_data.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node.arguments": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "computed_tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "computed_mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "has_arg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.call": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.supports_masking": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.compute_mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "computed_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "computed_masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.outputs": {
                                    "variable_value": "[<tf.Tensor 'swap_layer_1/Identity:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'swap_layer_1/Identity_1:0' shape=(?, 4) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.name": {
                                    "variable_value": "'model_1'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                }
                            },
                            {
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x128fd8990>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "Model": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Sequential": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_map": {
                                    "variable_value": "{<keras.engine.input_layer.InputLayer object at 0x128e684d0>: <keras.engine.input_layer.InputLayer object at 0x128e68d90>, <keras.layers.core.Lambda object at 0x128fd8e90>: <keras.layers.core.Lambda object at 0x128e68e90>, <test_sequential_model.test_clone_functional_model_with_multi_outputs.<locals>.SwapLayer object at 0x128fd8550>: <test_sequential_model.test_clone_functional_model_with_multi_outputs.<locals>.SwapLayer object at 0x128e68fd0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "tensor_map": {
                                    "variable_value": "{<tf.Tensor 'input_1:0' shape=(?, 4) dtype=float32>: (<tf.Tensor 'input_1_1:0' shape=(?, 4) dtype=float32>, None), <tf.Tensor 'lambda_1/add:0' shape=(?, 4) dtype=float32>: (<tf.Tensor 'lambda_1_1/add:0' shape=(?, 4) dtype=float32>, None), <tf.Tensor 'lambda_1/Identity:0' shape=(?, 4) dtype=float32>: (<tf.Tensor 'lambda_1_1/Identity:0' shape=(?, 4) dtype=float32>, None), <tf.Tensor 'swap_layer_1/Identity:0' shape=(?, 4) dtype=float32>: (<tf.Tensor 'swap_layer_1_1/Identity:0' shape=(?, 4) dtype=float32>, None), <tf.Tensor 'swap_layer_1/Identity_1:0' shape=(?, 4) dtype=float32>: (<tf.Tensor 'swap_layer_1_1/Identity_1:0' shape=(?, 4) dtype=float32>, None)}",
                                    "variable_type": "dict",
                                    "variable_shape": "5"
                                },
                                "input_tensors": {
                                    "variable_value": "[<tf.Tensor 'input_1_1:0' shape=(?, 4) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "input_layers": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "layer": {
                                    "variable_value": "<test_sequential_model.test_clone_functional_model_with_multi_outputs.<locals>.SwapLayer object at 0x128e68fd0>",
                                    "variable_type": "SwapLayer",
                                    "variable_shape": null
                                },
                                "model._input_layers": {
                                    "variable_value": "[<keras.engine.input_layer.InputLayer object at 0x128e684d0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "input_tensor": {
                                    "variable_value": "<tf.Tensor 'input_1_1:0' shape=(?, 4) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(4)])"
                                },
                                "Input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.batch_input_shape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer.sparse": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer.name": {
                                    "variable_value": "'swap_layer_1'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "input_tensors.append": {
                                    "variable_value": "<built-in method append of list object at 0x128fd2320>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "newly_created_input_layer": {
                                    "variable_value": "<keras.engine.input_layer.InputLayer object at 0x128e68d90>",
                                    "variable_type": "InputLayer",
                                    "variable_shape": null
                                },
                                "input_tensor._keras_history": {
                                    "variable_value": "(<keras.engine.input_layer.InputLayer object at 0x128e68d90>, 0, 0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "_original": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_cloned": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_input_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'swap_layer_1/Identity_1:0' shape=(?, 4) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(4)])"
                                },
                                "K.is_keras_tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_input_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "original_input_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x._keras_history": {
                                    "variable_value": "(<test_sequential_model.test_clone_functional_model_with_multi_outputs.<locals>.SwapLayer object at 0x128fd8550>, 0, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "y": {
                                    "variable_value": "<tf.Tensor 'swap_layer_1_1/Identity_1:0' shape=(?, 4) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(4)])"
                                },
                                "model.inputs": {
                                    "variable_value": "[<tf.Tensor 'input_1:0' shape=(?, 4) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "depth_keys": {
                                    "variable_value": "[2, 1, 0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "model._nodes_by_depth.keys": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model._nodes_by_depth": {
                                    "variable_value": "{0: [<keras.engine.base_layer.Node object at 0x128fd8610>], 1: [<keras.engine.base_layer.Node object at 0x128fd8450>], 2: [<keras.engine.base_layer.Node object at 0x128fd8b10>]}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "depth_keys.sort": {
                                    "variable_value": "<built-in method sort of list object at 0x128e925a0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "depth": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "nodes": {
                                    "variable_value": "[<keras.engine.base_layer.Node object at 0x128fd8610>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "node": {
                                    "variable_value": "<keras.engine.base_layer.Node object at 0x128fd8610>",
                                    "variable_type": "Node",
                                    "variable_shape": null
                                },
                                "node.outbound_layer": {
                                    "variable_value": "<test_sequential_model.test_clone_functional_model_with_multi_outputs.<locals>.SwapLayer object at 0x128fd8550>",
                                    "variable_type": "SwapLayer",
                                    "variable_shape": null
                                },
                                "new_layer": {
                                    "variable_value": "<test_sequential_model.test_clone_functional_model_with_multi_outputs.<locals>.SwapLayer object at 0x128e68fd0>",
                                    "variable_type": "SwapLayer",
                                    "variable_shape": null
                                },
                                "layer.__class__.from_config": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer.__class__": {
                                    "variable_value": "<class 'test_sequential_model.test_clone_functional_model_with_multi_outputs.<locals>.SwapLayer'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "layer.get_config": {
                                    "variable_value": "<bound method Layer.get_config of <test_sequential_model.test_clone_functional_model_with_multi_outputs.<locals>.SwapLayer object at 0x128e68fd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "InputLayer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reference_input_tensors": {
                                    "variable_value": "[<tf.Tensor 'lambda_1/add:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lambda_1/Identity:0' shape=(?, 4) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "node.input_tensors": {
                                    "variable_value": "[<tf.Tensor 'lambda_1/add:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lambda_1/Identity:0' shape=(?, 4) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "reference_output_tensors": {
                                    "variable_value": "[<tf.Tensor 'swap_layer_1/Identity:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'swap_layer_1/Identity_1:0' shape=(?, 4) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "node.output_tensors": {
                                    "variable_value": "[<tf.Tensor 'swap_layer_1/Identity:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'swap_layer_1/Identity_1:0' shape=(?, 4) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "computed_data": {
                                    "variable_value": "[(<tf.Tensor 'lambda_1_1/add:0' shape=(?, 4) dtype=float32>, None), (<tf.Tensor 'lambda_1_1/Identity:0' shape=(?, 4) dtype=float32>, None)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "computed_data.append": {
                                    "variable_value": "<built-in method append of list object at 0x128f07140>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "node.arguments": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "computed_tensor": {
                                    "variable_value": "<tf.Tensor 'input_1_1:0' shape=(?, 4) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(4)])"
                                },
                                "computed_mask": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "has_arg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.call": {
                                    "variable_value": "<bound method test_clone_functional_model_with_multi_outputs.<locals>.SwapLayer.call of <test_sequential_model.test_clone_functional_model_with_multi_outputs.<locals>.SwapLayer object at 0x128e68fd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "output_tensors": {
                                    "variable_value": "[<tf.Tensor 'swap_layer_1_1/Identity:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'swap_layer_1_1/Identity_1:0' shape=(?, 4) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "layer.supports_masking": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "output_masks": {
                                    "variable_value": "[None, None]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "layer.compute_mask": {
                                    "variable_value": "<bound method Layer.compute_mask of <test_sequential_model.test_clone_functional_model_with_multi_outputs.<locals>.SwapLayer object at 0x128e68fd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "computed_tensors": {
                                    "variable_value": "[<tf.Tensor 'lambda_1_1/add:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lambda_1_1/Identity:0' shape=(?, 4) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "computed_masks": {
                                    "variable_value": "[None, None]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "mask": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.outputs": {
                                    "variable_value": "[<tf.Tensor 'swap_layer_1/Identity:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'swap_layer_1/Identity_1:0' shape=(?, 4) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "tensor": {
                                    "variable_value": "<tf.Tensor 'swap_layer_1_1/Identity_1:0' shape=(?, 4) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(4)])"
                                },
                                "_": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "output_tensors.append": {
                                    "variable_value": "<built-in method append of list object at 0x128f06c30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "model.name": {
                                    "variable_value": "'model_1'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _clone_functional_model(model, input_tensors=None):\n    \"\"\"Clone a functional `Model` instance.\n\n    Model cloning is similar to calling a model on new inputs,\n    except that it creates new layers (and thus new weights) instead\n    of sharing the weights of the existing layers.\n\n    # Arguments\n        model: Instance of `Model`.\n        input_tensors: optional list of input tensors\n            to build the model upon. If not provided,\n            placeholders will be created.\n\n    # Returns\n        An instance of `Model` reproducing the behavior\n        of the original model, on top of new inputs tensors,\n        using newly instantiated weights.\n\n    # Raises\n        ValueError: in case of invalid `model` argument value.\n    \"\"\"\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument '\n                         'to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument '\n                         'to be a functional `Model` instance, '\n                         'got a `Sequential` instance instead:', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_layers = []\n        input_tensors = []\n        for layer in model._input_layers:\n            input_tensor = Input(batch_shape=layer.batch_input_shape,\n                                 dtype=layer.dtype,\n                                 sparse=layer.sparse,\n                                 name=layer.name)\n            input_tensors.append(input_tensor)\n            # Cache newly created input layer.\n            newly_created_input_layer = input_tensor._keras_history[0]\n            layer_map[layer] = newly_created_input_layer\n        for _original, _cloned in zip(model._input_layers, input_layers):\n            layer_map[_original] = _cloned\n    else:\n        # Make sure that all input tensors come from a Keras layer.\n        # If tensor comes from an input layer: cache the input layer.\n        input_tensors = to_list(input_tensors)\n        _input_tensors = []\n        for i, x in enumerate(input_tensors):\n            if not K.is_keras_tensor(x):\n                name = model._input_layers[i].name\n                input_tensor = Input(tensor=x,\n                                     name='input_wrapper_for_' + name)\n                _input_tensors.append(input_tensor)\n                # Cache newly created input layer.\n                original_input_layer = x._keras_history[0]\n                newly_created_input_layer = input_tensor._keras_history[0]\n                layer_map[original_input_layer] = newly_created_input_layer\n            else:\n                _input_tensors.append(x)\n        input_tensors = _input_tensors\n\n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)  # tensor, mask\n\n    # Iterated over every node in the reference model, in depth order.\n    depth_keys = list(model._nodes_by_depth.keys())\n    depth_keys.sort(reverse=True)\n    for depth in depth_keys:\n        nodes = model._nodes_by_depth[depth]\n        for node in nodes:\n            # Recover the corresponding layer.\n            layer = node.outbound_layer\n\n            # Get or create layer.\n            if layer not in layer_map:\n                # Clone layer.\n                new_layer = layer.__class__.from_config(layer.get_config())\n                layer_map[layer] = new_layer\n                layer = new_layer\n            else:\n                # Reuse previously cloned layer.\n                layer = layer_map[layer]\n                # Don't call InputLayer multiple times.\n                if isinstance(layer, InputLayer):\n                    continue\n\n            # Gather inputs to call the new layer.\n            reference_input_tensors = node.input_tensors\n            reference_output_tensors = node.output_tensors\n\n            # If all previous input tensors are available in tensor_map,\n            # then call node.inbound_layer on them.\n            computed_data = []  # List of tuples (input, mask).\n            for x in reference_input_tensors:\n                if x in tensor_map:\n                    computed_data.append(tensor_map[x])\n\n            if len(computed_data) == len(reference_input_tensors):\n                # Call layer.\n                if node.arguments:\n                    kwargs = node.arguments\n                else:\n                    kwargs = {}\n                if len(computed_data) == 1:\n                    computed_tensor, computed_mask = computed_data[0]\n                    if has_arg(layer.call, 'mask'):\n                        if 'mask' not in kwargs:\n                            kwargs['mask'] = computed_mask\n                    output_tensors = to_list(\n                        layer(computed_tensor, **kwargs))\n                    output_masks = to_list(\n                        layer.compute_mask(computed_tensor,\n                                           computed_mask))\n                    computed_tensors = [computed_tensor]\n                    computed_masks = [computed_mask]\n                else:\n                    computed_tensors = [x[0] for x in computed_data]\n                    computed_masks = [x[1] for x in computed_data]\n                    if has_arg(layer.call, 'mask'):\n                        if 'mask' not in kwargs:\n                            kwargs['mask'] = computed_masks\n                    output_tensors = to_list(\n                        layer(computed_tensors, **kwargs))\n                    output_masks = to_list(\n                        layer.compute_mask(computed_tensors,\n                                           computed_masks))\n                # Update tensor_map.\n                for x, y, mask in zip(reference_output_tensors,\n                                      output_tensors,\n                                      output_masks):\n                    tensor_map[x] = (y, mask)\n\n    # Check that we did compute the model outputs,\n    # then instantiate a new model from inputs and outputs.\n    output_tensors = []\n    for x in model.outputs:\n        assert x in tensor_map, 'Could not compute output ' + str(x)\n        tensor, _ = tensor_map[x]\n        output_tensors.append(tensor)\n    return Model(input_tensors, output_tensors, name=model.name)",
                "def _clone_sequential_model(model, input_tensors=None):\n    \"\"\"Clone a `Sequential` model instance.\n\n    Model cloning is similar to calling a model on new inputs,\n    except that it creates new layers (and thus new weights) instead\n    of sharing the weights of the existing layers.\n\n    # Arguments\n        model: Instance of `Sequential`.\n        input_tensors: optional list of input tensors\n            to build the model upon. If not provided,\n            placeholders will be created.\n\n    # Returns\n        An instance of `Sequential` reproducing the behavior\n        of the original model, on top of new inputs tensors,\n        using newly instantiated weights.\n\n    # Raises\n        ValueError: in case of invalid `model` argument value.\n    \"\"\"\n    if not isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument '\n                         'to be a `Sequential` model instance, '\n                         'but got:', model)\n\n    def clone(layer):\n        return layer.__class__.from_config(layer.get_config())\n\n    layers = [clone(layer) for layer in model.layers]\n    if input_tensors is None:\n        return Sequential(layers=layers, name=model.name)\n    else:\n        if len(to_list(input_tensors)) != 1:\n            raise ValueError('To clone a `Sequential` model, we expect '\n                             ' at most one tensor '\n                             'as part of `input_tensors`.')\n        x = to_list(input_tensors)[0]\n        if K.is_keras_tensor(x):\n            origin_layer = x._keras_history[0]\n            if isinstance(origin_layer, InputLayer):\n                return Sequential(layers=[origin_layer] + layers,\n                                  name=model.name)\n            else:\n                raise ValueError('Cannot clone a `Sequential` model on top '\n                                 'of a tensor that comes from a Keras layer '\n                                 'other than an `InputLayer`. '\n                                 'Use the functional API instead.')\n        input_tensor = Input(tensor=x,\n                             name='input_wrapper_for_' + str(x.name))\n        input_layer = input_tensor._keras_history[0]\n        return Sequential(layers=[input_layer] + layers, name=model.name)",
                "def clone_model(model, input_tensors=None):\n    \"\"\"Clone any `Model` instance.\n\n    Model cloning is similar to calling a model on new inputs,\n    except that it creates new layers (and thus new weights) instead\n    of sharing the weights of the existing layers.\n\n    # Arguments\n        model: Instance of `Model`\n            (could be a functional model or a Sequential model).\n        input_tensors: optional list of input tensors\n            to build the model upon. If not provided,\n            placeholders will be created.\n\n    # Returns\n        An instance of `Model` reproducing the behavior\n        of the original model, on top of new inputs tensors,\n        using newly instantiated weights.\n\n    # Raises\n        ValueError: in case of invalid `model` argument value.\n    \"\"\"\n    if isinstance(model, Sequential):\n        return _clone_sequential_model(model, input_tensors=input_tensors)\n    else:\n        return _clone_functional_model(model, input_tensors=input_tensors)",
                "def clone(layer):\n    return layer.__class__.from_config(layer.get_config())"
            ],
            "inscope_function_signatures": [
                "_clone_functional_model(model, input_tensors=None)",
                "_clone_sequential_model(model, input_tensors=None)",
                "clone_model(model, input_tensors=None)",
                "clone(layer)"
            ],
            "variables_in_file": {
                "ImportError": [
                    22
                ],
                "h5py": [
                    23
                ],
                "isinstance": [
                    193,
                    47,
                    113,
                    50,
                    212,
                    248
                ],
                "model": [
                    165,
                    169,
                    47,
                    49,
                    50,
                    53,
                    61,
                    193,
                    196,
                    70,
                    201,
                    203,
                    79,
                    214,
                    91,
                    223,
                    95,
                    98,
                    248,
                    249,
                    251
                ],
                "Model": [
                    169,
                    47
                ],
                "ValueError": [
                    194,
                    206,
                    48,
                    51,
                    216
                ],
                "Sequential": [
                    193,
                    203,
                    50,
                    213,
                    248,
                    223
                ],
                "layer_map": [
                    69,
                    71,
                    104,
                    107,
                    111,
                    86,
                    55
                ],
                "tensor_map": [
                    160,
                    166,
                    167,
                    92,
                    56,
                    124,
                    125
                ],
                "input_tensors": [
                    89,
                    66,
                    249,
                    169,
                    202,
                    75,
                    77,
                    205,
                    251,
                    209,
                    57,
                    91,
                    60
                ],
                "input_layers": [
                    59,
                    70
                ],
                "layer": [
                    135,
                    139,
                    141,
                    148,
                    152,
                    154,
                    61,
                    62,
                    63,
                    64,
                    65,
                    69,
                    199,
                    201,
                    101,
                    104,
                    106,
                    107,
                    108,
                    111,
                    113
                ],
                "model._input_layers": [
                    61,
                    70,
                    79
                ],
                "input_tensor": [
                    66,
                    68,
                    80,
                    82,
                    85,
                    220,
                    222,
                    62
                ],
                "Input": [
                    80,
                    220,
                    62
                ],
                "layer.batch_input_shape": [
                    62
                ],
                "layer.dtype": [
                    63
                ],
                "layer.sparse": [
                    64
                ],
                "layer.name": [
                    65
                ],
                "input_tensors.append": [
                    66
                ],
                "newly_created_input_layer": [
                    85,
                    68,
                    69,
                    86
                ],
                "input_tensor._keras_history": [
                    68,
                    85,
                    222
                ],
                "_original": [
                    70,
                    71
                ],
                "_cloned": [
                    70,
                    71
                ],
                "zip": [
                    91,
                    157,
                    70
                ],
                "to_list": [
                    138,
                    75,
                    140,
                    205,
                    209,
                    151,
                    153
                ],
                "_input_tensors": [
                    88,
                    89,
                    82,
                    76
                ],
                "i": [
                    77,
                    79
                ],
                "x": [
                    146,
                    147,
                    157,
                    160,
                    165,
                    166,
                    167,
                    77,
                    78,
                    80,
                    209,
                    210,
                    211,
                    84,
                    88,
                    91,
                    92,
                    220,
                    221,
                    123,
                    124,
                    125
                ],
                "enumerate": [
                    77
                ],
                "K.is_keras_tensor": [
                    210,
                    78
                ],
                "K": [
                    210,
                    78
                ],
                "name": [
                    81,
                    79
                ],
                "_input_tensors.append": [
                    88,
                    82
                ],
                "original_input_layer": [
                    84,
                    86
                ],
                "x._keras_history": [
                    211,
                    84
                ],
                "y": [
                    160,
                    91,
                    92,
                    157
                ],
                "model.inputs": [
                    91
                ],
                "depth_keys": [
                    96,
                    97,
                    95
                ],
                "list": [
                    95
                ],
                "model._nodes_by_depth.keys": [
                    95
                ],
                "model._nodes_by_depth": [
                    98,
                    95
                ],
                "depth_keys.sort": [
                    96
                ],
                "depth": [
                    97,
                    98
                ],
                "nodes": [
                    98,
                    99
                ],
                "node": [
                    129,
                    130,
                    99,
                    101,
                    117,
                    118
                ],
                "node.outbound_layer": [
                    101
                ],
                "new_layer": [
                    106,
                    107,
                    108
                ],
                "layer.__class__.from_config": [
                    106,
                    199
                ],
                "layer.__class__": [
                    106,
                    199
                ],
                "layer.get_config": [
                    106,
                    199
                ],
                "InputLayer": [
                    113,
                    212
                ],
                "reference_input_tensors": [
                    123,
                    117,
                    127
                ],
                "node.input_tensors": [
                    117
                ],
                "reference_output_tensors": [
                    157,
                    118
                ],
                "node.output_tensors": [
                    118
                ],
                "computed_data": [
                    133,
                    134,
                    146,
                    147,
                    122,
                    125,
                    127
                ],
                "computed_data.append": [
                    125
                ],
                "len": [
                    205,
                    133,
                    127
                ],
                "node.arguments": [
                    129,
                    130
                ],
                "kwargs": [
                    130,
                    132,
                    136,
                    137,
                    139,
                    149,
                    150,
                    152
                ],
                "computed_tensor": [
                    139,
                    141,
                    134,
                    143
                ],
                "computed_mask": [
                    144,
                    137,
                    142,
                    134
                ],
                "has_arg": [
                    148,
                    135
                ],
                "layer.call": [
                    148,
                    135
                ],
                "output_tensors": [
                    164,
                    168,
                    169,
                    138,
                    151,
                    158
                ],
                "output_masks": [
                    153,
                    140,
                    159
                ],
                "layer.compute_mask": [
                    154,
                    141
                ],
                "computed_tensors": [
                    152,
                    146,
                    154,
                    143
                ],
                "computed_masks": [
                    144,
                    147,
                    155,
                    150
                ],
                "mask": [
                    160,
                    157
                ],
                "model.outputs": [
                    165
                ],
                "str": [
                    221,
                    166
                ],
                "tensor": [
                    168,
                    167
                ],
                "_": [
                    167
                ],
                "output_tensors.append": [
                    168
                ],
                "model.name": [
                    169,
                    203,
                    214,
                    223
                ],
                "layers": [
                    201,
                    203,
                    213,
                    223
                ],
                "clone": [
                    201
                ],
                "model.layers": [
                    201
                ],
                "origin_layer": [
                    211,
                    212,
                    213
                ],
                "x.name": [
                    221
                ],
                "input_layer": [
                    222,
                    223
                ],
                "_clone_sequential_model": [
                    249
                ],
                "_clone_functional_model": [
                    251
                ]
            },
            "filtered_variables_in_file": {
                "h5py": [
                    23
                ],
                "model": [
                    165,
                    169,
                    47,
                    49,
                    50,
                    53,
                    61,
                    193,
                    196,
                    70,
                    201,
                    203,
                    79,
                    214,
                    91,
                    223,
                    95,
                    98,
                    248,
                    249,
                    251
                ],
                "Model": [
                    169,
                    47
                ],
                "Sequential": [
                    193,
                    203,
                    50,
                    213,
                    248,
                    223
                ],
                "layer_map": [
                    69,
                    71,
                    104,
                    107,
                    111,
                    86,
                    55
                ],
                "tensor_map": [
                    160,
                    166,
                    167,
                    92,
                    56,
                    124,
                    125
                ],
                "input_tensors": [
                    89,
                    66,
                    249,
                    169,
                    202,
                    75,
                    77,
                    205,
                    251,
                    209,
                    57,
                    91,
                    60
                ],
                "input_layers": [
                    59,
                    70
                ],
                "layer": [
                    135,
                    139,
                    141,
                    148,
                    152,
                    154,
                    61,
                    62,
                    63,
                    64,
                    65,
                    69,
                    199,
                    201,
                    101,
                    104,
                    106,
                    107,
                    108,
                    111,
                    113
                ],
                "model._input_layers": [
                    61,
                    70,
                    79
                ],
                "input_tensor": [
                    66,
                    68,
                    80,
                    82,
                    85,
                    220,
                    222,
                    62
                ],
                "Input": [
                    80,
                    220,
                    62
                ],
                "layer.batch_input_shape": [
                    62
                ],
                "layer.dtype": [
                    63
                ],
                "layer.sparse": [
                    64
                ],
                "layer.name": [
                    65
                ],
                "input_tensors.append": [
                    66
                ],
                "newly_created_input_layer": [
                    85,
                    68,
                    69,
                    86
                ],
                "input_tensor._keras_history": [
                    68,
                    85,
                    222
                ],
                "_original": [
                    70,
                    71
                ],
                "_cloned": [
                    70,
                    71
                ],
                "to_list": [
                    138,
                    75,
                    140,
                    205,
                    209,
                    151,
                    153
                ],
                "_input_tensors": [
                    88,
                    89,
                    82,
                    76
                ],
                "i": [
                    77,
                    79
                ],
                "x": [
                    146,
                    147,
                    157,
                    160,
                    165,
                    166,
                    167,
                    77,
                    78,
                    80,
                    209,
                    210,
                    211,
                    84,
                    88,
                    91,
                    92,
                    220,
                    221,
                    123,
                    124,
                    125
                ],
                "K.is_keras_tensor": [
                    210,
                    78
                ],
                "K": [
                    210,
                    78
                ],
                "name": [
                    81,
                    79
                ],
                "_input_tensors.append": [
                    88,
                    82
                ],
                "original_input_layer": [
                    84,
                    86
                ],
                "x._keras_history": [
                    211,
                    84
                ],
                "y": [
                    160,
                    91,
                    92,
                    157
                ],
                "model.inputs": [
                    91
                ],
                "depth_keys": [
                    96,
                    97,
                    95
                ],
                "model._nodes_by_depth.keys": [
                    95
                ],
                "model._nodes_by_depth": [
                    98,
                    95
                ],
                "depth_keys.sort": [
                    96
                ],
                "depth": [
                    97,
                    98
                ],
                "nodes": [
                    98,
                    99
                ],
                "node": [
                    129,
                    130,
                    99,
                    101,
                    117,
                    118
                ],
                "node.outbound_layer": [
                    101
                ],
                "new_layer": [
                    106,
                    107,
                    108
                ],
                "layer.__class__.from_config": [
                    106,
                    199
                ],
                "layer.__class__": [
                    106,
                    199
                ],
                "layer.get_config": [
                    106,
                    199
                ],
                "InputLayer": [
                    113,
                    212
                ],
                "reference_input_tensors": [
                    123,
                    117,
                    127
                ],
                "node.input_tensors": [
                    117
                ],
                "reference_output_tensors": [
                    157,
                    118
                ],
                "node.output_tensors": [
                    118
                ],
                "computed_data": [
                    133,
                    134,
                    146,
                    147,
                    122,
                    125,
                    127
                ],
                "computed_data.append": [
                    125
                ],
                "node.arguments": [
                    129,
                    130
                ],
                "kwargs": [
                    130,
                    132,
                    136,
                    137,
                    139,
                    149,
                    150,
                    152
                ],
                "computed_tensor": [
                    139,
                    141,
                    134,
                    143
                ],
                "computed_mask": [
                    144,
                    137,
                    142,
                    134
                ],
                "has_arg": [
                    148,
                    135
                ],
                "layer.call": [
                    148,
                    135
                ],
                "output_tensors": [
                    164,
                    168,
                    169,
                    138,
                    151,
                    158
                ],
                "output_masks": [
                    153,
                    140,
                    159
                ],
                "layer.compute_mask": [
                    154,
                    141
                ],
                "computed_tensors": [
                    152,
                    146,
                    154,
                    143
                ],
                "computed_masks": [
                    144,
                    147,
                    155,
                    150
                ],
                "mask": [
                    160,
                    157
                ],
                "model.outputs": [
                    165
                ],
                "tensor": [
                    168,
                    167
                ],
                "_": [
                    167
                ],
                "output_tensors.append": [
                    168
                ],
                "model.name": [
                    169,
                    203,
                    214,
                    223
                ],
                "layers": [
                    201,
                    203,
                    213,
                    223
                ],
                "clone": [
                    201
                ],
                "model.layers": [
                    201
                ],
                "origin_layer": [
                    211,
                    212,
                    213
                ],
                "x.name": [
                    221
                ],
                "input_layer": [
                    222,
                    223
                ],
                "_clone_sequential_model": [
                    249
                ],
                "_clone_functional_model": [
                    251
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/keras_3/tests/keras/test_sequential_model.py",
                "test_function": "test_clone_functional_model_with_multi_outputs",
                "test_function_code": "def test_clone_functional_model_with_multi_outputs():\n    input_layer = keras.Input(shape=(4,))\n\n    # Layer with single input and multiple outputs\n    layer1 = keras.layers.Lambda(lambda x: [x + 1, x],\n                                 lambda shapes: [shapes, shapes])\n    x_a, x_b = layer1(input_layer)\n\n    class SwapLayer(keras.layers.Layer):\n        def call(self, inputs, **kwargs):\n            return [inputs[1], inputs[0]]\n\n        def compute_output_shape(self, input_shape):\n            return [input_shape[1], input_shape[0]]\n\n    # Layer with multiple inputs and outputs\n    x_a, x_b = SwapLayer()([x_a, x_b])\n    model = keras.Model(inputs=[input_layer], outputs=[x_a, x_b])\n    new_model = keras.models.clone_model(model)\n\n    x_test = np.random.random((10, 4))\n    pred_a, pred_b = model.predict(x_test)\n    pred_new_a, pred_new_b = new_model.predict(x_test)\n    assert(pred_a.all() == pred_new_a.all())\n    assert(pred_b.all() == pred_new_b.all())",
                "test_error": "AssertionError: Could not compute output Tensor(\"swap_layer_1/Identity:0\", shape=(?, 4), dtype=float32)",
                "full_test_error": "def test_clone_functional_model_with_multi_outputs():\n        input_layer = keras.Input(shape=(4,))\n    \n        # Layer with single input and multiple outputs\n        layer1 = keras.layers.Lambda(lambda x: [x + 1, x],\n                                     lambda shapes: [shapes, shapes])\n        x_a, x_b = layer1(input_layer)\n    \n        class SwapLayer(keras.layers.Layer):\n            def call(self, inputs, **kwargs):\n                return [inputs[1], inputs[0]]\n    \n            def compute_output_shape(self, input_shape):\n                return [input_shape[1], input_shape[0]]\n    \n        # Layer with multiple inputs and outputs\n        x_a, x_b = SwapLayer()([x_a, x_b])\n        model = keras.Model(inputs=[input_layer], outputs=[x_a, x_b])\n>       new_model = keras.models.clone_model(model)\n\ntests/keras/test_sequential_model.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nkeras/models.py:251: in clone_model\n    return _clone_functional_model(model, input_tensors=input_tensors)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmodel = <keras.engine.training.Model object at 0x12ee73910>\ninput_tensors = [<tf.Tensor 'input_1_1:0' shape=(?, 4) dtype=float32>]\n\n    def _clone_functional_model(model, input_tensors=None):\n        \"\"\"Clone a functional `Model` instance.\n    \n        Model cloning is similar to calling a model on new inputs,\n        except that it creates new layers (and thus new weights) instead\n        of sharing the weights of the existing layers.\n    \n        # Arguments\n            model: Instance of `Model`.\n            input_tensors: optional list of input tensors\n                to build the model upon. If not provided,\n                placeholders will be created.\n    \n        # Returns\n            An instance of `Model` reproducing the behavior\n            of the original model, on top of new inputs tensors,\n            using newly instantiated weights.\n    \n        # Raises\n            ValueError: in case of invalid `model` argument value.\n        \"\"\"\n        if not isinstance(model, Model):\n            raise ValueError('Expected `model` argument '\n                             'to be a `Model` instance, got ', model)\n        if isinstance(model, Sequential):\n            raise ValueError('Expected `model` argument '\n                             'to be a functional `Model` instance, '\n                             'got a `Sequential` instance instead:', model)\n    \n        layer_map = {}  # Cache for created layers.\n        tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n        if input_tensors is None:\n            # Create placeholders to build the model on top of.\n            input_layers = []\n            input_tensors = []\n            for layer in model._input_layers:\n                input_tensor = Input(batch_shape=layer.batch_input_shape,\n                                     dtype=layer.dtype,\n                                     sparse=layer.sparse,\n                                     name=layer.name)\n                input_tensors.append(input_tensor)\n                # Cache newly created input layer.\n                newly_created_input_layer = input_tensor._keras_history[0]\n                layer_map[layer] = newly_created_input_layer\n            for _original, _cloned in zip(model._input_layers, input_layers):\n                layer_map[_original] = _cloned\n        else:\n            # Make sure that all input tensors come from a Keras layer.\n            # If tensor comes from an input layer: cache the input layer.\n            input_tensors = to_list(input_tensors)\n            _input_tensors = []\n            for i, x in enumerate(input_tensors):\n                if not K.is_keras_tensor(x):\n                    name = model._input_layers[i].name\n                    input_tensor = Input(tensor=x,\n                                         name='input_wrapper_for_' + name)\n                    _input_tensors.append(input_tensor)\n                    # Cache newly created input layer.\n                    original_input_layer = x._keras_history[0]\n                    newly_created_input_layer = input_tensor._keras_history[0]\n                    layer_map[original_input_layer] = newly_created_input_layer\n                else:\n                    _input_tensors.append(x)\n            input_tensors = _input_tensors\n    \n        for x, y in zip(model.inputs, input_tensors):\n            tensor_map[x] = (y, None)  # tensor, mask\n    \n        # Iterated over every node in the reference model, in depth order.\n        depth_keys = list(model._nodes_by_depth.keys())\n        depth_keys.sort(reverse=True)\n        for depth in depth_keys:\n            nodes = model._nodes_by_depth[depth]\n            for node in nodes:\n                # Recover the corresponding layer.\n                layer = node.outbound_layer\n    \n                # Get or create layer.\n                if layer not in layer_map:\n                    # Clone layer.\n                    new_layer = layer.__class__.from_config(layer.get_config())\n                    layer_map[layer] = new_layer\n                    layer = new_layer\n                else:\n                    # Reuse previously cloned layer.\n                    layer = layer_map[layer]\n                    # Don't call InputLayer multiple times.\n                    if isinstance(layer, InputLayer):\n                        continue\n    \n                # Gather inputs to call the new layer.\n                reference_input_tensors = node.input_tensors\n                reference_output_tensors = node.output_tensors\n    \n                # If all previous input tensors are available in tensor_map,\n                # then call node.inbound_layer on them.\n                computed_data = []  # List of tuples (input, mask).\n                for x in reference_input_tensors:\n                    if x in tensor_map:\n                        computed_data.append(tensor_map[x])\n    \n                if len(computed_data) == len(reference_input_tensors):\n                    # Call layer.\n                    if node.arguments:\n                        kwargs = node.arguments\n                    else:\n                        kwargs = {}\n                    if len(computed_data) == 1:\n                        computed_tensor, computed_mask = computed_data[0]\n                        if has_arg(layer.call, 'mask'):\n                            if 'mask' not in kwargs:\n                                kwargs['mask'] = computed_mask\n                        output_tensors = to_list(\n                            layer(computed_tensor, **kwargs))\n                        output_masks = to_list(\n                            layer.compute_mask(computed_tensor,\n                                               computed_mask))\n                        computed_tensors = [computed_tensor]\n                        computed_masks = [computed_mask]\n                    else:\n                        computed_tensors = [x[0] for x in computed_data]\n                        computed_masks = [x[1] for x in computed_data]\n                        if has_arg(layer.call, 'mask'):\n                            if 'mask' not in kwargs:\n                                kwargs['mask'] = computed_masks\n                        output_tensors = to_list(\n                            layer(computed_tensors, **kwargs))\n                        output_masks = to_list(\n                            layer.compute_mask(computed_tensors,\n                                               computed_masks))\n                    # Update tensor_map.\n                    for x, y, mask in zip(reference_output_tensors,\n                                          output_tensors,\n                                          output_masks):\n                        tensor_map[x] = (y, mask)\n    \n        # Check that we did compute the model outputs,\n        # then instantiate a new model from inputs and outputs.\n        output_tensors = []\n        for x in model.outputs:\n>           assert x in tensor_map, 'Could not compute output ' + str(x)\nE           AssertionError: Could not compute output Tensor(\"swap_layer_1/Identity:0\", shape=(?, 4), dtype=float32)\n\nkeras/models.py:166: AssertionError",
                "traceback": "keras/models.py:251: in clone_model\n    return _clone_functional_model(model, input_tensors=input_tensors)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmodel = <keras.engine.training.Model object at 0x12ee73910>\ninput_tensors = [<tf.Tensor 'input_1_1:0' shape=(?, 4) dtype=float32>]\n\n    def _clone_functional_model(model, input_tensors=None):\n        \"\"\"Clone a functional `Model` instance.\n    \n        Model cloning is similar to calling a model on new inputs,\n        except that it creates new layers (and thus new weights) instead\n        of sharing the weights of the existing layers.\n    \n        # Arguments\n            model: Instance of `Model`.\n            input_tensors: optional list of input tensors\n                to build the model upon. If not provided,\n                placeholders will be created.\n    \n        # Returns\n            An instance of `Model` reproducing the behavior\n            of the original model, on top of new inputs tensors,\n            using newly instantiated weights.\n    \n        # Raises\n            ValueError: in case of invalid `model` argument value.\n        \"\"\"\n        if not isinstance(model, Model):\n            raise ValueError('Expected `model` argument '\n                             'to be a `Model` instance, got ', model)\n        if isinstance(model, Sequential):\n            raise ValueError('Expected `model` argument '\n                             'to be a functional `Model` instance, '\n                             'got a `Sequential` instance instead:', model)\n    \n        layer_map = {}  # Cache for created layers.\n        tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n        if input_tensors is None:\n            # Create placeholders to build the model on top of.\n            input_layers = []\n            input_tensors = []\n            for layer in model._input_layers:\n                input_tensor = Input(batch_shape=layer.batch_input_shape,\n                                     dtype=layer.dtype,\n                                     sparse=layer.sparse,\n                                     name=layer.name)\n                input_tensors.append(input_tensor)\n                # Cache newly created input layer.\n                newly_created_input_layer = input_tensor._keras_history[0]\n                layer_map[layer] = newly_created_input_layer\n            for _original, _cloned in zip(model._input_layers, input_layers):\n                layer_map[_original] = _cloned\n        else:\n            # Make sure that all input tensors come from a Keras layer.\n            # If tensor comes from an input layer: cache the input layer.\n            input_tensors = to_list(input_tensors)\n            _input_tensors = []\n            for i, x in enumerate(input_tensors):\n                if not K.is_keras_tensor(x):\n                    name = model._input_layers[i].name\n                    input_tensor = Input(tensor=x,\n                                         name='input_wrapper_for_' + name)\n                    _input_tensors.append(input_tensor)\n                    # Cache newly created input layer.\n                    original_input_layer = x._keras_history[0]\n                    newly_created_input_layer = input_tensor._keras_history[0]\n                    layer_map[original_input_layer] = newly_created_input_layer\n                else:\n                    _input_tensors.append(x)\n            input_tensors = _input_tensors\n    \n        for x, y in zip(model.inputs, input_tensors):\n            tensor_map[x] = (y, None)  # tensor, mask\n    \n        # Iterated over every node in the reference model, in depth order.\n        depth_keys = list(model._nodes_by_depth.keys())\n        depth_keys.sort(reverse=True)\n        for depth in depth_keys:\n            nodes = model._nodes_by_depth[depth]\n            for node in nodes:\n                # Recover the corresponding layer.\n                layer = node.outbound_layer\n    \n                # Get or create layer.\n                if layer not in layer_map:\n                    # Clone layer.\n                    new_layer = layer.__class__.from_config(layer.get_config())\n                    layer_map[layer] = new_layer\n                    layer = new_layer\n                else:\n                    # Reuse previously cloned layer.\n                    layer = layer_map[layer]\n                    # Don't call InputLayer multiple times.\n                    if isinstance(layer, InputLayer):\n                        continue\n    \n                # Gather inputs to call the new layer.\n                reference_input_tensors = node.input_tensors\n                reference_output_tensors = node.output_tensors\n    \n                # If all previous input tensors are available in tensor_map,\n                # then call node.inbound_layer on them.\n                computed_data = []  # List of tuples (input, mask).\n                for x in reference_input_tensors:\n                    if x in tensor_map:\n                        computed_data.append(tensor_map[x])\n    \n                if len(computed_data) == len(reference_input_tensors):\n                    # Call layer.\n                    if node.arguments:\n                        kwargs = node.arguments\n                    else:\n                        kwargs = {}\n                    if len(computed_data) == 1:\n                        computed_tensor, computed_mask = computed_data[0]\n                        if has_arg(layer.call, 'mask'):\n                            if 'mask' not in kwargs:\n                                kwargs['mask'] = computed_mask\n                        output_tensors = to_list(\n                            layer(computed_tensor, **kwargs))\n                        output_masks = to_list(\n                            layer.compute_mask(computed_tensor,\n                                               computed_mask))\n                        computed_tensors = [computed_tensor]\n                        computed_masks = [computed_mask]\n                    else:\n                        computed_tensors = [x[0] for x in computed_data]\n                        computed_masks = [x[1] for x in computed_data]\n                        if has_arg(layer.call, 'mask'):\n                            if 'mask' not in kwargs:\n                                kwargs['mask'] = computed_masks\n                        output_tensors = to_list(\n                            layer(computed_tensors, **kwargs))\n                        output_masks = to_list(\n                            layer.compute_mask(computed_tensors,\n                                               computed_masks))\n                    # Update tensor_map.\n                    for x, y, mask in zip(reference_output_tensors,\n                                          output_tensors,\n                                          output_masks):\n                        tensor_map[x] = (y, mask)\n    \n        # Check that we did compute the model outputs,\n        # then instantiate a new model from inputs and outputs.\n        output_tensors = []\n        for x in model.outputs:\n>           assert x in tensor_map, 'Could not compute output ' + str(x)\nE           AssertionError: Could not compute output Tensor(\"swap_layer_1/Identity:0\", shape=(?, 4), dtype=float32)\n\nkeras/models.py:166: AssertionError",
                "test_function_decorators": []
            }
        ]
    }
}