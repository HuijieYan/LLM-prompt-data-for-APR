{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.3.1": 1,
                "1.3.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.1.2": 0,
                "2.2.3": 0,
                "2.2.4": 1,
                "2.2.5": 1,
                "2.2.6": 0,
                "2.1.1": 1,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    from keras.layers import Input, Lambda, Layer, Model, InputLayer\n    import keras.backend as K\n    import numpy as np\n    import keras\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, keras.Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, '\n                         'got a `Sequential` instance instead:', model)\n    \n    input_layers = model.inputs\n    layer_map = {}\n    tensor_map = {}\n    \n    if input_tensors is None:\n        input_tensors = [Input(batch_shape=layer.input_shape,\n                               dtype=layer.dtype,\n                               sparse=layer.sparse,\n                               name=layer.name) for layer in input_layers]\n    \n    for original, cloned in zip(model.inputs, input_tensors):\n        layer_map[original] = cloned\n    \n    for layer in model.layers:\n        if layer not in layer_map:\n            layer_config = layer.get_config()\n            new_layer = layer.__class__.from_config(layer_config)\n            layer_map[layer] = new_layer\n    \n        for node in layer._inbound_nodes:\n            input_tensors = node.input_tensors\n            output_tensors = node.output_tensors\n    \n            computed_data = []\n            for x in input_tensors:\n                if x in tensor_map:\n                    computed_data.append(tensor_map[x])\n    \n            if len(computed_data) == len(input_tensors):\n                kwargs = node.arguments if node.arguments else {}\n    \n                if len(computed_data) == 1:\n                    computed_tensor, computed_mask = computed_data[0]\n                    if hasattr(new_layer, 'mask') and 'mask' not in kwargs:\n                        kwargs['mask'] = computed_mask\n                    output = to_list(new_layer(computed_tensor, **kwargs))\n                    mask_output = to_list(new_layer.compute_mask(computed_tensor, computed_mask))\n                else:\n                    computed_tensors = [x[0] for x in computed_data]\n                    computed_masks = [x[1] for x in computed_data]\n                    if hasattr(new_layer, 'mask') and 'mask' not in kwargs:\n                        kwargs['mask'] = computed_masks\n                    output = to_list(new_layer(computed_tensors, **kwargs))\n                    mask_output = to_list(new_layer.compute_mask(computed_tensors, computed_masks))\n    \n                for x, y, mask in zip(output_tensors, output, mask_output):\n                    tensor_map[x] = (y, mask)\n    \n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n    return Model(input_tensors, output_tensors, name=model.name)"
        }
    ]
}