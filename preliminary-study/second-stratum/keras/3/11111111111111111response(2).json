{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.3.1": 1,
                "1.3.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.1.2": 1,
                "2.2.3": 1,
                "2.2.4": 1,
                "2.2.5": 1,
                "2.2.6": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    from keras.models import Model\n    from keras.layers import Input, InputLayer\n    import keras.backend as K\n    import numpy as np\n    from keras.models import clone_model\n    from keras.layers import Lambda, Add\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    \n    layer_map = {}  # Cache for created layers\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    \n    if input_tensors is None:\n        input_tensors = [Input(batch_shape=layer.batch_input_shape, dtype=layer.dtype, sparse=layer.sparse, name=layer.name) for layer in model._input_layers]\n    input_layers = [input_tensor._keras_history for input_tensor in input_tensors]\n    for original, cloned in zip(model._input_layers, input_layers):\n        layer_map[original] = cloned\n    \n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)  # tensor, mask\n    \n    # Iterate over every node in the reference model, in depth order\n    depth_keys = list(model._nodes_by_depth.keys())\n    depth_keys.sort(reverse=True)\n    \n    for depth in depth_keys:\n        nodes = model._nodes_by_depth[depth]\n        for node in nodes:\n            layer = node.outbound_layer\n            \n            if layer not in layer_map:\n                new_layer = layer.__class__.from_config(layer.get_config())\n                layer_map[layer] = new_layer\n            else:\n                layer = layer_map[layer]\n                if isinstance(layer, InputLayer):\n                    continue\n    \n            reference_input_tensors = node.input_tensors\n            reference_output_tensors = node.output_tensors\n    \n            computed_data = [(tensor_map[x][0], tensor_map[x][1]) for x in reference_input_tensors if x in tensor_map]\n    \n            if len(computed_data) == len(reference_input_tensors):\n                kwargs = node.arguments if node.arguments else {}\n                computed_tensors = [x[0] for x in computed_data]\n                computed_masks = [x[1] for x in computed_data]\n                if has_arg(layer.call, 'mask') and len(computed_data) > 1:\n                    kwargs['mask'] = computed_masks\n                output_tensors = to_list(layer(computed_tensors, **kwargs))\n                tensor_map.update({output_tensor: (output_tensors[i], None) for i, output_tensor in enumerate(reference_output_tensors)})\n    \n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n    return Model(input_tensors, output_tensors, name=model.name)"
        }
    ]
}