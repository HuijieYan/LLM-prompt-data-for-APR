{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.3.1": 1,
                "1.3.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.1.2": 1,
                "2.2.3": 1,
                "2.2.4": 1,
                "2.2.5": 1,
                "2.2.6": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model: Functional, input_tensors=None) -> Functional:\n    from tensorflow.python.keras.engine.functional import Functional\n    from tensorflow.python.keras.engine.network import Network\n    from tensorflow.python.keras.layers import Input\n    \"\"\"\n    Clone a functional Model instance.\n    \n    Model cloning is similar to calling a model on new inputs,\n    except that it creates new layers (and thus new weights) instead\n    of sharing the weights of the existing layers.\n    \n    # Arguments\n        model: Instance of `Model`.\n        input_tensors: optional list of input tensors\n            to build the model upon. If not provided,\n            placeholders will be created.\n    \n    # Returns\n        An instance of `Model` reproducing the behavior\n        of the original model, on top of new inputs tensors,\n        using newly instantiated weights.\n    \n    # Raises\n        ValueError: in case of invalid `model` argument value.\n    \"\"\"\n    \n    if not isinstance(model, Network):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    \n    layer_map = {}  # Cache for created layers\n    tensor_map = {}  # Map {reference_tensor: corresponding_tensor}\n    \n    if input_tensors is None:\n        input_tensors = [Input(shape=input_layer.shape) for input_layer in model.inputs]\n    \n    for orig_input, new_input in zip(model.inputs, input_tensors):\n        tensor_map[orig_input] = new_input\n        \n    for layer in model.layers:\n        if layer not in layer_map:\n            new_layer = layer.__class__.from_config(layer.get_config())\n            layer_map[layer] = new_layer\n    \n    new_outputs = [layer(tensor_map[orig_input]) for orig_input, layer in zip(model.inputs, model.layers)]\n    \n    return Functional(inputs=input_tensors, outputs=new_outputs, name=model.name)"
        }
    ]
}