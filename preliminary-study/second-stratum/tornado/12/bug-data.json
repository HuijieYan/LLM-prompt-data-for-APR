{
    "tornado:12": {
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/tornado/tornado/auth.py": {
            "buggy_functions": [
                {
                    "function_name": "_on_access_token",
                    "function_code": "def _on_access_token(self, redirect_uri, client_id, client_secret,\n                     future, fields, response):\n    if response.error:\n        future.set_exception(AuthError('Facebook auth error: %s' % str(response)))\n        return\n\n    args = escape.parse_qs_bytes(escape.native_str(response.body))\n    session = {\n        \"access_token\": args[\"access_token\"][-1],\n        \"expires\": args.get(\"expires\")\n    }\n\n    self.facebook_request(\n        path=\"/me\",\n        callback=functools.partial(\n            self._on_get_user_info, future, session, fields),\n        access_token=session[\"access_token\"],\n        fields=\",\".join(fields)\n    )\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 982,
                    "variables": {
                        "response.error": [
                            984
                        ],
                        "response": [
                            984,
                            985,
                            988
                        ],
                        "future.set_exception": [
                            985
                        ],
                        "future": [
                            985,
                            997
                        ],
                        "AuthError": [
                            985
                        ],
                        "str": [
                            985
                        ],
                        "args": [
                            988,
                            990,
                            991
                        ],
                        "escape.parse_qs_bytes": [
                            988
                        ],
                        "escape": [
                            988
                        ],
                        "escape.native_str": [
                            988
                        ],
                        "response.body": [
                            988
                        ],
                        "session": [
                            997,
                            989,
                            998
                        ],
                        "args.get": [
                            991
                        ],
                        "self.facebook_request": [
                            994
                        ],
                        "self": [
                            994,
                            997
                        ],
                        "functools.partial": [
                            996
                        ],
                        "functools": [
                            996
                        ],
                        "self._on_get_user_info": [
                            997
                        ],
                        "fields": [
                            997,
                            999
                        ],
                        "join": [
                            999
                        ]
                    },
                    "filtered_variables": {
                        "response.error": [
                            984
                        ],
                        "response": [
                            984,
                            985,
                            988
                        ],
                        "future.set_exception": [
                            985
                        ],
                        "future": [
                            985,
                            997
                        ],
                        "AuthError": [
                            985
                        ],
                        "args": [
                            988,
                            990,
                            991
                        ],
                        "escape.parse_qs_bytes": [
                            988
                        ],
                        "escape": [
                            988
                        ],
                        "escape.native_str": [
                            988
                        ],
                        "response.body": [
                            988
                        ],
                        "session": [
                            997,
                            989,
                            998
                        ],
                        "args.get": [
                            991
                        ],
                        "self.facebook_request": [
                            994
                        ],
                        "self": [
                            994,
                            997
                        ],
                        "functools.partial": [
                            996
                        ],
                        "functools": [
                            996
                        ],
                        "self._on_get_user_info": [
                            997
                        ],
                        "fields": [
                            997,
                            999
                        ],
                        "join": [
                            999
                        ]
                    },
                    "diff_line_number": 988,
                    "class_data": {
                        "signature": "class FacebookGraphMixin(OAuth2Mixin)",
                        "docstring": "Facebook authentication using the new Graph API and OAuth2.",
                        "constructor_docstring": null,
                        "functions": [
                            "@_auth_return_future\ndef get_authenticated_user(self, redirect_uri, client_id, client_secret, code, callback, extra_fields=None):\n    \"\"\"Handles the login for the Facebook user, returning a user object.\n\n    Example usage:\n\n    .. testcode::\n\n        class FacebookGraphLoginHandler(tornado.web.RequestHandler,\n                                        tornado.auth.FacebookGraphMixin):\n          @tornado.gen.coroutine\n          def get(self):\n              if self.get_argument(\"code\", False):\n                  user = yield self.get_authenticated_user(\n                      redirect_uri='/auth/facebookgraph/',\n                      client_id=self.settings[\"facebook_api_key\"],\n                      client_secret=self.settings[\"facebook_secret\"],\n                      code=self.get_argument(\"code\"))\n                  # Save the user with e.g. set_secure_cookie\n              else:\n                  yield self.authorize_redirect(\n                      redirect_uri='/auth/facebookgraph/',\n                      client_id=self.settings[\"facebook_api_key\"],\n                      extra_params={\"scope\": \"read_stream,offline_access\"})\n\n    .. testoutput::\n       :hide:\n\n    \"\"\"\n    http = self.get_auth_http_client()\n    args = {'redirect_uri': redirect_uri, 'code': code, 'client_id': client_id, 'client_secret': client_secret}\n    fields = set(['id', 'name', 'first_name', 'last_name', 'locale', 'picture', 'link'])\n    if extra_fields:\n        fields.update(extra_fields)\n    http.fetch(self._oauth_request_token_url(**args), functools.partial(self._on_access_token, redirect_uri, client_id, client_secret, callback, fields))",
                            "def _on_access_token(self, redirect_uri, client_id, client_secret, future, fields, response):\n    if response.error:\n        future.set_exception(AuthError('Facebook auth error: %s' % str(response)))\n        return\n    args = escape.parse_qs_bytes(escape.native_str(response.body))\n    session = {'access_token': args['access_token'][-1], 'expires': args.get('expires')}\n    self.facebook_request(path='/me', callback=functools.partial(self._on_get_user_info, future, session, fields), access_token=session['access_token'], fields=','.join(fields))",
                            "def _on_get_user_info(self, future, session, fields, user):\n    if user is None:\n        future.set_result(None)\n        return\n    fieldmap = {}\n    for field in fields:\n        fieldmap[field] = user.get(field)\n    fieldmap.update({'access_token': session['access_token'], 'session_expires': session.get('expires')})\n    future.set_result(fieldmap)",
                            "@_auth_return_future\ndef facebook_request(self, path, callback, access_token=None, post_args=None, **args):\n    \"\"\"Fetches the given relative API path, e.g., \"/btaylor/picture\"\n\n    If the request is a POST, ``post_args`` should be provided. Query\n    string arguments should be given as keyword arguments.\n\n    An introduction to the Facebook Graph API can be found at\n    http://developers.facebook.com/docs/api\n\n    Many methods require an OAuth access token which you can\n    obtain through `~OAuth2Mixin.authorize_redirect` and\n    `get_authenticated_user`. The user returned through that\n    process includes an ``access_token`` attribute that can be\n    used to make authenticated requests via this method.\n\n    Example usage:\n\n    ..testcode::\n\n        class MainHandler(tornado.web.RequestHandler,\n                          tornado.auth.FacebookGraphMixin):\n            @tornado.web.authenticated\n            @tornado.gen.coroutine\n            def get(self):\n                new_entry = yield self.facebook_request(\n                    \"/me/feed\",\n                    post_args={\"message\": \"I am posting from my Tornado application!\"},\n                    access_token=self.current_user[\"access_token\"])\n\n                if not new_entry:\n                    # Call failed; perhaps missing permission?\n                    yield self.authorize_redirect()\n                    return\n                self.finish(\"Posted a message!\")\n\n    .. testoutput::\n       :hide:\n\n    The given path is relative to ``self._FACEBOOK_BASE_URL``,\n    by default \"https://graph.facebook.com\".\n\n    This method is a wrapper around `OAuth2Mixin.oauth2_request`;\n    the only difference is that this method takes a relative path,\n    while ``oauth2_request`` takes a complete url.\n\n    .. versionchanged:: 3.1\n       Added the ability to override ``self._FACEBOOK_BASE_URL``.\n    \"\"\"\n    url = self._FACEBOOK_BASE_URL + path\n    return self.oauth2_request(url, callback, access_token, post_args, **args)"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [
                            "_OAUTH_ACCESS_TOKEN_URL",
                            "_OAUTH_AUTHORIZE_URL",
                            "_OAUTH_NO_CALLBACKS",
                            "_FACEBOOK_BASE_URL"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "get_authenticated_user(self, redirect_uri, client_id, client_secret, code, callback, extra_fields=None)",
                            "_on_access_token(self, redirect_uri, client_id, client_secret, future, fields, response)",
                            "_on_get_user_info(self, future, session, fields, user)",
                            "facebook_request(self, path, callback, access_token=None, post_args=None, **args)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "facebook_request",
                    "function_code": "@_auth_return_future\ndef facebook_request(self, path, callback, access_token=None,\n                     post_args=None, **args):\n    \"\"\"Fetches the given relative API path, e.g., \"/btaylor/picture\"\n\n    If the request is a POST, ``post_args`` should be provided. Query\n    string arguments should be given as keyword arguments.\n\n    An introduction to the Facebook Graph API can be found at\n    http://developers.facebook.com/docs/api\n\n    Many methods require an OAuth access token which you can\n    obtain through `~OAuth2Mixin.authorize_redirect` and\n    `get_authenticated_user`. The user returned through that\n    process includes an ``access_token`` attribute that can be\n    used to make authenticated requests via this method.\n\n    Example usage:\n\n    ..testcode::\n\n        class MainHandler(tornado.web.RequestHandler,\n                          tornado.auth.FacebookGraphMixin):\n            @tornado.web.authenticated\n            @tornado.gen.coroutine\n            def get(self):\n                new_entry = yield self.facebook_request(\n                    \"/me/feed\",\n                    post_args={\"message\": \"I am posting from my Tornado application!\"},\n                    access_token=self.current_user[\"access_token\"])\n\n                if not new_entry:\n                    # Call failed; perhaps missing permission?\n                    yield self.authorize_redirect()\n                    return\n                self.finish(\"Posted a message!\")\n\n    .. testoutput::\n       :hide:\n\n    The given path is relative to ``self._FACEBOOK_BASE_URL``,\n    by default \"https://graph.facebook.com\".\n\n    This method is a wrapper around `OAuth2Mixin.oauth2_request`;\n    the only difference is that this method takes a relative path,\n    while ``oauth2_request`` takes a complete url.\n\n    .. versionchanged:: 3.1\n       Added the ability to override ``self._FACEBOOK_BASE_URL``.\n    \"\"\"\n    url = self._FACEBOOK_BASE_URL + path\n    return self.oauth2_request(url, callback, access_token,\n                               post_args, **args)\n",
                    "decorators": [
                        "_auth_return_future"
                    ],
                    "docstring": "Fetches the given relative API path, e.g., \"/btaylor/picture\"\n\nIf the request is a POST, ``post_args`` should be provided. Query\nstring arguments should be given as keyword arguments.\n\nAn introduction to the Facebook Graph API can be found at\nhttp://developers.facebook.com/docs/api\n\nMany methods require an OAuth access token which you can\nobtain through `~OAuth2Mixin.authorize_redirect` and\n`get_authenticated_user`. The user returned through that\nprocess includes an ``access_token`` attribute that can be\nused to make authenticated requests via this method.\n\nExample usage:\n\n..testcode::\n\n    class MainHandler(tornado.web.RequestHandler,\n                      tornado.auth.FacebookGraphMixin):\n        @tornado.web.authenticated\n        @tornado.gen.coroutine\n        def get(self):\n            new_entry = yield self.facebook_request(\n                \"/me/feed\",\n                post_args={\"message\": \"I am posting from my Tornado application!\"},\n                access_token=self.current_user[\"access_token\"])\n\n            if not new_entry:\n                # Call failed; perhaps missing permission?\n                yield self.authorize_redirect()\n                return\n            self.finish(\"Posted a message!\")\n\n.. testoutput::\n   :hide:\n\nThe given path is relative to ``self._FACEBOOK_BASE_URL``,\nby default \"https://graph.facebook.com\".\n\nThis method is a wrapper around `OAuth2Mixin.oauth2_request`;\nthe only difference is that this method takes a relative path,\nwhile ``oauth2_request`` takes a complete url.\n\n.. versionchanged:: 3.1\n   Added the ability to override ``self._FACEBOOK_BASE_URL``.",
                    "start_line": 1014,
                    "variables": {
                        "url": [
                            1064,
                            1065
                        ],
                        "self._FACEBOOK_BASE_URL": [
                            1064
                        ],
                        "self": [
                            1064,
                            1065
                        ],
                        "path": [
                            1064
                        ],
                        "self.oauth2_request": [
                            1065
                        ],
                        "callback": [
                            1065
                        ],
                        "access_token": [
                            1065
                        ],
                        "post_args": [
                            1066
                        ],
                        "args": [
                            1066
                        ],
                        "_auth_return_future": [
                            1014
                        ]
                    },
                    "filtered_variables": {
                        "url": [
                            1064,
                            1065
                        ],
                        "self._FACEBOOK_BASE_URL": [
                            1064
                        ],
                        "self": [
                            1064,
                            1065
                        ],
                        "path": [
                            1064
                        ],
                        "self.oauth2_request": [
                            1065
                        ],
                        "callback": [
                            1065
                        ],
                        "access_token": [
                            1065
                        ],
                        "post_args": [
                            1066
                        ],
                        "args": [
                            1066
                        ],
                        "_auth_return_future": [
                            1014
                        ]
                    },
                    "diff_line_number": 1065,
                    "class_data": {
                        "signature": "class FacebookGraphMixin(OAuth2Mixin)",
                        "docstring": "Facebook authentication using the new Graph API and OAuth2.",
                        "constructor_docstring": null,
                        "functions": [
                            "@_auth_return_future\ndef get_authenticated_user(self, redirect_uri, client_id, client_secret, code, callback, extra_fields=None):\n    \"\"\"Handles the login for the Facebook user, returning a user object.\n\n    Example usage:\n\n    .. testcode::\n\n        class FacebookGraphLoginHandler(tornado.web.RequestHandler,\n                                        tornado.auth.FacebookGraphMixin):\n          @tornado.gen.coroutine\n          def get(self):\n              if self.get_argument(\"code\", False):\n                  user = yield self.get_authenticated_user(\n                      redirect_uri='/auth/facebookgraph/',\n                      client_id=self.settings[\"facebook_api_key\"],\n                      client_secret=self.settings[\"facebook_secret\"],\n                      code=self.get_argument(\"code\"))\n                  # Save the user with e.g. set_secure_cookie\n              else:\n                  yield self.authorize_redirect(\n                      redirect_uri='/auth/facebookgraph/',\n                      client_id=self.settings[\"facebook_api_key\"],\n                      extra_params={\"scope\": \"read_stream,offline_access\"})\n\n    .. testoutput::\n       :hide:\n\n    \"\"\"\n    http = self.get_auth_http_client()\n    args = {'redirect_uri': redirect_uri, 'code': code, 'client_id': client_id, 'client_secret': client_secret}\n    fields = set(['id', 'name', 'first_name', 'last_name', 'locale', 'picture', 'link'])\n    if extra_fields:\n        fields.update(extra_fields)\n    http.fetch(self._oauth_request_token_url(**args), functools.partial(self._on_access_token, redirect_uri, client_id, client_secret, callback, fields))",
                            "def _on_access_token(self, redirect_uri, client_id, client_secret, future, fields, response):\n    if response.error:\n        future.set_exception(AuthError('Facebook auth error: %s' % str(response)))\n        return\n    args = escape.parse_qs_bytes(escape.native_str(response.body))\n    session = {'access_token': args['access_token'][-1], 'expires': args.get('expires')}\n    self.facebook_request(path='/me', callback=functools.partial(self._on_get_user_info, future, session, fields), access_token=session['access_token'], fields=','.join(fields))",
                            "def _on_get_user_info(self, future, session, fields, user):\n    if user is None:\n        future.set_result(None)\n        return\n    fieldmap = {}\n    for field in fields:\n        fieldmap[field] = user.get(field)\n    fieldmap.update({'access_token': session['access_token'], 'session_expires': session.get('expires')})\n    future.set_result(fieldmap)",
                            "@_auth_return_future\ndef facebook_request(self, path, callback, access_token=None, post_args=None, **args):\n    \"\"\"Fetches the given relative API path, e.g., \"/btaylor/picture\"\n\n    If the request is a POST, ``post_args`` should be provided. Query\n    string arguments should be given as keyword arguments.\n\n    An introduction to the Facebook Graph API can be found at\n    http://developers.facebook.com/docs/api\n\n    Many methods require an OAuth access token which you can\n    obtain through `~OAuth2Mixin.authorize_redirect` and\n    `get_authenticated_user`. The user returned through that\n    process includes an ``access_token`` attribute that can be\n    used to make authenticated requests via this method.\n\n    Example usage:\n\n    ..testcode::\n\n        class MainHandler(tornado.web.RequestHandler,\n                          tornado.auth.FacebookGraphMixin):\n            @tornado.web.authenticated\n            @tornado.gen.coroutine\n            def get(self):\n                new_entry = yield self.facebook_request(\n                    \"/me/feed\",\n                    post_args={\"message\": \"I am posting from my Tornado application!\"},\n                    access_token=self.current_user[\"access_token\"])\n\n                if not new_entry:\n                    # Call failed; perhaps missing permission?\n                    yield self.authorize_redirect()\n                    return\n                self.finish(\"Posted a message!\")\n\n    .. testoutput::\n       :hide:\n\n    The given path is relative to ``self._FACEBOOK_BASE_URL``,\n    by default \"https://graph.facebook.com\".\n\n    This method is a wrapper around `OAuth2Mixin.oauth2_request`;\n    the only difference is that this method takes a relative path,\n    while ``oauth2_request`` takes a complete url.\n\n    .. versionchanged:: 3.1\n       Added the ability to override ``self._FACEBOOK_BASE_URL``.\n    \"\"\"\n    url = self._FACEBOOK_BASE_URL + path\n    return self.oauth2_request(url, callback, access_token, post_args, **args)"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [
                            "_OAUTH_ACCESS_TOKEN_URL",
                            "_OAUTH_AUTHORIZE_URL",
                            "_OAUTH_NO_CALLBACKS",
                            "_FACEBOOK_BASE_URL"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "get_authenticated_user(self, redirect_uri, client_id, client_secret, code, callback, extra_fields=None)",
                            "_on_access_token(self, redirect_uri, client_id, client_secret, future, fields, response)",
                            "_on_get_user_info(self, future, session, fields, user)",
                            "facebook_request(self, path, callback, access_token=None, post_args=None, **args)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "snippets": [
                {
                    "snippet_code": "from tornado.concurrent import TracebackFuture, return_future\nfrom tornado import gen",
                    "start_line": 78,
                    "end_line": 79
                }
            ],
            "inscope_functions": [
                "def _auth_future_to_callback(callback, future):\n    try:\n        result = future.result()\n    except AuthError as e:\n        gen_log.warning(str(e))\n        result = None\n    callback(result)",
                "def _auth_return_future(f):\n    \"\"\"Similar to tornado.concurrent.return_future, but uses the auth\n    module's legacy callback interface.\n\n    Note that when using this decorator the ``callback`` parameter\n    inside the function will actually be a future.\n    \"\"\"\n    replacer = ArgReplacer(f, 'callback')\n\n    @functools.wraps(f)\n    def wrapper(*args, **kwargs):\n        future = TracebackFuture()\n        callback, args, kwargs = replacer.replace(future, args, kwargs)\n        if callback is not None:\n            future.add_done_callback(\n                functools.partial(_auth_future_to_callback, callback))\n\n        def handle_exception(typ, value, tb):\n            if future.done():\n                return False\n            else:\n                future.set_exc_info((typ, value, tb))\n                return True\n        with ExceptionStackContext(handle_exception):\n            f(*args, **kwargs)\n        return future\n    return wrapper",
                "def _oauth_signature(consumer_token, method, url, parameters={}, token=None):\n    \"\"\"Calculates the HMAC-SHA1 OAuth signature for the given request.\n\n    See http://oauth.net/core/1.0/#signing_process\n    \"\"\"\n    parts = urlparse.urlparse(url)\n    scheme, netloc, path = parts[:3]\n    normalized_url = scheme.lower() + \"://\" + netloc.lower() + path\n\n    base_elems = []\n    base_elems.append(method.upper())\n    base_elems.append(normalized_url)\n    base_elems.append(\"&\".join(\"%s=%s\" % (k, _oauth_escape(str(v)))\n                               for k, v in sorted(parameters.items())))\n    base_string = \"&\".join(_oauth_escape(e) for e in base_elems)\n\n    key_elems = [escape.utf8(consumer_token[\"secret\"])]\n    key_elems.append(escape.utf8(token[\"secret\"] if token else \"\"))\n    key = b\"&\".join(key_elems)\n\n    hash = hmac.new(key, escape.utf8(base_string), hashlib.sha1)\n    return binascii.b2a_base64(hash.digest())[:-1]",
                "def _oauth10a_signature(consumer_token, method, url, parameters={}, token=None):\n    \"\"\"Calculates the HMAC-SHA1 OAuth 1.0a signature for the given request.\n\n    See http://oauth.net/core/1.0a/#signing_process\n    \"\"\"\n    parts = urlparse.urlparse(url)\n    scheme, netloc, path = parts[:3]\n    normalized_url = scheme.lower() + \"://\" + netloc.lower() + path\n\n    base_elems = []\n    base_elems.append(method.upper())\n    base_elems.append(normalized_url)\n    base_elems.append(\"&\".join(\"%s=%s\" % (k, _oauth_escape(str(v)))\n                               for k, v in sorted(parameters.items())))\n\n    base_string = \"&\".join(_oauth_escape(e) for e in base_elems)\n    key_elems = [escape.utf8(urllib_parse.quote(consumer_token[\"secret\"], safe='~'))]\n    key_elems.append(escape.utf8(urllib_parse.quote(token[\"secret\"], safe='~') if token else \"\"))\n    key = b\"&\".join(key_elems)\n\n    hash = hmac.new(key, escape.utf8(base_string), hashlib.sha1)\n    return binascii.b2a_base64(hash.digest())[:-1]",
                "def _oauth_escape(val):\n    if isinstance(val, unicode_type):\n        val = val.encode(\"utf-8\")\n    return urllib_parse.quote(val, safe=\"~\")",
                "def _oauth_parse_response(body):\n    # I can't find an officially-defined encoding for oauth responses and\n    # have never seen anyone use non-ascii.  Leave the response in a byte\n    # string for python 2, and use utf8 on python 3.\n    body = escape.native_str(body)\n    p = urlparse.parse_qs(body, keep_blank_values=False)\n    token = dict(key=p[\"oauth_token\"][0], secret=p[\"oauth_token_secret\"][0])\n\n    # Add the extra parameters the Provider included to the token\n    special = (\"oauth_token\", \"oauth_token_secret\")\n    token.update((k, p[k][0]) for k in p if k not in special)\n    return token",
                "@functools.wraps(f)\ndef wrapper(*args, **kwargs):\n    future = TracebackFuture()\n    callback, args, kwargs = replacer.replace(future, args, kwargs)\n    if callback is not None:\n        future.add_done_callback(\n            functools.partial(_auth_future_to_callback, callback))\n\n    def handle_exception(typ, value, tb):\n        if future.done():\n            return False\n        else:\n            future.set_exc_info((typ, value, tb))\n            return True\n    with ExceptionStackContext(handle_exception):\n        f(*args, **kwargs)\n    return future",
                "@return_future\ndef authenticate_redirect(self, callback_uri=None,\n                          ax_attrs=[\"name\", \"email\", \"language\", \"username\"],\n                          callback=None):\n    \"\"\"Redirects to the authentication URL for this service.\n\n    After authentication, the service will redirect back to the given\n    callback URI with additional parameters including ``openid.mode``.\n\n    We request the given attributes for the authenticated user by\n    default (name, email, language, and username). If you don't need\n    all those attributes for your app, you can request fewer with\n    the ax_attrs keyword argument.\n\n    .. versionchanged:: 3.1\n       Returns a `.Future` and takes an optional callback.  These are\n       not strictly necessary as this method is synchronous,\n       but they are supplied for consistency with\n       `OAuthMixin.authorize_redirect`.\n    \"\"\"\n    callback_uri = callback_uri or self.request.uri\n    args = self._openid_args(callback_uri, ax_attrs=ax_attrs)\n    self.redirect(self._OPENID_ENDPOINT + \"?\" + urllib_parse.urlencode(args))\n    callback()",
                "@_auth_return_future\ndef get_authenticated_user(self, callback, http_client=None):\n    \"\"\"Fetches the authenticated user data upon redirect.\n\n    This method should be called by the handler that receives the\n    redirect from the `authenticate_redirect()` method (which is\n    often the same as the one that calls it; in that case you would\n    call `get_authenticated_user` if the ``openid.mode`` parameter\n    is present and `authenticate_redirect` if it is not).\n\n    The result of this method will generally be used to set a cookie.\n    \"\"\"\n    # Verify the OpenID response via direct request to the OP\n    args = dict((k, v[-1]) for k, v in self.request.arguments.items())\n    args[\"openid.mode\"] = u(\"check_authentication\")\n    url = self._OPENID_ENDPOINT\n    if http_client is None:\n        http_client = self.get_auth_http_client()\n    http_client.fetch(url, functools.partial(\n        self._on_authentication_verified, callback),\n        method=\"POST\", body=urllib_parse.urlencode(args))",
                "def _openid_args(self, callback_uri, ax_attrs=[], oauth_scope=None):\n    url = urlparse.urljoin(self.request.full_url(), callback_uri)\n    args = {\n        \"openid.ns\": \"http://specs.openid.net/auth/2.0\",\n        \"openid.claimed_id\":\n        \"http://specs.openid.net/auth/2.0/identifier_select\",\n        \"openid.identity\":\n        \"http://specs.openid.net/auth/2.0/identifier_select\",\n        \"openid.return_to\": url,\n        \"openid.realm\": urlparse.urljoin(url, '/'),\n        \"openid.mode\": \"checkid_setup\",\n    }\n    if ax_attrs:\n        args.update({\n            \"openid.ns.ax\": \"http://openid.net/srv/ax/1.0\",\n            \"openid.ax.mode\": \"fetch_request\",\n        })\n        ax_attrs = set(ax_attrs)\n        required = []\n        if \"name\" in ax_attrs:\n            ax_attrs -= set([\"name\", \"firstname\", \"fullname\", \"lastname\"])\n            required += [\"firstname\", \"fullname\", \"lastname\"]\n            args.update({\n                \"openid.ax.type.firstname\":\n                \"http://axschema.org/namePerson/first\",\n                \"openid.ax.type.fullname\":\n                \"http://axschema.org/namePerson\",\n                \"openid.ax.type.lastname\":\n                \"http://axschema.org/namePerson/last\",\n            })\n        known_attrs = {\n            \"email\": \"http://axschema.org/contact/email\",\n            \"language\": \"http://axschema.org/pref/language\",\n            \"username\": \"http://axschema.org/namePerson/friendly\",\n        }\n        for name in ax_attrs:\n            args[\"openid.ax.type.\" + name] = known_attrs[name]\n            required.append(name)\n        args[\"openid.ax.required\"] = \",\".join(required)\n    if oauth_scope:\n        args.update({\n            \"openid.ns.oauth\":\n            \"http://specs.openid.net/extensions/oauth/1.0\",\n            \"openid.oauth.consumer\": self.request.host.split(\":\")[0],\n            \"openid.oauth.scope\": oauth_scope,\n        })\n    return args",
                "def _on_authentication_verified(self, future, response):\n    if response.error or b\"is_valid:true\" not in response.body:\n        future.set_exception(AuthError(\n            \"Invalid OpenID response: %s\" % (response.error or\n                                             response.body)))\n        return\n\n    # Make sure we got back at least an email from attribute exchange\n    ax_ns = None\n    for name in self.request.arguments:\n        if name.startswith(\"openid.ns.\") and \\\n                self.get_argument(name) == u(\"http://openid.net/srv/ax/1.0\"):\n            ax_ns = name[10:]\n            break\n\n    def get_ax_arg(uri):\n        if not ax_ns:\n            return u(\"\")\n        prefix = \"openid.\" + ax_ns + \".type.\"\n        ax_name = None\n        for name in self.request.arguments.keys():\n            if self.get_argument(name) == uri and name.startswith(prefix):\n                part = name[len(prefix):]\n                ax_name = \"openid.\" + ax_ns + \".value.\" + part\n                break\n        if not ax_name:\n            return u(\"\")\n        return self.get_argument(ax_name, u(\"\"))\n\n    email = get_ax_arg(\"http://axschema.org/contact/email\")\n    name = get_ax_arg(\"http://axschema.org/namePerson\")\n    first_name = get_ax_arg(\"http://axschema.org/namePerson/first\")\n    last_name = get_ax_arg(\"http://axschema.org/namePerson/last\")\n    username = get_ax_arg(\"http://axschema.org/namePerson/friendly\")\n    locale = get_ax_arg(\"http://axschema.org/pref/language\").lower()\n    user = dict()\n    name_parts = []\n    if first_name:\n        user[\"first_name\"] = first_name\n        name_parts.append(first_name)\n    if last_name:\n        user[\"last_name\"] = last_name\n        name_parts.append(last_name)\n    if name:\n        user[\"name\"] = name\n    elif name_parts:\n        user[\"name\"] = u(\" \").join(name_parts)\n    elif email:\n        user[\"name\"] = email.split(\"@\")[0]\n    if email:\n        user[\"email\"] = email\n    if locale:\n        user[\"locale\"] = locale\n    if username:\n        user[\"username\"] = username\n    claimed_id = self.get_argument(\"openid.claimed_id\", None)\n    if claimed_id:\n        user[\"claimed_id\"] = claimed_id\n    future.set_result(user)",
                "def get_auth_http_client(self):\n    \"\"\"Returns the `.AsyncHTTPClient` instance to be used for auth requests.\n\n    May be overridden by subclasses to use an HTTP client other than\n    the default.\n    \"\"\"\n    return httpclient.AsyncHTTPClient()",
                "@return_future\ndef authorize_redirect(self, callback_uri=None, extra_params=None,\n                       http_client=None, callback=None):\n    \"\"\"Redirects the user to obtain OAuth authorization for this service.\n\n    The ``callback_uri`` may be omitted if you have previously\n    registered a callback URI with the third-party service.  For\n    some services (including Friendfeed), you must use a\n    previously-registered callback URI and cannot specify a\n    callback via this method.\n\n    This method sets a cookie called ``_oauth_request_token`` which is\n    subsequently used (and cleared) in `get_authenticated_user` for\n    security purposes.\n\n    Note that this method is asynchronous, although it calls\n    `.RequestHandler.finish` for you so it may not be necessary\n    to pass a callback or use the `.Future` it returns.  However,\n    if this method is called from a function decorated with\n    `.gen.coroutine`, you must call it with ``yield`` to keep the\n    response from being closed prematurely.\n\n    .. versionchanged:: 3.1\n       Now returns a `.Future` and takes an optional callback, for\n       compatibility with `.gen.coroutine`.\n    \"\"\"\n    if callback_uri and getattr(self, \"_OAUTH_NO_CALLBACKS\", False):\n        raise Exception(\"This service does not support oauth_callback\")\n    if http_client is None:\n        http_client = self.get_auth_http_client()\n    if getattr(self, \"_OAUTH_VERSION\", \"1.0a\") == \"1.0a\":\n        http_client.fetch(\n            self._oauth_request_token_url(callback_uri=callback_uri,\n                                          extra_params=extra_params),\n            functools.partial(\n                self._on_request_token,\n                self._OAUTH_AUTHORIZE_URL,\n                callback_uri,\n                callback))\n    else:\n        http_client.fetch(\n            self._oauth_request_token_url(),\n            functools.partial(\n                self._on_request_token, self._OAUTH_AUTHORIZE_URL,\n                callback_uri,\n                callback))",
                "@_auth_return_future\ndef get_authenticated_user(self, callback, http_client=None):\n    \"\"\"Gets the OAuth authorized user and access token.\n\n    This method should be called from the handler for your\n    OAuth callback URL to complete the registration process. We run the\n    callback with the authenticated user dictionary.  This dictionary\n    will contain an ``access_key`` which can be used to make authorized\n    requests to this service on behalf of the user.  The dictionary will\n    also contain other fields such as ``name``, depending on the service\n    used.\n    \"\"\"\n    future = callback\n    request_key = escape.utf8(self.get_argument(\"oauth_token\"))\n    oauth_verifier = self.get_argument(\"oauth_verifier\", None)\n    request_cookie = self.get_cookie(\"_oauth_request_token\")\n    if not request_cookie:\n        future.set_exception(AuthError(\n            \"Missing OAuth request token cookie\"))\n        return\n    self.clear_cookie(\"_oauth_request_token\")\n    cookie_key, cookie_secret = [base64.b64decode(escape.utf8(i)) for i in request_cookie.split(\"|\")]\n    if cookie_key != request_key:\n        future.set_exception(AuthError(\n            \"Request token does not match cookie\"))\n        return\n    token = dict(key=cookie_key, secret=cookie_secret)\n    if oauth_verifier:\n        token[\"verifier\"] = oauth_verifier\n    if http_client is None:\n        http_client = self.get_auth_http_client()\n    http_client.fetch(self._oauth_access_token_url(token),\n                      functools.partial(self._on_access_token, callback))",
                "def _oauth_request_token_url(self, callback_uri=None, extra_params=None):\n    consumer_token = self._oauth_consumer_token()\n    url = self._OAUTH_REQUEST_TOKEN_URL\n    args = dict(\n        oauth_consumer_key=escape.to_basestring(consumer_token[\"key\"]),\n        oauth_signature_method=\"HMAC-SHA1\",\n        oauth_timestamp=str(int(time.time())),\n        oauth_nonce=escape.to_basestring(binascii.b2a_hex(uuid.uuid4().bytes)),\n        oauth_version=\"1.0\",\n    )\n    if getattr(self, \"_OAUTH_VERSION\", \"1.0a\") == \"1.0a\":\n        if callback_uri == \"oob\":\n            args[\"oauth_callback\"] = \"oob\"\n        elif callback_uri:\n            args[\"oauth_callback\"] = urlparse.urljoin(\n                self.request.full_url(), callback_uri)\n        if extra_params:\n            args.update(extra_params)\n        signature = _oauth10a_signature(consumer_token, \"GET\", url, args)\n    else:\n        signature = _oauth_signature(consumer_token, \"GET\", url, args)\n\n    args[\"oauth_signature\"] = signature\n    return url + \"?\" + urllib_parse.urlencode(args)",
                "def _on_request_token(self, authorize_url, callback_uri, callback,\n                      response):\n    if response.error:\n        raise Exception(\"Could not get request token: %s\" % response.error)\n    request_token = _oauth_parse_response(response.body)\n    data = (base64.b64encode(escape.utf8(request_token[\"key\"])) + b\"|\" +\n            base64.b64encode(escape.utf8(request_token[\"secret\"])))\n    self.set_cookie(\"_oauth_request_token\", data)\n    args = dict(oauth_token=request_token[\"key\"])\n    if callback_uri == \"oob\":\n        self.finish(authorize_url + \"?\" + urllib_parse.urlencode(args))\n        callback()\n        return\n    elif callback_uri:\n        args[\"oauth_callback\"] = urlparse.urljoin(\n            self.request.full_url(), callback_uri)\n    self.redirect(authorize_url + \"?\" + urllib_parse.urlencode(args))\n    callback()",
                "def _oauth_access_token_url(self, request_token):\n    consumer_token = self._oauth_consumer_token()\n    url = self._OAUTH_ACCESS_TOKEN_URL\n    args = dict(\n        oauth_consumer_key=escape.to_basestring(consumer_token[\"key\"]),\n        oauth_token=escape.to_basestring(request_token[\"key\"]),\n        oauth_signature_method=\"HMAC-SHA1\",\n        oauth_timestamp=str(int(time.time())),\n        oauth_nonce=escape.to_basestring(binascii.b2a_hex(uuid.uuid4().bytes)),\n        oauth_version=\"1.0\",\n    )\n    if \"verifier\" in request_token:\n        args[\"oauth_verifier\"] = request_token[\"verifier\"]\n\n    if getattr(self, \"_OAUTH_VERSION\", \"1.0a\") == \"1.0a\":\n        signature = _oauth10a_signature(consumer_token, \"GET\", url, args,\n                                        request_token)\n    else:\n        signature = _oauth_signature(consumer_token, \"GET\", url, args,\n                                     request_token)\n\n    args[\"oauth_signature\"] = signature\n    return url + \"?\" + urllib_parse.urlencode(args)",
                "def _on_access_token(self, future, response):\n    if response.error:\n        future.set_exception(AuthError(\"Could not fetch access token\"))\n        return\n\n    access_token = _oauth_parse_response(response.body)\n    self._oauth_get_user_future(access_token).add_done_callback(\n        functools.partial(self._on_oauth_get_user, access_token, future))",
                "def _oauth_consumer_token(self):\n    \"\"\"Subclasses must override this to return their OAuth consumer keys.\n\n    The return value should be a `dict` with keys ``key`` and ``secret``.\n    \"\"\"\n    raise NotImplementedError()",
                "@return_future\ndef _oauth_get_user_future(self, access_token, callback):\n    \"\"\"Subclasses must override this to get basic information about the\n    user.\n\n    Should return a `.Future` whose result is a dictionary\n    containing information about the user, which may have been\n    retrieved by using ``access_token`` to make a request to the\n    service.\n\n    The access token will be added to the returned dictionary to make\n    the result of `get_authenticated_user`.\n\n    For backwards compatibility, the callback-based ``_oauth_get_user``\n    method is also supported.\n    \"\"\"\n    # By default, call the old-style _oauth_get_user, but new code\n    # should override this method instead.\n    self._oauth_get_user(access_token, callback)",
                "def _oauth_get_user(self, access_token, callback):\n    raise NotImplementedError()",
                "def _on_oauth_get_user(self, access_token, future, user_future):\n    if user_future.exception() is not None:\n        future.set_exception(user_future.exception())\n        return\n    user = user_future.result()\n    if not user:\n        future.set_exception(AuthError(\"Error getting user\"))\n        return\n    user[\"access_token\"] = access_token\n    future.set_result(user)",
                "def _oauth_request_parameters(self, url, access_token, parameters={},\n                              method=\"GET\"):\n    \"\"\"Returns the OAuth parameters as a dict for the given request.\n\n    parameters should include all POST arguments and query string arguments\n    that will be sent with the request.\n    \"\"\"\n    consumer_token = self._oauth_consumer_token()\n    base_args = dict(\n        oauth_consumer_key=escape.to_basestring(consumer_token[\"key\"]),\n        oauth_token=escape.to_basestring(access_token[\"key\"]),\n        oauth_signature_method=\"HMAC-SHA1\",\n        oauth_timestamp=str(int(time.time())),\n        oauth_nonce=escape.to_basestring(binascii.b2a_hex(uuid.uuid4().bytes)),\n        oauth_version=\"1.0\",\n    )\n    args = {}\n    args.update(base_args)\n    args.update(parameters)\n    if getattr(self, \"_OAUTH_VERSION\", \"1.0a\") == \"1.0a\":\n        signature = _oauth10a_signature(consumer_token, method, url, args,\n                                        access_token)\n    else:\n        signature = _oauth_signature(consumer_token, method, url, args,\n                                     access_token)\n    base_args[\"oauth_signature\"] = escape.to_basestring(signature)\n    return base_args",
                "def get_auth_http_client(self):\n    \"\"\"Returns the `.AsyncHTTPClient` instance to be used for auth requests.\n\n    May be overridden by subclasses to use an HTTP client other than\n    the default.\n    \"\"\"\n    return httpclient.AsyncHTTPClient()",
                "@return_future\ndef authorize_redirect(self, redirect_uri=None, client_id=None,\n                       client_secret=None, extra_params=None,\n                       callback=None, scope=None, response_type=\"code\"):\n    \"\"\"Redirects the user to obtain OAuth authorization for this service.\n\n    Some providers require that you register a redirect URL with\n    your application instead of passing one via this method. You\n    should call this method to log the user in, and then call\n    ``get_authenticated_user`` in the handler for your\n    redirect URL to complete the authorization process.\n\n    .. versionchanged:: 3.1\n       Returns a `.Future` and takes an optional callback.  These are\n       not strictly necessary as this method is synchronous,\n       but they are supplied for consistency with\n       `OAuthMixin.authorize_redirect`.\n    \"\"\"\n    args = {\n        \"redirect_uri\": redirect_uri,\n        \"client_id\": client_id,\n        \"response_type\": response_type\n    }\n    if extra_params:\n        args.update(extra_params)\n    if scope:\n        args['scope'] = ' '.join(scope)\n    self.redirect(\n        url_concat(self._OAUTH_AUTHORIZE_URL, args))\n    callback()",
                "def _oauth_request_token_url(self, redirect_uri=None, client_id=None,\n                             client_secret=None, code=None,\n                             extra_params=None):\n    url = self._OAUTH_ACCESS_TOKEN_URL\n    args = dict(\n        redirect_uri=redirect_uri,\n        code=code,\n        client_id=client_id,\n        client_secret=client_secret,\n    )\n    if extra_params:\n        args.update(extra_params)\n    return url_concat(url, args)",
                "@_auth_return_future\ndef oauth2_request(self, url, callback, access_token=None,\n                   post_args=None, **args):\n    \"\"\"Fetches the given URL auth an OAuth2 access token.\n\n    If the request is a POST, ``post_args`` should be provided. Query\n    string arguments should be given as keyword arguments.\n\n    Example usage:\n\n    ..testcode::\n\n        class MainHandler(tornado.web.RequestHandler,\n                          tornado.auth.FacebookGraphMixin):\n            @tornado.web.authenticated\n            @tornado.gen.coroutine\n            def get(self):\n                new_entry = yield self.oauth2_request(\n                    \"https://graph.facebook.com/me/feed\",\n                    post_args={\"message\": \"I am posting from my Tornado application!\"},\n                    access_token=self.current_user[\"access_token\"])\n\n                if not new_entry:\n                    # Call failed; perhaps missing permission?\n                    yield self.authorize_redirect()\n                    return\n                self.finish(\"Posted a message!\")\n\n    .. testoutput::\n       :hide:\n\n    .. versionadded:: 4.3\n    \"\"\"\n    all_args = {}\n    if access_token:\n        all_args[\"access_token\"] = access_token\n        all_args.update(args)\n\n    if all_args:\n        url += \"?\" + urllib_parse.urlencode(all_args)\n    callback = functools.partial(self._on_oauth2_request, callback)\n    http = self.get_auth_http_client()\n    if post_args is not None:\n        http.fetch(url, method=\"POST\", body=urllib_parse.urlencode(post_args),\n                   callback=callback)\n    else:\n        http.fetch(url, callback=callback)",
                "def _on_oauth2_request(self, future, response):\n    if response.error:\n        future.set_exception(AuthError(\"Error response %s fetching %s\" %\n                                       (response.error, response.request.url)))\n        return\n\n    future.set_result(escape.json_decode(response.body))",
                "def get_auth_http_client(self):\n    \"\"\"Returns the `.AsyncHTTPClient` instance to be used for auth requests.\n\n    May be overridden by subclasses to use an HTTP client other than\n    the default.\n\n    .. versionadded:: 4.3\n    \"\"\"\n    return httpclient.AsyncHTTPClient()",
                "@return_future\ndef authenticate_redirect(self, callback_uri=None, callback=None):\n    \"\"\"Just like `~OAuthMixin.authorize_redirect`, but\n    auto-redirects if authorized.\n\n    This is generally the right interface to use if you are using\n    Twitter for single-sign on.\n\n    .. versionchanged:: 3.1\n       Now returns a `.Future` and takes an optional callback, for\n       compatibility with `.gen.coroutine`.\n    \"\"\"\n    http = self.get_auth_http_client()\n    http.fetch(self._oauth_request_token_url(callback_uri=callback_uri),\n               functools.partial(\n                   self._on_request_token, self._OAUTH_AUTHENTICATE_URL,\n                   None, callback))",
                "@_auth_return_future\ndef twitter_request(self, path, callback=None, access_token=None,\n                    post_args=None, **args):\n    \"\"\"Fetches the given API path, e.g., ``statuses/user_timeline/btaylor``\n\n    The path should not include the format or API version number.\n    (we automatically use JSON format and API version 1).\n\n    If the request is a POST, ``post_args`` should be provided. Query\n    string arguments should be given as keyword arguments.\n\n    All the Twitter methods are documented at http://dev.twitter.com/\n\n    Many methods require an OAuth access token which you can\n    obtain through `~OAuthMixin.authorize_redirect` and\n    `~OAuthMixin.get_authenticated_user`. The user returned through that\n    process includes an 'access_token' attribute that can be used\n    to make authenticated requests via this method. Example\n    usage:\n\n    .. testcode::\n\n        class MainHandler(tornado.web.RequestHandler,\n                          tornado.auth.TwitterMixin):\n            @tornado.web.authenticated\n            @tornado.gen.coroutine\n            def get(self):\n                new_entry = yield self.twitter_request(\n                    \"/statuses/update\",\n                    post_args={\"status\": \"Testing Tornado Web Server\"},\n                    access_token=self.current_user[\"access_token\"])\n                if not new_entry:\n                    # Call failed; perhaps missing permission?\n                    yield self.authorize_redirect()\n                    return\n                self.finish(\"Posted a message!\")\n\n    .. testoutput::\n       :hide:\n\n    \"\"\"\n    if path.startswith('http:') or path.startswith('https:'):\n        # Raw urls are useful for e.g. search which doesn't follow the\n        # usual pattern: http://search.twitter.com/search.json\n        url = path\n    else:\n        url = self._TWITTER_BASE_URL + path + \".json\"\n    # Add the OAuth resource request signature if we have credentials\n    if access_token:\n        all_args = {}\n        all_args.update(args)\n        all_args.update(post_args or {})\n        method = \"POST\" if post_args is not None else \"GET\"\n        oauth = self._oauth_request_parameters(\n            url, access_token, all_args, method=method)\n        args.update(oauth)\n    if args:\n        url += \"?\" + urllib_parse.urlencode(args)\n    http = self.get_auth_http_client()\n    http_callback = functools.partial(self._on_twitter_request, callback)\n    if post_args is not None:\n        http.fetch(url, method=\"POST\", body=urllib_parse.urlencode(post_args),\n                   callback=http_callback)\n    else:\n        http.fetch(url, callback=http_callback)",
                "def _on_twitter_request(self, future, response):\n    if response.error:\n        future.set_exception(AuthError(\n            \"Error response %s fetching %s\" % (response.error,\n                                               response.request.url)))\n        return\n    future.set_result(escape.json_decode(response.body))",
                "def _oauth_consumer_token(self):\n    self.require_setting(\"twitter_consumer_key\", \"Twitter OAuth\")\n    self.require_setting(\"twitter_consumer_secret\", \"Twitter OAuth\")\n    return dict(\n        key=self.settings[\"twitter_consumer_key\"],\n        secret=self.settings[\"twitter_consumer_secret\"])",
                "@gen.coroutine\ndef _oauth_get_user_future(self, access_token):\n    user = yield self.twitter_request(\n        \"/account/verify_credentials\",\n        access_token=access_token)\n    if user:\n        user[\"username\"] = user[\"screen_name\"]\n    raise gen.Return(user)",
                "@_auth_return_future\ndef get_authenticated_user(self, redirect_uri, code, callback):\n    \"\"\"Handles the login for the Google user, returning an access token.\n\n    The result is a dictionary containing an ``access_token`` field\n    ([among others](https://developers.google.com/identity/protocols/OAuth2WebServer#handlingtheresponse)).\n    Unlike other ``get_authenticated_user`` methods in this package,\n    this method does not return any additional information about the user.\n    The returned access token can be used with `OAuth2Mixin.oauth2_request`\n    to request additional information (perhaps from\n    ``https://www.googleapis.com/oauth2/v2/userinfo``)\n\n    Example usage:\n\n    .. testcode::\n\n        class GoogleOAuth2LoginHandler(tornado.web.RequestHandler,\n                                       tornado.auth.GoogleOAuth2Mixin):\n            @tornado.gen.coroutine\n            def get(self):\n                if self.get_argument('code', False):\n                    access = yield self.get_authenticated_user(\n                        redirect_uri='http://your.site.com/auth/google',\n                        code=self.get_argument('code'))\n                    user = yield self.oauth2_request(\n                        \"https://www.googleapis.com/oauth2/v1/userinfo\",\n                        access_token=access[\"access_token\"])\n                    # Save the user and access token with\n                    # e.g. set_secure_cookie.\n                else:\n                    yield self.authorize_redirect(\n                        redirect_uri='http://your.site.com/auth/google',\n                        client_id=self.settings['google_oauth']['key'],\n                        scope=['profile', 'email'],\n                        response_type='code',\n                        extra_params={'approval_prompt': 'auto'})\n\n    .. testoutput::\n       :hide:\n\n    \"\"\"\n    http = self.get_auth_http_client()\n    body = urllib_parse.urlencode({\n        \"redirect_uri\": redirect_uri,\n        \"code\": code,\n        \"client_id\": self.settings[self._OAUTH_SETTINGS_KEY]['key'],\n        \"client_secret\": self.settings[self._OAUTH_SETTINGS_KEY]['secret'],\n        \"grant_type\": \"authorization_code\",\n    })\n\n    http.fetch(self._OAUTH_ACCESS_TOKEN_URL,\n               functools.partial(self._on_access_token, callback),\n               method=\"POST\", headers={'Content-Type': 'application/x-www-form-urlencoded'}, body=body)",
                "def _on_access_token(self, future, response):\n    \"\"\"Callback function for the exchange to the access token.\"\"\"\n    if response.error:\n        future.set_exception(AuthError('Google auth error: %s' % str(response)))\n        return\n\n    args = escape.json_decode(response.body)\n    future.set_result(args)",
                "@_auth_return_future\ndef get_authenticated_user(self, redirect_uri, client_id, client_secret,\n                           code, callback, extra_fields=None):\n    \"\"\"Handles the login for the Facebook user, returning a user object.\n\n    Example usage:\n\n    .. testcode::\n\n        class FacebookGraphLoginHandler(tornado.web.RequestHandler,\n                                        tornado.auth.FacebookGraphMixin):\n          @tornado.gen.coroutine\n          def get(self):\n              if self.get_argument(\"code\", False):\n                  user = yield self.get_authenticated_user(\n                      redirect_uri='/auth/facebookgraph/',\n                      client_id=self.settings[\"facebook_api_key\"],\n                      client_secret=self.settings[\"facebook_secret\"],\n                      code=self.get_argument(\"code\"))\n                  # Save the user with e.g. set_secure_cookie\n              else:\n                  yield self.authorize_redirect(\n                      redirect_uri='/auth/facebookgraph/',\n                      client_id=self.settings[\"facebook_api_key\"],\n                      extra_params={\"scope\": \"read_stream,offline_access\"})\n\n    .. testoutput::\n       :hide:\n\n    \"\"\"\n    http = self.get_auth_http_client()\n    args = {\n        \"redirect_uri\": redirect_uri,\n        \"code\": code,\n        \"client_id\": client_id,\n        \"client_secret\": client_secret,\n    }\n\n    fields = set(['id', 'name', 'first_name', 'last_name',\n                  'locale', 'picture', 'link'])\n    if extra_fields:\n        fields.update(extra_fields)\n\n    http.fetch(self._oauth_request_token_url(**args),\n               functools.partial(self._on_access_token, redirect_uri, client_id,\n                                 client_secret, callback, fields))",
                "def _on_access_token(self, redirect_uri, client_id, client_secret,\n                     future, fields, response):\n    if response.error:\n        future.set_exception(AuthError('Facebook auth error: %s' % str(response)))\n        return\n\n    args = escape.parse_qs_bytes(escape.native_str(response.body))\n    session = {\n        \"access_token\": args[\"access_token\"][-1],\n        \"expires\": args.get(\"expires\")\n    }\n\n    self.facebook_request(\n        path=\"/me\",\n        callback=functools.partial(\n            self._on_get_user_info, future, session, fields),\n        access_token=session[\"access_token\"],\n        fields=\",\".join(fields)\n    )",
                "def _on_get_user_info(self, future, session, fields, user):\n    if user is None:\n        future.set_result(None)\n        return\n\n    fieldmap = {}\n    for field in fields:\n        fieldmap[field] = user.get(field)\n\n    fieldmap.update({\"access_token\": session[\"access_token\"], \"session_expires\": session.get(\"expires\")})\n    future.set_result(fieldmap)",
                "@_auth_return_future\ndef facebook_request(self, path, callback, access_token=None,\n                     post_args=None, **args):\n    \"\"\"Fetches the given relative API path, e.g., \"/btaylor/picture\"\n\n    If the request is a POST, ``post_args`` should be provided. Query\n    string arguments should be given as keyword arguments.\n\n    An introduction to the Facebook Graph API can be found at\n    http://developers.facebook.com/docs/api\n\n    Many methods require an OAuth access token which you can\n    obtain through `~OAuth2Mixin.authorize_redirect` and\n    `get_authenticated_user`. The user returned through that\n    process includes an ``access_token`` attribute that can be\n    used to make authenticated requests via this method.\n\n    Example usage:\n\n    ..testcode::\n\n        class MainHandler(tornado.web.RequestHandler,\n                          tornado.auth.FacebookGraphMixin):\n            @tornado.web.authenticated\n            @tornado.gen.coroutine\n            def get(self):\n                new_entry = yield self.facebook_request(\n                    \"/me/feed\",\n                    post_args={\"message\": \"I am posting from my Tornado application!\"},\n                    access_token=self.current_user[\"access_token\"])\n\n                if not new_entry:\n                    # Call failed; perhaps missing permission?\n                    yield self.authorize_redirect()\n                    return\n                self.finish(\"Posted a message!\")\n\n    .. testoutput::\n       :hide:\n\n    The given path is relative to ``self._FACEBOOK_BASE_URL``,\n    by default \"https://graph.facebook.com\".\n\n    This method is a wrapper around `OAuth2Mixin.oauth2_request`;\n    the only difference is that this method takes a relative path,\n    while ``oauth2_request`` takes a complete url.\n\n    .. versionchanged:: 3.1\n       Added the ability to override ``self._FACEBOOK_BASE_URL``.\n    \"\"\"\n    url = self._FACEBOOK_BASE_URL + path\n    return self.oauth2_request(url, callback, access_token,\n                               post_args, **args)",
                "def handle_exception(typ, value, tb):\n    if future.done():\n        return False\n    else:\n        future.set_exc_info((typ, value, tb))\n        return True",
                "def get_ax_arg(uri):\n    if not ax_ns:\n        return u(\"\")\n    prefix = \"openid.\" + ax_ns + \".type.\"\n    ax_name = None\n    for name in self.request.arguments.keys():\n        if self.get_argument(name) == uri and name.startswith(prefix):\n            part = name[len(prefix):]\n            ax_name = \"openid.\" + ax_ns + \".value.\" + part\n            break\n    if not ax_name:\n        return u(\"\")\n    return self.get_argument(ax_name, u(\"\"))"
            ],
            "inscope_function_signatures": [
                "_auth_future_to_callback(callback, future)",
                "_auth_return_future(f)",
                "_oauth_signature(consumer_token, method, url, parameters={}, token=None)",
                "_oauth10a_signature(consumer_token, method, url, parameters={}, token=None)",
                "_oauth_escape(val)",
                "_oauth_parse_response(body)",
                "wrapper(*args, **kwargs)",
                "authenticate_redirect(self, callback_uri=None, ax_attrs=['name', 'email', 'language', 'username'], callback=None)",
                "get_authenticated_user(self, callback, http_client=None)",
                "_openid_args(self, callback_uri, ax_attrs=[], oauth_scope=None)",
                "_on_authentication_verified(self, future, response)",
                "get_auth_http_client(self)",
                "authorize_redirect(self, callback_uri=None, extra_params=None, http_client=None, callback=None)",
                "get_authenticated_user(self, callback, http_client=None)",
                "_oauth_request_token_url(self, callback_uri=None, extra_params=None)",
                "_on_request_token(self, authorize_url, callback_uri, callback, response)",
                "_oauth_access_token_url(self, request_token)",
                "_on_access_token(self, future, response)",
                "_oauth_consumer_token(self)",
                "_oauth_get_user_future(self, access_token, callback)",
                "_oauth_get_user(self, access_token, callback)",
                "_on_oauth_get_user(self, access_token, future, user_future)",
                "_oauth_request_parameters(self, url, access_token, parameters={}, method='GET')",
                "get_auth_http_client(self)",
                "authorize_redirect(self, redirect_uri=None, client_id=None, client_secret=None, extra_params=None, callback=None, scope=None, response_type='code')",
                "_oauth_request_token_url(self, redirect_uri=None, client_id=None, client_secret=None, code=None, extra_params=None)",
                "oauth2_request(self, url, callback, access_token=None, post_args=None, **args)",
                "_on_oauth2_request(self, future, response)",
                "get_auth_http_client(self)",
                "authenticate_redirect(self, callback_uri=None, callback=None)",
                "twitter_request(self, path, callback=None, access_token=None, post_args=None, **args)",
                "_on_twitter_request(self, future, response)",
                "_oauth_consumer_token(self)",
                "_oauth_get_user_future(self, access_token)",
                "get_authenticated_user(self, redirect_uri, code, callback)",
                "_on_access_token(self, future, response)",
                "get_authenticated_user(self, redirect_uri, client_id, client_secret, code, callback, extra_fields=None)",
                "_on_access_token(self, redirect_uri, client_id, client_secret, future, fields, response)",
                "_on_get_user_info(self, future, session, fields, user)",
                "facebook_request(self, path, callback, access_token=None, post_args=None, **args)",
                "handle_exception(typ, value, tb)",
                "get_ax_arg(uri)"
            ],
            "variables_in_file": {
                "ImportError": [
                    89,
                    94
                ],
                "long": [
                    98,
                    100
                ],
                "NameError": [
                    99
                ],
                "int": [
                    464,
                    419,
                    100,
                    543
                ],
                "Exception": [
                    441,
                    359,
                    103
                ],
                "result": [
                    112,
                    113,
                    109
                ],
                "future.result": [
                    109
                ],
                "future": [
                    128,
                    130,
                    134,
                    391,
                    137,
                    522,
                    396,
                    141,
                    526,
                    529,
                    402,
                    921,
                    925,
                    674,
                    678,
                    305,
                    817,
                    821,
                    985,
                    483,
                    997,
                    488,
                    1004,
                    109,
                    1012,
                    249,
                    127
                ],
                "AuthError": [
                    674,
                    483,
                    396,
                    110,
                    526,
                    817,
                    402,
                    249,
                    921,
                    985
                ],
                "gen_log.warning": [
                    111
                ],
                "gen_log": [
                    111
                ],
                "str": [
                    419,
                    111,
                    464,
                    1105,
                    921,
                    985,
                    1081,
                    543
                ],
                "e": [
                    1083,
                    1108,
                    111
                ],
                "callback": [
                    128,
                    129,
                    131,
                    515,
                    391,
                    915,
                    664,
                    411,
                    668,
                    670,
                    808,
                    1065,
                    175,
                    449,
                    196,
                    455,
                    980,
                    608,
                    747,
                    113,
                    370,
                    377
                ],
                "replacer": [
                    128,
                    123
                ],
                "ArgReplacer": [
                    123
                ],
                "f": [
                    123,
                    140,
                    125
                ],
                "TracebackFuture": [
                    127
                ],
                "args": [
                    128,
                    140,
                    660,
                    924,
                    925,
                    799,
                    416,
                    547,
                    548,
                    549,
                    804,
                    551,
                    805,
                    425,
                    554,
                    427,
                    806,
                    173,
                    174,
                    430,
                    431,
                    433,
                    1066,
                    435,
                    436,
                    190,
                    191,
                    446,
                    448,
                    452,
                    197,
                    454,
                    966,
                    201,
                    460,
                    978,
                    212,
                    469,
                    597,
                    472,
                    475,
                    603,
                    221,
                    478,
                    479,
                    605,
                    607,
                    988,
                    990,
                    991,
                    614,
                    235,
                    237,
                    621,
                    239,
                    622,
                    245
                ],
                "kwargs": [
                    128,
                    140
                ],
                "replacer.replace": [
                    128
                ],
                "future.add_done_callback": [
                    130
                ],
                "functools.partial": [
                    131,
                    195,
                    996,
                    488,
                    745,
                    808,
                    366,
                    915,
                    979,
                    374,
                    664,
                    411
                ],
                "functools": [
                    131,
                    195,
                    996,
                    488,
                    745,
                    808,
                    366,
                    915,
                    979,
                    374,
                    664,
                    411,
                    125
                ],
                "_auth_future_to_callback": [
                    131
                ],
                "future.done": [
                    134
                ],
                "future.set_exc_info": [
                    137
                ],
                "typ": [
                    137
                ],
                "value": [
                    137
                ],
                "tb": [
                    137
                ],
                "ExceptionStackContext": [
                    139
                ],
                "handle_exception": [
                    139
                ],
                "functools.wraps": [
                    125
                ],
                "wrapper": [
                    142
                ],
                "object": [
                    568,
                    145,
                    316
                ],
                "callback_uri": [
                    451,
                    453,
                    358,
                    200,
                    424,
                    426,
                    744,
                    364,
                    172,
                    173,
                    428,
                    369,
                    376,
                    447
                ],
                "self.request.uri": [
                    172
                ],
                "self.request": [
                    256,
                    453,
                    200,
                    267,
                    172,
                    428,
                    242,
                    190
                ],
                "self": [
                    256,
                    258,
                    515,
                    392,
                    393,
                    394,
                    267,
                    268,
                    905,
                    909,
                    399,
                    910,
                    274,
                    914,
                    915,
                    664,
                    409,
                    410,
                    411,
                    538,
                    665,
                    414,
                    415,
                    795,
                    997,
                    802,
                    550,
                    423,
                    807,
                    808,
                    1064,
                    1065,
                    172,
                    173,
                    174,
                    302,
                    428,
                    824,
                    825,
                    827,
                    828,
                    445,
                    190,
                    192,
                    448,
                    194,
                    832,
                    196,
                    453,
                    454,
                    965,
                    200,
                    458,
                    459,
                    978,
                    979,
                    471,
                    606,
                    607,
                    994,
                    613,
                    358,
                    487,
                    488,
                    361,
                    362,
                    743,
                    364,
                    744,
                    746,
                    367,
                    368,
                    242,
                    373,
                    375
                ],
                "self._openid_args": [
                    173
                ],
                "ax_attrs": [
                    234,
                    173,
                    211,
                    216,
                    218,
                    219
                ],
                "self.redirect": [
                    606,
                    454,
                    174
                ],
                "self._OPENID_ENDPOINT": [
                    192,
                    174
                ],
                "urllib_parse.urlencode": [
                    448,
                    197,
                    454,
                    806,
                    810,
                    906,
                    174,
                    436,
                    663,
                    667,
                    479
                ],
                "urllib_parse": [
                    448,
                    1120,
                    197,
                    454,
                    806,
                    810,
                    906,
                    174,
                    436,
                    1109,
                    1110,
                    663,
                    667,
                    479
                ],
                "return_future": [
                    579,
                    332,
                    497,
                    152,
                    731
                ],
                "dict": [
                    416,
                    614,
                    1129,
                    460,
                    826,
                    405,
                    282,
                    539,
                    190,
                    446
                ],
                "k": [
                    1133,
                    1105,
                    1106,
                    1081,
                    1082,
                    190
                ],
                "v": [
                    1105,
                    1106,
                    1081,
                    1082,
                    190
                ],
                "self.request.arguments.items": [
                    190
                ],
                "self.request.arguments": [
                    256,
                    267,
                    190
                ],
                "u": [
                    258,
                    293,
                    264,
                    273,
                    274,
                    191
                ],
                "url": [
                    663,
                    793,
                    667,
                    795,
                    670,
                    415,
                    803,
                    806,
                    551,
                    1064,
                    1065,
                    554,
                    810,
                    813,
                    431,
                    433,
                    1074,
                    436,
                    192,
                    195,
                    200,
                    1098,
                    459,
                    207,
                    208,
                    472,
                    475,
                    479,
                    613,
                    622
                ],
                "http_client": [
                    193,
                    194,
                    195,
                    360,
                    361,
                    363,
                    372,
                    408,
                    409,
                    410
                ],
                "self.get_auth_http_client": [
                    194,
                    965,
                    743,
                    807,
                    361,
                    409,
                    905,
                    665
                ],
                "http_client.fetch": [
                    363,
                    410,
                    195,
                    372
                ],
                "self._on_authentication_verified": [
                    196
                ],
                "_auth_return_future": [
                    864,
                    935,
                    749,
                    624,
                    177,
                    1014,
                    379
                ],
                "urlparse.urljoin": [
                    200,
                    427,
                    452,
                    208
                ],
                "urlparse": [
                    452,
                    200,
                    1128,
                    1098,
                    427,
                    208,
                    1074
                ],
                "self.request.full_url": [
                    200,
                    428,
                    453
                ],
                "args.update": [
                    548,
                    549,
                    804,
                    621,
                    430,
                    239,
                    212,
                    603,
                    221
                ],
                "set": [
                    216,
                    219,
                    973
                ],
                "required": [
                    217,
                    220,
                    236,
                    237
                ],
                "known_attrs": [
                    235,
                    229
                ],
                "name": [
                    256,
                    257,
                    258,
                    259,
                    290,
                    291,
                    234,
                    235,
                    236,
                    267,
                    268,
                    269,
                    277
                ],
                "required.append": [
                    236
                ],
                "join": [
                    293,
                    999,
                    237,
                    1105,
                    1108,
                    1111,
                    1081,
                    1083,
                    605,
                    1087
                ],
                "oauth_scope": [
                    243,
                    238
                ],
                "self.request.host.split": [
                    242
                ],
                "self.request.host": [
                    242
                ],
                "response.error": [
                    673,
                    482,
                    675,
                    440,
                    816,
                    818,
                    920,
                    984,
                    248,
                    441,
                    250
                ],
                "response": [
                    920,
                    921,
                    924,
                    673,
                    675,
                    678,
                    816,
                    818,
                    819,
                    821,
                    440,
                    441,
                    442,
                    984,
                    985,
                    988,
                    482,
                    486,
                    248,
                    250,
                    251
                ],
                "response.body": [
                    678,
                    486,
                    988,
                    821,
                    248,
                    442,
                    251,
                    924
                ],
                "future.set_exception": [
                    674,
                    483,
                    522,
                    396,
                    526,
                    817,
                    402,
                    249,
                    921,
                    985
                ],
                "ax_ns": [
                    259,
                    263,
                    265,
                    270,
                    255
                ],
                "name.startswith": [
                    257,
                    268
                ],
                "self.get_argument": [
                    258,
                    392,
                    393,
                    268,
                    302,
                    274
                ],
                "prefix": [
                    265,
                    268,
                    269
                ],
                "ax_name": [
                    272,
                    266,
                    274,
                    270
                ],
                "self.request.arguments.keys": [
                    267
                ],
                "uri": [
                    268
                ],
                "part": [
                    269,
                    270
                ],
                "len": [
                    269
                ],
                "email": [
                    294,
                    295,
                    296,
                    297,
                    276
                ],
                "get_ax_arg": [
                    276,
                    277,
                    278,
                    279,
                    280,
                    281
                ],
                "first_name": [
                    284,
                    285,
                    278,
                    286
                ],
                "last_name": [
                    288,
                    289,
                    287,
                    279
                ],
                "username": [
                    280,
                    300,
                    301
                ],
                "locale": [
                    281,
                    298,
                    299
                ],
                "lower": [
                    281
                ],
                "user": [
                    524,
                    525,
                    528,
                    529,
                    282,
                    285,
                    288,
                    291,
                    293,
                    295,
                    297,
                    299,
                    301,
                    304,
                    305,
                    832,
                    835,
                    836,
                    837,
                    1003,
                    1009
                ],
                "name_parts": [
                    289,
                    292,
                    293,
                    283,
                    286
                ],
                "name_parts.append": [
                    289,
                    286
                ],
                "email.split": [
                    295
                ],
                "claimed_id": [
                    304,
                    302,
                    303
                ],
                "future.set_result": [
                    678,
                    1004,
                    305,
                    529,
                    1012,
                    821,
                    925
                ],
                "httpclient.AsyncHTTPClient": [
                    688,
                    313,
                    565
                ],
                "httpclient": [
                    688,
                    313,
                    565
                ],
                "getattr": [
                    550,
                    358,
                    423,
                    362,
                    471
                ],
                "self._oauth_request_token_url": [
                    744,
                    978,
                    364,
                    373
                ],
                "extra_params": [
                    620,
                    365,
                    430,
                    429,
                    621,
                    602,
                    603
                ],
                "self._on_request_token": [
                    746,
                    375,
                    367
                ],
                "self._OAUTH_AUTHORIZE_URL": [
                    368,
                    607,
                    375
                ],
                "request_key": [
                    392,
                    401
                ],
                "escape.utf8": [
                    1089,
                    392,
                    400,
                    1109,
                    1110,
                    1113,
                    443,
                    444,
                    1085,
                    1086
                ],
                "escape": [
                    392,
                    400,
                    924,
                    541,
                    540,
                    544,
                    417,
                    420,
                    678,
                    556,
                    821,
                    443,
                    444,
                    1085,
                    1086,
                    1089,
                    461,
                    462,
                    465,
                    1109,
                    1110,
                    1113,
                    988,
                    1127
                ],
                "oauth_verifier": [
                    393,
                    406,
                    407
                ],
                "request_cookie": [
                    400,
                    394,
                    395
                ],
                "self.get_cookie": [
                    394
                ],
                "self.clear_cookie": [
                    399
                ],
                "cookie_key": [
                    400,
                    401,
                    405
                ],
                "cookie_secret": [
                    400,
                    405
                ],
                "base64.b64decode": [
                    400
                ],
                "base64": [
                    400,
                    443,
                    444
                ],
                "i": [
                    400
                ],
                "request_cookie.split": [
                    400
                ],
                "token": [
                    1129,
                    1133,
                    1134,
                    405,
                    1110,
                    407,
                    410,
                    1086
                ],
                "self._oauth_access_token_url": [
                    410
                ],
                "self._on_access_token": [
                    411,
                    915,
                    979
                ],
                "consumer_token": [
                    417,
                    551,
                    458,
                    554,
                    461,
                    431,
                    433,
                    1109,
                    472,
                    538,
                    475,
                    540,
                    1085,
                    414
                ],
                "self._oauth_consumer_token": [
                    458,
                    538,
                    414
                ],
                "self._OAUTH_REQUEST_TOKEN_URL": [
                    415
                ],
                "escape.to_basestring": [
                    544,
                    417,
                    420,
                    556,
                    461,
                    462,
                    465,
                    540,
                    541
                ],
                "time.time": [
                    464,
                    419,
                    543
                ],
                "time": [
                    464,
                    419,
                    543
                ],
                "binascii.b2a_hex": [
                    544,
                    465,
                    420
                ],
                "binascii": [
                    544,
                    1090,
                    420,
                    465,
                    1114
                ],
                "bytes": [
                    544,
                    465,
                    420
                ],
                "uuid.uuid4": [
                    544,
                    465,
                    420
                ],
                "uuid": [
                    544,
                    465,
                    420
                ],
                "signature": [
                    551,
                    554,
                    556,
                    431,
                    433,
                    435,
                    472,
                    475,
                    478
                ],
                "_oauth10a_signature": [
                    472,
                    551,
                    431
                ],
                "_oauth_signature": [
                    433,
                    554,
                    475
                ],
                "request_token": [
                    476,
                    462,
                    468,
                    469,
                    473,
                    442,
                    443,
                    444,
                    446
                ],
                "_oauth_parse_response": [
                    442,
                    486
                ],
                "data": [
                    443,
                    445
                ],
                "base64.b64encode": [
                    443,
                    444
                ],
                "self.set_cookie": [
                    445
                ],
                "self.finish": [
                    448
                ],
                "authorize_url": [
                    448,
                    454
                ],
                "self._OAUTH_ACCESS_TOKEN_URL": [
                    914,
                    459,
                    613
                ],
                "access_token": [
                    834,
                    515,
                    803,
                    486,
                    487,
                    488,
                    552,
                    797,
                    555,
                    1065,
                    528,
                    658,
                    659,
                    541
                ],
                "add_done_callback": [
                    487
                ],
                "self._oauth_get_user_future": [
                    487
                ],
                "self._on_oauth_get_user": [
                    488
                ],
                "NotImplementedError": [
                    518,
                    495
                ],
                "self._oauth_get_user": [
                    515
                ],
                "user_future.exception": [
                    521,
                    522
                ],
                "user_future": [
                    521,
                    522,
                    524
                ],
                "user_future.result": [
                    524
                ],
                "base_args": [
                    539,
                    548,
                    557,
                    556
                ],
                "parameters": [
                    1082,
                    1106,
                    549
                ],
                "method": [
                    801,
                    803,
                    551,
                    554,
                    1103,
                    1079
                ],
                "redirect_uri": [
                    967,
                    615,
                    907,
                    979,
                    598
                ],
                "client_id": [
                    617,
                    979,
                    969,
                    599
                ],
                "response_type": [
                    600
                ],
                "scope": [
                    604,
                    605
                ],
                "url_concat": [
                    622,
                    607
                ],
                "code": [
                    616,
                    908,
                    968
                ],
                "client_secret": [
                    970,
                    618,
                    980
                ],
                "all_args": [
                    800,
                    803,
                    657,
                    659,
                    660,
                    662,
                    663,
                    798,
                    799
                ],
                "all_args.update": [
                    800,
                    660,
                    799
                ],
                "self._on_oauth2_request": [
                    664
                ],
                "http": [
                    965,
                    743,
                    744,
                    807,
                    810,
                    905,
                    813,
                    914,
                    978,
                    665,
                    667,
                    670
                ],
                "post_args": [
                    800,
                    801,
                    809,
                    810,
                    1066,
                    666,
                    667
                ],
                "http.fetch": [
                    744,
                    810,
                    813,
                    914,
                    978,
                    667,
                    670
                ],
                "response.request.url": [
                    819,
                    675
                ],
                "response.request": [
                    819,
                    675
                ],
                "escape.json_decode": [
                    924,
                    821,
                    678
                ],
                "OAuthMixin": [
                    691
                ],
                "_OAUTH_REQUEST_TOKEN_URL": [
                    724
                ],
                "_OAUTH_ACCESS_TOKEN_URL": [
                    930,
                    859,
                    725
                ],
                "_OAUTH_AUTHORIZE_URL": [
                    858,
                    931,
                    726
                ],
                "_OAUTH_AUTHENTICATE_URL": [
                    727
                ],
                "_OAUTH_NO_CALLBACKS": [
                    728,
                    932,
                    861
                ],
                "_TWITTER_BASE_URL": [
                    729
                ],
                "self._OAUTH_AUTHENTICATE_URL": [
                    746
                ],
                "path.startswith": [
                    790
                ],
                "path": [
                    1064,
                    1099,
                    1100,
                    1075,
                    1076,
                    790,
                    793,
                    795
                ],
                "self._TWITTER_BASE_URL": [
                    795
                ],
                "oauth": [
                    802,
                    804
                ],
                "self._oauth_request_parameters": [
                    802
                ],
                "http_callback": [
                    808,
                    811,
                    813
                ],
                "self._on_twitter_request": [
                    808
                ],
                "self.require_setting": [
                    824,
                    825
                ],
                "self.settings": [
                    827,
                    828,
                    909,
                    910
                ],
                "self.twitter_request": [
                    832
                ],
                "gen.Return": [
                    837
                ],
                "gen": [
                    837,
                    830
                ],
                "gen.coroutine": [
                    830
                ],
                "OAuth2Mixin": [
                    840,
                    928
                ],
                "_OAUTH_USERINFO_URL": [
                    860
                ],
                "_OAUTH_SETTINGS_KEY": [
                    862
                ],
                "body": [
                    1128,
                    906,
                    916,
                    1127
                ],
                "self._OAUTH_SETTINGS_KEY": [
                    909,
                    910
                ],
                "_FACEBOOK_BASE_URL": [
                    933
                ],
                "fields": [
                    997,
                    999,
                    973,
                    976,
                    1008,
                    980
                ],
                "extra_fields": [
                    976,
                    975
                ],
                "fields.update": [
                    976
                ],
                "escape.parse_qs_bytes": [
                    988
                ],
                "escape.native_str": [
                    988,
                    1127
                ],
                "session": [
                    997,
                    1011,
                    989,
                    998
                ],
                "args.get": [
                    991
                ],
                "self.facebook_request": [
                    994
                ],
                "self._on_get_user_info": [
                    997
                ],
                "fieldmap": [
                    1009,
                    1011,
                    1012,
                    1007
                ],
                "field": [
                    1008,
                    1009
                ],
                "user.get": [
                    1009
                ],
                "fieldmap.update": [
                    1011
                ],
                "session.get": [
                    1011
                ],
                "self._FACEBOOK_BASE_URL": [
                    1064
                ],
                "self.oauth2_request": [
                    1065
                ],
                "parts": [
                    1074,
                    1075,
                    1099,
                    1098
                ],
                "urlparse.urlparse": [
                    1074,
                    1098
                ],
                "scheme": [
                    1099,
                    1075,
                    1076,
                    1100
                ],
                "netloc": [
                    1099,
                    1075,
                    1076,
                    1100
                ],
                "normalized_url": [
                    1080,
                    1104,
                    1076,
                    1100
                ],
                "scheme.lower": [
                    1076,
                    1100
                ],
                "netloc.lower": [
                    1076,
                    1100
                ],
                "base_elems": [
                    1102,
                    1103,
                    1104,
                    1105,
                    1108,
                    1078,
                    1079,
                    1080,
                    1081,
                    1083
                ],
                "base_elems.append": [
                    1103,
                    1104,
                    1105,
                    1079,
                    1080,
                    1081
                ],
                "method.upper": [
                    1103,
                    1079
                ],
                "_oauth_escape": [
                    1105,
                    1081,
                    1083,
                    1108
                ],
                "sorted": [
                    1082,
                    1106
                ],
                "parameters.items": [
                    1082,
                    1106
                ],
                "base_string": [
                    1113,
                    1089,
                    1083,
                    1108
                ],
                "key_elems": [
                    1109,
                    1110,
                    1111,
                    1085,
                    1086,
                    1087
                ],
                "key_elems.append": [
                    1110,
                    1086
                ],
                "key": [
                    1113,
                    1089,
                    1111,
                    1087
                ],
                "hash": [
                    1113,
                    1089,
                    1090,
                    1114
                ],
                "hmac.new": [
                    1113,
                    1089
                ],
                "hmac": [
                    1113,
                    1089
                ],
                "hashlib.sha1": [
                    1113,
                    1089
                ],
                "hashlib": [
                    1113,
                    1089
                ],
                "binascii.b2a_base64": [
                    1090,
                    1114
                ],
                "hash.digest": [
                    1090,
                    1114
                ],
                "urllib_parse.quote": [
                    1120,
                    1109,
                    1110
                ],
                "isinstance": [
                    1118
                ],
                "val": [
                    1120,
                    1118,
                    1119
                ],
                "unicode_type": [
                    1118
                ],
                "val.encode": [
                    1119
                ],
                "p": [
                    1128,
                    1129,
                    1133
                ],
                "urlparse.parse_qs": [
                    1128
                ],
                "special": [
                    1132,
                    1133
                ],
                "token.update": [
                    1133
                ]
            },
            "filtered_variables_in_file": {
                "long": [
                    98,
                    100
                ],
                "result": [
                    112,
                    113,
                    109
                ],
                "future.result": [
                    109
                ],
                "future": [
                    128,
                    130,
                    134,
                    391,
                    137,
                    522,
                    396,
                    141,
                    526,
                    529,
                    402,
                    921,
                    925,
                    674,
                    678,
                    305,
                    817,
                    821,
                    985,
                    483,
                    997,
                    488,
                    1004,
                    109,
                    1012,
                    249,
                    127
                ],
                "AuthError": [
                    674,
                    483,
                    396,
                    110,
                    526,
                    817,
                    402,
                    249,
                    921,
                    985
                ],
                "gen_log.warning": [
                    111
                ],
                "gen_log": [
                    111
                ],
                "e": [
                    1083,
                    1108,
                    111
                ],
                "callback": [
                    128,
                    129,
                    131,
                    515,
                    391,
                    915,
                    664,
                    411,
                    668,
                    670,
                    808,
                    1065,
                    175,
                    449,
                    196,
                    455,
                    980,
                    608,
                    747,
                    113,
                    370,
                    377
                ],
                "replacer": [
                    128,
                    123
                ],
                "ArgReplacer": [
                    123
                ],
                "f": [
                    123,
                    140,
                    125
                ],
                "TracebackFuture": [
                    127
                ],
                "args": [
                    128,
                    140,
                    660,
                    924,
                    925,
                    799,
                    416,
                    547,
                    548,
                    549,
                    804,
                    551,
                    805,
                    425,
                    554,
                    427,
                    806,
                    173,
                    174,
                    430,
                    431,
                    433,
                    1066,
                    435,
                    436,
                    190,
                    191,
                    446,
                    448,
                    452,
                    197,
                    454,
                    966,
                    201,
                    460,
                    978,
                    212,
                    469,
                    597,
                    472,
                    475,
                    603,
                    221,
                    478,
                    479,
                    605,
                    607,
                    988,
                    990,
                    991,
                    614,
                    235,
                    237,
                    621,
                    239,
                    622,
                    245
                ],
                "kwargs": [
                    128,
                    140
                ],
                "replacer.replace": [
                    128
                ],
                "future.add_done_callback": [
                    130
                ],
                "functools.partial": [
                    131,
                    195,
                    996,
                    488,
                    745,
                    808,
                    366,
                    915,
                    979,
                    374,
                    664,
                    411
                ],
                "functools": [
                    131,
                    195,
                    996,
                    488,
                    745,
                    808,
                    366,
                    915,
                    979,
                    374,
                    664,
                    411,
                    125
                ],
                "_auth_future_to_callback": [
                    131
                ],
                "future.done": [
                    134
                ],
                "future.set_exc_info": [
                    137
                ],
                "typ": [
                    137
                ],
                "value": [
                    137
                ],
                "tb": [
                    137
                ],
                "ExceptionStackContext": [
                    139
                ],
                "handle_exception": [
                    139
                ],
                "functools.wraps": [
                    125
                ],
                "wrapper": [
                    142
                ],
                "callback_uri": [
                    451,
                    453,
                    358,
                    200,
                    424,
                    426,
                    744,
                    364,
                    172,
                    173,
                    428,
                    369,
                    376,
                    447
                ],
                "self.request.uri": [
                    172
                ],
                "self.request": [
                    256,
                    453,
                    200,
                    267,
                    172,
                    428,
                    242,
                    190
                ],
                "self": [
                    256,
                    258,
                    515,
                    392,
                    393,
                    394,
                    267,
                    268,
                    905,
                    909,
                    399,
                    910,
                    274,
                    914,
                    915,
                    664,
                    409,
                    410,
                    411,
                    538,
                    665,
                    414,
                    415,
                    795,
                    997,
                    802,
                    550,
                    423,
                    807,
                    808,
                    1064,
                    1065,
                    172,
                    173,
                    174,
                    302,
                    428,
                    824,
                    825,
                    827,
                    828,
                    445,
                    190,
                    192,
                    448,
                    194,
                    832,
                    196,
                    453,
                    454,
                    965,
                    200,
                    458,
                    459,
                    978,
                    979,
                    471,
                    606,
                    607,
                    994,
                    613,
                    358,
                    487,
                    488,
                    361,
                    362,
                    743,
                    364,
                    744,
                    746,
                    367,
                    368,
                    242,
                    373,
                    375
                ],
                "self._openid_args": [
                    173
                ],
                "ax_attrs": [
                    234,
                    173,
                    211,
                    216,
                    218,
                    219
                ],
                "self.redirect": [
                    606,
                    454,
                    174
                ],
                "self._OPENID_ENDPOINT": [
                    192,
                    174
                ],
                "urllib_parse.urlencode": [
                    448,
                    197,
                    454,
                    806,
                    810,
                    906,
                    174,
                    436,
                    663,
                    667,
                    479
                ],
                "urllib_parse": [
                    448,
                    1120,
                    197,
                    454,
                    806,
                    810,
                    906,
                    174,
                    436,
                    1109,
                    1110,
                    663,
                    667,
                    479
                ],
                "return_future": [
                    579,
                    332,
                    497,
                    152,
                    731
                ],
                "k": [
                    1133,
                    1105,
                    1106,
                    1081,
                    1082,
                    190
                ],
                "v": [
                    1105,
                    1106,
                    1081,
                    1082,
                    190
                ],
                "self.request.arguments.items": [
                    190
                ],
                "self.request.arguments": [
                    256,
                    267,
                    190
                ],
                "u": [
                    258,
                    293,
                    264,
                    273,
                    274,
                    191
                ],
                "url": [
                    663,
                    793,
                    667,
                    795,
                    670,
                    415,
                    803,
                    806,
                    551,
                    1064,
                    1065,
                    554,
                    810,
                    813,
                    431,
                    433,
                    1074,
                    436,
                    192,
                    195,
                    200,
                    1098,
                    459,
                    207,
                    208,
                    472,
                    475,
                    479,
                    613,
                    622
                ],
                "http_client": [
                    193,
                    194,
                    195,
                    360,
                    361,
                    363,
                    372,
                    408,
                    409,
                    410
                ],
                "self.get_auth_http_client": [
                    194,
                    965,
                    743,
                    807,
                    361,
                    409,
                    905,
                    665
                ],
                "http_client.fetch": [
                    363,
                    410,
                    195,
                    372
                ],
                "self._on_authentication_verified": [
                    196
                ],
                "_auth_return_future": [
                    864,
                    935,
                    749,
                    624,
                    177,
                    1014,
                    379
                ],
                "urlparse.urljoin": [
                    200,
                    427,
                    452,
                    208
                ],
                "urlparse": [
                    452,
                    200,
                    1128,
                    1098,
                    427,
                    208,
                    1074
                ],
                "self.request.full_url": [
                    200,
                    428,
                    453
                ],
                "args.update": [
                    548,
                    549,
                    804,
                    621,
                    430,
                    239,
                    212,
                    603,
                    221
                ],
                "required": [
                    217,
                    220,
                    236,
                    237
                ],
                "known_attrs": [
                    235,
                    229
                ],
                "name": [
                    256,
                    257,
                    258,
                    259,
                    290,
                    291,
                    234,
                    235,
                    236,
                    267,
                    268,
                    269,
                    277
                ],
                "required.append": [
                    236
                ],
                "join": [
                    293,
                    999,
                    237,
                    1105,
                    1108,
                    1111,
                    1081,
                    1083,
                    605,
                    1087
                ],
                "oauth_scope": [
                    243,
                    238
                ],
                "self.request.host.split": [
                    242
                ],
                "self.request.host": [
                    242
                ],
                "response.error": [
                    673,
                    482,
                    675,
                    440,
                    816,
                    818,
                    920,
                    984,
                    248,
                    441,
                    250
                ],
                "response": [
                    920,
                    921,
                    924,
                    673,
                    675,
                    678,
                    816,
                    818,
                    819,
                    821,
                    440,
                    441,
                    442,
                    984,
                    985,
                    988,
                    482,
                    486,
                    248,
                    250,
                    251
                ],
                "response.body": [
                    678,
                    486,
                    988,
                    821,
                    248,
                    442,
                    251,
                    924
                ],
                "future.set_exception": [
                    674,
                    483,
                    522,
                    396,
                    526,
                    817,
                    402,
                    249,
                    921,
                    985
                ],
                "ax_ns": [
                    259,
                    263,
                    265,
                    270,
                    255
                ],
                "name.startswith": [
                    257,
                    268
                ],
                "self.get_argument": [
                    258,
                    392,
                    393,
                    268,
                    302,
                    274
                ],
                "prefix": [
                    265,
                    268,
                    269
                ],
                "ax_name": [
                    272,
                    266,
                    274,
                    270
                ],
                "self.request.arguments.keys": [
                    267
                ],
                "uri": [
                    268
                ],
                "part": [
                    269,
                    270
                ],
                "email": [
                    294,
                    295,
                    296,
                    297,
                    276
                ],
                "get_ax_arg": [
                    276,
                    277,
                    278,
                    279,
                    280,
                    281
                ],
                "first_name": [
                    284,
                    285,
                    278,
                    286
                ],
                "last_name": [
                    288,
                    289,
                    287,
                    279
                ],
                "username": [
                    280,
                    300,
                    301
                ],
                "locale": [
                    281,
                    298,
                    299
                ],
                "lower": [
                    281
                ],
                "user": [
                    524,
                    525,
                    528,
                    529,
                    282,
                    285,
                    288,
                    291,
                    293,
                    295,
                    297,
                    299,
                    301,
                    304,
                    305,
                    832,
                    835,
                    836,
                    837,
                    1003,
                    1009
                ],
                "name_parts": [
                    289,
                    292,
                    293,
                    283,
                    286
                ],
                "name_parts.append": [
                    289,
                    286
                ],
                "email.split": [
                    295
                ],
                "claimed_id": [
                    304,
                    302,
                    303
                ],
                "future.set_result": [
                    678,
                    1004,
                    305,
                    529,
                    1012,
                    821,
                    925
                ],
                "httpclient.AsyncHTTPClient": [
                    688,
                    313,
                    565
                ],
                "httpclient": [
                    688,
                    313,
                    565
                ],
                "self._oauth_request_token_url": [
                    744,
                    978,
                    364,
                    373
                ],
                "extra_params": [
                    620,
                    365,
                    430,
                    429,
                    621,
                    602,
                    603
                ],
                "self._on_request_token": [
                    746,
                    375,
                    367
                ],
                "self._OAUTH_AUTHORIZE_URL": [
                    368,
                    607,
                    375
                ],
                "request_key": [
                    392,
                    401
                ],
                "escape.utf8": [
                    1089,
                    392,
                    400,
                    1109,
                    1110,
                    1113,
                    443,
                    444,
                    1085,
                    1086
                ],
                "escape": [
                    392,
                    400,
                    924,
                    541,
                    540,
                    544,
                    417,
                    420,
                    678,
                    556,
                    821,
                    443,
                    444,
                    1085,
                    1086,
                    1089,
                    461,
                    462,
                    465,
                    1109,
                    1110,
                    1113,
                    988,
                    1127
                ],
                "oauth_verifier": [
                    393,
                    406,
                    407
                ],
                "request_cookie": [
                    400,
                    394,
                    395
                ],
                "self.get_cookie": [
                    394
                ],
                "self.clear_cookie": [
                    399
                ],
                "cookie_key": [
                    400,
                    401,
                    405
                ],
                "cookie_secret": [
                    400,
                    405
                ],
                "base64.b64decode": [
                    400
                ],
                "base64": [
                    400,
                    443,
                    444
                ],
                "i": [
                    400
                ],
                "request_cookie.split": [
                    400
                ],
                "token": [
                    1129,
                    1133,
                    1134,
                    405,
                    1110,
                    407,
                    410,
                    1086
                ],
                "self._oauth_access_token_url": [
                    410
                ],
                "self._on_access_token": [
                    411,
                    915,
                    979
                ],
                "consumer_token": [
                    417,
                    551,
                    458,
                    554,
                    461,
                    431,
                    433,
                    1109,
                    472,
                    538,
                    475,
                    540,
                    1085,
                    414
                ],
                "self._oauth_consumer_token": [
                    458,
                    538,
                    414
                ],
                "self._OAUTH_REQUEST_TOKEN_URL": [
                    415
                ],
                "escape.to_basestring": [
                    544,
                    417,
                    420,
                    556,
                    461,
                    462,
                    465,
                    540,
                    541
                ],
                "time.time": [
                    464,
                    419,
                    543
                ],
                "time": [
                    464,
                    419,
                    543
                ],
                "binascii.b2a_hex": [
                    544,
                    465,
                    420
                ],
                "binascii": [
                    544,
                    1090,
                    420,
                    465,
                    1114
                ],
                "uuid.uuid4": [
                    544,
                    465,
                    420
                ],
                "uuid": [
                    544,
                    465,
                    420
                ],
                "signature": [
                    551,
                    554,
                    556,
                    431,
                    433,
                    435,
                    472,
                    475,
                    478
                ],
                "_oauth10a_signature": [
                    472,
                    551,
                    431
                ],
                "_oauth_signature": [
                    433,
                    554,
                    475
                ],
                "request_token": [
                    476,
                    462,
                    468,
                    469,
                    473,
                    442,
                    443,
                    444,
                    446
                ],
                "_oauth_parse_response": [
                    442,
                    486
                ],
                "data": [
                    443,
                    445
                ],
                "base64.b64encode": [
                    443,
                    444
                ],
                "self.set_cookie": [
                    445
                ],
                "self.finish": [
                    448
                ],
                "authorize_url": [
                    448,
                    454
                ],
                "self._OAUTH_ACCESS_TOKEN_URL": [
                    914,
                    459,
                    613
                ],
                "access_token": [
                    834,
                    515,
                    803,
                    486,
                    487,
                    488,
                    552,
                    797,
                    555,
                    1065,
                    528,
                    658,
                    659,
                    541
                ],
                "add_done_callback": [
                    487
                ],
                "self._oauth_get_user_future": [
                    487
                ],
                "self._on_oauth_get_user": [
                    488
                ],
                "self._oauth_get_user": [
                    515
                ],
                "user_future.exception": [
                    521,
                    522
                ],
                "user_future": [
                    521,
                    522,
                    524
                ],
                "user_future.result": [
                    524
                ],
                "base_args": [
                    539,
                    548,
                    557,
                    556
                ],
                "parameters": [
                    1082,
                    1106,
                    549
                ],
                "method": [
                    801,
                    803,
                    551,
                    554,
                    1103,
                    1079
                ],
                "redirect_uri": [
                    967,
                    615,
                    907,
                    979,
                    598
                ],
                "client_id": [
                    617,
                    979,
                    969,
                    599
                ],
                "response_type": [
                    600
                ],
                "scope": [
                    604,
                    605
                ],
                "url_concat": [
                    622,
                    607
                ],
                "code": [
                    616,
                    908,
                    968
                ],
                "client_secret": [
                    970,
                    618,
                    980
                ],
                "all_args": [
                    800,
                    803,
                    657,
                    659,
                    660,
                    662,
                    663,
                    798,
                    799
                ],
                "all_args.update": [
                    800,
                    660,
                    799
                ],
                "self._on_oauth2_request": [
                    664
                ],
                "http": [
                    965,
                    743,
                    744,
                    807,
                    810,
                    905,
                    813,
                    914,
                    978,
                    665,
                    667,
                    670
                ],
                "post_args": [
                    800,
                    801,
                    809,
                    810,
                    1066,
                    666,
                    667
                ],
                "http.fetch": [
                    744,
                    810,
                    813,
                    914,
                    978,
                    667,
                    670
                ],
                "response.request.url": [
                    819,
                    675
                ],
                "response.request": [
                    819,
                    675
                ],
                "escape.json_decode": [
                    924,
                    821,
                    678
                ],
                "OAuthMixin": [
                    691
                ],
                "_OAUTH_REQUEST_TOKEN_URL": [
                    724
                ],
                "_OAUTH_ACCESS_TOKEN_URL": [
                    930,
                    859,
                    725
                ],
                "_OAUTH_AUTHORIZE_URL": [
                    858,
                    931,
                    726
                ],
                "_OAUTH_AUTHENTICATE_URL": [
                    727
                ],
                "_OAUTH_NO_CALLBACKS": [
                    728,
                    932,
                    861
                ],
                "_TWITTER_BASE_URL": [
                    729
                ],
                "self._OAUTH_AUTHENTICATE_URL": [
                    746
                ],
                "path.startswith": [
                    790
                ],
                "path": [
                    1064,
                    1099,
                    1100,
                    1075,
                    1076,
                    790,
                    793,
                    795
                ],
                "self._TWITTER_BASE_URL": [
                    795
                ],
                "oauth": [
                    802,
                    804
                ],
                "self._oauth_request_parameters": [
                    802
                ],
                "http_callback": [
                    808,
                    811,
                    813
                ],
                "self._on_twitter_request": [
                    808
                ],
                "self.require_setting": [
                    824,
                    825
                ],
                "self.settings": [
                    827,
                    828,
                    909,
                    910
                ],
                "self.twitter_request": [
                    832
                ],
                "gen.Return": [
                    837
                ],
                "gen": [
                    837,
                    830
                ],
                "gen.coroutine": [
                    830
                ],
                "OAuth2Mixin": [
                    840,
                    928
                ],
                "_OAUTH_USERINFO_URL": [
                    860
                ],
                "_OAUTH_SETTINGS_KEY": [
                    862
                ],
                "body": [
                    1128,
                    906,
                    916,
                    1127
                ],
                "self._OAUTH_SETTINGS_KEY": [
                    909,
                    910
                ],
                "_FACEBOOK_BASE_URL": [
                    933
                ],
                "fields": [
                    997,
                    999,
                    973,
                    976,
                    1008,
                    980
                ],
                "extra_fields": [
                    976,
                    975
                ],
                "fields.update": [
                    976
                ],
                "escape.parse_qs_bytes": [
                    988
                ],
                "escape.native_str": [
                    988,
                    1127
                ],
                "session": [
                    997,
                    1011,
                    989,
                    998
                ],
                "args.get": [
                    991
                ],
                "self.facebook_request": [
                    994
                ],
                "self._on_get_user_info": [
                    997
                ],
                "fieldmap": [
                    1009,
                    1011,
                    1012,
                    1007
                ],
                "field": [
                    1008,
                    1009
                ],
                "user.get": [
                    1009
                ],
                "fieldmap.update": [
                    1011
                ],
                "session.get": [
                    1011
                ],
                "self._FACEBOOK_BASE_URL": [
                    1064
                ],
                "self.oauth2_request": [
                    1065
                ],
                "parts": [
                    1074,
                    1075,
                    1099,
                    1098
                ],
                "urlparse.urlparse": [
                    1074,
                    1098
                ],
                "scheme": [
                    1099,
                    1075,
                    1076,
                    1100
                ],
                "netloc": [
                    1099,
                    1075,
                    1076,
                    1100
                ],
                "normalized_url": [
                    1080,
                    1104,
                    1076,
                    1100
                ],
                "scheme.lower": [
                    1076,
                    1100
                ],
                "netloc.lower": [
                    1076,
                    1100
                ],
                "base_elems": [
                    1102,
                    1103,
                    1104,
                    1105,
                    1108,
                    1078,
                    1079,
                    1080,
                    1081,
                    1083
                ],
                "base_elems.append": [
                    1103,
                    1104,
                    1105,
                    1079,
                    1080,
                    1081
                ],
                "method.upper": [
                    1103,
                    1079
                ],
                "_oauth_escape": [
                    1105,
                    1081,
                    1083,
                    1108
                ],
                "parameters.items": [
                    1082,
                    1106
                ],
                "base_string": [
                    1113,
                    1089,
                    1083,
                    1108
                ],
                "key_elems": [
                    1109,
                    1110,
                    1111,
                    1085,
                    1086,
                    1087
                ],
                "key_elems.append": [
                    1110,
                    1086
                ],
                "key": [
                    1113,
                    1089,
                    1111,
                    1087
                ],
                "hmac.new": [
                    1113,
                    1089
                ],
                "hmac": [
                    1113,
                    1089
                ],
                "hashlib.sha1": [
                    1113,
                    1089
                ],
                "hashlib": [
                    1113,
                    1089
                ],
                "binascii.b2a_base64": [
                    1090,
                    1114
                ],
                "hash.digest": [
                    1090,
                    1114
                ],
                "urllib_parse.quote": [
                    1120,
                    1109,
                    1110
                ],
                "val": [
                    1120,
                    1118,
                    1119
                ],
                "unicode_type": [
                    1118
                ],
                "val.encode": [
                    1119
                ],
                "p": [
                    1128,
                    1129,
                    1133
                ],
                "urlparse.parse_qs": [
                    1128
                ],
                "special": [
                    1132,
                    1133
                ],
                "token.update": [
                    1133
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/tornado/tornado/test/auth_test.py",
                "test_function": "test_facebook_login",
                "test_function_code": "    def test_facebook_login(self):\n        response = self.fetch('/facebook/client/login', follow_redirects=False)\n        self.assertEqual(response.code, 302)\n        self.assertTrue('/facebook/server/authorize?' in response.headers['Location'])\n        response = self.fetch('/facebook/client/login?code=1234', follow_redirects=False)\n        self.assertEqual(response.code, 200)",
                "test_error": "AssertionError: Async operation timed out after 5 seconds",
                "full_test_error": "self = <tornado.test.auth_test.AuthTest testMethod=test_facebook_login>\n\n    def test_facebook_login(self):\n        response = self.fetch('/facebook/client/login', follow_redirects=False)\n        self.assertEqual(response.code, 302)\n        self.assertTrue('/facebook/server/authorize?' in response.headers['Location'])\n>       response = self.fetch('/facebook/client/login?code=1234', follow_redirects=False)\n\ntornado/test/auth_test.py:403: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntornado/testing.py:395: in fetch\n    return self.wait()\ntornado/testing.py:325: in wait\n    self.__rethrow()\ntornado/testing.py:261: in __rethrow\n    raise_exc_info(failure)\n<string>:3: in raise_exc_info\n    ???\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def timeout_func():\n        try:\n            raise self.failureException(\n                'Async operation timed out after %s seconds' %\n>               timeout)\nE               AssertionError: Async operation timed out after 5 seconds\n\ntornado/testing.py:309: AssertionError",
                "traceback": "tornado/testing.py:395: in fetch\n    return self.wait()\ntornado/testing.py:325: in wait\n    self.__rethrow()\ntornado/testing.py:261: in __rethrow\n    raise_exc_info(failure)\n<string>:3: in raise_exc_info\n    ???",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def timeout_func():\n        try:\n            raise self.failureException(\n                'Async operation timed out after %s seconds' %\n>               timeout)\nE               AssertionError: Async operation timed out after 5 seconds\n\ntornado/testing.py:309: AssertionError",
                "test_function_decorators": []
            }
        ]
    }
}