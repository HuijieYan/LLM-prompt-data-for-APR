{
    "pandas": [
        {
            "bugID": 145,
            "bitvector": {
                "1.3.1": 1,
                "1.3.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.1.2": 0,
                "2.2.3": 1,
                "2.2.4": 1,
                "2.2.5": 1,
                "2.2.6": 1,
                "2.1.1": 1,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "start_line": 463,
            "file_name": "pandas/core/ops/__init__.py",
            "replace_code": "def dispatch_to_series(left, right, func, str_rep=None, axis=None):\n\n    import pandas as pd\n    import pandas.core.computation.expressions as expressions\n    import numpy as np\n    from pandas.core.arrays import timedelta\n    from pandas.core.ops import roperator\n    right = np.array(right)\n    \n    if isinstance(right, timedelta.Timedelta) and np.array_equal(right, np.array(pd.NaT)):\n        result = pd.DataFrame({i: pd.NaT for i in range(len(left.columns))})\n        return result\n    \n    if roperator.is_scalar(right) or np.ndim(right) == 0:\n        def column_op(a, b):\n            return {i: func(a.iloc[:, i], b) for i in range(len(a.columns))}\n    elif isinstance(right, pd.DataFrame):\n        assert right._indexed_same(left)\n        def column_op(a, b):\n            return {i: func(a.iloc[:, i], b.iloc[:, i]) for i in range(len(a.columns))}\n    elif isinstance(right, pd.Series) and axis == \"columns\":\n        assert right.index.equals(left.columns)\n        def column_op(a, b):\n            return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}\n    elif isinstance(right, pd.Series):\n        assert right.index.equals(left.index)  # Handle other cases later\n        def column_op(a, b):\n            return {i: func(a.iloc[:, i], b) for i in range(len(a.columns))}\n    else:\n        raise NotImplementedError(right)\n    new_data = expressions.evaluate(column_op, str_rep, left, right)\n    return new_data"
        }
    ]
}