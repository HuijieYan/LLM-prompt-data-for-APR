{
    "pandas": [
        {
            "bugID": 145,
            "bitvector": {
                "1.3.1": 0,
                "1.3.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.1.2": 0,
                "2.2.3": 1,
                "2.2.4": 0,
                "2.2.5": 1,
                "2.2.6": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "start_line": 463,
            "file_name": "pandas/core/ops/__init__.py",
            "replace_code": "def dispatch_to_series(left, right, func, str_rep=None, axis=None):\n    \n    import pandas as pd\n    import numpy as np\n    import pandas.core.computation.expressions as expressions\n    from pandas.core.dtypes.generic import ABCSeries, ABCDataFrame\n    from pandas.core.indexing import check_bool_indexer\n    from pandas.core import common as com\n    from pandas.core import algorithms\n    from pandas.core.arrays.datetimes import DatetimeArray, array as datetime_array, should_compare\n    from pandas.core.indexes.values import (\n    ensure_index,\n    ensure_index_from_sequences,\n    extract_array,\n)\n    from pandas.core.indexing import check_bool_indexer\n    from pandas.core.arrays import ExtensionArray\n    from pandas import errors\n    from pandas.core.indexing import check_bool_indexer\n    from numpy import lib\n    from numpy.lib.mixins import NDArrayOperatorsMixin\n    from pandas.core.dtypes.missing import notna\n    from pandas.core.array_algos import masked_arith_op\n    from numpy.lib.mixins import NDArrayOperatorsMixin\n    right = lib.item_from_zerodim(right)\n    if lib.is_scalar(right) or np.ndim(right) == 0:\n    \n        def column_op(a, b):\n            return {i: func(a.iloc[:, i], b) for i in range(len(a.columns))}\n    \n    elif isinstance(right, ABCDataFrame):\n        assert right._indexed_same(left)\n    \n        def column_op(a, b):\n            return {i: func(a.iloc[:, i], b.iloc[:, i]) for i in range(len(a.columns))}\n    \n    elif isinstance(right, ABCSeries) and axis == \"columns\":\n        # We only get here if called via left._combine_match_columns,\n        # in which case we specifically want to operate row-by-row\n        assert right.index.equals(left.columns)\n    \n        def column_op(a, b):\n            return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}\n    \n    elif isinstance(right, ABCSeries):\n        assert right.index.equals(left.index)  # Handle other cases later\n    \n        def column_op(a, b):\n            return {i: func(a.iloc[:, i], b) for i in range(len(a.columns))}\n    \n    elif isinstance(right, NaTType):  # added to handle NaTType\n        def column_op(a, b):\n            return np.nan  # return NaN for NaTType\n    \n    else:\n        # Remaining cases have less-obvious dispatch rules\n        raise NotImplementedError(right)\n    \n    new_data = expressions.evaluate(column_op, str_rep, left, right)\n    return new_data"
        }
    ]
}