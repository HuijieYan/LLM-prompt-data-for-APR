{
    "1.3.1": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/fastapi/fastapi/dependencies/utils.py",
    "1.1.1": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    if required_params:\n        field = required_params[0]\n        field_info = get_field_info(field)\n        embed = getattr(field_info, \"embed\", None)\n        if len(required_params) == 1 and not embed:\n            received_body = {field.alias: received_body}\n        for field in required_params:\n            value: Any = None\n            if received_body is not None:\n                if field.shape in sequence_shapes and isinstance(\n                    received_body, FormData\n                ):\n                    value = received_body.getlist(field.alias)\n                else:\n                    value = received_body.get(field.alias)\n            if (\n                value is None\n                or (isinstance(field_info, params.Form) and value == \"\")\n                or (\n                    isinstance(field_info, params.Form)\n                    and field.shape in sequence_shapes\n                    and len(value) == 0\n                )\n            ):\n                if field.required:\n                    if PYDANTIC_1:\n                        errors.append(\n                            ErrorWrapper(MissingError(), loc=(\"body\", field.alias))\n                        )\n                    else:  # pragma: nocover\n                        errors.append(\n                            ErrorWrapper(  # type: ignore\n                                MissingError(),\n                                loc=(\"body\", field.alias),\n                                config=BaseConfig,\n                            )\n                        )\n                else:\n                    values[field.name] = deepcopy(field.default)\n                continue\n            if (\n                isinstance(field_info, params.File)\n                and lenient_issubclass(field.type_, bytes)\n                and isinstance(value, UploadFile)\n            ):\n                value = await value.read()\n            elif (\n                field.shape in sequence_shapes\n                and isinstance(field_info, params.File)\n                and lenient_issubclass(field.type_, bytes)\n                and isinstance(value, sequence_types)\n            ):\n                awaitables = [sub_value.read() for sub_value in value]\n                contents = await asyncio.gather(*awaitables)\n                value = sequence_shape_to_type[field.shape](contents)\n            v_, errors_ = field.validate(value, values, loc=(\"body\", field.alias))\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            else:\n                values[field.name] = v_\n    return values, errors\n",
    "2.2.3": [
        [
            {},
            {}
        ]
    ],
    "2.2.4": [
        [
            {},
            {}
        ]
    ],
    "2.2.5": [
        [
            {},
            {}
        ]
    ],
    "2.2.6": [
        [
            {},
            {}
        ]
    ],
    "2.1.1": [
        "def test_python_list_param_as_form():\n    response = client.post(\n        \"/form/python-list\", data={\"items\": [\"first\", \"second\", \"third\"]}\n    )\n    assert response.status_code == 200\n    assert response.json() == [\"first\", \"second\", \"third\"]"
    ],
    "2.1.2": [
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/fastapi/tests/test_forms_from_non_typing_sequences.py"
    ],
    "2.2.1": [
        [
            "E       assert 422 == 200\nE         +422\nE         -200"
        ]
    ],
    "2.2.2": [
        [
            "def test_python_list_param_as_form():\n        response = client.post(\n            \"/form/python-list\", data={\"items\": [\"first\", \"second\", \"third\"]}\n        )\n>       assert response.status_code == 200",
            "\ntests/test_forms_from_non_typing_sequences.py:29: AssertionError"
        ]
    ],
    "3.1.1": [
        "Support repeated key=value in form data\n"
    ],
    "3.1.2": [
        "Is your feature request related to a problem\nYes.\n\nGiven some URL encoded data like this...\n\nchoices=parrot&choices=spider\n...only the last key=value wins.\n\nThis does not work like I expected:\n\nchoices: list = Form(...)\nYou can only validate against the last value.\n\nThe solution you would like\nPerhaps FastAPI should collect repeated keys in the 2-tuple list that request.form() gives and assign those values as a list to the same key before validation happens.\n"
    ]
}