{
    "thefuck:3": {
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/thefuck/thefuck/shells/fish.py": {
            "buggy_functions": [
                {
                    "function_name": "info",
                    "function_code": "def info(self):\n    \"\"\"Returns the name and version of the current shell\"\"\"\n    proc = Popen(['fish', '-c', 'echo $FISH_VERSION'],\n                 stdout=PIPE, stderr=DEVNULL)\n    version = proc.stdout.read().decode('utf-8').strip()\n    return u'Fish Shell {}'.format(version)\n",
                    "decorators": [],
                    "docstring": "Returns the name and version of the current shell",
                    "start_line": 106,
                    "variables": {
                        "proc": [
                            108,
                            110
                        ],
                        "Popen": [
                            108
                        ],
                        "PIPE": [
                            109
                        ],
                        "DEVNULL": [
                            109
                        ],
                        "version": [
                            110,
                            111
                        ],
                        "strip": [
                            110
                        ],
                        "decode": [
                            110
                        ],
                        "proc.stdout.read": [
                            110
                        ],
                        "proc.stdout": [
                            110
                        ],
                        "format": [
                            111
                        ]
                    },
                    "filtered_variables": {
                        "proc": [
                            108,
                            110
                        ],
                        "Popen": [
                            108
                        ],
                        "PIPE": [
                            109
                        ],
                        "DEVNULL": [
                            109
                        ],
                        "version": [
                            110,
                            111
                        ],
                        "strip": [
                            110
                        ],
                        "decode": [
                            110
                        ],
                        "proc.stdout.read": [
                            110
                        ],
                        "proc.stdout": [
                            110
                        ]
                    },
                    "diff_line_number": 108,
                    "class_data": {
                        "signature": "class Fish(Generic)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def _get_overridden_aliases(self):\n    overridden = os.environ.get('THEFUCK_OVERRIDDEN_ALIASES', os.environ.get('TF_OVERRIDDEN_ALIASES', ''))\n    default = {'cd', 'grep', 'ls', 'man', 'open'}\n    for alias in overridden.split(','):\n        default.add(alias.strip())\n    return default",
                            "def app_alias(self, alias_name):\n    if settings.alter_history:\n        alter_history = '    builtin history delete --exact --case-sensitive -- $fucked_up_command\\n    builtin history merge ^ /dev/null\\n'\n    else:\n        alter_history = ''\n    return 'function {0} -d \"Correct your previous console command\"\\n  set -l fucked_up_command $history[1]\\n  env TF_SHELL=fish TF_ALIAS={0} PYTHONIOENCODING=utf-8 thefuck $fucked_up_command | read -l unfucked_command\\n  if [ \"$unfucked_command\" != \"\" ]\\n    eval $unfucked_command\\n{1}  end\\nend'.format(alias_name, alter_history)",
                            "def get_aliases(self):\n    overridden = self._get_overridden_aliases()\n    functions = _get_functions(overridden)\n    raw_aliases = _get_aliases(overridden)\n    functions.update(raw_aliases)\n    return functions",
                            "def _expand_aliases(self, command_script):\n    aliases = self.get_aliases()\n    binary = command_script.split(' ')[0]\n    if binary in aliases and aliases[binary] != binary:\n        return command_script.replace(binary, aliases[binary], 1)\n    elif binary in aliases:\n        return u'fish -ic \"{}\"'.format(command_script.replace('\"', '\\\\\"'))\n    else:\n        return command_script",
                            "def _get_history_file_name(self):\n    return os.path.expanduser('~/.config/fish/fish_history')",
                            "def _get_history_line(self, command_script):\n    return u'- cmd: {}\\n   when: {}\\n'.format(command_script, int(time()))",
                            "def _script_from_history(self, line):\n    if '- cmd: ' in line:\n        return line.split('- cmd: ', 1)[1]\n    else:\n        return ''",
                            "def and_(self, *commands):\n    return u'; and '.join(commands)",
                            "def or_(self, *commands):\n    return u'; or '.join(commands)",
                            "def how_to_configure(self):\n    return self._create_shell_configuration(content=u'thefuck --alias | source', path='~/.config/fish/config.fish', reload='fish')",
                            "def info(self):\n    \"\"\"Returns the name and version of the current shell\"\"\"\n    proc = Popen(['fish', '-c', 'echo $FISH_VERSION'], stdout=PIPE, stderr=DEVNULL)\n    version = proc.stdout.read().decode('utf-8').strip()\n    return u'Fish Shell {}'.format(version)",
                            "def put_to_history(self, command):\n    try:\n        return self._put_to_history(command)\n    except IOError:\n        logs.exception(\"Can't update history\", sys.exc_info())",
                            "def _put_to_history(self, command_script):\n    \"\"\"Puts command script to shell history.\"\"\"\n    history_file_name = self._get_history_file_name()\n    if os.path.isfile(history_file_name):\n        with open(history_file_name, 'a') as history:\n            entry = self._get_history_line(command_script)\n            if six.PY2:\n                history.write(entry.encode('utf-8'))\n            else:\n                history.write(entry)"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "_get_overridden_aliases(self)",
                            "app_alias(self, alias_name)",
                            "get_aliases(self)",
                            "_expand_aliases(self, command_script)",
                            "_get_history_file_name(self)",
                            "_get_history_line(self, command_script)",
                            "_script_from_history(self, line)",
                            "and_(self, *commands)",
                            "or_(self, *commands)",
                            "how_to_configure(self)",
                            "info(self)",
                            "put_to_history(self, command)",
                            "_put_to_history(self, command_script)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "@cache('~/.config/fish/config.fish', '~/.config/fish/functions')\ndef _get_functions(overridden):\n    proc = Popen(['fish', '-ic', 'functions'], stdout=PIPE, stderr=DEVNULL)\n    functions = proc.stdout.read().decode('utf-8').strip().split('\\n')\n    return {func: func for func in functions if func not in overridden}",
                "@cache('~/.config/fish/config.fish')\ndef _get_aliases(overridden):\n    aliases = {}\n    proc = Popen(['fish', '-ic', 'alias'], stdout=PIPE, stderr=DEVNULL)\n    alias_out = proc.stdout.read().decode('utf-8').strip()\n    if not alias_out:\n        return aliases\n    for alias in alias_out.split('\\n'):\n        for separator in (' ', '='):\n            split_alias = alias.replace('alias ', '', 1).split(separator, 1)\n            if len(split_alias) == 2:\n                name, value = split_alias\n                break\n        else:\n            continue\n        if name not in overridden:\n            aliases[name] = value\n    return aliases",
                "def _get_overridden_aliases(self):\n    overridden = os.environ.get('THEFUCK_OVERRIDDEN_ALIASES',\n                                os.environ.get('TF_OVERRIDDEN_ALIASES', ''))\n    default = {'cd', 'grep', 'ls', 'man', 'open'}\n    for alias in overridden.split(','):\n        default.add(alias.strip())\n    return default",
                "def app_alias(self, alias_name):\n    if settings.alter_history:\n        alter_history = ('    builtin history delete --exact'\n                         ' --case-sensitive -- $fucked_up_command\\n'\n                         '    builtin history merge ^ /dev/null\\n')\n    else:\n        alter_history = ''\n    # It is VERY important to have the variables declared WITHIN the alias\n    return ('function {0} -d \"Correct your previous console command\"\\n'\n            '  set -l fucked_up_command $history[1]\\n'\n            '  env TF_SHELL=fish TF_ALIAS={0} PYTHONIOENCODING=utf-8'\n            ' thefuck $fucked_up_command | read -l unfucked_command\\n'\n            '  if [ \"$unfucked_command\" != \"\" ]\\n'\n            '    eval $unfucked_command\\n{1}'\n            '  end\\n'\n            'end').format(alias_name, alter_history)",
                "def get_aliases(self):\n    overridden = self._get_overridden_aliases()\n    functions = _get_functions(overridden)\n    raw_aliases = _get_aliases(overridden)\n    functions.update(raw_aliases)\n    return functions",
                "def _expand_aliases(self, command_script):\n    aliases = self.get_aliases()\n    binary = command_script.split(' ')[0]\n    if binary in aliases and aliases[binary] != binary:\n        return command_script.replace(binary, aliases[binary], 1)\n    elif binary in aliases:\n        return u'fish -ic \"{}\"'.format(command_script.replace('\"', r'\\\"'))\n    else:\n        return command_script",
                "def _get_history_file_name(self):\n    return os.path.expanduser('~/.config/fish/fish_history')",
                "def _get_history_line(self, command_script):\n    return u'- cmd: {}\\n   when: {}\\n'.format(command_script, int(time()))",
                "def _script_from_history(self, line):\n    if '- cmd: ' in line:\n        return line.split('- cmd: ', 1)[1]\n    else:\n        return ''",
                "def and_(self, *commands):\n    return u'; and '.join(commands)",
                "def or_(self, *commands):\n    return u'; or '.join(commands)",
                "def how_to_configure(self):\n    return self._create_shell_configuration(\n        content=u\"thefuck --alias | source\",\n        path='~/.config/fish/config.fish',\n        reload='fish')",
                "def info(self):\n    \"\"\"Returns the name and version of the current shell\"\"\"\n    proc = Popen(['fish', '-c', 'echo $FISH_VERSION'],\n                 stdout=PIPE, stderr=DEVNULL)\n    version = proc.stdout.read().decode('utf-8').strip()\n    return u'Fish Shell {}'.format(version)",
                "def put_to_history(self, command):\n    try:\n        return self._put_to_history(command)\n    except IOError:\n        logs.exception(\"Can't update history\", sys.exc_info())",
                "def _put_to_history(self, command_script):\n    \"\"\"Puts command script to shell history.\"\"\"\n    history_file_name = self._get_history_file_name()\n    if os.path.isfile(history_file_name):\n        with open(history_file_name, 'a') as history:\n            entry = self._get_history_line(command_script)\n            if six.PY2:\n                history.write(entry.encode('utf-8'))\n            else:\n                history.write(entry)"
            ],
            "inscope_function_signatures": [
                "_get_functions(overridden)",
                "_get_aliases(overridden)",
                "_get_overridden_aliases(self)",
                "app_alias(self, alias_name)",
                "get_aliases(self)",
                "_expand_aliases(self, command_script)",
                "_get_history_file_name(self)",
                "_get_history_line(self, command_script)",
                "_script_from_history(self, line)",
                "and_(self, *commands)",
                "or_(self, *commands)",
                "how_to_configure(self)",
                "info(self)",
                "put_to_history(self, command)",
                "_put_to_history(self, command_script)"
            ],
            "variables_in_file": {
                "proc": [
                    108,
                    14,
                    15,
                    110,
                    22,
                    23
                ],
                "Popen": [
                    108,
                    14,
                    22
                ],
                "PIPE": [
                    109,
                    14,
                    22
                ],
                "DEVNULL": [
                    109,
                    14,
                    22
                ],
                "functions": [
                    67,
                    69,
                    70,
                    15,
                    16
                ],
                "split": [
                    28,
                    15
                ],
                "strip": [
                    23,
                    110,
                    15
                ],
                "decode": [
                    23,
                    110,
                    15
                ],
                "proc.stdout.read": [
                    23,
                    110,
                    15
                ],
                "proc.stdout": [
                    23,
                    110,
                    15
                ],
                "func": [
                    16
                ],
                "overridden": [
                    34,
                    66,
                    67,
                    68,
                    41,
                    44,
                    16
                ],
                "cache": [
                    19,
                    12
                ],
                "aliases": [
                    35,
                    36,
                    73,
                    75,
                    76,
                    77,
                    21,
                    25
                ],
                "alias_out": [
                    24,
                    26,
                    23
                ],
                "alias": [
                    26,
                    28,
                    45,
                    44
                ],
                "alias_out.split": [
                    26
                ],
                "separator": [
                    27,
                    28
                ],
                "split_alias": [
                    28,
                    29,
                    30
                ],
                "alias.replace": [
                    28
                ],
                "len": [
                    29
                ],
                "name": [
                    34,
                    35,
                    30
                ],
                "value": [
                    35,
                    30
                ],
                "Generic": [
                    39
                ],
                "os.environ.get": [
                    41,
                    42
                ],
                "os.environ": [
                    41,
                    42
                ],
                "os": [
                    41,
                    42,
                    83,
                    122
                ],
                "default": [
                    43,
                    45,
                    46
                ],
                "overridden.split": [
                    44
                ],
                "default.add": [
                    45
                ],
                "alias.strip": [
                    45
                ],
                "settings.alter_history": [
                    49
                ],
                "settings": [
                    49
                ],
                "alter_history": [
                    50,
                    54,
                    63
                ],
                "format": [
                    56,
                    86,
                    78,
                    111
                ],
                "alias_name": [
                    63
                ],
                "self._get_overridden_aliases": [
                    66
                ],
                "self": [
                    66,
                    101,
                    73,
                    115,
                    121,
                    124
                ],
                "_get_functions": [
                    67
                ],
                "raw_aliases": [
                    68,
                    69
                ],
                "_get_aliases": [
                    68
                ],
                "functions.update": [
                    69
                ],
                "self.get_aliases": [
                    73
                ],
                "binary": [
                    74,
                    75,
                    76,
                    77
                ],
                "command_script.split": [
                    74
                ],
                "command_script": [
                    74,
                    76,
                    78,
                    80,
                    86,
                    124
                ],
                "command_script.replace": [
                    76,
                    78
                ],
                "os.path.expanduser": [
                    83
                ],
                "os.path": [
                    122,
                    83
                ],
                "int": [
                    86
                ],
                "time": [
                    86
                ],
                "line": [
                    89,
                    90
                ],
                "line.split": [
                    90
                ],
                "join": [
                    98,
                    95
                ],
                "commands": [
                    98,
                    95
                ],
                "self._create_shell_configuration": [
                    101
                ],
                "version": [
                    110,
                    111
                ],
                "self._put_to_history": [
                    115
                ],
                "command": [
                    115
                ],
                "IOError": [
                    116
                ],
                "logs.exception": [
                    117
                ],
                "logs": [
                    117
                ],
                "sys.exc_info": [
                    117
                ],
                "sys": [
                    117
                ],
                "history_file_name": [
                    121,
                    122,
                    123
                ],
                "self._get_history_file_name": [
                    121
                ],
                "os.path.isfile": [
                    122
                ],
                "open": [
                    123
                ],
                "history": [
                    128,
                    123,
                    126
                ],
                "entry": [
                    128,
                    124,
                    126
                ],
                "self._get_history_line": [
                    124
                ],
                "six.PY2": [
                    125
                ],
                "six": [
                    125
                ],
                "history.write": [
                    128,
                    126
                ],
                "entry.encode": [
                    126
                ]
            },
            "filtered_variables_in_file": {
                "proc": [
                    108,
                    14,
                    15,
                    110,
                    22,
                    23
                ],
                "Popen": [
                    108,
                    14,
                    22
                ],
                "PIPE": [
                    109,
                    14,
                    22
                ],
                "DEVNULL": [
                    109,
                    14,
                    22
                ],
                "functions": [
                    67,
                    69,
                    70,
                    15,
                    16
                ],
                "split": [
                    28,
                    15
                ],
                "strip": [
                    23,
                    110,
                    15
                ],
                "decode": [
                    23,
                    110,
                    15
                ],
                "proc.stdout.read": [
                    23,
                    110,
                    15
                ],
                "proc.stdout": [
                    23,
                    110,
                    15
                ],
                "func": [
                    16
                ],
                "overridden": [
                    34,
                    66,
                    67,
                    68,
                    41,
                    44,
                    16
                ],
                "cache": [
                    19,
                    12
                ],
                "aliases": [
                    35,
                    36,
                    73,
                    75,
                    76,
                    77,
                    21,
                    25
                ],
                "alias_out": [
                    24,
                    26,
                    23
                ],
                "alias": [
                    26,
                    28,
                    45,
                    44
                ],
                "alias_out.split": [
                    26
                ],
                "separator": [
                    27,
                    28
                ],
                "split_alias": [
                    28,
                    29,
                    30
                ],
                "alias.replace": [
                    28
                ],
                "name": [
                    34,
                    35,
                    30
                ],
                "value": [
                    35,
                    30
                ],
                "Generic": [
                    39
                ],
                "os.environ.get": [
                    41,
                    42
                ],
                "os.environ": [
                    41,
                    42
                ],
                "os": [
                    41,
                    42,
                    83,
                    122
                ],
                "default": [
                    43,
                    45,
                    46
                ],
                "overridden.split": [
                    44
                ],
                "default.add": [
                    45
                ],
                "alias.strip": [
                    45
                ],
                "settings.alter_history": [
                    49
                ],
                "settings": [
                    49
                ],
                "alter_history": [
                    50,
                    54,
                    63
                ],
                "alias_name": [
                    63
                ],
                "self._get_overridden_aliases": [
                    66
                ],
                "self": [
                    66,
                    101,
                    73,
                    115,
                    121,
                    124
                ],
                "_get_functions": [
                    67
                ],
                "raw_aliases": [
                    68,
                    69
                ],
                "_get_aliases": [
                    68
                ],
                "functions.update": [
                    69
                ],
                "self.get_aliases": [
                    73
                ],
                "binary": [
                    74,
                    75,
                    76,
                    77
                ],
                "command_script.split": [
                    74
                ],
                "command_script": [
                    74,
                    76,
                    78,
                    80,
                    86,
                    124
                ],
                "command_script.replace": [
                    76,
                    78
                ],
                "os.path.expanduser": [
                    83
                ],
                "os.path": [
                    122,
                    83
                ],
                "time": [
                    86
                ],
                "line": [
                    89,
                    90
                ],
                "line.split": [
                    90
                ],
                "join": [
                    98,
                    95
                ],
                "commands": [
                    98,
                    95
                ],
                "self._create_shell_configuration": [
                    101
                ],
                "version": [
                    110,
                    111
                ],
                "self._put_to_history": [
                    115
                ],
                "command": [
                    115
                ],
                "logs.exception": [
                    117
                ],
                "logs": [
                    117
                ],
                "sys.exc_info": [
                    117
                ],
                "sys": [
                    117
                ],
                "history_file_name": [
                    121,
                    122,
                    123
                ],
                "self._get_history_file_name": [
                    121
                ],
                "os.path.isfile": [
                    122
                ],
                "history": [
                    128,
                    123,
                    126
                ],
                "entry": [
                    128,
                    124,
                    126
                ],
                "self._get_history_line": [
                    124
                ],
                "six.PY2": [
                    125
                ],
                "six": [
                    125
                ],
                "history.write": [
                    128,
                    126
                ],
                "entry.encode": [
                    126
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/thefuck/tests/shells/test_fish.py",
                "test_function": "test_info",
                "test_function_code": "    def test_info(self, shell, Popen):\n        Popen.return_value.stdout.read.side_effect = [b'fish, version 3.5.9\\n']\n        assert shell.info() == 'Fish Shell 3.5.9'\n        assert Popen.call_args[0][0] == ['fish', '--version']",
                "test_error": "AssertionError: assert 'Fish Shell f...version 3.5.9' == 'Fish Shell 3.5.9'   - Fish Shell fish, version 3.5.9   + Fish Shell 3.5.9",
                "full_test_error": "self = <tests.shells.test_fish.TestFish object at 0x7f914752bd50>\nshell = <thefuck.shells.fish.Fish object at 0x7f91474c0090>\nPopen = <MagicMock name='Popen' id='140261943308048'>\n\n    def test_info(self, shell, Popen):\n        Popen.return_value.stdout.read.side_effect = [b'fish, version 3.5.9\\n']\n>       assert shell.info() == 'Fish Shell 3.5.9'\nE       AssertionError: assert 'Fish Shell f...version 3.5.9' == 'Fish Shell 3.5.9'\nE         - Fish Shell fish, version 3.5.9\nE         + Fish Shell 3.5.9\n\ntests/shells/test_fish.py:118: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}