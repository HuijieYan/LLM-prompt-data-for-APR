{
    "pandas": [
        {
            "bugID": 168,
            "bitvector": {
                "1.3.1": 1,
                "1.3.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.1.2": 1,
                "2.2.3": 1,
                "2.2.4": 1,
                "2.2.5": 1,
                "2.2.6": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n\n    \"\"\"\n    create and return a BaseGrouper, which is an internal\n    mapping of how to create the grouper indexers.\n    This may be composed of multiple Grouping objects, indicating\n    multiple groupers\n    \n    Groupers are ultimately index mappings. They can originate as:\n    index mappings, keys to columns, functions, or Groupers\n    \n    Groupers enable local references to axis, level, sort, while\n    the passed in axis, level, and sort are 'global'.\n    \n    This routine tries to figure out what the passing in references\n    are and then creates a Grouping for each one, combined into\n    a BaseGrouper.\n    \n    If observed & we have a categorical grouper, only show the observed\n    values\n    \n    If validate, then check for key/level overlaps\n    \n    \"\"\"\n    group_axis = obj._get_axis(axis)\n    \n    # Check if grouping by column label\n    if isinstance(key, str) and key in obj.columns:\n        key = [key]  # Convert single label to list\n    elif isinstance(key, list):\n        # Check if all keys are valid column labels\n        all_valid_keys = all(k in obj.columns for k in key)\n        if all_valid_keys:\n            key = list(key)\n        else:\n            raise KeyError(\"Invalid column label(s) for grouping\")"
        }
    ]
}