{
    "pandas:168": {
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/core/groupby/grouper.py": {
            "buggy_functions": [
                {
                    "function_name": "_get_grouper",
                    "function_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    \"\"\"\n    create and return a BaseGrouper, which is an internal\n    mapping of how to create the grouper indexers.\n    This may be composed of multiple Grouping objects, indicating\n    multiple groupers\n\n    Groupers are ultimately index mappings. They can originate as:\n    index mappings, keys to columns, functions, or Groupers\n\n    Groupers enable local references to axis,level,sort, while\n    the passed in axis, level, and sort are 'global'.\n\n    This routine tries to figure out what the passing in references\n    are and then creates a Grouping for each one, combined into\n    a BaseGrouper.\n\n    If observed & we have a categorical grouper, only show the observed\n    values\n\n    If validate, then check for key/level overlaps\n\n    \"\"\"\n    group_axis = obj._get_axis(axis)\n\n    # validate that the passed single level is compatible with the passed\n    # axis of the object\n    if level is not None:\n        # TODO: These if-block and else-block are almost same.\n        # MultiIndex instance check is removable, but it seems that there are\n        # some processes only for non-MultiIndex in else-block,\n        # eg. `obj.index.name != level`. We have to consider carefully whether\n        # these are applicable for MultiIndex. Even if these are applicable,\n        # we need to check if it makes no side effect to subsequent processes\n        # on the outside of this condition.\n        # (GH 17621)\n        if isinstance(group_axis, MultiIndex):\n            if is_list_like(level) and len(level) == 1:\n                level = level[0]\n\n            if key is None and is_scalar(level):\n                # Get the level values from group_axis\n                key = group_axis.get_level_values(level)\n                level = None\n\n        else:\n            # allow level to be a length-one list-like object\n            # (e.g., level=[0])\n            # GH 13901\n            if is_list_like(level):\n                nlevels = len(level)\n                if nlevels == 1:\n                    level = level[0]\n                elif nlevels == 0:\n                    raise ValueError(\"No group keys passed!\")\n                else:\n                    raise ValueError(\"multiple levels only valid with MultiIndex\")\n\n            if isinstance(level, str):\n                if obj.index.name != level:\n                    raise ValueError(\n                        \"level name {} is not the name of the index\".format(level)\n                    )\n            elif level > 0 or level < -1:\n                raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n\n            # NOTE: `group_axis` and `group_axis.get_level_values(level)`\n            # are same in this section.\n            level = None\n            key = group_axis\n\n    # a passed-in Grouper, directly convert\n    if isinstance(key, Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False)\n        if key.key is None:\n            return grouper, [], obj\n        else:\n            return grouper, {key.key}, obj\n\n    # already have a BaseGrouper, just return it\n    elif isinstance(key, BaseGrouper):\n        return key, [], obj\n\n    # In the future, a tuple key will always mean an actual key,\n    # not an iterable of keys. In the meantime, we attempt to provide\n    # a warning. We can assume that the user wanted a list of keys when\n    # the key is not in the index. We just have to be careful with\n    # unhashable elements of `key`. Any unhashable elements implies that\n    # they wanted a list of keys.\n    # https://github.com/pandas-dev/pandas/issues/18314\n    is_tuple = isinstance(key, tuple)\n    all_hashable = is_tuple and is_hashable(key)\n\n    if is_tuple:\n        if (\n            all_hashable and key not in obj and set(key).issubset(obj)\n        ) or not all_hashable:\n            # column names ('a', 'b') -> ['a', 'b']\n            # arrays like (a, b) -> [a, b]\n            msg = (\n                \"Interpreting tuple 'by' as a list of keys, rather than \"\n                \"a single key. Use 'by=[...]' instead of 'by=(...)'. In \"\n                \"the future, a tuple will always mean a single key.\"\n            )\n            warnings.warn(msg, FutureWarning, stacklevel=5)\n            key = list(key)\n\n    if not isinstance(key, list):\n        keys = [key]\n        match_axis_length = False\n    else:\n        keys = key\n        match_axis_length = len(keys) == len(group_axis)\n\n    # what are we after, exactly?\n    any_callable = any(callable(g) or isinstance(g, dict) for g in keys)\n    any_groupers = any(isinstance(g, Grouper) for g in keys)\n    any_arraylike = any(\n        isinstance(g, (list, tuple, Series, Index, np.ndarray)) for g in keys\n    )\n\n    # is this an index replacement?\n    if (\n        not any_callable\n        and not any_arraylike\n        and not any_groupers\n        and match_axis_length\n        and level is None\n    ):\n        if isinstance(obj, DataFrame):\n            all_in_columns_index = all(\n                g in obj.columns or g in obj.index.names for g in keys\n            )\n        elif isinstance(obj, Series):\n            all_in_columns_index = all(g in obj.index.names for g in keys)\n\n        if not all_in_columns_index:\n            keys = [com.asarray_tuplesafe(keys)]\n\n    if isinstance(level, (tuple, list)):\n        if key is None:\n            keys = [None] * len(level)\n        levels = level\n    else:\n        levels = [level] * len(keys)\n\n    groupings = []\n    exclusions = []\n\n    # if the actual grouper should be obj[key]\n    def is_in_axis(key):\n        if not _is_label_like(key):\n            try:\n                obj._data.items.get_loc(key)\n            except Exception:\n                return False\n\n        return True\n\n    # if the grouper is obj[name]\n    def is_in_obj(gpr):\n        try:\n            return id(gpr) == id(obj[gpr.name])\n        except Exception:\n            return False\n\n    for i, (gpr, level) in enumerate(zip(keys, levels)):\n\n        if is_in_obj(gpr):  # df.groupby(df['name'])\n            in_axis, name = True, gpr.name\n            exclusions.append(name)\n\n        elif is_in_axis(gpr):  # df.groupby('name')\n            if gpr in obj:\n                if validate:\n                    obj._check_label_or_level_ambiguity(gpr)\n                in_axis, name, gpr = True, gpr, obj[gpr]\n                exclusions.append(name)\n            elif obj._is_level_reference(gpr):\n                in_axis, name, level, gpr = False, None, gpr, None\n            else:\n                raise KeyError(gpr)\n        elif isinstance(gpr, Grouper) and gpr.key is not None:\n            # Add key to exclusions\n            exclusions.append(gpr.key)\n            in_axis, name = False, None\n        else:\n            in_axis, name = False, None\n\n        if is_categorical_dtype(gpr) and len(gpr) != obj.shape[axis]:\n            raise ValueError(\n                (\n                    \"Length of grouper ({len_gpr}) and axis ({len_axis})\"\n                    \" must be same length\".format(\n                        len_gpr=len(gpr), len_axis=obj.shape[axis]\n                    )\n                )\n            )\n\n        # create the Grouping\n        # allow us to passing the actual Grouping as the gpr\n        ping = (\n            Grouping(\n                group_axis,\n                gpr,\n                obj=obj,\n                name=name,\n                level=level,\n                sort=sort,\n                observed=observed,\n                in_axis=in_axis,\n            )\n            if not isinstance(gpr, Grouping)\n            else gpr\n        )\n\n        groupings.append(ping)\n\n    if len(groupings) == 0 and len(obj):\n        raise ValueError(\"No group keys passed!\")\n    elif len(groupings) == 0:\n        groupings.append(Grouping(Index([], dtype=\"int\"), np.array([], dtype=np.intp)))\n\n    # create the internals grouper\n    grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, exclusions, obj\n",
                    "decorators": [],
                    "docstring": "create and return a BaseGrouper, which is an internal\nmapping of how to create the grouper indexers.\nThis may be composed of multiple Grouping objects, indicating\nmultiple groupers\n\nGroupers are ultimately index mappings. They can originate as:\nindex mappings, keys to columns, functions, or Groupers\n\nGroupers enable local references to axis,level,sort, while\nthe passed in axis, level, and sort are 'global'.\n\nThis routine tries to figure out what the passing in references\nare and then creates a Grouping for each one, combined into\na BaseGrouper.\n\nIf observed & we have a categorical grouper, only show the observed\nvalues\n\nIf validate, then check for key/level overlaps",
                    "start_line": 425,
                    "variables": {
                        "group_axis": [
                            546,
                            457,
                            658,
                            470,
                            503,
                            476,
                            637
                        ],
                        "obj._get_axis": [
                            457
                        ],
                        "obj": [
                            515,
                            652,
                            639,
                            529,
                            659,
                            563,
                            565,
                            567,
                            568,
                            457,
                            587,
                            596,
                            607,
                            609,
                            610,
                            612,
                            493,
                            623,
                            628,
                            507,
                            509,
                            511
                        ],
                        "axis": [
                            457,
                            628,
                            623
                        ],
                        "level": [
                            641,
                            561,
                            573,
                            575,
                            576,
                            578,
                            461,
                            471,
                            472,
                            600,
                            474,
                            476,
                            477,
                            483,
                            484,
                            613,
                            486,
                            492,
                            493,
                            495,
                            497,
                            502
                        ],
                        "isinstance": [
                            514,
                            573,
                            549,
                            550,
                            646,
                            552,
                            616,
                            492,
                            524,
                            563,
                            470,
                            567,
                            506,
                            541
                        ],
                        "MultiIndex": [
                            470
                        ],
                        "is_list_like": [
                            483,
                            471
                        ],
                        "len": [
                            546,
                            578,
                            484,
                            652,
                            654,
                            623,
                            628,
                            471,
                            575
                        ],
                        "key": [
                            514,
                            515,
                            524,
                            525,
                            529,
                            539,
                            541,
                            542,
                            545,
                            574,
                            585,
                            587,
                            474,
                            476,
                            503,
                            506,
                            507,
                            508,
                            511
                        ],
                        "is_scalar": [
                            474
                        ],
                        "group_axis.get_level_values": [
                            476
                        ],
                        "nlevels": [
                            484,
                            485,
                            487
                        ],
                        "ValueError": [
                            488,
                            490,
                            653,
                            494,
                            624,
                            498
                        ],
                        "str": [
                            492
                        ],
                        "obj.index.name": [
                            493
                        ],
                        "obj.index": [
                            568,
                            565,
                            493
                        ],
                        "format": [
                            626,
                            495
                        ],
                        "Grouper": [
                            616,
                            506,
                            550
                        ],
                        "binner": [
                            507
                        ],
                        "grouper": [
                            658,
                            659,
                            507,
                            509,
                            511
                        ],
                        "key._get_grouper": [
                            507
                        ],
                        "key.key": [
                            508,
                            511
                        ],
                        "BaseGrouper": [
                            514,
                            658
                        ],
                        "is_tuple": [
                            524,
                            525,
                            527
                        ],
                        "tuple": [
                            552,
                            524,
                            573
                        ],
                        "all_hashable": [
                            529,
                            530,
                            525
                        ],
                        "is_hashable": [
                            525
                        ],
                        "issubset": [
                            529
                        ],
                        "set": [
                            529
                        ],
                        "msg": [
                            538,
                            533
                        ],
                        "warnings.warn": [
                            538
                        ],
                        "warnings": [
                            538
                        ],
                        "FutureWarning": [
                            538
                        ],
                        "list": [
                            552,
                            573,
                            539,
                            541
                        ],
                        "keys": [
                            545,
                            546,
                            578,
                            549,
                            550,
                            552,
                            600,
                            565,
                            568,
                            571,
                            542,
                            575
                        ],
                        "match_axis_length": [
                            560,
                            546,
                            543
                        ],
                        "any_callable": [
                            557,
                            549
                        ],
                        "any": [
                            549,
                            550,
                            551
                        ],
                        "callable": [
                            549
                        ],
                        "g": [
                            549,
                            550,
                            552,
                            565,
                            568
                        ],
                        "dict": [
                            549
                        ],
                        "any_groupers": [
                            550,
                            559
                        ],
                        "any_arraylike": [
                            558,
                            551
                        ],
                        "Series": [
                            552,
                            567
                        ],
                        "Index": [
                            552,
                            655
                        ],
                        "np.ndarray": [
                            552
                        ],
                        "np": [
                            552,
                            655
                        ],
                        "DataFrame": [
                            563
                        ],
                        "all_in_columns_index": [
                            568,
                            570,
                            564
                        ],
                        "all": [
                            568,
                            564
                        ],
                        "obj.columns": [
                            565
                        ],
                        "obj.index.names": [
                            568,
                            565
                        ],
                        "com.asarray_tuplesafe": [
                            571
                        ],
                        "com": [
                            571
                        ],
                        "levels": [
                            576,
                            578,
                            600
                        ],
                        "groupings": [
                            580,
                            650,
                            652,
                            654,
                            655,
                            658
                        ],
                        "exclusions": [
                            611,
                            581,
                            618,
                            659,
                            604
                        ],
                        "_is_label_like": [
                            585
                        ],
                        "obj._data.items.get_loc": [
                            587
                        ],
                        "obj._data.items": [
                            587
                        ],
                        "obj._data": [
                            587
                        ],
                        "Exception": [
                            588,
                            597
                        ],
                        "id": [
                            596
                        ],
                        "gpr": [
                            609,
                            610,
                            612,
                            613,
                            646,
                            615,
                            616,
                            647,
                            618,
                            638,
                            623,
                            596,
                            628,
                            600,
                            602,
                            603,
                            606,
                            607
                        ],
                        "gpr.name": [
                            603,
                            596
                        ],
                        "i": [
                            600
                        ],
                        "enumerate": [
                            600
                        ],
                        "zip": [
                            600
                        ],
                        "is_in_obj": [
                            602
                        ],
                        "in_axis": [
                            610,
                            644,
                            613,
                            619,
                            621,
                            603
                        ],
                        "name": [
                            640,
                            610,
                            611,
                            613,
                            619,
                            621,
                            603,
                            604
                        ],
                        "exclusions.append": [
                            618,
                            611,
                            604
                        ],
                        "is_in_axis": [
                            606
                        ],
                        "validate": [
                            608
                        ],
                        "obj._check_label_or_level_ambiguity": [
                            609
                        ],
                        "obj._is_level_reference": [
                            612
                        ],
                        "KeyError": [
                            615
                        ],
                        "gpr.key": [
                            616,
                            618
                        ],
                        "is_categorical_dtype": [
                            623
                        ],
                        "obj.shape": [
                            628,
                            623
                        ],
                        "ping": [
                            650,
                            635
                        ],
                        "Grouping": [
                            636,
                            646,
                            655
                        ],
                        "sort": [
                            642,
                            658
                        ],
                        "observed": [
                            643
                        ],
                        "groupings.append": [
                            650,
                            655
                        ],
                        "np.array": [
                            655
                        ],
                        "np.intp": [
                            655
                        ],
                        "mutated": [
                            658
                        ]
                    },
                    "filtered_variables": {
                        "group_axis": [
                            546,
                            457,
                            658,
                            470,
                            503,
                            476,
                            637
                        ],
                        "obj._get_axis": [
                            457
                        ],
                        "obj": [
                            515,
                            652,
                            639,
                            529,
                            659,
                            563,
                            565,
                            567,
                            568,
                            457,
                            587,
                            596,
                            607,
                            609,
                            610,
                            612,
                            493,
                            623,
                            628,
                            507,
                            509,
                            511
                        ],
                        "axis": [
                            457,
                            628,
                            623
                        ],
                        "level": [
                            641,
                            561,
                            573,
                            575,
                            576,
                            578,
                            461,
                            471,
                            472,
                            600,
                            474,
                            476,
                            477,
                            483,
                            484,
                            613,
                            486,
                            492,
                            493,
                            495,
                            497,
                            502
                        ],
                        "MultiIndex": [
                            470
                        ],
                        "is_list_like": [
                            483,
                            471
                        ],
                        "key": [
                            514,
                            515,
                            524,
                            525,
                            529,
                            539,
                            541,
                            542,
                            545,
                            574,
                            585,
                            587,
                            474,
                            476,
                            503,
                            506,
                            507,
                            508,
                            511
                        ],
                        "is_scalar": [
                            474
                        ],
                        "group_axis.get_level_values": [
                            476
                        ],
                        "nlevels": [
                            484,
                            485,
                            487
                        ],
                        "obj.index.name": [
                            493
                        ],
                        "obj.index": [
                            568,
                            565,
                            493
                        ],
                        "Grouper": [
                            616,
                            506,
                            550
                        ],
                        "binner": [
                            507
                        ],
                        "grouper": [
                            658,
                            659,
                            507,
                            509,
                            511
                        ],
                        "key._get_grouper": [
                            507
                        ],
                        "key.key": [
                            508,
                            511
                        ],
                        "BaseGrouper": [
                            514,
                            658
                        ],
                        "is_tuple": [
                            524,
                            525,
                            527
                        ],
                        "all_hashable": [
                            529,
                            530,
                            525
                        ],
                        "is_hashable": [
                            525
                        ],
                        "issubset": [
                            529
                        ],
                        "msg": [
                            538,
                            533
                        ],
                        "warnings.warn": [
                            538
                        ],
                        "warnings": [
                            538
                        ],
                        "keys": [
                            545,
                            546,
                            578,
                            549,
                            550,
                            552,
                            600,
                            565,
                            568,
                            571,
                            542,
                            575
                        ],
                        "match_axis_length": [
                            560,
                            546,
                            543
                        ],
                        "any_callable": [
                            557,
                            549
                        ],
                        "g": [
                            549,
                            550,
                            552,
                            565,
                            568
                        ],
                        "any_groupers": [
                            550,
                            559
                        ],
                        "any_arraylike": [
                            558,
                            551
                        ],
                        "Series": [
                            552,
                            567
                        ],
                        "Index": [
                            552,
                            655
                        ],
                        "np.ndarray": [
                            552
                        ],
                        "np": [
                            552,
                            655
                        ],
                        "DataFrame": [
                            563
                        ],
                        "all_in_columns_index": [
                            568,
                            570,
                            564
                        ],
                        "obj.columns": [
                            565
                        ],
                        "obj.index.names": [
                            568,
                            565
                        ],
                        "com.asarray_tuplesafe": [
                            571
                        ],
                        "com": [
                            571
                        ],
                        "levels": [
                            576,
                            578,
                            600
                        ],
                        "groupings": [
                            580,
                            650,
                            652,
                            654,
                            655,
                            658
                        ],
                        "exclusions": [
                            611,
                            581,
                            618,
                            659,
                            604
                        ],
                        "_is_label_like": [
                            585
                        ],
                        "obj._data.items.get_loc": [
                            587
                        ],
                        "obj._data.items": [
                            587
                        ],
                        "obj._data": [
                            587
                        ],
                        "gpr": [
                            609,
                            610,
                            612,
                            613,
                            646,
                            615,
                            616,
                            647,
                            618,
                            638,
                            623,
                            596,
                            628,
                            600,
                            602,
                            603,
                            606,
                            607
                        ],
                        "gpr.name": [
                            603,
                            596
                        ],
                        "i": [
                            600
                        ],
                        "is_in_obj": [
                            602
                        ],
                        "in_axis": [
                            610,
                            644,
                            613,
                            619,
                            621,
                            603
                        ],
                        "name": [
                            640,
                            610,
                            611,
                            613,
                            619,
                            621,
                            603,
                            604
                        ],
                        "exclusions.append": [
                            618,
                            611,
                            604
                        ],
                        "is_in_axis": [
                            606
                        ],
                        "validate": [
                            608
                        ],
                        "obj._check_label_or_level_ambiguity": [
                            609
                        ],
                        "obj._is_level_reference": [
                            612
                        ],
                        "gpr.key": [
                            616,
                            618
                        ],
                        "is_categorical_dtype": [
                            623
                        ],
                        "obj.shape": [
                            628,
                            623
                        ],
                        "ping": [
                            650,
                            635
                        ],
                        "Grouping": [
                            636,
                            646,
                            655
                        ],
                        "sort": [
                            642,
                            658
                        ],
                        "observed": [
                            643
                        ],
                        "groupings.append": [
                            650,
                            655
                        ],
                        "np.array": [
                            655
                        ],
                        "np.intp": [
                            655
                        ],
                        "mutated": [
                            658
                        ]
                    },
                    "diff_line_number": 609,
                    "class_data": null
                }
            ],
            "inscope_functions": [
                "_get_grouper(obj, key=None, axis=0, level=None, sort=True, observed=False, mutated=False, validate=True)",
                "_is_label_like(val)",
                "_convert_grouper(axis, grouper)",
                "__new__(cls, *args, **kwargs)",
                "__init__(self, key=None, level=None, freq=None, axis=0, sort=False)",
                "ax(self)",
                "_get_grouper(self, obj, validate=True)",
                "_set_grouper(self, obj, sort=False)",
                "groups(self)",
                "__repr__(self)",
                "__init__(self, index, grouper=None, obj=None, name=None, level=None, sort=True, observed=False, in_axis=False)",
                "__repr__(self)",
                "__iter__(self)",
                "ngroups(self)",
                "indices(self)",
                "labels(self)",
                "result_index(self)",
                "group_index(self)",
                "_make_labels(self)",
                "groups(self)",
                "is_in_axis(key)",
                "is_in_obj(gpr)"
            ],
            "variables_in_file": {
                "_attributes": [
                    95
                ],
                "kwargs.get": [
                    98
                ],
                "kwargs": [
                    98
                ],
                "cls": [
                    101,
                    102
                ],
                "TimeGrouper": [
                    101
                ],
                "__new__": [
                    102
                ],
                "super": [
                    102
                ],
                "self.key": [
                    165,
                    166,
                    105,
                    137,
                    157
                ],
                "self": [
                    105,
                    106,
                    107,
                    108,
                    109,
                    111,
                    112,
                    113,
                    114,
                    115,
                    119,
                    134,
                    135,
                    136,
                    137,
                    138,
                    139,
                    140,
                    143,
                    157,
                    161,
                    162,
                    165,
                    166,
                    168,
                    171,
                    178,
                    179,
                    180,
                    193,
                    195,
                    197,
                    199,
                    200,
                    201,
                    205,
                    209,
                    210,
                    211,
                    214,
                    258,
                    259,
                    260,
                    261,
                    262,
                    263,
                    264,
                    265,
                    266,
                    270,
                    273,
                    284,
                    285,
                    287,
                    288,
                    293,
                    298,
                    299,
                    300,
                    301,
                    302,
                    305,
                    306,
                    308,
                    309,
                    312,
                    314,
                    315,
                    317,
                    321,
                    323,
                    325,
                    330,
                    332,
                    337,
                    338,
                    342,
                    344,
                    345,
                    347,
                    349,
                    350,
                    354,
                    356,
                    361,
                    362,
                    363,
                    364,
                    366,
                    369,
                    372,
                    379,
                    384,
                    385,
                    387,
                    392,
                    393,
                    394,
                    398,
                    399,
                    400,
                    404,
                    405,
                    406,
                    409,
                    411,
                    412,
                    413,
                    415,
                    416,
                    417,
                    418,
                    422
                ],
                "key": [
                    514,
                    515,
                    524,
                    525,
                    529,
                    539,
                    541,
                    542,
                    545,
                    166,
                    168,
                    173,
                    174,
                    175,
                    574,
                    585,
                    587,
                    474,
                    476,
                    105,
                    503,
                    506,
                    507,
                    508,
                    511
                ],
                "self.level": [
                    259,
                    106,
                    139,
                    179,
                    180,
                    157
                ],
                "level": [
                    641,
                    259,
                    278,
                    279,
                    280,
                    281,
                    282,
                    285,
                    288,
                    561,
                    180,
                    185,
                    186,
                    189,
                    190,
                    573,
                    575,
                    576,
                    578,
                    461,
                    471,
                    472,
                    600,
                    474,
                    476,
                    477,
                    483,
                    484,
                    613,
                    486,
                    106,
                    492,
                    493,
                    495,
                    497,
                    502
                ],
                "self.freq": [
                    107
                ],
                "freq": [
                    107
                ],
                "self.axis": [
                    178,
                    138,
                    108,
                    197
                ],
                "axis": [
                    673,
                    675,
                    457,
                    108,
                    623,
                    628,
                    670
                ],
                "self.sort": [
                    193,
                    263,
                    140,
                    109,
                    399,
                    315,
                    415
                ],
                "sort": [
                    193,
                    642,
                    325,
                    263,
                    109,
                    658
                ],
                "self.grouper": [
                    384,
                    385,
                    387,
                    260,
                    135,
                    143,
                    273,
                    411,
                    412,
                    413,
                    287,
                    288,
                    415,
                    162,
                    293,
                    168,
                    298,
                    301,
                    302,
                    305,
                    306,
                    308,
                    309,
                    312,
                    314,
                    315,
                    317,
                    321,
                    323,
                    325,
                    200,
                    201,
                    332,
                    205,
                    337,
                    338,
                    342,
                    344,
                    345,
                    347,
                    349,
                    350,
                    354,
                    356,
                    361,
                    362,
                    363,
                    364,
                    366,
                    111,
                    119
                ],
                "self.obj": [
                    199,
                    136,
                    135,
                    264,
                    298,
                    301,
                    143,
                    112,
                    306
                ],
                "self.indexer": [
                    113,
                    195
                ],
                "self.binner": [
                    114,
                    143
                ],
                "self._grouper": [
                    161,
                    162,
                    115,
                    171
                ],
                "property": [
                    390,
                    203,
                    402,
                    117,
                    377
                ],
                "self._set_grouper": [
                    134
                ],
                "obj": [
                    515,
                    134,
                    264,
                    652,
                    639,
                    529,
                    659,
                    169,
                    171,
                    173,
                    175,
                    178,
                    563,
                    565,
                    567,
                    568,
                    197,
                    199,
                    457,
                    587,
                    596,
                    607,
                    609,
                    610,
                    612,
                    493,
                    623,
                    628,
                    507,
                    509,
                    511
                ],
                "exclusions": [
                    611,
                    581,
                    135,
                    618,
                    659,
                    604
                ],
                "_get_grouper": [
                    135
                ],
                "validate": [
                    608,
                    141
                ],
                "ValueError": [
                    676,
                    488,
                    490,
                    653,
                    494,
                    624,
                    498,
                    346,
                    158,
                    190
                ],
                "getattr": [
                    168,
                    361,
                    209,
                    211,
                    344
                ],
                "isinstance": [
                    384,
                    514,
                    646,
                    524,
                    269,
                    272,
                    279,
                    663,
                    411,
                    667,
                    541,
                    669,
                    674,
                    293,
                    549,
                    550,
                    168,
                    552,
                    563,
                    308,
                    567,
                    184,
                    573,
                    337,
                    341,
                    470,
                    616,
                    492,
                    506
                ],
                "ABCSeries": [
                    169
                ],
                "ax": [
                    193,
                    195,
                    196,
                    200,
                    171,
                    175,
                    178,
                    184,
                    185,
                    186,
                    189
                ],
                "self._grouper.take": [
                    171
                ],
                "obj.index": [
                    565,
                    568,
                    171,
                    493
                ],
                "obj._info_axis": [
                    173
                ],
                "KeyError": [
                    174,
                    615
                ],
                "format": [
                    174,
                    495,
                    209,
                    369,
                    626,
                    215,
                    281,
                    346,
                    190
                ],
                "Index": [
                    416,
                    674,
                    552,
                    269,
                    175,
                    655,
                    342,
                    186
                ],
                "obj._get_axis": [
                    457,
                    178
                ],
                "MultiIndex": [
                    184,
                    272,
                    470
                ],
                "ax._get_level_number": [
                    185
                ],
                "ax._get_level_values": [
                    186
                ],
                "ax.names": [
                    186
                ],
                "ax.name": [
                    189
                ],
                "ax.is_monotonic": [
                    193
                ],
                "indexer": [
                    195,
                    196,
                    197
                ],
                "ax.argsort": [
                    195
                ],
                "ax.take": [
                    196
                ],
                "obj.take": [
                    197
                ],
                "self.grouper.groups": [
                    205
                ],
                "attrs_list": [
                    208,
                    213
                ],
                "attr_name": [
                    209,
                    210,
                    211
                ],
                "self._attributes": [
                    210
                ],
                "attrs": [
                    213,
                    215
                ],
                "join": [
                    213
                ],
                "cls_name": [
                    214,
                    215
                ],
                "self.__class__.__name__": [
                    214
                ],
                "self.__class__": [
                    214
                ],
                "self.name": [
                    416,
                    258,
                    299,
                    300,
                    270,
                    305,
                    306,
                    369,
                    345,
                    284,
                    285
                ],
                "name": [
                    640,
                    258,
                    610,
                    611,
                    613,
                    619,
                    269,
                    621,
                    603,
                    604
                ],
                "_convert_grouper": [
                    260
                ],
                "index": [
                    260,
                    262,
                    280,
                    282,
                    285,
                    287
                ],
                "grouper": [
                    260,
                    269,
                    270,
                    272,
                    273,
                    658,
                    659,
                    667,
                    668,
                    669,
                    670,
                    671,
                    673,
                    674,
                    675,
                    677,
                    679,
                    298,
                    300,
                    302,
                    507,
                    509,
                    511
                ],
                "self.all_grouper": [
                    314,
                    261,
                    398,
                    399
                ],
                "self.index": [
                    350,
                    347,
                    422,
                    262
                ],
                "self.observed": [
                    265
                ],
                "observed": [
                    265,
                    322,
                    315,
                    643
                ],
                "self.in_axis": [
                    266
                ],
                "in_axis": [
                    610,
                    644,
                    613,
                    266,
                    619,
                    621,
                    603
                ],
                "Series": [
                    674,
                    552,
                    269,
                    342,
                    567,
                    669
                ],
                "grouper.name": [
                    270
                ],
                "grouper.values": [
                    273
                ],
                "int": [
                    279
                ],
                "index.names": [
                    280,
                    282,
                    285
                ],
                "AssertionError": [
                    281,
                    357
                ],
                "index.names.index": [
                    282
                ],
                "self._labels": [
                    321,
                    417,
                    392,
                    394,
                    409,
                    287
                ],
                "self._group_index": [
                    418,
                    330,
                    404,
                    406,
                    409,
                    287
                ],
                "index._get_grouper_for_level": [
                    287
                ],
                "Grouper": [
                    616,
                    506,
                    293,
                    550
                ],
                "_": [
                    298
                ],
                "self.grouper._get_grouper": [
                    298
                ],
                "grouper.result_index.name": [
                    300
                ],
                "grouper.result_index": [
                    300
                ],
                "self.grouper.obj": [
                    301
                ],
                "grouper._get_grouper": [
                    302
                ],
                "list": [
                    541,
                    674,
                    552,
                    308,
                    539,
                    573
                ],
                "tuple": [
                    552,
                    524,
                    308,
                    663,
                    573
                ],
                "com.asarray_tuplesafe": [
                    571,
                    309
                ],
                "com": [
                    571,
                    309
                ],
                "is_categorical_dtype": [
                    312,
                    623
                ],
                "recode_for_groupby": [
                    314
                ],
                "categories": [
                    328,
                    332,
                    317
                ],
                "self.grouper.categories": [
                    317
                ],
                "self.grouper.codes": [
                    321,
                    323
                ],
                "codes": [
                    323,
                    324,
                    326,
                    328,
                    332
                ],
                "algorithms.unique1d": [
                    323
                ],
                "algorithms": [
                    323,
                    415
                ],
                "self.grouper.ordered": [
                    332,
                    325
                ],
                "np.sort": [
                    326
                ],
                "np": [
                    674,
                    326,
                    328,
                    552,
                    655,
                    342
                ],
                "np.arange": [
                    328
                ],
                "len": [
                    546,
                    578,
                    484,
                    675,
                    328,
                    652,
                    654,
                    623,
                    628,
                    471,
                    379,
                    350,
                    575
                ],
                "CategoricalIndex": [
                    330
                ],
                "Categorical.from_codes": [
                    331,
                    422
                ],
                "Categorical": [
                    331,
                    422
                ],
                "Grouping": [
                    337,
                    636,
                    646,
                    655
                ],
                "self.grouper.grouper": [
                    338
                ],
                "ExtensionArray": [
                    342
                ],
                "np.ndarray": [
                    552,
                    674,
                    342
                ],
                "t": [
                    345,
                    346
                ],
                "str": [
                    345,
                    492,
                    663
                ],
                "type": [
                    345
                ],
                "self.index.map": [
                    347
                ],
                "hasattr": [
                    349
                ],
                "errmsg": [
                    352,
                    357
                ],
                "pprint_thing": [
                    354
                ],
                "is_datetime64_dtype": [
                    362
                ],
                "self.grouper.astype": [
                    363,
                    366
                ],
                "is_timedelta64_dtype": [
                    364
                ],
                "iter": [
                    372
                ],
                "self.indices": [
                    372
                ],
                "_labels": [
                    374
                ],
                "_group_index": [
                    375
                ],
                "self.group_index": [
                    400,
                    379,
                    422,
                    399
                ],
                "BaseGrouper": [
                    384,
                    514,
                    411,
                    658
                ],
                "self.grouper.indices": [
                    385
                ],
                "values": [
                    387,
                    388
                ],
                "ensure_categorical": [
                    387
                ],
                "values._reverse_indexer": [
                    388
                ],
                "cache_readonly": [
                    420,
                    396,
                    381
                ],
                "self._make_labels": [
                    393,
                    405
                ],
                "recode_from_groupby": [
                    399
                ],
                "labels": [
                    417,
                    412,
                    415
                ],
                "self.grouper.label_info": [
                    412
                ],
                "uniques": [
                    416,
                    418,
                    413,
                    415
                ],
                "self.grouper.result_index": [
                    413
                ],
                "algorithms.factorize": [
                    415
                ],
                "self.index.groupby": [
                    422
                ],
                "self.labels": [
                    422
                ],
                "group_axis": [
                    546,
                    457,
                    658,
                    470,
                    503,
                    476,
                    637
                ],
                "is_list_like": [
                    483,
                    471
                ],
                "is_scalar": [
                    474,
                    663
                ],
                "group_axis.get_level_values": [
                    476
                ],
                "nlevels": [
                    484,
                    485,
                    487
                ],
                "obj.index.name": [
                    493
                ],
                "binner": [
                    507
                ],
                "key._get_grouper": [
                    507
                ],
                "key.key": [
                    508,
                    511
                ],
                "is_tuple": [
                    524,
                    525,
                    527
                ],
                "all_hashable": [
                    529,
                    530,
                    525
                ],
                "is_hashable": [
                    525
                ],
                "issubset": [
                    529
                ],
                "set": [
                    529
                ],
                "msg": [
                    538,
                    533
                ],
                "warnings.warn": [
                    538
                ],
                "warnings": [
                    538
                ],
                "FutureWarning": [
                    538
                ],
                "keys": [
                    545,
                    546,
                    578,
                    549,
                    550,
                    552,
                    600,
                    565,
                    568,
                    571,
                    542,
                    575
                ],
                "match_axis_length": [
                    560,
                    546,
                    543
                ],
                "any_callable": [
                    557,
                    549
                ],
                "any": [
                    549,
                    550,
                    551
                ],
                "callable": [
                    549
                ],
                "g": [
                    549,
                    550,
                    552,
                    565,
                    568
                ],
                "dict": [
                    667,
                    549
                ],
                "any_groupers": [
                    550,
                    559
                ],
                "any_arraylike": [
                    558,
                    551
                ],
                "DataFrame": [
                    563
                ],
                "all_in_columns_index": [
                    568,
                    570,
                    564
                ],
                "all": [
                    568,
                    564
                ],
                "obj.columns": [
                    565
                ],
                "obj.index.names": [
                    568,
                    565
                ],
                "levels": [
                    576,
                    578,
                    600
                ],
                "groupings": [
                    580,
                    650,
                    652,
                    654,
                    655,
                    658
                ],
                "_is_label_like": [
                    585
                ],
                "obj._data.items.get_loc": [
                    587
                ],
                "obj._data.items": [
                    587
                ],
                "obj._data": [
                    587
                ],
                "Exception": [
                    588,
                    597
                ],
                "id": [
                    596
                ],
                "gpr": [
                    609,
                    610,
                    612,
                    613,
                    646,
                    615,
                    616,
                    647,
                    618,
                    638,
                    623,
                    596,
                    628,
                    600,
                    602,
                    603,
                    606,
                    607
                ],
                "gpr.name": [
                    603,
                    596
                ],
                "i": [
                    600
                ],
                "enumerate": [
                    600
                ],
                "zip": [
                    600
                ],
                "is_in_obj": [
                    602
                ],
                "exclusions.append": [
                    618,
                    611,
                    604
                ],
                "is_in_axis": [
                    606
                ],
                "obj._check_label_or_level_ambiguity": [
                    609
                ],
                "obj._is_level_reference": [
                    612
                ],
                "gpr.key": [
                    616,
                    618
                ],
                "obj.shape": [
                    628,
                    623
                ],
                "ping": [
                    650,
                    635
                ],
                "groupings.append": [
                    650,
                    655
                ],
                "np.array": [
                    655
                ],
                "np.intp": [
                    655
                ],
                "mutated": [
                    658
                ],
                "val": [
                    663
                ],
                "grouper.get": [
                    668
                ],
                "grouper.index.equals": [
                    670
                ],
                "grouper.index": [
                    670
                ],
                "grouper._values": [
                    671
                ],
                "_values": [
                    673
                ],
                "grouper.reindex": [
                    673
                ]
            },
            "filtered_variables_in_file": {
                "_attributes": [
                    95
                ],
                "kwargs.get": [
                    98
                ],
                "kwargs": [
                    98
                ],
                "cls": [
                    101,
                    102
                ],
                "TimeGrouper": [
                    101
                ],
                "__new__": [
                    102
                ],
                "self.key": [
                    165,
                    166,
                    105,
                    137,
                    157
                ],
                "self": [
                    105,
                    106,
                    107,
                    108,
                    109,
                    111,
                    112,
                    113,
                    114,
                    115,
                    119,
                    134,
                    135,
                    136,
                    137,
                    138,
                    139,
                    140,
                    143,
                    157,
                    161,
                    162,
                    165,
                    166,
                    168,
                    171,
                    178,
                    179,
                    180,
                    193,
                    195,
                    197,
                    199,
                    200,
                    201,
                    205,
                    209,
                    210,
                    211,
                    214,
                    258,
                    259,
                    260,
                    261,
                    262,
                    263,
                    264,
                    265,
                    266,
                    270,
                    273,
                    284,
                    285,
                    287,
                    288,
                    293,
                    298,
                    299,
                    300,
                    301,
                    302,
                    305,
                    306,
                    308,
                    309,
                    312,
                    314,
                    315,
                    317,
                    321,
                    323,
                    325,
                    330,
                    332,
                    337,
                    338,
                    342,
                    344,
                    345,
                    347,
                    349,
                    350,
                    354,
                    356,
                    361,
                    362,
                    363,
                    364,
                    366,
                    369,
                    372,
                    379,
                    384,
                    385,
                    387,
                    392,
                    393,
                    394,
                    398,
                    399,
                    400,
                    404,
                    405,
                    406,
                    409,
                    411,
                    412,
                    413,
                    415,
                    416,
                    417,
                    418,
                    422
                ],
                "key": [
                    514,
                    515,
                    524,
                    525,
                    529,
                    539,
                    541,
                    542,
                    545,
                    166,
                    168,
                    173,
                    174,
                    175,
                    574,
                    585,
                    587,
                    474,
                    476,
                    105,
                    503,
                    506,
                    507,
                    508,
                    511
                ],
                "self.level": [
                    259,
                    106,
                    139,
                    179,
                    180,
                    157
                ],
                "level": [
                    641,
                    259,
                    278,
                    279,
                    280,
                    281,
                    282,
                    285,
                    288,
                    561,
                    180,
                    185,
                    186,
                    189,
                    190,
                    573,
                    575,
                    576,
                    578,
                    461,
                    471,
                    472,
                    600,
                    474,
                    476,
                    477,
                    483,
                    484,
                    613,
                    486,
                    106,
                    492,
                    493,
                    495,
                    497,
                    502
                ],
                "self.freq": [
                    107
                ],
                "freq": [
                    107
                ],
                "self.axis": [
                    178,
                    138,
                    108,
                    197
                ],
                "axis": [
                    673,
                    675,
                    457,
                    108,
                    623,
                    628,
                    670
                ],
                "self.sort": [
                    193,
                    263,
                    140,
                    109,
                    399,
                    315,
                    415
                ],
                "sort": [
                    193,
                    642,
                    325,
                    263,
                    109,
                    658
                ],
                "self.grouper": [
                    384,
                    385,
                    387,
                    260,
                    135,
                    143,
                    273,
                    411,
                    412,
                    413,
                    287,
                    288,
                    415,
                    162,
                    293,
                    168,
                    298,
                    301,
                    302,
                    305,
                    306,
                    308,
                    309,
                    312,
                    314,
                    315,
                    317,
                    321,
                    323,
                    325,
                    200,
                    201,
                    332,
                    205,
                    337,
                    338,
                    342,
                    344,
                    345,
                    347,
                    349,
                    350,
                    354,
                    356,
                    361,
                    362,
                    363,
                    364,
                    366,
                    111,
                    119
                ],
                "self.obj": [
                    199,
                    136,
                    135,
                    264,
                    298,
                    301,
                    143,
                    112,
                    306
                ],
                "self.indexer": [
                    113,
                    195
                ],
                "self.binner": [
                    114,
                    143
                ],
                "self._grouper": [
                    161,
                    162,
                    115,
                    171
                ],
                "self._set_grouper": [
                    134
                ],
                "obj": [
                    515,
                    134,
                    264,
                    652,
                    639,
                    529,
                    659,
                    169,
                    171,
                    173,
                    175,
                    178,
                    563,
                    565,
                    567,
                    568,
                    197,
                    199,
                    457,
                    587,
                    596,
                    607,
                    609,
                    610,
                    612,
                    493,
                    623,
                    628,
                    507,
                    509,
                    511
                ],
                "exclusions": [
                    611,
                    581,
                    135,
                    618,
                    659,
                    604
                ],
                "_get_grouper": [
                    135
                ],
                "validate": [
                    608,
                    141
                ],
                "ABCSeries": [
                    169
                ],
                "ax": [
                    193,
                    195,
                    196,
                    200,
                    171,
                    175,
                    178,
                    184,
                    185,
                    186,
                    189
                ],
                "self._grouper.take": [
                    171
                ],
                "obj.index": [
                    565,
                    568,
                    171,
                    493
                ],
                "obj._info_axis": [
                    173
                ],
                "Index": [
                    416,
                    674,
                    552,
                    269,
                    175,
                    655,
                    342,
                    186
                ],
                "obj._get_axis": [
                    457,
                    178
                ],
                "MultiIndex": [
                    184,
                    272,
                    470
                ],
                "ax._get_level_number": [
                    185
                ],
                "ax._get_level_values": [
                    186
                ],
                "ax.names": [
                    186
                ],
                "ax.name": [
                    189
                ],
                "ax.is_monotonic": [
                    193
                ],
                "indexer": [
                    195,
                    196,
                    197
                ],
                "ax.argsort": [
                    195
                ],
                "ax.take": [
                    196
                ],
                "obj.take": [
                    197
                ],
                "self.grouper.groups": [
                    205
                ],
                "attrs_list": [
                    208,
                    213
                ],
                "attr_name": [
                    209,
                    210,
                    211
                ],
                "self._attributes": [
                    210
                ],
                "attrs": [
                    213,
                    215
                ],
                "join": [
                    213
                ],
                "cls_name": [
                    214,
                    215
                ],
                "self.__class__.__name__": [
                    214
                ],
                "self.__class__": [
                    214
                ],
                "self.name": [
                    416,
                    258,
                    299,
                    300,
                    270,
                    305,
                    306,
                    369,
                    345,
                    284,
                    285
                ],
                "name": [
                    640,
                    258,
                    610,
                    611,
                    613,
                    619,
                    269,
                    621,
                    603,
                    604
                ],
                "_convert_grouper": [
                    260
                ],
                "index": [
                    260,
                    262,
                    280,
                    282,
                    285,
                    287
                ],
                "grouper": [
                    260,
                    269,
                    270,
                    272,
                    273,
                    658,
                    659,
                    667,
                    668,
                    669,
                    670,
                    671,
                    673,
                    674,
                    675,
                    677,
                    679,
                    298,
                    300,
                    302,
                    507,
                    509,
                    511
                ],
                "self.all_grouper": [
                    314,
                    261,
                    398,
                    399
                ],
                "self.index": [
                    350,
                    347,
                    422,
                    262
                ],
                "self.observed": [
                    265
                ],
                "observed": [
                    265,
                    322,
                    315,
                    643
                ],
                "self.in_axis": [
                    266
                ],
                "in_axis": [
                    610,
                    644,
                    613,
                    266,
                    619,
                    621,
                    603
                ],
                "Series": [
                    674,
                    552,
                    269,
                    342,
                    567,
                    669
                ],
                "grouper.name": [
                    270
                ],
                "grouper.values": [
                    273
                ],
                "index.names": [
                    280,
                    282,
                    285
                ],
                "index.names.index": [
                    282
                ],
                "self._labels": [
                    321,
                    417,
                    392,
                    394,
                    409,
                    287
                ],
                "self._group_index": [
                    418,
                    330,
                    404,
                    406,
                    409,
                    287
                ],
                "index._get_grouper_for_level": [
                    287
                ],
                "Grouper": [
                    616,
                    506,
                    293,
                    550
                ],
                "_": [
                    298
                ],
                "self.grouper._get_grouper": [
                    298
                ],
                "grouper.result_index.name": [
                    300
                ],
                "grouper.result_index": [
                    300
                ],
                "self.grouper.obj": [
                    301
                ],
                "grouper._get_grouper": [
                    302
                ],
                "com.asarray_tuplesafe": [
                    571,
                    309
                ],
                "com": [
                    571,
                    309
                ],
                "is_categorical_dtype": [
                    312,
                    623
                ],
                "recode_for_groupby": [
                    314
                ],
                "categories": [
                    328,
                    332,
                    317
                ],
                "self.grouper.categories": [
                    317
                ],
                "self.grouper.codes": [
                    321,
                    323
                ],
                "codes": [
                    323,
                    324,
                    326,
                    328,
                    332
                ],
                "algorithms.unique1d": [
                    323
                ],
                "algorithms": [
                    323,
                    415
                ],
                "self.grouper.ordered": [
                    332,
                    325
                ],
                "np.sort": [
                    326
                ],
                "np": [
                    674,
                    326,
                    328,
                    552,
                    655,
                    342
                ],
                "np.arange": [
                    328
                ],
                "CategoricalIndex": [
                    330
                ],
                "Categorical.from_codes": [
                    331,
                    422
                ],
                "Categorical": [
                    331,
                    422
                ],
                "Grouping": [
                    337,
                    636,
                    646,
                    655
                ],
                "self.grouper.grouper": [
                    338
                ],
                "ExtensionArray": [
                    342
                ],
                "np.ndarray": [
                    552,
                    674,
                    342
                ],
                "t": [
                    345,
                    346
                ],
                "self.index.map": [
                    347
                ],
                "errmsg": [
                    352,
                    357
                ],
                "pprint_thing": [
                    354
                ],
                "is_datetime64_dtype": [
                    362
                ],
                "self.grouper.astype": [
                    363,
                    366
                ],
                "is_timedelta64_dtype": [
                    364
                ],
                "self.indices": [
                    372
                ],
                "_labels": [
                    374
                ],
                "_group_index": [
                    375
                ],
                "self.group_index": [
                    400,
                    379,
                    422,
                    399
                ],
                "BaseGrouper": [
                    384,
                    514,
                    411,
                    658
                ],
                "self.grouper.indices": [
                    385
                ],
                "values": [
                    387,
                    388
                ],
                "ensure_categorical": [
                    387
                ],
                "values._reverse_indexer": [
                    388
                ],
                "cache_readonly": [
                    420,
                    396,
                    381
                ],
                "self._make_labels": [
                    393,
                    405
                ],
                "recode_from_groupby": [
                    399
                ],
                "labels": [
                    417,
                    412,
                    415
                ],
                "self.grouper.label_info": [
                    412
                ],
                "uniques": [
                    416,
                    418,
                    413,
                    415
                ],
                "self.grouper.result_index": [
                    413
                ],
                "algorithms.factorize": [
                    415
                ],
                "self.index.groupby": [
                    422
                ],
                "self.labels": [
                    422
                ],
                "group_axis": [
                    546,
                    457,
                    658,
                    470,
                    503,
                    476,
                    637
                ],
                "is_list_like": [
                    483,
                    471
                ],
                "is_scalar": [
                    474,
                    663
                ],
                "group_axis.get_level_values": [
                    476
                ],
                "nlevels": [
                    484,
                    485,
                    487
                ],
                "obj.index.name": [
                    493
                ],
                "binner": [
                    507
                ],
                "key._get_grouper": [
                    507
                ],
                "key.key": [
                    508,
                    511
                ],
                "is_tuple": [
                    524,
                    525,
                    527
                ],
                "all_hashable": [
                    529,
                    530,
                    525
                ],
                "is_hashable": [
                    525
                ],
                "issubset": [
                    529
                ],
                "msg": [
                    538,
                    533
                ],
                "warnings.warn": [
                    538
                ],
                "warnings": [
                    538
                ],
                "keys": [
                    545,
                    546,
                    578,
                    549,
                    550,
                    552,
                    600,
                    565,
                    568,
                    571,
                    542,
                    575
                ],
                "match_axis_length": [
                    560,
                    546,
                    543
                ],
                "any_callable": [
                    557,
                    549
                ],
                "g": [
                    549,
                    550,
                    552,
                    565,
                    568
                ],
                "any_groupers": [
                    550,
                    559
                ],
                "any_arraylike": [
                    558,
                    551
                ],
                "DataFrame": [
                    563
                ],
                "all_in_columns_index": [
                    568,
                    570,
                    564
                ],
                "obj.columns": [
                    565
                ],
                "obj.index.names": [
                    568,
                    565
                ],
                "levels": [
                    576,
                    578,
                    600
                ],
                "groupings": [
                    580,
                    650,
                    652,
                    654,
                    655,
                    658
                ],
                "_is_label_like": [
                    585
                ],
                "obj._data.items.get_loc": [
                    587
                ],
                "obj._data.items": [
                    587
                ],
                "obj._data": [
                    587
                ],
                "gpr": [
                    609,
                    610,
                    612,
                    613,
                    646,
                    615,
                    616,
                    647,
                    618,
                    638,
                    623,
                    596,
                    628,
                    600,
                    602,
                    603,
                    606,
                    607
                ],
                "gpr.name": [
                    603,
                    596
                ],
                "i": [
                    600
                ],
                "is_in_obj": [
                    602
                ],
                "exclusions.append": [
                    618,
                    611,
                    604
                ],
                "is_in_axis": [
                    606
                ],
                "obj._check_label_or_level_ambiguity": [
                    609
                ],
                "obj._is_level_reference": [
                    612
                ],
                "gpr.key": [
                    616,
                    618
                ],
                "obj.shape": [
                    628,
                    623
                ],
                "ping": [
                    650,
                    635
                ],
                "groupings.append": [
                    650,
                    655
                ],
                "np.array": [
                    655
                ],
                "np.intp": [
                    655
                ],
                "mutated": [
                    658
                ],
                "val": [
                    663
                ],
                "grouper.get": [
                    668
                ],
                "grouper.index.equals": [
                    670
                ],
                "grouper.index": [
                    670
                ],
                "grouper._values": [
                    671
                ],
                "_values": [
                    673
                ],
                "grouper.reindex": [
                    673
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/groupby/test_groupby.py",
                "test_function": "test_groupby_axis_1",
                "test_function_code": "@pytest.mark.parametrize(\"group_name\", [\"x\", [\"x\"]])\ndef test_groupby_axis_1(group_name):\n    # GH 27614\n    df = pd.DataFrame(\n        np.arange(12).reshape(3, 4), index=[0, 1, 0], columns=[10, 20, 10, 20]\n    )\n    df.index.name = \"y\"\n    df.columns.name = \"x\"\n\n    results = df.groupby(group_name, axis=1).sum()\n    expected = df.T.groupby(group_name).sum().T\n    assert_frame_equal(results, expected)\n\n    # test on MI column\n    iterables = [[\"bar\", \"baz\", \"foo\"], [\"one\", \"two\"]]\n    mi = pd.MultiIndex.from_product(iterables=iterables, names=[\"x\", \"x1\"])\n    df = pd.DataFrame(np.arange(18).reshape(3, 6), index=[0, 1, 0], columns=mi)\n    results = df.groupby(group_name, axis=1).sum()\n    expected = df.T.groupby(group_name).sum().T\n    assert_frame_equal(results, expected)",
                "test_error": "KeyError: 'x'",
                "full_test_error": "group_name = 'x'\n\n    @pytest.mark.parametrize(\"group_name\", [\"x\", [\"x\"]])\n    def test_groupby_axis_1(group_name):\n        # GH 27614\n        df = pd.DataFrame(\n            np.arange(12).reshape(3, 4), index=[0, 1, 0], columns=[10, 20, 10, 20]\n        )\n        df.index.name = \"y\"\n        df.columns.name = \"x\"\n    \n>       results = df.groupby(group_name, axis=1).sum()\n\npandas/tests/groupby/test_groupby.py:1874: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/generic.py:7847: in groupby\n    return groupby(\npandas/core/groupby/groupby.py:2476: in groupby\n    return klass(obj, by, **kwds)\npandas/core/groupby/groupby.py:385: in __init__\n    grouper, exclusions, obj = _get_grouper(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nobj = x  10  20  10  20\ny                \n0   0   1   2   3\n1   4   5   6   7\n0   8   9  10  11\nkey = 'x', axis = 1, level = None, sort = True, observed = False\nmutated = False, validate = True\n\n    def _get_grouper(\n        obj,\n        key=None,\n        axis=0,\n        level=None,\n        sort=True,\n        observed=False,\n        mutated=False,\n        validate=True,\n    ):\n        \"\"\"\n        create and return a BaseGrouper, which is an internal\n        mapping of how to create the grouper indexers.\n        This may be composed of multiple Grouping objects, indicating\n        multiple groupers\n    \n        Groupers are ultimately index mappings. They can originate as:\n        index mappings, keys to columns, functions, or Groupers\n    \n        Groupers enable local references to axis,level,sort, while\n        the passed in axis, level, and sort are 'global'.\n    \n        This routine tries to figure out what the passing in references\n        are and then creates a Grouping for each one, combined into\n        a BaseGrouper.\n    \n        If observed & we have a categorical grouper, only show the observed\n        values\n    \n        If validate, then check for key/level overlaps\n    \n        \"\"\"\n        group_axis = obj._get_axis(axis)\n    \n        # validate that the passed single level is compatible with the passed\n        # axis of the object\n        if level is not None:\n            # TODO: These if-block and else-block are almost same.\n            # MultiIndex instance check is removable, but it seems that there are\n            # some processes only for non-MultiIndex in else-block,\n            # eg. `obj.index.name != level`. We have to consider carefully whether\n            # these are applicable for MultiIndex. Even if these are applicable,\n            # we need to check if it makes no side effect to subsequent processes\n            # on the outside of this condition.\n            # (GH 17621)\n            if isinstance(group_axis, MultiIndex):\n                if is_list_like(level) and len(level) == 1:\n                    level = level[0]\n    \n                if key is None and is_scalar(level):\n                    # Get the level values from group_axis\n                    key = group_axis.get_level_values(level)\n                    level = None\n    \n            else:\n                # allow level to be a length-one list-like object\n                # (e.g., level=[0])\n                # GH 13901\n                if is_list_like(level):\n                    nlevels = len(level)\n                    if nlevels == 1:\n                        level = level[0]\n                    elif nlevels == 0:\n                        raise ValueError(\"No group keys passed!\")\n                    else:\n                        raise ValueError(\"multiple levels only valid with MultiIndex\")\n    \n                if isinstance(level, str):\n                    if obj.index.name != level:\n                        raise ValueError(\n                            \"level name {} is not the name of the index\".format(level)\n                        )\n                elif level > 0 or level < -1:\n                    raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n    \n                # NOTE: `group_axis` and `group_axis.get_level_values(level)`\n                # are same in this section.\n                level = None\n                key = group_axis\n    \n        # a passed-in Grouper, directly convert\n        if isinstance(key, Grouper):\n            binner, grouper, obj = key._get_grouper(obj, validate=False)\n            if key.key is None:\n                return grouper, [], obj\n            else:\n                return grouper, {key.key}, obj\n    \n        # already have a BaseGrouper, just return it\n        elif isinstance(key, BaseGrouper):\n            return key, [], obj\n    \n        # In the future, a tuple key will always mean an actual key,\n        # not an iterable of keys. In the meantime, we attempt to provide\n        # a warning. We can assume that the user wanted a list of keys when\n        # the key is not in the index. We just have to be careful with\n        # unhashable elements of `key`. Any unhashable elements implies that\n        # they wanted a list of keys.\n        # https://github.com/pandas-dev/pandas/issues/18314\n        is_tuple = isinstance(key, tuple)\n        all_hashable = is_tuple and is_hashable(key)\n    \n        if is_tuple:\n            if (\n                all_hashable and key not in obj and set(key).issubset(obj)\n            ) or not all_hashable:\n                # column names ('a', 'b') -> ['a', 'b']\n                # arrays like (a, b) -> [a, b]\n                msg = (\n                    \"Interpreting tuple 'by' as a list of keys, rather than \"\n                    \"a single key. Use 'by=[...]' instead of 'by=(...)'. In \"\n                    \"the future, a tuple will always mean a single key.\"\n                )\n                warnings.warn(msg, FutureWarning, stacklevel=5)\n                key = list(key)\n    \n        if not isinstance(key, list):\n            keys = [key]\n            match_axis_length = False\n        else:\n            keys = key\n            match_axis_length = len(keys) == len(group_axis)\n    \n        # what are we after, exactly?\n        any_callable = any(callable(g) or isinstance(g, dict) for g in keys)\n        any_groupers = any(isinstance(g, Grouper) for g in keys)\n        any_arraylike = any(\n            isinstance(g, (list, tuple, Series, Index, np.ndarray)) for g in keys\n        )\n    \n        # is this an index replacement?\n        if (\n            not any_callable\n            and not any_arraylike\n            and not any_groupers\n            and match_axis_length\n            and level is None\n        ):\n            if isinstance(obj, DataFrame):\n                all_in_columns_index = all(\n                    g in obj.columns or g in obj.index.names for g in keys\n                )\n            elif isinstance(obj, Series):\n                all_in_columns_index = all(g in obj.index.names for g in keys)\n    \n            if not all_in_columns_index:\n                keys = [com.asarray_tuplesafe(keys)]\n    \n        if isinstance(level, (tuple, list)):\n            if key is None:\n                keys = [None] * len(level)\n            levels = level\n        else:\n            levels = [level] * len(keys)\n    \n        groupings = []\n        exclusions = []\n    \n        # if the actual grouper should be obj[key]\n        def is_in_axis(key):\n            if not _is_label_like(key):\n                try:\n                    obj._data.items.get_loc(key)\n                except Exception:\n                    return False\n    \n            return True\n    \n        # if the grouper is obj[name]\n        def is_in_obj(gpr):\n            try:\n                return id(gpr) == id(obj[gpr.name])\n            except Exception:\n                return False\n    \n        for i, (gpr, level) in enumerate(zip(keys, levels)):\n    \n            if is_in_obj(gpr):  # df.groupby(df['name'])\n                in_axis, name = True, gpr.name\n                exclusions.append(name)\n    \n            elif is_in_axis(gpr):  # df.groupby('name')\n                if gpr in obj:\n                    if validate:\n                        obj._check_label_or_level_ambiguity(gpr)\n                    in_axis, name, gpr = True, gpr, obj[gpr]\n                    exclusions.append(name)\n                elif obj._is_level_reference(gpr):\n                    in_axis, name, level, gpr = False, None, gpr, None\n                else:\n>                   raise KeyError(gpr)\nE                   KeyError: 'x'\n\npandas/core/groupby/grouper.py:615: KeyError",
                "traceback": "pandas/core/generic.py:7847: in groupby\n    return groupby(\npandas/core/groupby/groupby.py:2476: in groupby\n    return klass(obj, by, **kwds)\npandas/core/groupby/groupby.py:385: in __init__\n    grouper, exclusions, obj = _get_grouper(",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nobj = x  10  20  10  20\ny                \n0   0   1   2   3\n1   4   5   6   7\n0   8   9  10  11\nkey = 'x', axis = 1, level = None, sort = True, observed = False\nmutated = False, validate = True\n\n    def _get_grouper(\n        obj,\n        key=None,\n        axis=0,\n        level=None,\n        sort=True,\n        observed=False,\n        mutated=False,\n        validate=True,\n    ):\n        \"\"\"\n        create and return a BaseGrouper, which is an internal\n        mapping of how to create the grouper indexers.\n        This may be composed of multiple Grouping objects, indicating\n        multiple groupers\n    \n        Groupers are ultimately index mappings. They can originate as:\n        index mappings, keys to columns, functions, or Groupers\n    \n        Groupers enable local references to axis,level,sort, while\n        the passed in axis, level, and sort are 'global'.\n    \n        This routine tries to figure out what the passing in references\n        are and then creates a Grouping for each one, combined into\n        a BaseGrouper.\n    \n        If observed & we have a categorical grouper, only show the observed\n        values\n    \n        If validate, then check for key/level overlaps\n    \n        \"\"\"\n        group_axis = obj._get_axis(axis)\n    \n        # validate that the passed single level is compatible with the passed\n        # axis of the object\n        if level is not None:\n            # TODO: These if-block and else-block are almost same.\n            # MultiIndex instance check is removable, but it seems that there are\n            # some processes only for non-MultiIndex in else-block,\n            # eg. `obj.index.name != level`. We have to consider carefully whether\n            # these are applicable for MultiIndex. Even if these are applicable,\n            # we need to check if it makes no side effect to subsequent processes\n            # on the outside of this condition.\n            # (GH 17621)\n            if isinstance(group_axis, MultiIndex):\n                if is_list_like(level) and len(level) == 1:\n                    level = level[0]\n    \n                if key is None and is_scalar(level):\n                    # Get the level values from group_axis\n                    key = group_axis.get_level_values(level)\n                    level = None\n    \n            else:\n                # allow level to be a length-one list-like object\n                # (e.g., level=[0])\n                # GH 13901\n                if is_list_like(level):\n                    nlevels = len(level)\n                    if nlevels == 1:\n                        level = level[0]\n                    elif nlevels == 0:\n                        raise ValueError(\"No group keys passed!\")\n                    else:\n                        raise ValueError(\"multiple levels only valid with MultiIndex\")\n    \n                if isinstance(level, str):\n                    if obj.index.name != level:\n                        raise ValueError(\n                            \"level name {} is not the name of the index\".format(level)\n                        )\n                elif level > 0 or level < -1:\n                    raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n    \n                # NOTE: `group_axis` and `group_axis.get_level_values(level)`\n                # are same in this section.\n                level = None\n                key = group_axis\n    \n        # a passed-in Grouper, directly convert\n        if isinstance(key, Grouper):\n            binner, grouper, obj = key._get_grouper(obj, validate=False)\n            if key.key is None:\n                return grouper, [], obj\n            else:\n                return grouper, {key.key}, obj\n    \n        # already have a BaseGrouper, just return it\n        elif isinstance(key, BaseGrouper):\n            return key, [], obj\n    \n        # In the future, a tuple key will always mean an actual key,\n        # not an iterable of keys. In the meantime, we attempt to provide\n        # a warning. We can assume that the user wanted a list of keys when\n        # the key is not in the index. We just have to be careful with\n        # unhashable elements of `key`. Any unhashable elements implies that\n        # they wanted a list of keys.\n        # https://github.com/pandas-dev/pandas/issues/18314\n        is_tuple = isinstance(key, tuple)\n        all_hashable = is_tuple and is_hashable(key)\n    \n        if is_tuple:\n            if (\n                all_hashable and key not in obj and set(key).issubset(obj)\n            ) or not all_hashable:\n                # column names ('a', 'b') -> ['a', 'b']\n                # arrays like (a, b) -> [a, b]\n                msg = (\n                    \"Interpreting tuple 'by' as a list of keys, rather than \"\n                    \"a single key. Use 'by=[...]' instead of 'by=(...)'. In \"\n                    \"the future, a tuple will always mean a single key.\"\n                )\n                warnings.warn(msg, FutureWarning, stacklevel=5)\n                key = list(key)\n    \n        if not isinstance(key, list):\n            keys = [key]\n            match_axis_length = False\n        else:\n            keys = key\n            match_axis_length = len(keys) == len(group_axis)\n    \n        # what are we after, exactly?\n        any_callable = any(callable(g) or isinstance(g, dict) for g in keys)\n        any_groupers = any(isinstance(g, Grouper) for g in keys)\n        any_arraylike = any(\n            isinstance(g, (list, tuple, Series, Index, np.ndarray)) for g in keys\n        )\n    \n        # is this an index replacement?\n        if (\n            not any_callable\n            and not any_arraylike\n            and not any_groupers\n            and match_axis_length\n            and level is None\n        ):\n            if isinstance(obj, DataFrame):\n                all_in_columns_index = all(\n                    g in obj.columns or g in obj.index.names for g in keys\n                )\n            elif isinstance(obj, Series):\n                all_in_columns_index = all(g in obj.index.names for g in keys)\n    \n            if not all_in_columns_index:\n                keys = [com.asarray_tuplesafe(keys)]\n    \n        if isinstance(level, (tuple, list)):\n            if key is None:\n                keys = [None] * len(level)\n            levels = level\n        else:\n            levels = [level] * len(keys)\n    \n        groupings = []\n        exclusions = []\n    \n        # if the actual grouper should be obj[key]\n        def is_in_axis(key):\n            if not _is_label_like(key):\n                try:\n                    obj._data.items.get_loc(key)\n                except Exception:\n                    return False\n    \n            return True\n    \n        # if the grouper is obj[name]\n        def is_in_obj(gpr):\n            try:\n                return id(gpr) == id(obj[gpr.name])\n            except Exception:\n                return False\n    \n        for i, (gpr, level) in enumerate(zip(keys, levels)):\n    \n            if is_in_obj(gpr):  # df.groupby(df['name'])\n                in_axis, name = True, gpr.name\n                exclusions.append(name)\n    \n            elif is_in_axis(gpr):  # df.groupby('name')\n                if gpr in obj:\n                    if validate:\n                        obj._check_label_or_level_ambiguity(gpr)\n                    in_axis, name, gpr = True, gpr, obj[gpr]\n                    exclusions.append(name)\n                elif obj._is_level_reference(gpr):\n                    in_axis, name, level, gpr = False, None, gpr, None\n                else:\n>                   raise KeyError(gpr)\nE                   KeyError: 'x'\n\npandas/core/groupby/grouper.py:615: KeyError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('group_name', ['x', ['x']])"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/groupby/test_groupby.py",
                "test_function": "test_groupby_axis_1",
                "test_function_code": "@pytest.mark.parametrize(\"group_name\", [\"x\", [\"x\"]])\ndef test_groupby_axis_1(group_name):\n    # GH 27614\n    df = pd.DataFrame(\n        np.arange(12).reshape(3, 4), index=[0, 1, 0], columns=[10, 20, 10, 20]\n    )\n    df.index.name = \"y\"\n    df.columns.name = \"x\"\n\n    results = df.groupby(group_name, axis=1).sum()\n    expected = df.T.groupby(group_name).sum().T\n    assert_frame_equal(results, expected)\n\n    # test on MI column\n    iterables = [[\"bar\", \"baz\", \"foo\"], [\"one\", \"two\"]]\n    mi = pd.MultiIndex.from_product(iterables=iterables, names=[\"x\", \"x1\"])\n    df = pd.DataFrame(np.arange(18).reshape(3, 6), index=[0, 1, 0], columns=mi)\n    results = df.groupby(group_name, axis=1).sum()\n    expected = df.T.groupby(group_name).sum().T\n    assert_frame_equal(results, expected)",
                "test_error": "KeyError: 'x'",
                "full_test_error": "group_name = ['x']\n\n    @pytest.mark.parametrize(\"group_name\", [\"x\", [\"x\"]])\n    def test_groupby_axis_1(group_name):\n        # GH 27614\n        df = pd.DataFrame(\n            np.arange(12).reshape(3, 4), index=[0, 1, 0], columns=[10, 20, 10, 20]\n        )\n        df.index.name = \"y\"\n        df.columns.name = \"x\"\n    \n>       results = df.groupby(group_name, axis=1).sum()\n\npandas/tests/groupby/test_groupby.py:1874: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/generic.py:7847: in groupby\n    return groupby(\npandas/core/groupby/groupby.py:2476: in groupby\n    return klass(obj, by, **kwds)\npandas/core/groupby/groupby.py:385: in __init__\n    grouper, exclusions, obj = _get_grouper(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nobj = x  10  20  10  20\ny                \n0   0   1   2   3\n1   4   5   6   7\n0   8   9  10  11\nkey = ['x'], axis = 1, level = None, sort = True, observed = False\nmutated = False, validate = True\n\n    def _get_grouper(\n        obj,\n        key=None,\n        axis=0,\n        level=None,\n        sort=True,\n        observed=False,\n        mutated=False,\n        validate=True,\n    ):\n        \"\"\"\n        create and return a BaseGrouper, which is an internal\n        mapping of how to create the grouper indexers.\n        This may be composed of multiple Grouping objects, indicating\n        multiple groupers\n    \n        Groupers are ultimately index mappings. They can originate as:\n        index mappings, keys to columns, functions, or Groupers\n    \n        Groupers enable local references to axis,level,sort, while\n        the passed in axis, level, and sort are 'global'.\n    \n        This routine tries to figure out what the passing in references\n        are and then creates a Grouping for each one, combined into\n        a BaseGrouper.\n    \n        If observed & we have a categorical grouper, only show the observed\n        values\n    \n        If validate, then check for key/level overlaps\n    \n        \"\"\"\n        group_axis = obj._get_axis(axis)\n    \n        # validate that the passed single level is compatible with the passed\n        # axis of the object\n        if level is not None:\n            # TODO: These if-block and else-block are almost same.\n            # MultiIndex instance check is removable, but it seems that there are\n            # some processes only for non-MultiIndex in else-block,\n            # eg. `obj.index.name != level`. We have to consider carefully whether\n            # these are applicable for MultiIndex. Even if these are applicable,\n            # we need to check if it makes no side effect to subsequent processes\n            # on the outside of this condition.\n            # (GH 17621)\n            if isinstance(group_axis, MultiIndex):\n                if is_list_like(level) and len(level) == 1:\n                    level = level[0]\n    \n                if key is None and is_scalar(level):\n                    # Get the level values from group_axis\n                    key = group_axis.get_level_values(level)\n                    level = None\n    \n            else:\n                # allow level to be a length-one list-like object\n                # (e.g., level=[0])\n                # GH 13901\n                if is_list_like(level):\n                    nlevels = len(level)\n                    if nlevels == 1:\n                        level = level[0]\n                    elif nlevels == 0:\n                        raise ValueError(\"No group keys passed!\")\n                    else:\n                        raise ValueError(\"multiple levels only valid with MultiIndex\")\n    \n                if isinstance(level, str):\n                    if obj.index.name != level:\n                        raise ValueError(\n                            \"level name {} is not the name of the index\".format(level)\n                        )\n                elif level > 0 or level < -1:\n                    raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n    \n                # NOTE: `group_axis` and `group_axis.get_level_values(level)`\n                # are same in this section.\n                level = None\n                key = group_axis\n    \n        # a passed-in Grouper, directly convert\n        if isinstance(key, Grouper):\n            binner, grouper, obj = key._get_grouper(obj, validate=False)\n            if key.key is None:\n                return grouper, [], obj\n            else:\n                return grouper, {key.key}, obj\n    \n        # already have a BaseGrouper, just return it\n        elif isinstance(key, BaseGrouper):\n            return key, [], obj\n    \n        # In the future, a tuple key will always mean an actual key,\n        # not an iterable of keys. In the meantime, we attempt to provide\n        # a warning. We can assume that the user wanted a list of keys when\n        # the key is not in the index. We just have to be careful with\n        # unhashable elements of `key`. Any unhashable elements implies that\n        # they wanted a list of keys.\n        # https://github.com/pandas-dev/pandas/issues/18314\n        is_tuple = isinstance(key, tuple)\n        all_hashable = is_tuple and is_hashable(key)\n    \n        if is_tuple:\n            if (\n                all_hashable and key not in obj and set(key).issubset(obj)\n            ) or not all_hashable:\n                # column names ('a', 'b') -> ['a', 'b']\n                # arrays like (a, b) -> [a, b]\n                msg = (\n                    \"Interpreting tuple 'by' as a list of keys, rather than \"\n                    \"a single key. Use 'by=[...]' instead of 'by=(...)'. In \"\n                    \"the future, a tuple will always mean a single key.\"\n                )\n                warnings.warn(msg, FutureWarning, stacklevel=5)\n                key = list(key)\n    \n        if not isinstance(key, list):\n            keys = [key]\n            match_axis_length = False\n        else:\n            keys = key\n            match_axis_length = len(keys) == len(group_axis)\n    \n        # what are we after, exactly?\n        any_callable = any(callable(g) or isinstance(g, dict) for g in keys)\n        any_groupers = any(isinstance(g, Grouper) for g in keys)\n        any_arraylike = any(\n            isinstance(g, (list, tuple, Series, Index, np.ndarray)) for g in keys\n        )\n    \n        # is this an index replacement?\n        if (\n            not any_callable\n            and not any_arraylike\n            and not any_groupers\n            and match_axis_length\n            and level is None\n        ):\n            if isinstance(obj, DataFrame):\n                all_in_columns_index = all(\n                    g in obj.columns or g in obj.index.names for g in keys\n                )\n            elif isinstance(obj, Series):\n                all_in_columns_index = all(g in obj.index.names for g in keys)\n    \n            if not all_in_columns_index:\n                keys = [com.asarray_tuplesafe(keys)]\n    \n        if isinstance(level, (tuple, list)):\n            if key is None:\n                keys = [None] * len(level)\n            levels = level\n        else:\n            levels = [level] * len(keys)\n    \n        groupings = []\n        exclusions = []\n    \n        # if the actual grouper should be obj[key]\n        def is_in_axis(key):\n            if not _is_label_like(key):\n                try:\n                    obj._data.items.get_loc(key)\n                except Exception:\n                    return False\n    \n            return True\n    \n        # if the grouper is obj[name]\n        def is_in_obj(gpr):\n            try:\n                return id(gpr) == id(obj[gpr.name])\n            except Exception:\n                return False\n    \n        for i, (gpr, level) in enumerate(zip(keys, levels)):\n    \n            if is_in_obj(gpr):  # df.groupby(df['name'])\n                in_axis, name = True, gpr.name\n                exclusions.append(name)\n    \n            elif is_in_axis(gpr):  # df.groupby('name')\n                if gpr in obj:\n                    if validate:\n                        obj._check_label_or_level_ambiguity(gpr)\n                    in_axis, name, gpr = True, gpr, obj[gpr]\n                    exclusions.append(name)\n                elif obj._is_level_reference(gpr):\n                    in_axis, name, level, gpr = False, None, gpr, None\n                else:\n>                   raise KeyError(gpr)\nE                   KeyError: 'x'\n\npandas/core/groupby/grouper.py:615: KeyError",
                "traceback": "pandas/core/generic.py:7847: in groupby\n    return groupby(\npandas/core/groupby/groupby.py:2476: in groupby\n    return klass(obj, by, **kwds)\npandas/core/groupby/groupby.py:385: in __init__\n    grouper, exclusions, obj = _get_grouper(",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nobj = x  10  20  10  20\ny                \n0   0   1   2   3\n1   4   5   6   7\n0   8   9  10  11\nkey = ['x'], axis = 1, level = None, sort = True, observed = False\nmutated = False, validate = True\n\n    def _get_grouper(\n        obj,\n        key=None,\n        axis=0,\n        level=None,\n        sort=True,\n        observed=False,\n        mutated=False,\n        validate=True,\n    ):\n        \"\"\"\n        create and return a BaseGrouper, which is an internal\n        mapping of how to create the grouper indexers.\n        This may be composed of multiple Grouping objects, indicating\n        multiple groupers\n    \n        Groupers are ultimately index mappings. They can originate as:\n        index mappings, keys to columns, functions, or Groupers\n    \n        Groupers enable local references to axis,level,sort, while\n        the passed in axis, level, and sort are 'global'.\n    \n        This routine tries to figure out what the passing in references\n        are and then creates a Grouping for each one, combined into\n        a BaseGrouper.\n    \n        If observed & we have a categorical grouper, only show the observed\n        values\n    \n        If validate, then check for key/level overlaps\n    \n        \"\"\"\n        group_axis = obj._get_axis(axis)\n    \n        # validate that the passed single level is compatible with the passed\n        # axis of the object\n        if level is not None:\n            # TODO: These if-block and else-block are almost same.\n            # MultiIndex instance check is removable, but it seems that there are\n            # some processes only for non-MultiIndex in else-block,\n            # eg. `obj.index.name != level`. We have to consider carefully whether\n            # these are applicable for MultiIndex. Even if these are applicable,\n            # we need to check if it makes no side effect to subsequent processes\n            # on the outside of this condition.\n            # (GH 17621)\n            if isinstance(group_axis, MultiIndex):\n                if is_list_like(level) and len(level) == 1:\n                    level = level[0]\n    \n                if key is None and is_scalar(level):\n                    # Get the level values from group_axis\n                    key = group_axis.get_level_values(level)\n                    level = None\n    \n            else:\n                # allow level to be a length-one list-like object\n                # (e.g., level=[0])\n                # GH 13901\n                if is_list_like(level):\n                    nlevels = len(level)\n                    if nlevels == 1:\n                        level = level[0]\n                    elif nlevels == 0:\n                        raise ValueError(\"No group keys passed!\")\n                    else:\n                        raise ValueError(\"multiple levels only valid with MultiIndex\")\n    \n                if isinstance(level, str):\n                    if obj.index.name != level:\n                        raise ValueError(\n                            \"level name {} is not the name of the index\".format(level)\n                        )\n                elif level > 0 or level < -1:\n                    raise ValueError(\"level > 0 or level < -1 only valid with MultiIndex\")\n    \n                # NOTE: `group_axis` and `group_axis.get_level_values(level)`\n                # are same in this section.\n                level = None\n                key = group_axis\n    \n        # a passed-in Grouper, directly convert\n        if isinstance(key, Grouper):\n            binner, grouper, obj = key._get_grouper(obj, validate=False)\n            if key.key is None:\n                return grouper, [], obj\n            else:\n                return grouper, {key.key}, obj\n    \n        # already have a BaseGrouper, just return it\n        elif isinstance(key, BaseGrouper):\n            return key, [], obj\n    \n        # In the future, a tuple key will always mean an actual key,\n        # not an iterable of keys. In the meantime, we attempt to provide\n        # a warning. We can assume that the user wanted a list of keys when\n        # the key is not in the index. We just have to be careful with\n        # unhashable elements of `key`. Any unhashable elements implies that\n        # they wanted a list of keys.\n        # https://github.com/pandas-dev/pandas/issues/18314\n        is_tuple = isinstance(key, tuple)\n        all_hashable = is_tuple and is_hashable(key)\n    \n        if is_tuple:\n            if (\n                all_hashable and key not in obj and set(key).issubset(obj)\n            ) or not all_hashable:\n                # column names ('a', 'b') -> ['a', 'b']\n                # arrays like (a, b) -> [a, b]\n                msg = (\n                    \"Interpreting tuple 'by' as a list of keys, rather than \"\n                    \"a single key. Use 'by=[...]' instead of 'by=(...)'. In \"\n                    \"the future, a tuple will always mean a single key.\"\n                )\n                warnings.warn(msg, FutureWarning, stacklevel=5)\n                key = list(key)\n    \n        if not isinstance(key, list):\n            keys = [key]\n            match_axis_length = False\n        else:\n            keys = key\n            match_axis_length = len(keys) == len(group_axis)\n    \n        # what are we after, exactly?\n        any_callable = any(callable(g) or isinstance(g, dict) for g in keys)\n        any_groupers = any(isinstance(g, Grouper) for g in keys)\n        any_arraylike = any(\n            isinstance(g, (list, tuple, Series, Index, np.ndarray)) for g in keys\n        )\n    \n        # is this an index replacement?\n        if (\n            not any_callable\n            and not any_arraylike\n            and not any_groupers\n            and match_axis_length\n            and level is None\n        ):\n            if isinstance(obj, DataFrame):\n                all_in_columns_index = all(\n                    g in obj.columns or g in obj.index.names for g in keys\n                )\n            elif isinstance(obj, Series):\n                all_in_columns_index = all(g in obj.index.names for g in keys)\n    \n            if not all_in_columns_index:\n                keys = [com.asarray_tuplesafe(keys)]\n    \n        if isinstance(level, (tuple, list)):\n            if key is None:\n                keys = [None] * len(level)\n            levels = level\n        else:\n            levels = [level] * len(keys)\n    \n        groupings = []\n        exclusions = []\n    \n        # if the actual grouper should be obj[key]\n        def is_in_axis(key):\n            if not _is_label_like(key):\n                try:\n                    obj._data.items.get_loc(key)\n                except Exception:\n                    return False\n    \n            return True\n    \n        # if the grouper is obj[name]\n        def is_in_obj(gpr):\n            try:\n                return id(gpr) == id(obj[gpr.name])\n            except Exception:\n                return False\n    \n        for i, (gpr, level) in enumerate(zip(keys, levels)):\n    \n            if is_in_obj(gpr):  # df.groupby(df['name'])\n                in_axis, name = True, gpr.name\n                exclusions.append(name)\n    \n            elif is_in_axis(gpr):  # df.groupby('name')\n                if gpr in obj:\n                    if validate:\n                        obj._check_label_or_level_ambiguity(gpr)\n                    in_axis, name, gpr = True, gpr, obj[gpr]\n                    exclusions.append(name)\n                elif obj._is_level_reference(gpr):\n                    in_axis, name, level, gpr = False, None, gpr, None\n                else:\n>                   raise KeyError(gpr)\nE                   KeyError: 'x'\n\npandas/core/groupby/grouper.py:615: KeyError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('group_name', ['x', ['x']])"
                ]
            }
        ]
    }
}