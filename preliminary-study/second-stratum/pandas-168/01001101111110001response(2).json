{
    "pandas": [
        {
            "bugID": 168,
            "bitvector": {
                "1.3.1": 0,
                "1.3.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.1.2": 1,
                "2.2.3": 0,
                "2.2.4": 1,
                "2.2.5": 1,
                "2.2.6": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "start_line": 425,
            "file_name": "pandas/core/groupby/grouper.py",
            "replace_code": "def _get_grouper(\n    obj,\n    key=None,\n    axis=0,\n    level=None,\n    sort=True,\n    observed=False,\n    mutated=False,\n    validate=True,\n):\n    import pandas as pd\n    import numpy as np\n    import warnings\n    group_axis = obj._get_axis(axis)\n    \n    if level is not None:\n        if isinstance(group_axis, pd.MultiIndex):\n            if np.ndim(level) == 0:\n                level = [level]\n        \n            if key is None and np.ndim(level) == 1:\n                key = group_axis.get_level_values(level[0])\n                level = None\n        else:\n            if np.ndim(level) == 0:\n                level = [level]\n            elif np.ndim(level) == 1:\n                level = level[0]\n            else:\n                raise ValueError(\n                    \"No group keys passed!\" if len(level) == 0 else \"Multiple levels only valid with MultiIndex\"\n                )\n    \n    if isinstance(key, pd.Grouper):\n        binner, grouper, obj = key._get_grouper(obj, validate=False) if key.key is None else (key._get_grouper(obj, validate=False), {key.key}, obj)\n        return grouper, [], obj\n    elif isinstance(key, pd.BaseGrouper):\n        return key, [], obj\n    \n    if isinstance(key, tuple):\n        if not hasattr(obj, \"shape\") or key not in obj or set(key).issubset(obj):\n            warnings.warn(\n                \"Interpreting tuple 'by' as a list of keys, rather than a single key. Use 'by=[...]' instead of 'by=(...)'. In the future, a tuple will always mean a single key.\",\n                FutureWarning,\n                stacklevel=5\n            )\n            key = list(key)\n    \n    if not isinstance(key, list):\n        keys = [key]\n        match_axis_length = False\n    else:\n        keys = key\n        match_axis_length = len(keys) == len(group_axis)\n    \n    groupings = []\n    exclusions = []\n    \n    for gpr, level in zip(keys, [level] * len(keys)):\n        if not _is_label_like(gpr):\n            if pd.core.indexes.base.IndexEngine.get_loc_scalar(gpr, obj._data.items) == -1:\n                raise ValueError(\"Key not found: \" + str(gpr))\n    \n    if len(groupings) == 0 and len(obj):\n        raise ValueError(\"No group keys passed!\")\n    elif len(groupings) == 0:\n        groupings.append(pd.Series(pd.array([], dtype=np.intp), index=pd.Index([], dtype=\"int\")))\n    \n    grouper = pd.BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)\n    return grouper, exclusions, obj"
        }
    ]
}