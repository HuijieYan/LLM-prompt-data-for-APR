{
    "pandas": [
        {
            "bugID": 101,
            "bitvector": {
                "1.3.1": 0,
                "1.3.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.1.2": 0,
                "2.2.3": 1,
                "2.2.4": 0,
                "2.2.5": 0,
                "2.2.6": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    import numpy as np\n    import pandas as pd\n    if pd.api.types.is_extension_array_dtype(dtype):\n        return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)\n    \n    if not isinstance(dtype, np.dtype):\n        dtype = pd.api.types.pandas_dtype(dtype)\n    \n    if np.issubdtype(dtype, np.integer) and pd.api.types.is_categorical_dtype(arr):\n        if pd.api.types.is_scalar_nan(arr):\n            return pd.array([pd.NA], dtype='Int64')\n    \n    if dtype.kind == 'O' and pd.api.types.is_string_dtype(dtype):\n        return pd.core.common.astype_str(arr.ravel(), skipna=skipna).reshape(arr.shape)\n    \n    elif pd.api.types.is_datetime64_dtype(arr):\n        if pd.api.types.is_object_dtype(dtype):\n            return pd.core.arrays.integer_array.ints_to_pydatetime(arr.view(np.int64))\n        elif dtype == np.int64:\n            return arr.view(dtype)\n        # allow frequency conversions\n        if dtype.kind == 'M':\n            return arr.astype(dtype)\n        raise TypeError(f\"cannot astype a datetimelike from [{arr.dtype}] to [{dtype}]\")\n    \n    elif pd.api.types.is_timedelta64_dtype(arr):\n        if pd.api.types.is_object_dtype(dtype):\n            return pd.core.arrays.integer_array.ints_to_pytimedelta(arr.view(np.int64))\n        elif dtype == np.int64:\n            return arr.view(dtype)\n        if dtype not in [np.int64, np.timedelta64]:\n            # allow frequency conversions\n            if dtype.kind == 'm':\n                mask = pd.isna(arr)\n                result = arr.astype(dtype).astype(np.float64)\n                result[mask] = np.nan\n                return result\n        elif dtype == np.timedelta64:\n            return arr.astype(np.timedelta64, copy=copy)\n        raise TypeError(f\"cannot astype a timedelta from [{arr.dtype}] to [{dtype}]\")\n    \n    elif np.issubdtype(arr.dtype, np.floating) and np.issubdtype(dtype, np.integer):\n        if not np.isfinite(arr).all():\n            raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n    \n    elif pd.api.types.is_object_dtype(arr):\n        if np.issubdtype(dtype.type, np.integer):\n            return pd.core.common.astype_intsafe(arr.ravel(), dtype).reshape(arr.shape)\n        # if we have a datetime/timedelta array of objects\n        # then coerce to a proper dtype and recall astype_nansafe\n        elif pd.api.types.is_datetime64_dtype(dtype):\n            return astype_nansafe(pd.to_datetime(arr).values, dtype, copy=copy)\n        elif pd.api.types.is_timedelta64_dtype(dtype):\n            return astype_nansafe(pd.to_timedelta(arr).values, dtype, copy=copy)\n    \n    if pd.api.types.is_datetime64_dtype(dtype):\n        msg = (\n            f\"The '{dtype}' dtype has no unit. Please pass in \"\n            f\"'{dtype}[ns]' instead.\"\n        )\n        raise ValueError(msg)\n    \n    if copy or pd.api.types.is_object_dtype(arr) or pd.api.types.is_object_dtype(dtype):\n        return arr.astype(dtype, copy=True)\n    \n    return arr.view(dtype)"
        }
    ]
}