{
    "pandas": [
        {
            "bugID": 101,
            "bitvector": {
                "1.3.1": 0,
                "1.3.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.1.2": 0,
                "2.2.3": 1,
                "2.2.4": 0,
                "2.2.5": 1,
                "2.2.6": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    import numpy as np\n    import pandas as pd\n    if is_extension_array_dtype(dtype):\n        return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)\n    \n    if not isinstance(dtype, np.dtype):\n        dtype = pd.api.types.pandas_dtype(dtype)\n    \n    if issubclass(dtype.type, str):\n        return np.asarray(arr, dtype=dtype)\n    \n    elif is_datetime64_dtype(arr):\n        if is_object_dtype(dtype):\n            return pd.to_datetime(arr, errors='coerce').values\n        elif dtype == np.int64:\n            return arr.view(dtype)\n        elif dtype.kind == \"M\":\n            return pd.to_datetime(arr).values.astype(dtype)\n        else:\n            raise TypeError(\"cannot astype a datetimelike\")\n    \n    elif is_timedelta64_dtype(arr):\n        if is_object_dtype(dtype):\n            return pd.to_timedelta(arr, errors='coerce').values\n        elif dtype == np.int64:\n            return arr.view(dtype)\n        elif dtype.kind == 'm':\n            result = arr.astype(dtype)\n            result[arr.isna()] = np.nan\n            return result\n        elif dtype == _TD_DTYPE:\n            return arr.astype(_TD_DTYPE, copy=copy)\n        else:\n            raise TypeError(\"cannot astype a timedelta\")\n    \n    elif np.issubdtype(arr.dtype, np.floating) and np.issubdtype(dtype, np.integer):\n        if not np.isfinite(arr).all():\n            raise ValueError(\"Cannot convert non-finite values (NA or inf) to integer\")\n    \n    elif is_object_dtype(arr):\n        if np.issubdtype(dtype.type, np.integer):\n            return arr.astype(dtype)\n        elif is_datetime64_dtype(dtype):\n            return astype_nansafe(pd.to_datetime(arr).values, dtype, copy=copy)\n        elif is_timedelta64_dtype(dtype):\n            return astype_nansafe(pd.to_timedelta(arr).values, dtype, copy=copy)\n    \n    if dtype.name in (\"datetime64\", \"timedelta64\"):\n        msg = (f\"The '{dtype.name}' dtype has no unit. Please pass in \"\n               f\"'{dtype.name}[ns]' instead.\")\n        raise ValueError(msg)\n    \n    if copy or is_object_dtype(arr) or is_object_dtype(dtype):\n        return arr.astype(dtype, copy=True)\n    \n    return arr.view(dtype)"
        }
    ]
}