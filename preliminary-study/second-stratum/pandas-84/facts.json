{
    "1.1.1": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # NOTE: This doesn't deal with hierarchical columns yet\n\n    index = data.index\n\n    clocs = [index._get_level_number(i) for i in clocs]\n\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    clevels = [index.levels[i] for i in clocs]\n    ccodes = [index.codes[i] for i in clocs]\n    cnames = [index.names[i] for i in clocs]\n    rlevels = [index.levels[i] for i in rlocs]\n    rcodes = [index.codes[i] for i in rlocs]\n    rnames = [index.names[i] for i in rlocs]\n\n    shape = [len(x) for x in clevels]\n    group_index = get_group_index(ccodes, shape, sort=False, xnull=False)\n\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, ccodes, xnull=False)\n\n    if rlocs == []:\n        # Everything is in clocs, so the dummy df has a regular index\n        dummy_index = Index(obs_ids, name=\"__placeholder__\")\n    else:\n        dummy_index = MultiIndex(\n            levels=rlevels + [obs_ids],\n            codes=rcodes + [comp_ids],\n            names=rnames + [\"__placeholder__\"],\n            verify_integrity=False,\n        )\n\n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        new_levels = clevels\n        new_names = cnames\n        new_codes = recons_codes\n    else:\n        if isinstance(data.columns, MultiIndex):\n            result = data\n            for i in range(len(clocs)):\n                val = clocs[i]\n                result = result.unstack(val, fill_value=fill_value)\n                clocs = [v if i > v else v - 1 for v in clocs]\n\n            return result\n\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        if isinstance(unstacked, Series):\n            unstcols = unstacked.index\n        else:\n            unstcols = unstacked.columns\n        new_levels = [unstcols.levels[0]] + clevels\n        new_names = [data.columns.name] + cnames\n\n        new_codes = [unstcols.codes[0]]\n        for rec in recons_codes:\n            new_codes.append(rec.take(unstcols.codes[-1]))\n\n    new_columns = MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )\n\n    if isinstance(unstacked, Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n\n    return unstacked\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/core/reshape/reshape.py",
    "1.3.2": [
        "unstack(obj, level, fill_value=None)"
    ],
    "2.1.1": [
        "    def test_unstack_tuplename_in_multiindex(self):\n        # GH 19966\n        idx = pd.MultiIndex.from_product(\n            [[\"a\", \"b\", \"c\"], [1, 2, 3]], names=[(\"A\", \"a\"), (\"B\", \"b\")]\n        )\n        df = pd.DataFrame({\"d\": [1] * 9, \"e\": [2] * 9}, index=idx)\n        result = df.unstack((\"A\", \"a\"))\n\n        expected = pd.DataFrame(\n            [[1, 1, 1, 2, 2, 2], [1, 1, 1, 2, 2, 2], [1, 1, 1, 2, 2, 2]],\n            columns=pd.MultiIndex.from_tuples(\n                [\n                    (\"d\", \"a\"),\n                    (\"d\", \"b\"),\n                    (\"d\", \"c\"),\n                    (\"e\", \"a\"),\n                    (\"e\", \"b\"),\n                    (\"e\", \"c\"),\n                ],\n                names=[None, (\"A\", \"a\")],\n            ),\n            index=pd.Index([1, 2, 3], name=(\"B\", \"b\")),\n        )\n        tm.assert_frame_equal(result, expected)"
    ],
    "2.1.2": [
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/frame/test_reshape.py"
    ],
    "2.2.1": [
        [
            "E           ValueError: 'A' is not in list",
            "E               KeyError: 'Level A not found'"
        ]
    ],
    "2.2.2": [
        [
            "self = MultiIndex([('a', 1),\n            ('a', 2),\n            ('a', 3),\n            ('b', 1),\n            ('b', 2),\n        ...('b', 3),\n            ('c', 1),\n            ('c', 2),\n            ('c', 3)],\n           names=[('A', 'a'), ('B', 'b')])\nlevel = 'A'\n\n    def _get_level_number(self, level) -> int:\n        count = self.names.count(level)\n        if (count > 1) and not is_integer(level):\n            raise ValueError(\n                f\"The name {level} occurs multiple times, use a level number\"\n            )\n        try:\n>           level = self.names.index(level)",
            "\npandas/core/indexes/multi.py:1286: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <pandas.tests.frame.test_reshape.TestDataFrameReshape object at 0x11bdbd3a0>\n\n    def test_unstack_tuplename_in_multiindex(self):\n        # GH 19966\n        idx = pd.MultiIndex.from_product(\n            [[\"a\", \"b\", \"c\"], [1, 2, 3]], names=[(\"A\", \"a\"), (\"B\", \"b\")]\n        )\n        df = pd.DataFrame({\"d\": [1] * 9, \"e\": [2] * 9}, index=idx)\n>       result = df.unstack((\"A\", \"a\"))\n\npandas/tests/frame/test_reshape.py:345: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/frame.py:6434: in unstack\n    return unstack(self, level, fill_value)\npandas/core/reshape/reshape.py:398: in unstack\n    return _unstack_multiple(obj, level, fill_value=fill_value)\npandas/core/reshape/reshape.py:320: in _unstack_multiple\n    clocs = [index._get_level_number(i) for i in clocs]\npandas/core/reshape/reshape.py:320: in <listcomp>\n    clocs = [index._get_level_number(i) for i in clocs]\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MultiIndex([('a', 1),\n            ('a', 2),\n            ('a', 3),\n            ('b', 1),\n            ('b', 2),\n        ...('b', 3),\n            ('c', 1),\n            ('c', 2),\n            ('c', 3)],\n           names=[('A', 'a'), ('B', 'b')])\nlevel = 'A'\n\n    def _get_level_number(self, level) -> int:\n        count = self.names.count(level)\n        if (count > 1) and not is_integer(level):\n            raise ValueError(\n                f\"The name {level} occurs multiple times, use a level number\"\n            )\n        try:\n            level = self.names.index(level)\n        except ValueError:\n            if not is_integer(level):\n>               raise KeyError(f\"Level {level} not found\")",
            "\npandas/core/indexes/multi.py:1289: KeyError"
        ]
    ],
    "2.2.3": [
        [
            {},
            {}
        ]
    ],
    "2.2.4": [
        [
            {},
            {}
        ]
    ],
    "2.2.5": [
        [
            {},
            {}
        ]
    ],
    "2.2.6": [
        [
            {},
            {}
        ]
    ],
    "3.1.1": [
        "MultiIndexed unstack with tuple names fails with KeyError\n"
    ],
    "3.1.2": [
        "In [8]: idx = pd.MultiIndex.from_product([['a', 'b', 'c'], [1, 2, 3]], names=[('A', 'a'), ('B', 'b')])\n\nIn [9]: s = pd.Series(1, index=idx)\n\nIn [10]: s\nOut[10]:\n(A, a)  (B, b)\na       1         1\n        2         1\n        3         1\nb       1         1\n        2         1\n        3         1\nc       1         1\n        2         1\n        3         1\ndtype: int64\n\nIn [11]: s.unstack((\"A\", \"a\"))\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n~/Envs/pandas-dev/lib/python3.6/site-packages/pandas/pandas/core/indexes/multi.py in _get_level_number(self, level)\n    749                                  'level number' % level)\n--> 750             level = self.names.index(level)\n    751         except ValueError:\n\nValueError: 'A' is not in list\n\nDuring handling of the above exception, another exception occurred:\n\nKeyError                                  Traceback (most recent call last)\n<ipython-input-11-1ce241b42d82> in <module>()\n----> 1 s.unstack((\"A\", \"a\"))\n\n~/Envs/pandas-dev/lib/python3.6/site-packages/pandas/pandas/core/series.py in unstack(self, level, fill_value)\n   2231         \"\"\"\n   2232         from pandas.core.reshape.reshape import unstack\n-> 2233         return unstack(self, level, fill_value)\n   2234\n   2235     # ----------------------------------------------------------------------\n\n~/Envs/pandas-dev/lib/python3.6/site-packages/pandas/pandas/core/reshape/reshape.py in unstack(obj, level, fill_value)\n    481             # _unstack_multiple only handles MultiIndexes,\n    482             # and isn't needed for a single level\n--> 483             return _unstack_multiple(obj, level, fill_value=fill_value)\n    484         else:\n    485             level = level[0]\n\n~/Envs/pandas-dev/lib/python3.6/site-packages/pandas/pandas/core/reshape/reshape.py in _unstack_multiple(data, clocs, fill_value)\n    315     index = data.index\n    316\n--> 317     clocs = [index._get_level_number(i) for i in clocs]\n    318\n    319     rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n~/Envs/pandas-dev/lib/python3.6/site-packages/pandas/pandas/core/reshape/reshape.py in <listcomp>(.0)\n    315     index = data.index\n    316\n--> 317     clocs = [index._get_level_number(i) for i in clocs]\n    318\n    319     rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n~/Envs/pandas-dev/lib/python3.6/site-packages/pandas/pandas/core/indexes/multi.py in _get_level_number(self, level)\n    751         except ValueError:\n    752             if not isinstance(level, int):\n--> 753                 raise KeyError('Level %s not found' % str(level))\n    754             elif level < 0:\n    755                 level += self.nlevels\n\nKeyError: 'Level A not found'\ncc @ibrahimsharaf, @toobaz does this look difficult?\n"
    ]
}