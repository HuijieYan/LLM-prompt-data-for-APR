{
    "pandas": [
        {
            "bugID": 112,
            "bitvector": {
                "1.3.1": 0,
                "1.3.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.1.2": 0,
                "2.2.3": 1,
                "2.2.4": 0,
                "2.2.5": 0,
                "2.2.6": 1,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.2.1": 0,
                "2.2.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "start_line": 907,
            "file_name": "pandas/core/indexes/interval.py",
            "replace_code": "def get_indexer(self, target: AnyArrayLike, method: Optional[str] = None, limit: Optional[int] = None, tolerance: Optional[Any] = None) -> np.ndarray:\n\n\n    self._check_method(method)\n    \n    if self.is_overlapping():\n        msg = (\n            \"cannot handle overlapping indices; use \"\n            \"IntervalIndex.get_indexer_non_unique\"\n        )\n        raise InvalidIndexError(msg)\n    \n    target_as_index = ensure_index(target)\n    \n    if isinstance(target_as_index, IntervalIndex):\n        # Handle CategoricalIndex made from an IntervalIndex\n        if target_as_index.is_type_compatible(self):\n            indexer = np.arange(len(self), dtype=\"intp\")\n        else:\n            indexer = np.repeat(np.intp(-1), len(target_as_index))\n    else:\n        # Handle other cases\n        indexer = super().get_indexer(target, method=method, limit=limit, tolerance=tolerance)\n    \n    return ensure_platform_int(indexer)"
        }
    ]
}