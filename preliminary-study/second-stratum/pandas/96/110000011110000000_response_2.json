{
    "pandas": [
        {
            "bugID": 96,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 857,
            "file_name": "pandas/tseries/offsets.py",
            "replace_code": "def apply(self, other):\n\n    if isinstance(other, pd.Timestamp):\n        business_hour_start = self.start\n        business_hour_end = self.end\n        business_hour_length = len(business_hour_start)\n        other_hour = other.hour\n        for idx in range(business_hour_length):\n            if business_hour_start[idx] <= other_hour < business_hour_end[idx]:\n                break\n    \n        bd, n = self.n, other\n        if n >= 0:\n            if other.time() in self.end or other.time() < business_hour_start[idx] or other.time() >= business_hour_end[idx]:\n                other = self._next_opening_time(other)\n        else:\n            if other.hour == business_hour_start[idx]:\n                other = other - pd.to_timedelta('1s')\n            elif other.time() >= business_hour_start[idx] and other.time() < business_hour_end[idx]:\n                other = other - pd.to_timedelta('1s')\n            else:\n                other = self._next_opening_time(other)\n                other = self._get_closing_time(other)\n    \n        businesshours = sum(self._get_business_hours_by_sec(st, en) for st, en in zip(business_hour_start, business_hour_end))\n        bd, r = divmod(abs(n * 60), businesshours // 60)\n        if n < 0:\n            bd, r = -bd, -r\n    \n        if bd != 0:\n            skip_bd = pd.DateOffset(n=bd, days=True)\n            if other.hour < business_hour_start[idx]:\n                prev_open = self._prev_opening_time(other)\n                remain = other - prev_open\n                other = prev_open + skip_bd + remain\n            else:\n                other = other + skip_bd\n    \n        bhour_remain = pd.to_timedelta(minutes=r)\n    \n        if n >= 0:\n            while bhour_remain != pd.to_timedelta(0):\n                bhour = (self._get_closing_time(self._prev_opening_time(other)) - other)\n                if bhour_remain < bhour:\n                    other += bhour_remain\n                    bhour_remain = pd.to_timedelta(0)\n                else:\n                    bhour_remain -= bhour\n                    other = self._next_opening_time(other + bhour)\n        else:\n            while bhour_remain != pd.to_timedelta(0):\n                bhour = self._next_opening_time(other) - other\n                if bhour_remain > bhour or (bhour_remain == bhour and nanosecond != 0):\n                    other += bhour_remain\n                    bhour_remain = pd.to_timedelta(0)\n                else:\n                    bhour_remain -= bhour\n                    other = self._get_closing_time(self._next_opening_time(other + bhour - pd.to_timedelta('1s')))\n    \n        return other\n    else:\n        raise ApplyTypeError(\"Only know how to combine business hour with datetime\")"
        }
    ]
}