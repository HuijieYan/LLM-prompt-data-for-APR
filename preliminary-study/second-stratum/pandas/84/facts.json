{
    "1.1.1": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # NOTE: This doesn't deal with hierarchical columns yet\n\n    index = data.index\n\n    clocs = [index._get_level_number(i) for i in clocs]\n\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    clevels = [index.levels[i] for i in clocs]\n    ccodes = [index.codes[i] for i in clocs]\n    cnames = [index.names[i] for i in clocs]\n    rlevels = [index.levels[i] for i in rlocs]\n    rcodes = [index.codes[i] for i in rlocs]\n    rnames = [index.names[i] for i in rlocs]\n\n    shape = [len(x) for x in clevels]\n    group_index = get_group_index(ccodes, shape, sort=False, xnull=False)\n\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, ccodes, xnull=False)\n\n    if rlocs == []:\n        # Everything is in clocs, so the dummy df has a regular index\n        dummy_index = Index(obs_ids, name=\"__placeholder__\")\n    else:\n        dummy_index = MultiIndex(\n            levels=rlevels + [obs_ids],\n            codes=rcodes + [comp_ids],\n            names=rnames + [\"__placeholder__\"],\n            verify_integrity=False,\n        )\n\n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        new_levels = clevels\n        new_names = cnames\n        new_codes = recons_codes\n    else:\n        if isinstance(data.columns, MultiIndex):\n            result = data\n            for i in range(len(clocs)):\n                val = clocs[i]\n                result = result.unstack(val, fill_value=fill_value)\n                clocs = [v if i > v else v - 1 for v in clocs]\n\n            return result\n\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        if isinstance(unstacked, Series):\n            unstcols = unstacked.index\n        else:\n            unstcols = unstacked.columns\n        new_levels = [unstcols.levels[0]] + clevels\n        new_names = [data.columns.name] + cnames\n\n        new_codes = [unstcols.codes[0]]\n        for rec in recons_codes:\n            new_codes.append(rec.take(unstcols.codes[-1]))\n\n    new_columns = MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )\n\n    if isinstance(unstacked, Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n\n    return unstacked\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs/repos/pandas_84/pandas/core/reshape/reshape.py",
    "1.3.2": [
        "unstack(obj, level, fill_value=None)"
    ],
    "1.4.1": [
        "    def test_unstack_tuplename_in_multiindex(self):\n        # GH 19966\n        idx = pd.MultiIndex.from_product(\n            [[\"a\", \"b\", \"c\"], [1, 2, 3]], names=[(\"A\", \"a\"), (\"B\", \"b\")]\n        )\n        df = pd.DataFrame({\"d\": [1] * 9, \"e\": [2] * 9}, index=idx)\n        result = df.unstack((\"A\", \"a\"))\n\n        expected = pd.DataFrame(\n            [[1, 1, 1, 2, 2, 2], [1, 1, 1, 2, 2, 2], [1, 1, 1, 2, 2, 2]],\n            columns=pd.MultiIndex.from_tuples(\n                [\n                    (\"d\", \"a\"),\n                    (\"d\", \"b\"),\n                    (\"d\", \"c\"),\n                    (\"e\", \"a\"),\n                    (\"e\", \"b\"),\n                    (\"e\", \"c\"),\n                ],\n                names=[None, (\"A\", \"a\")],\n            ),\n            index=pd.Index([1, 2, 3], name=(\"B\", \"b\")),\n        )\n        tm.assert_frame_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"unstack_idx, expected_values, expected_index, expected_columns\",\n        [\n            (\n                (\"A\", \"a\"),\n                [[1, 1, 2, 2], [1, 1, 2, 2], [1, 1, 2, 2], [1, 1, 2, 2]],\n                pd.MultiIndex.from_tuples(\n                    [(1, 3), (1, 4), (2, 3), (2, 4)], names=[\"B\", \"C\"]\n                ),\n                pd.MultiIndex.from_tuples(\n                    [(\"d\", \"a\"), (\"d\", \"b\"), (\"e\", \"a\"), (\"e\", \"b\")],\n                    names=[None, (\"A\", \"a\")],\n                ),\n            ),\n            (\n                ((\"A\", \"a\"), \"B\"),\n                [[1, 1, 1, 1, 2, 2, 2, 2], [1, 1, 1, 1, 2, 2, 2, 2]],\n                pd.Index([3, 4], name=\"C\"),\n                pd.MultiIndex.from_tuples(\n                    [\n                        (\"d\", \"a\", 1),\n                        (\"d\", \"a\", 2),\n                        (\"d\", \"b\", 1),\n                        (\"d\", \"b\", 2),\n                        (\"e\", \"a\", 1),\n                        (\"e\", \"a\", 2),\n                        (\"e\", \"b\", 1),\n                        (\"e\", \"b\", 2),\n                    ],\n                    names=[None, (\"A\", \"a\"), \"B\"],\n                ),\n            ),\n        ],\n    )\n    def test_unstack_mixed_type_name_in_multiindex(\n        self, unstack_idx, expected_values, expected_index, expected_columns\n    ):\n        # GH 19966\n        idx = pd.MultiIndex.from_product(\n            [[\"a\", \"b\"], [1, 2], [3, 4]], names=[(\"A\", \"a\"), \"B\", \"C\"]\n        )\n        df = pd.DataFrame({\"d\": [1] * 8, \"e\": [2] * 8}, index=idx)\n        result = df.unstack(unstack_idx)\n\n        expected = pd.DataFrame(\n            expected_values, columns=expected_columns, index=expected_index,\n        )\n        tm.assert_frame_equal(result, expected)"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs/repos/pandas_84/pandas/tests/frame/test_reshape.py",
        "/Volumes/SSD2T/bgp_envs/repos/pandas_84/pandas/tests/frame/test_reshape.py"
    ],
    "2.1.1": [
        [
            "E           ValueError: 'A' is not in list",
            "E               KeyError: 'Level A not found'"
        ],
        [
            "E           ValueError: 'A' is not in list",
            "E               KeyError: 'Level A not found'"
        ]
    ],
    "2.1.2": [
        [
            "self = MultiIndex([('a', 1),\n            ('a', 2),\n            ('a', 3),\n            ('b', 1),\n            ('b', 2),\n        ...('b', 3),\n            ('c', 1),\n            ('c', 2),\n            ('c', 3)],\n           names=[('A', 'a'), ('B', 'b')])\nlevel = 'A'\n\n    def _get_level_number(self, level) -> int:\n        count = self.names.count(level)\n        if (count > 1) and not is_integer(level):\n            raise ValueError(\n                f\"The name {level} occurs multiple times, use a level number\"\n            )\n        try:\n>           level = self.names.index(level)",
            "\npandas/core/indexes/multi.py:1286: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <pandas.tests.frame.test_reshape.TestDataFrameReshape object at 0x119862250>\n\n    def test_unstack_tuplename_in_multiindex(self):\n        # GH 19966\n        idx = pd.MultiIndex.from_product(\n            [[\"a\", \"b\", \"c\"], [1, 2, 3]], names=[(\"A\", \"a\"), (\"B\", \"b\")]\n        )\n        df = pd.DataFrame({\"d\": [1] * 9, \"e\": [2] * 9}, index=idx)\n>       result = df.unstack((\"A\", \"a\"))\n\npandas/tests/frame/test_reshape.py:345: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/frame.py:6434: in unstack\n    return unstack(self, level, fill_value)\npandas/core/reshape/reshape.py:398: in unstack\n    return _unstack_multiple(obj, level, fill_value=fill_value)\npandas/core/reshape/reshape.py:320: in _unstack_multiple\n    clocs = [index._get_level_number(i) for i in clocs]\npandas/core/reshape/reshape.py:320: in <listcomp>\n    clocs = [index._get_level_number(i) for i in clocs]\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MultiIndex([('a', 1),\n            ('a', 2),\n            ('a', 3),\n            ('b', 1),\n            ('b', 2),\n        ...('b', 3),\n            ('c', 1),\n            ('c', 2),\n            ('c', 3)],\n           names=[('A', 'a'), ('B', 'b')])\nlevel = 'A'\n\n    def _get_level_number(self, level) -> int:\n        count = self.names.count(level)\n        if (count > 1) and not is_integer(level):\n            raise ValueError(\n                f\"The name {level} occurs multiple times, use a level number\"\n            )\n        try:\n            level = self.names.index(level)\n        except ValueError:\n            if not is_integer(level):\n>               raise KeyError(f\"Level {level} not found\")",
            "\npandas/core/indexes/multi.py:1289: KeyError"
        ],
        [
            "self = MultiIndex([('a', 1, 3),\n            ('a', 1, 4),\n            ('a', 2, 3),\n            ('a', 2, 4),\n            ('b', ...),\n            ('b', 1, 4),\n            ('b', 2, 3),\n            ('b', 2, 4)],\n           names=[('A', 'a'), 'B', 'C'])\nlevel = 'A'\n\n    def _get_level_number(self, level) -> int:\n        count = self.names.count(level)\n        if (count > 1) and not is_integer(level):\n            raise ValueError(\n                f\"The name {level} occurs multiple times, use a level number\"\n            )\n        try:\n>           level = self.names.index(level)",
            "\npandas/core/indexes/multi.py:1286: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <pandas.tests.frame.test_reshape.TestDataFrameReshape object at 0x121f968b0>\nunstack_idx = ('A', 'a')\nexpected_values = [[1, 1, 2, 2], [1, 1, 2, 2], [1, 1, 2, 2], [1, 1, 2, 2]]\nexpected_index = MultiIndex([(1, 3),\n            (1, 4),\n            (2, 3),\n            (2, 4)],\n           names=['B', 'C'])\nexpected_columns = MultiIndex([('d', 'a'),\n            ('d', 'b'),\n            ('e', 'a'),\n            ('e', 'b')],\n           names=[None, ('A', 'a')])\n\n    @pytest.mark.parametrize(\n        \"unstack_idx, expected_values, expected_index, expected_columns\",\n        [\n            (\n                (\"A\", \"a\"),\n                [[1, 1, 2, 2], [1, 1, 2, 2], [1, 1, 2, 2], [1, 1, 2, 2]],\n                pd.MultiIndex.from_tuples(\n                    [(1, 3), (1, 4), (2, 3), (2, 4)], names=[\"B\", \"C\"]\n                ),\n                pd.MultiIndex.from_tuples(\n                    [(\"d\", \"a\"), (\"d\", \"b\"), (\"e\", \"a\"), (\"e\", \"b\")],\n                    names=[None, (\"A\", \"a\")],\n                ),\n            ),\n            (\n                ((\"A\", \"a\"), \"B\"),\n                [[1, 1, 1, 1, 2, 2, 2, 2], [1, 1, 1, 1, 2, 2, 2, 2]],\n                pd.Index([3, 4], name=\"C\"),\n                pd.MultiIndex.from_tuples(\n                    [\n                        (\"d\", \"a\", 1),\n                        (\"d\", \"a\", 2),\n                        (\"d\", \"b\", 1),\n                        (\"d\", \"b\", 2),\n                        (\"e\", \"a\", 1),\n                        (\"e\", \"a\", 2),\n                        (\"e\", \"b\", 1),\n                        (\"e\", \"b\", 2),\n                    ],\n                    names=[None, (\"A\", \"a\"), \"B\"],\n                ),\n            ),\n        ],\n    )\n    def test_unstack_mixed_type_name_in_multiindex(\n        self, unstack_idx, expected_values, expected_index, expected_columns\n    ):\n        # GH 19966\n        idx = pd.MultiIndex.from_product(\n            [[\"a\", \"b\"], [1, 2], [3, 4]], names=[(\"A\", \"a\"), \"B\", \"C\"]\n        )\n        df = pd.DataFrame({\"d\": [1] * 8, \"e\": [2] * 8}, index=idx)\n>       result = df.unstack(unstack_idx)\n\npandas/tests/frame/test_reshape.py:406: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/frame.py:6434: in unstack\n    return unstack(self, level, fill_value)\npandas/core/reshape/reshape.py:398: in unstack\n    return _unstack_multiple(obj, level, fill_value=fill_value)\npandas/core/reshape/reshape.py:320: in _unstack_multiple\n    clocs = [index._get_level_number(i) for i in clocs]\npandas/core/reshape/reshape.py:320: in <listcomp>\n    clocs = [index._get_level_number(i) for i in clocs]\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MultiIndex([('a', 1, 3),\n            ('a', 1, 4),\n            ('a', 2, 3),\n            ('a', 2, 4),\n            ('b', ...),\n            ('b', 1, 4),\n            ('b', 2, 3),\n            ('b', 2, 4)],\n           names=[('A', 'a'), 'B', 'C'])\nlevel = 'A'\n\n    def _get_level_number(self, level) -> int:\n        count = self.names.count(level)\n        if (count > 1) and not is_integer(level):\n            raise ValueError(\n                f\"The name {level} occurs multiple times, use a level number\"\n            )\n        try:\n            level = self.names.index(level)\n        except ValueError:\n            if not is_integer(level):\n>               raise KeyError(f\"Level {level} not found\")",
            "\npandas/core/indexes/multi.py:1289: KeyError"
        ]
    ],
    "2.1.3": [
        [
            {
                "clocs": "(('A', 'a'), 'B')",
                "data": "            d  e\n(A, a) B C      \na      1 3  1  2\n         4  1  2\n       2 3  1  2\n         4  1  2\nb      1 3  1  2\n         4  1  2\n       2 3  1  2\n         4  1  2",
                "data.index": "array of shape 8",
                "data.copy": "<bound method NDFrame.copy of             d  e\n(A, a) B C      \na      1 3  1  2\n         4  1  2\n       2 3  1  2\n         4  1  2\nb      1 3  1  2\n         4  1  2\n       2 3  1  2\n         4  1  2>",
                "data.columns": "Index(['d', 'e'], dtype='object')"
            },
            {
                "clocs": "[0, 1]",
                "index": "array of shape 8",
                "index._get_level_number": "<bound method MultiIndex._get_ ... names=[('A', 'a'), 'B', 'C'])>",
                "rlocs": "[2]",
                "index.nlevels": "3",
                "clevels": "[Index(['a', 'b'], dtype='object', name=('A', 'a')), Int64Index([1, 2], dtype='int64', name='B')]",
                "index.levels": "FrozenList([['a', 'b'], [1, 2], [3, 4]])",
                "ccodes": "[array([0, 0, 0, 0, 1, 1, 1, 1], dtype=int8), array([0, 0, 1, 1, 0, 0, 1, 1], dtype=int8)]",
                "index.codes": "FrozenList([[0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0, 1]])",
                "cnames": "[('A', 'a'), 'B']",
                "index.names": "FrozenList([('A', 'a'), 'B', 'C'])",
                "rlevels": "[Int64Index([3, 4], dtype='int64', name='C')]",
                "rcodes": "[array([0, 1, 0, 1, 0, 1, 0, 1], dtype=int8)]",
                "rnames": "['C']",
                "shape": "[2, 2]",
                "group_index": "array([0, 0, 1, 1, 2, 2, 3, 3])",
                "comp_ids": "array([0, 0, 1, 1, 2, 2, 3, 3])",
                "obs_ids": "array([0, 1, 2, 3])",
                "recons_codes": "[array([0, 0, 1, 1]), array([0, 1, 0, 1])]",
                "dummy_index": "array of shape 8",
                "dummy": "array of shape 8",
                "dummy.index": "array of shape 8",
                "unstacked": "array of shape 2",
                "dummy.unstack": "<bound method DataFrame.unstac ...  1  2\n4 3                1  2>",
                "new_levels": "[Index(['d', 'e'], dtype='object'), Index(['a', 'b'], dtype='object', name=('A', 'a')), Int64Index([1, 2], dtype='int64', name='B')]",
                "new_names": "[None, ('A', 'a'), 'B']",
                "new_codes": "[array([0, 0, 0, 0, 1, 1, 1, 1], dtype=int8), array([0, 0, 1, 1, 0, 0, 1, 1]), array([0, 1, 0, 1, 0, 1, 0, 1])]",
                "unstcols": "array of shape 8",
                "unstacked.index": "Int64Index([3, 4], dtype='int64', name='C')",
                "unstacked.columns": "array of shape 8",
                "unstcols.levels": "FrozenList([['d', 'e'], [0, 1, 2, 3]])",
                "unstcols.codes": "FrozenList([[0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 2, 3, 0, 1, 2, 3]])",
                "rec": "array([0, 1, 0, 1])",
                "new_columns": "array of shape 8"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "clocs": "tuple",
                "data": "DataFrame",
                "data.index": "MultiIndex",
                "data.copy": "method",
                "data.columns": "Index"
            },
            {
                "clocs": "list",
                "index": "MultiIndex",
                "index._get_level_number": "method",
                "rlocs": "list",
                "index.nlevels": "int",
                "clevels": "list",
                "index.levels": "FrozenList",
                "ccodes": "list",
                "index.codes": "FrozenList",
                "cnames": "list",
                "index.names": "FrozenList",
                "rlevels": "list",
                "rcodes": "list",
                "rnames": "list",
                "shape": "list",
                "group_index": "ndarray",
                "comp_ids": "ndarray",
                "obs_ids": "ndarray",
                "recons_codes": "list",
                "dummy_index": "MultiIndex",
                "dummy": "DataFrame",
                "dummy.index": "MultiIndex",
                "unstacked": "DataFrame",
                "dummy.unstack": "method",
                "new_levels": "list",
                "new_names": "list",
                "new_codes": "list",
                "unstcols": "MultiIndex",
                "unstacked.index": "Int64Index",
                "unstacked.columns": "MultiIndex",
                "unstcols.levels": "FrozenList",
                "unstcols.codes": "FrozenList",
                "rec": "ndarray",
                "new_columns": "MultiIndex"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "clocs": "('A', 'a')",
                "data": "array of shape 9",
                "data.index": "array of shape 9",
                "data.copy": "<bound method NDFrame.copy of  ...      1  2\n       3       1  2>",
                "data.columns": "Index(['d', 'e'], dtype='object')"
            },
            {
                "clocs": "[0]",
                "index": "array of shape 9",
                "index.names": "FrozenList([('A', 'a'), ('B', 'b')])",
                "index._get_level_number": "<bound method MultiIndex._get_ ... mes=[('A', 'a'), ('B', 'b')])>",
                "rlocs": "[1]",
                "index.nlevels": "2",
                "clevels": "[Index(['a', 'b', 'c'], dtype='object', name=('A', 'a'))]",
                "index.levels": "FrozenList([['a', 'b', 'c'], [1, 2, 3]])",
                "ccodes": "[array([0, 0, 0, 1, 1, 1, 2, 2, 2], dtype=int8)]",
                "index.codes": "FrozenList([[0, 0, 0, 1, 1, 1, 2, 2, 2], [0, 1, 2, 0, 1, 2, 0, 1, 2]])",
                "cnames": "[('A', 'a')]",
                "rlevels": "[Int64Index([1, 2, 3], dtype='int64', name=('B', 'b'))]",
                "rcodes": "[array([0, 1, 2, 0, 1, 2, 0, 1, 2], dtype=int8)]",
                "rnames": "[('B', 'b')]",
                "shape": "[3]",
                "group_index": "array([0, 0, 0, 1, 1, 1, 2, 2, 2])",
                "comp_ids": "array([0, 0, 0, 1, 1, 1, 2, 2, 2])",
                "obs_ids": "array([0, 1, 2])",
                "recons_codes": "[array([0, 1, 2])]",
                "dummy_index": "array of shape 9",
                "dummy": "array of shape 9",
                "dummy.index": "array of shape 9",
                "unstacked": "            d        e      \n('A', 'a')  a  b  c  a  b  c\n(B, b)                      \n1           1  1  1  2  2  2\n2           1  1  1  2  2  2\n3           1  1  1  2  2  2",
                "dummy.unstack": "<bound method DataFrame.unstac ... \n3      2                1  2>",
                "new_levels": "[Index(['d', 'e'], dtype='object'), Index(['a', 'b', 'c'], dtype='object', name=('A', 'a'))]",
                "new_names": "[None, ('A', 'a')]",
                "new_codes": "[array([0, 0, 0, 1, 1, 1], dtype=int8), array([0, 1, 2, 0, 1, 2])]",
                "unstcols": "MultiIndex([('d', 0),\n            ('d', 1),\n            ('d', 2),\n            ('e', 0),\n            ('e', 1),\n            ('e', 2)],\n           names=[None, '__placeholder__'])",
                "unstacked.index": "Int64Index([1, 2, 3], dtype='int64', name=('B', 'b'))",
                "unstacked.columns": "MultiIndex([('d', 'a'),\n            ('d', 'b'),\n            ('d', 'c'),\n            ('e', 'a'),\n            ('e', 'b'),\n            ('e', 'c')],\n           names=[None, ('A', 'a')])",
                "unstcols.levels": "FrozenList([['d', 'e'], [0, 1, 2]])",
                "unstcols.codes": "FrozenList([[0, 0, 0, 1, 1, 1], [0, 1, 2, 0, 1, 2]])",
                "rec": "array([0, 1, 2])",
                "new_columns": "MultiIndex([('d', 'a'),\n            ('d', 'b'),\n            ('d', 'c'),\n            ('e', 'a'),\n            ('e', 'b'),\n            ('e', 'c')],\n           names=[None, ('A', 'a')])"
            }
        ],
        [
            {
                "clocs": "('A', 'a')",
                "data": "            d  e\n(A, a) B C      \na      1 3  1  2\n         4  1  2\n       2 3  1  2\n         4  1  2\nb      1 3  1  2\n         4  1  2\n       2 3  1  2\n         4  1  2",
                "data.index": "array of shape 8",
                "data.copy": "<bound method NDFrame.copy of             d  e\n(A, a) B C      \na      1 3  1  2\n         4  1  2\n       2 3  1  2\n         4  1  2\nb      1 3  1  2\n         4  1  2\n       2 3  1  2\n         4  1  2>",
                "data.columns": "Index(['d', 'e'], dtype='object')"
            },
            {
                "clocs": "[0]",
                "index": "array of shape 8",
                "index.names": "FrozenList([('A', 'a'), 'B', 'C'])",
                "index._get_level_number": "<bound method MultiIndex._get_ ... names=[('A', 'a'), 'B', 'C'])>",
                "rlocs": "[1, 2]",
                "index.nlevels": "3",
                "clevels": "[Index(['a', 'b'], dtype='object', name=('A', 'a'))]",
                "index.levels": "FrozenList([['a', 'b'], [1, 2], [3, 4]])",
                "ccodes": "[array([0, 0, 0, 0, 1, 1, 1, 1], dtype=int8)]",
                "index.codes": "FrozenList([[0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0, 1]])",
                "cnames": "[('A', 'a')]",
                "rlevels": "[Int64Index([1, 2], dtype='int64', name='B'), Int64Index([3, 4], dtype='int64', name='C')]",
                "rcodes": "[array([0, 0, 1, 1, 0, 0, 1, 1], dtype=int8), array([0, 1, 0, 1, 0, 1, 0, 1], dtype=int8)]",
                "rnames": "['B', 'C']",
                "shape": "[2]",
                "group_index": "array([0, 0, 0, 0, 1, 1, 1, 1])",
                "comp_ids": "array([0, 0, 0, 0, 1, 1, 1, 1])",
                "obs_ids": "array([0, 1])",
                "recons_codes": "[array([0, 1])]",
                "dummy_index": "array of shape 8",
                "dummy": "array of shape 8",
                "dummy.index": "array of shape 8",
                "unstacked": "            d     e   \n('A', 'a')  a  b  a  b\nB C                   \n1 3         1  1  2  2\n  4         1  1  2  2\n2 3         1  1  2  2\n  4         1  1  2  2",
                "dummy.unstack": "<bound method DataFrame.unstac ...   2\n  4 1                1  2>",
                "new_levels": "[Index(['d', 'e'], dtype='object'), Index(['a', 'b'], dtype='object', name=('A', 'a'))]",
                "new_names": "[None, ('A', 'a')]",
                "new_codes": "[array([0, 0, 1, 1], dtype=int8), array([0, 1, 0, 1])]",
                "unstcols": "MultiIndex([('d', 0),\n            ('d', 1),\n            ('e', 0),\n            ('e', 1)],\n           names=[None, '__placeholder__'])",
                "unstacked.index": "MultiIndex([(1, 3),\n            (1, 4),\n            (2, 3),\n            (2, 4)],\n           names=['B', 'C'])",
                "unstacked.columns": "MultiIndex([('d', 'a'),\n            ('d', 'b'),\n            ('e', 'a'),\n            ('e', 'b')],\n           names=[None, ('A', 'a')])",
                "unstcols.levels": "FrozenList([['d', 'e'], [0, 1]])",
                "unstcols.codes": "FrozenList([[0, 0, 1, 1], [0, 1, 0, 1]])",
                "rec": "array([0, 1])",
                "new_columns": "MultiIndex([('d', 'a'),\n            ('d', 'b'),\n            ('e', 'a'),\n            ('e', 'b')],\n           names=[None, ('A', 'a')])"
            }
        ],
        [
            {
                "clocs": "(('A', 'a'), 'B')",
                "data": "            d  e\n(A, a) B C      \na      1 3  1  2\n         4  1  2\n       2 3  1  2\n         4  1  2\nb      1 3  1  2\n         4  1  2\n       2 3  1  2\n         4  1  2",
                "data.index": "array of shape 8",
                "data.copy": "<bound method NDFrame.copy of             d  e\n(A, a) B C      \na      1 3  1  2\n         4  1  2\n       2 3  1  2\n         4  1  2\nb      1 3  1  2\n         4  1  2\n       2 3  1  2\n         4  1  2>",
                "data.columns": "Index(['d', 'e'], dtype='object')"
            },
            {
                "clocs": "[0, 1]",
                "index": "array of shape 8",
                "index.names": "FrozenList([('A', 'a'), 'B', 'C'])",
                "index._get_level_number": "<bound method MultiIndex._get_ ... names=[('A', 'a'), 'B', 'C'])>",
                "rlocs": "[2]",
                "index.nlevels": "3",
                "clevels": "[Index(['a', 'b'], dtype='object', name=('A', 'a')), Int64Index([1, 2], dtype='int64', name='B')]",
                "index.levels": "FrozenList([['a', 'b'], [1, 2], [3, 4]])",
                "ccodes": "[array([0, 0, 0, 0, 1, 1, 1, 1], dtype=int8), array([0, 0, 1, 1, 0, 0, 1, 1], dtype=int8)]",
                "index.codes": "FrozenList([[0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0, 1]])",
                "cnames": "[('A', 'a'), 'B']",
                "rlevels": "[Int64Index([3, 4], dtype='int64', name='C')]",
                "rcodes": "[array([0, 1, 0, 1, 0, 1, 0, 1], dtype=int8)]",
                "rnames": "['C']",
                "shape": "[2, 2]",
                "group_index": "array([0, 0, 1, 1, 2, 2, 3, 3])",
                "comp_ids": "array([0, 0, 1, 1, 2, 2, 3, 3])",
                "obs_ids": "array([0, 1, 2, 3])",
                "recons_codes": "[array([0, 0, 1, 1]), array([0, 1, 0, 1])]",
                "dummy_index": "array of shape 8",
                "dummy": "array of shape 8",
                "dummy.index": "array of shape 8",
                "unstacked": "array of shape 2",
                "dummy.unstack": "<bound method DataFrame.unstac ...  1  2\n4 3                1  2>",
                "new_levels": "[Index(['d', 'e'], dtype='object'), Index(['a', 'b'], dtype='object', name=('A', 'a')), Int64Index([1, 2], dtype='int64', name='B')]",
                "new_names": "[None, ('A', 'a'), 'B']",
                "new_codes": "[array([0, 0, 0, 0, 1, 1, 1, 1], dtype=int8), array([0, 0, 1, 1, 0, 0, 1, 1]), array([0, 1, 0, 1, 0, 1, 0, 1])]",
                "unstcols": "array of shape 8",
                "unstacked.index": "Int64Index([3, 4], dtype='int64', name='C')",
                "unstacked.columns": "array of shape 8",
                "unstcols.levels": "FrozenList([['d', 'e'], [0, 1, 2, 3]])",
                "unstcols.codes": "FrozenList([[0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 2, 3, 0, 1, 2, 3]])",
                "rec": "array([0, 1, 0, 1])",
                "new_columns": "array of shape 8"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "clocs": "tuple",
                "data": "DataFrame",
                "data.index": "MultiIndex",
                "data.copy": "method",
                "data.columns": "Index"
            },
            {
                "clocs": "list",
                "index": "MultiIndex",
                "index.names": "FrozenList",
                "index._get_level_number": "method",
                "rlocs": "list",
                "index.nlevels": "int",
                "clevels": "list",
                "index.levels": "FrozenList",
                "ccodes": "list",
                "index.codes": "FrozenList",
                "cnames": "list",
                "rlevels": "list",
                "rcodes": "list",
                "rnames": "list",
                "shape": "list",
                "group_index": "ndarray",
                "comp_ids": "ndarray",
                "obs_ids": "ndarray",
                "recons_codes": "list",
                "dummy_index": "MultiIndex",
                "dummy": "DataFrame",
                "dummy.index": "MultiIndex",
                "unstacked": "DataFrame",
                "dummy.unstack": "method",
                "new_levels": "list",
                "new_names": "list",
                "new_codes": "list",
                "unstcols": "MultiIndex",
                "unstacked.index": "Int64Index",
                "unstacked.columns": "MultiIndex",
                "unstcols.levels": "FrozenList",
                "unstcols.codes": "FrozenList",
                "rec": "ndarray",
                "new_columns": "MultiIndex"
            }
        ],
        [
            {
                "clocs": "tuple",
                "data": "DataFrame",
                "data.index": "MultiIndex",
                "data.copy": "method",
                "data.columns": "Index"
            },
            {
                "clocs": "list",
                "index": "MultiIndex",
                "index.names": "FrozenList",
                "index._get_level_number": "method",
                "rlocs": "list",
                "index.nlevels": "int",
                "clevels": "list",
                "index.levels": "FrozenList",
                "ccodes": "list",
                "index.codes": "FrozenList",
                "cnames": "list",
                "rlevels": "list",
                "rcodes": "list",
                "rnames": "list",
                "shape": "list",
                "group_index": "ndarray",
                "comp_ids": "ndarray",
                "obs_ids": "ndarray",
                "recons_codes": "list",
                "dummy_index": "MultiIndex",
                "dummy": "DataFrame",
                "dummy.index": "MultiIndex",
                "unstacked": "DataFrame",
                "dummy.unstack": "method",
                "new_levels": "list",
                "new_names": "list",
                "new_codes": "list",
                "unstcols": "MultiIndex",
                "unstacked.index": "MultiIndex",
                "unstacked.columns": "MultiIndex",
                "unstcols.levels": "FrozenList",
                "unstcols.codes": "FrozenList",
                "rec": "ndarray",
                "new_columns": "MultiIndex"
            }
        ],
        [
            {
                "clocs": "tuple",
                "data": "DataFrame",
                "data.index": "MultiIndex",
                "data.copy": "method",
                "data.columns": "Index"
            },
            {
                "clocs": "list",
                "index": "MultiIndex",
                "index.names": "FrozenList",
                "index._get_level_number": "method",
                "rlocs": "list",
                "index.nlevels": "int",
                "clevels": "list",
                "index.levels": "FrozenList",
                "ccodes": "list",
                "index.codes": "FrozenList",
                "cnames": "list",
                "rlevels": "list",
                "rcodes": "list",
                "rnames": "list",
                "shape": "list",
                "group_index": "ndarray",
                "comp_ids": "ndarray",
                "obs_ids": "ndarray",
                "recons_codes": "list",
                "dummy_index": "MultiIndex",
                "dummy": "DataFrame",
                "dummy.index": "MultiIndex",
                "unstacked": "DataFrame",
                "dummy.unstack": "method",
                "new_levels": "list",
                "new_names": "list",
                "new_codes": "list",
                "unstcols": "MultiIndex",
                "unstacked.index": "Int64Index",
                "unstacked.columns": "MultiIndex",
                "unstcols.levels": "FrozenList",
                "unstcols.codes": "FrozenList",
                "rec": "ndarray",
                "new_columns": "MultiIndex"
            }
        ]
    ],
    "3.1.1": [
        "MultiIndexed unstack with tuple names fails with KeyError\n"
    ],
    "3.1.2": [
        "In [8]: idx = pd.MultiIndex.from_product([['a', 'b', 'c'], [1, 2, 3]], names=[('A', 'a'), ('B', 'b')])\n\nIn [9]: s = pd.Series(1, index=idx)\n\nIn [10]: s\nOut[10]:\n(A, a)  (B, b)\na       1         1\n        2         1\n        3         1\nb       1         1\n        2         1\n        3         1\nc       1         1\n        2         1\n        3         1\ndtype: int64\n\nIn [11]: s.unstack((\"A\", \"a\"))\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n~/Envs/pandas-dev/lib/python3.6/site-packages/pandas/pandas/core/indexes/multi.py in _get_level_number(self, level)\n    749                                  'level number' % level)\n--> 750             level = self.names.index(level)\n    751         except ValueError:\n\nValueError: 'A' is not in list\n\nDuring handling of the above exception, another exception occurred:\n\nKeyError                                  Traceback (most recent call last)\n<ipython-input-11-1ce241b42d82> in <module>()\n----> 1 s.unstack((\"A\", \"a\"))\n\n~/Envs/pandas-dev/lib/python3.6/site-packages/pandas/pandas/core/series.py in unstack(self, level, fill_value)\n   2231         \"\"\"\n   2232         from pandas.core.reshape.reshape import unstack\n-> 2233         return unstack(self, level, fill_value)\n   2234\n   2235     # ----------------------------------------------------------------------\n\n~/Envs/pandas-dev/lib/python3.6/site-packages/pandas/pandas/core/reshape/reshape.py in unstack(obj, level, fill_value)\n    481             # _unstack_multiple only handles MultiIndexes,\n    482             # and isn't needed for a single level\n--> 483             return _unstack_multiple(obj, level, fill_value=fill_value)\n    484         else:\n    485             level = level[0]\n\n~/Envs/pandas-dev/lib/python3.6/site-packages/pandas/pandas/core/reshape/reshape.py in _unstack_multiple(data, clocs, fill_value)\n    315     index = data.index\n    316\n--> 317     clocs = [index._get_level_number(i) for i in clocs]\n    318\n    319     rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n~/Envs/pandas-dev/lib/python3.6/site-packages/pandas/pandas/core/reshape/reshape.py in <listcomp>(.0)\n    315     index = data.index\n    316\n--> 317     clocs = [index._get_level_number(i) for i in clocs]\n    318\n    319     rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n~/Envs/pandas-dev/lib/python3.6/site-packages/pandas/pandas/core/indexes/multi.py in _get_level_number(self, level)\n    751         except ValueError:\n    752             if not isinstance(level, int):\n--> 753                 raise KeyError('Level %s not found' % str(level))\n    754             elif level < 0:\n    755                 level += self.nlevels\n\nKeyError: 'Level A not found'\ncc @ibrahimsharaf, @toobaz does this look difficult?\n"
    ]
}