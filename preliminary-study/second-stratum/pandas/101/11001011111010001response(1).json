{
    "pandas": [
        {
            "bugID": 101,
            "bitvector": {
                "1.3.1": 1,
                "1.3.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.1.2": 0,
                "2.2.3": 1,
                "2.2.4": 1,
                "2.2.5": 1,
                "2.2.6": 1,
                "2.1.1": 1,
                "2.1.2": 0,
                "2.2.1": 1,
                "2.2.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy: bool = True, skipna: bool = False):\n    import numpy as np\n    import pandas as pd\n    from pandas.api.types import is_extension_array_dtype, pandas_dtype, is_datetime64_dtype, is_timedelta64_dtype, is_object_dtype\n    import pandas._libs.lib as lib\n    if is_extension_array_dtype(dtype):\n        return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)\n    \n    if not isinstance(dtype, np.dtype):\n        dtype = pandas_dtype(dtype)\n    \n    if np.any(pd.isna(arr)):\n        raise ValueError(\"Cannot convert NaT values to integer\")\n    \n    if copy or is_object_dtype(arr) or is_object_dtype(dtype):\n        # Explicit copy, or required since NumPy can't view from / to object.\n        return arr.astype(dtype, copy=True)\n    \n    return arr.view(dtype)"
        }
    ]
}