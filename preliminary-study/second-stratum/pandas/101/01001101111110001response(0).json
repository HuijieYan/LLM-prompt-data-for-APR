{
    "pandas": [
        {
            "bugID": 101,
            "bitvector": {
                "1.3.1": 0,
                "1.3.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.1.2": 1,
                "2.2.3": 0,
                "2.2.4": 1,
                "2.2.5": 1,
                "2.2.6": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "start_line": 792,
            "file_name": "pandas/core/dtypes/cast.py",
            "replace_code": "def astype_nansafe(arr, dtype, copy=True, skipna=False):\n    import numpy as np\n    \"\"\"\n    Cast the elements of an array to a given dtype in a nan-safe manner.\n    \n    Parameters\n    ----------\n    arr : ndarray\n    dtype : np.dtype\n    copy : bool, default True\n        If False, a view will be attempted but may fail, if\n        e.g. the item sizes don't align.\n    skipna: bool, default False\n        Whether or not we should skip NaN when casting as a string-type.\n    \n    Raises\n    ------\n    ValueError\n        The dtype was a datetime64/timedelta64 dtype, but it had no unit.\n    ValueError\n        Cannot convert NaT values to integer.\n    \"\"\"\n    \n    if np.isnat(arr):\n        if np.issubdtype(dtype, np.integer):\n            raise ValueError(\"Cannot convert NaT values to integer\")\n    \n    # dispatch on extension dtype if needed\n    if is_extension_array_dtype(dtype):\n        return dtype.construct_array_type()._from_sequence(arr, dtype=dtype, copy=copy)\n    \n    if not isinstance(dtype, np.dtype):\n        dtype = pandas_dtype(dtype)\n    \n    if issubclass(dtype.type, str):\n        return lib.astype_str(arr.ravel(), skipna=skipna).reshape(arr.shape)"
        }
    ]
}