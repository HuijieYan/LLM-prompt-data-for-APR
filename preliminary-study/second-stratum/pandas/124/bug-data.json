{
    "pandas:124": {
        "/Volumes/SSD2T/bgp_envs/repos/pandas_124/pandas/core/strings.py": {
            "buggy_functions": [],
            "snippets": [
                {
                    "snippet_code": "_doc_args[\"isdecimal\"] = dict(type=\"decimal\", method=\"isdecimal\")\n    isalnum = _noarg_wrapper(\n        lambda x: x.isalnum(),\n        name=\"isalnum\",\n        docstring=_shared_docs[\"ismethods\"] % _doc_args[\"isalnum\"],\n        returns_string=False,\n    )\n    isalpha = _noarg_wrapper(\n        lambda x: x.isalpha(),\n        name=\"isalpha\",\n        docstring=_shared_docs[\"ismethods\"] % _doc_args[\"isalpha\"],\n        returns_string=False,\n    )\n    isdigit = _noarg_wrapper(\n        lambda x: x.isdigit(),\n        name=\"isdigit\",\n        docstring=_shared_docs[\"ismethods\"] % _doc_args[\"isdigit\"],\n        returns_string=False,\n    )\n    isspace = _noarg_wrapper(\n        lambda x: x.isspace(),\n        name=\"isspace\",\n        docstring=_shared_docs[\"ismethods\"] % _doc_args[\"isspace\"],\n        returns_string=False,\n    )\n    islower = _noarg_wrapper(\n        lambda x: x.islower(),\n        name=\"islower\",\n        docstring=_shared_docs[\"ismethods\"] % _doc_args[\"islower\"],\n        returns_string=False,\n    )\n    isupper = _noarg_wrapper(\n        lambda x: x.isupper(),\n        name=\"isupper\",\n        docstring=_shared_docs[\"ismethods\"] % _doc_args[\"isupper\"],\n        returns_string=False,\n    )\n    istitle = _noarg_wrapper(\n        lambda x: x.istitle(),\n        name=\"istitle\",\n        docstring=_shared_docs[\"ismethods\"] % _doc_args[\"istitle\"],\n        returns_string=False,\n    )\n    isnumeric = _noarg_wrapper(\n        lambda x: x.isnumeric(),\n        name=\"isnumeric\",\n        docstring=_shared_docs[\"ismethods\"] % _doc_args[\"isnumeric\"],\n        returns_string=False,\n    )\n    isdecimal = _noarg_wrapper(\n        lambda x: x.isdecimal(),\n        name=\"isdecimal\",\n        docstring=_shared_docs[\"ismethods\"] % _doc_args[\"isdecimal\"],\n        returns_string=False,\n    )",
                    "start_line": 3403,
                    "end_line": 3457
                }
            ],
            "inscope_functions": [
                "def cat_core(list_of_columns: List, sep: str):\n    \"\"\"\n    Auxiliary function for :meth:`str.cat`\n\n    Parameters\n    ----------\n    list_of_columns : list of numpy arrays\n        List of arrays to be concatenated with sep;\n        these arrays may not contain NaNs!\n    sep : string\n        The separator string for concatenating the columns.\n\n    Returns\n    -------\n    nd.array\n        The concatenation of list_of_columns with sep.\n    \"\"\"\n    if sep == \"\":\n        # no need to interleave sep if it is empty\n        return np.sum(list_of_columns, axis=0)\n    list_with_sep = [sep] * (2 * len(list_of_columns) - 1)\n    list_with_sep[::2] = list_of_columns\n    return np.sum(list_with_sep, axis=0)",
                "def cat_safe(list_of_columns: List, sep: str):\n    \"\"\"\n    Auxiliary function for :meth:`str.cat`.\n\n    Same signature as cat_core, but handles TypeErrors in concatenation, which\n    happen if the arrays in list_of columns have the wrong dtypes or content.\n\n    Parameters\n    ----------\n    list_of_columns : list of numpy arrays\n        List of arrays to be concatenated with sep;\n        these arrays may not contain NaNs!\n    sep : string\n        The separator string for concatenating the columns.\n\n    Returns\n    -------\n    nd.array\n        The concatenation of list_of_columns with sep.\n    \"\"\"\n    try:\n        result = cat_core(list_of_columns, sep)\n    except TypeError:\n        # if there are any non-string values (wrong dtype or hidden behind\n        # object dtype), np.sum will fail; catch and return with better message\n        for column in list_of_columns:\n            dtype = lib.infer_dtype(column, skipna=True)\n            if dtype not in [\"string\", \"empty\"]:\n                raise TypeError(\n                    \"Concatenation requires list-likes containing only \"\n                    \"strings (or missing values). Offending values found in \"\n                    \"column {}\".format(dtype)\n                ) from None\n    return result",
                "def _na_map(f, arr, na_result=np.nan, dtype=object):\n    # should really _check_ for NA\n    return _map(f, arr, na_mask=True, na_value=na_result, dtype=dtype)",
                "def _map(f, arr, na_mask=False, na_value=np.nan, dtype=object):\n    if not len(arr):\n        return np.ndarray(0, dtype=dtype)\n\n    if isinstance(arr, ABCSeries):\n        arr = arr.values\n    if not isinstance(arr, np.ndarray):\n        arr = np.asarray(arr, dtype=object)\n    if na_mask:\n        mask = isna(arr)\n        convert = not np.all(mask)\n        try:\n            result = lib.map_infer_mask(arr, f, mask.view(np.uint8), convert)\n        except (TypeError, AttributeError) as e:\n            # Reraise the exception if callable `f` got wrong number of args.\n            # The user may want to be warned by this, instead of getting NaN\n            p_err = (\n                r\"((takes)|(missing)) (?(2)from \\d+ to )?\\d+ \"\n                r\"(?(3)required )positional arguments?\"\n            )\n\n            if len(e.args) >= 1 and re.search(p_err, e.args[0]):\n                # FIXME: this should be totally avoidable\n                raise e\n\n            def g(x):\n                try:\n                    return f(x)\n                except (TypeError, AttributeError):\n                    return na_value\n\n            return _map(g, arr, dtype=dtype)\n        if na_value is not np.nan:\n            np.putmask(result, mask, na_value)\n            if result.dtype == object:\n                result = lib.maybe_convert_objects(result)\n        return result\n    else:\n        return lib.map_infer(arr, f)",
                "def str_count(arr, pat, flags=0):\n    \"\"\"\n    Count occurrences of pattern in each string of the Series/Index.\n\n    This function is used to count the number of times a particular regex\n    pattern is repeated in each of the string elements of the\n    :class:`~pandas.Series`.\n\n    Parameters\n    ----------\n    pat : str\n        Valid regular expression.\n    flags : int, default 0, meaning no flags\n        Flags for the `re` module. For a complete list, `see here\n        <https://docs.python.org/3/howto/regex.html#compilation-flags>`_.\n    **kwargs\n        For compatibility with other string methods. Not used.\n\n    Returns\n    -------\n    Series or Index\n        Same type as the calling object containing the integer counts.\n\n    See Also\n    --------\n    re : Standard library module for regular expressions.\n    str.count : Standard library version, without regular expression support.\n\n    Notes\n    -----\n    Some characters need to be escaped when passing in `pat`.\n    eg. ``'$'`` has a special meaning in regex and must be escaped when\n    finding this literal character.\n\n    Examples\n    --------\n    >>> s = pd.Series(['A', 'B', 'Aaba', 'Baca', np.nan, 'CABA', 'cat'])\n    >>> s.str.count('a')\n    0    0.0\n    1    0.0\n    2    2.0\n    3    2.0\n    4    NaN\n    5    0.0\n    6    1.0\n    dtype: float64\n\n    Escape ``'$'`` to find the literal dollar sign.\n\n    >>> s = pd.Series(['$', 'B', 'Aab$', '$$ca', 'C$B$', 'cat'])\n    >>> s.str.count('\\\\$')\n    0    1\n    1    0\n    2    1\n    3    2\n    4    2\n    5    0\n    dtype: int64\n\n    This is also available on Index\n\n    >>> pd.Index(['A', 'A', 'Aaba', 'cat']).str.count('a')\n    Int64Index([0, 0, 2, 1], dtype='int64')\n    \"\"\"\n    regex = re.compile(pat, flags=flags)\n    f = lambda x: len(regex.findall(x))\n    return _na_map(f, arr, dtype=int)",
                "def str_contains(arr, pat, case=True, flags=0, na=np.nan, regex=True):\n    \"\"\"\n    Test if pattern or regex is contained within a string of a Series or Index.\n\n    Return boolean Series or Index based on whether a given pattern or regex is\n    contained within a string of a Series or Index.\n\n    Parameters\n    ----------\n    pat : str\n        Character sequence or regular expression.\n    case : bool, default True\n        If True, case sensitive.\n    flags : int, default 0 (no flags)\n        Flags to pass through to the re module, e.g. re.IGNORECASE.\n    na : default NaN\n        Fill value for missing values.\n    regex : bool, default True\n        If True, assumes the pat is a regular expression.\n\n        If False, treats the pat as a literal string.\n\n    Returns\n    -------\n    Series or Index of boolean values\n        A Series or Index of boolean values indicating whether the\n        given pattern is contained within the string of each element\n        of the Series or Index.\n\n    See Also\n    --------\n    match : Analogous, but stricter, relying on re.match instead of re.search.\n    Series.str.startswith : Test if the start of each string element matches a\n        pattern.\n    Series.str.endswith : Same as startswith, but tests the end of string.\n\n    Examples\n    --------\n\n    Returning a Series of booleans using only a literal pattern.\n\n    >>> s1 = pd.Series(['Mouse', 'dog', 'house and parrot', '23', np.NaN])\n    >>> s1.str.contains('og', regex=False)\n    0    False\n    1     True\n    2    False\n    3    False\n    4      NaN\n    dtype: object\n\n    Returning an Index of booleans using only a literal pattern.\n\n    >>> ind = pd.Index(['Mouse', 'dog', 'house and parrot', '23.0', np.NaN])\n    >>> ind.str.contains('23', regex=False)\n    Index([False, False, False, True, nan], dtype='object')\n\n    Specifying case sensitivity using `case`.\n\n    >>> s1.str.contains('oG', case=True, regex=True)\n    0    False\n    1    False\n    2    False\n    3    False\n    4      NaN\n    dtype: object\n\n    Specifying `na` to be `False` instead of `NaN` replaces NaN values\n    with `False`. If Series or Index does not contain NaN values\n    the resultant dtype will be `bool`, otherwise, an `object` dtype.\n\n    >>> s1.str.contains('og', na=False, regex=True)\n    0    False\n    1     True\n    2    False\n    3    False\n    4    False\n    dtype: bool\n\n    Returning 'house' or 'dog' when either expression occurs in a string.\n\n    >>> s1.str.contains('house|dog', regex=True)\n    0    False\n    1     True\n    2     True\n    3    False\n    4      NaN\n    dtype: object\n\n    Ignoring case sensitivity using `flags` with regex.\n\n    >>> import re\n    >>> s1.str.contains('PARROT', flags=re.IGNORECASE, regex=True)\n    0    False\n    1    False\n    2     True\n    3    False\n    4      NaN\n    dtype: object\n\n    Returning any digit using regular expression.\n\n    >>> s1.str.contains('\\\\d', regex=True)\n    0    False\n    1    False\n    2    False\n    3     True\n    4      NaN\n    dtype: object\n\n    Ensure `pat` is a not a literal pattern when `regex` is set to True.\n    Note in the following example one might expect only `s2[1]` and `s2[3]` to\n    return `True`. However, '.0' as a regex matches any character\n    followed by a 0.\n\n    >>> s2 = pd.Series(['40', '40.0', '41', '41.0', '35'])\n    >>> s2.str.contains('.0', regex=True)\n    0     True\n    1     True\n    2    False\n    3     True\n    4    False\n    dtype: bool\n    \"\"\"\n    if regex:\n        if not case:\n            flags |= re.IGNORECASE\n\n        regex = re.compile(pat, flags=flags)\n\n        if regex.groups > 0:\n            warnings.warn(\n                \"This pattern has match groups. To actually get the\"\n                \" groups, use str.extract.\",\n                UserWarning,\n                stacklevel=3,\n            )\n\n        f = lambda x: bool(regex.search(x))\n    else:\n        if case:\n            f = lambda x: pat in x\n        else:\n            upper_pat = pat.upper()\n            f = lambda x: upper_pat in x\n            uppered = _na_map(lambda x: x.upper(), arr)\n            return _na_map(f, uppered, na, dtype=bool)\n    return _na_map(f, arr, na, dtype=bool)",
                "def str_startswith(arr, pat, na=np.nan):\n    \"\"\"\n    Test if the start of each string element matches a pattern.\n\n    Equivalent to :meth:`str.startswith`.\n\n    Parameters\n    ----------\n    pat : str\n        Character sequence. Regular expressions are not accepted.\n    na : object, default NaN\n        Object shown if element tested is not a string.\n\n    Returns\n    -------\n    Series or Index of bool\n        A Series of booleans indicating whether the given pattern matches\n        the start of each string element.\n\n    See Also\n    --------\n    str.startswith : Python standard library string method.\n    Series.str.endswith : Same as startswith, but tests the end of string.\n    Series.str.contains : Tests if string element contains a pattern.\n\n    Examples\n    --------\n    >>> s = pd.Series(['bat', 'Bear', 'cat', np.nan])\n    >>> s\n    0     bat\n    1    Bear\n    2     cat\n    3     NaN\n    dtype: object\n\n    >>> s.str.startswith('b')\n    0     True\n    1    False\n    2    False\n    3      NaN\n    dtype: object\n\n    Specifying `na` to be `False` instead of `NaN`.\n\n    >>> s.str.startswith('b', na=False)\n    0     True\n    1    False\n    2    False\n    3    False\n    dtype: bool\n    \"\"\"\n    f = lambda x: x.startswith(pat)\n    return _na_map(f, arr, na, dtype=bool)",
                "def str_endswith(arr, pat, na=np.nan):\n    \"\"\"\n    Test if the end of each string element matches a pattern.\n\n    Equivalent to :meth:`str.endswith`.\n\n    Parameters\n    ----------\n    pat : str\n        Character sequence. Regular expressions are not accepted.\n    na : object, default NaN\n        Object shown if element tested is not a string.\n\n    Returns\n    -------\n    Series or Index of bool\n        A Series of booleans indicating whether the given pattern matches\n        the end of each string element.\n\n    See Also\n    --------\n    str.endswith : Python standard library string method.\n    Series.str.startswith : Same as endswith, but tests the start of string.\n    Series.str.contains : Tests if string element contains a pattern.\n\n    Examples\n    --------\n    >>> s = pd.Series(['bat', 'bear', 'caT', np.nan])\n    >>> s\n    0     bat\n    1    bear\n    2     caT\n    3     NaN\n    dtype: object\n\n    >>> s.str.endswith('t')\n    0     True\n    1    False\n    2    False\n    3      NaN\n    dtype: object\n\n    Specifying `na` to be `False` instead of `NaN`.\n\n    >>> s.str.endswith('t', na=False)\n    0     True\n    1    False\n    2    False\n    3    False\n    dtype: bool\n    \"\"\"\n    f = lambda x: x.endswith(pat)\n    return _na_map(f, arr, na, dtype=bool)",
                "def str_replace(arr, pat, repl, n=-1, case=None, flags=0, regex=True):\n    r\"\"\"\n    Replace occurrences of pattern/regex in the Series/Index with\n    some other string. Equivalent to :meth:`str.replace` or\n    :func:`re.sub`.\n\n    Parameters\n    ----------\n    pat : str or compiled regex\n        String can be a character sequence or regular expression.\n    repl : str or callable\n        Replacement string or a callable. The callable is passed the regex\n        match object and must return a replacement string to be used.\n        See :func:`re.sub`.\n    n : int, default -1 (all)\n        Number of replacements to make from start.\n    case : bool, default None\n        Determines if replace is case sensitive:\n\n        - If True, case sensitive (the default if `pat` is a string)\n        - Set to False for case insensitive\n        - Cannot be set if `pat` is a compiled regex.\n\n    flags : int, default 0 (no flags)\n        Regex module flags, e.g. re.IGNORECASE. Cannot be set if `pat` is a compiled\n        regex.\n    regex : bool, default True\n        Determines if assumes the passed-in pattern is a regular expression:\n\n        - If True, assumes the passed-in pattern is a regular expression.\n        - If False, treats the pattern as a literal string\n        - Cannot be set to False if `pat` is a compiled regex or `repl` is\n          a callable.\n\n        .. versionadded:: 0.23.0\n\n    Returns\n    -------\n    Series or Index of object\n        A copy of the object with all matching occurrences of `pat` replaced by\n        `repl`.\n\n    Raises\n    ------\n    ValueError\n        * if `regex` is False and `repl` is a callable or `pat` is a compiled\n          regex\n        * if `pat` is a compiled regex and `case` or `flags` is set\n\n    Notes\n    -----\n    When `pat` is a compiled regex, all flags should be included in the\n    compiled regex. Use of `case`, `flags`, or `regex=False` with a compiled\n    regex will raise an error.\n\n    Examples\n    --------\n    When `pat` is a string and `regex` is True (the default), the given `pat`\n    is compiled as a regex. When `repl` is a string, it replaces matching\n    regex patterns as with :meth:`re.sub`. NaN value(s) in the Series are\n    left as is:\n\n    >>> pd.Series(['foo', 'fuz', np.nan]).str.replace('f.', 'ba', regex=True)\n    0    bao\n    1    baz\n    2    NaN\n    dtype: object\n\n    When `pat` is a string and `regex` is False, every `pat` is replaced with\n    `repl` as with :meth:`str.replace`:\n\n    >>> pd.Series(['f.o', 'fuz', np.nan]).str.replace('f.', 'ba', regex=False)\n    0    bao\n    1    fuz\n    2    NaN\n    dtype: object\n\n    When `repl` is a callable, it is called on every `pat` using\n    :func:`re.sub`. The callable should expect one positional argument\n    (a regex object) and return a string.\n\n    To get the idea:\n\n    >>> pd.Series(['foo', 'fuz', np.nan]).str.replace('f', repr)\n    0    <_sre.SRE_Match object; span=(0, 1), match='f'>oo\n    1    <_sre.SRE_Match object; span=(0, 1), match='f'>uz\n    2                                                  NaN\n    dtype: object\n\n    Reverse every lowercase alphabetic word:\n\n    >>> repl = lambda m: m.group(0)[::-1]\n    >>> pd.Series(['foo 123', 'bar baz', np.nan]).str.replace(r'[a-z]+', repl)\n    0    oof 123\n    1    rab zab\n    2        NaN\n    dtype: object\n\n    Using regex groups (extract second group and swap case):\n\n    >>> pat = r\"(?P<one>\\w+) (?P<two>\\w+) (?P<three>\\w+)\"\n    >>> repl = lambda m: m.group('two').swapcase()\n    >>> pd.Series(['One Two Three', 'Foo Bar Baz']).str.replace(pat, repl)\n    0    tWO\n    1    bAR\n    dtype: object\n\n    Using a compiled regex with flags\n\n    >>> import re\n    >>> regex_pat = re.compile(r'FUZ', flags=re.IGNORECASE)\n    >>> pd.Series(['foo', 'fuz', np.nan]).str.replace(regex_pat, 'bar')\n    0    foo\n    1    bar\n    2    NaN\n    dtype: object\n    \"\"\"\n\n    # Check whether repl is valid (GH 13438, GH 15055)\n    if not (isinstance(repl, str) or callable(repl)):\n        raise TypeError(\"repl must be a string or callable\")\n\n    is_compiled_re = is_re(pat)\n    if regex:\n        if is_compiled_re:\n            if (case is not None) or (flags != 0):\n                raise ValueError(\n                    \"case and flags cannot be set when pat is a compiled regex\"\n                )\n        else:\n            # not a compiled regex\n            # set default case\n            if case is None:\n                case = True\n\n            # add case flag, if provided\n            if case is False:\n                flags |= re.IGNORECASE\n        if is_compiled_re or len(pat) > 1 or flags or callable(repl):\n            n = n if n >= 0 else 0\n            compiled = re.compile(pat, flags=flags)\n            f = lambda x: compiled.sub(repl=repl, string=x, count=n)\n        else:\n            f = lambda x: x.replace(pat, repl, n)\n    else:\n        if is_compiled_re:\n            raise ValueError(\n                \"Cannot use a compiled regex as replacement pattern with regex=False\"\n            )\n        if callable(repl):\n            raise ValueError(\"Cannot use a callable replacement when regex=False\")\n        f = lambda x: x.replace(pat, repl, n)\n\n    return _na_map(f, arr)",
                "def str_repeat(arr, repeats):\n    \"\"\"\n    Duplicate each string in the Series or Index.\n\n    Parameters\n    ----------\n    repeats : int or sequence of int\n        Same value for all (int) or different value per (sequence).\n\n    Returns\n    -------\n    Series or Index of object\n        Series or Index of repeated string objects specified by\n        input parameter repeats.\n\n    Examples\n    --------\n    >>> s = pd.Series(['a', 'b', 'c'])\n    >>> s\n    0    a\n    1    b\n    2    c\n    dtype: object\n\n    Single int repeats string in Series\n\n    >>> s.str.repeat(repeats=2)\n    0    aa\n    1    bb\n    2    cc\n    dtype: object\n\n    Sequence of int repeats corresponding string in Series\n\n    >>> s.str.repeat(repeats=[1, 2, 3])\n    0      a\n    1     bb\n    2    ccc\n    dtype: object\n    \"\"\"\n    if is_scalar(repeats):\n\n        def scalar_rep(x):\n            try:\n                return bytes.__mul__(x, repeats)\n            except TypeError:\n                return str.__mul__(x, repeats)\n\n        return _na_map(scalar_rep, arr)\n    else:\n\n        def rep(x, r):\n            try:\n                return bytes.__mul__(x, r)\n            except TypeError:\n                return str.__mul__(x, r)\n\n        repeats = np.asarray(repeats, dtype=object)\n        result = libops.vec_binop(com.values_from_object(arr), repeats, rep)\n        return result",
                "def str_match(arr, pat, case=True, flags=0, na=np.nan):\n    \"\"\"\n    Determine if each string matches a regular expression.\n\n    Parameters\n    ----------\n    pat : str\n        Character sequence or regular expression.\n    case : bool, default True\n        If True, case sensitive.\n    flags : int, default 0 (no flags)\n        Regex module flags, e.g. re.IGNORECASE.\n    na : default NaN\n        Fill value for missing values.\n\n    Returns\n    -------\n    Series/array of boolean values\n\n    See Also\n    --------\n    contains : Analogous, but less strict, relying on re.search instead of\n        re.match.\n    extract : Extract matched groups.\n    \"\"\"\n    if not case:\n        flags |= re.IGNORECASE\n\n    regex = re.compile(pat, flags=flags)\n\n    dtype = bool\n    f = lambda x: bool(regex.match(x))\n\n    return _na_map(f, arr, na, dtype=dtype)",
                "def _get_single_group_name(rx):\n    try:\n        return list(rx.groupindex.keys()).pop()\n    except IndexError:\n        return None",
                "def _groups_or_na_fun(regex):\n    \"\"\"Used in both extract_noexpand and extract_frame\"\"\"\n    if regex.groups == 0:\n        raise ValueError(\"pattern contains no capture groups\")\n    empty_row = [np.nan] * regex.groups\n\n    def f(x):\n        if not isinstance(x, str):\n            return empty_row\n        m = regex.search(x)\n        if m:\n            return [np.nan if item is None else item for item in m.groups()]\n        else:\n            return empty_row\n\n    return f",
                "def _result_dtype(arr):\n    # workaround #27953\n    # ideally we just pass `dtype=arr.dtype` unconditionally, but this fails\n    # when the list of values is empty.\n    if arr.dtype.name == \"string\":\n        return \"string\"\n    else:\n        return object",
                "def _str_extract_noexpand(arr, pat, flags=0):\n    \"\"\"\n    Find groups in each string in the Series using passed regular\n    expression. This function is called from\n    str_extract(expand=False), and can return Series, DataFrame, or\n    Index.\n\n    \"\"\"\n    from pandas import DataFrame\n\n    regex = re.compile(pat, flags=flags)\n    groups_or_na = _groups_or_na_fun(regex)\n\n    if regex.groups == 1:\n        result = np.array([groups_or_na(val)[0] for val in arr], dtype=object)\n        name = _get_single_group_name(regex)\n    else:\n        if isinstance(arr, ABCIndexClass):\n            raise ValueError(\"only one regex group is supported with Index\")\n        name = None\n        names = dict(zip(regex.groupindex.values(), regex.groupindex.keys()))\n        columns = [names.get(1 + i, i) for i in range(regex.groups)]\n        if arr.empty:\n            result = DataFrame(columns=columns, dtype=object)\n        else:\n            result = DataFrame(\n                [groups_or_na(val) for val in arr],\n                columns=columns,\n                index=arr.index,\n                dtype=object,\n            )\n    return result, name",
                "def _str_extract_frame(arr, pat, flags=0):\n    \"\"\"\n    For each subject string in the Series, extract groups from the\n    first match of regular expression pat. This function is called from\n    str_extract(expand=True), and always returns a DataFrame.\n\n    \"\"\"\n    from pandas import DataFrame\n\n    regex = re.compile(pat, flags=flags)\n    groups_or_na = _groups_or_na_fun(regex)\n    names = dict(zip(regex.groupindex.values(), regex.groupindex.keys()))\n    columns = [names.get(1 + i, i) for i in range(regex.groups)]\n\n    if len(arr) == 0:\n        return DataFrame(columns=columns, dtype=object)\n    try:\n        result_index = arr.index\n    except AttributeError:\n        result_index = None\n    dtype = _result_dtype(arr)\n    return DataFrame(\n        [groups_or_na(val) for val in arr],\n        columns=columns,\n        index=result_index,\n        dtype=dtype,\n    )",
                "def str_extract(arr, pat, flags=0, expand=True):\n    r\"\"\"\n    Extract capture groups in the regex `pat` as columns in a DataFrame.\n\n    For each subject string in the Series, extract groups from the\n    first match of regular expression `pat`.\n\n    Parameters\n    ----------\n    pat : str\n        Regular expression pattern with capturing groups.\n    flags : int, default 0 (no flags)\n        Flags from the ``re`` module, e.g. ``re.IGNORECASE``, that\n        modify regular expression matching for things like case,\n        spaces, etc. For more details, see :mod:`re`.\n    expand : bool, default True\n        If True, return DataFrame with one column per capture group.\n        If False, return a Series/Index if there is one capture group\n        or DataFrame if there are multiple capture groups.\n\n    Returns\n    -------\n    DataFrame or Series or Index\n        A DataFrame with one row for each subject string, and one\n        column for each group. Any capture group names in regular\n        expression pat will be used for column names; otherwise\n        capture group numbers will be used. The dtype of each result\n        column is always object, even when no match is found. If\n        ``expand=False`` and pat has only one capture group, then\n        return a Series (if subject is a Series) or Index (if subject\n        is an Index).\n\n    See Also\n    --------\n    extractall : Returns all matches (not just the first match).\n\n    Examples\n    --------\n    A pattern with two groups will return a DataFrame with two columns.\n    Non-matches will be NaN.\n\n    >>> s = pd.Series(['a1', 'b2', 'c3'])\n    >>> s.str.extract(r'([ab])(\\d)')\n         0    1\n    0    a    1\n    1    b    2\n    2  NaN  NaN\n\n    A pattern may contain optional groups.\n\n    >>> s.str.extract(r'([ab])?(\\d)')\n         0  1\n    0    a  1\n    1    b  2\n    2  NaN  3\n\n    Named groups will become column names in the result.\n\n    >>> s.str.extract(r'(?P<letter>[ab])(?P<digit>\\d)')\n      letter digit\n    0      a     1\n    1      b     2\n    2    NaN   NaN\n\n    A pattern with one group will return a DataFrame with one column\n    if expand=True.\n\n    >>> s.str.extract(r'[ab](\\d)', expand=True)\n         0\n    0    1\n    1    2\n    2  NaN\n\n    A pattern with one group will return a Series if expand=False.\n\n    >>> s.str.extract(r'[ab](\\d)', expand=False)\n    0      1\n    1      2\n    2    NaN\n    dtype: object\n    \"\"\"\n    if not isinstance(expand, bool):\n        raise ValueError(\"expand must be True or False\")\n    if expand:\n        return _str_extract_frame(arr._orig, pat, flags=flags)\n    else:\n        result, name = _str_extract_noexpand(arr._parent, pat, flags=flags)\n        return arr._wrap_result(result, name=name, expand=expand)",
                "def str_extractall(arr, pat, flags=0):\n    r\"\"\"\n    For each subject string in the Series, extract groups from all\n    matches of regular expression pat. When each subject string in the\n    Series has exactly one match, extractall(pat).xs(0, level='match')\n    is the same as extract(pat).\n\n    Parameters\n    ----------\n    pat : str\n        Regular expression pattern with capturing groups.\n    flags : int, default 0 (no flags)\n        A ``re`` module flag, for example ``re.IGNORECASE``. These allow\n        to modify regular expression matching for things like case, spaces,\n        etc. Multiple flags can be combined with the bitwise OR operator,\n        for example ``re.IGNORECASE | re.MULTILINE``.\n\n    Returns\n    -------\n    DataFrame\n        A ``DataFrame`` with one row for each match, and one column for each\n        group. Its rows have a ``MultiIndex`` with first levels that come from\n        the subject ``Series``. The last level is named 'match' and indexes the\n        matches in each item of the ``Series``. Any capture group names in\n        regular expression pat will be used for column names; otherwise capture\n        group numbers will be used.\n\n    See Also\n    --------\n    extract : Returns first match only (not all matches).\n\n    Examples\n    --------\n    A pattern with one group will return a DataFrame with one column.\n    Indices with no matches will not appear in the result.\n\n    >>> s = pd.Series([\"a1a2\", \"b1\", \"c1\"], index=[\"A\", \"B\", \"C\"])\n    >>> s.str.extractall(r\"[ab](\\d)\")\n             0\n      match\n    A 0      1\n      1      2\n    B 0      1\n\n    Capture group names are used for column names of the result.\n\n    >>> s.str.extractall(r\"[ab](?P<digit>\\d)\")\n            digit\n      match\n    A 0         1\n      1         2\n    B 0         1\n\n    A pattern with two groups will return a DataFrame with two columns.\n\n    >>> s.str.extractall(r\"(?P<letter>[ab])(?P<digit>\\d)\")\n            letter digit\n      match\n    A 0          a     1\n      1          a     2\n    B 0          b     1\n\n    Optional groups that do not match are NaN in the result.\n\n    >>> s.str.extractall(r\"(?P<letter>[ab])?(?P<digit>\\d)\")\n            letter digit\n      match\n    A 0          a     1\n      1          a     2\n    B 0          b     1\n    C 0        NaN     1\n    \"\"\"\n\n    regex = re.compile(pat, flags=flags)\n    # the regex must contain capture groups.\n    if regex.groups == 0:\n        raise ValueError(\"pattern contains no capture groups\")\n\n    if isinstance(arr, ABCIndexClass):\n        arr = arr.to_series().reset_index(drop=True)\n\n    names = dict(zip(regex.groupindex.values(), regex.groupindex.keys()))\n    columns = [names.get(1 + i, i) for i in range(regex.groups)]\n    match_list = []\n    index_list = []\n    is_mi = arr.index.nlevels > 1\n\n    for subject_key, subject in arr.items():\n        if isinstance(subject, str):\n\n            if not is_mi:\n                subject_key = (subject_key,)\n\n            for match_i, match_tuple in enumerate(regex.findall(subject)):\n                if isinstance(match_tuple, str):\n                    match_tuple = (match_tuple,)\n                na_tuple = [np.NaN if group == \"\" else group for group in match_tuple]\n                match_list.append(na_tuple)\n                result_key = tuple(subject_key + (match_i,))\n                index_list.append(result_key)\n\n    from pandas import MultiIndex\n\n    index = MultiIndex.from_tuples(index_list, names=arr.index.names + [\"match\"])\n    dtype = _result_dtype(arr)\n\n    result = arr._constructor_expanddim(\n        match_list, index=index, columns=columns, dtype=dtype\n    )\n    return result",
                "def str_get_dummies(arr, sep=\"|\"):\n    \"\"\"\n    Split each string in the Series by sep and return a DataFrame\n    of dummy/indicator variables.\n\n    Parameters\n    ----------\n    sep : str, default \"|\"\n        String to split on.\n\n    Returns\n    -------\n    DataFrame\n        Dummy variables corresponding to values of the Series.\n\n    See Also\n    --------\n    get_dummies : Convert categorical variable into dummy/indicator\n        variables.\n\n    Examples\n    --------\n    >>> pd.Series(['a|b', 'a', 'a|c']).str.get_dummies()\n       a  b  c\n    0  1  1  0\n    1  1  0  0\n    2  1  0  1\n\n    >>> pd.Series(['a|b', np.nan, 'a|c']).str.get_dummies()\n       a  b  c\n    0  1  1  0\n    1  0  0  0\n    2  1  0  1\n    \"\"\"\n    arr = arr.fillna(\"\")\n    try:\n        arr = sep + arr + sep\n    except TypeError:\n        arr = sep + arr.astype(str) + sep\n\n    tags = set()\n    for ts in arr.str.split(sep):\n        tags.update(ts)\n    tags = sorted(tags - {\"\"})\n\n    dummies = np.empty((len(arr), len(tags)), dtype=np.int64)\n\n    for i, t in enumerate(tags):\n        pat = sep + t + sep\n        dummies[:, i] = lib.map_infer(arr.to_numpy(), lambda x: pat in x)\n    return dummies, tags",
                "def str_join(arr, sep):\n    \"\"\"\n    Join lists contained as elements in the Series/Index with passed delimiter.\n\n    If the elements of a Series are lists themselves, join the content of these\n    lists using the delimiter passed to the function.\n    This function is an equivalent to :meth:`str.join`.\n\n    Parameters\n    ----------\n    sep : str\n        Delimiter to use between list entries.\n\n    Returns\n    -------\n    Series/Index: object\n        The list entries concatenated by intervening occurrences of the\n        delimiter.\n\n    Raises\n    ------\n    AttributeError\n        If the supplied Series contains neither strings nor lists.\n\n    See Also\n    --------\n    str.join : Standard library version of this method.\n    Series.str.split : Split strings around given separator/delimiter.\n\n    Notes\n    -----\n    If any of the list items is not a string object, the result of the join\n    will be `NaN`.\n\n    Examples\n    --------\n    Example with a list that contains non-string elements.\n\n    >>> s = pd.Series([['lion', 'elephant', 'zebra'],\n    ...                [1.1, 2.2, 3.3],\n    ...                ['cat', np.nan, 'dog'],\n    ...                ['cow', 4.5, 'goat'],\n    ...                ['duck', ['swan', 'fish'], 'guppy']])\n    >>> s\n    0        [lion, elephant, zebra]\n    1                [1.1, 2.2, 3.3]\n    2                [cat, nan, dog]\n    3               [cow, 4.5, goat]\n    4    [duck, [swan, fish], guppy]\n    dtype: object\n\n    Join all lists using a '-'. The lists containing object(s) of types other\n    than str will produce a NaN.\n\n    >>> s.str.join('-')\n    0    lion-elephant-zebra\n    1                    NaN\n    2                    NaN\n    3                    NaN\n    4                    NaN\n    dtype: object\n    \"\"\"\n    return _na_map(sep.join, arr)",
                "def str_findall(arr, pat, flags=0):\n    \"\"\"\n    Find all occurrences of pattern or regular expression in the Series/Index.\n\n    Equivalent to applying :func:`re.findall` to all the elements in the\n    Series/Index.\n\n    Parameters\n    ----------\n    pat : str\n        Pattern or regular expression.\n    flags : int, default 0\n        Flags from ``re`` module, e.g. `re.IGNORECASE` (default is 0, which\n        means no flags).\n\n    Returns\n    -------\n    Series/Index of lists of strings\n        All non-overlapping matches of pattern or regular expression in each\n        string of this Series/Index.\n\n    See Also\n    --------\n    count : Count occurrences of pattern or regular expression in each string\n        of the Series/Index.\n    extractall : For each string in the Series, extract groups from all matches\n        of regular expression and return a DataFrame with one row for each\n        match and one column for each group.\n    re.findall : The equivalent ``re`` function to all non-overlapping matches\n        of pattern or regular expression in string, as a list of strings.\n\n    Examples\n    --------\n\n    >>> s = pd.Series(['Lion', 'Monkey', 'Rabbit'])\n\n    The search for the pattern 'Monkey' returns one match:\n\n    >>> s.str.findall('Monkey')\n    0          []\n    1    [Monkey]\n    2          []\n    dtype: object\n\n    On the other hand, the search for the pattern 'MONKEY' doesn't return any\n    match:\n\n    >>> s.str.findall('MONKEY')\n    0    []\n    1    []\n    2    []\n    dtype: object\n\n    Flags can be added to the pattern or regular expression. For instance,\n    to find the pattern 'MONKEY' ignoring the case:\n\n    >>> import re\n    >>> s.str.findall('MONKEY', flags=re.IGNORECASE)\n    0          []\n    1    [Monkey]\n    2          []\n    dtype: object\n\n    When the pattern matches more than one string in the Series, all matches\n    are returned:\n\n    >>> s.str.findall('on')\n    0    [on]\n    1    [on]\n    2      []\n    dtype: object\n\n    Regular expressions are supported too. For instance, the search for all the\n    strings ending with the word 'on' is shown next:\n\n    >>> s.str.findall('on$')\n    0    [on]\n    1      []\n    2      []\n    dtype: object\n\n    If the pattern is found more than once in the same string, then a list of\n    multiple strings is returned:\n\n    >>> s.str.findall('b')\n    0        []\n    1        []\n    2    [b, b]\n    dtype: object\n    \"\"\"\n    regex = re.compile(pat, flags=flags)\n    return _na_map(regex.findall, arr)",
                "def str_find(arr, sub, start=0, end=None, side=\"left\"):\n    \"\"\"\n    Return indexes in each strings in the Series/Index where the\n    substring is fully contained between [start:end]. Return -1 on failure.\n\n    Parameters\n    ----------\n    sub : str\n        Substring being searched.\n    start : int\n        Left edge index.\n    end : int\n        Right edge index.\n    side : {'left', 'right'}, default 'left'\n        Specifies a starting side, equivalent to ``find`` or ``rfind``.\n\n    Returns\n    -------\n    Series or Index\n        Indexes where substring is found.\n    \"\"\"\n\n    if not isinstance(sub, str):\n        msg = \"expected a string object, not {0}\"\n        raise TypeError(msg.format(type(sub).__name__))\n\n    if side == \"left\":\n        method = \"find\"\n    elif side == \"right\":\n        method = \"rfind\"\n    else:  # pragma: no cover\n        raise ValueError(\"Invalid side\")\n\n    if end is None:\n        f = lambda x: getattr(x, method)(sub, start)\n    else:\n        f = lambda x: getattr(x, method)(sub, start, end)\n\n    return _na_map(f, arr, dtype=int)",
                "def str_index(arr, sub, start=0, end=None, side=\"left\"):\n    if not isinstance(sub, str):\n        msg = \"expected a string object, not {0}\"\n        raise TypeError(msg.format(type(sub).__name__))\n\n    if side == \"left\":\n        method = \"index\"\n    elif side == \"right\":\n        method = \"rindex\"\n    else:  # pragma: no cover\n        raise ValueError(\"Invalid side\")\n\n    if end is None:\n        f = lambda x: getattr(x, method)(sub, start)\n    else:\n        f = lambda x: getattr(x, method)(sub, start, end)\n\n    return _na_map(f, arr, dtype=int)",
                "def str_pad(arr, width, side=\"left\", fillchar=\" \"):\n    \"\"\"\n    Pad strings in the Series/Index up to width.\n\n    Parameters\n    ----------\n    width : int\n        Minimum width of resulting string; additional characters will be filled\n        with character defined in `fillchar`.\n    side : {'left', 'right', 'both'}, default 'left'\n        Side from which to fill resulting string.\n    fillchar : str, default ' '\n        Additional character for filling, default is whitespace.\n\n    Returns\n    -------\n    Series or Index of object\n        Returns Series or Index with minimum number of char in object.\n\n    See Also\n    --------\n    Series.str.rjust : Fills the left side of strings with an arbitrary\n        character. Equivalent to ``Series.str.pad(side='left')``.\n    Series.str.ljust : Fills the right side of strings with an arbitrary\n        character. Equivalent to ``Series.str.pad(side='right')``.\n    Series.str.center : Fills boths sides of strings with an arbitrary\n        character. Equivalent to ``Series.str.pad(side='both')``.\n    Series.str.zfill : Pad strings in the Series/Index by prepending '0'\n        character. Equivalent to ``Series.str.pad(side='left', fillchar='0')``.\n\n    Examples\n    --------\n    >>> s = pd.Series([\"caribou\", \"tiger\"])\n    >>> s\n    0    caribou\n    1      tiger\n    dtype: object\n\n    >>> s.str.pad(width=10)\n    0       caribou\n    1         tiger\n    dtype: object\n\n    >>> s.str.pad(width=10, side='right', fillchar='-')\n    0    caribou---\n    1    tiger-----\n    dtype: object\n\n    >>> s.str.pad(width=10, side='both', fillchar='-')\n    0    -caribou--\n    1    --tiger---\n    dtype: object\n    \"\"\"\n    if not isinstance(fillchar, str):\n        msg = \"fillchar must be a character, not {0}\"\n        raise TypeError(msg.format(type(fillchar).__name__))\n\n    if len(fillchar) != 1:\n        raise TypeError(\"fillchar must be a character, not str\")\n\n    if not is_integer(width):\n        msg = \"width must be of integer type, not {0}\"\n        raise TypeError(msg.format(type(width).__name__))\n\n    if side == \"left\":\n        f = lambda x: x.rjust(width, fillchar)\n    elif side == \"right\":\n        f = lambda x: x.ljust(width, fillchar)\n    elif side == \"both\":\n        f = lambda x: x.center(width, fillchar)\n    else:  # pragma: no cover\n        raise ValueError(\"Invalid side\")\n\n    return _na_map(f, arr)",
                "def str_split(arr, pat=None, n=None):\n\n    if pat is None:\n        if n is None or n == 0:\n            n = -1\n        f = lambda x: x.split(pat, n)\n    else:\n        if len(pat) == 1:\n            if n is None or n == 0:\n                n = -1\n            f = lambda x: x.split(pat, n)\n        else:\n            if n is None or n == -1:\n                n = 0\n            regex = re.compile(pat)\n            f = lambda x: regex.split(x, maxsplit=n)\n    res = _na_map(f, arr)\n    return res",
                "def str_rsplit(arr, pat=None, n=None):\n\n    if n is None or n == 0:\n        n = -1\n    f = lambda x: x.rsplit(pat, n)\n    res = _na_map(f, arr)\n    return res",
                "def str_slice(arr, start=None, stop=None, step=None):\n    \"\"\"\n    Slice substrings from each element in the Series or Index.\n\n    Parameters\n    ----------\n    start : int, optional\n        Start position for slice operation.\n    stop : int, optional\n        Stop position for slice operation.\n    step : int, optional\n        Step size for slice operation.\n\n    Returns\n    -------\n    Series or Index of object\n        Series or Index from sliced substring from original string object.\n\n    See Also\n    --------\n    Series.str.slice_replace : Replace a slice with a string.\n    Series.str.get : Return element at position.\n        Equivalent to `Series.str.slice(start=i, stop=i+1)` with `i`\n        being the position.\n\n    Examples\n    --------\n    >>> s = pd.Series([\"koala\", \"fox\", \"chameleon\"])\n    >>> s\n    0        koala\n    1          fox\n    2    chameleon\n    dtype: object\n\n    >>> s.str.slice(start=1)\n    0        oala\n    1          ox\n    2    hameleon\n    dtype: object\n\n    >>> s.str.slice(start=-1)\n    0           a\n    1           x\n    2           n\n    dtype: object\n\n    >>> s.str.slice(stop=2)\n    0    ko\n    1    fo\n    2    ch\n    dtype: object\n\n    >>> s.str.slice(step=2)\n    0      kaa\n    1       fx\n    2    caeen\n    dtype: object\n\n    >>> s.str.slice(start=0, stop=5, step=3)\n    0    kl\n    1     f\n    2    cm\n    dtype: object\n\n    Equivalent behaviour to:\n\n    >>> s.str[0:5:3]\n    0    kl\n    1     f\n    2    cm\n    dtype: object\n    \"\"\"\n    obj = slice(start, stop, step)\n    f = lambda x: x[obj]\n    return _na_map(f, arr)",
                "def str_slice_replace(arr, start=None, stop=None, repl=None):\n    \"\"\"\n    Replace a positional slice of a string with another value.\n\n    Parameters\n    ----------\n    start : int, optional\n        Left index position to use for the slice. If not specified (None),\n        the slice is unbounded on the left, i.e. slice from the start\n        of the string.\n    stop : int, optional\n        Right index position to use for the slice. If not specified (None),\n        the slice is unbounded on the right, i.e. slice until the\n        end of the string.\n    repl : str, optional\n        String for replacement. If not specified (None), the sliced region\n        is replaced with an empty string.\n\n    Returns\n    -------\n    Series or Index\n        Same type as the original object.\n\n    See Also\n    --------\n    Series.str.slice : Just slicing without replacement.\n\n    Examples\n    --------\n    >>> s = pd.Series(['a', 'ab', 'abc', 'abdc', 'abcde'])\n    >>> s\n    0        a\n    1       ab\n    2      abc\n    3     abdc\n    4    abcde\n    dtype: object\n\n    Specify just `start`, meaning replace `start` until the end of the\n    string with `repl`.\n\n    >>> s.str.slice_replace(1, repl='X')\n    0    aX\n    1    aX\n    2    aX\n    3    aX\n    4    aX\n    dtype: object\n\n    Specify just `stop`, meaning the start of the string to `stop` is replaced\n    with `repl`, and the rest of the string is included.\n\n    >>> s.str.slice_replace(stop=2, repl='X')\n    0       X\n    1       X\n    2      Xc\n    3     Xdc\n    4    Xcde\n    dtype: object\n\n    Specify `start` and `stop`, meaning the slice from `start` to `stop` is\n    replaced with `repl`. Everything before or after `start` and `stop` is\n    included as is.\n\n    >>> s.str.slice_replace(start=1, stop=3, repl='X')\n    0      aX\n    1      aX\n    2      aX\n    3     aXc\n    4    aXde\n    dtype: object\n    \"\"\"\n    if repl is None:\n        repl = \"\"\n\n    def f(x):\n        if x[start:stop] == \"\":\n            local_stop = start\n        else:\n            local_stop = stop\n        y = \"\"\n        if start is not None:\n            y += x[:start]\n        y += repl\n        if stop is not None:\n            y += x[local_stop:]\n        return y\n\n    return _na_map(f, arr)",
                "def str_strip(arr, to_strip=None, side=\"both\"):\n    \"\"\"\n    Strip whitespace (including newlines) from each string in the\n    Series/Index.\n\n    Parameters\n    ----------\n    to_strip : str or unicode\n    side : {'left', 'right', 'both'}, default 'both'\n\n    Returns\n    -------\n    Series or Index\n    \"\"\"\n    if side == \"both\":\n        f = lambda x: x.strip(to_strip)\n    elif side == \"left\":\n        f = lambda x: x.lstrip(to_strip)\n    elif side == \"right\":\n        f = lambda x: x.rstrip(to_strip)\n    else:  # pragma: no cover\n        raise ValueError(\"Invalid side\")\n    return _na_map(f, arr)",
                "def str_wrap(arr, width, **kwargs):\n    r\"\"\"\n    Wrap long strings in the Series/Index to be formatted in\n    paragraphs with length less than a given width.\n\n    This method has the same keyword parameters and defaults as\n    :class:`textwrap.TextWrapper`.\n\n    Parameters\n    ----------\n    width : int\n        Maximum line width.\n    expand_tabs : bool, optional\n        If True, tab characters will be expanded to spaces (default: True).\n    replace_whitespace : bool, optional\n        If True, each whitespace character (as defined by string.whitespace)\n        remaining after tab expansion will be replaced by a single space\n        (default: True).\n    drop_whitespace : bool, optional\n        If True, whitespace that, after wrapping, happens to end up at the\n        beginning or end of a line is dropped (default: True).\n    break_long_words : bool, optional\n        If True, then words longer than width will be broken in order to ensure\n        that no lines are longer than width. If it is false, long words will\n        not be broken, and some lines may be longer than width (default: True).\n    break_on_hyphens : bool, optional\n        If True, wrapping will occur preferably on whitespace and right after\n        hyphens in compound words, as it is customary in English. If false,\n        only whitespaces will be considered as potentially good places for line\n        breaks, but you need to set break_long_words to false if you want truly\n        insecable words (default: True).\n\n    Returns\n    -------\n    Series or Index\n\n    Notes\n    -----\n    Internally, this method uses a :class:`textwrap.TextWrapper` instance with\n    default settings. To achieve behavior matching R's stringr library str_wrap\n    function, use the arguments:\n\n    - expand_tabs = False\n    - replace_whitespace = True\n    - drop_whitespace = True\n    - break_long_words = False\n    - break_on_hyphens = False\n\n    Examples\n    --------\n\n    >>> s = pd.Series(['line to be wrapped', 'another line to be wrapped'])\n    >>> s.str.wrap(12)\n    0             line to be\\nwrapped\n    1    another line\\nto be\\nwrapped\n    dtype: object\n    \"\"\"\n    kwargs[\"width\"] = width\n\n    tw = textwrap.TextWrapper(**kwargs)\n\n    return _na_map(lambda s: \"\\n\".join(tw.wrap(s)), arr)",
                "def str_translate(arr, table):\n    \"\"\"\n    Map all characters in the string through the given mapping table.\n    Equivalent to standard :meth:`str.translate`.\n\n    Parameters\n    ----------\n    table : dict\n        Table is a mapping of Unicode ordinals to Unicode ordinals, strings, or\n        None. Unmapped characters are left untouched.\n        Characters mapped to None are deleted. :meth:`str.maketrans` is a\n        helper function for making translation tables.\n\n    Returns\n    -------\n    Series or Index\n    \"\"\"\n    return _na_map(lambda x: x.translate(table), arr)",
                "def str_get(arr, i):\n    \"\"\"\n    Extract element from each component at specified position.\n\n    Extract element from lists, tuples, or strings in each element in the\n    Series/Index.\n\n    Parameters\n    ----------\n    i : int\n        Position of element to extract.\n\n    Returns\n    -------\n    Series or Index\n\n    Examples\n    --------\n    >>> s = pd.Series([\"String\",\n    ...               (1, 2, 3),\n    ...               [\"a\", \"b\", \"c\"],\n    ...               123,\n    ...               -456,\n    ...               {1: \"Hello\", \"2\": \"World\"}])\n    >>> s\n    0                        String\n    1                     (1, 2, 3)\n    2                     [a, b, c]\n    3                           123\n    4                          -456\n    5    {1: 'Hello', '2': 'World'}\n    dtype: object\n\n    >>> s.str.get(1)\n    0        t\n    1        2\n    2        b\n    3      NaN\n    4      NaN\n    5    Hello\n    dtype: object\n\n    >>> s.str.get(-1)\n    0      g\n    1      3\n    2      c\n    3    NaN\n    4    NaN\n    5    None\n    dtype: object\n    \"\"\"\n\n    def f(x):\n        if isinstance(x, dict):\n            return x.get(i)\n        elif len(x) > i >= -len(x):\n            return x[i]\n        return np.nan\n\n    return _na_map(f, arr)",
                "def str_decode(arr, encoding, errors=\"strict\"):\n    \"\"\"\n    Decode character string in the Series/Index using indicated encoding.\n    Equivalent to :meth:`str.decode` in python2 and :meth:`bytes.decode` in\n    python3.\n\n    Parameters\n    ----------\n    encoding : str\n    errors : str, optional\n\n    Returns\n    -------\n    Series or Index\n    \"\"\"\n    if encoding in _cpython_optimized_decoders:\n        # CPython optimized implementation\n        f = lambda x: x.decode(encoding, errors)\n    else:\n        decoder = codecs.getdecoder(encoding)\n        f = lambda x: decoder(x, errors)[0]\n    return _na_map(f, arr)",
                "def str_encode(arr, encoding, errors=\"strict\"):\n    \"\"\"\n    Encode character string in the Series/Index using indicated encoding.\n    Equivalent to :meth:`str.encode`.\n\n    Parameters\n    ----------\n    encoding : str\n    errors : str, optional\n\n    Returns\n    -------\n    encoded : Series/Index of objects\n    \"\"\"\n    if encoding in _cpython_optimized_encoders:\n        # CPython optimized implementation\n        f = lambda x: x.encode(encoding, errors)\n    else:\n        encoder = codecs.getencoder(encoding)\n        f = lambda x: encoder(x, errors)[0]\n    return _na_map(f, arr)",
                "def forbid_nonstring_types(forbidden, name=None):\n    \"\"\"\n    Decorator to forbid specific types for a method of StringMethods.\n\n    For calling `.str.{method}` on a Series or Index, it is necessary to first\n    initialize the :class:`StringMethods` object, and then call the method.\n    However, different methods allow different input types, and so this can not\n    be checked during :meth:`StringMethods.__init__`, but must be done on a\n    per-method basis. This decorator exists to facilitate this process, and\n    make it explicit which (inferred) types are disallowed by the method.\n\n    :meth:`StringMethods.__init__` allows the *union* of types its different\n    methods allow (after skipping NaNs; see :meth:`StringMethods._validate`),\n    namely: ['string', 'empty', 'bytes', 'mixed', 'mixed-integer'].\n\n    The default string types ['string', 'empty'] are allowed for all methods.\n    For the additional types ['bytes', 'mixed', 'mixed-integer'], each method\n    then needs to forbid the types it is not intended for.\n\n    Parameters\n    ----------\n    forbidden : list-of-str or None\n        List of forbidden non-string types, may be one or more of\n        `['bytes', 'mixed', 'mixed-integer']`.\n    name : str, default None\n        Name of the method to use in the error message. By default, this is\n        None, in which case the name from the method being wrapped will be\n        copied. However, for working with further wrappers (like _pat_wrapper\n        and _noarg_wrapper), it is necessary to specify the name.\n\n    Returns\n    -------\n    func : wrapper\n        The method to which the decorator is applied, with an added check that\n        enforces the inferred type to not be in the list of forbidden types.\n\n    Raises\n    ------\n    TypeError\n        If the inferred type of the underlying data is in `forbidden`.\n    \"\"\"\n\n    # deal with None\n    forbidden = [] if forbidden is None else forbidden\n\n    allowed_types = {\"string\", \"empty\", \"bytes\", \"mixed\", \"mixed-integer\"} - set(\n        forbidden\n    )\n\n    def _forbid_nonstring_types(func):\n        func_name = func.__name__ if name is None else name\n\n        @wraps(func)\n        def wrapper(self, *args, **kwargs):\n            if self._inferred_dtype not in allowed_types:\n                msg = (\n                    \"Cannot use .str.{name} with values of inferred dtype \"\n                    \"{inf_type!r}.\".format(\n                        name=func_name, inf_type=self._inferred_dtype\n                    )\n                )\n                raise TypeError(msg)\n            return func(self, *args, **kwargs)\n\n        wrapper.__name__ = func_name\n        return wrapper\n\n    return _forbid_nonstring_types",
                "def _noarg_wrapper(\n    f,\n    name=None,\n    docstring=None,\n    forbidden_types=[\"bytes\"],\n    returns_string=True,\n    **kargs,\n):\n    @forbid_nonstring_types(forbidden_types, name=name)\n    def wrapper(self):\n        result = _na_map(f, self._parent, **kargs)\n        return self._wrap_result(result, returns_string=returns_string)\n\n    wrapper.__name__ = f.__name__ if name is None else name\n    if docstring is not None:\n        wrapper.__doc__ = docstring\n    else:\n        raise ValueError(\"Provide docstring\")\n\n    return wrapper",
                "def _pat_wrapper(\n    f,\n    flags=False,\n    na=False,\n    name=None,\n    forbidden_types=[\"bytes\"],\n    returns_string=True,\n    **kwargs,\n):\n    @forbid_nonstring_types(forbidden_types, name=name)\n    def wrapper1(self, pat):\n        result = f(self._parent, pat)\n        return self._wrap_result(result, returns_string=returns_string)\n\n    @forbid_nonstring_types(forbidden_types, name=name)\n    def wrapper2(self, pat, flags=0, **kwargs):\n        result = f(self._parent, pat, flags=flags, **kwargs)\n        return self._wrap_result(result, returns_string=returns_string)\n\n    @forbid_nonstring_types(forbidden_types, name=name)\n    def wrapper3(self, pat, na=np.nan):\n        result = f(self._parent, pat, na=na)\n        return self._wrap_result(result, returns_string=returns_string)\n\n    wrapper = wrapper3 if na else wrapper2 if flags else wrapper1\n\n    wrapper.__name__ = f.__name__ if name is None else name\n    if f.__doc__:\n        wrapper.__doc__ = f.__doc__\n\n    return wrapper",
                "def copy(source):\n    \"Copy a docstring from another source function (if present)\"\n\n    def do_copy(target):\n        if source.__doc__:\n            target.__doc__ = source.__doc__\n        return target\n\n    return do_copy",
                "def f(x):\n    if not isinstance(x, str):\n        return empty_row\n    m = regex.search(x)\n    if m:\n        return [np.nan if item is None else item for item in m.groups()]\n    else:\n        return empty_row",
                "def f(x):\n    if x[start:stop] == \"\":\n        local_stop = start\n    else:\n        local_stop = stop\n    y = \"\"\n    if start is not None:\n        y += x[:start]\n    y += repl\n    if stop is not None:\n        y += x[local_stop:]\n    return y",
                "def f(x):\n    if isinstance(x, dict):\n        return x.get(i)\n    elif len(x) > i >= -len(x):\n        return x[i]\n    return np.nan",
                "def _forbid_nonstring_types(func):\n    func_name = func.__name__ if name is None else name\n\n    @wraps(func)\n    def wrapper(self, *args, **kwargs):\n        if self._inferred_dtype not in allowed_types:\n            msg = (\n                \"Cannot use .str.{name} with values of inferred dtype \"\n                \"{inf_type!r}.\".format(\n                    name=func_name, inf_type=self._inferred_dtype\n                )\n            )\n            raise TypeError(msg)\n        return func(self, *args, **kwargs)\n\n    wrapper.__name__ = func_name\n    return wrapper",
                "@forbid_nonstring_types(forbidden_types, name=name)\ndef wrapper(self):\n    result = _na_map(f, self._parent, **kargs)\n    return self._wrap_result(result, returns_string=returns_string)",
                "@forbid_nonstring_types(forbidden_types, name=name)\ndef wrapper1(self, pat):\n    result = f(self._parent, pat)\n    return self._wrap_result(result, returns_string=returns_string)",
                "@forbid_nonstring_types(forbidden_types, name=name)\ndef wrapper2(self, pat, flags=0, **kwargs):\n    result = f(self._parent, pat, flags=flags, **kwargs)\n    return self._wrap_result(result, returns_string=returns_string)",
                "@forbid_nonstring_types(forbidden_types, name=name)\ndef wrapper3(self, pat, na=np.nan):\n    result = f(self._parent, pat, na=na)\n    return self._wrap_result(result, returns_string=returns_string)",
                "def do_copy(target):\n    if source.__doc__:\n        target.__doc__ = source.__doc__\n    return target",
                "def __init__(self, data):\n    self._inferred_dtype = self._validate(data)\n    self._is_categorical = is_categorical_dtype(data)\n    self._is_string = data.dtype.name == \"string\"\n\n    # .values.categories works for both Series/Index\n    self._parent = data.values.categories if self._is_categorical else data\n    # save orig to blow up categoricals to the right type\n    self._orig = data\n    self._freeze()",
                "@staticmethod\ndef _validate(data):\n    \"\"\"\n    Auxiliary function for StringMethods, infers and checks dtype of data.\n\n    This is a \"first line of defence\" at the creation of the StringMethods-\n    object (see _make_accessor), and just checks that the dtype is in the\n    *union* of the allowed types over all string methods below; this\n    restriction is then refined on a per-method basis using the decorator\n    @forbid_nonstring_types (more info in the corresponding docstring).\n\n    This really should exclude all series/index with any non-string values,\n    but that isn't practical for performance reasons until we have a str\n    dtype (GH 9343 / 13877)\n\n    Parameters\n    ----------\n    data : The content of the Series\n\n    Returns\n    -------\n    dtype : inferred dtype of data\n    \"\"\"\n    from pandas import StringDtype\n\n    if isinstance(data, ABCMultiIndex):\n        raise AttributeError(\n            \"Can only use .str accessor with Index, not MultiIndex\"\n        )\n\n    # see _libs/lib.pyx for list of inferred types\n    allowed_types = [\"string\", \"empty\", \"bytes\", \"mixed\", \"mixed-integer\"]\n\n    values = getattr(data, \"values\", data)  # Series / Index\n    values = getattr(values, \"categories\", values)  # categorical / normal\n\n    # explicitly allow StringDtype\n    if isinstance(values.dtype, StringDtype):\n        return \"string\"\n\n    try:\n        inferred_dtype = lib.infer_dtype(values, skipna=True)\n    except ValueError:\n        # GH#27571 mostly occurs with ExtensionArray\n        inferred_dtype = None\n\n    if inferred_dtype not in allowed_types:\n        raise AttributeError(\"Can only use .str accessor with string values!\")\n    return inferred_dtype",
                "def __getitem__(self, key):\n    if isinstance(key, slice):\n        return self.slice(start=key.start, stop=key.stop, step=key.step)\n    else:\n        return self.get(key)",
                "def __iter__(self):\n    i = 0\n    g = self.get(i)\n    while g.notna().any():\n        yield g\n        i += 1\n        g = self.get(i)",
                "def _wrap_result(\n    self,\n    result,\n    use_codes=True,\n    name=None,\n    expand=None,\n    fill_value=np.nan,\n    returns_string=True,\n):\n\n    from pandas import Index, Series, MultiIndex\n\n    # for category, we do the stuff on the categories, so blow it up\n    # to the full series again\n    # But for some operations, we have to do the stuff on the full values,\n    # so make it possible to skip this step as the method already did this\n    # before the transformation...\n    if use_codes and self._is_categorical:\n        # if self._orig is a CategoricalIndex, there is no .cat-accessor\n        result = take_1d(\n            result, Series(self._orig, copy=False).cat.codes, fill_value=fill_value\n        )\n\n    if not hasattr(result, \"ndim\") or not hasattr(result, \"dtype\"):\n        return result\n    assert result.ndim < 3\n\n    # We can be wrapping a string / object / categorical result, in which\n    # case we'll want to return the same dtype as the input.\n    # Or we can be wrapping a numeric output, in which case we don't want\n    # to return a StringArray.\n    if self._is_string and returns_string:\n        dtype = \"string\"\n    else:\n        dtype = None\n\n    if expand is None:\n        # infer from ndim if expand is not specified\n        expand = result.ndim != 1\n\n    elif expand is True and not isinstance(self._orig, ABCIndexClass):\n        # required when expand=True is explicitly specified\n        # not needed when inferred\n\n        def cons_row(x):\n            if is_list_like(x):\n                return x\n            else:\n                return [x]\n\n        result = [cons_row(x) for x in result]\n        if result:\n            # propagate nan values to match longest sequence (GH 18450)\n            max_len = max(len(x) for x in result)\n            result = [\n                x * max_len if len(x) == 0 or x[0] is np.nan else x for x in result\n            ]\n\n    if not isinstance(expand, bool):\n        raise ValueError(\"expand must be True or False\")\n\n    if expand is False:\n        # if expand is False, result should have the same name\n        # as the original otherwise specified\n        if name is None:\n            name = getattr(result, \"name\", None)\n        if name is None:\n            # do not use logical or, _orig may be a DataFrame\n            # which has \"name\" column\n            name = self._orig.name\n\n    # Wait until we are sure result is a Series or Index before\n    # checking attributes (GH 12180)\n    if isinstance(self._orig, ABCIndexClass):\n        # if result is a boolean np.array, return the np.array\n        # instead of wrapping it into a boolean Index (GH 8875)\n        if is_bool_dtype(result):\n            return result\n\n        if expand:\n            result = list(result)\n            out = MultiIndex.from_tuples(result, names=name)\n            if out.nlevels == 1:\n                # We had all tuples of length-one, which are\n                # better represented as a regular Index.\n                out = out.get_level_values(0)\n            return out\n        else:\n            return Index(result, name=name)\n    else:\n        index = self._orig.index\n        if expand:\n            cons = self._orig._constructor_expanddim\n            result = cons(result, columns=name, index=index, dtype=dtype)\n        else:\n            # Must be a Series\n            cons = self._orig._constructor\n            result = cons(result, name=name, index=index, dtype=dtype)\n        return result",
                "def _get_series_list(self, others):\n    \"\"\"\n    Auxiliary function for :meth:`str.cat`. Turn potentially mixed input\n    into a list of Series (elements without an index must match the length\n    of the calling Series/Index).\n\n    Parameters\n    ----------\n    others : Series, DataFrame, np.ndarray, list-like or list-like of\n        Objects that are either Series, Index or np.ndarray (1-dim).\n\n    Returns\n    -------\n    list of Series\n        Others transformed into list of Series.\n    \"\"\"\n    from pandas import Series, DataFrame\n\n    # self._orig is either Series or Index\n    idx = self._orig if isinstance(self._orig, ABCIndexClass) else self._orig.index\n\n    # Generally speaking, all objects without an index inherit the index\n    # `idx` of the calling Series/Index - i.e. must have matching length.\n    # Objects with an index (i.e. Series/Index/DataFrame) keep their own.\n    if isinstance(others, ABCSeries):\n        return [others]\n    elif isinstance(others, ABCIndexClass):\n        return [Series(others.values, index=others)]\n    elif isinstance(others, ABCDataFrame):\n        return [others[x] for x in others]\n    elif isinstance(others, np.ndarray) and others.ndim == 2:\n        others = DataFrame(others, index=idx)\n        return [others[x] for x in others]\n    elif is_list_like(others, allow_sets=False):\n        others = list(others)  # ensure iterators do not get read twice etc\n\n        # in case of list-like `others`, all elements must be\n        # either Series/Index/np.ndarray (1-dim)...\n        if all(\n            isinstance(x, (ABCSeries, ABCIndexClass))\n            or (isinstance(x, np.ndarray) and x.ndim == 1)\n            for x in others\n        ):\n            los = []\n            while others:  # iterate through list and append each element\n                los = los + self._get_series_list(others.pop(0))\n            return los\n        # ... or just strings\n        elif all(not is_list_like(x) for x in others):\n            return [Series(others, index=idx)]\n    raise TypeError(\n        \"others must be Series, Index, DataFrame, np.ndarrary \"\n        \"or list-like (either containing only strings or \"\n        \"containing only objects of type Series/Index/\"\n        \"np.ndarray[1-dim])\"\n    )",
                "@forbid_nonstring_types([\"bytes\", \"mixed\", \"mixed-integer\"])\ndef cat(self, others=None, sep=None, na_rep=None, join=\"left\"):\n    \"\"\"\n    Concatenate strings in the Series/Index with given separator.\n\n    If `others` is specified, this function concatenates the Series/Index\n    and elements of `others` element-wise.\n    If `others` is not passed, then all values in the Series/Index are\n    concatenated into a single string with a given `sep`.\n\n    Parameters\n    ----------\n    others : Series, Index, DataFrame, np.ndarray or list-like\n        Series, Index, DataFrame, np.ndarray (one- or two-dimensional) and\n        other list-likes of strings must have the same length as the\n        calling Series/Index, with the exception of indexed objects (i.e.\n        Series/Index/DataFrame) if `join` is not None.\n\n        If others is a list-like that contains a combination of Series,\n        Index or np.ndarray (1-dim), then all elements will be unpacked and\n        must satisfy the above criteria individually.\n\n        If others is None, the method returns the concatenation of all\n        strings in the calling Series/Index.\n    sep : str, default ''\n        The separator between the different elements/columns. By default\n        the empty string `''` is used.\n    na_rep : str or None, default None\n        Representation that is inserted for all missing values:\n\n        - If `na_rep` is None, and `others` is None, missing values in the\n          Series/Index are omitted from the result.\n        - If `na_rep` is None, and `others` is not None, a row containing a\n          missing value in any of the columns (before concatenation) will\n          have a missing value in the result.\n    join : {'left', 'right', 'outer', 'inner'}, default 'left'\n        Determines the join-style between the calling Series/Index and any\n        Series/Index/DataFrame in `others` (objects without an index need\n        to match the length of the calling Series/Index). To disable\n        alignment, use `.values` on any Series/Index/DataFrame in `others`.\n\n        .. versionadded:: 0.23.0\n        .. versionchanged:: 1.0.0\n            Changed default of `join` from None to `'left'`.\n\n    Returns\n    -------\n    str, Series or Index\n        If `others` is None, `str` is returned, otherwise a `Series/Index`\n        (same type as caller) of objects is returned.\n\n    See Also\n    --------\n    split : Split each string in the Series/Index.\n    join : Join lists contained as elements in the Series/Index.\n\n    Examples\n    --------\n    When not passing `others`, all values are concatenated into a single\n    string:\n\n    >>> s = pd.Series(['a', 'b', np.nan, 'd'])\n    >>> s.str.cat(sep=' ')\n    'a b d'\n\n    By default, NA values in the Series are ignored. Using `na_rep`, they\n    can be given a representation:\n\n    >>> s.str.cat(sep=' ', na_rep='?')\n    'a b ? d'\n\n    If `others` is specified, corresponding values are concatenated with\n    the separator. Result will be a Series of strings.\n\n    >>> s.str.cat(['A', 'B', 'C', 'D'], sep=',')\n    0    a,A\n    1    b,B\n    2    NaN\n    3    d,D\n    dtype: object\n\n    Missing values will remain missing in the result, but can again be\n    represented using `na_rep`\n\n    >>> s.str.cat(['A', 'B', 'C', 'D'], sep=',', na_rep='-')\n    0    a,A\n    1    b,B\n    2    -,C\n    3    d,D\n    dtype: object\n\n    If `sep` is not specified, the values are concatenated without\n    separation.\n\n    >>> s.str.cat(['A', 'B', 'C', 'D'], na_rep='-')\n    0    aA\n    1    bB\n    2    -C\n    3    dD\n    dtype: object\n\n    Series with different indexes can be aligned before concatenation. The\n    `join`-keyword works as in other methods.\n\n    >>> t = pd.Series(['d', 'a', 'e', 'c'], index=[3, 0, 4, 2])\n    >>> s.str.cat(t, join='left', na_rep='-')\n    0    aa\n    1    b-\n    2    -c\n    3    dd\n    dtype: object\n    >>>\n    >>> s.str.cat(t, join='outer', na_rep='-')\n    0    aa\n    1    b-\n    2    -c\n    3    dd\n    4    -e\n    dtype: object\n    >>>\n    >>> s.str.cat(t, join='inner', na_rep='-')\n    0    aa\n    2    -c\n    3    dd\n    dtype: object\n    >>>\n    >>> s.str.cat(t, join='right', na_rep='-')\n    3    dd\n    0    aa\n    4    -e\n    2    -c\n    dtype: object\n\n    For more examples, see :ref:`here <text.concatenate>`.\n    \"\"\"\n    from pandas import Index, Series, concat\n\n    if isinstance(others, str):\n        raise ValueError(\"Did you mean to supply a `sep` keyword?\")\n    if sep is None:\n        sep = \"\"\n\n    if isinstance(self._orig, ABCIndexClass):\n        data = Series(self._orig, index=self._orig)\n    else:  # Series\n        data = self._orig\n\n    # concatenate Series/Index with itself if no \"others\"\n    if others is None:\n        data = ensure_object(data)\n        na_mask = isna(data)\n        if na_rep is None and na_mask.any():\n            data = data[~na_mask]\n        elif na_rep is not None and na_mask.any():\n            data = np.where(na_mask, na_rep, data)\n        return sep.join(data)\n\n    try:\n        # turn anything in \"others\" into lists of Series\n        others = self._get_series_list(others)\n    except ValueError:  # do not catch TypeError raised by _get_series_list\n        raise ValueError(\n            \"If `others` contains arrays or lists (or other \"\n            \"list-likes without an index), these must all be \"\n            \"of the same length as the calling Series/Index.\"\n        )\n\n    # align if required\n    if any(not data.index.equals(x.index) for x in others):\n        # Need to add keys for uniqueness in case of duplicate columns\n        others = concat(\n            others,\n            axis=1,\n            join=(join if join == \"inner\" else \"outer\"),\n            keys=range(len(others)),\n            sort=False,\n            copy=False,\n        )\n        data, others = data.align(others, join=join)\n        others = [others[x] for x in others]  # again list of Series\n\n    all_cols = [ensure_object(x) for x in [data] + others]\n    na_masks = np.array([isna(x) for x in all_cols])\n    union_mask = np.logical_or.reduce(na_masks, axis=0)\n\n    if na_rep is None and union_mask.any():\n        # no na_rep means NaNs for all rows where any column has a NaN\n        # only necessary if there are actually any NaNs\n        result = np.empty(len(data), dtype=object)\n        np.putmask(result, union_mask, np.nan)\n\n        not_masked = ~union_mask\n        result[not_masked] = cat_safe([x[not_masked] for x in all_cols], sep)\n    elif na_rep is not None and union_mask.any():\n        # fill NaNs with na_rep in case there are actually any NaNs\n        all_cols = [\n            np.where(nm, na_rep, col) for nm, col in zip(na_masks, all_cols)\n        ]\n        result = cat_safe(all_cols, sep)\n    else:\n        # no NaNs - can just concatenate\n        result = cat_safe(all_cols, sep)\n\n    if isinstance(self._orig, ABCIndexClass):\n        # add dtype for case that result is all-NA\n        result = Index(result, dtype=object, name=self._orig.name)\n    else:  # Series\n        if is_categorical_dtype(self._orig.dtype):\n            # We need to infer the new categories.\n            dtype = None\n        else:\n            dtype = self._orig.dtype\n        result = Series(result, dtype=dtype, index=data.index, name=self._orig.name)\n    return result",
                "@Appender(_shared_docs[\"str_split\"] % {\"side\": \"beginning\", \"method\": \"split\"})\n@forbid_nonstring_types([\"bytes\"])\ndef split(self, pat=None, n=-1, expand=False):\n    result = str_split(self._parent, pat, n=n)\n    return self._wrap_result(result, expand=expand, returns_string=expand)",
                "@Appender(_shared_docs[\"str_split\"] % {\"side\": \"end\", \"method\": \"rsplit\"})\n@forbid_nonstring_types([\"bytes\"])\ndef rsplit(self, pat=None, n=-1, expand=False):\n    result = str_rsplit(self._parent, pat, n=n)\n    return self._wrap_result(result, expand=expand, returns_string=expand)",
                "@Appender(\n    _shared_docs[\"str_partition\"]\n    % {\n        \"side\": \"first\",\n        \"return\": \"3 elements containing the string itself, followed by two \"\n        \"empty strings\",\n        \"also\": \"rpartition : Split the string at the last occurrence of `sep`.\",\n    }\n)\n@deprecate_kwarg(old_arg_name=\"pat\", new_arg_name=\"sep\")\n@forbid_nonstring_types([\"bytes\"])\ndef partition(self, sep=\" \", expand=True):\n    f = lambda x: x.partition(sep)\n    result = _na_map(f, self._parent)\n    return self._wrap_result(result, expand=expand, returns_string=expand)",
                "@Appender(\n    _shared_docs[\"str_partition\"]\n    % {\n        \"side\": \"last\",\n        \"return\": \"3 elements containing two empty strings, followed by the \"\n        \"string itself\",\n        \"also\": \"partition : Split the string at the first occurrence of `sep`.\",\n    }\n)\n@deprecate_kwarg(old_arg_name=\"pat\", new_arg_name=\"sep\")\n@forbid_nonstring_types([\"bytes\"])\ndef rpartition(self, sep=\" \", expand=True):\n    f = lambda x: x.rpartition(sep)\n    result = _na_map(f, self._parent)\n    return self._wrap_result(result, expand=expand, returns_string=expand)",
                "@copy(str_get)\ndef get(self, i):\n    result = str_get(self._parent, i)\n    return self._wrap_result(result)",
                "@copy(str_join)\n@forbid_nonstring_types([\"bytes\"])\ndef join(self, sep):\n    result = str_join(self._parent, sep)\n    return self._wrap_result(result)",
                "@copy(str_contains)\n@forbid_nonstring_types([\"bytes\"])\ndef contains(self, pat, case=True, flags=0, na=np.nan, regex=True):\n    result = str_contains(\n        self._parent, pat, case=case, flags=flags, na=na, regex=regex\n    )\n    return self._wrap_result(result, fill_value=na, returns_string=False)",
                "@copy(str_match)\n@forbid_nonstring_types([\"bytes\"])\ndef match(self, pat, case=True, flags=0, na=np.nan):\n    result = str_match(self._parent, pat, case=case, flags=flags, na=na)\n    return self._wrap_result(result, fill_value=na, returns_string=False)",
                "@copy(str_replace)\n@forbid_nonstring_types([\"bytes\"])\ndef replace(self, pat, repl, n=-1, case=None, flags=0, regex=True):\n    result = str_replace(\n        self._parent, pat, repl, n=n, case=case, flags=flags, regex=regex\n    )\n    return self._wrap_result(result)",
                "@copy(str_repeat)\n@forbid_nonstring_types([\"bytes\"])\ndef repeat(self, repeats):\n    result = str_repeat(self._parent, repeats)\n    return self._wrap_result(result)",
                "@copy(str_pad)\n@forbid_nonstring_types([\"bytes\"])\ndef pad(self, width, side=\"left\", fillchar=\" \"):\n    result = str_pad(self._parent, width, side=side, fillchar=fillchar)\n    return self._wrap_result(result)",
                "@Appender(_shared_docs[\"str_pad\"] % dict(side=\"left and right\", method=\"center\"))\n@forbid_nonstring_types([\"bytes\"])\ndef center(self, width, fillchar=\" \"):\n    return self.pad(width, side=\"both\", fillchar=fillchar)",
                "@Appender(_shared_docs[\"str_pad\"] % dict(side=\"right\", method=\"ljust\"))\n@forbid_nonstring_types([\"bytes\"])\ndef ljust(self, width, fillchar=\" \"):\n    return self.pad(width, side=\"right\", fillchar=fillchar)",
                "@Appender(_shared_docs[\"str_pad\"] % dict(side=\"left\", method=\"rjust\"))\n@forbid_nonstring_types([\"bytes\"])\ndef rjust(self, width, fillchar=\" \"):\n    return self.pad(width, side=\"left\", fillchar=fillchar)",
                "@forbid_nonstring_types([\"bytes\"])\ndef zfill(self, width):\n    \"\"\"\n    Pad strings in the Series/Index by prepending '0' characters.\n\n    Strings in the Series/Index are padded with '0' characters on the\n    left of the string to reach a total string length  `width`. Strings\n    in the Series/Index with length greater or equal to `width` are\n    unchanged.\n\n    Parameters\n    ----------\n    width : int\n        Minimum length of resulting string; strings with length less\n        than `width` be prepended with '0' characters.\n\n    Returns\n    -------\n    Series/Index of objects.\n\n    See Also\n    --------\n    Series.str.rjust : Fills the left side of strings with an arbitrary\n        character.\n    Series.str.ljust : Fills the right side of strings with an arbitrary\n        character.\n    Series.str.pad : Fills the specified sides of strings with an arbitrary\n        character.\n    Series.str.center : Fills boths sides of strings with an arbitrary\n        character.\n\n    Notes\n    -----\n    Differs from :meth:`str.zfill` which has special handling\n    for '+'/'-' in the string.\n\n    Examples\n    --------\n    >>> s = pd.Series(['-1', '1', '1000', 10, np.nan])\n    >>> s\n    0      -1\n    1       1\n    2    1000\n    3      10\n    4     NaN\n    dtype: object\n\n    Note that ``10`` and ``NaN`` are not strings, therefore they are\n    converted to ``NaN``. The minus sign in ``'-1'`` is treated as a\n    regular character and the zero is added to the left of it\n    (:meth:`str.zfill` would have moved it to the left). ``1000``\n    remains unchanged as it is longer than `width`.\n\n    >>> s.str.zfill(3)\n    0     0-1\n    1     001\n    2    1000\n    3     NaN\n    4     NaN\n    dtype: object\n    \"\"\"\n    result = str_pad(self._parent, width, side=\"left\", fillchar=\"0\")\n    return self._wrap_result(result)",
                "@copy(str_slice)\ndef slice(self, start=None, stop=None, step=None):\n    result = str_slice(self._parent, start, stop, step)\n    return self._wrap_result(result)",
                "@copy(str_slice_replace)\n@forbid_nonstring_types([\"bytes\"])\ndef slice_replace(self, start=None, stop=None, repl=None):\n    result = str_slice_replace(self._parent, start, stop, repl)\n    return self._wrap_result(result)",
                "@copy(str_decode)\ndef decode(self, encoding, errors=\"strict\"):\n    # need to allow bytes here\n    result = str_decode(self._parent, encoding, errors)\n    # TODO: Not sure how to handle this.\n    return self._wrap_result(result, returns_string=False)",
                "@copy(str_encode)\n@forbid_nonstring_types([\"bytes\"])\ndef encode(self, encoding, errors=\"strict\"):\n    result = str_encode(self._parent, encoding, errors)\n    return self._wrap_result(result, returns_string=False)",
                "@Appender(\n    _shared_docs[\"str_strip\"] % dict(side=\"left and right sides\", method=\"strip\")\n)\n@forbid_nonstring_types([\"bytes\"])\ndef strip(self, to_strip=None):\n    result = str_strip(self._parent, to_strip, side=\"both\")\n    return self._wrap_result(result)",
                "@Appender(_shared_docs[\"str_strip\"] % dict(side=\"left side\", method=\"lstrip\"))\n@forbid_nonstring_types([\"bytes\"])\ndef lstrip(self, to_strip=None):\n    result = str_strip(self._parent, to_strip, side=\"left\")\n    return self._wrap_result(result)",
                "@Appender(_shared_docs[\"str_strip\"] % dict(side=\"right side\", method=\"rstrip\"))\n@forbid_nonstring_types([\"bytes\"])\ndef rstrip(self, to_strip=None):\n    result = str_strip(self._parent, to_strip, side=\"right\")\n    return self._wrap_result(result)",
                "@copy(str_wrap)\n@forbid_nonstring_types([\"bytes\"])\ndef wrap(self, width, **kwargs):\n    result = str_wrap(self._parent, width, **kwargs)\n    return self._wrap_result(result)",
                "@copy(str_get_dummies)\n@forbid_nonstring_types([\"bytes\"])\ndef get_dummies(self, sep=\"|\"):\n    # we need to cast to Series of strings as only that has all\n    # methods available for making the dummies...\n    data = self._orig.astype(str) if self._is_categorical else self._parent\n    result, name = str_get_dummies(data, sep)\n    return self._wrap_result(\n        result,\n        use_codes=(not self._is_categorical),\n        name=name,\n        expand=True,\n        returns_string=False,\n    )",
                "@copy(str_translate)\n@forbid_nonstring_types([\"bytes\"])\ndef translate(self, table):\n    result = str_translate(self._parent, table)\n    return self._wrap_result(result)",
                "@copy(str_extract)\n@forbid_nonstring_types([\"bytes\"])\ndef extract(self, pat, flags=0, expand=True):\n    return str_extract(self, pat, flags=flags, expand=expand)",
                "@copy(str_extractall)\n@forbid_nonstring_types([\"bytes\"])\ndef extractall(self, pat, flags=0):\n    return str_extractall(self._orig, pat, flags=flags)",
                "@Appender(\n    _shared_docs[\"find\"]\n    % dict(\n        side=\"lowest\",\n        method=\"find\",\n        also=\"rfind : Return highest indexes in each strings.\",\n    )\n)\n@forbid_nonstring_types([\"bytes\"])\ndef find(self, sub, start=0, end=None):\n    result = str_find(self._parent, sub, start=start, end=end, side=\"left\")\n    return self._wrap_result(result, returns_string=False)",
                "@Appender(\n    _shared_docs[\"find\"]\n    % dict(\n        side=\"highest\",\n        method=\"rfind\",\n        also=\"find : Return lowest indexes in each strings.\",\n    )\n)\n@forbid_nonstring_types([\"bytes\"])\ndef rfind(self, sub, start=0, end=None):\n    result = str_find(self._parent, sub, start=start, end=end, side=\"right\")\n    return self._wrap_result(result, returns_string=False)",
                "@forbid_nonstring_types([\"bytes\"])\ndef normalize(self, form):\n    \"\"\"\n    Return the Unicode normal form for the strings in the Series/Index.\n    For more information on the forms, see the\n    :func:`unicodedata.normalize`.\n\n    Parameters\n    ----------\n    form : {'NFC', 'NFKC', 'NFD', 'NFKD'}\n        Unicode form.\n\n    Returns\n    -------\n    normalized : Series/Index of objects\n    \"\"\"\n    import unicodedata\n\n    f = lambda x: unicodedata.normalize(form, x)\n    result = _na_map(f, self._parent)\n    return self._wrap_result(result)",
                "@Appender(\n    _shared_docs[\"index\"]\n    % dict(\n        side=\"lowest\",\n        similar=\"find\",\n        method=\"index\",\n        also=\"rindex : Return highest indexes in each strings.\",\n    )\n)\n@forbid_nonstring_types([\"bytes\"])\ndef index(self, sub, start=0, end=None):\n    result = str_index(self._parent, sub, start=start, end=end, side=\"left\")\n    return self._wrap_result(result, returns_string=False)",
                "@Appender(\n    _shared_docs[\"index\"]\n    % dict(\n        side=\"highest\",\n        similar=\"rfind\",\n        method=\"rindex\",\n        also=\"index : Return lowest indexes in each strings.\",\n    )\n)\n@forbid_nonstring_types([\"bytes\"])\ndef rindex(self, sub, start=0, end=None):\n    result = str_index(self._parent, sub, start=start, end=end, side=\"right\")\n    return self._wrap_result(result, returns_string=False)",
                "@classmethod\ndef _make_accessor(cls, data):\n    cls._validate(data)\n    return cls(data)",
                "def scalar_rep(x):\n    try:\n        return bytes.__mul__(x, repeats)\n    except TypeError:\n        return str.__mul__(x, repeats)",
                "def rep(x, r):\n    try:\n        return bytes.__mul__(x, r)\n    except TypeError:\n        return str.__mul__(x, r)",
                "@wraps(func)\ndef wrapper(self, *args, **kwargs):\n    if self._inferred_dtype not in allowed_types:\n        msg = (\n            \"Cannot use .str.{name} with values of inferred dtype \"\n            \"{inf_type!r}.\".format(\n                name=func_name, inf_type=self._inferred_dtype\n            )\n        )\n        raise TypeError(msg)\n    return func(self, *args, **kwargs)",
                "def g(x):\n    try:\n        return f(x)\n    except (TypeError, AttributeError):\n        return na_value",
                "def cons_row(x):\n    if is_list_like(x):\n        return x\n    else:\n        return [x]"
            ],
            "inscope_function_signatures": [
                "cat_core(list_of_columns: List, sep: str)",
                "cat_safe(list_of_columns: List, sep: str)",
                "_na_map(f, arr, na_result=np.nan, dtype=object)",
                "_map(f, arr, na_mask=False, na_value=np.nan, dtype=object)",
                "str_count(arr, pat, flags=0)",
                "str_contains(arr, pat, case=True, flags=0, na=np.nan, regex=True)",
                "str_startswith(arr, pat, na=np.nan)",
                "str_endswith(arr, pat, na=np.nan)",
                "str_replace(arr, pat, repl, n=-1, case=None, flags=0, regex=True)",
                "str_repeat(arr, repeats)",
                "str_match(arr, pat, case=True, flags=0, na=np.nan)",
                "_get_single_group_name(rx)",
                "_groups_or_na_fun(regex)",
                "_result_dtype(arr)",
                "_str_extract_noexpand(arr, pat, flags=0)",
                "_str_extract_frame(arr, pat, flags=0)",
                "str_extract(arr, pat, flags=0, expand=True)",
                "str_extractall(arr, pat, flags=0)",
                "str_get_dummies(arr, sep='|')",
                "str_join(arr, sep)",
                "str_findall(arr, pat, flags=0)",
                "str_find(arr, sub, start=0, end=None, side='left')",
                "str_index(arr, sub, start=0, end=None, side='left')",
                "str_pad(arr, width, side='left', fillchar=' ')",
                "str_split(arr, pat=None, n=None)",
                "str_rsplit(arr, pat=None, n=None)",
                "str_slice(arr, start=None, stop=None, step=None)",
                "str_slice_replace(arr, start=None, stop=None, repl=None)",
                "str_strip(arr, to_strip=None, side='both')",
                "str_wrap(arr, width, **kwargs)",
                "str_translate(arr, table)",
                "str_get(arr, i)",
                "str_decode(arr, encoding, errors='strict')",
                "str_encode(arr, encoding, errors='strict')",
                "forbid_nonstring_types(forbidden, name=None)",
                "_noarg_wrapper(f, name=None, docstring=None, forbidden_types=['bytes'], returns_string=True, **kargs)",
                "_pat_wrapper(f, flags=False, na=False, name=None, forbidden_types=['bytes'], returns_string=True, **kwargs)",
                "copy(source)",
                "f(x)",
                "f(x)",
                "f(x)",
                "_forbid_nonstring_types(func)",
                "wrapper(self)",
                "wrapper1(self, pat)",
                "wrapper2(self, pat, flags=0, **kwargs)",
                "wrapper3(self, pat, na=np.nan)",
                "do_copy(target)",
                "__init__(self, data)",
                "_validate(data)",
                "__getitem__(self, key)",
                "__iter__(self)",
                "_wrap_result(self, result, use_codes=True, name=None, expand=None, fill_value=np.nan, returns_string=True)",
                "_get_series_list(self, others)",
                "cat(self, others=None, sep=None, na_rep=None, join='left')",
                "split(self, pat=None, n=-1, expand=False)",
                "rsplit(self, pat=None, n=-1, expand=False)",
                "partition(self, sep=' ', expand=True)",
                "rpartition(self, sep=' ', expand=True)",
                "get(self, i)",
                "join(self, sep)",
                "contains(self, pat, case=True, flags=0, na=np.nan, regex=True)",
                "match(self, pat, case=True, flags=0, na=np.nan)",
                "replace(self, pat, repl, n=-1, case=None, flags=0, regex=True)",
                "repeat(self, repeats)",
                "pad(self, width, side='left', fillchar=' ')",
                "center(self, width, fillchar=' ')",
                "ljust(self, width, fillchar=' ')",
                "rjust(self, width, fillchar=' ')",
                "zfill(self, width)",
                "slice(self, start=None, stop=None, step=None)",
                "slice_replace(self, start=None, stop=None, repl=None)",
                "decode(self, encoding, errors='strict')",
                "encode(self, encoding, errors='strict')",
                "strip(self, to_strip=None)",
                "lstrip(self, to_strip=None)",
                "rstrip(self, to_strip=None)",
                "wrap(self, width, **kwargs)",
                "get_dummies(self, sep='|')",
                "translate(self, table)",
                "extract(self, pat, flags=0, expand=True)",
                "extractall(self, pat, flags=0)",
                "find(self, sub, start=0, end=None)",
                "rfind(self, sub, start=0, end=None)",
                "normalize(self, form)",
                "index(self, sub, start=0, end=None)",
                "rindex(self, sub, start=0, end=None)",
                "_make_accessor(cls, data)",
                "scalar_rep(x)",
                "rep(x, r)",
                "wrapper(self, *args, **kwargs)",
                "g(x)",
                "cons_row(x)"
            ],
            "variables_in_file": {
                "_cpython_optimized_encoders": [
                    1793,
                    35,
                    44
                ],
                "_cpython_optimized_decoders": [
                    1770,
                    44
                ],
                "_shared_docs": [
                    3072,
                    2825,
                    3085,
                    2958,
                    2703,
                    3225,
                    3230,
                    2722,
                    3235,
                    2727,
                    2984,
                    3240,
                    2732,
                    3245,
                    46,
                    3250,
                    2997,
                    3253,
                    3133,
                    2627,
                    3139,
                    2891,
                    3407,
                    2898,
                    2643,
                    3413,
                    3031,
                    2904,
                    3419,
                    2397,
                    2529,
                    3425,
                    2535,
                    3431,
                    2541,
                    3437,
                    3058,
                    3443,
                    3449,
                    3455
                ],
                "dict": [
                    3073,
                    3210,
                    3211,
                    3212,
                    3213,
                    3216,
                    3217,
                    793,
                    2722,
                    2727,
                    2985,
                    2732,
                    46,
                    818,
                    2998,
                    3395,
                    3396,
                    3397,
                    3398,
                    3399,
                    3400,
                    3401,
                    3402,
                    2891,
                    3403,
                    1746,
                    2898,
                    2904,
                    1007,
                    3059
                ],
                "List": [
                    49,
                    74
                ],
                "str": [
                    2921,
                    74,
                    1292,
                    686,
                    2319,
                    752,
                    49,
                    1076,
                    1364,
                    1014,
                    695,
                    1272,
                    603,
                    1020
                ],
                "sep": [
                    1153,
                    66,
                    2337,
                    69,
                    2374,
                    2654,
                    2666,
                    2922,
                    2380,
                    2638,
                    2383,
                    2321,
                    1074,
                    2322,
                    1076,
                    1079,
                    1086,
                    95
                ],
                "np.sum": [
                    68,
                    71
                ],
                "np": [
                    147,
                    148,
                    787,
                    1914,
                    2080,
                    2336,
                    2679,
                    429,
                    697,
                    1083,
                    2364,
                    2365,
                    702,
                    2370,
                    2371,
                    68,
                    71,
                    2378,
                    1750,
                    225,
                    2155,
                    749,
                    110,
                    2031,
                    2671,
                    115,
                    756,
                    117,
                    374,
                    2165,
                    121,
                    122,
                    125,
                    1022,
                    127
                ],
                "list_of_columns": [
                    99,
                    68,
                    69,
                    70,
                    95
                ],
                "list_with_sep": [
                    69,
                    70,
                    71
                ],
                "len": [
                    2080,
                    2370,
                    69,
                    136,
                    3131,
                    622,
                    1394,
                    116,
                    821,
                    1748,
                    2356,
                    1368,
                    1083,
                    3132,
                    221,
                    2078
                ],
                "result": [
                    2048,
                    2049,
                    2050,
                    1032,
                    3082,
                    1035,
                    3083,
                    2063,
                    2075,
                    2076,
                    2078,
                    2079,
                    2080,
                    2090,
                    2101,
                    2102,
                    2105,
                    2106,
                    2113,
                    2118,
                    2122,
                    2123,
                    3068,
                    2639,
                    2640,
                    3069,
                    95,
                    2655,
                    2656,
                    2660,
                    2661,
                    2666,
                    107,
                    2667,
                    2672,
                    2675,
                    2680,
                    2681,
                    2686,
                    127,
                    2689,
                    2694,
                    2695,
                    2700,
                    2701,
                    148,
                    149,
                    150,
                    151,
                    698,
                    699,
                    2798,
                    2799,
                    2803,
                    2804,
                    2809,
                    2810,
                    2815,
                    2817,
                    2822,
                    2823,
                    787,
                    796,
                    798,
                    804,
                    2370,
                    2371,
                    2374,
                    2380,
                    2383,
                    2895,
                    2896,
                    2387,
                    2901,
                    2902,
                    1882,
                    1883,
                    2394,
                    2395,
                    2907,
                    2908,
                    2913,
                    2914,
                    2922,
                    2924,
                    1905,
                    1906,
                    1910,
                    1911,
                    2934,
                    2935,
                    1915,
                    1916,
                    922,
                    923,
                    2993,
                    2994,
                    3006,
                    3007,
                    3028,
                    3029,
                    2532,
                    2533,
                    2538,
                    2539,
                    2044,
                    2045
                ],
                "cat_core": [
                    95
                ],
                "TypeError": [
                    96,
                    128,
                    102,
                    1863,
                    685,
                    1294,
                    143,
                    1075,
                    694,
                    1366,
                    1369,
                    1274,
                    604,
                    1373,
                    2175
                ],
                "column": [
                    99,
                    100
                ],
                "dtype": [
                    1030,
                    1033,
                    2057,
                    2059,
                    146,
                    827,
                    832,
                    2118,
                    2122,
                    2391,
                    2393,
                    2394,
                    732,
                    735,
                    100,
                    101,
                    105,
                    112,
                    117
                ],
                "lib.infer_dtype": [
                    2002,
                    100
                ],
                "lib": [
                    100,
                    2002,
                    150,
                    153,
                    127,
                    1087
                ],
                "format": [
                    1858,
                    103
                ],
                "np.nan": [
                    2080,
                    225,
                    2371,
                    2679,
                    429,
                    110,
                    749,
                    2031,
                    2671,
                    115,
                    147,
                    756,
                    374,
                    1750,
                    1914,
                    702
                ],
                "object": [
                    770,
                    802,
                    2370,
                    110,
                    115,
                    787,
                    149,
                    822,
                    2387,
                    697,
                    122,
                    796
                ],
                "_map": [
                    112,
                    146
                ],
                "f": [
                    1920,
                    1921,
                    1922,
                    1411,
                    1284,
                    1412,
                    1286,
                    1795,
                    1288,
                    1798,
                    1799,
                    142,
                    1403,
                    1304,
                    153,
                    1306,
                    1308,
                    1915,
                    425,
                    426,
                    1581,
                    2655,
                    1905,
                    1599,
                    1601,
                    1603,
                    1606,
                    2638,
                    2639,
                    1489,
                    1490,
                    3027,
                    3028,
                    1752,
                    1882,
                    221,
                    222,
                    733,
                    480,
                    481,
                    735,
                    1376,
                    1378,
                    1380,
                    1885,
                    2654,
                    1384,
                    362,
                    1772,
                    365,
                    1775,
                    112,
                    368,
                    370,
                    371,
                    625,
                    627,
                    1392,
                    1397,
                    760,
                    1776,
                    1402,
                    635,
                    1910,
                    637,
                    127
                ],
                "arr": [
                    1153,
                    1412,
                    1029,
                    1030,
                    1670,
                    1032,
                    1288,
                    1799,
                    146,
                    767,
                    787,
                    790,
                    920,
                    153,
                    922,
                    795,
                    923,
                    1308,
                    1690,
                    799,
                    801,
                    426,
                    1581,
                    688,
                    1072,
                    1074,
                    1076,
                    821,
                    1079,
                    824,
                    698,
                    827,
                    1083,
                    829,
                    1087,
                    1606,
                    1490,
                    1752,
                    222,
                    735,
                    1247,
                    481,
                    1384,
                    1004,
                    1005,
                    112,
                    369,
                    1776,
                    371,
                    116,
                    1011,
                    1013,
                    119,
                    120,
                    121,
                    122,
                    1403,
                    124,
                    637,
                    127
                ],
                "na_result": [
                    112
                ],
                "np.ndarray": [
                    121,
                    2155,
                    2165,
                    117
                ],
                "isinstance": [
                    1292,
                    2319,
                    2065,
                    2324,
                    917,
                    790,
                    2083,
                    2098,
                    1986,
                    1998,
                    2385,
                    1746,
                    1364,
                    603,
                    2012,
                    2144,
                    2149,
                    2151,
                    2153,
                    2155,
                    1004,
                    752,
                    2164,
                    2165,
                    1014,
                    119,
                    1272,
                    121,
                    1020
                ],
                "ABCSeries": [
                    2164,
                    2149,
                    119
                ],
                "arr.values": [
                    120
                ],
                "np.asarray": [
                    697,
                    122
                ],
                "na_mask": [
                    2336,
                    123,
                    2332,
                    2333,
                    2334,
                    2335
                ],
                "mask": [
                    148,
                    124,
                    125,
                    127
                ],
                "isna": [
                    124,
                    2332,
                    2364
                ],
                "convert": [
                    125,
                    127
                ],
                "np.all": [
                    125
                ],
                "lib.map_infer_mask": [
                    127
                ],
                "mask.view": [
                    127
                ],
                "np.uint8": [
                    127
                ],
                "AttributeError": [
                    128,
                    1987,
                    143,
                    2008,
                    825
                ],
                "p_err": [
                    136,
                    131
                ],
                "e.args": [
                    136
                ],
                "e": [
                    136,
                    138
                ],
                "re.search": [
                    136
                ],
                "re": [
                    352,
                    999,
                    136,
                    621,
                    783,
                    624,
                    816,
                    728,
                    1401,
                    730,
                    220,
                    1246,
                    350
                ],
                "x": [
                    2070,
                    2071,
                    2073,
                    2075,
                    2078,
                    2080,
                    1569,
                    1575,
                    1578,
                    1087,
                    1599,
                    1601,
                    1603,
                    2638,
                    2654,
                    2154,
                    2157,
                    625,
                    627,
                    2164,
                    2165,
                    2166,
                    635,
                    2173,
                    142,
                    3223,
                    1690,
                    3228,
                    3233,
                    3238,
                    3243,
                    684,
                    686,
                    3248,
                    693,
                    695,
                    1746,
                    1747,
                    1748,
                    1749,
                    733,
                    221,
                    1772,
                    1775,
                    752,
                    754,
                    1795,
                    1284,
                    1286,
                    1798,
                    1304,
                    1306,
                    2350,
                    2361,
                    2363,
                    2364,
                    2374,
                    3405,
                    3411,
                    3417,
                    3423,
                    1376,
                    1378,
                    1380,
                    3429,
                    362,
                    3435,
                    365,
                    368,
                    369,
                    1392,
                    3441,
                    1397,
                    3447,
                    1402,
                    3453,
                    1411,
                    425,
                    1489,
                    3027,
                    480
                ],
                "na_value": [
                    144,
                    147,
                    148
                ],
                "g": [
                    2019,
                    2020,
                    2021,
                    2023,
                    146
                ],
                "np.putmask": [
                    2371,
                    148
                ],
                "result.dtype": [
                    149
                ],
                "lib.maybe_convert_objects": [
                    150
                ],
                "lib.map_infer": [
                    153,
                    1087
                ],
                "regex": [
                    783,
                    784,
                    786,
                    788,
                    793,
                    794,
                    816,
                    817,
                    818,
                    819,
                    730,
                    348,
                    733,
                    220,
                    221,
                    352,
                    607,
                    354,
                    1246,
                    1247,
                    999,
                    1001,
                    362,
                    747,
                    749,
                    1007,
                    1008,
                    2673,
                    754,
                    1401,
                    1402,
                    1019,
                    2687
                ],
                "re.compile": [
                    352,
                    999,
                    783,
                    624,
                    816,
                    1401,
                    730,
                    220,
                    1246
                ],
                "pat": [
                    1411,
                    2951,
                    2956,
                    783,
                    920,
                    922,
                    1915,
                    425,
                    2680,
                    816,
                    1086,
                    1087,
                    730,
                    220,
                    606,
                    1246,
                    352,
                    480,
                    2532,
                    999,
                    2538,
                    365,
                    622,
                    367,
                    624,
                    1389,
                    1392,
                    627,
                    1394,
                    1397,
                    1905,
                    1910,
                    2673,
                    1401,
                    635,
                    2687
                ],
                "flags": [
                    2951,
                    2956,
                    783,
                    920,
                    922,
                    816,
                    728,
                    730,
                    220,
                    1246,
                    350,
                    352,
                    609,
                    999,
                    621,
                    622,
                    624,
                    2673,
                    1910,
                    2680,
                    1918,
                    2687
                ],
                "regex.findall": [
                    1019,
                    221,
                    1247
                ],
                "_na_map": [
                    1153,
                    1412,
                    1670,
                    1799,
                    1288,
                    1690,
                    1308,
                    426,
                    1581,
                    688,
                    1606,
                    2639,
                    1490,
                    3028,
                    1752,
                    1882,
                    222,
                    1247,
                    735,
                    481,
                    2655,
                    1384,
                    1776,
                    369,
                    370,
                    371,
                    1403,
                    637
                ],
                "int": [
                    1288,
                    1308,
                    222,
                    3135
                ],
                "case": [
                    609,
                    616,
                    617,
                    364,
                    620,
                    2673,
                    727,
                    2680,
                    349,
                    2687
                ],
                "re.IGNORECASE": [
                    728,
                    621,
                    350
                ],
                "regex.groups": [
                    354,
                    1001,
                    747,
                    749,
                    1008,
                    786,
                    819,
                    794
                ],
                "warnings.warn": [
                    355
                ],
                "warnings": [
                    355
                ],
                "UserWarning": [
                    358
                ],
                "bool": [
                    481,
                    2083,
                    426,
                    362,
                    370,
                    371,
                    917,
                    732,
                    733
                ],
                "regex.search": [
                    362,
                    754
                ],
                "upper_pat": [
                    368,
                    367
                ],
                "pat.upper": [
                    367
                ],
                "uppered": [
                    369,
                    370
                ],
                "x.upper": [
                    369,
                    3228
                ],
                "na": [
                    481,
                    426,
                    2673,
                    370,
                    371,
                    2675,
                    2680,
                    2681,
                    1915,
                    1918,
                    735
                ],
                "x.startswith": [
                    425
                ],
                "x.endswith": [
                    480
                ],
                "repl": [
                    635,
                    1576,
                    622,
                    625,
                    627,
                    2809,
                    633,
                    603,
                    1565,
                    1566,
                    2687
                ],
                "callable": [
                    633,
                    603,
                    622
                ],
                "is_compiled_re": [
                    608,
                    622,
                    629,
                    606
                ],
                "is_re": [
                    606
                ],
                "ValueError": [
                    1281,
                    610,
                    1889,
                    2084,
                    1605,
                    1382,
                    2342,
                    2343,
                    1002,
                    748,
                    2320,
                    2003,
                    1301,
                    630,
                    791,
                    918,
                    634
                ],
                "n": [
                    1409,
                    1410,
                    1411,
                    2532,
                    2538,
                    1390,
                    623,
                    1391,
                    625,
                    1392,
                    627,
                    1395,
                    1396,
                    1397,
                    1399,
                    1400,
                    1402,
                    635,
                    2687
                ],
                "compiled": [
                    624,
                    625
                ],
                "compiled.sub": [
                    625
                ],
                "x.replace": [
                    635,
                    627
                ],
                "is_scalar": [
                    680
                ],
                "repeats": [
                    2694,
                    680,
                    684,
                    686,
                    697,
                    698
                ],
                "bytes.__mul__": [
                    684,
                    693
                ],
                "bytes": [
                    684,
                    693
                ],
                "str.__mul__": [
                    686,
                    695
                ],
                "scalar_rep": [
                    688
                ],
                "r": [
                    693,
                    695
                ],
                "libops.vec_binop": [
                    698
                ],
                "libops": [
                    698
                ],
                "com.values_from_object": [
                    698
                ],
                "com": [
                    698
                ],
                "rep": [
                    698
                ],
                "regex.match": [
                    733
                ],
                "pop": [
                    740
                ],
                "list": [
                    2105,
                    740,
                    2159
                ],
                "rx.groupindex.keys": [
                    740
                ],
                "rx.groupindex": [
                    740
                ],
                "rx": [
                    740
                ],
                "IndexError": [
                    741
                ],
                "empty_row": [
                    753,
                    749,
                    758
                ],
                "m": [
                    754,
                    755,
                    756
                ],
                "item": [
                    756
                ],
                "m.groups": [
                    756
                ],
                "arr.dtype.name": [
                    767
                ],
                "arr.dtype": [
                    767
                ],
                "groups_or_na": [
                    784,
                    817,
                    787,
                    829,
                    799
                ],
                "_groups_or_na_fun": [
                    784,
                    817
                ],
                "np.array": [
                    787,
                    2364
                ],
                "val": [
                    787,
                    829,
                    799
                ],
                "name": [
                    1920,
                    788,
                    792,
                    922,
                    923,
                    804,
                    2089,
                    2090,
                    2091,
                    2094,
                    2106,
                    1852,
                    2113,
                    2118,
                    2122,
                    1880,
                    1885,
                    2922,
                    2926,
                    1903,
                    1908,
                    1913
                ],
                "_get_single_group_name": [
                    788
                ],
                "ABCIndexClass": [
                    2144,
                    2151,
                    1004,
                    2065,
                    2098,
                    2385,
                    2164,
                    2324,
                    790
                ],
                "names": [
                    1007,
                    1008,
                    818,
                    819,
                    793,
                    794
                ],
                "zip": [
                    793,
                    818,
                    2378,
                    1007
                ],
                "regex.groupindex.values": [
                    793,
                    818,
                    1007
                ],
                "regex.groupindex": [
                    793,
                    818,
                    1007
                ],
                "regex.groupindex.keys": [
                    793,
                    818,
                    1007
                ],
                "columns": [
                    800,
                    1033,
                    1008,
                    819,
                    822,
                    794,
                    796,
                    830
                ],
                "names.get": [
                    1008,
                    794,
                    819
                ],
                "i": [
                    2018,
                    2019,
                    2660,
                    2022,
                    2023,
                    1008,
                    819,
                    1747,
                    1748,
                    1749,
                    794,
                    1085,
                    1087
                ],
                "range": [
                    1008,
                    794,
                    819,
                    2356
                ],
                "arr.empty": [
                    795
                ],
                "DataFrame": [
                    828,
                    2156,
                    822,
                    796,
                    798
                ],
                "arr.index": [
                    824,
                    801,
                    1011,
                    1029
                ],
                "result_index": [
                    824,
                    826,
                    831
                ],
                "_result_dtype": [
                    827,
                    1030
                ],
                "expand": [
                    2656,
                    2083,
                    2116,
                    2533,
                    2086,
                    2951,
                    2539,
                    2061,
                    2063,
                    2640,
                    2065,
                    917,
                    919,
                    2104,
                    923
                ],
                "_str_extract_frame": [
                    920
                ],
                "arr._orig": [
                    920
                ],
                "_str_extract_noexpand": [
                    922
                ],
                "arr._parent": [
                    922
                ],
                "arr._wrap_result": [
                    923
                ],
                "reset_index": [
                    1005
                ],
                "arr.to_series": [
                    1005
                ],
                "match_list": [
                    1009,
                    1033,
                    1023
                ],
                "index_list": [
                    1025,
                    1010,
                    1029
                ],
                "is_mi": [
                    1016,
                    1011
                ],
                "arr.index.nlevels": [
                    1011
                ],
                "subject_key": [
                    1024,
                    1017,
                    1013
                ],
                "subject": [
                    1019,
                    1013,
                    1014
                ],
                "arr.items": [
                    1013
                ],
                "match_i": [
                    1024,
                    1019
                ],
                "match_tuple": [
                    1019,
                    1020,
                    1021,
                    1022
                ],
                "enumerate": [
                    1019,
                    1085
                ],
                "na_tuple": [
                    1022,
                    1023
                ],
                "group": [
                    1022
                ],
                "np.NaN": [
                    1022
                ],
                "match_list.append": [
                    1023
                ],
                "result_key": [
                    1024,
                    1025
                ],
                "tuple": [
                    1024
                ],
                "index_list.append": [
                    1025
                ],
                "index": [
                    2115,
                    1029,
                    2118,
                    1033,
                    2122
                ],
                "MultiIndex.from_tuples": [
                    2106,
                    1029
                ],
                "MultiIndex": [
                    2106,
                    1029
                ],
                "arr.index.names": [
                    1029
                ],
                "arr._constructor_expanddim": [
                    1032
                ],
                "arr.fillna": [
                    1072
                ],
                "arr.astype": [
                    1076
                ],
                "tags": [
                    1088,
                    1078,
                    1080,
                    1081,
                    1083,
                    1085
                ],
                "set": [
                    1078,
                    1847
                ],
                "ts": [
                    1080,
                    1079
                ],
                "arr.str.split": [
                    1079
                ],
                "arr.str": [
                    1079
                ],
                "tags.update": [
                    1080
                ],
                "sorted": [
                    1081
                ],
                "dummies": [
                    1088,
                    1083,
                    1087
                ],
                "np.empty": [
                    2370,
                    1083
                ],
                "np.int64": [
                    1083
                ],
                "t": [
                    1085,
                    1086
                ],
                "arr.to_numpy": [
                    1087
                ],
                "sep.join": [
                    1153,
                    2337
                ],
                "sub": [
                    1304,
                    1284,
                    1286,
                    3082,
                    1306,
                    1292,
                    1294,
                    2993,
                    1272,
                    1274,
                    3068,
                    3006
                ],
                "msg": [
                    1857,
                    1863,
                    1293,
                    1294,
                    1365,
                    1366,
                    1273,
                    1274,
                    1372,
                    1373
                ],
                "msg.format": [
                    1366,
                    1274,
                    1373,
                    1294
                ],
                "__name__": [
                    1366,
                    1274,
                    1373,
                    1294
                ],
                "type": [
                    1366,
                    1274,
                    1373,
                    1294
                ],
                "side": [
                    1600,
                    1377,
                    1602,
                    1379,
                    1598,
                    2700,
                    1296,
                    1298,
                    1276,
                    1278,
                    1375
                ],
                "method": [
                    1284,
                    1286,
                    1297,
                    1299,
                    1304,
                    1306,
                    1277,
                    1279
                ],
                "end": [
                    1283,
                    1286,
                    3082,
                    2993,
                    1303,
                    1306,
                    3068,
                    3006
                ],
                "getattr": [
                    1284,
                    1286,
                    1994,
                    1995,
                    2090,
                    1304,
                    1306
                ],
                "start": [
                    1569,
                    1570,
                    1284,
                    1286,
                    1574,
                    1575,
                    3082,
                    1488,
                    2993,
                    2803,
                    1304,
                    2809,
                    1306,
                    3068,
                    3006
                ],
                "fillchar": [
                    1376,
                    1378,
                    1380,
                    2725,
                    2730,
                    2700,
                    2735,
                    1364,
                    1366,
                    1368
                ],
                "is_integer": [
                    1371
                ],
                "width": [
                    1376,
                    2913,
                    1378,
                    1666,
                    1380,
                    2725,
                    2730,
                    2700,
                    2798,
                    2735,
                    1371,
                    1373
                ],
                "x.rjust": [
                    1376
                ],
                "x.ljust": [
                    1378
                ],
                "x.center": [
                    1380
                ],
                "x.split": [
                    1392,
                    1397
                ],
                "regex.split": [
                    1402
                ],
                "res": [
                    1412,
                    1403,
                    1404,
                    1413
                ],
                "x.rsplit": [
                    1411
                ],
                "obj": [
                    1488,
                    1489
                ],
                "slice": [
                    1488,
                    2012
                ],
                "stop": [
                    1569,
                    1572,
                    1577,
                    1488,
                    2803,
                    2809
                ],
                "step": [
                    1488,
                    2803
                ],
                "local_stop": [
                    1570,
                    1572,
                    1578
                ],
                "y": [
                    1573,
                    1575,
                    1576,
                    1578,
                    1579
                ],
                "x.strip": [
                    1599
                ],
                "to_strip": [
                    1601,
                    1603,
                    2895,
                    2901,
                    2907,
                    1599
                ],
                "x.lstrip": [
                    1601
                ],
                "x.rstrip": [
                    1603
                ],
                "kwargs": [
                    2913,
                    1666,
                    1668,
                    1864,
                    1910
                ],
                "tw": [
                    1668,
                    1670
                ],
                "textwrap.TextWrapper": [
                    1668
                ],
                "textwrap": [
                    1668
                ],
                "join": [
                    2360,
                    2355,
                    1670
                ],
                "tw.wrap": [
                    1670
                ],
                "s": [
                    1670
                ],
                "x.translate": [
                    1690
                ],
                "table": [
                    1690,
                    2934
                ],
                "x.get": [
                    1747
                ],
                "encoding": [
                    1793,
                    1795,
                    1797,
                    2822,
                    1770,
                    1772,
                    1774,
                    2815
                ],
                "x.decode": [
                    1772
                ],
                "errors": [
                    1795,
                    1798,
                    2822,
                    1772,
                    1775,
                    2815
                ],
                "decoder": [
                    1774,
                    1775
                ],
                "codecs.getdecoder": [
                    1774
                ],
                "codecs": [
                    1797,
                    1774
                ],
                "x.encode": [
                    1795
                ],
                "encoder": [
                    1797,
                    1798
                ],
                "codecs.getencoder": [
                    1797
                ],
                "forbidden": [
                    1848,
                    1845
                ],
                "allowed_types": [
                    1856,
                    2007,
                    1992,
                    1847
                ],
                "func_name": [
                    1866,
                    1852,
                    1860
                ],
                "func.__name__": [
                    1852
                ],
                "func": [
                    1864,
                    1852,
                    1854
                ],
                "self._inferred_dtype": [
                    1856,
                    1860,
                    1951
                ],
                "self": [
                    2056,
                    3082,
                    3083,
                    2065,
                    2094,
                    2098,
                    2115,
                    2117,
                    2121,
                    2639,
                    2640,
                    3069,
                    2655,
                    2144,
                    2656,
                    2660,
                    2661,
                    2666,
                    2667,
                    2673,
                    2675,
                    2680,
                    2681,
                    2170,
                    2687,
                    2689,
                    2694,
                    2695,
                    2700,
                    2701,
                    2725,
                    2730,
                    2735,
                    2798,
                    2799,
                    2803,
                    2804,
                    2809,
                    2810,
                    2815,
                    2817,
                    2822,
                    2823,
                    2324,
                    2325,
                    2327,
                    2341,
                    1856,
                    1860,
                    1864,
                    2895,
                    2896,
                    2385,
                    2387,
                    2389,
                    2901,
                    2902,
                    2393,
                    1882,
                    1883,
                    2394,
                    2907,
                    2908,
                    2913,
                    2914,
                    2921,
                    2923,
                    2925,
                    1905,
                    1906,
                    1910,
                    1911,
                    2934,
                    2935,
                    1915,
                    1916,
                    2951,
                    2956,
                    1951,
                    1952,
                    1953,
                    1956,
                    1958,
                    1959,
                    2993,
                    2994,
                    3006,
                    3007,
                    3028,
                    3029,
                    2013,
                    2015,
                    2019,
                    2532,
                    2533,
                    2023,
                    2538,
                    2539,
                    2042,
                    3068,
                    2045
                ],
                "args": [
                    1864
                ],
                "wraps": [
                    1854
                ],
                "wrapper.__name__": [
                    1920,
                    1866,
                    1885
                ],
                "wrapper": [
                    1920,
                    1922,
                    1891,
                    1924,
                    1866,
                    1867,
                    1885,
                    1918,
                    1887
                ],
                "_forbid_nonstring_types": [
                    1869
                ],
                "self._parent": [
                    2694,
                    2822,
                    3082,
                    2700,
                    1956,
                    2993,
                    3006,
                    2639,
                    2895,
                    2815,
                    3028,
                    2901,
                    1882,
                    2907,
                    2655,
                    2913,
                    2532,
                    2660,
                    2921,
                    2538,
                    2666,
                    2798,
                    1905,
                    2673,
                    2803,
                    1910,
                    2934,
                    2680,
                    2809,
                    1915,
                    3068,
                    2687
                ],
                "kargs": [
                    1882
                ],
                "self._wrap_result": [
                    2689,
                    2817,
                    2695,
                    2823,
                    3083,
                    2701,
                    2935,
                    2994,
                    3007,
                    2640,
                    2896,
                    3029,
                    2902,
                    1883,
                    2908,
                    2656,
                    2914,
                    2533,
                    2661,
                    2539,
                    2667,
                    2923,
                    2799,
                    1906,
                    2675,
                    2804,
                    1911,
                    2681,
                    2810,
                    1916,
                    3069
                ],
                "returns_string": [
                    2056,
                    1906,
                    1911,
                    1883,
                    1916
                ],
                "forbid_nonstring_types": [
                    2692,
                    2820,
                    2182,
                    2949,
                    3080,
                    2698,
                    2954,
                    2723,
                    2728,
                    2733,
                    2991,
                    2737,
                    3004,
                    3009,
                    2636,
                    2893,
                    2899,
                    1880,
                    2905,
                    2652,
                    2911,
                    2530,
                    2917,
                    2536,
                    2664,
                    2670,
                    1903,
                    1908,
                    2932,
                    2678,
                    2807,
                    1913,
                    3066,
                    2684
                ],
                "forbidden_types": [
                    1880,
                    1913,
                    1908,
                    1903
                ],
                "f.__name__": [
                    1920,
                    1885
                ],
                "docstring": [
                    1886,
                    1887
                ],
                "wrapper.__doc__": [
                    1922,
                    1887
                ],
                "wrapper3": [
                    1918
                ],
                "wrapper2": [
                    1918
                ],
                "wrapper1": [
                    1918
                ],
                "f.__doc__": [
                    1921,
                    1922
                ],
                "source.__doc__": [
                    1931,
                    1932
                ],
                "source": [
                    1931,
                    1932
                ],
                "target.__doc__": [
                    1932
                ],
                "target": [
                    1932,
                    1933
                ],
                "do_copy": [
                    1935
                ],
                "NoNewAttributesMixin": [
                    1938
                ],
                "self._validate": [
                    1951
                ],
                "data": [
                    3461,
                    3462,
                    2325,
                    2327,
                    2331,
                    2332,
                    2334,
                    1951,
                    1952,
                    1953,
                    2336,
                    2337,
                    1956,
                    1958,
                    2350,
                    2360,
                    2363,
                    1986,
                    2370,
                    1994,
                    2394,
                    2921,
                    2922
                ],
                "self._is_categorical": [
                    1952,
                    1956,
                    2921,
                    2925,
                    2042
                ],
                "is_categorical_dtype": [
                    1952,
                    2389
                ],
                "self._is_string": [
                    2056,
                    1953
                ],
                "data.dtype.name": [
                    1953
                ],
                "data.dtype": [
                    1953
                ],
                "data.values.categories": [
                    1956
                ],
                "data.values": [
                    1956
                ],
                "self._orig": [
                    2956,
                    2065,
                    2324,
                    2325,
                    2327,
                    1958,
                    2094,
                    2098,
                    2115,
                    2117,
                    2121,
                    2385,
                    2387,
                    2389,
                    2393,
                    2394,
                    2144,
                    2921,
                    2045
                ],
                "self._freeze": [
                    1959
                ],
                "ABCMultiIndex": [
                    1986
                ],
                "values": [
                    2002,
                    1994,
                    1995,
                    1998
                ],
                "values.dtype": [
                    1998
                ],
                "StringDtype": [
                    1998
                ],
                "inferred_dtype": [
                    2009,
                    2002,
                    2005,
                    2007
                ],
                "staticmethod": [
                    1961
                ],
                "key": [
                    2012,
                    2013,
                    2015
                ],
                "self.slice": [
                    2013
                ],
                "key.start": [
                    2013
                ],
                "key.stop": [
                    2013
                ],
                "key.step": [
                    2013
                ],
                "self.get": [
                    2023,
                    2019,
                    2015
                ],
                "any": [
                    2020,
                    2350
                ],
                "g.notna": [
                    2020
                ],
                "use_codes": [
                    2042
                ],
                "take_1d": [
                    2044
                ],
                "cat.codes": [
                    2045
                ],
                "cat": [
                    2045
                ],
                "Series": [
                    2152,
                    2325,
                    2394,
                    2045,
                    2174
                ],
                "fill_value": [
                    2045
                ],
                "hasattr": [
                    2048
                ],
                "result.ndim": [
                    2050,
                    2063
                ],
                "is_list_like": [
                    2158,
                    2173,
                    2070
                ],
                "cons_row": [
                    2075
                ],
                "max_len": [
                    2080,
                    2078
                ],
                "max": [
                    2078
                ],
                "self._orig.name": [
                    2394,
                    2387,
                    2094
                ],
                "is_bool_dtype": [
                    2101
                ],
                "out": [
                    2106,
                    2107,
                    2110,
                    2111
                ],
                "out.nlevels": [
                    2107
                ],
                "out.get_level_values": [
                    2110
                ],
                "Index": [
                    2113,
                    2387
                ],
                "self._orig.index": [
                    2144,
                    2115
                ],
                "cons": [
                    2121,
                    2122,
                    2117,
                    2118
                ],
                "self._orig._constructor_expanddim": [
                    2117
                ],
                "self._orig._constructor": [
                    2121
                ],
                "idx": [
                    2144,
                    2156,
                    2174
                ],
                "others": [
                    2319,
                    2330,
                    2341,
                    2350,
                    2352,
                    2353,
                    2356,
                    2360,
                    2361,
                    2363,
                    2149,
                    2150,
                    2151,
                    2152,
                    2153,
                    2154,
                    2155,
                    2156,
                    2157,
                    2158,
                    2159,
                    2166,
                    2169,
                    2170,
                    2173,
                    2174
                ],
                "others.values": [
                    2152
                ],
                "ABCDataFrame": [
                    2153
                ],
                "others.ndim": [
                    2155
                ],
                "all": [
                    2163,
                    2173
                ],
                "x.ndim": [
                    2165
                ],
                "los": [
                    2168,
                    2170,
                    2171
                ],
                "self._get_series_list": [
                    2170,
                    2341
                ],
                "others.pop": [
                    2170
                ],
                "ensure_object": [
                    2363,
                    2331
                ],
                "na_rep": [
                    2336,
                    2335,
                    2375,
                    2378,
                    2333,
                    2367
                ],
                "na_mask.any": [
                    2333,
                    2335
                ],
                "np.where": [
                    2336,
                    2378
                ],
                "data.index.equals": [
                    2350
                ],
                "data.index": [
                    2394,
                    2350
                ],
                "x.index": [
                    2350
                ],
                "concat": [
                    2352
                ],
                "data.align": [
                    2360
                ],
                "all_cols": [
                    2374,
                    2377,
                    2378,
                    2380,
                    2383,
                    2363,
                    2364
                ],
                "na_masks": [
                    2378,
                    2364,
                    2365
                ],
                "union_mask": [
                    2371,
                    2373,
                    2375,
                    2365,
                    2367
                ],
                "np.logical_or.reduce": [
                    2365
                ],
                "np.logical_or": [
                    2365
                ],
                "union_mask.any": [
                    2375,
                    2367
                ],
                "not_masked": [
                    2373,
                    2374
                ],
                "cat_safe": [
                    2380,
                    2374,
                    2383
                ],
                "nm": [
                    2378
                ],
                "col": [
                    2378
                ],
                "self._orig.dtype": [
                    2393,
                    2389
                ],
                "str_split": [
                    2532
                ],
                "Appender": [
                    2529,
                    2722,
                    2626,
                    2535,
                    2727,
                    2983,
                    2890,
                    2732,
                    3057,
                    2642,
                    2898,
                    2996,
                    2904,
                    3071
                ],
                "str_rsplit": [
                    2538
                ],
                "x.partition": [
                    2638
                ],
                "deprecate_kwarg": [
                    2651,
                    2635
                ],
                "x.rpartition": [
                    2654
                ],
                "str_get": [
                    2658,
                    2660
                ],
                "copy": [
                    2658,
                    2691,
                    2819,
                    2916,
                    2948,
                    2663,
                    2697,
                    2953,
                    2669,
                    2801,
                    2931,
                    2677,
                    2806,
                    2683,
                    2812,
                    2910
                ],
                "str_join": [
                    2666,
                    2663
                ],
                "str_contains": [
                    2672,
                    2669
                ],
                "str_match": [
                    2680,
                    2677
                ],
                "str_replace": [
                    2683,
                    2686
                ],
                "str_repeat": [
                    2691,
                    2694
                ],
                "str_pad": [
                    2697,
                    2700,
                    2798
                ],
                "self.pad": [
                    2730,
                    2725,
                    2735
                ],
                "str_slice": [
                    2801,
                    2803
                ],
                "str_slice_replace": [
                    2809,
                    2806
                ],
                "str_decode": [
                    2812,
                    2815
                ],
                "str_encode": [
                    2819,
                    2822
                ],
                "str_strip": [
                    2907,
                    2901,
                    2895
                ],
                "str_wrap": [
                    2913,
                    2910
                ],
                "self._orig.astype": [
                    2921
                ],
                "str_get_dummies": [
                    2922,
                    2916
                ],
                "str_translate": [
                    2931,
                    2934
                ],
                "count": [
                    2937
                ],
                "_pat_wrapper": [
                    2944,
                    2937,
                    2938,
                    2941
                ],
                "str_count": [
                    2937
                ],
                "startswith": [
                    2938
                ],
                "str_startswith": [
                    2939
                ],
                "endswith": [
                    2941
                ],
                "str_endswith": [
                    2942
                ],
                "findall": [
                    2944
                ],
                "str_findall": [
                    2945
                ],
                "str_extract": [
                    2948,
                    2951
                ],
                "str_extractall": [
                    2953,
                    2956
                ],
                "str_find": [
                    2993,
                    3006
                ],
                "unicodedata.normalize": [
                    3027
                ],
                "unicodedata": [
                    3027
                ],
                "form": [
                    3027
                ],
                "str_index": [
                    3082,
                    3068
                ],
                "_noarg_wrapper": [
                    3232,
                    3428,
                    3237,
                    3242,
                    3434,
                    3227,
                    3404,
                    3247,
                    3440,
                    3410,
                    3222,
                    3446,
                    3416,
                    3131,
                    3452,
                    3422
                ],
                "_doc_args": [
                    3209,
                    3210,
                    3211,
                    3212,
                    3213,
                    3216,
                    3217,
                    3225,
                    3230,
                    3235,
                    3240,
                    3245,
                    3250,
                    3395,
                    3396,
                    3397,
                    3398,
                    3399,
                    3400,
                    3401,
                    3402,
                    3403,
                    3407,
                    3413,
                    3419,
                    3425,
                    3431,
                    3437,
                    3443,
                    3449,
                    3455
                ],
                "lower": [
                    3222
                ],
                "x.lower": [
                    3223
                ],
                "upper": [
                    3227
                ],
                "title": [
                    3232
                ],
                "x.title": [
                    3233
                ],
                "capitalize": [
                    3237
                ],
                "x.capitalize": [
                    3238
                ],
                "swapcase": [
                    3242
                ],
                "x.swapcase": [
                    3243
                ],
                "casefold": [
                    3247
                ],
                "x.casefold": [
                    3248
                ],
                "isalnum": [
                    3404
                ],
                "x.isalnum": [
                    3405
                ],
                "isalpha": [
                    3410
                ],
                "x.isalpha": [
                    3411
                ],
                "isdigit": [
                    3416
                ],
                "x.isdigit": [
                    3417
                ],
                "isspace": [
                    3422
                ],
                "x.isspace": [
                    3423
                ],
                "islower": [
                    3428
                ],
                "x.islower": [
                    3429
                ],
                "isupper": [
                    3434
                ],
                "x.isupper": [
                    3435
                ],
                "istitle": [
                    3440
                ],
                "x.istitle": [
                    3441
                ],
                "isnumeric": [
                    3446
                ],
                "x.isnumeric": [
                    3447
                ],
                "isdecimal": [
                    3452
                ],
                "x.isdecimal": [
                    3453
                ],
                "cls._validate": [
                    3461
                ],
                "cls": [
                    3461,
                    3462
                ],
                "classmethod": [
                    3459
                ]
            },
            "filtered_variables_in_file": {
                "_cpython_optimized_encoders": [
                    1793,
                    35,
                    44
                ],
                "_cpython_optimized_decoders": [
                    1770,
                    44
                ],
                "_shared_docs": [
                    3072,
                    2825,
                    3085,
                    2958,
                    2703,
                    3225,
                    3230,
                    2722,
                    3235,
                    2727,
                    2984,
                    3240,
                    2732,
                    3245,
                    46,
                    3250,
                    2997,
                    3253,
                    3133,
                    2627,
                    3139,
                    2891,
                    3407,
                    2898,
                    2643,
                    3413,
                    3031,
                    2904,
                    3419,
                    2397,
                    2529,
                    3425,
                    2535,
                    3431,
                    2541,
                    3437,
                    3058,
                    3443,
                    3449,
                    3455
                ],
                "List": [
                    49,
                    74
                ],
                "sep": [
                    1153,
                    66,
                    2337,
                    69,
                    2374,
                    2654,
                    2666,
                    2922,
                    2380,
                    2638,
                    2383,
                    2321,
                    1074,
                    2322,
                    1076,
                    1079,
                    1086,
                    95
                ],
                "np.sum": [
                    68,
                    71
                ],
                "np": [
                    147,
                    148,
                    787,
                    1914,
                    2080,
                    2336,
                    2679,
                    429,
                    697,
                    1083,
                    2364,
                    2365,
                    702,
                    2370,
                    2371,
                    68,
                    71,
                    2378,
                    1750,
                    225,
                    2155,
                    749,
                    110,
                    2031,
                    2671,
                    115,
                    756,
                    117,
                    374,
                    2165,
                    121,
                    122,
                    125,
                    1022,
                    127
                ],
                "list_of_columns": [
                    99,
                    68,
                    69,
                    70,
                    95
                ],
                "list_with_sep": [
                    69,
                    70,
                    71
                ],
                "result": [
                    2048,
                    2049,
                    2050,
                    1032,
                    3082,
                    1035,
                    3083,
                    2063,
                    2075,
                    2076,
                    2078,
                    2079,
                    2080,
                    2090,
                    2101,
                    2102,
                    2105,
                    2106,
                    2113,
                    2118,
                    2122,
                    2123,
                    3068,
                    2639,
                    2640,
                    3069,
                    95,
                    2655,
                    2656,
                    2660,
                    2661,
                    2666,
                    107,
                    2667,
                    2672,
                    2675,
                    2680,
                    2681,
                    2686,
                    127,
                    2689,
                    2694,
                    2695,
                    2700,
                    2701,
                    148,
                    149,
                    150,
                    151,
                    698,
                    699,
                    2798,
                    2799,
                    2803,
                    2804,
                    2809,
                    2810,
                    2815,
                    2817,
                    2822,
                    2823,
                    787,
                    796,
                    798,
                    804,
                    2370,
                    2371,
                    2374,
                    2380,
                    2383,
                    2895,
                    2896,
                    2387,
                    2901,
                    2902,
                    1882,
                    1883,
                    2394,
                    2395,
                    2907,
                    2908,
                    2913,
                    2914,
                    2922,
                    2924,
                    1905,
                    1906,
                    1910,
                    1911,
                    2934,
                    2935,
                    1915,
                    1916,
                    922,
                    923,
                    2993,
                    2994,
                    3006,
                    3007,
                    3028,
                    3029,
                    2532,
                    2533,
                    2538,
                    2539,
                    2044,
                    2045
                ],
                "cat_core": [
                    95
                ],
                "column": [
                    99,
                    100
                ],
                "dtype": [
                    1030,
                    1033,
                    2057,
                    2059,
                    146,
                    827,
                    832,
                    2118,
                    2122,
                    2391,
                    2393,
                    2394,
                    732,
                    735,
                    100,
                    101,
                    105,
                    112,
                    117
                ],
                "lib.infer_dtype": [
                    2002,
                    100
                ],
                "lib": [
                    100,
                    2002,
                    150,
                    153,
                    127,
                    1087
                ],
                "np.nan": [
                    2080,
                    225,
                    2371,
                    2679,
                    429,
                    110,
                    749,
                    2031,
                    2671,
                    115,
                    147,
                    756,
                    374,
                    1750,
                    1914,
                    702
                ],
                "_map": [
                    112,
                    146
                ],
                "f": [
                    1920,
                    1921,
                    1922,
                    1411,
                    1284,
                    1412,
                    1286,
                    1795,
                    1288,
                    1798,
                    1799,
                    142,
                    1403,
                    1304,
                    153,
                    1306,
                    1308,
                    1915,
                    425,
                    426,
                    1581,
                    2655,
                    1905,
                    1599,
                    1601,
                    1603,
                    1606,
                    2638,
                    2639,
                    1489,
                    1490,
                    3027,
                    3028,
                    1752,
                    1882,
                    221,
                    222,
                    733,
                    480,
                    481,
                    735,
                    1376,
                    1378,
                    1380,
                    1885,
                    2654,
                    1384,
                    362,
                    1772,
                    365,
                    1775,
                    112,
                    368,
                    370,
                    371,
                    625,
                    627,
                    1392,
                    1397,
                    760,
                    1776,
                    1402,
                    635,
                    1910,
                    637,
                    127
                ],
                "arr": [
                    1153,
                    1412,
                    1029,
                    1030,
                    1670,
                    1032,
                    1288,
                    1799,
                    146,
                    767,
                    787,
                    790,
                    920,
                    153,
                    922,
                    795,
                    923,
                    1308,
                    1690,
                    799,
                    801,
                    426,
                    1581,
                    688,
                    1072,
                    1074,
                    1076,
                    821,
                    1079,
                    824,
                    698,
                    827,
                    1083,
                    829,
                    1087,
                    1606,
                    1490,
                    1752,
                    222,
                    735,
                    1247,
                    481,
                    1384,
                    1004,
                    1005,
                    112,
                    369,
                    1776,
                    371,
                    116,
                    1011,
                    1013,
                    119,
                    120,
                    121,
                    122,
                    1403,
                    124,
                    637,
                    127
                ],
                "na_result": [
                    112
                ],
                "np.ndarray": [
                    121,
                    2155,
                    2165,
                    117
                ],
                "ABCSeries": [
                    2164,
                    2149,
                    119
                ],
                "arr.values": [
                    120
                ],
                "np.asarray": [
                    697,
                    122
                ],
                "na_mask": [
                    2336,
                    123,
                    2332,
                    2333,
                    2334,
                    2335
                ],
                "mask": [
                    148,
                    124,
                    125,
                    127
                ],
                "isna": [
                    124,
                    2332,
                    2364
                ],
                "convert": [
                    125,
                    127
                ],
                "np.all": [
                    125
                ],
                "lib.map_infer_mask": [
                    127
                ],
                "mask.view": [
                    127
                ],
                "np.uint8": [
                    127
                ],
                "p_err": [
                    136,
                    131
                ],
                "e.args": [
                    136
                ],
                "e": [
                    136,
                    138
                ],
                "re.search": [
                    136
                ],
                "re": [
                    352,
                    999,
                    136,
                    621,
                    783,
                    624,
                    816,
                    728,
                    1401,
                    730,
                    220,
                    1246,
                    350
                ],
                "x": [
                    2070,
                    2071,
                    2073,
                    2075,
                    2078,
                    2080,
                    1569,
                    1575,
                    1578,
                    1087,
                    1599,
                    1601,
                    1603,
                    2638,
                    2654,
                    2154,
                    2157,
                    625,
                    627,
                    2164,
                    2165,
                    2166,
                    635,
                    2173,
                    142,
                    3223,
                    1690,
                    3228,
                    3233,
                    3238,
                    3243,
                    684,
                    686,
                    3248,
                    693,
                    695,
                    1746,
                    1747,
                    1748,
                    1749,
                    733,
                    221,
                    1772,
                    1775,
                    752,
                    754,
                    1795,
                    1284,
                    1286,
                    1798,
                    1304,
                    1306,
                    2350,
                    2361,
                    2363,
                    2364,
                    2374,
                    3405,
                    3411,
                    3417,
                    3423,
                    1376,
                    1378,
                    1380,
                    3429,
                    362,
                    3435,
                    365,
                    368,
                    369,
                    1392,
                    3441,
                    1397,
                    3447,
                    1402,
                    3453,
                    1411,
                    425,
                    1489,
                    3027,
                    480
                ],
                "na_value": [
                    144,
                    147,
                    148
                ],
                "g": [
                    2019,
                    2020,
                    2021,
                    2023,
                    146
                ],
                "np.putmask": [
                    2371,
                    148
                ],
                "result.dtype": [
                    149
                ],
                "lib.maybe_convert_objects": [
                    150
                ],
                "lib.map_infer": [
                    153,
                    1087
                ],
                "regex": [
                    783,
                    784,
                    786,
                    788,
                    793,
                    794,
                    816,
                    817,
                    818,
                    819,
                    730,
                    348,
                    733,
                    220,
                    221,
                    352,
                    607,
                    354,
                    1246,
                    1247,
                    999,
                    1001,
                    362,
                    747,
                    749,
                    1007,
                    1008,
                    2673,
                    754,
                    1401,
                    1402,
                    1019,
                    2687
                ],
                "re.compile": [
                    352,
                    999,
                    783,
                    624,
                    816,
                    1401,
                    730,
                    220,
                    1246
                ],
                "pat": [
                    1411,
                    2951,
                    2956,
                    783,
                    920,
                    922,
                    1915,
                    425,
                    2680,
                    816,
                    1086,
                    1087,
                    730,
                    220,
                    606,
                    1246,
                    352,
                    480,
                    2532,
                    999,
                    2538,
                    365,
                    622,
                    367,
                    624,
                    1389,
                    1392,
                    627,
                    1394,
                    1397,
                    1905,
                    1910,
                    2673,
                    1401,
                    635,
                    2687
                ],
                "flags": [
                    2951,
                    2956,
                    783,
                    920,
                    922,
                    816,
                    728,
                    730,
                    220,
                    1246,
                    350,
                    352,
                    609,
                    999,
                    621,
                    622,
                    624,
                    2673,
                    1910,
                    2680,
                    1918,
                    2687
                ],
                "regex.findall": [
                    1019,
                    221,
                    1247
                ],
                "_na_map": [
                    1153,
                    1412,
                    1670,
                    1799,
                    1288,
                    1690,
                    1308,
                    426,
                    1581,
                    688,
                    1606,
                    2639,
                    1490,
                    3028,
                    1752,
                    1882,
                    222,
                    1247,
                    735,
                    481,
                    2655,
                    1384,
                    1776,
                    369,
                    370,
                    371,
                    1403,
                    637
                ],
                "case": [
                    609,
                    616,
                    617,
                    364,
                    620,
                    2673,
                    727,
                    2680,
                    349,
                    2687
                ],
                "re.IGNORECASE": [
                    728,
                    621,
                    350
                ],
                "regex.groups": [
                    354,
                    1001,
                    747,
                    749,
                    1008,
                    786,
                    819,
                    794
                ],
                "warnings.warn": [
                    355
                ],
                "warnings": [
                    355
                ],
                "regex.search": [
                    362,
                    754
                ],
                "upper_pat": [
                    368,
                    367
                ],
                "pat.upper": [
                    367
                ],
                "uppered": [
                    369,
                    370
                ],
                "x.upper": [
                    369,
                    3228
                ],
                "na": [
                    481,
                    426,
                    2673,
                    370,
                    371,
                    2675,
                    2680,
                    2681,
                    1915,
                    1918,
                    735
                ],
                "x.startswith": [
                    425
                ],
                "x.endswith": [
                    480
                ],
                "repl": [
                    635,
                    1576,
                    622,
                    625,
                    627,
                    2809,
                    633,
                    603,
                    1565,
                    1566,
                    2687
                ],
                "is_compiled_re": [
                    608,
                    622,
                    629,
                    606
                ],
                "is_re": [
                    606
                ],
                "n": [
                    1409,
                    1410,
                    1411,
                    2532,
                    2538,
                    1390,
                    623,
                    1391,
                    625,
                    1392,
                    627,
                    1395,
                    1396,
                    1397,
                    1399,
                    1400,
                    1402,
                    635,
                    2687
                ],
                "compiled": [
                    624,
                    625
                ],
                "compiled.sub": [
                    625
                ],
                "x.replace": [
                    635,
                    627
                ],
                "is_scalar": [
                    680
                ],
                "repeats": [
                    2694,
                    680,
                    684,
                    686,
                    697,
                    698
                ],
                "bytes.__mul__": [
                    684,
                    693
                ],
                "str.__mul__": [
                    686,
                    695
                ],
                "scalar_rep": [
                    688
                ],
                "r": [
                    693,
                    695
                ],
                "libops.vec_binop": [
                    698
                ],
                "libops": [
                    698
                ],
                "com.values_from_object": [
                    698
                ],
                "com": [
                    698
                ],
                "rep": [
                    698
                ],
                "regex.match": [
                    733
                ],
                "pop": [
                    740
                ],
                "rx.groupindex.keys": [
                    740
                ],
                "rx.groupindex": [
                    740
                ],
                "rx": [
                    740
                ],
                "empty_row": [
                    753,
                    749,
                    758
                ],
                "m": [
                    754,
                    755,
                    756
                ],
                "item": [
                    756
                ],
                "m.groups": [
                    756
                ],
                "arr.dtype.name": [
                    767
                ],
                "arr.dtype": [
                    767
                ],
                "groups_or_na": [
                    784,
                    817,
                    787,
                    829,
                    799
                ],
                "_groups_or_na_fun": [
                    784,
                    817
                ],
                "np.array": [
                    787,
                    2364
                ],
                "val": [
                    787,
                    829,
                    799
                ],
                "name": [
                    1920,
                    788,
                    792,
                    922,
                    923,
                    804,
                    2089,
                    2090,
                    2091,
                    2094,
                    2106,
                    1852,
                    2113,
                    2118,
                    2122,
                    1880,
                    1885,
                    2922,
                    2926,
                    1903,
                    1908,
                    1913
                ],
                "_get_single_group_name": [
                    788
                ],
                "ABCIndexClass": [
                    2144,
                    2151,
                    1004,
                    2065,
                    2098,
                    2385,
                    2164,
                    2324,
                    790
                ],
                "names": [
                    1007,
                    1008,
                    818,
                    819,
                    793,
                    794
                ],
                "regex.groupindex.values": [
                    793,
                    818,
                    1007
                ],
                "regex.groupindex": [
                    793,
                    818,
                    1007
                ],
                "regex.groupindex.keys": [
                    793,
                    818,
                    1007
                ],
                "columns": [
                    800,
                    1033,
                    1008,
                    819,
                    822,
                    794,
                    796,
                    830
                ],
                "names.get": [
                    1008,
                    794,
                    819
                ],
                "i": [
                    2018,
                    2019,
                    2660,
                    2022,
                    2023,
                    1008,
                    819,
                    1747,
                    1748,
                    1749,
                    794,
                    1085,
                    1087
                ],
                "arr.empty": [
                    795
                ],
                "DataFrame": [
                    828,
                    2156,
                    822,
                    796,
                    798
                ],
                "arr.index": [
                    824,
                    801,
                    1011,
                    1029
                ],
                "result_index": [
                    824,
                    826,
                    831
                ],
                "_result_dtype": [
                    827,
                    1030
                ],
                "expand": [
                    2656,
                    2083,
                    2116,
                    2533,
                    2086,
                    2951,
                    2539,
                    2061,
                    2063,
                    2640,
                    2065,
                    917,
                    919,
                    2104,
                    923
                ],
                "_str_extract_frame": [
                    920
                ],
                "arr._orig": [
                    920
                ],
                "_str_extract_noexpand": [
                    922
                ],
                "arr._parent": [
                    922
                ],
                "arr._wrap_result": [
                    923
                ],
                "reset_index": [
                    1005
                ],
                "arr.to_series": [
                    1005
                ],
                "match_list": [
                    1009,
                    1033,
                    1023
                ],
                "index_list": [
                    1025,
                    1010,
                    1029
                ],
                "is_mi": [
                    1016,
                    1011
                ],
                "arr.index.nlevels": [
                    1011
                ],
                "subject_key": [
                    1024,
                    1017,
                    1013
                ],
                "subject": [
                    1019,
                    1013,
                    1014
                ],
                "arr.items": [
                    1013
                ],
                "match_i": [
                    1024,
                    1019
                ],
                "match_tuple": [
                    1019,
                    1020,
                    1021,
                    1022
                ],
                "na_tuple": [
                    1022,
                    1023
                ],
                "group": [
                    1022
                ],
                "np.NaN": [
                    1022
                ],
                "match_list.append": [
                    1023
                ],
                "result_key": [
                    1024,
                    1025
                ],
                "index_list.append": [
                    1025
                ],
                "index": [
                    2115,
                    1029,
                    2118,
                    1033,
                    2122
                ],
                "MultiIndex.from_tuples": [
                    2106,
                    1029
                ],
                "MultiIndex": [
                    2106,
                    1029
                ],
                "arr.index.names": [
                    1029
                ],
                "arr._constructor_expanddim": [
                    1032
                ],
                "arr.fillna": [
                    1072
                ],
                "arr.astype": [
                    1076
                ],
                "tags": [
                    1088,
                    1078,
                    1080,
                    1081,
                    1083,
                    1085
                ],
                "ts": [
                    1080,
                    1079
                ],
                "arr.str.split": [
                    1079
                ],
                "arr.str": [
                    1079
                ],
                "tags.update": [
                    1080
                ],
                "dummies": [
                    1088,
                    1083,
                    1087
                ],
                "np.empty": [
                    2370,
                    1083
                ],
                "np.int64": [
                    1083
                ],
                "t": [
                    1085,
                    1086
                ],
                "arr.to_numpy": [
                    1087
                ],
                "sep.join": [
                    1153,
                    2337
                ],
                "sub": [
                    1304,
                    1284,
                    1286,
                    3082,
                    1306,
                    1292,
                    1294,
                    2993,
                    1272,
                    1274,
                    3068,
                    3006
                ],
                "msg": [
                    1857,
                    1863,
                    1293,
                    1294,
                    1365,
                    1366,
                    1273,
                    1274,
                    1372,
                    1373
                ],
                "msg.format": [
                    1366,
                    1274,
                    1373,
                    1294
                ],
                "side": [
                    1600,
                    1377,
                    1602,
                    1379,
                    1598,
                    2700,
                    1296,
                    1298,
                    1276,
                    1278,
                    1375
                ],
                "method": [
                    1284,
                    1286,
                    1297,
                    1299,
                    1304,
                    1306,
                    1277,
                    1279
                ],
                "end": [
                    1283,
                    1286,
                    3082,
                    2993,
                    1303,
                    1306,
                    3068,
                    3006
                ],
                "start": [
                    1569,
                    1570,
                    1284,
                    1286,
                    1574,
                    1575,
                    3082,
                    1488,
                    2993,
                    2803,
                    1304,
                    2809,
                    1306,
                    3068,
                    3006
                ],
                "fillchar": [
                    1376,
                    1378,
                    1380,
                    2725,
                    2730,
                    2700,
                    2735,
                    1364,
                    1366,
                    1368
                ],
                "is_integer": [
                    1371
                ],
                "width": [
                    1376,
                    2913,
                    1378,
                    1666,
                    1380,
                    2725,
                    2730,
                    2700,
                    2798,
                    2735,
                    1371,
                    1373
                ],
                "x.rjust": [
                    1376
                ],
                "x.ljust": [
                    1378
                ],
                "x.center": [
                    1380
                ],
                "x.split": [
                    1392,
                    1397
                ],
                "regex.split": [
                    1402
                ],
                "res": [
                    1412,
                    1403,
                    1404,
                    1413
                ],
                "x.rsplit": [
                    1411
                ],
                "obj": [
                    1488,
                    1489
                ],
                "stop": [
                    1569,
                    1572,
                    1577,
                    1488,
                    2803,
                    2809
                ],
                "step": [
                    1488,
                    2803
                ],
                "local_stop": [
                    1570,
                    1572,
                    1578
                ],
                "y": [
                    1573,
                    1575,
                    1576,
                    1578,
                    1579
                ],
                "x.strip": [
                    1599
                ],
                "to_strip": [
                    1601,
                    1603,
                    2895,
                    2901,
                    2907,
                    1599
                ],
                "x.lstrip": [
                    1601
                ],
                "x.rstrip": [
                    1603
                ],
                "kwargs": [
                    2913,
                    1666,
                    1668,
                    1864,
                    1910
                ],
                "tw": [
                    1668,
                    1670
                ],
                "textwrap.TextWrapper": [
                    1668
                ],
                "textwrap": [
                    1668
                ],
                "join": [
                    2360,
                    2355,
                    1670
                ],
                "tw.wrap": [
                    1670
                ],
                "s": [
                    1670
                ],
                "x.translate": [
                    1690
                ],
                "table": [
                    1690,
                    2934
                ],
                "x.get": [
                    1747
                ],
                "encoding": [
                    1793,
                    1795,
                    1797,
                    2822,
                    1770,
                    1772,
                    1774,
                    2815
                ],
                "x.decode": [
                    1772
                ],
                "errors": [
                    1795,
                    1798,
                    2822,
                    1772,
                    1775,
                    2815
                ],
                "decoder": [
                    1774,
                    1775
                ],
                "codecs.getdecoder": [
                    1774
                ],
                "codecs": [
                    1797,
                    1774
                ],
                "x.encode": [
                    1795
                ],
                "encoder": [
                    1797,
                    1798
                ],
                "codecs.getencoder": [
                    1797
                ],
                "forbidden": [
                    1848,
                    1845
                ],
                "allowed_types": [
                    1856,
                    2007,
                    1992,
                    1847
                ],
                "func_name": [
                    1866,
                    1852,
                    1860
                ],
                "func.__name__": [
                    1852
                ],
                "func": [
                    1864,
                    1852,
                    1854
                ],
                "self._inferred_dtype": [
                    1856,
                    1860,
                    1951
                ],
                "self": [
                    2056,
                    3082,
                    3083,
                    2065,
                    2094,
                    2098,
                    2115,
                    2117,
                    2121,
                    2639,
                    2640,
                    3069,
                    2655,
                    2144,
                    2656,
                    2660,
                    2661,
                    2666,
                    2667,
                    2673,
                    2675,
                    2680,
                    2681,
                    2170,
                    2687,
                    2689,
                    2694,
                    2695,
                    2700,
                    2701,
                    2725,
                    2730,
                    2735,
                    2798,
                    2799,
                    2803,
                    2804,
                    2809,
                    2810,
                    2815,
                    2817,
                    2822,
                    2823,
                    2324,
                    2325,
                    2327,
                    2341,
                    1856,
                    1860,
                    1864,
                    2895,
                    2896,
                    2385,
                    2387,
                    2389,
                    2901,
                    2902,
                    2393,
                    1882,
                    1883,
                    2394,
                    2907,
                    2908,
                    2913,
                    2914,
                    2921,
                    2923,
                    2925,
                    1905,
                    1906,
                    1910,
                    1911,
                    2934,
                    2935,
                    1915,
                    1916,
                    2951,
                    2956,
                    1951,
                    1952,
                    1953,
                    1956,
                    1958,
                    1959,
                    2993,
                    2994,
                    3006,
                    3007,
                    3028,
                    3029,
                    2013,
                    2015,
                    2019,
                    2532,
                    2533,
                    2023,
                    2538,
                    2539,
                    2042,
                    3068,
                    2045
                ],
                "args": [
                    1864
                ],
                "wraps": [
                    1854
                ],
                "wrapper.__name__": [
                    1920,
                    1866,
                    1885
                ],
                "wrapper": [
                    1920,
                    1922,
                    1891,
                    1924,
                    1866,
                    1867,
                    1885,
                    1918,
                    1887
                ],
                "_forbid_nonstring_types": [
                    1869
                ],
                "self._parent": [
                    2694,
                    2822,
                    3082,
                    2700,
                    1956,
                    2993,
                    3006,
                    2639,
                    2895,
                    2815,
                    3028,
                    2901,
                    1882,
                    2907,
                    2655,
                    2913,
                    2532,
                    2660,
                    2921,
                    2538,
                    2666,
                    2798,
                    1905,
                    2673,
                    2803,
                    1910,
                    2934,
                    2680,
                    2809,
                    1915,
                    3068,
                    2687
                ],
                "kargs": [
                    1882
                ],
                "self._wrap_result": [
                    2689,
                    2817,
                    2695,
                    2823,
                    3083,
                    2701,
                    2935,
                    2994,
                    3007,
                    2640,
                    2896,
                    3029,
                    2902,
                    1883,
                    2908,
                    2656,
                    2914,
                    2533,
                    2661,
                    2539,
                    2667,
                    2923,
                    2799,
                    1906,
                    2675,
                    2804,
                    1911,
                    2681,
                    2810,
                    1916,
                    3069
                ],
                "returns_string": [
                    2056,
                    1906,
                    1911,
                    1883,
                    1916
                ],
                "forbid_nonstring_types": [
                    2692,
                    2820,
                    2182,
                    2949,
                    3080,
                    2698,
                    2954,
                    2723,
                    2728,
                    2733,
                    2991,
                    2737,
                    3004,
                    3009,
                    2636,
                    2893,
                    2899,
                    1880,
                    2905,
                    2652,
                    2911,
                    2530,
                    2917,
                    2536,
                    2664,
                    2670,
                    1903,
                    1908,
                    2932,
                    2678,
                    2807,
                    1913,
                    3066,
                    2684
                ],
                "forbidden_types": [
                    1880,
                    1913,
                    1908,
                    1903
                ],
                "f.__name__": [
                    1920,
                    1885
                ],
                "docstring": [
                    1886,
                    1887
                ],
                "wrapper.__doc__": [
                    1922,
                    1887
                ],
                "wrapper3": [
                    1918
                ],
                "wrapper2": [
                    1918
                ],
                "wrapper1": [
                    1918
                ],
                "f.__doc__": [
                    1921,
                    1922
                ],
                "source.__doc__": [
                    1931,
                    1932
                ],
                "source": [
                    1931,
                    1932
                ],
                "target.__doc__": [
                    1932
                ],
                "target": [
                    1932,
                    1933
                ],
                "do_copy": [
                    1935
                ],
                "NoNewAttributesMixin": [
                    1938
                ],
                "self._validate": [
                    1951
                ],
                "data": [
                    3461,
                    3462,
                    2325,
                    2327,
                    2331,
                    2332,
                    2334,
                    1951,
                    1952,
                    1953,
                    2336,
                    2337,
                    1956,
                    1958,
                    2350,
                    2360,
                    2363,
                    1986,
                    2370,
                    1994,
                    2394,
                    2921,
                    2922
                ],
                "self._is_categorical": [
                    1952,
                    1956,
                    2921,
                    2925,
                    2042
                ],
                "is_categorical_dtype": [
                    1952,
                    2389
                ],
                "self._is_string": [
                    2056,
                    1953
                ],
                "data.dtype.name": [
                    1953
                ],
                "data.dtype": [
                    1953
                ],
                "data.values.categories": [
                    1956
                ],
                "data.values": [
                    1956
                ],
                "self._orig": [
                    2956,
                    2065,
                    2324,
                    2325,
                    2327,
                    1958,
                    2094,
                    2098,
                    2115,
                    2117,
                    2121,
                    2385,
                    2387,
                    2389,
                    2393,
                    2394,
                    2144,
                    2921,
                    2045
                ],
                "self._freeze": [
                    1959
                ],
                "ABCMultiIndex": [
                    1986
                ],
                "values": [
                    2002,
                    1994,
                    1995,
                    1998
                ],
                "values.dtype": [
                    1998
                ],
                "StringDtype": [
                    1998
                ],
                "inferred_dtype": [
                    2009,
                    2002,
                    2005,
                    2007
                ],
                "key": [
                    2012,
                    2013,
                    2015
                ],
                "self.slice": [
                    2013
                ],
                "key.start": [
                    2013
                ],
                "key.stop": [
                    2013
                ],
                "key.step": [
                    2013
                ],
                "self.get": [
                    2023,
                    2019,
                    2015
                ],
                "g.notna": [
                    2020
                ],
                "use_codes": [
                    2042
                ],
                "take_1d": [
                    2044
                ],
                "cat.codes": [
                    2045
                ],
                "cat": [
                    2045
                ],
                "Series": [
                    2152,
                    2325,
                    2394,
                    2045,
                    2174
                ],
                "fill_value": [
                    2045
                ],
                "result.ndim": [
                    2050,
                    2063
                ],
                "is_list_like": [
                    2158,
                    2173,
                    2070
                ],
                "cons_row": [
                    2075
                ],
                "max_len": [
                    2080,
                    2078
                ],
                "self._orig.name": [
                    2394,
                    2387,
                    2094
                ],
                "is_bool_dtype": [
                    2101
                ],
                "out": [
                    2106,
                    2107,
                    2110,
                    2111
                ],
                "out.nlevels": [
                    2107
                ],
                "out.get_level_values": [
                    2110
                ],
                "Index": [
                    2113,
                    2387
                ],
                "self._orig.index": [
                    2144,
                    2115
                ],
                "cons": [
                    2121,
                    2122,
                    2117,
                    2118
                ],
                "self._orig._constructor_expanddim": [
                    2117
                ],
                "self._orig._constructor": [
                    2121
                ],
                "idx": [
                    2144,
                    2156,
                    2174
                ],
                "others": [
                    2319,
                    2330,
                    2341,
                    2350,
                    2352,
                    2353,
                    2356,
                    2360,
                    2361,
                    2363,
                    2149,
                    2150,
                    2151,
                    2152,
                    2153,
                    2154,
                    2155,
                    2156,
                    2157,
                    2158,
                    2159,
                    2166,
                    2169,
                    2170,
                    2173,
                    2174
                ],
                "others.values": [
                    2152
                ],
                "ABCDataFrame": [
                    2153
                ],
                "others.ndim": [
                    2155
                ],
                "x.ndim": [
                    2165
                ],
                "los": [
                    2168,
                    2170,
                    2171
                ],
                "self._get_series_list": [
                    2170,
                    2341
                ],
                "others.pop": [
                    2170
                ],
                "ensure_object": [
                    2363,
                    2331
                ],
                "na_rep": [
                    2336,
                    2335,
                    2375,
                    2378,
                    2333,
                    2367
                ],
                "na_mask.any": [
                    2333,
                    2335
                ],
                "np.where": [
                    2336,
                    2378
                ],
                "data.index.equals": [
                    2350
                ],
                "data.index": [
                    2394,
                    2350
                ],
                "x.index": [
                    2350
                ],
                "concat": [
                    2352
                ],
                "data.align": [
                    2360
                ],
                "all_cols": [
                    2374,
                    2377,
                    2378,
                    2380,
                    2383,
                    2363,
                    2364
                ],
                "na_masks": [
                    2378,
                    2364,
                    2365
                ],
                "union_mask": [
                    2371,
                    2373,
                    2375,
                    2365,
                    2367
                ],
                "np.logical_or.reduce": [
                    2365
                ],
                "np.logical_or": [
                    2365
                ],
                "union_mask.any": [
                    2375,
                    2367
                ],
                "not_masked": [
                    2373,
                    2374
                ],
                "cat_safe": [
                    2380,
                    2374,
                    2383
                ],
                "nm": [
                    2378
                ],
                "col": [
                    2378
                ],
                "self._orig.dtype": [
                    2393,
                    2389
                ],
                "str_split": [
                    2532
                ],
                "Appender": [
                    2529,
                    2722,
                    2626,
                    2535,
                    2727,
                    2983,
                    2890,
                    2732,
                    3057,
                    2642,
                    2898,
                    2996,
                    2904,
                    3071
                ],
                "str_rsplit": [
                    2538
                ],
                "x.partition": [
                    2638
                ],
                "deprecate_kwarg": [
                    2651,
                    2635
                ],
                "x.rpartition": [
                    2654
                ],
                "str_get": [
                    2658,
                    2660
                ],
                "copy": [
                    2658,
                    2691,
                    2819,
                    2916,
                    2948,
                    2663,
                    2697,
                    2953,
                    2669,
                    2801,
                    2931,
                    2677,
                    2806,
                    2683,
                    2812,
                    2910
                ],
                "str_join": [
                    2666,
                    2663
                ],
                "str_contains": [
                    2672,
                    2669
                ],
                "str_match": [
                    2680,
                    2677
                ],
                "str_replace": [
                    2683,
                    2686
                ],
                "str_repeat": [
                    2691,
                    2694
                ],
                "str_pad": [
                    2697,
                    2700,
                    2798
                ],
                "self.pad": [
                    2730,
                    2725,
                    2735
                ],
                "str_slice": [
                    2801,
                    2803
                ],
                "str_slice_replace": [
                    2809,
                    2806
                ],
                "str_decode": [
                    2812,
                    2815
                ],
                "str_encode": [
                    2819,
                    2822
                ],
                "str_strip": [
                    2907,
                    2901,
                    2895
                ],
                "str_wrap": [
                    2913,
                    2910
                ],
                "self._orig.astype": [
                    2921
                ],
                "str_get_dummies": [
                    2922,
                    2916
                ],
                "str_translate": [
                    2931,
                    2934
                ],
                "count": [
                    2937
                ],
                "_pat_wrapper": [
                    2944,
                    2937,
                    2938,
                    2941
                ],
                "str_count": [
                    2937
                ],
                "startswith": [
                    2938
                ],
                "str_startswith": [
                    2939
                ],
                "endswith": [
                    2941
                ],
                "str_endswith": [
                    2942
                ],
                "findall": [
                    2944
                ],
                "str_findall": [
                    2945
                ],
                "str_extract": [
                    2948,
                    2951
                ],
                "str_extractall": [
                    2953,
                    2956
                ],
                "str_find": [
                    2993,
                    3006
                ],
                "unicodedata.normalize": [
                    3027
                ],
                "unicodedata": [
                    3027
                ],
                "form": [
                    3027
                ],
                "str_index": [
                    3082,
                    3068
                ],
                "_noarg_wrapper": [
                    3232,
                    3428,
                    3237,
                    3242,
                    3434,
                    3227,
                    3404,
                    3247,
                    3440,
                    3410,
                    3222,
                    3446,
                    3416,
                    3131,
                    3452,
                    3422
                ],
                "_doc_args": [
                    3209,
                    3210,
                    3211,
                    3212,
                    3213,
                    3216,
                    3217,
                    3225,
                    3230,
                    3235,
                    3240,
                    3245,
                    3250,
                    3395,
                    3396,
                    3397,
                    3398,
                    3399,
                    3400,
                    3401,
                    3402,
                    3403,
                    3407,
                    3413,
                    3419,
                    3425,
                    3431,
                    3437,
                    3443,
                    3449,
                    3455
                ],
                "lower": [
                    3222
                ],
                "x.lower": [
                    3223
                ],
                "upper": [
                    3227
                ],
                "title": [
                    3232
                ],
                "x.title": [
                    3233
                ],
                "capitalize": [
                    3237
                ],
                "x.capitalize": [
                    3238
                ],
                "swapcase": [
                    3242
                ],
                "x.swapcase": [
                    3243
                ],
                "casefold": [
                    3247
                ],
                "x.casefold": [
                    3248
                ],
                "isalnum": [
                    3404
                ],
                "x.isalnum": [
                    3405
                ],
                "isalpha": [
                    3410
                ],
                "x.isalpha": [
                    3411
                ],
                "isdigit": [
                    3416
                ],
                "x.isdigit": [
                    3417
                ],
                "isspace": [
                    3422
                ],
                "x.isspace": [
                    3423
                ],
                "islower": [
                    3428
                ],
                "x.islower": [
                    3429
                ],
                "isupper": [
                    3434
                ],
                "x.isupper": [
                    3435
                ],
                "istitle": [
                    3440
                ],
                "x.istitle": [
                    3441
                ],
                "isnumeric": [
                    3446
                ],
                "x.isnumeric": [
                    3447
                ],
                "isdecimal": [
                    3452
                ],
                "x.isdecimal": [
                    3453
                ],
                "cls._validate": [
                    3461
                ],
                "cls": [
                    3461,
                    3462
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/pandas_124/pandas/tests/test_strings.py",
                "test_function": "test_empty_str_methods",
                "test_function_code": "    def test_empty_str_methods(self):\n        empty_str = empty = Series(dtype=object)\n        empty_int = Series(dtype=int)\n        empty_bool = Series(dtype=bool)\n        empty_bytes = Series(dtype=object)\n\n        # GH7241\n        # (extract) on empty series\n\n        tm.assert_series_equal(empty_str, empty.str.cat(empty))\n        assert \"\" == empty.str.cat()\n        tm.assert_series_equal(empty_str, empty.str.title())\n        tm.assert_series_equal(empty_int, empty.str.count(\"a\"))\n        tm.assert_series_equal(empty_bool, empty.str.contains(\"a\"))\n        tm.assert_series_equal(empty_bool, empty.str.startswith(\"a\"))\n        tm.assert_series_equal(empty_bool, empty.str.endswith(\"a\"))\n        tm.assert_series_equal(empty_str, empty.str.lower())\n        tm.assert_series_equal(empty_str, empty.str.upper())\n        tm.assert_series_equal(empty_str, empty.str.replace(\"a\", \"b\"))\n        tm.assert_series_equal(empty_str, empty.str.repeat(3))\n        tm.assert_series_equal(empty_bool, empty.str.match(\"^a\"))\n        tm.assert_frame_equal(\n            DataFrame(columns=[0], dtype=str), empty.str.extract(\"()\", expand=True)\n        )\n        tm.assert_frame_equal(\n            DataFrame(columns=[0, 1], dtype=str), empty.str.extract(\"()()\", expand=True)\n        )\n        tm.assert_series_equal(empty_str, empty.str.extract(\"()\", expand=False))\n        tm.assert_frame_equal(\n            DataFrame(columns=[0, 1], dtype=str),\n            empty.str.extract(\"()()\", expand=False),\n        )\n        tm.assert_frame_equal(DataFrame(dtype=str), empty.str.get_dummies())\n        tm.assert_series_equal(empty_str, empty_str.str.join(\"\"))\n        tm.assert_series_equal(empty_int, empty.str.len())\n        tm.assert_series_equal(empty_str, empty_str.str.findall(\"a\"))\n        tm.assert_series_equal(empty_int, empty.str.find(\"a\"))\n        tm.assert_series_equal(empty_int, empty.str.rfind(\"a\"))\n        tm.assert_series_equal(empty_str, empty.str.pad(42))\n        tm.assert_series_equal(empty_str, empty.str.center(42))\n        tm.assert_series_equal(empty_str, empty.str.split(\"a\"))\n        tm.assert_series_equal(empty_str, empty.str.rsplit(\"a\"))\n        tm.assert_series_equal(empty_str, empty.str.partition(\"a\", expand=False))\n        tm.assert_series_equal(empty_str, empty.str.rpartition(\"a\", expand=False))\n        tm.assert_series_equal(empty_str, empty.str.slice(stop=1))\n        tm.assert_series_equal(empty_str, empty.str.slice(step=1))\n        tm.assert_series_equal(empty_str, empty.str.strip())\n        tm.assert_series_equal(empty_str, empty.str.lstrip())\n        tm.assert_series_equal(empty_str, empty.str.rstrip())\n        tm.assert_series_equal(empty_str, empty.str.wrap(42))\n        tm.assert_series_equal(empty_str, empty.str.get(0))\n        tm.assert_series_equal(empty_str, empty_bytes.str.decode(\"ascii\"))\n        tm.assert_series_equal(empty_bytes, empty.str.encode(\"ascii\"))\n        # ismethods should always return boolean (GH 29624)\n        tm.assert_series_equal(empty_bool, empty.str.isalnum())\n        tm.assert_series_equal(empty_bool, empty.str.isalpha())\n        tm.assert_series_equal(empty_bool, empty.str.isdigit())\n        tm.assert_series_equal(empty_bool, empty.str.isspace())\n        tm.assert_series_equal(empty_bool, empty.str.islower())\n        tm.assert_series_equal(empty_bool, empty.str.isupper())\n        tm.assert_series_equal(empty_bool, empty.str.istitle())\n        tm.assert_series_equal(empty_bool, empty.str.isnumeric())\n        tm.assert_series_equal(empty_bool, empty.str.isdecimal())\n        tm.assert_series_equal(empty_str, empty.str.capitalize())\n        tm.assert_series_equal(empty_str, empty.str.swapcase())\n        tm.assert_series_equal(empty_str, empty.str.normalize(\"NFC\"))\n\n        table = str.maketrans(\"a\", \"b\")\n        tm.assert_series_equal(empty_str, empty.str.translate(table))",
                "test_error": "AssertionError: Attributes of Series are different  Attribute \"dtype\" are different [left]:  bool [right]: object",
                "full_test_error": "self = <pandas.tests.test_strings.TestStringMethods object at 0x1229b6430>\n\n    def test_empty_str_methods(self):\n        empty_str = empty = Series(dtype=object)\n        empty_int = Series(dtype=int)\n        empty_bool = Series(dtype=bool)\n        empty_bytes = Series(dtype=object)\n    \n        # GH7241\n        # (extract) on empty series\n    \n        tm.assert_series_equal(empty_str, empty.str.cat(empty))\n        assert \"\" == empty.str.cat()\n        tm.assert_series_equal(empty_str, empty.str.title())\n        tm.assert_series_equal(empty_int, empty.str.count(\"a\"))\n        tm.assert_series_equal(empty_bool, empty.str.contains(\"a\"))\n        tm.assert_series_equal(empty_bool, empty.str.startswith(\"a\"))\n        tm.assert_series_equal(empty_bool, empty.str.endswith(\"a\"))\n        tm.assert_series_equal(empty_str, empty.str.lower())\n        tm.assert_series_equal(empty_str, empty.str.upper())\n        tm.assert_series_equal(empty_str, empty.str.replace(\"a\", \"b\"))\n        tm.assert_series_equal(empty_str, empty.str.repeat(3))\n        tm.assert_series_equal(empty_bool, empty.str.match(\"^a\"))\n        tm.assert_frame_equal(\n            DataFrame(columns=[0], dtype=str), empty.str.extract(\"()\", expand=True)\n        )\n        tm.assert_frame_equal(\n            DataFrame(columns=[0, 1], dtype=str), empty.str.extract(\"()()\", expand=True)\n        )\n        tm.assert_series_equal(empty_str, empty.str.extract(\"()\", expand=False))\n        tm.assert_frame_equal(\n            DataFrame(columns=[0, 1], dtype=str),\n            empty.str.extract(\"()()\", expand=False),\n        )\n        tm.assert_frame_equal(DataFrame(dtype=str), empty.str.get_dummies())\n        tm.assert_series_equal(empty_str, empty_str.str.join(\"\"))\n        tm.assert_series_equal(empty_int, empty.str.len())\n        tm.assert_series_equal(empty_str, empty_str.str.findall(\"a\"))\n        tm.assert_series_equal(empty_int, empty.str.find(\"a\"))\n        tm.assert_series_equal(empty_int, empty.str.rfind(\"a\"))\n        tm.assert_series_equal(empty_str, empty.str.pad(42))\n        tm.assert_series_equal(empty_str, empty.str.center(42))\n        tm.assert_series_equal(empty_str, empty.str.split(\"a\"))\n        tm.assert_series_equal(empty_str, empty.str.rsplit(\"a\"))\n        tm.assert_series_equal(empty_str, empty.str.partition(\"a\", expand=False))\n        tm.assert_series_equal(empty_str, empty.str.rpartition(\"a\", expand=False))\n        tm.assert_series_equal(empty_str, empty.str.slice(stop=1))\n        tm.assert_series_equal(empty_str, empty.str.slice(step=1))\n        tm.assert_series_equal(empty_str, empty.str.strip())\n        tm.assert_series_equal(empty_str, empty.str.lstrip())\n        tm.assert_series_equal(empty_str, empty.str.rstrip())\n        tm.assert_series_equal(empty_str, empty.str.wrap(42))\n        tm.assert_series_equal(empty_str, empty.str.get(0))\n        tm.assert_series_equal(empty_str, empty_bytes.str.decode(\"ascii\"))\n        tm.assert_series_equal(empty_bytes, empty.str.encode(\"ascii\"))\n        # ismethods should always return boolean (GH 29624)\n>       tm.assert_series_equal(empty_bool, empty.str.isalnum())\nE       AssertionError: Attributes of Series are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  bool\nE       [right]: object\n\npandas/tests/test_strings.py:1857: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}