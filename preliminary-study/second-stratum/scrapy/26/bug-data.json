{
    "scrapy:26": {
        "/Users/jerry/Documents/GitHub/LPPR/local_envs/repos/scrapy_26/scrapy/settings/__init__.py": {
            "buggy_functions": [
                {
                    "function_name": "getbool",
                    "function_code": "def getbool(self, name, default=False):\n    \"\"\"\n    Get a setting value as a boolean.\n    \n    ``1``, ``'1'``, and ``True`` return ``True``, while ``0``, ``'0'``,\n    ``False`` and ``None`` return ``False``. \n\n    For example, settings populated through environment variables set to\n    ``'0'`` will return ``False`` when using this method.\n\n    :param name: the setting name\n    :type name: string\n\n    :param default: the value to return if no setting is found\n    :type default: any\n    \"\"\"\n    return bool(int(self.get(name, default)))\n",
                    "decorators": [],
                    "docstring": "Get a setting value as a boolean.\n\n``1``, ``'1'``, and ``True`` return ``True``, while ``0``, ``'0'``,\n``False`` and ``None`` return ``False``. \n\nFor example, settings populated through environment variables set to\n``'0'`` will return ``False`` when using this method.\n\n:param name: the setting name\n:type name: string\n\n:param default: the value to return if no setting is found\n:type default: any",
                    "start_line": 116,
                    "variables": {
                        "bool": [
                            132
                        ],
                        "int": [
                            132
                        ],
                        "self.get": [
                            132
                        ],
                        "self": [
                            132
                        ],
                        "name": [
                            132
                        ],
                        "default": [
                            132
                        ]
                    },
                    "filtered_variables": {
                        "self.get": [
                            132
                        ],
                        "self": [
                            132
                        ],
                        "name": [
                            132
                        ],
                        "default": [
                            132
                        ]
                    },
                    "diff_line_number": 119,
                    "class_data": {
                        "signature": "class BaseSettings(MutableMapping)",
                        "docstring": "Instances of this class behave like dictionaries, but store priorities\nalong with their ``(key, value)`` pairs, and can be frozen (i.e. marked\nimmutable).\n\nKey-value entries can be passed on initialization with the ``values``\nargument, and they would take the ``priority`` level (unless ``values`` is\nalready an instance of :class:`~scrapy.settings.BaseSettings`, in which\ncase the existing priority levels will be kept).  If the ``priority``\nargument is a string, the priority name will be looked up in\n:attr:`~scrapy.settings.SETTINGS_PRIORITIES`. Otherwise, a specific integer\nshould be provided.\n\nOnce the object is created, new settings can be loaded or updated with the\n:meth:`~scrapy.settings.BaseSettings.set` method, and can be accessed with\nthe square bracket notation of dictionaries, or with the\n:meth:`~scrapy.settings.BaseSettings.get` method of the instance and its\nvalue conversion variants. When requesting a stored key, the value with the\nhighest priority will be retrieved.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, values=None, priority='project'):\n    self.frozen = False\n    self.attributes = {}\n    self.update(values, priority)",
                            "def __getitem__(self, opt_name):\n    value = None\n    if opt_name in self:\n        value = self.attributes[opt_name].value\n    return value",
                            "def __contains__(self, name):\n    return name in self.attributes",
                            "def get(self, name, default=None):\n    \"\"\"\n    Get a setting value without affecting its original type.\n\n    :param name: the setting name\n    :type name: string\n\n    :param default: the value to return if no setting is found\n    :type default: any\n    \"\"\"\n    return self[name] if self[name] is not None else default",
                            "def getbool(self, name, default=False):\n    \"\"\"\n    Get a setting value as a boolean.\n    \n    ``1``, ``'1'``, and ``True`` return ``True``, while ``0``, ``'0'``,\n    ``False`` and ``None`` return ``False``. \n\n    For example, settings populated through environment variables set to\n    ``'0'`` will return ``False`` when using this method.\n\n    :param name: the setting name\n    :type name: string\n\n    :param default: the value to return if no setting is found\n    :type default: any\n    \"\"\"\n    return bool(int(self.get(name, default)))",
                            "def getint(self, name, default=0):\n    \"\"\"\n    Get a setting value as an int.\n\n    :param name: the setting name\n    :type name: string\n\n    :param default: the value to return if no setting is found\n    :type default: any\n    \"\"\"\n    return int(self.get(name, default))",
                            "def getfloat(self, name, default=0.0):\n    \"\"\"\n    Get a setting value as a float.\n\n    :param name: the setting name\n    :type name: string\n\n    :param default: the value to return if no setting is found\n    :type default: any\n    \"\"\"\n    return float(self.get(name, default))",
                            "def getlist(self, name, default=None):\n    \"\"\"\n    Get a setting value as a list. If the setting original type is a list, a\n    copy of it will be returned. If it's a string it will be split by \",\".\n\n    For example, settings populated through environment variables set to\n    ``'one,two'`` will return a list ['one', 'two'] when using this method.\n\n    :param name: the setting name\n    :type name: string\n\n    :param default: the value to return if no setting is found\n    :type default: any\n    \"\"\"\n    value = self.get(name, default or [])\n    if isinstance(value, six.string_types):\n        value = value.split(',')\n    return list(value)",
                            "def getdict(self, name, default=None):\n    \"\"\"\n    Get a setting value as a dictionary. If the setting original type is a\n    dictionary, a copy of it will be returned. If it is a string it will be\n    evaluated as a JSON dictionary. In the case that it is a\n    :class:`~scrapy.settings.BaseSettings` instance itself, it will be\n    converted to a dictionary, containing all its current settings values\n    as they would be returned by :meth:`~scrapy.settings.BaseSettings.get`,\n    and losing all information about priority and mutability.\n\n    :param name: the setting name\n    :type name: string\n\n    :param default: the value to return if no setting is found\n    :type default: any\n    \"\"\"\n    value = self.get(name, default or {})\n    if isinstance(value, six.string_types):\n        value = json.loads(value)\n    return dict(value)",
                            "def _getcomposite(self, name):\n    basename = name + '_BASE'\n    if basename in self:\n        warnings.warn('_BASE settings are deprecated.', category=ScrapyDeprecationWarning)\n        compsett = BaseSettings(self[name + '_BASE'], priority='default')\n        compsett.update(self[name])\n        return compsett\n    else:\n        return self[name]",
                            "def getpriority(self, name):\n    \"\"\"\n    Return the current numerical priority value of a setting, or ``None`` if\n    the given ``name`` does not exist.\n\n    :param name: the setting name\n    :type name: string\n    \"\"\"\n    prio = None\n    if name in self:\n        prio = self.attributes[name].priority\n    return prio",
                            "def maxpriority(self):\n    \"\"\"\n    Return the numerical value of the highest priority present throughout\n    all settings, or the numerical value for ``default`` from\n    :attr:`~scrapy.settings.SETTINGS_PRIORITIES` if there are no settings\n    stored.\n    \"\"\"\n    if len(self) > 0:\n        return max((self.getpriority(name) for name in self))\n    else:\n        return get_settings_priority('default')",
                            "def __setitem__(self, name, value):\n    self.set(name, value)",
                            "def set(self, name, value, priority='project'):\n    \"\"\"\n    Store a key/value attribute with a given priority.\n\n    Settings should be populated *before* configuring the Crawler object\n    (through the :meth:`~scrapy.crawler.Crawler.configure` method),\n    otherwise they won't have any effect.\n\n    :param name: the setting name\n    :type name: string\n\n    :param value: the value to associate with the setting\n    :type value: any\n\n    :param priority: the priority of the setting. Should be a key of\n        :attr:`~scrapy.settings.SETTINGS_PRIORITIES` or an integer\n    :type priority: string or int\n    \"\"\"\n    self._assert_mutability()\n    priority = get_settings_priority(priority)\n    if name not in self:\n        if isinstance(value, SettingsAttribute):\n            self.attributes[name] = value\n        else:\n            self.attributes[name] = SettingsAttribute(value, priority)\n    else:\n        self.attributes[name].set(value, priority)",
                            "def setdict(self, values, priority='project'):\n    self.update(values, priority)",
                            "def setmodule(self, module, priority='project'):\n    \"\"\"\n    Store settings from a module with a given priority.\n\n    This is a helper function that calls\n    :meth:`~scrapy.settings.BaseSettings.set` for every globally declared\n    uppercase variable of ``module`` with the provided ``priority``.\n\n    :param module: the module or the path of the module\n    :type module: module object or string\n\n    :param priority: the priority of the settings. Should be a key of\n        :attr:`~scrapy.settings.SETTINGS_PRIORITIES` or an integer\n    :type priority: string or int\n    \"\"\"\n    self._assert_mutability()\n    if isinstance(module, six.string_types):\n        module = import_module(module)\n    for key in dir(module):\n        if key.isupper():\n            self.set(key, getattr(module, key), priority)",
                            "def update(self, values, priority='project'):\n    \"\"\"\n    Store key/value pairs with a given priority.\n\n    This is a helper function that calls\n    :meth:`~scrapy.settings.BaseSettings.set` for every item of ``values``\n    with the provided ``priority``.\n\n    If ``values`` is a string, it is assumed to be JSON-encoded and parsed\n    into a dict with ``json.loads()`` first. If it is a\n    :class:`~scrapy.settings.BaseSettings` instance, the per-key priorities\n    will be used and the ``priority`` parameter ignored. This allows\n    inserting/updating settings with different priorities with a single\n    command.\n\n    :param values: the settings names and values\n    :type values: dict or string or :class:`~scrapy.settings.BaseSettings`\n\n    :param priority: the priority of the settings. Should be a key of\n        :attr:`~scrapy.settings.SETTINGS_PRIORITIES` or an integer\n    :type priority: string or int\n    \"\"\"\n    self._assert_mutability()\n    if isinstance(values, six.string_types):\n        values = json.loads(values)\n    if values is not None:\n        if isinstance(values, BaseSettings):\n            for name, value in six.iteritems(values):\n                self.set(name, value, values.getpriority(name))\n        else:\n            for name, value in six.iteritems(values):\n                self.set(name, value, priority)",
                            "def delete(self, name, priority='project'):\n    self._assert_mutability()\n    priority = get_settings_priority(priority)\n    if priority >= self.getpriority(name):\n        del self.attributes[name]",
                            "def __delitem__(self, name):\n    self._assert_mutability()\n    del self.attributes[name]",
                            "def _assert_mutability(self):\n    if self.frozen:\n        raise TypeError('Trying to modify an immutable Settings object')",
                            "def copy(self):\n    \"\"\"\n    Make a deep copy of current settings.\n\n    This method returns a new instance of the :class:`Settings` class,\n    populated with the same values and their priorities.\n\n    Modifications to the new object won't be reflected on the original\n    settings.\n    \"\"\"\n    return copy.deepcopy(self)",
                            "def freeze(self):\n    \"\"\"\n    Disable further changes to the current settings.\n\n    After calling this method, the present state of the settings will become\n    immutable. Trying to change values through the :meth:`~set` method and\n    its variants won't be possible and will be alerted.\n    \"\"\"\n    self.frozen = True",
                            "def frozencopy(self):\n    \"\"\"\n    Return an immutable copy of the current settings.\n\n    Alias for a :meth:`~freeze` call in the object returned by :meth:`copy`.\n    \"\"\"\n    copy = self.copy()\n    copy.freeze()\n    return copy",
                            "def __iter__(self):\n    return iter(self.attributes)",
                            "def __len__(self):\n    return len(self.attributes)",
                            "def __str__(self):\n    return str(self.attributes)",
                            "def __repr__(self):\n    return '<%s %s>' % (self.__class__.__name__, self.attributes)",
                            "@property\ndef overrides(self):\n    warnings.warn(\"`Settings.overrides` attribute is deprecated and won't be supported in Scrapy 0.26, use `Settings.set(name, value, priority='cmdline')` instead\", category=ScrapyDeprecationWarning, stacklevel=2)\n    try:\n        o = self._overrides\n    except AttributeError:\n        self._overrides = o = _DictProxy(self, 'cmdline')\n    return o",
                            "@property\ndef defaults(self):\n    warnings.warn(\"`Settings.defaults` attribute is deprecated and won't be supported in Scrapy 0.26, use `Settings.set(name, value, priority='default')` instead\", category=ScrapyDeprecationWarning, stacklevel=2)\n    try:\n        o = self._defaults\n    except AttributeError:\n        self._defaults = o = _DictProxy(self, 'default')\n    return o"
                        ],
                        "constructor_variables": [
                            "frozen",
                            "attributes"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, values=None, priority='project')",
                            "__getitem__(self, opt_name)",
                            "__contains__(self, name)",
                            "get(self, name, default=None)",
                            "getbool(self, name, default=False)",
                            "getint(self, name, default=0)",
                            "getfloat(self, name, default=0.0)",
                            "getlist(self, name, default=None)",
                            "getdict(self, name, default=None)",
                            "_getcomposite(self, name)",
                            "getpriority(self, name)",
                            "maxpriority(self)",
                            "__setitem__(self, name, value)",
                            "set(self, name, value, priority='project')",
                            "setdict(self, values, priority='project')",
                            "setmodule(self, module, priority='project')",
                            "update(self, values, priority='project')",
                            "delete(self, name, priority='project')",
                            "__delitem__(self, name)",
                            "_assert_mutability(self)",
                            "copy(self)",
                            "freeze(self)",
                            "frozencopy(self)",
                            "__iter__(self)",
                            "__len__(self)",
                            "__str__(self)",
                            "__repr__(self)",
                            "overrides(self)",
                            "defaults(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "_getcomposite",
                    "function_code": "def _getcomposite(self, name):\n    # DO NOT USE THIS FUNCTION IN YOUR CUSTOM PROJECTS\n    # It's for internal use in the transition away from the _BASE settings\n    # and will be removed along with _BASE support in a future release\n    basename = name + \"_BASE\"\n    if basename in self:\n        warnings.warn('_BASE settings are deprecated.',\n                      category=ScrapyDeprecationWarning)\n        compsett = BaseSettings(self[name + \"_BASE\"], priority='default')\n        compsett.update(self[name])\n        return compsett\n    else:\n        return self[name]\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 198,
                    "variables": {
                        "basename": [
                            202,
                            203
                        ],
                        "name": [
                            210,
                            202,
                            206,
                            207
                        ],
                        "self": [
                            210,
                            203,
                            206,
                            207
                        ],
                        "warnings.warn": [
                            204
                        ],
                        "warnings": [
                            204
                        ],
                        "ScrapyDeprecationWarning": [
                            205
                        ],
                        "compsett": [
                            208,
                            206,
                            207
                        ],
                        "BaseSettings": [
                            206
                        ],
                        "compsett.update": [
                            207
                        ]
                    },
                    "filtered_variables": {
                        "basename": [
                            202,
                            203
                        ],
                        "name": [
                            210,
                            202,
                            206,
                            207
                        ],
                        "self": [
                            210,
                            203,
                            206,
                            207
                        ],
                        "warnings.warn": [
                            204
                        ],
                        "warnings": [
                            204
                        ],
                        "ScrapyDeprecationWarning": [
                            205
                        ],
                        "compsett": [
                            208,
                            206,
                            207
                        ],
                        "BaseSettings": [
                            206
                        ],
                        "compsett.update": [
                            207
                        ]
                    },
                    "diff_line_number": 206,
                    "class_data": {
                        "signature": "class BaseSettings(MutableMapping)",
                        "docstring": "Instances of this class behave like dictionaries, but store priorities\nalong with their ``(key, value)`` pairs, and can be frozen (i.e. marked\nimmutable).\n\nKey-value entries can be passed on initialization with the ``values``\nargument, and they would take the ``priority`` level (unless ``values`` is\nalready an instance of :class:`~scrapy.settings.BaseSettings`, in which\ncase the existing priority levels will be kept).  If the ``priority``\nargument is a string, the priority name will be looked up in\n:attr:`~scrapy.settings.SETTINGS_PRIORITIES`. Otherwise, a specific integer\nshould be provided.\n\nOnce the object is created, new settings can be loaded or updated with the\n:meth:`~scrapy.settings.BaseSettings.set` method, and can be accessed with\nthe square bracket notation of dictionaries, or with the\n:meth:`~scrapy.settings.BaseSettings.get` method of the instance and its\nvalue conversion variants. When requesting a stored key, the value with the\nhighest priority will be retrieved.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, values=None, priority='project'):\n    self.frozen = False\n    self.attributes = {}\n    self.update(values, priority)",
                            "def __getitem__(self, opt_name):\n    value = None\n    if opt_name in self:\n        value = self.attributes[opt_name].value\n    return value",
                            "def __contains__(self, name):\n    return name in self.attributes",
                            "def get(self, name, default=None):\n    \"\"\"\n    Get a setting value without affecting its original type.\n\n    :param name: the setting name\n    :type name: string\n\n    :param default: the value to return if no setting is found\n    :type default: any\n    \"\"\"\n    return self[name] if self[name] is not None else default",
                            "def getbool(self, name, default=False):\n    \"\"\"\n    Get a setting value as a boolean.\n    \n    ``1``, ``'1'``, and ``True`` return ``True``, while ``0``, ``'0'``,\n    ``False`` and ``None`` return ``False``. \n\n    For example, settings populated through environment variables set to\n    ``'0'`` will return ``False`` when using this method.\n\n    :param name: the setting name\n    :type name: string\n\n    :param default: the value to return if no setting is found\n    :type default: any\n    \"\"\"\n    return bool(int(self.get(name, default)))",
                            "def getint(self, name, default=0):\n    \"\"\"\n    Get a setting value as an int.\n\n    :param name: the setting name\n    :type name: string\n\n    :param default: the value to return if no setting is found\n    :type default: any\n    \"\"\"\n    return int(self.get(name, default))",
                            "def getfloat(self, name, default=0.0):\n    \"\"\"\n    Get a setting value as a float.\n\n    :param name: the setting name\n    :type name: string\n\n    :param default: the value to return if no setting is found\n    :type default: any\n    \"\"\"\n    return float(self.get(name, default))",
                            "def getlist(self, name, default=None):\n    \"\"\"\n    Get a setting value as a list. If the setting original type is a list, a\n    copy of it will be returned. If it's a string it will be split by \",\".\n\n    For example, settings populated through environment variables set to\n    ``'one,two'`` will return a list ['one', 'two'] when using this method.\n\n    :param name: the setting name\n    :type name: string\n\n    :param default: the value to return if no setting is found\n    :type default: any\n    \"\"\"\n    value = self.get(name, default or [])\n    if isinstance(value, six.string_types):\n        value = value.split(',')\n    return list(value)",
                            "def getdict(self, name, default=None):\n    \"\"\"\n    Get a setting value as a dictionary. If the setting original type is a\n    dictionary, a copy of it will be returned. If it is a string it will be\n    evaluated as a JSON dictionary. In the case that it is a\n    :class:`~scrapy.settings.BaseSettings` instance itself, it will be\n    converted to a dictionary, containing all its current settings values\n    as they would be returned by :meth:`~scrapy.settings.BaseSettings.get`,\n    and losing all information about priority and mutability.\n\n    :param name: the setting name\n    :type name: string\n\n    :param default: the value to return if no setting is found\n    :type default: any\n    \"\"\"\n    value = self.get(name, default or {})\n    if isinstance(value, six.string_types):\n        value = json.loads(value)\n    return dict(value)",
                            "def _getcomposite(self, name):\n    basename = name + '_BASE'\n    if basename in self:\n        warnings.warn('_BASE settings are deprecated.', category=ScrapyDeprecationWarning)\n        compsett = BaseSettings(self[name + '_BASE'], priority='default')\n        compsett.update(self[name])\n        return compsett\n    else:\n        return self[name]",
                            "def getpriority(self, name):\n    \"\"\"\n    Return the current numerical priority value of a setting, or ``None`` if\n    the given ``name`` does not exist.\n\n    :param name: the setting name\n    :type name: string\n    \"\"\"\n    prio = None\n    if name in self:\n        prio = self.attributes[name].priority\n    return prio",
                            "def maxpriority(self):\n    \"\"\"\n    Return the numerical value of the highest priority present throughout\n    all settings, or the numerical value for ``default`` from\n    :attr:`~scrapy.settings.SETTINGS_PRIORITIES` if there are no settings\n    stored.\n    \"\"\"\n    if len(self) > 0:\n        return max((self.getpriority(name) for name in self))\n    else:\n        return get_settings_priority('default')",
                            "def __setitem__(self, name, value):\n    self.set(name, value)",
                            "def set(self, name, value, priority='project'):\n    \"\"\"\n    Store a key/value attribute with a given priority.\n\n    Settings should be populated *before* configuring the Crawler object\n    (through the :meth:`~scrapy.crawler.Crawler.configure` method),\n    otherwise they won't have any effect.\n\n    :param name: the setting name\n    :type name: string\n\n    :param value: the value to associate with the setting\n    :type value: any\n\n    :param priority: the priority of the setting. Should be a key of\n        :attr:`~scrapy.settings.SETTINGS_PRIORITIES` or an integer\n    :type priority: string or int\n    \"\"\"\n    self._assert_mutability()\n    priority = get_settings_priority(priority)\n    if name not in self:\n        if isinstance(value, SettingsAttribute):\n            self.attributes[name] = value\n        else:\n            self.attributes[name] = SettingsAttribute(value, priority)\n    else:\n        self.attributes[name].set(value, priority)",
                            "def setdict(self, values, priority='project'):\n    self.update(values, priority)",
                            "def setmodule(self, module, priority='project'):\n    \"\"\"\n    Store settings from a module with a given priority.\n\n    This is a helper function that calls\n    :meth:`~scrapy.settings.BaseSettings.set` for every globally declared\n    uppercase variable of ``module`` with the provided ``priority``.\n\n    :param module: the module or the path of the module\n    :type module: module object or string\n\n    :param priority: the priority of the settings. Should be a key of\n        :attr:`~scrapy.settings.SETTINGS_PRIORITIES` or an integer\n    :type priority: string or int\n    \"\"\"\n    self._assert_mutability()\n    if isinstance(module, six.string_types):\n        module = import_module(module)\n    for key in dir(module):\n        if key.isupper():\n            self.set(key, getattr(module, key), priority)",
                            "def update(self, values, priority='project'):\n    \"\"\"\n    Store key/value pairs with a given priority.\n\n    This is a helper function that calls\n    :meth:`~scrapy.settings.BaseSettings.set` for every item of ``values``\n    with the provided ``priority``.\n\n    If ``values`` is a string, it is assumed to be JSON-encoded and parsed\n    into a dict with ``json.loads()`` first. If it is a\n    :class:`~scrapy.settings.BaseSettings` instance, the per-key priorities\n    will be used and the ``priority`` parameter ignored. This allows\n    inserting/updating settings with different priorities with a single\n    command.\n\n    :param values: the settings names and values\n    :type values: dict or string or :class:`~scrapy.settings.BaseSettings`\n\n    :param priority: the priority of the settings. Should be a key of\n        :attr:`~scrapy.settings.SETTINGS_PRIORITIES` or an integer\n    :type priority: string or int\n    \"\"\"\n    self._assert_mutability()\n    if isinstance(values, six.string_types):\n        values = json.loads(values)\n    if values is not None:\n        if isinstance(values, BaseSettings):\n            for name, value in six.iteritems(values):\n                self.set(name, value, values.getpriority(name))\n        else:\n            for name, value in six.iteritems(values):\n                self.set(name, value, priority)",
                            "def delete(self, name, priority='project'):\n    self._assert_mutability()\n    priority = get_settings_priority(priority)\n    if priority >= self.getpriority(name):\n        del self.attributes[name]",
                            "def __delitem__(self, name):\n    self._assert_mutability()\n    del self.attributes[name]",
                            "def _assert_mutability(self):\n    if self.frozen:\n        raise TypeError('Trying to modify an immutable Settings object')",
                            "def copy(self):\n    \"\"\"\n    Make a deep copy of current settings.\n\n    This method returns a new instance of the :class:`Settings` class,\n    populated with the same values and their priorities.\n\n    Modifications to the new object won't be reflected on the original\n    settings.\n    \"\"\"\n    return copy.deepcopy(self)",
                            "def freeze(self):\n    \"\"\"\n    Disable further changes to the current settings.\n\n    After calling this method, the present state of the settings will become\n    immutable. Trying to change values through the :meth:`~set` method and\n    its variants won't be possible and will be alerted.\n    \"\"\"\n    self.frozen = True",
                            "def frozencopy(self):\n    \"\"\"\n    Return an immutable copy of the current settings.\n\n    Alias for a :meth:`~freeze` call in the object returned by :meth:`copy`.\n    \"\"\"\n    copy = self.copy()\n    copy.freeze()\n    return copy",
                            "def __iter__(self):\n    return iter(self.attributes)",
                            "def __len__(self):\n    return len(self.attributes)",
                            "def __str__(self):\n    return str(self.attributes)",
                            "def __repr__(self):\n    return '<%s %s>' % (self.__class__.__name__, self.attributes)",
                            "@property\ndef overrides(self):\n    warnings.warn(\"`Settings.overrides` attribute is deprecated and won't be supported in Scrapy 0.26, use `Settings.set(name, value, priority='cmdline')` instead\", category=ScrapyDeprecationWarning, stacklevel=2)\n    try:\n        o = self._overrides\n    except AttributeError:\n        self._overrides = o = _DictProxy(self, 'cmdline')\n    return o",
                            "@property\ndef defaults(self):\n    warnings.warn(\"`Settings.defaults` attribute is deprecated and won't be supported in Scrapy 0.26, use `Settings.set(name, value, priority='default')` instead\", category=ScrapyDeprecationWarning, stacklevel=2)\n    try:\n        o = self._defaults\n    except AttributeError:\n        self._defaults = o = _DictProxy(self, 'default')\n    return o"
                        ],
                        "constructor_variables": [
                            "frozen",
                            "attributes"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, values=None, priority='project')",
                            "__getitem__(self, opt_name)",
                            "__contains__(self, name)",
                            "get(self, name, default=None)",
                            "getbool(self, name, default=False)",
                            "getint(self, name, default=0)",
                            "getfloat(self, name, default=0.0)",
                            "getlist(self, name, default=None)",
                            "getdict(self, name, default=None)",
                            "_getcomposite(self, name)",
                            "getpriority(self, name)",
                            "maxpriority(self)",
                            "__setitem__(self, name, value)",
                            "set(self, name, value, priority='project')",
                            "setdict(self, values, priority='project')",
                            "setmodule(self, module, priority='project')",
                            "update(self, values, priority='project')",
                            "delete(self, name, priority='project')",
                            "__delitem__(self, name)",
                            "_assert_mutability(self)",
                            "copy(self)",
                            "freeze(self)",
                            "frozencopy(self)",
                            "__iter__(self)",
                            "__len__(self)",
                            "__str__(self)",
                            "__repr__(self)",
                            "overrides(self)",
                            "defaults(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def get_settings_priority(priority):\n    \"\"\"\n    Small helper function that looks up a given string priority in the\n    :attr:`~scrapy.settings.SETTINGS_PRIORITIES` dictionary and returns its\n    numerical value, or directly returns a given numerical priority.\n    \"\"\"\n    if isinstance(priority, six.string_types):\n        return SETTINGS_PRIORITIES[priority]\n    else:\n        return priority",
                "def iter_default_settings():\n    \"\"\"Return the default settings as an iterator of (name, value) tuples\"\"\"\n    for name in dir(default_settings):\n        if name.isupper():\n            yield name, getattr(default_settings, name)",
                "def overridden_settings(settings):\n    \"\"\"Return a dict of the settings that have been overridden\"\"\"\n    for name, defvalue in iter_default_settings():\n        value = settings[name]\n        if not isinstance(defvalue, dict) and value != defvalue:\n            yield name, value",
                "def __init__(self, value, priority):\n    self.value = value\n    if isinstance(self.value, BaseSettings):\n        self.priority = max(self.value.maxpriority(), priority)\n    else:\n        self.priority = priority",
                "def set(self, value, priority):\n    \"\"\"Sets value if priority is higher or equal than current priority.\"\"\"\n    if isinstance(self.value, BaseSettings):\n        # Ignore self.priority if self.value has per-key priorities\n        self.value.update(value, priority)\n        self.priority = max(self.value.maxpriority(), priority)\n    else:\n        if priority >= self.priority:\n            self.value = value\n            self.priority = priority",
                "def __str__(self):\n    return \"<SettingsAttribute value={self.value!r} \" \\\n           \"priority={self.priority}>\".format(self=self)",
                "def __init__(self, values=None, priority='project'):\n    self.frozen = False\n    self.attributes = {}\n    self.update(values, priority)",
                "def __getitem__(self, opt_name):\n    value = None\n    if opt_name in self:\n        value = self.attributes[opt_name].value\n    return value",
                "def __contains__(self, name):\n    return name in self.attributes",
                "def get(self, name, default=None):\n    \"\"\"\n    Get a setting value without affecting its original type.\n\n    :param name: the setting name\n    :type name: string\n\n    :param default: the value to return if no setting is found\n    :type default: any\n    \"\"\"\n    return self[name] if self[name] is not None else default",
                "def getbool(self, name, default=False):\n    \"\"\"\n    Get a setting value as a boolean.\n    \n    ``1``, ``'1'``, and ``True`` return ``True``, while ``0``, ``'0'``,\n    ``False`` and ``None`` return ``False``. \n\n    For example, settings populated through environment variables set to\n    ``'0'`` will return ``False`` when using this method.\n\n    :param name: the setting name\n    :type name: string\n\n    :param default: the value to return if no setting is found\n    :type default: any\n    \"\"\"\n    return bool(int(self.get(name, default)))",
                "def getint(self, name, default=0):\n    \"\"\"\n    Get a setting value as an int.\n\n    :param name: the setting name\n    :type name: string\n\n    :param default: the value to return if no setting is found\n    :type default: any\n    \"\"\"\n    return int(self.get(name, default))",
                "def getfloat(self, name, default=0.0):\n    \"\"\"\n    Get a setting value as a float.\n\n    :param name: the setting name\n    :type name: string\n\n    :param default: the value to return if no setting is found\n    :type default: any\n    \"\"\"\n    return float(self.get(name, default))",
                "def getlist(self, name, default=None):\n    \"\"\"\n    Get a setting value as a list. If the setting original type is a list, a\n    copy of it will be returned. If it's a string it will be split by \",\".\n\n    For example, settings populated through environment variables set to\n    ``'one,two'`` will return a list ['one', 'two'] when using this method.\n\n    :param name: the setting name\n    :type name: string\n\n    :param default: the value to return if no setting is found\n    :type default: any\n    \"\"\"\n    value = self.get(name, default or [])\n    if isinstance(value, six.string_types):\n        value = value.split(',')\n    return list(value)",
                "def getdict(self, name, default=None):\n    \"\"\"\n    Get a setting value as a dictionary. If the setting original type is a\n    dictionary, a copy of it will be returned. If it is a string it will be\n    evaluated as a JSON dictionary. In the case that it is a\n    :class:`~scrapy.settings.BaseSettings` instance itself, it will be\n    converted to a dictionary, containing all its current settings values\n    as they would be returned by :meth:`~scrapy.settings.BaseSettings.get`,\n    and losing all information about priority and mutability.\n\n    :param name: the setting name\n    :type name: string\n\n    :param default: the value to return if no setting is found\n    :type default: any\n    \"\"\"\n    value = self.get(name, default or {})\n    if isinstance(value, six.string_types):\n        value = json.loads(value)\n    return dict(value)",
                "def _getcomposite(self, name):\n    # DO NOT USE THIS FUNCTION IN YOUR CUSTOM PROJECTS\n    # It's for internal use in the transition away from the _BASE settings\n    # and will be removed along with _BASE support in a future release\n    basename = name + \"_BASE\"\n    if basename in self:\n        warnings.warn('_BASE settings are deprecated.',\n                      category=ScrapyDeprecationWarning)\n        compsett = BaseSettings(self[name + \"_BASE\"], priority='default')\n        compsett.update(self[name])\n        return compsett\n    else:\n        return self[name]",
                "def getpriority(self, name):\n    \"\"\"\n    Return the current numerical priority value of a setting, or ``None`` if\n    the given ``name`` does not exist.\n\n    :param name: the setting name\n    :type name: string\n    \"\"\"\n    prio = None\n    if name in self:\n        prio = self.attributes[name].priority\n    return prio",
                "def maxpriority(self):\n    \"\"\"\n    Return the numerical value of the highest priority present throughout\n    all settings, or the numerical value for ``default`` from\n    :attr:`~scrapy.settings.SETTINGS_PRIORITIES` if there are no settings\n    stored.\n    \"\"\"\n    if len(self) > 0:\n        return max(self.getpriority(name) for name in self)\n    else:\n        return get_settings_priority('default')",
                "def __setitem__(self, name, value):\n    self.set(name, value)",
                "def set(self, name, value, priority='project'):\n    \"\"\"\n    Store a key/value attribute with a given priority.\n\n    Settings should be populated *before* configuring the Crawler object\n    (through the :meth:`~scrapy.crawler.Crawler.configure` method),\n    otherwise they won't have any effect.\n\n    :param name: the setting name\n    :type name: string\n\n    :param value: the value to associate with the setting\n    :type value: any\n\n    :param priority: the priority of the setting. Should be a key of\n        :attr:`~scrapy.settings.SETTINGS_PRIORITIES` or an integer\n    :type priority: string or int\n    \"\"\"\n    self._assert_mutability()\n    priority = get_settings_priority(priority)\n    if name not in self:\n        if isinstance(value, SettingsAttribute):\n            self.attributes[name] = value\n        else:\n            self.attributes[name] = SettingsAttribute(value, priority)\n    else:\n        self.attributes[name].set(value, priority)",
                "def setdict(self, values, priority='project'):\n    self.update(values, priority)",
                "def setmodule(self, module, priority='project'):\n    \"\"\"\n    Store settings from a module with a given priority.\n\n    This is a helper function that calls\n    :meth:`~scrapy.settings.BaseSettings.set` for every globally declared\n    uppercase variable of ``module`` with the provided ``priority``.\n\n    :param module: the module or the path of the module\n    :type module: module object or string\n\n    :param priority: the priority of the settings. Should be a key of\n        :attr:`~scrapy.settings.SETTINGS_PRIORITIES` or an integer\n    :type priority: string or int\n    \"\"\"\n    self._assert_mutability()\n    if isinstance(module, six.string_types):\n        module = import_module(module)\n    for key in dir(module):\n        if key.isupper():\n            self.set(key, getattr(module, key), priority)",
                "def update(self, values, priority='project'):\n    \"\"\"\n    Store key/value pairs with a given priority.\n\n    This is a helper function that calls\n    :meth:`~scrapy.settings.BaseSettings.set` for every item of ``values``\n    with the provided ``priority``.\n\n    If ``values`` is a string, it is assumed to be JSON-encoded and parsed\n    into a dict with ``json.loads()`` first. If it is a\n    :class:`~scrapy.settings.BaseSettings` instance, the per-key priorities\n    will be used and the ``priority`` parameter ignored. This allows\n    inserting/updating settings with different priorities with a single\n    command.\n\n    :param values: the settings names and values\n    :type values: dict or string or :class:`~scrapy.settings.BaseSettings`\n\n    :param priority: the priority of the settings. Should be a key of\n        :attr:`~scrapy.settings.SETTINGS_PRIORITIES` or an integer\n    :type priority: string or int\n    \"\"\"\n    self._assert_mutability()\n    if isinstance(values, six.string_types):\n        values = json.loads(values)\n    if values is not None:\n        if isinstance(values, BaseSettings):\n            for name, value in six.iteritems(values):\n                self.set(name, value, values.getpriority(name))\n        else:\n            for name, value in six.iteritems(values):\n                self.set(name, value, priority)",
                "def delete(self, name, priority='project'):\n    self._assert_mutability()\n    priority = get_settings_priority(priority)\n    if priority >= self.getpriority(name):\n        del self.attributes[name]",
                "def __delitem__(self, name):\n    self._assert_mutability()\n    del self.attributes[name]",
                "def _assert_mutability(self):\n    if self.frozen:\n        raise TypeError(\"Trying to modify an immutable Settings object\")",
                "def copy(self):\n    \"\"\"\n    Make a deep copy of current settings.\n\n    This method returns a new instance of the :class:`Settings` class,\n    populated with the same values and their priorities.\n\n    Modifications to the new object won't be reflected on the original\n    settings.\n    \"\"\"\n    return copy.deepcopy(self)",
                "def freeze(self):\n    \"\"\"\n    Disable further changes to the current settings.\n\n    After calling this method, the present state of the settings will become\n    immutable. Trying to change values through the :meth:`~set` method and\n    its variants won't be possible and will be alerted.\n    \"\"\"\n    self.frozen = True",
                "def frozencopy(self):\n    \"\"\"\n    Return an immutable copy of the current settings.\n\n    Alias for a :meth:`~freeze` call in the object returned by :meth:`copy`.\n    \"\"\"\n    copy = self.copy()\n    copy.freeze()\n    return copy",
                "def __iter__(self):\n    return iter(self.attributes)",
                "def __len__(self):\n    return len(self.attributes)",
                "def __str__(self):\n    return str(self.attributes)",
                "def __repr__(self):\n    return \"<%s %s>\" % (self.__class__.__name__, self.attributes)",
                "@property\ndef overrides(self):\n    warnings.warn(\"`Settings.overrides` attribute is deprecated and won't \"\n                  \"be supported in Scrapy 0.26, use \"\n                  \"`Settings.set(name, value, priority='cmdline')` instead\",\n                  category=ScrapyDeprecationWarning, stacklevel=2)\n    try:\n        o = self._overrides\n    except AttributeError:\n        self._overrides = o = _DictProxy(self, 'cmdline')\n    return o",
                "@property\ndef defaults(self):\n    warnings.warn(\"`Settings.defaults` attribute is deprecated and won't \"\n                  \"be supported in Scrapy 0.26, use \"\n                  \"`Settings.set(name, value, priority='default')` instead\",\n                  category=ScrapyDeprecationWarning, stacklevel=2)\n    try:\n        o = self._defaults\n    except AttributeError:\n        self._defaults = o = _DictProxy(self, 'default')\n    return o",
                "def __init__(self, settings, priority):\n    self.o = {}\n    self.settings = settings\n    self.priority = priority",
                "def __len__(self):\n    return len(self.o)",
                "def __getitem__(self, k):\n    return self.o[k]",
                "def __setitem__(self, k, v):\n    self.settings.set(k, v, priority=self.priority)\n    self.o[k] = v",
                "def __delitem__(self, k):\n    del self.o[k]",
                "def __iter__(self, k, v):\n    return iter(self.o)",
                "def __init__(self, values=None, priority='project'):\n    # Do not pass kwarg values here. We don't want to promote user-defined\n    # dicts, and we want to update, not replace, default dicts with the\n    # values given by the user\n    super(Settings, self).__init__()\n    self.setmodule(default_settings, 'default')\n    # Promote default dictionaries to BaseSettings instances for per-key\n    # priorities\n    for name, val in six.iteritems(self):\n        if isinstance(val, dict):\n            self.set(name, BaseSettings(val, 'default'), 'default')\n    self.update(values, priority)",
                "def __init__(self, settings_module=None, **kw):\n    self.settings_module = settings_module\n    Settings.__init__(self, **kw)",
                "def __getitem__(self, opt_name):\n    if opt_name in self.overrides:\n        return self.overrides[opt_name]\n    if self.settings_module and hasattr(self.settings_module, opt_name):\n        return getattr(self.settings_module, opt_name)\n    if opt_name in self.defaults:\n        return self.defaults[opt_name]\n    return Settings.__getitem__(self, opt_name)",
                "def __str__(self):\n    return \"<CrawlerSettings module=%r>\" % self.settings_module"
            ],
            "inscope_function_signatures": [
                "get_settings_priority(priority)",
                "iter_default_settings()",
                "overridden_settings(settings)",
                "__init__(self, value, priority)",
                "set(self, value, priority)",
                "__str__(self)",
                "__init__(self, values=None, priority='project')",
                "__getitem__(self, opt_name)",
                "__contains__(self, name)",
                "get(self, name, default=None)",
                "getbool(self, name, default=False)",
                "getint(self, name, default=0)",
                "getfloat(self, name, default=0.0)",
                "getlist(self, name, default=None)",
                "getdict(self, name, default=None)",
                "_getcomposite(self, name)",
                "getpriority(self, name)",
                "maxpriority(self)",
                "__setitem__(self, name, value)",
                "set(self, name, value, priority='project')",
                "setdict(self, values, priority='project')",
                "setmodule(self, module, priority='project')",
                "update(self, values, priority='project')",
                "delete(self, name, priority='project')",
                "__delitem__(self, name)",
                "_assert_mutability(self)",
                "copy(self)",
                "freeze(self)",
                "frozencopy(self)",
                "__iter__(self)",
                "__len__(self)",
                "__str__(self)",
                "__repr__(self)",
                "overrides(self)",
                "defaults(self)",
                "__init__(self, settings, priority)",
                "__len__(self)",
                "__getitem__(self, k)",
                "__setitem__(self, k, v)",
                "__delitem__(self, k)",
                "__iter__(self, k, v)",
                "__init__(self, values=None, priority='project')",
                "__init__(self, settings_module=None, **kw)",
                "__getitem__(self, opt_name)",
                "__str__(self)"
            ],
            "variables_in_file": {
                "SETTINGS_PRIORITIES": [
                    14,
                    30
                ],
                "isinstance": [
                    194,
                    261,
                    319,
                    453,
                    492,
                    45,
                    173,
                    52,
                    316,
                    29,
                    287
                ],
                "priority": [
                    259,
                    264,
                    266,
                    269,
                    29,
                    30,
                    414,
                    32,
                    291,
                    46,
                    48,
                    54,
                    55,
                    57,
                    59,
                    324,
                    455,
                    328,
                    329,
                    93,
                    222
                ],
                "six.string_types": [
                    194,
                    173,
                    316,
                    29,
                    287
                ],
                "six": [
                    320,
                    194,
                    323,
                    452,
                    173,
                    316,
                    29,
                    287
                ],
                "object": [
                    35
                ],
                "self.value": [
                    44,
                    45,
                    46,
                    52,
                    54,
                    55,
                    58
                ],
                "self": [
                    44,
                    45,
                    46,
                    48,
                    52,
                    54,
                    55,
                    57,
                    58,
                    59,
                    63,
                    91,
                    92,
                    93,
                    97,
                    98,
                    102,
                    114,
                    132,
                    144,
                    156,
                    172,
                    193,
                    203,
                    206,
                    207,
                    210,
                    221,
                    222,
                    232,
                    233,
                    238,
                    258,
                    260,
                    262,
                    264,
                    266,
                    269,
                    286,
                    291,
                    315,
                    321,
                    324,
                    327,
                    329,
                    330,
                    333,
                    334,
                    337,
                    350,
                    360,
                    368,
                    373,
                    376,
                    379,
                    382,
                    391,
                    393,
                    403,
                    405,
                    412,
                    413,
                    414,
                    417,
                    420,
                    423,
                    424,
                    427,
                    430,
                    448,
                    449,
                    452,
                    454,
                    455,
                    461,
                    462,
                    465,
                    466,
                    467,
                    468,
                    469,
                    470,
                    471,
                    474
                ],
                "value": [
                    261,
                    262,
                    264,
                    266,
                    44,
                    172,
                    173,
                    174,
                    175,
                    54,
                    58,
                    320,
                    193,
                    194,
                    195,
                    196,
                    321,
                    323,
                    324,
                    96,
                    98,
                    99,
                    491,
                    492,
                    493,
                    238
                ],
                "BaseSettings": [
                    454,
                    45,
                    206,
                    433,
                    52,
                    319
                ],
                "self.priority": [
                    423,
                    46,
                    48,
                    55,
                    57,
                    59,
                    414
                ],
                "max": [
                    233,
                    46,
                    55
                ],
                "self.value.maxpriority": [
                    46,
                    55
                ],
                "self.value.update": [
                    54
                ],
                "format": [
                    62
                ],
                "__repr__": [
                    65
                ],
                "__str__": [
                    65
                ],
                "MutableMapping": [
                    409,
                    68
                ],
                "self.frozen": [
                    360,
                    337,
                    91
                ],
                "self.attributes": [
                    98,
                    382,
                    102,
                    262,
                    264,
                    266,
                    330,
                    334,
                    373,
                    376,
                    379,
                    92,
                    222
                ],
                "self.update": [
                    269,
                    93,
                    455
                ],
                "values": [
                    320,
                    321,
                    323,
                    455,
                    269,
                    93,
                    316,
                    317,
                    318,
                    319
                ],
                "opt_name": [
                    97,
                    98,
                    465,
                    466,
                    467,
                    468,
                    469,
                    470,
                    471
                ],
                "name": [
                    132,
                    260,
                    262,
                    264,
                    266,
                    144,
                    156,
                    172,
                    320,
                    193,
                    321,
                    323,
                    324,
                    452,
                    454,
                    329,
                    202,
                    330,
                    206,
                    207,
                    334,
                    210,
                    221,
                    222,
                    483,
                    484,
                    485,
                    102,
                    233,
                    490,
                    491,
                    493,
                    238,
                    114
                ],
                "default": [
                    193,
                    132,
                    172,
                    144,
                    114,
                    156
                ],
                "bool": [
                    132
                ],
                "int": [
                    144,
                    132
                ],
                "self.get": [
                    193,
                    132,
                    172,
                    144,
                    156
                ],
                "float": [
                    156
                ],
                "value.split": [
                    174
                ],
                "list": [
                    175
                ],
                "json.loads": [
                    195,
                    317
                ],
                "json": [
                    195,
                    317
                ],
                "dict": [
                    492,
                    196,
                    453
                ],
                "basename": [
                    202,
                    203
                ],
                "warnings.warn": [
                    386,
                    204,
                    398
                ],
                "warnings": [
                    386,
                    204,
                    398
                ],
                "ScrapyDeprecationWarning": [
                    401,
                    205,
                    389
                ],
                "compsett": [
                    208,
                    206,
                    207
                ],
                "compsett.update": [
                    207
                ],
                "prio": [
                    220,
                    222,
                    223
                ],
                "len": [
                    232,
                    417,
                    376
                ],
                "self.getpriority": [
                    329,
                    233
                ],
                "get_settings_priority": [
                    259,
                    328,
                    235
                ],
                "self.set": [
                    321,
                    291,
                    324,
                    454,
                    238
                ],
                "self._assert_mutability": [
                    258,
                    327,
                    333,
                    315,
                    286
                ],
                "SettingsAttribute": [
                    264,
                    261
                ],
                "set": [
                    266
                ],
                "module": [
                    288,
                    289,
                    291,
                    287
                ],
                "import_module": [
                    288
                ],
                "key": [
                    289,
                    290,
                    291
                ],
                "dir": [
                    289,
                    483
                ],
                "key.isupper": [
                    290
                ],
                "getattr": [
                    291,
                    468,
                    485
                ],
                "six.iteritems": [
                    320,
                    323,
                    452
                ],
                "values.getpriority": [
                    321
                ],
                "TypeError": [
                    338
                ],
                "copy.deepcopy": [
                    350
                ],
                "copy": [
                    368,
                    369,
                    370,
                    350
                ],
                "self.copy": [
                    368
                ],
                "copy.freeze": [
                    369
                ],
                "iter": [
                    373,
                    430
                ],
                "str": [
                    379
                ],
                "self.__class__.__name__": [
                    382
                ],
                "self.__class__": [
                    382
                ],
                "o": [
                    391,
                    393,
                    394,
                    403,
                    405,
                    406
                ],
                "self._overrides": [
                    393,
                    391
                ],
                "AttributeError": [
                    392,
                    404
                ],
                "_DictProxy": [
                    393,
                    405
                ],
                "property": [
                    384,
                    396
                ],
                "self._defaults": [
                    403,
                    405
                ],
                "self.o": [
                    417,
                    420,
                    424,
                    427,
                    430,
                    412
                ],
                "self.settings": [
                    413,
                    423
                ],
                "settings": [
                    491,
                    413
                ],
                "k": [
                    424,
                    427,
                    420,
                    423
                ],
                "self.settings.set": [
                    423
                ],
                "v": [
                    424,
                    423
                ],
                "__init__": [
                    448
                ],
                "super": [
                    448
                ],
                "Settings": [
                    448,
                    458,
                    462,
                    471
                ],
                "self.setmodule": [
                    449
                ],
                "default_settings": [
                    449,
                    483,
                    485
                ],
                "val": [
                    452,
                    453,
                    454
                ],
                "self.settings_module": [
                    474,
                    467,
                    468,
                    461
                ],
                "settings_module": [
                    461
                ],
                "Settings.__init__": [
                    462
                ],
                "kw": [
                    462
                ],
                "self.overrides": [
                    465,
                    466
                ],
                "hasattr": [
                    467
                ],
                "self.defaults": [
                    469,
                    470
                ],
                "Settings.__getitem__": [
                    471
                ],
                "CrawlerSettings": [
                    476,
                    477
                ],
                "create_deprecated_class": [
                    476
                ],
                "name.isupper": [
                    484
                ],
                "defvalue": [
                    490,
                    492
                ],
                "iter_default_settings": [
                    490
                ]
            },
            "filtered_variables_in_file": {
                "SETTINGS_PRIORITIES": [
                    14,
                    30
                ],
                "priority": [
                    259,
                    264,
                    266,
                    269,
                    29,
                    30,
                    414,
                    32,
                    291,
                    46,
                    48,
                    54,
                    55,
                    57,
                    59,
                    324,
                    455,
                    328,
                    329,
                    93,
                    222
                ],
                "six.string_types": [
                    194,
                    173,
                    316,
                    29,
                    287
                ],
                "six": [
                    320,
                    194,
                    323,
                    452,
                    173,
                    316,
                    29,
                    287
                ],
                "self.value": [
                    44,
                    45,
                    46,
                    52,
                    54,
                    55,
                    58
                ],
                "self": [
                    44,
                    45,
                    46,
                    48,
                    52,
                    54,
                    55,
                    57,
                    58,
                    59,
                    63,
                    91,
                    92,
                    93,
                    97,
                    98,
                    102,
                    114,
                    132,
                    144,
                    156,
                    172,
                    193,
                    203,
                    206,
                    207,
                    210,
                    221,
                    222,
                    232,
                    233,
                    238,
                    258,
                    260,
                    262,
                    264,
                    266,
                    269,
                    286,
                    291,
                    315,
                    321,
                    324,
                    327,
                    329,
                    330,
                    333,
                    334,
                    337,
                    350,
                    360,
                    368,
                    373,
                    376,
                    379,
                    382,
                    391,
                    393,
                    403,
                    405,
                    412,
                    413,
                    414,
                    417,
                    420,
                    423,
                    424,
                    427,
                    430,
                    448,
                    449,
                    452,
                    454,
                    455,
                    461,
                    462,
                    465,
                    466,
                    467,
                    468,
                    469,
                    470,
                    471,
                    474
                ],
                "value": [
                    261,
                    262,
                    264,
                    266,
                    44,
                    172,
                    173,
                    174,
                    175,
                    54,
                    58,
                    320,
                    193,
                    194,
                    195,
                    196,
                    321,
                    323,
                    324,
                    96,
                    98,
                    99,
                    491,
                    492,
                    493,
                    238
                ],
                "BaseSettings": [
                    454,
                    45,
                    206,
                    433,
                    52,
                    319
                ],
                "self.priority": [
                    423,
                    46,
                    48,
                    55,
                    57,
                    59,
                    414
                ],
                "self.value.maxpriority": [
                    46,
                    55
                ],
                "self.value.update": [
                    54
                ],
                "__repr__": [
                    65
                ],
                "__str__": [
                    65
                ],
                "MutableMapping": [
                    409,
                    68
                ],
                "self.frozen": [
                    360,
                    337,
                    91
                ],
                "self.attributes": [
                    98,
                    382,
                    102,
                    262,
                    264,
                    266,
                    330,
                    334,
                    373,
                    376,
                    379,
                    92,
                    222
                ],
                "self.update": [
                    269,
                    93,
                    455
                ],
                "values": [
                    320,
                    321,
                    323,
                    455,
                    269,
                    93,
                    316,
                    317,
                    318,
                    319
                ],
                "opt_name": [
                    97,
                    98,
                    465,
                    466,
                    467,
                    468,
                    469,
                    470,
                    471
                ],
                "name": [
                    132,
                    260,
                    262,
                    264,
                    266,
                    144,
                    156,
                    172,
                    320,
                    193,
                    321,
                    323,
                    324,
                    452,
                    454,
                    329,
                    202,
                    330,
                    206,
                    207,
                    334,
                    210,
                    221,
                    222,
                    483,
                    484,
                    485,
                    102,
                    233,
                    490,
                    491,
                    493,
                    238,
                    114
                ],
                "default": [
                    193,
                    132,
                    172,
                    144,
                    114,
                    156
                ],
                "self.get": [
                    193,
                    132,
                    172,
                    144,
                    156
                ],
                "value.split": [
                    174
                ],
                "json.loads": [
                    195,
                    317
                ],
                "json": [
                    195,
                    317
                ],
                "basename": [
                    202,
                    203
                ],
                "warnings.warn": [
                    386,
                    204,
                    398
                ],
                "warnings": [
                    386,
                    204,
                    398
                ],
                "ScrapyDeprecationWarning": [
                    401,
                    205,
                    389
                ],
                "compsett": [
                    208,
                    206,
                    207
                ],
                "compsett.update": [
                    207
                ],
                "prio": [
                    220,
                    222,
                    223
                ],
                "self.getpriority": [
                    329,
                    233
                ],
                "get_settings_priority": [
                    259,
                    328,
                    235
                ],
                "self.set": [
                    321,
                    291,
                    324,
                    454,
                    238
                ],
                "self._assert_mutability": [
                    258,
                    327,
                    333,
                    315,
                    286
                ],
                "SettingsAttribute": [
                    264,
                    261
                ],
                "module": [
                    288,
                    289,
                    291,
                    287
                ],
                "import_module": [
                    288
                ],
                "key": [
                    289,
                    290,
                    291
                ],
                "key.isupper": [
                    290
                ],
                "six.iteritems": [
                    320,
                    323,
                    452
                ],
                "values.getpriority": [
                    321
                ],
                "copy.deepcopy": [
                    350
                ],
                "copy": [
                    368,
                    369,
                    370,
                    350
                ],
                "self.copy": [
                    368
                ],
                "copy.freeze": [
                    369
                ],
                "self.__class__.__name__": [
                    382
                ],
                "self.__class__": [
                    382
                ],
                "o": [
                    391,
                    393,
                    394,
                    403,
                    405,
                    406
                ],
                "self._overrides": [
                    393,
                    391
                ],
                "_DictProxy": [
                    393,
                    405
                ],
                "self._defaults": [
                    403,
                    405
                ],
                "self.o": [
                    417,
                    420,
                    424,
                    427,
                    430,
                    412
                ],
                "self.settings": [
                    413,
                    423
                ],
                "settings": [
                    491,
                    413
                ],
                "k": [
                    424,
                    427,
                    420,
                    423
                ],
                "self.settings.set": [
                    423
                ],
                "v": [
                    424,
                    423
                ],
                "__init__": [
                    448
                ],
                "Settings": [
                    448,
                    458,
                    462,
                    471
                ],
                "self.setmodule": [
                    449
                ],
                "default_settings": [
                    449,
                    483,
                    485
                ],
                "val": [
                    452,
                    453,
                    454
                ],
                "self.settings_module": [
                    474,
                    467,
                    468,
                    461
                ],
                "settings_module": [
                    461
                ],
                "Settings.__init__": [
                    462
                ],
                "kw": [
                    462
                ],
                "self.overrides": [
                    465,
                    466
                ],
                "self.defaults": [
                    469,
                    470
                ],
                "Settings.__getitem__": [
                    471
                ],
                "CrawlerSettings": [
                    476,
                    477
                ],
                "create_deprecated_class": [
                    476
                ],
                "name.isupper": [
                    484
                ],
                "defvalue": [
                    490,
                    492
                ],
                "iter_default_settings": [
                    490
                ]
            }
        },
        "test_data": []
    }
}