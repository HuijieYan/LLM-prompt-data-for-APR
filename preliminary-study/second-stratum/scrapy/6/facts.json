{
    "1.1.1": "def convert_image(self, image, size=None):\n    if image.format == 'PNG' and image.mode == 'RGBA':\n        background = Image.new('RGBA', image.size, (255, 255, 255))\n        background.paste(image, image)\n        image = background.convert('RGB')\n    elif image.mode != 'RGB':\n        image = image.convert('RGB')\n\n    if size:\n        image = image.copy()\n        image.thumbnail(size, Image.ANTIALIAS)\n\n    buf = BytesIO()\n    image.save(buf, 'JPEG')\n    return image, buf\n",
    "1.1.2": null,
    "1.2.1": "class ImagesPipeline(FilesPipeline)",
    "1.2.2": "Abstract pipeline that implement the image thumbnail generation logic\n\n    ",
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs/repos/scrapy_6/scrapy/pipelines/images.py",
    "1.3.2": null,
    "1.4.1": [
        "    def test_convert_image(self):\n        SIZE = (100, 100)\n        # straigh forward case: RGB and JPEG\n        COLOUR = (0, 127, 255)\n        im = _create_image('JPEG', 'RGB', SIZE, COLOUR)\n        converted, _ = self.pipeline.convert_image(im)\n        self.assertEquals(converted.mode, 'RGB')\n        self.assertEquals(converted.getcolors(), [(10000, COLOUR)])\n\n        # check that thumbnail keep image ratio\n        thumbnail, _ = self.pipeline.convert_image(converted, size=(10, 25))\n        self.assertEquals(thumbnail.mode, 'RGB')\n        self.assertEquals(thumbnail.size, (10, 10))\n\n        # transparency case: RGBA and PNG\n        COLOUR = (0, 127, 255, 50)\n        im = _create_image('PNG', 'RGBA', SIZE, COLOUR)\n        converted, _ = self.pipeline.convert_image(im)\n        self.assertEquals(converted.mode, 'RGB')\n        self.assertEquals(converted.getcolors(), [(10000, (205, 230, 255))])\n\n        # transparency case with palette: P and PNG\n        COLOUR = (0, 127, 255, 50)\n        im = _create_image('PNG', 'RGBA', SIZE, COLOUR)\n        im = im.convert('P')\n        converted, _ = self.pipeline.convert_image(im)\n        self.assertEquals(converted.mode, 'RGB')\n        self.assertEquals(converted.getcolors(), [(10000, (205, 230, 255))])"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs/repos/scrapy_6/tests/test_pipeline_images.py"
    ],
    "2.1.1": [
        [
            "E       twisted.trial.unittest.FailTest: Lists differ: [(10000, (0, 127, 255))] != [(10000, (205, 230, 255))]\nE       \nE       First differing element 0:\nE       (10000, (0, 127, 255))\nE       (10000, (205, 230, 255))\nE       \nE       - [(10000, (0, 127, 255))]\nE       ?             -----\nE       \nE       + [(10000, (205, 230, 255))]\nE       ?           +++++++"
        ]
    ],
    "2.1.2": [
        [
            "self = <tests.test_pipeline_images.ImagesPipelineTestCase testMethod=test_convert_image>\n\n    def test_convert_image(self):\n        SIZE = (100, 100)\n        # straigh forward case: RGB and JPEG\n        COLOUR = (0, 127, 255)\n        im = _create_image('JPEG', 'RGB', SIZE, COLOUR)\n        converted, _ = self.pipeline.convert_image(im)\n        self.assertEquals(converted.mode, 'RGB')\n        self.assertEquals(converted.getcolors(), [(10000, COLOUR)])\n    \n        # check that thumbnail keep image ratio\n        thumbnail, _ = self.pipeline.convert_image(converted, size=(10, 25))\n        self.assertEquals(thumbnail.mode, 'RGB')\n        self.assertEquals(thumbnail.size, (10, 10))\n    \n        # transparency case: RGBA and PNG\n        COLOUR = (0, 127, 255, 50)\n        im = _create_image('PNG', 'RGBA', SIZE, COLOUR)\n        converted, _ = self.pipeline.convert_image(im)\n        self.assertEquals(converted.mode, 'RGB')\n        self.assertEquals(converted.getcolors(), [(10000, (205, 230, 255))])\n    \n        # transparency case with palette: P and PNG\n        COLOUR = (0, 127, 255, 50)\n        im = _create_image('PNG', 'RGBA', SIZE, COLOUR)\n        im = im.convert('P')\n        converted, _ = self.pipeline.convert_image(im)\n        self.assertEquals(converted.mode, 'RGB')\n>       self.assertEquals(converted.getcolors(), [(10000, (205, 230, 255))])\n\n/Volumes/SSD2T/bgp_envs/repos/scrapy_6/tests/test_pipeline_images.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Volumes/SSD2T/bgp_envs/envs/scrapy_6/lib/python3.8/site-packages/twisted/trial/_synctest.py:434: in assertEqual\n    super(_Assertions, self).assertEqual(first, second, msg)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_pipeline_images.ImagesPipelineTestCase testMethod=test_convert_image>\nmsg = 'Lists differ: [(10000, (0, 127, 255))] != [(10000, (205, 230, 255))]\\n\\nFirst differing element 0:\\n(10000, (0, 127, ..., 230, 255))\\n\\n- [(10000, (0, 127, 255))]\\n?             -----\\n\\n+ [(10000, (205, 230, 255))]\\n?           +++++++\\n'\n\n    def fail(self, msg=None):\n        \"\"\"\n        Absolutely fail the test.  Do not pass go, do not collect $200.\n    \n        @param msg: the message that will be displayed as the reason for the\n        failure\n        \"\"\"\n>       raise self.failureException(msg)",
            "\n/Volumes/SSD2T/bgp_envs/envs/scrapy_6/lib/python3.8/site-packages/twisted/trial/_synctest.py:377: FailTest"
        ]
    ],
    "2.1.3": [
        [
            {
                "image.format": "'JPEG'",
                "image": "<PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=100x100 at 0x105500C70>",
                "image.mode": "'RGB'",
                "image.size": "(100, 100)",
                "image.convert": "<bound method Image.convert of <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=100x100 at 0x105500C70>>",
                "image.copy": "<bound method Image.copy of <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=100x100 at 0x105500C70>>",
                "image.thumbnail": "<bound method Image.thumbnail of <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=100x100 at 0x105500C70>>",
                "image.save": "<bound method Image.save of <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=100x100 at 0x105500C70>>"
            },
            {
                "buf": "<_io.BytesIO object at 0x10557f4a0>"
            }
        ],
        [
            {
                "image.format": "'JPEG'",
                "image": "<PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=100x100 at 0x105500C70>",
                "image.mode": "'RGB'",
                "image.size": "(100, 100)",
                "image.convert": "<bound method Image.convert of <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=100x100 at 0x105500C70>>",
                "size": "(10, 25)",
                "image.copy": "<bound method Image.copy of <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=100x100 at 0x105500C70>>",
                "image.thumbnail": "<bound method Image.thumbnail of <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=100x100 at 0x105500C70>>",
                "image.save": "<bound method Image.save of <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=100x100 at 0x105500C70>>"
            },
            {
                "image": "<PIL.Image.Image image mode=RGB size=10x10 at 0x105586520>",
                "image.size": "(10, 10)",
                "buf": "<_io.BytesIO object at 0x10557f950>"
            }
        ],
        [
            {
                "image.format": "'PNG'",
                "image": "<PIL.PngImagePlugin.PngImageFile image mode=RGBA size=100x100 at 0x1055869D0>",
                "image.mode": "'RGBA'",
                "image.size": "(100, 100)",
                "image.convert": "<bound method Image.convert of <PIL.PngImagePlugin.PngImageFile image mode=RGBA size=100x100 at 0x1055869D0>>",
                "image.copy": "<bound method Image.copy of <PIL.PngImagePlugin.PngImageFile image mode=RGBA size=100x100 at 0x1055869D0>>",
                "image.thumbnail": "<bound method Image.thumbnail of <PIL.PngImagePlugin.PngImageFile image mode=RGBA size=100x100 at 0x1055869D0>>",
                "image.save": "<bound method Image.save of <PIL.PngImagePlugin.PngImageFile image mode=RGBA size=100x100 at 0x1055869D0>>"
            },
            {
                "image": "<PIL.Image.Image image mode=RGB size=100x100 at 0x105586EE0>",
                "image.mode": "'RGB'",
                "background": "<PIL.Image.Image image mode=RGBA size=100x100 at 0x105586EB0>",
                "background.paste": "<bound method Image.paste of <PIL.Image.Image image mode=RGBA size=100x100 at 0x105586EB0>>",
                "background.convert": "<bound method Image.convert of <PIL.Image.Image image mode=RGBA size=100x100 at 0x105586EB0>>",
                "image.convert": "<bound method Image.convert of <PIL.Image.Image image mode=RGB size=100x100 at 0x105586EE0>>",
                "image.copy": "<bound method Image.copy of <PIL.Image.Image image mode=RGB size=100x100 at 0x105586EE0>>",
                "image.thumbnail": "<bound method Image.thumbnail of <PIL.Image.Image image mode=RGB size=100x100 at 0x105586EE0>>",
                "buf": "<_io.BytesIO object at 0x10557fbd0>",
                "image.save": "<bound method Image.save of <PIL.Image.Image image mode=RGB size=100x100 at 0x105586EE0>>"
            }
        ],
        [
            {
                "image": "<PIL.Image.Image image mode=P size=100x100 at 0x1055865B0>",
                "image.mode": "'P'",
                "image.size": "(100, 100)",
                "image.convert": "<bound method Image.convert of <PIL.Image.Image image mode=P size=100x100 at 0x1055865B0>>",
                "image.copy": "<bound method Image.copy of <PIL.Image.Image image mode=P size=100x100 at 0x1055865B0>>",
                "image.thumbnail": "<bound method Image.thumbnail of <PIL.Image.Image image mode=P size=100x100 at 0x1055865B0>>",
                "image.save": "<bound method Image.save of <PIL.Image.Image image mode=P size=100x100 at 0x1055865B0>>"
            },
            {
                "image": "<PIL.Image.Image image mode=RGB size=100x100 at 0x105590820>",
                "image.mode": "'RGB'",
                "buf": "<_io.BytesIO object at 0x10557fa90>"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "image.format": "str",
                "image": "JpegImageFile",
                "image.mode": "str",
                "image.size": "tuple",
                "image.convert": "method",
                "image.copy": "method",
                "image.thumbnail": "method",
                "image.save": "method"
            },
            {
                "buf": "BytesIO"
            }
        ],
        [
            {
                "image.format": "str",
                "image": "JpegImageFile",
                "image.mode": "str",
                "image.size": "tuple",
                "image.convert": "method",
                "size": "tuple",
                "image.copy": "method",
                "image.thumbnail": "method",
                "image.save": "method"
            },
            {
                "image": "Image",
                "image.size": "tuple",
                "buf": "BytesIO"
            }
        ],
        [
            {
                "image.format": "str",
                "image": "PngImageFile",
                "image.mode": "str",
                "image.size": "tuple",
                "image.convert": "method",
                "image.copy": "method",
                "image.thumbnail": "method",
                "image.save": "method"
            },
            {
                "image": "Image",
                "image.mode": "str",
                "background": "Image",
                "background.paste": "method",
                "background.convert": "method",
                "image.convert": "method",
                "image.copy": "method",
                "image.thumbnail": "method",
                "buf": "BytesIO",
                "image.save": "method"
            }
        ],
        [
            {
                "image": "Image",
                "image.mode": "str",
                "image.size": "tuple",
                "image.convert": "method",
                "image.copy": "method",
                "image.thumbnail": "method",
                "image.save": "method"
            },
            {
                "image": "Image",
                "image.mode": "str",
                "buf": "BytesIO"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "image.format": "'JPEG'",
                "image": "<PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=100x100 at 0x1125932E0>",
                "image.mode": "'RGB'",
                "image.size": "(100, 100)",
                "image.convert": "<bound method Image.convert of <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=100x100 at 0x1125932E0>>",
                "image.copy": "<bound method Image.copy of <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=100x100 at 0x1125932E0>>",
                "image.thumbnail": "<bound method Image.thumbnail of <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=100x100 at 0x1125932E0>>",
                "image.save": "<bound method Image.save of <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=100x100 at 0x1125932E0>>"
            },
            {
                "buf": "<_io.BytesIO object at 0x1126134f0>"
            }
        ],
        [
            {
                "image.format": "'JPEG'",
                "image": "<PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=100x100 at 0x1125932E0>",
                "image.mode": "'RGB'",
                "image.size": "(100, 100)",
                "image.convert": "<bound method Image.convert of <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=100x100 at 0x1125932E0>>",
                "size": "(10, 25)",
                "image.copy": "<bound method Image.copy of <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=100x100 at 0x1125932E0>>",
                "image.thumbnail": "<bound method Image.thumbnail of <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=100x100 at 0x1125932E0>>",
                "image.save": "<bound method Image.save of <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=100x100 at 0x1125932E0>>"
            },
            {
                "image": "<PIL.Image.Image image mode=RGB size=10x10 at 0x112616D30>",
                "image.size": "(10, 10)",
                "image.convert": "<bound method Image.convert of <PIL.Image.Image image mode=RGB size=10x10 at 0x112616D30>>",
                "image.copy": "<bound method Image.copy of <PIL.Image.Image image mode=RGB size=10x10 at 0x112616D30>>",
                "image.thumbnail": "<bound method Image.thumbnail of <PIL.Image.Image image mode=RGB size=10x10 at 0x112616D30>>",
                "buf": "<_io.BytesIO object at 0x1126139a0>",
                "image.save": "<bound method Image.save of <PIL.Image.Image image mode=RGB size=10x10 at 0x112616D30>>"
            }
        ],
        [
            {
                "image.format": "'PNG'",
                "image": "<PIL.PngImagePlugin.PngImageFile image mode=RGBA size=100x100 at 0x11261E220>",
                "image.mode": "'RGBA'",
                "image.size": "(100, 100)",
                "image.convert": "<bound method Image.convert of <PIL.PngImagePlugin.PngImageFile image mode=RGBA size=100x100 at 0x11261E220>>",
                "image.copy": "<bound method Image.copy of <PIL.PngImagePlugin.PngImageFile image mode=RGBA size=100x100 at 0x11261E220>>",
                "image.thumbnail": "<bound method Image.thumbnail of <PIL.PngImagePlugin.PngImageFile image mode=RGBA size=100x100 at 0x11261E220>>",
                "image.save": "<bound method Image.save of <PIL.PngImagePlugin.PngImageFile image mode=RGBA size=100x100 at 0x11261E220>>"
            },
            {
                "image": "<PIL.Image.Image image mode=RGB size=100x100 at 0x11261E730>",
                "image.mode": "'RGB'",
                "background": "<PIL.Image.Image image mode=RGBA size=100x100 at 0x11261E700>",
                "background.paste": "<bound method Image.paste of <PIL.Image.Image image mode=RGBA size=100x100 at 0x11261E700>>",
                "background.convert": "<bound method Image.convert of <PIL.Image.Image image mode=RGBA size=100x100 at 0x11261E700>>",
                "image.convert": "<bound method Image.convert of <PIL.Image.Image image mode=RGB size=100x100 at 0x11261E730>>",
                "image.copy": "<bound method Image.copy of <PIL.Image.Image image mode=RGB size=100x100 at 0x11261E730>>",
                "image.thumbnail": "<bound method Image.thumbnail of <PIL.Image.Image image mode=RGB size=100x100 at 0x11261E730>>",
                "buf": "<_io.BytesIO object at 0x112613c20>",
                "image.save": "<bound method Image.save of <PIL.Image.Image image mode=RGB size=100x100 at 0x11261E730>>"
            }
        ],
        [
            {
                "image": "<PIL.Image.Image image mode=P size=100x100 at 0x11261E700>",
                "image.mode": "'P'",
                "image.size": "(100, 100)",
                "image.convert": "<bound method Image.convert of <PIL.Image.Image image mode=P size=100x100 at 0x11261E700>>",
                "image.copy": "<bound method Image.copy of <PIL.Image.Image image mode=P size=100x100 at 0x11261E700>>",
                "image.thumbnail": "<bound method Image.thumbnail of <PIL.Image.Image image mode=P size=100x100 at 0x11261E700>>",
                "image.save": "<bound method Image.save of <PIL.Image.Image image mode=P size=100x100 at 0x11261E700>>"
            },
            {
                "image": "<PIL.Image.Image image mode=RGB size=100x100 at 0x1126260D0>",
                "image.mode": "'RGB'",
                "background": "<PIL.Image.Image image mode=RGBA size=100x100 at 0x11261EFA0>",
                "background.paste": "<bound method Image.paste of <PIL.Image.Image image mode=RGBA size=100x100 at 0x11261EFA0>>",
                "background.convert": "<bound method Image.convert of <PIL.Image.Image image mode=RGBA size=100x100 at 0x11261EFA0>>",
                "image.convert": "<bound method Image.convert of <PIL.Image.Image image mode=RGB size=100x100 at 0x1126260D0>>",
                "image.copy": "<bound method Image.copy of <PIL.Image.Image image mode=RGB size=100x100 at 0x1126260D0>>",
                "image.thumbnail": "<bound method Image.thumbnail of <PIL.Image.Image image mode=RGB size=100x100 at 0x1126260D0>>",
                "buf": "<_io.BytesIO object at 0x112613b80>",
                "image.save": "<bound method Image.save of <PIL.Image.Image image mode=RGB size=100x100 at 0x1126260D0>>"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "image.format": "str",
                "image": "JpegImageFile",
                "image.mode": "str",
                "image.size": "tuple",
                "image.convert": "method",
                "image.copy": "method",
                "image.thumbnail": "method",
                "image.save": "method"
            },
            {
                "buf": "BytesIO"
            }
        ],
        [
            {
                "image.format": "str",
                "image": "JpegImageFile",
                "image.mode": "str",
                "image.size": "tuple",
                "image.convert": "method",
                "size": "tuple",
                "image.copy": "method",
                "image.thumbnail": "method",
                "image.save": "method"
            },
            {
                "image": "Image",
                "image.size": "tuple",
                "image.convert": "method",
                "image.copy": "method",
                "image.thumbnail": "method",
                "buf": "BytesIO",
                "image.save": "method"
            }
        ],
        [
            {
                "image.format": "str",
                "image": "PngImageFile",
                "image.mode": "str",
                "image.size": "tuple",
                "image.convert": "method",
                "image.copy": "method",
                "image.thumbnail": "method",
                "image.save": "method"
            },
            {
                "image": "Image",
                "image.mode": "str",
                "background": "Image",
                "background.paste": "method",
                "background.convert": "method",
                "image.convert": "method",
                "image.copy": "method",
                "image.thumbnail": "method",
                "buf": "BytesIO",
                "image.save": "method"
            }
        ],
        [
            {
                "image": "Image",
                "image.mode": "str",
                "image.size": "tuple",
                "image.convert": "method",
                "image.copy": "method",
                "image.thumbnail": "method",
                "image.save": "method"
            },
            {
                "image": "Image",
                "image.mode": "str",
                "background": "Image",
                "background.paste": "method",
                "background.convert": "method",
                "image.convert": "method",
                "image.copy": "method",
                "image.thumbnail": "method",
                "buf": "BytesIO",
                "image.save": "method"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}