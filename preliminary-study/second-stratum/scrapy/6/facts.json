{
    "1.1.1": "def convert_image(self, image, size=None):\n    if image.format == 'PNG' and image.mode == 'RGBA':\n        background = Image.new('RGBA', image.size, (255, 255, 255))\n        background.paste(image, image)\n        image = background.convert('RGB')\n    elif image.mode != 'RGB':\n        image = image.convert('RGB')\n\n    if size:\n        image = image.copy()\n        image.thumbnail(size, Image.ANTIALIAS)\n\n    buf = BytesIO()\n    image.save(buf, 'JPEG')\n    return image, buf\n",
    "1.1.2": null,
    "1.2.1": "class ImagesPipeline(FilesPipeline)",
    "1.2.2": "Abstract pipeline that implement the image thumbnail generation logic\n\n    ",
    "1.2.3": null,
    "1.3.1": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/scrapy/scrapy/pipelines/images.py",
    "1.3.2": null,
    "2.1.1": [
        "    def test_convert_image(self):\n        SIZE = (100, 100)\n        # straigh forward case: RGB and JPEG\n        COLOUR = (0, 127, 255)\n        im = _create_image('JPEG', 'RGB', SIZE, COLOUR)\n        converted, _ = self.pipeline.convert_image(im)\n        self.assertEquals(converted.mode, 'RGB')\n        self.assertEquals(converted.getcolors(), [(10000, COLOUR)])\n\n        # check that thumbnail keep image ratio\n        thumbnail, _ = self.pipeline.convert_image(converted, size=(10, 25))\n        self.assertEquals(thumbnail.mode, 'RGB')\n        self.assertEquals(thumbnail.size, (10, 10))\n\n        # transparency case: RGBA and PNG\n        COLOUR = (0, 127, 255, 50)\n        im = _create_image('PNG', 'RGBA', SIZE, COLOUR)\n        converted, _ = self.pipeline.convert_image(im)\n        self.assertEquals(converted.mode, 'RGB')\n        self.assertEquals(converted.getcolors(), [(10000, (205, 230, 255))])\n\n        # transparency case with palette: P and PNG\n        COLOUR = (0, 127, 255, 50)\n        im = _create_image('PNG', 'RGBA', SIZE, COLOUR)\n        im = im.convert('P')\n        converted, _ = self.pipeline.convert_image(im)\n        self.assertEquals(converted.mode, 'RGB')\n        self.assertEquals(converted.getcolors(), [(10000, (205, 230, 255))])"
    ],
    "2.1.2": [
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/scrapy/tests/test_pipeline_images.py"
    ],
    "2.2.1": [
        [
            "E       twisted.trial.unittest.FailTest: Lists differ: [(10000, (0, 127, 255))] != [(10000, (205, 230, 255))]\nE       \nE       First differing element 0:\nE       (10000, (0, 127, 255))\nE       (10000, (205, 230, 255))\nE       \nE       - [(10000, (0, 127, 255))]\nE       ?             -----\nE       \nE       + [(10000, (205, 230, 255))]\nE       ?           +++++++"
        ]
    ],
    "2.2.2": [
        [
            "self = <tests.test_pipeline_images.ImagesPipelineTestCase testMethod=test_convert_image>\n\n    def test_convert_image(self):\n        SIZE = (100, 100)\n        # straigh forward case: RGB and JPEG\n        COLOUR = (0, 127, 255)\n        im = _create_image('JPEG', 'RGB', SIZE, COLOUR)\n        converted, _ = self.pipeline.convert_image(im)\n        self.assertEquals(converted.mode, 'RGB')\n        self.assertEquals(converted.getcolors(), [(10000, COLOUR)])\n    \n        # check that thumbnail keep image ratio\n        thumbnail, _ = self.pipeline.convert_image(converted, size=(10, 25))\n        self.assertEquals(thumbnail.mode, 'RGB')\n        self.assertEquals(thumbnail.size, (10, 10))\n    \n        # transparency case: RGBA and PNG\n        COLOUR = (0, 127, 255, 50)\n        im = _create_image('PNG', 'RGBA', SIZE, COLOUR)\n        converted, _ = self.pipeline.convert_image(im)\n        self.assertEquals(converted.mode, 'RGB')\n        self.assertEquals(converted.getcolors(), [(10000, (205, 230, 255))])\n    \n        # transparency case with palette: P and PNG\n        COLOUR = (0, 127, 255, 50)\n        im = _create_image('PNG', 'RGBA', SIZE, COLOUR)\n        im = im.convert('P')\n        converted, _ = self.pipeline.convert_image(im)\n        self.assertEquals(converted.mode, 'RGB')\n>       self.assertEquals(converted.getcolors(), [(10000, (205, 230, 255))])\n\n/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/scrapy/tests/test_pipeline_images.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Users/jerry/.abw/BugsInPy_Dir/envs/28/lib/python3.8/site-packages/twisted/trial/_synctest.py:434: in assertEqual\n    super(_Assertions, self).assertEqual(first, second, msg)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_pipeline_images.ImagesPipelineTestCase testMethod=test_convert_image>\nmsg = 'Lists differ: [(10000, (0, 127, 255))] != [(10000, (205, 230, 255))]\\n\\nFirst differing element 0:\\n(10000, (0, 127, ..., 230, 255))\\n\\n- [(10000, (0, 127, 255))]\\n?             -----\\n\\n+ [(10000, (205, 230, 255))]\\n?           +++++++\\n'\n\n    def fail(self, msg=None):\n        \"\"\"\n        Absolutely fail the test.  Do not pass go, do not collect $200.\n    \n        @param msg: the message that will be displayed as the reason for the\n        failure\n        \"\"\"\n>       raise self.failureException(msg)",
            "\n/Users/jerry/.abw/BugsInPy_Dir/envs/28/lib/python3.8/site-packages/twisted/trial/_synctest.py:377: FailTest"
        ]
    ],
    "2.2.3": null,
    "2.2.4": null,
    "2.2.5": null,
    "2.2.6": null,
    "3.1.1": null,
    "3.1.2": null
}