{
    "fastapi": [
        {
            "bugID": 6,
            "bitvector": {
                "1.3.1": 1,
                "1.3.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.1.2": 1,
                "2.2.3": 1,
                "2.2.4": 1,
                "2.2.5": 1,
                "2.2.6": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "start_line": 617,
            "file_name": "fastapi/dependencies/utils.py",
            "replace_code": "def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    from typing import List, Dict, Any, Optional, Union, Tuple\n    from pydantic.fields import ModelField\n    from pydantic import FormData\n    from fastapi.params import params\n    from fastapi.dependencies.utils import get_field_info\n    from fastapi.dependencies.models import ErrorWrapper, MissingError\n    from pydantic.error_wrappers import ErrorWrapper\n    from copy import deepcopy\n    import asyncio\n    from starlette.datastructures import UploadFile\n    from fastapi import FastAPI\n    values = {}\n    errors = []\n    if required_params:\n        for field in required_params:\n            value = None\n            if received_body is not None:\n                if isinstance(received_body, FormData):\n                    value = received_body.getlist(field.alias)\n                    if len(value) == 1:\n                        value = value[0]\n                else:\n                    value = received_body.get(field.alias)\n            if value is None and field.required:\n                errors.append(ErrorWrapper(MissingError(), loc=(\"body\", field.alias)))\n            else:\n                values[field.name] = value if value is not None else deepcopy(field.default)\n    return values, errors"
        }
    ]
}