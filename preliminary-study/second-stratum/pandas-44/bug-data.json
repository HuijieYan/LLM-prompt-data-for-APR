{
    "pandas:44": {
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/core/indexes/base.py": {
            "buggy_functions": [
                {
                    "function_name": null,
                    "function_code": null,
                    "decorators": [],
                    "docstring": null,
                    "start_line": null,
                    "variables": {},
                    "filtered_variables": {},
                    "diff_line_number": 32,
                    "class_data": null
                },
                {
                    "function_name": "_shallow_copy_with_infer",
                    "function_code": "def _shallow_copy_with_infer(self, values, **kwargs):\n    \"\"\"\n    Create a new Index inferring the class with passed value, don't copy\n    the data, use the same object attributes with passed in attributes\n    taking precedence.\n\n    *this is an internal non-public method*\n\n    Parameters\n    ----------\n    values : the values to create the new Index, optional\n    kwargs : updates the default attributes for this Index\n    \"\"\"\n    attributes = self._get_attributes_dict()\n    attributes.update(kwargs)\n    attributes[\"copy\"] = False\n    if not len(values) and \"dtype\" not in kwargs:\n        # TODO: what if hasattr(values, \"dtype\")?\n        attributes[\"dtype\"] = self.dtype\n    if self._infer_as_myclass:\n        try:\n            return self._constructor(values, **attributes)\n        except (TypeError, ValueError):\n            pass\n    return Index(values, **attributes)\n",
                    "decorators": [],
                    "docstring": "Create a new Index inferring the class with passed value, don't copy\nthe data, use the same object attributes with passed in attributes\ntaking precedence.\n\n*this is an internal non-public method*\n\nParameters\n----------\nvalues : the values to create the new Index, optional\nkwargs : updates the default attributes for this Index",
                    "start_line": 511,
                    "variables": {
                        "attributes": [
                            524,
                            525,
                            526,
                            529,
                            532,
                            535
                        ],
                        "self._get_attributes_dict": [
                            524
                        ],
                        "self": [
                            529,
                            530,
                            524,
                            532
                        ],
                        "attributes.update": [
                            525
                        ],
                        "kwargs": [
                            525,
                            527
                        ],
                        "len": [
                            527
                        ],
                        "values": [
                            532,
                            535,
                            527
                        ],
                        "self.dtype": [
                            529
                        ],
                        "self._infer_as_myclass": [
                            530
                        ],
                        "self._constructor": [
                            532
                        ],
                        "TypeError": [
                            533
                        ],
                        "ValueError": [
                            533
                        ],
                        "Index": [
                            535
                        ]
                    },
                    "filtered_variables": {
                        "attributes": [
                            524,
                            525,
                            526,
                            529,
                            532,
                            535
                        ],
                        "self._get_attributes_dict": [
                            524
                        ],
                        "self": [
                            529,
                            530,
                            524,
                            532
                        ],
                        "attributes.update": [
                            525
                        ],
                        "kwargs": [
                            525,
                            527
                        ],
                        "values": [
                            532,
                            535,
                            527
                        ],
                        "self.dtype": [
                            529
                        ],
                        "self._infer_as_myclass": [
                            530
                        ],
                        "self._constructor": [
                            532
                        ],
                        "Index": [
                            535
                        ]
                    },
                    "diff_line_number": 534,
                    "class_data": {
                        "signature": "class Index(IndexOpsMixin, PandasObject)",
                        "docstring": "Immutable ndarray implementing an ordered, sliceable set. The basic object\nstoring axis labels for all pandas objects.\n\nParameters\n----------\ndata : array-like (1-dimensional)\ndtype : NumPy dtype (default: object)\n    If dtype is None, we find the dtype that best fits the data.\n    If an actual dtype is provided, we coerce to that dtype if it's safe.\n    Otherwise, an error will be raised.\ncopy : bool\n    Make a copy of input ndarray.\nname : object\n    Name to be stored in the index.\ntupleize_cols : bool (default: True)\n    When True, attempt to create a MultiIndex if possible.\n\nSee Also\n--------\nRangeIndex : Index implementing a monotonic integer range.\nCategoricalIndex : Index of :class:`Categorical` s.\nMultiIndex : A multi-level, or hierarchical, Index.\nIntervalIndex : An Index of :class:`Interval` s.\nDatetimeIndex, TimedeltaIndex, PeriodIndex\nInt64Index, UInt64Index,  Float64Index\n\nNotes\n-----\nAn Index instance can **only** contain hashable objects\n\nExamples\n--------\n>>> pd.Index([1, 2, 3])\nInt64Index([1, 2, 3], dtype='int64')\n\n>>> pd.Index(list('abc'))\nIndex(['a', 'b', 'c'], dtype='object')",
                        "constructor_docstring": null,
                        "functions": [
                            "_left_indexer_unique(self, left, right)",
                            "_left_indexer(self, left, right)",
                            "_inner_indexer(self, left, right)",
                            "_outer_indexer(self, left, right)",
                            "__new__(cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs) -> 'Index'",
                            "asi8(self)",
                            "_simple_new(cls, values, name: Label=None)",
                            "_constructor(self)",
                            "_get_attributes_dict(self)",
                            "_shallow_copy(self, values=None, name: Label=no_default)",
                            "_shallow_copy_with_infer(self, values, **kwargs)",
                            "_update_inplace(self, result, **kwargs)",
                            "is_(self, other) -> bool",
                            "_reset_identity(self)",
                            "_cleanup(self)",
                            "_engine(self)",
                            "__len__(self) -> int",
                            "__array__(self, dtype=None) -> np.ndarray",
                            "__array_wrap__(self, result, context=None)",
                            "dtype(self)",
                            "ravel(self, order='C')",
                            "view(self, cls=None)",
                            "astype(self, dtype, copy=True)",
                            "take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
                            "_assert_take_fillable(self, values, indices, allow_fill=True, fill_value=None, na_value=np.nan)",
                            "repeat(self, repeats, axis=None)",
                            "copy(self, name=None, deep=False, dtype=None, names=None)",
                            "__copy__(self, **kwargs)",
                            "__deepcopy__(self, memo=None)",
                            "__repr__(self) -> str_t",
                            "_format_space(self) -> str_t",
                            "_formatter_func(self)",
                            "_format_data(self, name=None) -> str_t",
                            "_format_attrs(self)",
                            "_mpl_repr(self)",
                            "format(self, name: bool=False, formatter=None, **kwargs)",
                            "_format_with_header(self, header, na_rep='NaN', **kwargs)",
                            "to_native_types(self, slicer=None, **kwargs)",
                            "_format_native_types(self, na_rep='', quoting=None, **kwargs)",
                            "_summary(self, name=None) -> str_t",
                            "to_flat_index(self)",
                            "to_series(self, index=None, name=None)",
                            "to_frame(self, index: bool=True, name=None)",
                            "name(self)",
                            "name(self, value)",
                            "_validate_names(self, name=None, names=None, deep: bool=False)",
                            "_get_names(self)",
                            "_set_names(self, values, level=None)",
                            "set_names(self, names, level=None, inplace: bool=False)",
                            "rename(self, name, inplace=False)",
                            "nlevels(self) -> int",
                            "_sort_levels_monotonic(self)",
                            "_validate_index_level(self, level)",
                            "_get_level_number(self, level) -> int",
                            "sortlevel(self, level=None, ascending=True, sort_remaining=None)",
                            "_get_level_values(self, level)",
                            "droplevel(self, level=0)",
                            "_get_grouper_for_level(self, mapper, level=None)",
                            "is_monotonic(self) -> bool",
                            "is_monotonic_increasing(self) -> bool",
                            "is_monotonic_decreasing(self) -> bool",
                            "_is_strictly_monotonic_increasing(self) -> bool",
                            "_is_strictly_monotonic_decreasing(self) -> bool",
                            "is_unique(self) -> bool",
                            "has_duplicates(self) -> bool",
                            "is_boolean(self) -> bool",
                            "is_integer(self) -> bool",
                            "is_floating(self) -> bool",
                            "is_numeric(self) -> bool",
                            "is_object(self) -> bool",
                            "is_categorical(self) -> bool",
                            "is_interval(self) -> bool",
                            "is_mixed(self) -> bool",
                            "holds_integer(self) -> bool",
                            "inferred_type(self) -> str_t",
                            "is_all_dates(self) -> bool",
                            "__reduce__(self)",
                            "_isnan(self)",
                            "_nan_idxs(self)",
                            "hasnans(self) -> bool",
                            "isna(self)",
                            "notna(self)",
                            "fillna(self, value=None, downcast=None)",
                            "dropna(self, how='any')",
                            "unique(self, level=None)",
                            "drop_duplicates(self, keep='first')",
                            "duplicated(self, keep='first')",
                            "_get_unique_index(self, dropna: bool=False)",
                            "__add__(self, other)",
                            "__radd__(self, other)",
                            "__iadd__(self, other)",
                            "__sub__(self, other)",
                            "__rsub__(self, other)",
                            "__and__(self, other)",
                            "__or__(self, other)",
                            "__xor__(self, other)",
                            "__nonzero__(self)",
                            "_get_reconciled_name_object(self, other)",
                            "_union_incompatible_dtypes(self, other, sort)",
                            "_is_compatible_with_other(self, other) -> bool",
                            "_validate_sort_keyword(self, sort)",
                            "union(self, other, sort=None)",
                            "_union(self, other, sort)",
                            "_wrap_setop_result(self, other, result)",
                            "intersection(self, other, sort=False)",
                            "difference(self, other, sort=None)",
                            "symmetric_difference(self, other, result_name=None, sort=None)",
                            "_assert_can_do_setop(self, other)",
                            "_convert_can_do_setop(self, other)",
                            "get_loc(self, key, method=None, tolerance=None)",
                            "get_indexer(self, target, method=None, limit=None, tolerance=None) -> np.ndarray",
                            "_convert_tolerance(self, tolerance, target)",
                            "_get_fill_indexer(self, target: 'Index', method: str_t, limit=None, tolerance=None) -> np.ndarray",
                            "_get_fill_indexer_searchsorted(self, target: 'Index', method: str_t, limit=None) -> np.ndarray",
                            "_get_nearest_indexer(self, target: 'Index', limit, tolerance) -> np.ndarray",
                            "_filter_indexer_tolerance(self, target: 'Index', indexer: np.ndarray, tolerance) -> np.ndarray",
                            "_get_partial_string_timestamp_match_key(self, key)",
                            "_validate_positional_slice(self, key: slice)",
                            "_convert_slice_indexer(self, key: slice, kind: str_t)",
                            "_convert_listlike_indexer(self, keyarr)",
                            "_convert_arr_indexer(self, keyarr)",
                            "_convert_index_indexer(self, keyarr)",
                            "_convert_list_indexer(self, keyarr)",
                            "_invalid_indexer(self, form: str_t, key)",
                            "_can_reindex(self, indexer)",
                            "reindex(self, target, method=None, level=None, limit=None, tolerance=None)",
                            "_reindex_non_unique(self, target)",
                            "join(self, other, how='left', level=None, return_indexers=False, sort=False)",
                            "_join_multi(self, other, how, return_indexers=True)",
                            "_join_non_unique(self, other, how='left', return_indexers=False)",
                            "_join_level(self, other, level, how='left', return_indexers=False, keep_order=True)",
                            "_join_monotonic(self, other, how='left', return_indexers=False)",
                            "_wrap_joined_index(self, joined, other)",
                            "values(self) -> np.ndarray",
                            "array(self) -> ExtensionArray",
                            "_values(self) -> Union[ExtensionArray, np.ndarray]",
                            "_internal_get_values(self) -> np.ndarray",
                            "_get_engine_target(self) -> np.ndarray",
                            "memory_usage(self, deep: bool=False) -> int",
                            "where(self, cond, other=None)",
                            "_scalar_data_error(cls, data)",
                            "_string_data_error(cls, data)",
                            "_coerce_scalar_to_index(self, item)",
                            "_to_safe_for_reshape(self)",
                            "_convert_for_op(self, value)",
                            "_assert_can_do_op(self, value)",
                            "_has_complex_internals(self) -> bool",
                            "_is_memory_usage_qualified(self) -> bool",
                            "is_type_compatible(self, kind) -> bool",
                            "__contains__(self, key: Any) -> bool",
                            "__hash__(self)",
                            "__setitem__(self, key, value)",
                            "__getitem__(self, key)",
                            "_can_hold_identifiers_and_holds_name(self, name) -> bool",
                            "append(self, other)",
                            "_concat(self, to_concat, name)",
                            "_concat_same_dtype(self, to_concat, name)",
                            "putmask(self, mask, value)",
                            "equals(self, other) -> bool",
                            "identical(self, other) -> bool",
                            "asof(self, label)",
                            "asof_locs(self, where, mask)",
                            "sort_values(self, return_indexer: bool=False, ascending: bool=True)",
                            "sort(self, *args, **kwargs)",
                            "shift(self, periods=1, freq=None)",
                            "argsort(self, *args, **kwargs) -> np.ndarray",
                            "get_value(self, series: 'Series', key)",
                            "_should_fallback_to_positional(self) -> bool",
                            "_get_values_for_loc(self, series: 'Series', loc, key)",
                            "set_value(self, arr, key, value)",
                            "get_indexer_non_unique(self, target)",
                            "get_indexer_for(self, target, **kwargs)",
                            "_maybe_promote(self, other)",
                            "groupby(self, values) -> PrettyDict[Hashable, np.ndarray]",
                            "map(self, mapper, na_action=None)",
                            "_transform_index(self, func, level=None) -> 'Index'",
                            "isin(self, values, level=None)",
                            "_get_string_slice(self, key: str_t, use_lhs: bool=True, use_rhs: bool=True)",
                            "slice_indexer(self, start=None, end=None, step=None, kind=None)",
                            "_maybe_cast_indexer(self, key)",
                            "_validate_indexer(self, form: str_t, key, kind: str_t)",
                            "_maybe_cast_slice_bound(self, label, side: str_t, kind)",
                            "_searchsorted_monotonic(self, label, side='left')",
                            "get_slice_bound(self, label, side: str_t, kind) -> int",
                            "slice_locs(self, start=None, end=None, step=None, kind=None)",
                            "delete(self, loc)",
                            "insert(self, loc: int, item)",
                            "drop(self, labels, errors: str_t='raise')",
                            "_add_comparison_methods(cls)",
                            "_add_numeric_methods_add_sub_disabled(cls)",
                            "_add_numeric_methods_disabled(cls)",
                            "_add_numeric_methods_binary(cls)",
                            "_add_numeric_methods_unary(cls)",
                            "_add_numeric_methods(cls)",
                            "_add_logical_methods(cls)",
                            "_add_logical_methods_disabled(cls)",
                            "shape(self)",
                            "is_int(v)",
                            "_get_leaf_sorter(labels)",
                            "_make_evaluate_unary(op, opstr)",
                            "_make_logical_function(name, desc, f)",
                            "_evaluate_numeric_unary(self)",
                            "logical_func(self, *args, **kwargs)"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [
                            "_deprecations",
                            "_join_precedence",
                            "_typ",
                            "_data",
                            "_cache",
                            "_id",
                            "_name",
                            "_no_setting_name",
                            "_comparables",
                            "_attributes",
                            "_is_numeric_dtype",
                            "_can_hold_na",
                            "_defer_to_indexing",
                            "_infer_as_myclass",
                            "_engine_type",
                            "_supports_partial_string_indexing",
                            "_accessors",
                            "str",
                            "names",
                            "get_level_values",
                            "_na_value",
                            "isnull",
                            "notnull",
                            "__bool__"
                        ],
                        "class_decorators": []
                    }
                },
                {
                    "function_name": "get_indexer_non_unique",
                    "function_code": "@Appender(_index_shared_docs[\"get_indexer_non_unique\"] % _index_doc_kwargs)\ndef get_indexer_non_unique(self, target):\n    target = ensure_index(target)\n    pself, ptarget = self._maybe_promote(target)\n    if pself is not self or ptarget is not target:\n        return pself.get_indexer_non_unique(ptarget)\n\n    if is_categorical(target):\n        tgt_values = np.asarray(target)\n    elif self.is_all_dates and target.is_all_dates:  # GH 30399\n        tgt_values = target.asi8\n    else:\n        tgt_values = target._get_engine_target()\n\n    indexer, missing = self._engine.get_indexer_non_unique(tgt_values)\n    return ensure_platform_int(indexer), missing\n",
                    "decorators": [
                        "Appender(_index_shared_docs['get_indexer_non_unique'] % _index_doc_kwargs)"
                    ],
                    "docstring": null,
                    "start_line": 4653,
                    "variables": {
                        "target": [
                            4655,
                            4656,
                            4657,
                            4660,
                            4661,
                            4662,
                            4663,
                            4665
                        ],
                        "ensure_index": [
                            4655
                        ],
                        "pself": [
                            4656,
                            4657,
                            4658
                        ],
                        "ptarget": [
                            4656,
                            4657,
                            4658
                        ],
                        "self._maybe_promote": [
                            4656
                        ],
                        "self": [
                            4656,
                            4657,
                            4667,
                            4662
                        ],
                        "pself.get_indexer_non_unique": [
                            4658
                        ],
                        "is_categorical": [
                            4660
                        ],
                        "tgt_values": [
                            4665,
                            4667,
                            4661,
                            4663
                        ],
                        "np.asarray": [
                            4661
                        ],
                        "np": [
                            4661
                        ],
                        "self.is_all_dates": [
                            4662
                        ],
                        "target.is_all_dates": [
                            4662
                        ],
                        "target.asi8": [
                            4663
                        ],
                        "target._get_engine_target": [
                            4665
                        ],
                        "indexer": [
                            4667,
                            4668
                        ],
                        "missing": [
                            4667,
                            4668
                        ],
                        "self._engine.get_indexer_non_unique": [
                            4667
                        ],
                        "self._engine": [
                            4667
                        ],
                        "ensure_platform_int": [
                            4668
                        ],
                        "Appender": [
                            4653
                        ],
                        "_index_shared_docs": [
                            4653
                        ],
                        "_index_doc_kwargs": [
                            4653
                        ]
                    },
                    "filtered_variables": {
                        "target": [
                            4655,
                            4656,
                            4657,
                            4660,
                            4661,
                            4662,
                            4663,
                            4665
                        ],
                        "ensure_index": [
                            4655
                        ],
                        "pself": [
                            4656,
                            4657,
                            4658
                        ],
                        "ptarget": [
                            4656,
                            4657,
                            4658
                        ],
                        "self._maybe_promote": [
                            4656
                        ],
                        "self": [
                            4656,
                            4657,
                            4667,
                            4662
                        ],
                        "pself.get_indexer_non_unique": [
                            4658
                        ],
                        "is_categorical": [
                            4660
                        ],
                        "tgt_values": [
                            4665,
                            4667,
                            4661,
                            4663
                        ],
                        "np.asarray": [
                            4661
                        ],
                        "np": [
                            4661
                        ],
                        "self.is_all_dates": [
                            4662
                        ],
                        "target.is_all_dates": [
                            4662
                        ],
                        "target.asi8": [
                            4663
                        ],
                        "target._get_engine_target": [
                            4665
                        ],
                        "indexer": [
                            4667,
                            4668
                        ],
                        "missing": [
                            4667,
                            4668
                        ],
                        "self._engine.get_indexer_non_unique": [
                            4667
                        ],
                        "self._engine": [
                            4667
                        ],
                        "ensure_platform_int": [
                            4668
                        ],
                        "Appender": [
                            4653
                        ],
                        "_index_shared_docs": [
                            4653
                        ],
                        "_index_doc_kwargs": [
                            4653
                        ]
                    },
                    "diff_line_number": 4660,
                    "class_data": {
                        "signature": "class Index(IndexOpsMixin, PandasObject)",
                        "docstring": "Immutable ndarray implementing an ordered, sliceable set. The basic object\nstoring axis labels for all pandas objects.\n\nParameters\n----------\ndata : array-like (1-dimensional)\ndtype : NumPy dtype (default: object)\n    If dtype is None, we find the dtype that best fits the data.\n    If an actual dtype is provided, we coerce to that dtype if it's safe.\n    Otherwise, an error will be raised.\ncopy : bool\n    Make a copy of input ndarray.\nname : object\n    Name to be stored in the index.\ntupleize_cols : bool (default: True)\n    When True, attempt to create a MultiIndex if possible.\n\nSee Also\n--------\nRangeIndex : Index implementing a monotonic integer range.\nCategoricalIndex : Index of :class:`Categorical` s.\nMultiIndex : A multi-level, or hierarchical, Index.\nIntervalIndex : An Index of :class:`Interval` s.\nDatetimeIndex, TimedeltaIndex, PeriodIndex\nInt64Index, UInt64Index,  Float64Index\n\nNotes\n-----\nAn Index instance can **only** contain hashable objects\n\nExamples\n--------\n>>> pd.Index([1, 2, 3])\nInt64Index([1, 2, 3], dtype='int64')\n\n>>> pd.Index(list('abc'))\nIndex(['a', 'b', 'c'], dtype='object')",
                        "constructor_docstring": null,
                        "functions": [
                            "_left_indexer_unique(self, left, right)",
                            "_left_indexer(self, left, right)",
                            "_inner_indexer(self, left, right)",
                            "_outer_indexer(self, left, right)",
                            "__new__(cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs) -> 'Index'",
                            "asi8(self)",
                            "_simple_new(cls, values, name: Label=None)",
                            "_constructor(self)",
                            "_get_attributes_dict(self)",
                            "_shallow_copy(self, values=None, name: Label=no_default)",
                            "_shallow_copy_with_infer(self, values, **kwargs)",
                            "_update_inplace(self, result, **kwargs)",
                            "is_(self, other) -> bool",
                            "_reset_identity(self)",
                            "_cleanup(self)",
                            "_engine(self)",
                            "__len__(self) -> int",
                            "__array__(self, dtype=None) -> np.ndarray",
                            "__array_wrap__(self, result, context=None)",
                            "dtype(self)",
                            "ravel(self, order='C')",
                            "view(self, cls=None)",
                            "astype(self, dtype, copy=True)",
                            "take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
                            "_assert_take_fillable(self, values, indices, allow_fill=True, fill_value=None, na_value=np.nan)",
                            "repeat(self, repeats, axis=None)",
                            "copy(self, name=None, deep=False, dtype=None, names=None)",
                            "__copy__(self, **kwargs)",
                            "__deepcopy__(self, memo=None)",
                            "__repr__(self) -> str_t",
                            "_format_space(self) -> str_t",
                            "_formatter_func(self)",
                            "_format_data(self, name=None) -> str_t",
                            "_format_attrs(self)",
                            "_mpl_repr(self)",
                            "format(self, name: bool=False, formatter=None, **kwargs)",
                            "_format_with_header(self, header, na_rep='NaN', **kwargs)",
                            "to_native_types(self, slicer=None, **kwargs)",
                            "_format_native_types(self, na_rep='', quoting=None, **kwargs)",
                            "_summary(self, name=None) -> str_t",
                            "to_flat_index(self)",
                            "to_series(self, index=None, name=None)",
                            "to_frame(self, index: bool=True, name=None)",
                            "name(self)",
                            "name(self, value)",
                            "_validate_names(self, name=None, names=None, deep: bool=False)",
                            "_get_names(self)",
                            "_set_names(self, values, level=None)",
                            "set_names(self, names, level=None, inplace: bool=False)",
                            "rename(self, name, inplace=False)",
                            "nlevels(self) -> int",
                            "_sort_levels_monotonic(self)",
                            "_validate_index_level(self, level)",
                            "_get_level_number(self, level) -> int",
                            "sortlevel(self, level=None, ascending=True, sort_remaining=None)",
                            "_get_level_values(self, level)",
                            "droplevel(self, level=0)",
                            "_get_grouper_for_level(self, mapper, level=None)",
                            "is_monotonic(self) -> bool",
                            "is_monotonic_increasing(self) -> bool",
                            "is_monotonic_decreasing(self) -> bool",
                            "_is_strictly_monotonic_increasing(self) -> bool",
                            "_is_strictly_monotonic_decreasing(self) -> bool",
                            "is_unique(self) -> bool",
                            "has_duplicates(self) -> bool",
                            "is_boolean(self) -> bool",
                            "is_integer(self) -> bool",
                            "is_floating(self) -> bool",
                            "is_numeric(self) -> bool",
                            "is_object(self) -> bool",
                            "is_categorical(self) -> bool",
                            "is_interval(self) -> bool",
                            "is_mixed(self) -> bool",
                            "holds_integer(self) -> bool",
                            "inferred_type(self) -> str_t",
                            "is_all_dates(self) -> bool",
                            "__reduce__(self)",
                            "_isnan(self)",
                            "_nan_idxs(self)",
                            "hasnans(self) -> bool",
                            "isna(self)",
                            "notna(self)",
                            "fillna(self, value=None, downcast=None)",
                            "dropna(self, how='any')",
                            "unique(self, level=None)",
                            "drop_duplicates(self, keep='first')",
                            "duplicated(self, keep='first')",
                            "_get_unique_index(self, dropna: bool=False)",
                            "__add__(self, other)",
                            "__radd__(self, other)",
                            "__iadd__(self, other)",
                            "__sub__(self, other)",
                            "__rsub__(self, other)",
                            "__and__(self, other)",
                            "__or__(self, other)",
                            "__xor__(self, other)",
                            "__nonzero__(self)",
                            "_get_reconciled_name_object(self, other)",
                            "_union_incompatible_dtypes(self, other, sort)",
                            "_is_compatible_with_other(self, other) -> bool",
                            "_validate_sort_keyword(self, sort)",
                            "union(self, other, sort=None)",
                            "_union(self, other, sort)",
                            "_wrap_setop_result(self, other, result)",
                            "intersection(self, other, sort=False)",
                            "difference(self, other, sort=None)",
                            "symmetric_difference(self, other, result_name=None, sort=None)",
                            "_assert_can_do_setop(self, other)",
                            "_convert_can_do_setop(self, other)",
                            "get_loc(self, key, method=None, tolerance=None)",
                            "get_indexer(self, target, method=None, limit=None, tolerance=None) -> np.ndarray",
                            "_convert_tolerance(self, tolerance, target)",
                            "_get_fill_indexer(self, target: 'Index', method: str_t, limit=None, tolerance=None) -> np.ndarray",
                            "_get_fill_indexer_searchsorted(self, target: 'Index', method: str_t, limit=None) -> np.ndarray",
                            "_get_nearest_indexer(self, target: 'Index', limit, tolerance) -> np.ndarray",
                            "_filter_indexer_tolerance(self, target: 'Index', indexer: np.ndarray, tolerance) -> np.ndarray",
                            "_get_partial_string_timestamp_match_key(self, key)",
                            "_validate_positional_slice(self, key: slice)",
                            "_convert_slice_indexer(self, key: slice, kind: str_t)",
                            "_convert_listlike_indexer(self, keyarr)",
                            "_convert_arr_indexer(self, keyarr)",
                            "_convert_index_indexer(self, keyarr)",
                            "_convert_list_indexer(self, keyarr)",
                            "_invalid_indexer(self, form: str_t, key)",
                            "_can_reindex(self, indexer)",
                            "reindex(self, target, method=None, level=None, limit=None, tolerance=None)",
                            "_reindex_non_unique(self, target)",
                            "join(self, other, how='left', level=None, return_indexers=False, sort=False)",
                            "_join_multi(self, other, how, return_indexers=True)",
                            "_join_non_unique(self, other, how='left', return_indexers=False)",
                            "_join_level(self, other, level, how='left', return_indexers=False, keep_order=True)",
                            "_join_monotonic(self, other, how='left', return_indexers=False)",
                            "_wrap_joined_index(self, joined, other)",
                            "values(self) -> np.ndarray",
                            "array(self) -> ExtensionArray",
                            "_values(self) -> Union[ExtensionArray, np.ndarray]",
                            "_internal_get_values(self) -> np.ndarray",
                            "_get_engine_target(self) -> np.ndarray",
                            "memory_usage(self, deep: bool=False) -> int",
                            "where(self, cond, other=None)",
                            "_scalar_data_error(cls, data)",
                            "_string_data_error(cls, data)",
                            "_coerce_scalar_to_index(self, item)",
                            "_to_safe_for_reshape(self)",
                            "_convert_for_op(self, value)",
                            "_assert_can_do_op(self, value)",
                            "_has_complex_internals(self) -> bool",
                            "_is_memory_usage_qualified(self) -> bool",
                            "is_type_compatible(self, kind) -> bool",
                            "__contains__(self, key: Any) -> bool",
                            "__hash__(self)",
                            "__setitem__(self, key, value)",
                            "__getitem__(self, key)",
                            "_can_hold_identifiers_and_holds_name(self, name) -> bool",
                            "append(self, other)",
                            "_concat(self, to_concat, name)",
                            "_concat_same_dtype(self, to_concat, name)",
                            "putmask(self, mask, value)",
                            "equals(self, other) -> bool",
                            "identical(self, other) -> bool",
                            "asof(self, label)",
                            "asof_locs(self, where, mask)",
                            "sort_values(self, return_indexer: bool=False, ascending: bool=True)",
                            "sort(self, *args, **kwargs)",
                            "shift(self, periods=1, freq=None)",
                            "argsort(self, *args, **kwargs) -> np.ndarray",
                            "get_value(self, series: 'Series', key)",
                            "_should_fallback_to_positional(self) -> bool",
                            "_get_values_for_loc(self, series: 'Series', loc, key)",
                            "set_value(self, arr, key, value)",
                            "get_indexer_non_unique(self, target)",
                            "get_indexer_for(self, target, **kwargs)",
                            "_maybe_promote(self, other)",
                            "groupby(self, values) -> PrettyDict[Hashable, np.ndarray]",
                            "map(self, mapper, na_action=None)",
                            "_transform_index(self, func, level=None) -> 'Index'",
                            "isin(self, values, level=None)",
                            "_get_string_slice(self, key: str_t, use_lhs: bool=True, use_rhs: bool=True)",
                            "slice_indexer(self, start=None, end=None, step=None, kind=None)",
                            "_maybe_cast_indexer(self, key)",
                            "_validate_indexer(self, form: str_t, key, kind: str_t)",
                            "_maybe_cast_slice_bound(self, label, side: str_t, kind)",
                            "_searchsorted_monotonic(self, label, side='left')",
                            "get_slice_bound(self, label, side: str_t, kind) -> int",
                            "slice_locs(self, start=None, end=None, step=None, kind=None)",
                            "delete(self, loc)",
                            "insert(self, loc: int, item)",
                            "drop(self, labels, errors: str_t='raise')",
                            "_add_comparison_methods(cls)",
                            "_add_numeric_methods_add_sub_disabled(cls)",
                            "_add_numeric_methods_disabled(cls)",
                            "_add_numeric_methods_binary(cls)",
                            "_add_numeric_methods_unary(cls)",
                            "_add_numeric_methods(cls)",
                            "_add_logical_methods(cls)",
                            "_add_logical_methods_disabled(cls)",
                            "shape(self)",
                            "is_int(v)",
                            "_get_leaf_sorter(labels)",
                            "_make_evaluate_unary(op, opstr)",
                            "_make_logical_function(name, desc, f)",
                            "_evaluate_numeric_unary(self)",
                            "logical_func(self, *args, **kwargs)"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [
                            "_deprecations",
                            "_join_precedence",
                            "_typ",
                            "_data",
                            "_cache",
                            "_id",
                            "_name",
                            "_no_setting_name",
                            "_comparables",
                            "_attributes",
                            "_is_numeric_dtype",
                            "_can_hold_na",
                            "_defer_to_indexing",
                            "_infer_as_myclass",
                            "_engine_type",
                            "_supports_partial_string_indexing",
                            "_accessors",
                            "str",
                            "names",
                            "get_level_values",
                            "_na_value",
                            "isnull",
                            "notnull",
                            "__bool__"
                        ],
                        "class_decorators": []
                    }
                }
            ],
            "inscope_functions": [
                "_make_comparison_op(op, cls)",
                "_make_arithmetic_op(op, cls)",
                "_new_Index(cls, d)",
                "ensure_index_from_sequences(sequences, names=None)",
                "ensure_index(index_like, copy=False)",
                "_ensure_has_len(seq)",
                "_trim_front(strings)",
                "_validate_join_method(method)",
                "default_index(n)",
                "maybe_extract_name(name, obj, cls) -> Label",
                "_maybe_cast_with_dtype(data: np.ndarray, dtype: np.dtype, copy: bool) -> np.ndarray",
                "_maybe_cast_data_without_dtype(subarr)",
                "_try_convert_to_int_array(data: np.ndarray, copy: bool, dtype: np.dtype) -> np.ndarray",
                "_maybe_asobject(dtype, klass, data, copy: bool, name: Label, **kwargs)",
                "cmp_method(self, other)",
                "index_arithmetic_method(self, other)",
                "_left_indexer_unique(self, left, right)",
                "_left_indexer(self, left, right)",
                "_inner_indexer(self, left, right)",
                "_outer_indexer(self, left, right)",
                "__new__(cls, data=None, dtype=None, copy=False, name=None, tupleize_cols=True, **kwargs) -> 'Index'",
                "asi8(self)",
                "_simple_new(cls, values, name: Label=None)",
                "_constructor(self)",
                "_get_attributes_dict(self)",
                "_shallow_copy(self, values=None, name: Label=no_default)",
                "_shallow_copy_with_infer(self, values, **kwargs)",
                "_update_inplace(self, result, **kwargs)",
                "is_(self, other) -> bool",
                "_reset_identity(self)",
                "_cleanup(self)",
                "_engine(self)",
                "__len__(self) -> int",
                "__array__(self, dtype=None) -> np.ndarray",
                "__array_wrap__(self, result, context=None)",
                "dtype(self)",
                "ravel(self, order='C')",
                "view(self, cls=None)",
                "astype(self, dtype, copy=True)",
                "take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
                "_assert_take_fillable(self, values, indices, allow_fill=True, fill_value=None, na_value=np.nan)",
                "repeat(self, repeats, axis=None)",
                "copy(self, name=None, deep=False, dtype=None, names=None)",
                "__copy__(self, **kwargs)",
                "__deepcopy__(self, memo=None)",
                "__repr__(self) -> str_t",
                "_format_space(self) -> str_t",
                "_formatter_func(self)",
                "_format_data(self, name=None) -> str_t",
                "_format_attrs(self)",
                "_mpl_repr(self)",
                "format(self, name: bool=False, formatter=None, **kwargs)",
                "_format_with_header(self, header, na_rep='NaN', **kwargs)",
                "to_native_types(self, slicer=None, **kwargs)",
                "_format_native_types(self, na_rep='', quoting=None, **kwargs)",
                "_summary(self, name=None) -> str_t",
                "to_flat_index(self)",
                "to_series(self, index=None, name=None)",
                "to_frame(self, index: bool=True, name=None)",
                "name(self)",
                "name(self, value)",
                "_validate_names(self, name=None, names=None, deep: bool=False)",
                "_get_names(self)",
                "_set_names(self, values, level=None)",
                "set_names(self, names, level=None, inplace: bool=False)",
                "rename(self, name, inplace=False)",
                "nlevels(self) -> int",
                "_sort_levels_monotonic(self)",
                "_validate_index_level(self, level)",
                "_get_level_number(self, level) -> int",
                "sortlevel(self, level=None, ascending=True, sort_remaining=None)",
                "_get_level_values(self, level)",
                "droplevel(self, level=0)",
                "_get_grouper_for_level(self, mapper, level=None)",
                "is_monotonic(self) -> bool",
                "is_monotonic_increasing(self) -> bool",
                "is_monotonic_decreasing(self) -> bool",
                "_is_strictly_monotonic_increasing(self) -> bool",
                "_is_strictly_monotonic_decreasing(self) -> bool",
                "is_unique(self) -> bool",
                "has_duplicates(self) -> bool",
                "is_boolean(self) -> bool",
                "is_integer(self) -> bool",
                "is_floating(self) -> bool",
                "is_numeric(self) -> bool",
                "is_object(self) -> bool",
                "is_categorical(self) -> bool",
                "is_interval(self) -> bool",
                "is_mixed(self) -> bool",
                "holds_integer(self) -> bool",
                "inferred_type(self) -> str_t",
                "is_all_dates(self) -> bool",
                "__reduce__(self)",
                "_isnan(self)",
                "_nan_idxs(self)",
                "hasnans(self) -> bool",
                "isna(self)",
                "notna(self)",
                "fillna(self, value=None, downcast=None)",
                "dropna(self, how='any')",
                "unique(self, level=None)",
                "drop_duplicates(self, keep='first')",
                "duplicated(self, keep='first')",
                "_get_unique_index(self, dropna: bool=False)",
                "__add__(self, other)",
                "__radd__(self, other)",
                "__iadd__(self, other)",
                "__sub__(self, other)",
                "__rsub__(self, other)",
                "__and__(self, other)",
                "__or__(self, other)",
                "__xor__(self, other)",
                "__nonzero__(self)",
                "_get_reconciled_name_object(self, other)",
                "_union_incompatible_dtypes(self, other, sort)",
                "_is_compatible_with_other(self, other) -> bool",
                "_validate_sort_keyword(self, sort)",
                "union(self, other, sort=None)",
                "_union(self, other, sort)",
                "_wrap_setop_result(self, other, result)",
                "intersection(self, other, sort=False)",
                "difference(self, other, sort=None)",
                "symmetric_difference(self, other, result_name=None, sort=None)",
                "_assert_can_do_setop(self, other)",
                "_convert_can_do_setop(self, other)",
                "get_loc(self, key, method=None, tolerance=None)",
                "get_indexer(self, target, method=None, limit=None, tolerance=None) -> np.ndarray",
                "_convert_tolerance(self, tolerance, target)",
                "_get_fill_indexer(self, target: 'Index', method: str_t, limit=None, tolerance=None) -> np.ndarray",
                "_get_fill_indexer_searchsorted(self, target: 'Index', method: str_t, limit=None) -> np.ndarray",
                "_get_nearest_indexer(self, target: 'Index', limit, tolerance) -> np.ndarray",
                "_filter_indexer_tolerance(self, target: 'Index', indexer: np.ndarray, tolerance) -> np.ndarray",
                "_get_partial_string_timestamp_match_key(self, key)",
                "_validate_positional_slice(self, key: slice)",
                "_convert_slice_indexer(self, key: slice, kind: str_t)",
                "_convert_listlike_indexer(self, keyarr)",
                "_convert_arr_indexer(self, keyarr)",
                "_convert_index_indexer(self, keyarr)",
                "_convert_list_indexer(self, keyarr)",
                "_invalid_indexer(self, form: str_t, key)",
                "_can_reindex(self, indexer)",
                "reindex(self, target, method=None, level=None, limit=None, tolerance=None)",
                "_reindex_non_unique(self, target)",
                "join(self, other, how='left', level=None, return_indexers=False, sort=False)",
                "_join_multi(self, other, how, return_indexers=True)",
                "_join_non_unique(self, other, how='left', return_indexers=False)",
                "_join_level(self, other, level, how='left', return_indexers=False, keep_order=True)",
                "_join_monotonic(self, other, how='left', return_indexers=False)",
                "_wrap_joined_index(self, joined, other)",
                "values(self) -> np.ndarray",
                "array(self) -> ExtensionArray",
                "_values(self) -> Union[ExtensionArray, np.ndarray]",
                "_internal_get_values(self) -> np.ndarray",
                "_get_engine_target(self) -> np.ndarray",
                "memory_usage(self, deep: bool=False) -> int",
                "where(self, cond, other=None)",
                "_scalar_data_error(cls, data)",
                "_string_data_error(cls, data)",
                "_coerce_scalar_to_index(self, item)",
                "_to_safe_for_reshape(self)",
                "_convert_for_op(self, value)",
                "_assert_can_do_op(self, value)",
                "_has_complex_internals(self) -> bool",
                "_is_memory_usage_qualified(self) -> bool",
                "is_type_compatible(self, kind) -> bool",
                "__contains__(self, key: Any) -> bool",
                "__hash__(self)",
                "__setitem__(self, key, value)",
                "__getitem__(self, key)",
                "_can_hold_identifiers_and_holds_name(self, name) -> bool",
                "append(self, other)",
                "_concat(self, to_concat, name)",
                "_concat_same_dtype(self, to_concat, name)",
                "putmask(self, mask, value)",
                "equals(self, other) -> bool",
                "identical(self, other) -> bool",
                "asof(self, label)",
                "asof_locs(self, where, mask)",
                "sort_values(self, return_indexer: bool=False, ascending: bool=True)",
                "sort(self, *args, **kwargs)",
                "shift(self, periods=1, freq=None)",
                "argsort(self, *args, **kwargs) -> np.ndarray",
                "get_value(self, series: 'Series', key)",
                "_should_fallback_to_positional(self) -> bool",
                "_get_values_for_loc(self, series: 'Series', loc, key)",
                "set_value(self, arr, key, value)",
                "get_indexer_non_unique(self, target)",
                "get_indexer_for(self, target, **kwargs)",
                "_maybe_promote(self, other)",
                "groupby(self, values) -> PrettyDict[Hashable, np.ndarray]",
                "map(self, mapper, na_action=None)",
                "_transform_index(self, func, level=None) -> 'Index'",
                "isin(self, values, level=None)",
                "_get_string_slice(self, key: str_t, use_lhs: bool=True, use_rhs: bool=True)",
                "slice_indexer(self, start=None, end=None, step=None, kind=None)",
                "_maybe_cast_indexer(self, key)",
                "_validate_indexer(self, form: str_t, key, kind: str_t)",
                "_maybe_cast_slice_bound(self, label, side: str_t, kind)",
                "_searchsorted_monotonic(self, label, side='left')",
                "get_slice_bound(self, label, side: str_t, kind) -> int",
                "slice_locs(self, start=None, end=None, step=None, kind=None)",
                "delete(self, loc)",
                "insert(self, loc: int, item)",
                "drop(self, labels, errors: str_t='raise')",
                "_add_comparison_methods(cls)",
                "_add_numeric_methods_add_sub_disabled(cls)",
                "_add_numeric_methods_disabled(cls)",
                "_add_numeric_methods_binary(cls)",
                "_add_numeric_methods_unary(cls)",
                "_add_numeric_methods(cls)",
                "_add_logical_methods(cls)",
                "_add_logical_methods_disabled(cls)",
                "shape(self)",
                "is_int(v)",
                "_get_leaf_sorter(labels)",
                "_make_evaluate_unary(op, opstr)",
                "_make_logical_function(name, desc, f)",
                "_evaluate_numeric_unary(self)",
                "logical_func(self, *args, **kwargs)"
            ],
            "variables_in_file": {
                "TYPE_CHECKING": [
                    88
                ],
                "__all__": [
                    92
                ],
                "_unsortable_types": [
                    94
                ],
                "frozenset": [
                    229,
                    94
                ],
                "_index_doc_kwargs": [
                    96,
                    710,
                    4653,
                    2930,
                    793
                ],
                "dict": [
                    96,
                    104,
                    796,
                    1983
                ],
                "_index_shared_docs": [
                    2881,
                    5349,
                    710,
                    104,
                    682,
                    5418,
                    4653,
                    5391,
                    754,
                    2930,
                    4631,
                    793
                ],
                "str_t": [
                    3232,
                    3010,
                    4933,
                    4870,
                    4997,
                    105,
                    874,
                    1003,
                    1966,
                    2991,
                    4947,
                    3093,
                    5205,
                    855,
                    891
                ],
                "str": [
                    226,
                    996,
                    105,
                    5103,
                    1021,
                    279,
                    1018,
                    253
                ],
                "isinstance": [
                    4353,
                    141,
                    4749,
                    4750,
                    147,
                    410,
                    2332,
                    4124,
                    4253,
                    5538,
                    292,
                    4260,
                    4773,
                    297,
                    299,
                    2349,
                    5550,
                    5039,
                    5423,
                    5046,
                    2810,
                    1468,
                    3517,
                    3518,
                    3647,
                    5052,
                    3652,
                    4168,
                    3402,
                    3403,
                    461,
                    4174,
                    4690,
                    3283,
                    3284,
                    1370,
                    352,
                    3836,
                    122,
                    3177,
                    4713,
                    4203,
                    5610,
                    110,
                    5103,
                    114,
                    4210,
                    117,
                    3575,
                    1273,
                    1018,
                    636,
                    1021
                ],
                "other": [
                    3587,
                    3590,
                    2576,
                    2579,
                    3603,
                    558,
                    2618,
                    2619,
                    2621,
                    2622,
                    3647,
                    2624,
                    2626,
                    2627,
                    3650,
                    2631,
                    4168,
                    2633,
                    4169,
                    4171,
                    2639,
                    4690,
                    4691,
                    4694,
                    4695,
                    2650,
                    2651,
                    110,
                    111,
                    114,
                    115,
                    116,
                    117,
                    120,
                    125,
                    129,
                    133,
                    2700,
                    141,
                    2702,
                    146,
                    2706,
                    2710,
                    4250,
                    4253,
                    4256,
                    4258,
                    4260,
                    4262,
                    4264,
                    3753,
                    4266,
                    3755,
                    3756,
                    4268,
                    3764,
                    3767,
                    3769,
                    4282,
                    4285,
                    3776,
                    4289,
                    3781,
                    3784,
                    3794,
                    2771,
                    2772,
                    2777,
                    2778,
                    3804,
                    2789,
                    2805,
                    2810,
                    2811,
                    2814,
                    2815,
                    2349,
                    2353,
                    2358,
                    2362,
                    2365,
                    2371,
                    2374,
                    2377,
                    3401,
                    3403,
                    2380,
                    3410,
                    3413,
                    3418,
                    3421,
                    2399,
                    3430,
                    3437,
                    3439,
                    3447,
                    3449,
                    3450,
                    2425,
                    2426,
                    3963,
                    3454,
                    3964,
                    3456,
                    3969,
                    3458,
                    3459,
                    3461,
                    3975,
                    3465,
                    2442,
                    3467,
                    3470,
                    3478,
                    3482,
                    3486,
                    3496,
                    3499,
                    3510,
                    3518,
                    2503,
                    2505,
                    2506,
                    3529,
                    2508,
                    3532,
                    3546,
                    2529,
                    2530,
                    2533,
                    2537,
                    2539,
                    3564,
                    3569,
                    3571,
                    2553,
                    2556,
                    3583
                ],
                "np.ndarray": [
                    3843,
                    3873,
                    4514,
                    5039,
                    2992,
                    5423,
                    5046,
                    3011,
                    589,
                    461,
                    3917,
                    4697,
                    352,
                    3042,
                    3811,
                    110,
                    252,
                    2933,
                    3830,
                    5622,
                    5748,
                    3065,
                    3066,
                    5749,
                    3836
                ],
                "np": [
                    3599,
                    3601,
                    5658,
                    4130,
                    4134,
                    5671,
                    3630,
                    4661,
                    3643,
                    5181,
                    589,
                    5711,
                    5200,
                    593,
                    5202,
                    600,
                    4697,
                    3692,
                    110,
                    4212,
                    5748,
                    5749,
                    119,
                    124,
                    128,
                    129,
                    4228,
                    2713,
                    160,
                    672,
                    5321,
                    733,
                    2782,
                    2783,
                    3811,
                    3830,
                    3836,
                    252,
                    3843,
                    3345,
                    3353,
                    3361,
                    3362,
                    3873,
                    4387,
                    4389,
                    3373,
                    5423,
                    2871,
                    5435,
                    2365,
                    5438,
                    3917,
                    345,
                    352,
                    3424,
                    3432,
                    2933,
                    376,
                    2943,
                    3975,
                    3977,
                    401,
                    4514,
                    2985,
                    941,
                    5039,
                    2992,
                    5046,
                    952,
                    3011,
                    1990,
                    4551,
                    461,
                    2002,
                    1497,
                    2011,
                    3042,
                    996,
                    998,
                    3051,
                    3052,
                    3055,
                    5622,
                    3065,
                    3066,
                    3068
                ],
                "Index": [
                    401,
                    148,
                    149,
                    535,
                    4763,
                    4253,
                    672,
                    5538,
                    420,
                    5543,
                    680,
                    5423,
                    4016,
                    2353,
                    4784,
                    2358,
                    2810,
                    2365,
                    5314,
                    2371,
                    5570,
                    4174,
                    2642,
                    3283,
                    5460,
                    5461,
                    5462,
                    2647,
                    604,
                    349,
                    3805,
                    4188,
                    352,
                    3177,
                    5610,
                    2155,
                    110,
                    4210,
                    2549,
                    2425,
                    2426,
                    2811,
                    636,
                    5501
                ],
                "ABCSeries": [
                    352,
                    5610,
                    2349,
                    141,
                    110,
                    5423
                ],
                "ExtensionArray": [
                    3843,
                    4199,
                    110,
                    117,
                    3834,
                    252
                ],
                "other.ndim": [
                    111
                ],
                "len": [
                    4993,
                    4354,
                    5123,
                    1029,
                    527,
                    3344,
                    3345,
                    4753,
                    3353,
                    5146,
                    5148,
                    3361,
                    3362,
                    4389,
                    3373,
                    3632,
                    5556,
                    1205,
                    1206,
                    5045,
                    3257,
                    577,
                    1473,
                    1475,
                    1477,
                    3527,
                    5578,
                    587,
                    2002,
                    1491,
                    3283,
                    4178,
                    3670,
                    5590,
                    4186,
                    3421,
                    3039,
                    3424,
                    2529,
                    3679,
                    2532,
                    3429,
                    3432,
                    3692,
                    111,
                    4591,
                    1016,
                    5498,
                    2558
                ],
                "self": [
                    4099,
                    4117,
                    4118,
                    2076,
                    4150,
                    4151,
                    4166,
                    2122,
                    4178,
                    4180,
                    4187,
                    4188,
                    2149,
                    2150,
                    2151,
                    2155,
                    2156,
                    4206,
                    111,
                    4207,
                    114,
                    115,
                    4212,
                    117,
                    120,
                    122,
                    125,
                    2175,
                    2176,
                    129,
                    2177,
                    4226,
                    4228,
                    133,
                    4229,
                    4231,
                    4232,
                    4234,
                    4238,
                    146,
                    4250,
                    2204,
                    2206,
                    4256,
                    4258,
                    4262,
                    4266,
                    4268,
                    4282,
                    4285,
                    4286,
                    4289,
                    4349,
                    4351,
                    4354,
                    4355,
                    2325,
                    2326,
                    2328,
                    2330,
                    2331,
                    2332,
                    2338,
                    4386,
                    4389,
                    2343,
                    4392,
                    2353,
                    2358,
                    2362,
                    2365,
                    2371,
                    2374,
                    2377,
                    2380,
                    2384,
                    4439,
                    4443,
                    2399,
                    2400,
                    2401,
                    2402,
                    2423,
                    2442,
                    4512,
                    4549,
                    2502,
                    2503,
                    4551,
                    2505,
                    2506,
                    2508,
                    478,
                    4574,
                    4576,
                    2529,
                    2530,
                    2532,
                    2533,
                    487,
                    2536,
                    4585,
                    2539,
                    2541,
                    4591,
                    502,
                    503,
                    2552,
                    2553,
                    505,
                    507,
                    2556,
                    524,
                    2576,
                    529,
                    530,
                    2579,
                    532,
                    2580,
                    4627,
                    558,
                    4656,
                    4657,
                    564,
                    565,
                    4662,
                    568,
                    2617,
                    2618,
                    4667,
                    2621,
                    2622,
                    576,
                    577,
                    2624,
                    2625,
                    2630,
                    2633,
                    4682,
                    587,
                    2635,
                    4683,
                    4684,
                    2639,
                    593,
                    4690,
                    4691,
                    4692,
                    4693,
                    4694,
                    4695,
                    603,
                    2651,
                    2655,
                    611,
                    4719,
                    626,
                    633,
                    635,
                    637,
                    4746,
                    2699,
                    2700,
                    2702,
                    4750,
                    2704,
                    4751,
                    2706,
                    2708,
                    663,
                    664,
                    4761,
                    669,
                    672,
                    675,
                    4773,
                    678,
                    680,
                    4777,
                    4780,
                    4781,
                    4783,
                    4784,
                    715,
                    716,
                    717,
                    721,
                    2770,
                    2771,
                    2772,
                    725,
                    2776,
                    729,
                    730,
                    2798,
                    2802,
                    2811,
                    2812,
                    2814,
                    4867,
                    4868,
                    797,
                    2864,
                    2866,
                    4914,
                    2871,
                    2873,
                    829,
                    831,
                    833,
                    4929,
                    841,
                    4945,
                    850,
                    859,
                    860,
                    861,
                    862,
                    4974,
                    4979,
                    4984,
                    2937,
                    4985,
                    4986,
                    2942,
                    4990,
                    2945,
                    898,
                    2946,
                    900,
                    901,
                    4993,
                    2951,
                    2952,
                    905,
                    2958,
                    912,
                    916,
                    2964,
                    2966,
                    925,
                    926,
                    931,
                    2979,
                    933,
                    5027,
                    5031,
                    936,
                    5034,
                    2996,
                    5045,
                    2998,
                    3000,
                    3004,
                    3006,
                    3025,
                    3027,
                    985,
                    3039,
                    994,
                    995,
                    996,
                    998,
                    3048,
                    3049,
                    3051,
                    3052,
                    3054,
                    3061,
                    1016,
                    1017,
                    3067,
                    1020,
                    5115,
                    5121,
                    5123,
                    1028,
                    1029,
                    3089,
                    3090,
                    3091,
                    5146,
                    1052,
                    5148,
                    3116,
                    1076,
                    3124,
                    1078,
                    3125,
                    1080,
                    3126,
                    3127,
                    3133,
                    5181,
                    3137,
                    3139,
                    5200,
                    5201,
                    5203,
                    3159,
                    5224,
                    3178,
                    5226,
                    3180,
                    3182,
                    1136,
                    1137,
                    5232,
                    1140,
                    1151,
                    1155,
                    1161,
                    1162,
                    1174,
                    1185,
                    3237,
                    3257,
                    1212,
                    1213,
                    5313,
                    5314,
                    3284,
                    3287,
                    3288,
                    3295,
                    3299,
                    3303,
                    3304,
                    3313,
                    3315,
                    3317,
                    1273,
                    1279,
                    1288,
                    1290,
                    3339,
                    3341,
                    3350,
                    3373,
                    5421,
                    3376,
                    1344,
                    3402,
                    1360,
                    5457,
                    3410,
                    3413,
                    3417,
                    3422,
                    1380,
                    3429,
                    1382,
                    1386,
                    3437,
                    3440,
                    3447,
                    3448,
                    1406,
                    3454,
                    3455,
                    3458,
                    3459,
                    3460,
                    3464,
                    3467,
                    3469,
                    3476,
                    3482,
                    3486,
                    1444,
                    1445,
                    3492,
                    3495,
                    3509,
                    3517,
                    1471,
                    1474,
                    1475,
                    1477,
                    3528,
                    3529,
                    1482,
                    1483,
                    1484,
                    3531,
                    3546,
                    3564,
                    3570,
                    1533,
                    1535,
                    3583,
                    3585,
                    3586,
                    3589,
                    1547,
                    3603,
                    1564,
                    1581,
                    1598,
                    3647,
                    3650,
                    3652,
                    1615,
                    1622,
                    1654,
                    1689,
                    3753,
                    3755,
                    3756,
                    3762,
                    3763,
                    3766,
                    3769,
                    1724,
                    3772,
                    3774,
                    3777,
                    3780,
                    3781,
                    3783,
                    3784,
                    3787,
                    3789,
                    3791,
                    3793,
                    3794,
                    3804,
                    1767,
                    3830,
                    3835,
                    1810,
                    3871,
                    1850,
                    3915,
                    3921,
                    3928,
                    1893,
                    3964,
                    3966,
                    3967,
                    1926,
                    3977,
                    3982,
                    1957,
                    4009,
                    1963,
                    4011,
                    4016,
                    1970,
                    4022,
                    1977,
                    1983,
                    1984,
                    1985,
                    1998,
                    1999,
                    4049,
                    2002,
                    4055,
                    2008,
                    2009,
                    2018,
                    2019,
                    4094
                ],
                "ValueError": [
                    4995,
                    4233,
                    397,
                    2446,
                    5775,
                    5648,
                    533,
                    5784,
                    2969,
                    5018,
                    5657,
                    5787,
                    2974,
                    676,
                    2987,
                    2860,
                    5035,
                    1204,
                    1206,
                    3258,
                    3515,
                    1476,
                    5704,
                    3017,
                    2383,
                    5717,
                    726,
                    5597,
                    5728,
                    743,
                    3309,
                    112,
                    5107,
                    5111,
                    1274,
                    2173,
                    4095
                ],
                "is_object_dtype": [
                    4256,
                    901,
                    4234,
                    943,
                    114,
                    946,
                    340,
                    117,
                    4693,
                    122,
                    1850
                ],
                "ABCCategorical": [
                    114
                ],
                "left": [
                    3726,
                    3650,
                    3654,
                    3657,
                    3658,
                    3670,
                    3672,
                    3674,
                    3675,
                    3682,
                    3685,
                    3688,
                    3692,
                    240,
                    115,
                    116,
                    243,
                    246,
                    249
                ],
                "type": [
                    4099,
                    1028,
                    4231,
                    1161,
                    2442,
                    4512,
                    3237,
                    678,
                    3238,
                    4781,
                    5551,
                    1212,
                    1985,
                    4289,
                    4035,
                    461,
                    2384,
                    4691,
                    725,
                    859,
                    478,
                    115
                ],
                "self._values": [
                    2176,
                    3589,
                    2630,
                    2536,
                    4268,
                    1137,
                    3921,
                    115,
                    5457,
                    3766,
                    797
                ],
                "other.dtype": [
                    2624,
                    4256,
                    4264,
                    3753,
                    2442,
                    115,
                    3447,
                    3583
                ],
                "op": [
                    129,
                    5314,
                    133,
                    135,
                    3054,
                    3056,
                    146,
                    116,
                    151,
                    120,
                    125
                ],
                "np.errstate": [
                    128,
                    124,
                    119
                ],
                "result": [
                    2560,
                    2563,
                    2567,
                    2576,
                    2580,
                    4132,
                    4133,
                    4134,
                    4135,
                    4136,
                    4137,
                    4139,
                    2635,
                    2639,
                    599,
                    600,
                    601,
                    604,
                    2151,
                    2155,
                    4716,
                    4719,
                    1137,
                    4721,
                    1140,
                    1141,
                    120,
                    633,
                    635,
                    636,
                    637,
                    125,
                    638,
                    129,
                    131,
                    132,
                    146,
                    147,
                    148,
                    149,
                    2205,
                    2206,
                    4389,
                    4392,
                    4394,
                    5421,
                    5423,
                    5424,
                    5427,
                    5429,
                    3925,
                    3928,
                    3929,
                    3439,
                    3443,
                    3444,
                    3445,
                    947,
                    952,
                    953,
                    954,
                    957,
                    958,
                    4549,
                    4550,
                    4551,
                    4552,
                    463,
                    464,
                    470,
                    471,
                    472,
                    1495,
                    474,
                    1497,
                    1499,
                    1500,
                    2541,
                    2544,
                    3570,
                    2548,
                    2549,
                    3575,
                    3576,
                    3577,
                    507,
                    508,
                    509
                ],
                "self.values": [
                    129,
                    4226,
                    916,
                    2328,
                    669,
                    4386,
                    675,
                    936,
                    4392,
                    5421,
                    1080,
                    1977,
                    5314,
                    3915,
                    717,
                    729,
                    120,
                    505,
                    3067,
                    125,
                    3967
                ],
                "ABCMultiIndex": [
                    4260,
                    4773,
                    4713,
                    3402,
                    3403,
                    176,
                    1273,
                    122,
                    2332,
                    3517,
                    3518
                ],
                "ops.comp_method_OBJECT_ARRAY": [
                    125
                ],
                "ops": [
                    133,
                    5287,
                    5289,
                    5290,
                    5294,
                    5299,
                    5302,
                    125
                ],
                "np.asarray": [
                    672,
                    129,
                    4130,
                    996,
                    2985,
                    3599,
                    5200,
                    401,
                    593,
                    4661,
                    2871,
                    345
                ],
                "is_bool_dtype": [
                    3969,
                    131,
                    600,
                    5042,
                    376
                ],
                "ops.invalid_comparison": [
                    133
                ],
                "name": [
                    1153,
                    1027,
                    1028,
                    1029,
                    390,
                    135,
                    136,
                    905,
                    398,
                    401,
                    1171,
                    2579,
                    1173,
                    2580,
                    151,
                    153,
                    923,
                    1180,
                    1181,
                    1182,
                    416,
                    290,
                    420,
                    5417,
                    298,
                    5418,
                    300,
                    307,
                    1077,
                    1078,
                    4151,
                    1080,
                    5431,
                    314,
                    1210,
                    1211,
                    5821,
                    1344,
                    833,
                    5824,
                    324,
                    330,
                    336,
                    4178,
                    4180,
                    471,
                    4187,
                    3804,
                    349,
                    3805,
                    2399,
                    2400,
                    2401,
                    4188,
                    5610,
                    5613,
                    1135,
                    1136,
                    1137,
                    4208,
                    371,
                    5616,
                    373,
                    502,
                    375,
                    5619,
                    507
                ],
                "op.__name__": [
                    151,
                    135
                ],
                "set_function_name": [
                    136,
                    153
                ],
                "cmp_method": [
                    136
                ],
                "cls": [
                    389,
                    5254,
                    5255,
                    136,
                    5256,
                    5257,
                    5258,
                    5259,
                    398,
                    5266,
                    403,
                    5267,
                    5268,
                    3990,
                    5269,
                    5270,
                    153,
                    5271,
                    5272,
                    5273,
                    5274,
                    5275,
                    5276,
                    5277,
                    5278,
                    290,
                    5279,
                    5286,
                    5287,
                    5288,
                    5289,
                    5290,
                    171,
                    5291,
                    5293,
                    174,
                    5294,
                    176,
                    5297,
                    5298,
                    5299,
                    5300,
                    181,
                    5301,
                    5302,
                    5434,
                    5437,
                    5446,
                    5319,
                    5320,
                    5321,
                    5322,
                    5447,
                    5326,
                    463,
                    5327,
                    5617,
                    632,
                    633,
                    5242,
                    5243,
                    5244,
                    5245,
                    5246,
                    5247
                ],
                "ABCDataFrame": [
                    2349,
                    141
                ],
                "ABCTimedeltaIndex": [
                    141,
                    4197
                ],
                "NotImplemented": [
                    2350,
                    142
                ],
                "Series": [
                    2371,
                    2353,
                    146,
                    2358,
                    1080
                ],
                "tuple": [
                    1468,
                    4168,
                    713,
                    4776,
                    4780,
                    4749,
                    147,
                    3575,
                    3353,
                    410,
                    796
                ],
                "index_arithmetic_method": [
                    153
                ],
                "Exception": [
                    156
                ],
                "_o_dtype": [
                    160,
                    5818
                ],
                "np.dtype": [
                    160,
                    5748,
                    5622
                ],
                "object": [
                    3972,
                    2952,
                    2953,
                    4238,
                    3353,
                    160,
                    161,
                    419,
                    5822,
                    5707,
                    463,
                    345,
                    348,
                    349,
                    998,
                    4203,
                    2423,
                    2425,
                    2426,
                    379
                ],
                "_Identity": [
                    161,
                    564
                ],
                "issubclass": [
                    176,
                    171,
                    376
                ],
                "ABCPeriodIndex": [
                    171,
                    4198
                ],
                "_new_PeriodIndex": [
                    174
                ],
                "d": [
                    1984,
                    1985,
                    174,
                    177,
                    179,
                    181,
                    1983
                ],
                "d.pop": [
                    179
                ],
                "cls.__new__": [
                    181
                ],
                "IndexOpsMixin": [
                    184,
                    3833,
                    3923,
                    228
                ],
                "PandasObject": [
                    184,
                    227
                ],
                "_deprecations": [
                    226
                ],
                "FrozenSet": [
                    226
                ],
                "PandasObject._deprecations": [
                    227
                ],
                "IndexOpsMixin._deprecations": [
                    228
                ],
                "_join_precedence": [
                    233
                ],
                "libjoin.left_join_indexer_unique": [
                    240
                ],
                "libjoin": [
                    240,
                    249,
                    243,
                    246
                ],
                "right": [
                    3650,
                    3654,
                    3660,
                    240,
                    3666,
                    243,
                    246,
                    249
                ],
                "libjoin.left_join_indexer": [
                    243
                ],
                "libjoin.inner_join_indexer": [
                    246
                ],
                "libjoin.outer_join_indexer": [
                    249
                ],
                "_typ": [
                    251
                ],
                "_data": [
                    252,
                    4231
                ],
                "Union": [
                    3843,
                    252
                ],
                "_cache": [
                    253
                ],
                "Dict": [
                    253
                ],
                "Any": [
                    4057,
                    253
                ],
                "_id": [
                    254
                ],
                "_name": [
                    255
                ],
                "Label": [
                    5606,
                    454,
                    489,
                    5790,
                    255
                ],
                "_no_setting_name": [
                    259
                ],
                "bool": [
                    259,
                    4870,
                    1543,
                    1928,
                    2312,
                    1164,
                    1550,
                    4240,
                    1812,
                    918,
                    1691,
                    541,
                    5790,
                    1567,
                    4130,
                    1959,
                    4396,
                    4141,
                    4270,
                    1584,
                    1973,
                    1082,
                    1852,
                    1726,
                    1217,
                    1601,
                    4038,
                    4045,
                    1618,
                    4051,
                    3924,
                    1625,
                    4057,
                    2014,
                    2019,
                    1895,
                    1769,
                    4587,
                    5748,
                    5622,
                    1656,
                    2428
                ],
                "_comparables": [
                    260
                ],
                "_attributes": [
                    261
                ],
                "_is_numeric_dtype": [
                    262
                ],
                "_can_hold_na": [
                    263
                ],
                "_defer_to_indexing": [
                    266
                ],
                "_infer_as_myclass": [
                    270
                ],
                "_engine_type": [
                    272
                ],
                "libindex.ObjectEngine": [
                    272
                ],
                "libindex": [
                    272
                ],
                "_supports_partial_string_indexing": [
                    275
                ],
                "_accessors": [
                    277
                ],
                "CachedAccessor": [
                    279
                ],
                "StringMethods": [
                    279
                ],
                "maybe_extract_name": [
                    1161,
                    290
                ],
                "data": [
                    5643,
                    5772,
                    5645,
                    5773,
                    5647,
                    400,
                    401,
                    402,
                    403,
                    5651,
                    405,
                    5781,
                    407,
                    408,
                    3991,
                    410,
                    5656,
                    5658,
                    5782,
                    5663,
                    416,
                    5665,
                    290,
                    419,
                    292,
                    5669,
                    294,
                    5671,
                    297,
                    298,
                    299,
                    300,
                    5673,
                    303,
                    307,
                    310,
                    314,
                    317,
                    5821,
                    5824,
                    324,
                    326,
                    5702,
                    5703,
                    330,
                    332,
                    336,
                    339,
                    5715,
                    5716,
                    343,
                    345,
                    348,
                    349,
                    860,
                    5726,
                    352,
                    5727,
                    867,
                    868,
                    870,
                    5735,
                    5736,
                    5739,
                    5740,
                    366,
                    367,
                    370,
                    371,
                    372,
                    373,
                    374,
                    375,
                    376,
                    377,
                    379
                ],
                "ABCPandasArray": [
                    292
                ],
                "data.to_numpy": [
                    294
                ],
                "RangeIndex": [
                    297,
                    298,
                    5603,
                    300
                ],
                "copy": [
                    5645,
                    401,
                    664,
                    5656,
                    5658,
                    669,
                    672,
                    675,
                    420,
                    5539,
                    5543,
                    5671,
                    298,
                    307,
                    314,
                    5565,
                    5568,
                    5824,
                    324,
                    330,
                    336,
                    349,
                    366,
                    371,
                    373,
                    375,
                    383
                ],
                "dtype": [
                    386,
                    3973,
                    5768,
                    5642,
                    3980,
                    5645,
                    3982,
                    401,
                    5651,
                    663,
                    5656,
                    666,
                    669,
                    671,
                    672,
                    5663,
                    5664,
                    675,
                    420,
                    5669,
                    678,
                    5671,
                    680,
                    4009,
                    298,
                    300,
                    4014,
                    303,
                    4016,
                    307,
                    310,
                    314,
                    5818,
                    318,
                    5824,
                    324,
                    836,
                    326,
                    837,
                    330,
                    332,
                    336,
                    593,
                    339,
                    340,
                    342,
                    343,
                    360,
                    366,
                    367,
                    371,
                    373,
                    375,
                    3966
                ],
                "range": [
                    299,
                    3285
                ],
                "RangeIndex.from_range": [
                    300
                ],
                "is_categorical_dtype": [
                    666,
                    940,
                    303
                ],
                "_maybe_asobject": [
                    324,
                    330,
                    336,
                    307,
                    314
                ],
                "CategoricalIndex": [
                    307,
                    669
                ],
                "kwargs": [
                    390,
                    393,
                    394,
                    525,
                    527,
                    401,
                    416,
                    420,
                    933,
                    307,
                    314,
                    5821,
                    319,
                    5824,
                    324,
                    712,
                    713,
                    330,
                    841,
                    4552,
                    4683,
                    4684,
                    336,
                    988,
                    349
                ],
                "is_interval_dtype": [
                    310
                ],
                "IntervalIndex": [
                    314
                ],
                "is_datetime64_any_dtype": [
                    317,
                    318
                ],
                "DatetimeIndex": [
                    324
                ],
                "is_timedelta64_dtype": [
                    326
                ],
                "TimedeltaIndex": [
                    330
                ],
                "is_period_dtype": [
                    332,
                    4229
                ],
                "PeriodIndex": [
                    336
                ],
                "is_extension_array_dtype": [
                    3585,
                    4264,
                    3762,
                    339,
                    671
                ],
                "ea_cls": [
                    342,
                    343
                ],
                "dtype.construct_array_type": [
                    342
                ],
                "ea_cls._from_sequence": [
                    343
                ],
                "data.astype": [
                    5669,
                    5772,
                    5781,
                    377,
                    348,
                    5663
                ],
                "_maybe_cast_with_dtype": [
                    366
                ],
                "data.dtype": [
                    5703,
                    5736,
                    5740,
                    367,
                    370,
                    372,
                    5716,
                    374,
                    376,
                    5727
                ],
                "is_signed_integer_dtype": [
                    370
                ],
                "Int64Index": [
                    371
                ],
                "is_unsigned_integer_dtype": [
                    5768,
                    372
                ],
                "UInt64Index": [
                    373
                ],
                "is_float_dtype": [
                    5664,
                    374
                ],
                "Float64Index": [
                    375
                ],
                "data.dtype.type": [
                    376
                ],
                "np.bool": [
                    376
                ],
                "subarr": [
                    384,
                    5698,
                    387,
                    419,
                    420,
                    5702,
                    5735,
                    395,
                    5707,
                    5739,
                    398,
                    5711,
                    5744,
                    5715,
                    377,
                    379,
                    5726
                ],
                "com.asarray_tuplesafe": [
                    379,
                    419,
                    3198
                ],
                "com": [
                    4129,
                    4930,
                    419,
                    3144,
                    5225,
                    3509,
                    3510,
                    4121,
                    379,
                    3198
                ],
                "subarr.copy": [
                    384
                ],
                "new_data": [
                    387,
                    390
                ],
                "new_dtype": [
                    387,
                    388,
                    390
                ],
                "_maybe_cast_data_without_dtype": [
                    387
                ],
                "TypeError": [
                    1280,
                    4099,
                    4102,
                    2568,
                    4233,
                    394,
                    5775,
                    3472,
                    1172,
                    533,
                    3989,
                    5784,
                    1177,
                    539,
                    3996,
                    2718,
                    676,
                    677,
                    3236,
                    2875,
                    1212,
                    3648,
                    4035,
                    5579,
                    2636,
                    4175,
                    3294,
                    4454,
                    2795,
                    2542,
                    5617,
                    5107,
                    2806,
                    1277,
                    4095
                ],
                "repr": [
                    4099,
                    3018,
                    394,
                    3991,
                    5049
                ],
                "set": [
                    394,
                    2547,
                    3509,
                    3510
                ],
                "subarr.ndim": [
                    395
                ],
                "cls._simple_new": [
                    398
                ],
                "hasattr": [
                    5542,
                    3278,
                    400,
                    632,
                    1018,
                    1021
                ],
                "is_scalar": [
                    4034,
                    4133,
                    402,
                    4563,
                    4917,
                    4919,
                    4120
                ],
                "cls._scalar_data_error": [
                    403
                ],
                "tupleize_cols": [
                    405
                ],
                "is_list_like": [
                    1282,
                    1284,
                    1203,
                    1276,
                    405,
                    2805,
                    1176,
                    1180,
                    1279
                ],
                "is_iterator": [
                    5545,
                    407
                ],
                "list": [
                    408,
                    931,
                    5546,
                    5550,
                    5551,
                    5552,
                    1468,
                    3523,
                    3524,
                    4168,
                    4169,
                    1482,
                    1483,
                    1484,
                    5580,
                    3685,
                    3558,
                    3688,
                    2544
                ],
                "all": [
                    5773,
                    5782,
                    5590,
                    410,
                    4283
                ],
                "e": [
                    410
                ],
                "MultiIndex.from_tuples": [
                    4756,
                    415
                ],
                "MultiIndex": [
                    1504,
                    3652,
                    5503,
                    415,
                    3723,
                    4750,
                    4756,
                    5559,
                    3550,
                    3647
                ],
                "kwargs.get": [
                    416
                ],
                "property": [
                    1600,
                    3810,
                    3842,
                    1349,
                    1542,
                    4037,
                    5449,
                    1549,
                    1583,
                    884,
                    1624,
                    441,
                    1146,
                    1566,
                    1215
                ],
                "values": [
                    4226,
                    3972,
                    4228,
                    4868,
                    3975,
                    4231,
                    3977,
                    4232,
                    3982,
                    527,
                    532,
                    3350,
                    535,
                    2328,
                    2331,
                    2334,
                    2339,
                    2343,
                    936,
                    940,
                    941,
                    943,
                    944,
                    946,
                    947,
                    1203,
                    1205,
                    950,
                    1206,
                    1210,
                    957,
                    1213,
                    461,
                    464,
                    2002,
                    2003,
                    2004,
                    3285,
                    470,
                    3287,
                    3288,
                    985,
                    987,
                    988,
                    996,
                    998,
                    1000,
                    1001,
                    4713,
                    4714,
                    748,
                    4715,
                    4716,
                    751,
                    503,
                    504,
                    505,
                    507,
                    3967
                ],
                "object.__new__": [
                    463
                ],
                "result._data": [
                    464
                ],
                "result._index_data": [
                    470
                ],
                "result._name": [
                    1499,
                    471
                ],
                "result._cache": [
                    472,
                    508
                ],
                "result._reset_identity": [
                    474
                ],
                "classmethod": [
                    5249,
                    5281,
                    5441,
                    453,
                    5324,
                    5261,
                    3985,
                    5329,
                    5237,
                    5304,
                    3994
                ],
                "cache_readonly": [
                    1993,
                    1965,
                    1617,
                    1972,
                    2006,
                    3832,
                    570,
                    476,
                    2013,
                    606
                ],
                "k": [
                    4719,
                    863,
                    487
                ],
                "getattr": [
                    3303,
                    4285,
                    558,
                    487
                ],
                "self._attributes": [
                    487
                ],
                "no_default": [
                    489,
                    502
                ],
                "self.name": [
                    925,
                    669,
                    926,
                    1185,
                    680,
                    4784,
                    1078,
                    4178,
                    3288,
                    2400,
                    1380,
                    1382,
                    2155,
                    1136,
                    3315,
                    3317,
                    502,
                    2811,
                    2812
                ],
                "cache": [
                    508,
                    503
                ],
                "self._cache.copy": [
                    503
                ],
                "self._cache": [
                    503
                ],
                "self._simple_new": [
                    3288,
                    507
                ],
                "attributes": [
                    4746,
                    524,
                    525,
                    526,
                    4752,
                    529,
                    4753,
                    532,
                    4758,
                    535,
                    4761,
                    4763
                ],
                "self._get_attributes_dict": [
                    1984,
                    5313,
                    4746,
                    524,
                    2798,
                    4207,
                    4016,
                    603
                ],
                "attributes.update": [
                    525
                ],
                "self.dtype": [
                    2624,
                    3585,
                    4256,
                    4229,
                    2951,
                    5224,
                    3753,
                    2442,
                    3583,
                    4009,
                    529,
                    3762,
                    4693,
                    663,
                    4761,
                    1850,
                    3966,
                    3447
                ],
                "self._infer_as_myclass": [
                    530
                ],
                "self._constructor": [
                    532
                ],
                "self._id": [
                    564,
                    637,
                    558
                ],
                "Ellipsis": [
                    558
                ],
                "self._engine.clear_mapping": [
                    568
                ],
                "self._engine": [
                    2979,
                    1581,
                    2866,
                    3928,
                    4627,
                    1622,
                    2998,
                    568,
                    3000,
                    4667,
                    1564,
                    4094
                ],
                "target_values": [
                    576,
                    577,
                    2994,
                    3002,
                    3006
                ],
                "self._get_engine_target": [
                    576
                ],
                "self._engine_type": [
                    577
                ],
                "self._data": [
                    3586,
                    611,
                    587,
                    2704,
                    593,
                    3763,
                    3871,
                    4117,
                    3830,
                    3287,
                    5181,
                    633,
                    3835,
                    829,
                    1983
                ],
                "int": [
                    4997,
                    1350,
                    583,
                    1385,
                    3924,
                    1370,
                    5183
                ],
                "lib.item_from_zerodim": [
                    599
                ],
                "lib": [
                    5665,
                    5698,
                    5643,
                    944,
                    1970,
                    5043,
                    5554,
                    5045,
                    599,
                    600,
                    3645,
                    3679
                ],
                "lib.is_scalar": [
                    600
                ],
                "np.ndim": [
                    600,
                    4134
                ],
                "attrs": [
                    5313,
                    5314,
                    603,
                    604,
                    861,
                    863
                ],
                "self._data.dtype": [
                    611
                ],
                "self._ndarray_values.ravel": [
                    626
                ],
                "self._ndarray_values": [
                    626
                ],
                "order": [
                    626
                ],
                "self._data.view": [
                    633,
                    3830
                ],
                "self._shallow_copy": [
                    2176,
                    2177,
                    4232,
                    1290,
                    2704,
                    2580,
                    4118,
                    797,
                    2206,
                    2343,
                    1076,
                    829,
                    5181,
                    831,
                    730,
                    3422,
                    2655,
                    2401,
                    2156,
                    635
                ],
                "result._id": [
                    637
                ],
                "is_dtype_equal": [
                    2624,
                    2951,
                    663,
                    2442,
                    3447,
                    5818
                ],
                "self.copy": [
                    664,
                    841,
                    850
                ],
                "casted": [
                    680,
                    675
                ],
                "self.values.astype": [
                    675
                ],
                "__name__": [
                    4512,
                    4035,
                    1028,
                    3237,
                    678,
                    3238,
                    4099,
                    2384,
                    725,
                    859,
                    1212
                ],
                "err": [
                    679,
                    2570,
                    4235,
                    5037,
                    2868
                ],
                "nv.validate_take": [
                    713
                ],
                "nv": [
                    713,
                    796
                ],
                "indices": [
                    738,
                    742,
                    714,
                    748,
                    718,
                    751,
                    729
                ],
                "ensure_platform_int": [
                    3745,
                    738,
                    2981,
                    714,
                    3596,
                    3597,
                    3347,
                    3797,
                    3798,
                    795,
                    4668,
                    3742,
                    2943
                ],
                "self._can_hold_na": [
                    2008,
                    2018,
                    715,
                    1998
                ],
                "taken": [
                    2657,
                    2658,
                    747,
                    716,
                    751,
                    752,
                    2650,
                    729,
                    730,
                    2654,
                    2655
                ],
                "self._assert_take_fillable": [
                    716
                ],
                "allow_fill": [
                    748,
                    724,
                    741,
                    719
                ],
                "fill_value": [
                    720,
                    724,
                    741
                ],
                "self._na_value": [
                    721,
                    3964,
                    4351
                ],
                "cls_name": [
                    725,
                    727
                ],
                "self.values.take": [
                    729
                ],
                "Appender": [
                    710,
                    5418,
                    5419,
                    4653,
                    2930,
                    3923,
                    3833,
                    793
                ],
                "np.nan": [
                    1497,
                    733,
                    1990
                ],
                "any": [
                    742,
                    5647
                ],
                "algos.take": [
                    747
                ],
                "algos": [
                    3681,
                    4868,
                    2567,
                    2794,
                    747,
                    3731,
                    2647,
                    2556,
                    2717,
                    2654,
                    2559
                ],
                "na_value": [
                    748
                ],
                "values.take": [
                    751
                ],
                "repeats": [
                    795,
                    797
                ],
                "nv.validate_repeat": [
                    796
                ],
                "axis": [
                    796
                ],
                "self._values.repeat": [
                    797
                ],
                "deep": [
                    833,
                    3925,
                    1174,
                    3928,
                    828
                ],
                "new_index": [
                    834,
                    837,
                    838,
                    3376,
                    3377,
                    829,
                    831
                ],
                "self._data.copy": [
                    829
                ],
                "names": [
                    1282,
                    1283,
                    1291,
                    4751,
                    4753,
                    1171,
                    4755,
                    1173,
                    4756,
                    1175,
                    1176,
                    5500,
                    1178,
                    5503,
                    1215,
                    833,
                    834,
                    4177,
                    4178,
                    3545,
                    3551,
                    5499,
                    1276,
                    5501,
                    1279
                ],
                "self._validate_names": [
                    833
                ],
                "new_index.set_names": [
                    834
                ],
                "new_index.astype": [
                    837
                ],
                "klass_name": [
                    859,
                    870
                ],
                "self._format_data": [
                    860
                ],
                "self._format_attrs": [
                    861
                ],
                "space": [
                    864,
                    862
                ],
                "self._format_space": [
                    862
                ],
                "attrs_str": [
                    864,
                    863
                ],
                "v": [
                    3112,
                    4719,
                    863
                ],
                "prepr": [
                    864,
                    870
                ],
                "join": [
                    864
                ],
                "res": [
                    870,
                    872,
                    5772,
                    5773,
                    5774,
                    5781,
                    5782,
                    5783
                ],
                "default_pprint": [
                    889
                ],
                "is_justify": [
                    896,
                    905,
                    899,
                    902
                ],
                "self.inferred_type": [
                    898,
                    900,
                    1893,
                    1926,
                    1767,
                    1957,
                    1963,
                    1810,
                    4690,
                    4692,
                    4055,
                    1689,
                    1724
                ],
                "self.categories": [
                    901
                ],
                "format_object_summary": [
                    904
                ],
                "self._formatter_func": [
                    905
                ],
                "format_object_attrs": [
                    912
                ],
                "header": [
                    931,
                    933,
                    922,
                    924,
                    958
                ],
                "header.append": [
                    924
                ],
                "pprint_thing": [
                    947,
                    925
                ],
                "formatter": [
                    930,
                    931
                ],
                "self.map": [
                    931,
                    1535
                ],
                "self._format_with_header": [
                    933
                ],
                "values.dtype": [
                    946,
                    940,
                    943
                ],
                "np.array": [
                    998,
                    4551,
                    5671,
                    941,
                    952,
                    5658,
                    2011,
                    2365
                ],
                "lib.maybe_convert_objects": [
                    944
                ],
                "x": [
                    5591,
                    4776,
                    4777,
                    5322,
                    4203,
                    4780,
                    4783,
                    4210,
                    3443,
                    947,
                    2548,
                    3444,
                    5590
                ],
                "mask": [
                    3713,
                    4228,
                    3721,
                    4238,
                    3600,
                    3601,
                    4386,
                    4389,
                    4391,
                    950,
                    951,
                    953,
                    1494,
                    1496,
                    1497,
                    994,
                    1000,
                    5227,
                    5228,
                    3693,
                    3694,
                    3695,
                    3696,
                    5230,
                    5231,
                    3710,
                    3711
                ],
                "isna": [
                    994,
                    2339,
                    3977,
                    4011,
                    1999,
                    5647,
                    950,
                    2078
                ],
                "mask.any": [
                    1496,
                    5228,
                    951
                ],
                "na_rep": [
                    1000,
                    953
                ],
                "result.tolist": [
                    954
                ],
                "_trim_front": [
                    957
                ],
                "format_array": [
                    957
                ],
                "slicer": [
                    986,
                    987
                ],
                "values._format_native_types": [
                    988
                ],
                "self.is_object": [
                    4049,
                    995,
                    4150
                ],
                "quoting": [
                    995
                ],
                "astype": [
                    2425,
                    2426,
                    996
                ],
                "head": [
                    1017,
                    1018,
                    1019,
                    1023
                ],
                "head.format": [
                    1019
                ],
                "tail": [
                    1020,
                    1021,
                    1022,
                    1023
                ],
                "tail.format": [
                    1022
                ],
                "index_summary": [
                    1025,
                    1029,
                    1023
                ],
                "index": [
                    1139,
                    1075,
                    1076,
                    1080,
                    5821,
                    5822
                ],
                "self.values.copy": [
                    1080,
                    4226
                ],
                "DataFrame": [
                    1137
                ],
                "self._values.copy": [
                    1137
                ],
                "result.index": [
                    1140
                ],
                "self._name": [
                    1162,
                    1213,
                    1151
                ],
                "self._no_setting_name": [
                    1155
                ],
                "RuntimeError": [
                    1157
                ],
                "value": [
                    4034,
                    4035,
                    4228,
                    2149,
                    2151,
                    1161,
                    1162,
                    4238,
                    4628,
                    4629,
                    4028
                ],
                "name.setter": [
                    1153
                ],
                "deepcopy": [
                    1174
                ],
                "self.names": [
                    3529,
                    1484,
                    4781,
                    4751,
                    3410,
                    3509,
                    1174
                ],
                "FrozenList": [
                    1185
                ],
                "is_hashable": [
                    5616,
                    1211
                ],
                "_set_names": [
                    1215
                ],
                "_get_names": [
                    1215
                ],
                "level": [
                    4866,
                    3715,
                    1284,
                    1285,
                    4867,
                    1291,
                    3732,
                    3735,
                    2203,
                    2204,
                    1444,
                    4774,
                    4776,
                    1468,
                    1469,
                    1471,
                    1473,
                    1475,
                    1477,
                    3657,
                    3658,
                    3407,
                    3416,
                    1370,
                    1371,
                    3292,
                    3418,
                    1374,
                    3674,
                    1376,
                    3296,
                    1378,
                    3682,
                    1380,
                    1382,
                    3686,
                    3689,
                    1386,
                    3440,
                    3569,
                    3571,
                    3699,
                    1273,
                    1531,
                    1276,
                    1279
                ],
                "self.nlevels": [
                    1475,
                    1477,
                    1279
                ],
                "inplace": [
                    1344,
                    1292,
                    1287
                ],
                "idx": [
                    1288,
                    1290,
                    1291,
                    1293,
                    5202,
                    5203
                ],
                "idx._set_names": [
                    1291
                ],
                "self.set_names": [
                    1344
                ],
                "IndexError": [
                    1377,
                    1372
                ],
                "KeyError": [
                    3141,
                    1381,
                    5032,
                    5230,
                    2867,
                    2868,
                    5047,
                    4350,
                    2878,
                    4575
                ],
                "self._validate_index_level": [
                    2204,
                    1386,
                    4867,
                    1444
                ],
                "self.sort_values": [
                    1406
                ],
                "ascending": [
                    4440,
                    1406
                ],
                "get_level_values": [
                    1447
                ],
                "_get_level_values": [
                    1447
                ],
                "levnums": [
                    1486,
                    1471
                ],
                "sorted": [
                    1471
                ],
                "self._get_level_number": [
                    1471
                ],
                "lev": [
                    1471
                ],
                "new_levels": [
                    1505,
                    3688,
                    3689,
                    1482,
                    3724,
                    1487,
                    1491,
                    1495
                ],
                "self.levels": [
                    1482
                ],
                "new_codes": [
                    3713,
                    1506,
                    3715,
                    3716,
                    3685,
                    3686,
                    1483,
                    3725,
                    3695,
                    1488,
                    1494,
                    1495,
                    3707
                ],
                "self.codes": [
                    1483
                ],
                "new_names": [
                    1489,
                    1499,
                    1484,
                    1507
                ],
                "i": [
                    4776,
                    1486,
                    1487,
                    1488,
                    1489
                ],
                "new_levels.pop": [
                    1487
                ],
                "new_codes.pop": [
                    1488
                ],
                "new_names.pop": [
                    1489
                ],
                "take": [
                    4389,
                    1495
                ],
                "result.putmask": [
                    1497
                ],
                "mapper": [
                    4744,
                    1532,
                    1535
                ],
                "grouper": [
                    1537,
                    1533,
                    1535
                ],
                "self.is_monotonic_increasing": [
                    1547,
                    3054,
                    2996,
                    4984,
                    1598
                ],
                "self._engine.is_monotonic_increasing": [
                    1564
                ],
                "self._engine.is_monotonic_decreasing": [
                    1581
                ],
                "self.is_unique": [
                    3454,
                    3458,
                    3303,
                    4682,
                    2958,
                    1615,
                    3769,
                    2325,
                    1654,
                    2552,
                    3257,
                    2330,
                    1598
                ],
                "self.is_monotonic_decreasing": [
                    4986,
                    1615
                ],
                "self._engine.is_unique": [
                    1622
                ],
                "lib.infer_dtype": [
                    5665,
                    1970,
                    5643,
                    5698
                ],
                "is_datetime_array": [
                    1977
                ],
                "ensure_object": [
                    1977
                ],
                "d.update": [
                    1984
                ],
                "_new_Index": [
                    1985
                ],
                "_na_value": [
                    1990
                ],
                "np.empty": [
                    3353,
                    2002,
                    3630
                ],
                "np.bool_": [
                    2002
                ],
                "values.fill": [
                    2003
                ],
                "self._isnan.nonzero": [
                    2009
                ],
                "self._isnan": [
                    2176,
                    2019,
                    2151,
                    2009,
                    2076
                ],
                "np.int64": [
                    2011
                ],
                "self._isnan.any": [
                    2019
                ],
                "isnull": [
                    2078
                ],
                "self.isna": [
                    2122
                ],
                "notnull": [
                    2124
                ],
                "notna": [
                    2124
                ],
                "self._assert_can_do_op": [
                    2149
                ],
                "self.hasnans": [
                    2338,
                    2150,
                    2175
                ],
                "self.putmask": [
                    2151
                ],
                "downcast": [
                    2152
                ],
                "how": [
                    3456,
                    3461,
                    3465,
                    3593,
                    3470,
                    3475,
                    3477,
                    3479,
                    3483,
                    3756,
                    2172,
                    3771,
                    3775,
                    3779,
                    3782,
                    3655,
                    3786,
                    3788,
                    3790,
                    3792,
                    3537,
                    3666,
                    3413,
                    3418,
                    3421,
                    3429,
                    3438,
                    3567,
                    3440,
                    3571,
                    3450,
                    3452,
                    2173
                ],
                "unique": [
                    2205
                ],
                "super": [
                    2310,
                    4744,
                    2254,
                    3925,
                    2205
                ],
                "drop_duplicates": [
                    2254
                ],
                "keep": [
                    2254,
                    2310
                ],
                "duplicated": [
                    2310
                ],
                "dropna": [
                    2336,
                    2325
                ],
                "self.unique": [
                    2331
                ],
                "values._data": [
                    2334
                ],
                "NotImplementedError": [
                    4512,
                    4873,
                    2340,
                    3661
                ],
                "self.intersection": [
                    3482,
                    2374
                ],
                "self.union": [
                    2377,
                    3486
                ],
                "self.symmetric_difference": [
                    2380
                ],
                "__bool__": [
                    2388
                ],
                "__nonzero__": [
                    2388
                ],
                "get_op_result_name": [
                    2579,
                    2651,
                    3804,
                    2814,
                    2399
                ],
                "this": [
                    2778,
                    2625,
                    2721,
                    2627,
                    2785,
                    3448,
                    2952,
                    2954,
                    3450,
                    2776,
                    2708,
                    2710,
                    2423,
                    2714,
                    2713,
                    2426,
                    2783
                ],
                "self.astype": [
                    2625,
                    2952,
                    4238,
                    4694,
                    2423,
                    3448
                ],
                "Index.union": [
                    2426
                ],
                "sort": [
                    3488,
                    2627,
                    2565,
                    2502,
                    2792,
                    2506,
                    2539,
                    2508,
                    2445,
                    2699,
                    2448,
                    2770,
                    2617,
                    2426,
                    2715,
                    2653
                ],
                "self._validate_sort_keyword": [
                    2617,
                    2770,
                    2699,
                    2502
                ],
                "self._assert_can_do_setop": [
                    2618,
                    2771,
                    2700,
                    2503
                ],
                "self._is_compatible_with_other": [
                    2505
                ],
                "self._union_incompatible_dtypes": [
                    2506
                ],
                "self._union": [
                    2508
                ],
                "self.equals": [
                    2529,
                    3299,
                    3755,
                    2702,
                    4282,
                    2621
                ],
                "self._get_reconciled_name_object": [
                    2530,
                    2622
                ],
                "other._get_reconciled_name_object": [
                    2533
                ],
                "lvals": [
                    2560,
                    2563,
                    2630,
                    2536,
                    2635,
                    2541,
                    2544,
                    2642,
                    2547,
                    2647
                ],
                "rvals": [
                    2631,
                    2537,
                    2635,
                    2541,
                    2642,
                    2548,
                    2647,
                    2559
                ],
                "other._values": [
                    2789,
                    3590,
                    2631,
                    2537,
                    4268,
                    3767
                ],
                "self.is_monotonic": [
                    3467,
                    2633,
                    2539,
                    3459
                ],
                "other.is_monotonic": [
                    3467,
                    2633,
                    2539,
                    3459
                ],
                "self._outer_indexer": [
                    3793,
                    2541,
                    3783
                ],
                "value_set": [
                    2547,
                    2548
                ],
                "result.extend": [
                    2548
                ],
                "_values": [
                    5201,
                    2549
                ],
                "indexer": [
                    3339,
                    3340,
                    3341,
                    3345,
                    2964,
                    2710,
                    2711,
                    2966,
                    2713,
                    3350,
                    3353,
                    3361,
                    2979,
                    2981,
                    3370,
                    3373,
                    3377,
                    2873,
                    2874,
                    3002,
                    2876,
                    3004,
                    3006,
                    3007,
                    3257,
                    4667,
                    4668,
                    3146,
                    3068,
                    4684,
                    4685,
                    3025,
                    2642,
                    2643,
                    3026,
                    3027,
                    3157,
                    2647,
                    2648,
                    3033,
                    2778,
                    2650,
                    3159,
                    2781,
                    3161,
                    3039,
                    3040,
                    3295,
                    2788,
                    3300,
                    3304,
                    5226,
                    5227,
                    3182,
                    3055,
                    3183,
                    3313,
                    5231,
                    5232,
                    3061,
                    3062,
                    3319,
                    2553,
                    2554,
                    3067,
                    2556,
                    3069,
                    2558,
                    2559
                ],
                "self.get_indexer": [
                    3495,
                    3048,
                    3049,
                    3304,
                    4683,
                    5226,
                    3025,
                    2873,
                    2553
                ],
                "nonzero": [
                    2788,
                    2643,
                    2711,
                    2554,
                    3643,
                    2781
                ],
                "algos.unique1d": [
                    2556,
                    2647
                ],
                "self.get_indexer_non_unique": [
                    3313,
                    3339,
                    2556,
                    4684
                ],
                "other_diff": [
                    2560,
                    2559
                ],
                "algos.take_nd": [
                    3681,
                    3731,
                    2559
                ],
                "concat_compat": [
                    2560,
                    2791
                ],
                "algos.safe_sort": [
                    2794,
                    2717,
                    2654,
                    2567
                ],
                "warnings.warn": [
                    2569,
                    4619,
                    3150
                ],
                "warnings": [
                    2569,
                    4619,
                    3150
                ],
                "RuntimeWarning": [
                    2571
                ],
                "self._wrap_setop_result": [
                    2576,
                    2639
                ],
                "ensure_index": [
                    3401,
                    3338,
                    4655,
                    2935,
                    3290,
                    2619
                ],
                "other.astype": [
                    3449,
                    2626,
                    4694
                ],
                "this.intersection": [
                    2627
                ],
                "self._inner_indexer": [
                    2635,
                    3780,
                    3791
                ],
                "get_indexer": [
                    2642
                ],
                "indexer.take": [
                    2643,
                    2781,
                    2711
                ],
                "InvalidIndexError": [
                    2644,
                    4566,
                    2959
                ],
                "IncompatibleFrequency": [
                    2644,
                    5741
                ],
                "get_indexer_non_unique": [
                    2647
                ],
                "other.take": [
                    2650
                ],
                "res_name": [
                    2657,
                    2651,
                    2655
                ],
                "taken.values": [
                    2654
                ],
                "taken.name": [
                    2657
                ],
                "result_name": [
                    2721,
                    2799,
                    2706,
                    2773,
                    2774,
                    2812,
                    2814,
                    2815
                ],
                "self._convert_can_do_setop": [
                    2706,
                    2772
                ],
                "self._get_unique_index": [
                    2776,
                    2708
                ],
                "this.get_indexer": [
                    2778,
                    2710,
                    2954
                ],
                "label_diff": [
                    2713,
                    2714
                ],
                "np.setdiff1d": [
                    2713,
                    2782
                ],
                "np.arange": [
                    3361,
                    3362,
                    4389,
                    3692,
                    3373,
                    3345,
                    2713,
                    2783
                ],
                "this.size": [
                    2713,
                    2783
                ],
                "the_diff": [
                    2721,
                    2791,
                    2794,
                    2802,
                    2714,
                    2717
                ],
                "this.values.take": [
                    2714
                ],
                "this.values": [
                    2714
                ],
                "this._shallow_copy": [
                    2721
                ],
                "result_name_update": [
                    2772,
                    2774
                ],
                "other._get_unique_index": [
                    2777
                ],
                "common_indexer": [
                    2781,
                    2783
                ],
                "left_indexer": [
                    3715,
                    3716,
                    3721,
                    3738,
                    3741,
                    3742,
                    3747,
                    3671,
                    3674,
                    3675,
                    2782,
                    2785,
                    3048,
                    3051,
                    3692,
                    3696,
                    3057,
                    3701,
                    3706,
                    3707
                ],
                "left_diff": [
                    2785,
                    2791
                ],
                "this._values.take": [
                    2785
                ],
                "this._values": [
                    2785
                ],
                "right_indexer": [
                    3744,
                    3745,
                    3747,
                    2788,
                    2789,
                    3049,
                    3052,
                    3056,
                    3058,
                    3731,
                    3735,
                    3738
                ],
                "right_diff": [
                    2789,
                    2791
                ],
                "other._values.take": [
                    2789
                ],
                "attribs": [
                    2798,
                    2799,
                    2800,
                    2801,
                    2802,
                    4207,
                    4208,
                    4212
                ],
                "self._shallow_copy_with_infer": [
                    3982,
                    3376,
                    2802,
                    5203,
                    4212
                ],
                "method": [
                    5597,
                    2948,
                    3305,
                    2858,
                    2955,
                    3018,
                    3308,
                    3022,
                    2963,
                    2964,
                    2965,
                    2934,
                    2999,
                    2873,
                    5596,
                    3004,
                    3293
                ],
                "tolerance": [
                    2948,
                    2955,
                    2964,
                    2966,
                    2968,
                    2985,
                    2986,
                    2859,
                    2988,
                    2870,
                    2871,
                    2873,
                    3005,
                    3006,
                    3305,
                    3060,
                    3061,
                    2936,
                    2937,
                    3068
                ],
                "casted_key": [
                    2864,
                    2866
                ],
                "self._maybe_cast_indexer": [
                    2864
                ],
                "key": [
                    3082,
                    3089,
                    3090,
                    3091,
                    4627,
                    4120,
                    4121,
                    4122,
                    4124,
                    4127,
                    4129,
                    4130,
                    3108,
                    4132,
                    3238,
                    2864,
                    2868,
                    3125,
                    3126,
                    2871,
                    3127,
                    2873,
                    3128,
                    2878,
                    4930,
                    4931,
                    3144,
                    3146,
                    4940,
                    4942,
                    4945,
                    4563,
                    3157,
                    4566,
                    4574,
                    4578,
                    4581,
                    4585,
                    4092,
                    4094
                ],
                "self._engine.get_loc": [
                    2866,
                    4627
                ],
                "self._convert_tolerance": [
                    2937,
                    2871
                ],
                "indexer.ndim": [
                    2874
                ],
                "indexer.size": [
                    2874
                ],
                "loc": [
                    4353,
                    4354,
                    4355,
                    4605,
                    4581,
                    4585,
                    2877,
                    4607,
                    4604,
                    5202,
                    4627,
                    5181,
                    4629,
                    2876,
                    4349,
                    4574,
                    2879
                ],
                "indexer.item": [
                    2876
                ],
                "missing.clean_reindex_fill_method": [
                    2934
                ],
                "missing": [
                    3339,
                    3344,
                    3313,
                    3347,
                    3348,
                    2934,
                    4667,
                    4668
                ],
                "target": [
                    2945,
                    2946,
                    2951,
                    2953,
                    3338,
                    2955,
                    3339,
                    2964,
                    3348,
                    2966,
                    3358,
                    2979,
                    2986,
                    4655,
                    4656,
                    4657,
                    2994,
                    2996,
                    4660,
                    4661,
                    4662,
                    4663,
                    4665,
                    3319,
                    3004,
                    4683,
                    4684,
                    3278,
                    3025,
                    3281,
                    3027,
                    3283,
                    3288,
                    3290,
                    3296,
                    3299,
                    3048,
                    3049,
                    3305,
                    3051,
                    3052,
                    3313,
                    3315,
                    3316,
                    3061,
                    3317,
                    2935,
                    2937,
                    3067,
                    2942,
                    2943
                ],
                "target.is_boolean": [
                    2942
                ],
                "self.is_numeric": [
                    2942
                ],
                "np.repeat": [
                    3424,
                    3432,
                    2943
                ],
                "target.size": [
                    2986,
                    2943
                ],
                "pself": [
                    2945,
                    2946,
                    2947,
                    4656,
                    4657,
                    4658
                ],
                "ptarget": [
                    2945,
                    2946,
                    2948,
                    4656,
                    4657,
                    4658
                ],
                "self._maybe_promote": [
                    4656,
                    2945
                ],
                "pself.get_indexer": [
                    2947
                ],
                "limit": [
                    2948,
                    3016,
                    3048,
                    3049,
                    2955,
                    3305,
                    3308,
                    2964,
                    2966,
                    3002,
                    3004,
                    2973
                ],
                "target.dtype": [
                    2951
                ],
                "target.astype": [
                    2953
                ],
                "self._get_fill_indexer": [
                    2964
                ],
                "self._get_nearest_indexer": [
                    2966
                ],
                "self._engine.get_indexer": [
                    2979
                ],
                "target._get_engine_target": [
                    4665,
                    2994,
                    2979
                ],
                "tolerance.size": [
                    2986
                ],
                "target.is_monotonic_increasing": [
                    2996
                ],
                "engine_method": [
                    3002,
                    2997
                ],
                "self._engine.get_pad_indexer": [
                    2998
                ],
                "self._engine.get_backfill_indexer": [
                    3000
                ],
                "self._get_fill_indexer_searchsorted": [
                    3004
                ],
                "self._filter_indexer_tolerance": [
                    3061,
                    3006
                ],
                "side": [
                    5058,
                    5027,
                    5034,
                    3022,
                    3027,
                    3028,
                    5048,
                    4985,
                    5017,
                    5020,
                    5053,
                    4991
                ],
                "nonexact": [
                    3033,
                    3026,
                    3027
                ],
                "self._searchsorted_monotonic": [
                    5034,
                    3027
                ],
                "left_distances": [
                    3056,
                    3051
                ],
                "np.abs": [
                    5321,
                    3051,
                    3052
                ],
                "right_distances": [
                    3056,
                    3052
                ],
                "operator.lt": [
                    5244,
                    3054
                ],
                "operator": [
                    5286,
                    5319,
                    5288,
                    5320,
                    5291,
                    5293,
                    3054,
                    5297,
                    5298,
                    5301,
                    5242,
                    5243,
                    5244,
                    5245,
                    5246,
                    5247
                ],
                "operator.le": [
                    5246,
                    3054
                ],
                "np.where": [
                    3975,
                    4387,
                    3068,
                    3055
                ],
                "distance": [
                    3067,
                    3068
                ],
                "abs": [
                    3067
                ],
                "slice": [
                    4353,
                    5052,
                    3084,
                    3093,
                    4922,
                    4124
                ],
                "self._validate_indexer": [
                    3089,
                    3090,
                    3091,
                    3125,
                    3126,
                    3127
                ],
                "key.start": [
                    3089,
                    3108,
                    3125
                ],
                "key.stop": [
                    3090,
                    3108,
                    3126
                ],
                "key.step": [
                    3091,
                    3108,
                    3127
                ],
                "kind": [
                    3105,
                    5121,
                    5027,
                    4967,
                    4938,
                    3148,
                    3119,
                    5015,
                    4914,
                    3159,
                    4055,
                    5115
                ],
                "start": [
                    3136,
                    3137,
                    3108,
                    3114,
                    5099,
                    5103,
                    5105,
                    4914,
                    3159,
                    5114,
                    5115
                ],
                "stop": [
                    3138,
                    3139,
                    3108,
                    3114,
                    3159
                ],
                "step": [
                    3108,
                    5095,
                    3114,
                    4914,
                    3159,
                    4922
                ],
                "is_integer": [
                    4578,
                    3112,
                    4942,
                    4978,
                    4604
                ],
                "is_index_slice": [
                    3114,
                    3115,
                    3124
                ],
                "is_int": [
                    3114
                ],
                "is_positional": [
                    3147,
                    3115,
                    3140,
                    3133
                ],
                "self.is_integer": [
                    3116,
                    3124
                ],
                "self.is_categorical": [
                    3116,
                    4150
                ],
                "self.is_mixed": [
                    3133
                ],
                "self.get_loc": [
                    3137,
                    3139,
                    5031,
                    4349,
                    4574
                ],
                "com.is_null_slice": [
                    3144
                ],
                "FutureWarning": [
                    4624,
                    3154
                ],
                "self.slice_indexer": [
                    3159
                ],
                "keyarr": [
                    3177,
                    3178,
                    3180,
                    3182,
                    3183,
                    3214,
                    3198,
                    3199
                ],
                "self._convert_index_indexer": [
                    3178
                ],
                "self._convert_arr_indexer": [
                    3180
                ],
                "self._convert_list_indexer": [
                    3182
                ],
                "form": [
                    4945,
                    3237
                ],
                "preserve_names": [
                    3315,
                    3278
                ],
                "_ensure_has_len": [
                    3281
                ],
                "ABCRangeIndex": [
                    3284
                ],
                "_": [
                    3634,
                    4684,
                    3295
                ],
                "self._join_level": [
                    3417,
                    3570,
                    3295
                ],
                "target.nlevels": [
                    3315
                ],
                "target.name": [
                    3315,
                    3317
                ],
                "target.copy": [
                    3316
                ],
                "check": [
                    3370,
                    3340,
                    3341,
                    3374,
                    3349,
                    3350,
                    3351
                ],
                "new_labels": [
                    3341,
                    3376,
                    3353,
                    3354,
                    3355
                ],
                "self.take": [
                    3373,
                    3341,
                    4719,
                    3350,
                    4443
                ],
                "new_indexer": [
                    3361,
                    3362,
                    3363,
                    3373,
                    3342,
                    3374,
                    3377
                ],
                "length": [
                    3345,
                    3349,
                    3351
                ],
                "missing_labels": [
                    3355,
                    3348
                ],
                "target.take": [
                    3348
                ],
                "missing_indexer": [
                    3363,
                    3355,
                    3349
                ],
                "ensure_int64": [
                    3633,
                    3349,
                    3351,
                    3644,
                    3645,
                    3678
                ],
                "cur_labels": [
                    3354,
                    3362,
                    3350
                ],
                "cur_indexer": [
                    3354,
                    3362,
                    3351
                ],
                "target.is_unique": [
                    3358
                ],
                "self_is_mi": [
                    3520,
                    3402,
                    3563,
                    3407,
                    3416,
                    3517
                ],
                "other_is_mi": [
                    3520,
                    3403,
                    3407,
                    3416,
                    3518
                ],
                "other.names": [
                    3569,
                    3410,
                    3510
                ],
                "self._join_multi": [
                    3413
                ],
                "return_indexers": [
                    3456,
                    3491,
                    3461,
                    3431,
                    3465,
                    3757,
                    3450,
                    3470,
                    3440,
                    3442,
                    3571,
                    3796,
                    3413,
                    3605,
                    3418,
                    3740,
                    3423
                ],
                "join_index": [
                    3723,
                    3599,
                    3601,
                    3603,
                    3476,
                    3732,
                    3478,
                    3606,
                    3608,
                    3735,
                    3482,
                    3486,
                    3489,
                    3747,
                    3492,
                    3749,
                    3495,
                    3496,
                    3499,
                    3500,
                    3502,
                    3772,
                    3776,
                    3780,
                    3781,
                    3783,
                    3784,
                    3787,
                    3789,
                    3791,
                    3793,
                    3794,
                    3799,
                    3672,
                    3801,
                    3675,
                    3422,
                    3424,
                    3425,
                    3427,
                    3430,
                    3432,
                    3433,
                    3435
                ],
                "rindexer": [
                    3424,
                    3425,
                    3497,
                    3499,
                    3500
                ],
                "other._shallow_copy": [
                    3430
                ],
                "lindexer": [
                    3493,
                    3495,
                    3432,
                    3433,
                    3500
                ],
                "self._join_precedence": [
                    3437
                ],
                "other._join_precedence": [
                    3437
                ],
                "get": [
                    3655,
                    3438,
                    3567
                ],
                "other.join": [
                    3439
                ],
                "y": [
                    4776,
                    4780,
                    3443,
                    3444
                ],
                "z": [
                    3443,
                    3444
                ],
                "this.join": [
                    3450
                ],
                "_validate_join_method": [
                    3452
                ],
                "other.is_unique": [
                    3769,
                    3458,
                    3454
                ],
                "self._join_non_unique": [
                    3464,
                    3455
                ],
                "self._join_monotonic": [
                    3460,
                    3469
                ],
                "join_index.sort_values": [
                    3489
                ],
                "other.get_indexer": [
                    3499
                ],
                "self_names": [
                    3523,
                    3509,
                    3511
                ],
                "com.not_none": [
                    3509,
                    3510
                ],
                "other_names": [
                    3524,
                    3510,
                    3511
                ],
                "overlap": [
                    3523,
                    3524,
                    3558,
                    3511,
                    3514
                ],
                "ldrop_names": [
                    3543,
                    3523,
                    3531,
                    3527
                ],
                "rdrop_names": [
                    3543,
                    3532,
                    3524,
                    3527
                ],
                "self_jnlevels": [
                    3528,
                    3531,
                    3536
                ],
                "other_jnlevels": [
                    3537,
                    3529,
                    3532
                ],
                "other.reorder_levels": [
                    3529
                ],
                "self.droplevel": [
                    3531
                ],
                "other.droplevel": [
                    3532
                ],
                "join_idx": [
                    3536,
                    3546
                ],
                "lidx": [
                    3777,
                    3556,
                    3780,
                    3783,
                    3787,
                    3789,
                    3791,
                    3536,
                    3793,
                    3797,
                    3799,
                    3546,
                    3773
                ],
                "ridx": [
                    3778,
                    3556,
                    3780,
                    3783,
                    3787,
                    3789,
                    3791,
                    3536,
                    3793,
                    3798,
                    3799,
                    3546,
                    3774
                ],
                "self_jnlevels.join": [
                    3536
                ],
                "dropped_names": [
                    3546,
                    3543
                ],
                "levels": [
                    3545,
                    3551
                ],
                "codes": [
                    3545,
                    3551
                ],
                "_restore_dropped_levels_multijoin": [
                    3545
                ],
                "multi_join_idx": [
                    3554,
                    3556,
                    3550
                ],
                "multi_join_idx.remove_unused_levels": [
                    3554
                ],
                "jl": [
                    3569,
                    3558
                ],
                "flip_order": [
                    3652,
                    3653,
                    3562,
                    3565,
                    3574,
                    3737
                ],
                "other.names.index": [
                    3569
                ],
                "lvalues": [
                    3593,
                    3586,
                    3589,
                    3599
                ],
                "self._data._values_for_argsort": [
                    3586,
                    3763
                ],
                "rvalues": [
                    3593,
                    3601,
                    3587,
                    3590
                ],
                "other._data._values_for_argsort": [
                    3587,
                    3764
                ],
                "other._data": [
                    3587,
                    3764
                ],
                "left_idx": [
                    3592,
                    3596,
                    3599,
                    3600,
                    3606
                ],
                "right_idx": [
                    3592,
                    3601,
                    3597,
                    3606
                ],
                "_get_join_indexers": [
                    3592
                ],
                "lvalues.take": [
                    3599
                ],
                "np.putmask": [
                    3601,
                    4228
                ],
                "rvalues.take": [
                    3601
                ],
                "self._wrap_joined_index": [
                    3784,
                    3794,
                    3603,
                    3781
                ],
                "size": [
                    3629
                ],
                "labels": [
                    5225,
                    5226,
                    3629,
                    5230,
                    3632,
                    3633,
                    3639,
                    3640,
                    3644
                ],
                "lab": [
                    3713,
                    3716,
                    3695,
                    3633,
                    3634,
                    3640,
                    3641,
                    3707,
                    3644,
                    3645
                ],
                "sorter": [
                    3634,
                    3635
                ],
                "libalgos.groupsort_indexer": [
                    3634,
                    3701
                ],
                "libalgos": [
                    3634,
                    3701
                ],
                "lab.max": [
                    3634
                ],
                "tic": [
                    3641,
                    3643,
                    3639
                ],
                "starts": [
                    3643,
                    3645
                ],
                "np.hstack": [
                    3643
                ],
                "lib.get_level_sorter": [
                    3645
                ],
                "left._get_level_number": [
                    3657
                ],
                "old_level": [
                    3665,
                    3658,
                    3679
                ],
                "left.levels": [
                    3688,
                    3658
                ],
                "right.is_unique": [
                    3660
                ],
                "new_level": [
                    3665,
                    3689
                ],
                "left_lev_indexer": [
                    3665,
                    3669,
                    3678,
                    3679
                ],
                "right_lev_indexer": [
                    3665,
                    3730,
                    3732
                ],
                "old_level.join": [
                    3665
                ],
                "keep_order": [
                    3691,
                    3670
                ],
                "_get_leaf_sorter": [
                    3674,
                    3715
                ],
                "left.codes": [
                    3674,
                    3685,
                    3682
                ],
                "rev_indexer": [
                    3682,
                    3679
                ],
                "lib.get_reverse_indexer": [
                    3679
                ],
                "new_lev_codes": [
                    3681,
                    3686,
                    3693,
                    3700,
                    3702,
                    3710
                ],
                "np.intp": [
                    3692
                ],
                "mask.all": [
                    3694,
                    3711
                ],
                "ngroups": [
                    3700,
                    3702
                ],
                "new_lev_codes.max": [
                    3700
                ],
                "counts": [
                    3706,
                    3701
                ],
                "mask_all": [
                    3712,
                    3720,
                    3711
                ],
                "mask.nonzero": [
                    3721
                ],
                "left.names": [
                    3726
                ],
                "join_index.codes": [
                    3732,
                    3735
                ],
                "ret_index": [
                    3760,
                    3756,
                    3758
                ],
                "sv": [
                    3777,
                    3780,
                    3783,
                    3787,
                    3789,
                    3791,
                    3793,
                    3763,
                    3766,
                    3774
                ],
                "ov": [
                    3777,
                    3780,
                    3783,
                    3787,
                    3789,
                    3791,
                    3793,
                    3764,
                    3767,
                    3774
                ],
                "self._left_indexer_unique": [
                    3777,
                    3774
                ],
                "self._left_indexer": [
                    3787,
                    3789
                ],
                "joined": [
                    3805
                ],
                "array": [
                    3840,
                    3835,
                    3836,
                    3839
                ],
                "PandasArray": [
                    3839
                ],
                "IndexOpsMixin.array.__doc__": [
                    3833
                ],
                "IndexOpsMixin.array": [
                    3833
                ],
                "memory_usage": [
                    3925
                ],
                "self._engine.sizeof": [
                    3928
                ],
                "IndexOpsMixin.memory_usage.__doc__": [
                    3923
                ],
                "IndexOpsMixin.memory_usage": [
                    3923
                ],
                "is_bool": [
                    3969
                ],
                "values.astype": [
                    3972
                ],
                "cond": [
                    3975
                ],
                "self._is_numeric_dtype": [
                    3977,
                    4011
                ],
                "np.any": [
                    3977,
                    5438
                ],
                "cls.__name__": [
                    5617,
                    3990
                ],
                "item": [
                    4016,
                    5201,
                    5202,
                    4011
                ],
                "hash": [
                    4092
                ],
                "OverflowError": [
                    5775,
                    5784,
                    4095
                ],
                "getitem": [
                    4122,
                    4132,
                    4117,
                    4127
                ],
                "self._data.__getitem__": [
                    4117
                ],
                "promote": [
                    4137,
                    4118,
                    4127
                ],
                "com.cast_scalar_indexer": [
                    4121,
                    4930
                ],
                "com.is_bool_indexer": [
                    4129
                ],
                "deprecate_ndim_indexing": [
                    4135
                ],
                "to_concat": [
                    4166,
                    4169,
                    4202,
                    4171,
                    4203,
                    4173,
                    4206,
                    4177,
                    4210,
                    4180,
                    4212,
                    4184,
                    4187,
                    4188
                ],
                "to_concat.append": [
                    4171
                ],
                "obj": [
                    5610,
                    5613,
                    4173,
                    4174,
                    4177
                ],
                "obj.name": [
                    4177,
                    5613
                ],
                "self._concat": [
                    4180
                ],
                "typs": [
                    4184,
                    4186
                ],
                "_concat.get_dtype_kinds": [
                    4184
                ],
                "_concat": [
                    4184
                ],
                "self._concat_same_dtype": [
                    4187
                ],
                "Index._concat_same_dtype": [
                    4188
                ],
                "klasses": [
                    4195,
                    4203
                ],
                "ABCDatetimeIndex": [
                    4690,
                    4196
                ],
                "ABCIntervalIndex": [
                    4200
                ],
                "x.astype": [
                    4203
                ],
                "x._values": [
                    4210
                ],
                "np.concatenate": [
                    5202,
                    4212
                ],
                "self._convert_for_op": [
                    4228
                ],
                "putmask": [
                    4238
                ],
                "self.is_": [
                    4250
                ],
                "other.equals": [
                    4266,
                    4258,
                    4262
                ],
                "array_equivalent": [
                    4268
                ],
                "c": [
                    4285,
                    4286
                ],
                "self._comparables": [
                    4286
                ],
                "label": [
                    5027,
                    5031,
                    5034,
                    4973,
                    4974,
                    4978,
                    4979,
                    4981,
                    5023,
                    4985,
                    4349,
                    4991
                ],
                "loc.indices": [
                    4354
                ],
                "locs": [
                    4392,
                    4386,
                    4387,
                    4389
                ],
                "searchsorted": [
                    4386,
                    4990
                ],
                "where.values": [
                    4392,
                    4386
                ],
                "where": [
                    4392,
                    4386
                ],
                "first": [
                    4392,
                    4391
                ],
                "mask.argmax": [
                    4391
                ],
                "_as": [
                    4441,
                    4443,
                    4446,
                    4439
                ],
                "self.argsort": [
                    4439
                ],
                "sorted_index": [
                    4448,
                    4443,
                    4446
                ],
                "return_indexer": [
                    4445
                ],
                "self.asi8": [
                    4549
                ],
                "result.argsort": [
                    4552
                ],
                "args": [
                    4552
                ],
                "self._should_fallback_to_positional": [
                    4576
                ],
                "self._get_values_for_loc": [
                    4585
                ],
                "series": [
                    4585,
                    4605,
                    4607
                ],
                "self.holds_integer": [
                    4591
                ],
                "self.is_boolean": [
                    4591
                ],
                "series._values": [
                    4605
                ],
                "series.iloc": [
                    4607
                ],
                "validate_numeric_casting": [
                    4628
                ],
                "arr.dtype": [
                    4628
                ],
                "arr": [
                    5200,
                    5202,
                    4628,
                    4629
                ],
                "pself.get_indexer_non_unique": [
                    4658
                ],
                "is_categorical": [
                    4660
                ],
                "tgt_values": [
                    4665,
                    4667,
                    4661,
                    4663
                ],
                "self.is_all_dates": [
                    4662
                ],
                "target.is_all_dates": [
                    4662
                ],
                "target.asi8": [
                    4663
                ],
                "self._engine.get_indexer_non_unique": [
                    4667
                ],
                "values.values": [
                    4714
                ],
                "ensure_categorical": [
                    4715
                ],
                "values._reverse_indexer": [
                    4716
                ],
                "result.items": [
                    4719
                ],
                "PrettyDict": [
                    4697,
                    4721
                ],
                "Hashable": [
                    4697
                ],
                "new_values": [
                    4744,
                    4749,
                    4753,
                    4756,
                    4759,
                    4763
                ],
                "_map_values": [
                    4744
                ],
                "na_action": [
                    4744
                ],
                "new_values.size": [
                    4749,
                    4759
                ],
                "attributes.get": [
                    4752,
                    4753
                ],
                "items": [
                    4775,
                    4780,
                    4781,
                    4783,
                    4784
                ],
                "func": [
                    4776,
                    4780,
                    4783
                ],
                "enumerate": [
                    4776
                ],
                "from_tuples": [
                    4781
                ],
                "algos.isin": [
                    4868
                ],
                "start_slice": [
                    5147,
                    5148,
                    4914,
                    5140,
                    4917,
                    5113,
                    4922,
                    5115,
                    5116,
                    5117,
                    5150
                ],
                "end_slice": [
                    5121,
                    5122,
                    5123,
                    5146,
                    4914,
                    5140,
                    4919,
                    5145,
                    4922,
                    5150,
                    5119
                ],
                "self.slice_locs": [
                    4914
                ],
                "end": [
                    5120,
                    5121,
                    5099,
                    5103,
                    4914,
                    5106
                ],
                "AssertionError": [
                    4920,
                    4918
                ],
                "self.is_floating": [
                    4929
                ],
                "self._invalid_indexer": [
                    4945,
                    4979,
                    4974
                ],
                "is_float": [
                    4973
                ],
                "self.searchsorted": [
                    4985
                ],
                "pos": [
                    4993,
                    4990
                ],
                "original_label": [
                    5049,
                    5023
                ],
                "self._maybe_cast_slice_bound": [
                    5027
                ],
                "slc": [
                    5056,
                    5059,
                    5061,
                    5031,
                    5039,
                    5042,
                    5043,
                    5045,
                    5046,
                    5052,
                    5054
                ],
                "lib.maybe_booleans_to_slice": [
                    5043
                ],
                "slc.view": [
                    5043
                ],
                "lib.maybe_indices_to_slice": [
                    5045
                ],
                "slc.astype": [
                    5045
                ],
                "slc.start": [
                    5054
                ],
                "slc.stop": [
                    5056
                ],
                "inc": [
                    5097,
                    5125,
                    5095
                ],
                "datetime": [
                    5103
                ],
                "ts_start": [
                    5105,
                    5110
                ],
                "Timestamp": [
                    5105,
                    5106
                ],
                "ts_end": [
                    5106,
                    5110
                ],
                "tz_compare": [
                    5110
                ],
                "ts_start.tzinfo": [
                    5110
                ],
                "ts_end.tzinfo": [
                    5110
                ],
                "self.get_slice_bound": [
                    5121,
                    5115
                ],
                "np.delete": [
                    5181
                ],
                "self._coerce_scalar_to_index": [
                    5201
                ],
                "arr_dtype": [
                    5224,
                    5225
                ],
                "com.index_labels_to_array": [
                    5225
                ],
                "errors": [
                    5229
                ],
                "self.delete": [
                    5232
                ],
                "cls.__eq__": [
                    5242
                ],
                "_make_comparison_op": [
                    5242,
                    5243,
                    5244,
                    5245,
                    5246,
                    5247
                ],
                "operator.eq": [
                    5242
                ],
                "cls.__ne__": [
                    5243
                ],
                "operator.ne": [
                    5243
                ],
                "cls.__lt__": [
                    5244
                ],
                "cls.__gt__": [
                    5245
                ],
                "operator.gt": [
                    5245
                ],
                "cls.__le__": [
                    5246
                ],
                "cls.__ge__": [
                    5247
                ],
                "operator.ge": [
                    5247
                ],
                "cls.__add__": [
                    5286,
                    5254
                ],
                "make_invalid_op": [
                    5254,
                    5255,
                    5256,
                    5257,
                    5258,
                    5259,
                    5266,
                    5267,
                    5268,
                    5269,
                    5270,
                    5271,
                    5272,
                    5273,
                    5274,
                    5275,
                    5276,
                    5277,
                    5278,
                    5279,
                    5446,
                    5447
                ],
                "cls.__radd__": [
                    5287,
                    5255
                ],
                "cls.__iadd__": [
                    5256
                ],
                "cls.__sub__": [
                    5288,
                    5257
                ],
                "cls.__rsub__": [
                    5289,
                    5258
                ],
                "cls.__isub__": [
                    5259
                ],
                "cls.__pow__": [
                    5266,
                    5291
                ],
                "cls.__rpow__": [
                    5290,
                    5267
                ],
                "cls.__mul__": [
                    5268,
                    5301
                ],
                "cls.__rmul__": [
                    5269,
                    5302
                ],
                "cls.__floordiv__": [
                    5298,
                    5270
                ],
                "cls.__rfloordiv__": [
                    5299,
                    5271
                ],
                "cls.__truediv__": [
                    5272,
                    5293
                ],
                "cls.__rtruediv__": [
                    5273,
                    5294
                ],
                "cls.__mod__": [
                    5297,
                    5274
                ],
                "cls.__divmod__": [
                    5275,
                    5300
                ],
                "cls.__neg__": [
                    5276,
                    5319
                ],
                "cls.__pos__": [
                    5320,
                    5277
                ],
                "cls.__abs__": [
                    5321,
                    5278
                ],
                "cls.__inv__": [
                    5322,
                    5279
                ],
                "_make_arithmetic_op": [
                    5286,
                    5287,
                    5288,
                    5289,
                    5290,
                    5291,
                    5293,
                    5294,
                    5297,
                    5298,
                    5299,
                    5300,
                    5301,
                    5302
                ],
                "operator.add": [
                    5286
                ],
                "ops.radd": [
                    5287
                ],
                "operator.sub": [
                    5288
                ],
                "ops.rsub": [
                    5289
                ],
                "ops.rpow": [
                    5290
                ],
                "operator.pow": [
                    5291
                ],
                "operator.truediv": [
                    5293
                ],
                "ops.rtruediv": [
                    5294
                ],
                "operator.mod": [
                    5297
                ],
                "operator.floordiv": [
                    5298
                ],
                "ops.rfloordiv": [
                    5299
                ],
                "divmod": [
                    5300
                ],
                "operator.mul": [
                    5301
                ],
                "ops.rmul": [
                    5302
                ],
                "_evaluate_numeric_unary.__name__": [
                    5316
                ],
                "_evaluate_numeric_unary": [
                    5316,
                    5317
                ],
                "opstr": [
                    5316
                ],
                "_make_evaluate_unary": [
                    5320,
                    5321,
                    5322,
                    5319
                ],
                "operator.neg": [
                    5319
                ],
                "operator.pos": [
                    5320
                ],
                "cls._add_numeric_methods_unary": [
                    5326
                ],
                "cls._add_numeric_methods_binary": [
                    5327
                ],
                "_doc": [
                    5419,
                    5334
                ],
                "dedent": [
                    5349,
                    5391
                ],
                "f": [
                    5421
                ],
                "result.ndim": [
                    5424
                ],
                "result.dtype.type": [
                    5427
                ],
                "result.dtype": [
                    5427
                ],
                "result.item": [
                    5427
                ],
                "Substitution": [
                    5417
                ],
                "desc": [
                    5417
                ],
                "logical_func.__name__": [
                    5431
                ],
                "logical_func": [
                    5432,
                    5431
                ],
                "cls.all": [
                    5434,
                    5446
                ],
                "_make_logical_function": [
                    5434,
                    5437
                ],
                "np.all": [
                    5435
                ],
                "cls.any": [
                    5437,
                    5447
                ],
                "self._values.shape": [
                    5457
                ],
                "Index._add_numeric_methods_disabled": [
                    5460
                ],
                "Index._add_logical_methods": [
                    5461
                ],
                "Index._add_comparison_methods": [
                    5462
                ],
                "sequences": [
                    5498,
                    5501,
                    5503
                ],
                "MultiIndex.from_arrays": [
                    5559,
                    5503
                ],
                "index_like": [
                    5568,
                    5538,
                    5570,
                    5540,
                    5541,
                    5542,
                    5543,
                    5545,
                    5546,
                    5550,
                    5551,
                    5552,
                    5554,
                    5561
                ],
                "index_like.copy": [
                    5540
                ],
                "index_like.name": [
                    5543
                ],
                "converted": [
                    5561,
                    5554,
                    5556,
                    5559
                ],
                "all_arrays": [
                    5554,
                    5556
                ],
                "lib.clean_index_list": [
                    5554
                ],
                "seq": [
                    5578,
                    5580,
                    5582
                ],
                "trimmed": [
                    5592,
                    5589,
                    5590,
                    5591
                ],
                "strings": [
                    5589,
                    5590
                ],
                "n": [
                    5603
                ],
                "is_integer_dtype": [
                    5642
                ],
                "inferred": [
                    5665,
                    5666,
                    5698,
                    5700,
                    5734,
                    5737,
                    5643,
                    5644,
                    5709,
                    5646,
                    5713,
                    5650,
                    5720,
                    5723,
                    5660,
                    5724
                ],
                "maybe_cast_to_integer_array": [
                    5651,
                    5645
                ],
                "_try_convert_to_int_array": [
                    5656,
                    5702
                ],
                "np.float64": [
                    5658,
                    5711
                ],
                "IntervalArray._from_sequence": [
                    5715
                ],
                "IntervalArray": [
                    5715
                ],
                "inferred.startswith": [
                    5724,
                    5734
                ],
                "DatetimeArray._from_sequence": [
                    5726
                ],
                "DatetimeArray": [
                    5726
                ],
                "OutOfBoundsDatetime": [
                    5728
                ],
                "TimedeltaArray._from_sequence": [
                    5735
                ],
                "TimedeltaArray": [
                    5735
                ],
                "PeriodArray._from_sequence": [
                    5739
                ],
                "PeriodArray": [
                    5739
                ],
                "subarr.dtype": [
                    5744
                ],
                "klass": [
                    5824,
                    5821
                ],
                "index.astype": [
                    5822
                ]
            },
            "filtered_variables_in_file": {
                "TYPE_CHECKING": [
                    88
                ],
                "__all__": [
                    92
                ],
                "_unsortable_types": [
                    94
                ],
                "_index_doc_kwargs": [
                    96,
                    710,
                    4653,
                    2930,
                    793
                ],
                "_index_shared_docs": [
                    2881,
                    5349,
                    710,
                    104,
                    682,
                    5418,
                    4653,
                    5391,
                    754,
                    2930,
                    4631,
                    793
                ],
                "str_t": [
                    3232,
                    3010,
                    4933,
                    4870,
                    4997,
                    105,
                    874,
                    1003,
                    1966,
                    2991,
                    4947,
                    3093,
                    5205,
                    855,
                    891
                ],
                "other": [
                    3587,
                    3590,
                    2576,
                    2579,
                    3603,
                    558,
                    2618,
                    2619,
                    2621,
                    2622,
                    3647,
                    2624,
                    2626,
                    2627,
                    3650,
                    2631,
                    4168,
                    2633,
                    4169,
                    4171,
                    2639,
                    4690,
                    4691,
                    4694,
                    4695,
                    2650,
                    2651,
                    110,
                    111,
                    114,
                    115,
                    116,
                    117,
                    120,
                    125,
                    129,
                    133,
                    2700,
                    141,
                    2702,
                    146,
                    2706,
                    2710,
                    4250,
                    4253,
                    4256,
                    4258,
                    4260,
                    4262,
                    4264,
                    3753,
                    4266,
                    3755,
                    3756,
                    4268,
                    3764,
                    3767,
                    3769,
                    4282,
                    4285,
                    3776,
                    4289,
                    3781,
                    3784,
                    3794,
                    2771,
                    2772,
                    2777,
                    2778,
                    3804,
                    2789,
                    2805,
                    2810,
                    2811,
                    2814,
                    2815,
                    2349,
                    2353,
                    2358,
                    2362,
                    2365,
                    2371,
                    2374,
                    2377,
                    3401,
                    3403,
                    2380,
                    3410,
                    3413,
                    3418,
                    3421,
                    2399,
                    3430,
                    3437,
                    3439,
                    3447,
                    3449,
                    3450,
                    2425,
                    2426,
                    3963,
                    3454,
                    3964,
                    3456,
                    3969,
                    3458,
                    3459,
                    3461,
                    3975,
                    3465,
                    2442,
                    3467,
                    3470,
                    3478,
                    3482,
                    3486,
                    3496,
                    3499,
                    3510,
                    3518,
                    2503,
                    2505,
                    2506,
                    3529,
                    2508,
                    3532,
                    3546,
                    2529,
                    2530,
                    2533,
                    2537,
                    2539,
                    3564,
                    3569,
                    3571,
                    2553,
                    2556,
                    3583
                ],
                "np.ndarray": [
                    3843,
                    3873,
                    4514,
                    5039,
                    2992,
                    5423,
                    5046,
                    3011,
                    589,
                    461,
                    3917,
                    4697,
                    352,
                    3042,
                    3811,
                    110,
                    252,
                    2933,
                    3830,
                    5622,
                    5748,
                    3065,
                    3066,
                    5749,
                    3836
                ],
                "np": [
                    3599,
                    3601,
                    5658,
                    4130,
                    4134,
                    5671,
                    3630,
                    4661,
                    3643,
                    5181,
                    589,
                    5711,
                    5200,
                    593,
                    5202,
                    600,
                    4697,
                    3692,
                    110,
                    4212,
                    5748,
                    5749,
                    119,
                    124,
                    128,
                    129,
                    4228,
                    2713,
                    160,
                    672,
                    5321,
                    733,
                    2782,
                    2783,
                    3811,
                    3830,
                    3836,
                    252,
                    3843,
                    3345,
                    3353,
                    3361,
                    3362,
                    3873,
                    4387,
                    4389,
                    3373,
                    5423,
                    2871,
                    5435,
                    2365,
                    5438,
                    3917,
                    345,
                    352,
                    3424,
                    3432,
                    2933,
                    376,
                    2943,
                    3975,
                    3977,
                    401,
                    4514,
                    2985,
                    941,
                    5039,
                    2992,
                    5046,
                    952,
                    3011,
                    1990,
                    4551,
                    461,
                    2002,
                    1497,
                    2011,
                    3042,
                    996,
                    998,
                    3051,
                    3052,
                    3055,
                    5622,
                    3065,
                    3066,
                    3068
                ],
                "Index": [
                    401,
                    148,
                    149,
                    535,
                    4763,
                    4253,
                    672,
                    5538,
                    420,
                    5543,
                    680,
                    5423,
                    4016,
                    2353,
                    4784,
                    2358,
                    2810,
                    2365,
                    5314,
                    2371,
                    5570,
                    4174,
                    2642,
                    3283,
                    5460,
                    5461,
                    5462,
                    2647,
                    604,
                    349,
                    3805,
                    4188,
                    352,
                    3177,
                    5610,
                    2155,
                    110,
                    4210,
                    2549,
                    2425,
                    2426,
                    2811,
                    636,
                    5501
                ],
                "ABCSeries": [
                    352,
                    5610,
                    2349,
                    141,
                    110,
                    5423
                ],
                "ExtensionArray": [
                    3843,
                    4199,
                    110,
                    117,
                    3834,
                    252
                ],
                "other.ndim": [
                    111
                ],
                "self": [
                    4099,
                    4117,
                    4118,
                    2076,
                    4150,
                    4151,
                    4166,
                    2122,
                    4178,
                    4180,
                    4187,
                    4188,
                    2149,
                    2150,
                    2151,
                    2155,
                    2156,
                    4206,
                    111,
                    4207,
                    114,
                    115,
                    4212,
                    117,
                    120,
                    122,
                    125,
                    2175,
                    2176,
                    129,
                    2177,
                    4226,
                    4228,
                    133,
                    4229,
                    4231,
                    4232,
                    4234,
                    4238,
                    146,
                    4250,
                    2204,
                    2206,
                    4256,
                    4258,
                    4262,
                    4266,
                    4268,
                    4282,
                    4285,
                    4286,
                    4289,
                    4349,
                    4351,
                    4354,
                    4355,
                    2325,
                    2326,
                    2328,
                    2330,
                    2331,
                    2332,
                    2338,
                    4386,
                    4389,
                    2343,
                    4392,
                    2353,
                    2358,
                    2362,
                    2365,
                    2371,
                    2374,
                    2377,
                    2380,
                    2384,
                    4439,
                    4443,
                    2399,
                    2400,
                    2401,
                    2402,
                    2423,
                    2442,
                    4512,
                    4549,
                    2502,
                    2503,
                    4551,
                    2505,
                    2506,
                    2508,
                    478,
                    4574,
                    4576,
                    2529,
                    2530,
                    2532,
                    2533,
                    487,
                    2536,
                    4585,
                    2539,
                    2541,
                    4591,
                    502,
                    503,
                    2552,
                    2553,
                    505,
                    507,
                    2556,
                    524,
                    2576,
                    529,
                    530,
                    2579,
                    532,
                    2580,
                    4627,
                    558,
                    4656,
                    4657,
                    564,
                    565,
                    4662,
                    568,
                    2617,
                    2618,
                    4667,
                    2621,
                    2622,
                    576,
                    577,
                    2624,
                    2625,
                    2630,
                    2633,
                    4682,
                    587,
                    2635,
                    4683,
                    4684,
                    2639,
                    593,
                    4690,
                    4691,
                    4692,
                    4693,
                    4694,
                    4695,
                    603,
                    2651,
                    2655,
                    611,
                    4719,
                    626,
                    633,
                    635,
                    637,
                    4746,
                    2699,
                    2700,
                    2702,
                    4750,
                    2704,
                    4751,
                    2706,
                    2708,
                    663,
                    664,
                    4761,
                    669,
                    672,
                    675,
                    4773,
                    678,
                    680,
                    4777,
                    4780,
                    4781,
                    4783,
                    4784,
                    715,
                    716,
                    717,
                    721,
                    2770,
                    2771,
                    2772,
                    725,
                    2776,
                    729,
                    730,
                    2798,
                    2802,
                    2811,
                    2812,
                    2814,
                    4867,
                    4868,
                    797,
                    2864,
                    2866,
                    4914,
                    2871,
                    2873,
                    829,
                    831,
                    833,
                    4929,
                    841,
                    4945,
                    850,
                    859,
                    860,
                    861,
                    862,
                    4974,
                    4979,
                    4984,
                    2937,
                    4985,
                    4986,
                    2942,
                    4990,
                    2945,
                    898,
                    2946,
                    900,
                    901,
                    4993,
                    2951,
                    2952,
                    905,
                    2958,
                    912,
                    916,
                    2964,
                    2966,
                    925,
                    926,
                    931,
                    2979,
                    933,
                    5027,
                    5031,
                    936,
                    5034,
                    2996,
                    5045,
                    2998,
                    3000,
                    3004,
                    3006,
                    3025,
                    3027,
                    985,
                    3039,
                    994,
                    995,
                    996,
                    998,
                    3048,
                    3049,
                    3051,
                    3052,
                    3054,
                    3061,
                    1016,
                    1017,
                    3067,
                    1020,
                    5115,
                    5121,
                    5123,
                    1028,
                    1029,
                    3089,
                    3090,
                    3091,
                    5146,
                    1052,
                    5148,
                    3116,
                    1076,
                    3124,
                    1078,
                    3125,
                    1080,
                    3126,
                    3127,
                    3133,
                    5181,
                    3137,
                    3139,
                    5200,
                    5201,
                    5203,
                    3159,
                    5224,
                    3178,
                    5226,
                    3180,
                    3182,
                    1136,
                    1137,
                    5232,
                    1140,
                    1151,
                    1155,
                    1161,
                    1162,
                    1174,
                    1185,
                    3237,
                    3257,
                    1212,
                    1213,
                    5313,
                    5314,
                    3284,
                    3287,
                    3288,
                    3295,
                    3299,
                    3303,
                    3304,
                    3313,
                    3315,
                    3317,
                    1273,
                    1279,
                    1288,
                    1290,
                    3339,
                    3341,
                    3350,
                    3373,
                    5421,
                    3376,
                    1344,
                    3402,
                    1360,
                    5457,
                    3410,
                    3413,
                    3417,
                    3422,
                    1380,
                    3429,
                    1382,
                    1386,
                    3437,
                    3440,
                    3447,
                    3448,
                    1406,
                    3454,
                    3455,
                    3458,
                    3459,
                    3460,
                    3464,
                    3467,
                    3469,
                    3476,
                    3482,
                    3486,
                    1444,
                    1445,
                    3492,
                    3495,
                    3509,
                    3517,
                    1471,
                    1474,
                    1475,
                    1477,
                    3528,
                    3529,
                    1482,
                    1483,
                    1484,
                    3531,
                    3546,
                    3564,
                    3570,
                    1533,
                    1535,
                    3583,
                    3585,
                    3586,
                    3589,
                    1547,
                    3603,
                    1564,
                    1581,
                    1598,
                    3647,
                    3650,
                    3652,
                    1615,
                    1622,
                    1654,
                    1689,
                    3753,
                    3755,
                    3756,
                    3762,
                    3763,
                    3766,
                    3769,
                    1724,
                    3772,
                    3774,
                    3777,
                    3780,
                    3781,
                    3783,
                    3784,
                    3787,
                    3789,
                    3791,
                    3793,
                    3794,
                    3804,
                    1767,
                    3830,
                    3835,
                    1810,
                    3871,
                    1850,
                    3915,
                    3921,
                    3928,
                    1893,
                    3964,
                    3966,
                    3967,
                    1926,
                    3977,
                    3982,
                    1957,
                    4009,
                    1963,
                    4011,
                    4016,
                    1970,
                    4022,
                    1977,
                    1983,
                    1984,
                    1985,
                    1998,
                    1999,
                    4049,
                    2002,
                    4055,
                    2008,
                    2009,
                    2018,
                    2019,
                    4094
                ],
                "is_object_dtype": [
                    4256,
                    901,
                    4234,
                    943,
                    114,
                    946,
                    340,
                    117,
                    4693,
                    122,
                    1850
                ],
                "ABCCategorical": [
                    114
                ],
                "left": [
                    3726,
                    3650,
                    3654,
                    3657,
                    3658,
                    3670,
                    3672,
                    3674,
                    3675,
                    3682,
                    3685,
                    3688,
                    3692,
                    240,
                    115,
                    116,
                    243,
                    246,
                    249
                ],
                "self._values": [
                    2176,
                    3589,
                    2630,
                    2536,
                    4268,
                    1137,
                    3921,
                    115,
                    5457,
                    3766,
                    797
                ],
                "other.dtype": [
                    2624,
                    4256,
                    4264,
                    3753,
                    2442,
                    115,
                    3447,
                    3583
                ],
                "op": [
                    129,
                    5314,
                    133,
                    135,
                    3054,
                    3056,
                    146,
                    116,
                    151,
                    120,
                    125
                ],
                "np.errstate": [
                    128,
                    124,
                    119
                ],
                "result": [
                    2560,
                    2563,
                    2567,
                    2576,
                    2580,
                    4132,
                    4133,
                    4134,
                    4135,
                    4136,
                    4137,
                    4139,
                    2635,
                    2639,
                    599,
                    600,
                    601,
                    604,
                    2151,
                    2155,
                    4716,
                    4719,
                    1137,
                    4721,
                    1140,
                    1141,
                    120,
                    633,
                    635,
                    636,
                    637,
                    125,
                    638,
                    129,
                    131,
                    132,
                    146,
                    147,
                    148,
                    149,
                    2205,
                    2206,
                    4389,
                    4392,
                    4394,
                    5421,
                    5423,
                    5424,
                    5427,
                    5429,
                    3925,
                    3928,
                    3929,
                    3439,
                    3443,
                    3444,
                    3445,
                    947,
                    952,
                    953,
                    954,
                    957,
                    958,
                    4549,
                    4550,
                    4551,
                    4552,
                    463,
                    464,
                    470,
                    471,
                    472,
                    1495,
                    474,
                    1497,
                    1499,
                    1500,
                    2541,
                    2544,
                    3570,
                    2548,
                    2549,
                    3575,
                    3576,
                    3577,
                    507,
                    508,
                    509
                ],
                "self.values": [
                    129,
                    4226,
                    916,
                    2328,
                    669,
                    4386,
                    675,
                    936,
                    4392,
                    5421,
                    1080,
                    1977,
                    5314,
                    3915,
                    717,
                    729,
                    120,
                    505,
                    3067,
                    125,
                    3967
                ],
                "ABCMultiIndex": [
                    4260,
                    4773,
                    4713,
                    3402,
                    3403,
                    176,
                    1273,
                    122,
                    2332,
                    3517,
                    3518
                ],
                "ops.comp_method_OBJECT_ARRAY": [
                    125
                ],
                "ops": [
                    133,
                    5287,
                    5289,
                    5290,
                    5294,
                    5299,
                    5302,
                    125
                ],
                "np.asarray": [
                    672,
                    129,
                    4130,
                    996,
                    2985,
                    3599,
                    5200,
                    401,
                    593,
                    4661,
                    2871,
                    345
                ],
                "is_bool_dtype": [
                    3969,
                    131,
                    600,
                    5042,
                    376
                ],
                "ops.invalid_comparison": [
                    133
                ],
                "name": [
                    1153,
                    1027,
                    1028,
                    1029,
                    390,
                    135,
                    136,
                    905,
                    398,
                    401,
                    1171,
                    2579,
                    1173,
                    2580,
                    151,
                    153,
                    923,
                    1180,
                    1181,
                    1182,
                    416,
                    290,
                    420,
                    5417,
                    298,
                    5418,
                    300,
                    307,
                    1077,
                    1078,
                    4151,
                    1080,
                    5431,
                    314,
                    1210,
                    1211,
                    5821,
                    1344,
                    833,
                    5824,
                    324,
                    330,
                    336,
                    4178,
                    4180,
                    471,
                    4187,
                    3804,
                    349,
                    3805,
                    2399,
                    2400,
                    2401,
                    4188,
                    5610,
                    5613,
                    1135,
                    1136,
                    1137,
                    4208,
                    371,
                    5616,
                    373,
                    502,
                    375,
                    5619,
                    507
                ],
                "op.__name__": [
                    151,
                    135
                ],
                "set_function_name": [
                    136,
                    153
                ],
                "cmp_method": [
                    136
                ],
                "cls": [
                    389,
                    5254,
                    5255,
                    136,
                    5256,
                    5257,
                    5258,
                    5259,
                    398,
                    5266,
                    403,
                    5267,
                    5268,
                    3990,
                    5269,
                    5270,
                    153,
                    5271,
                    5272,
                    5273,
                    5274,
                    5275,
                    5276,
                    5277,
                    5278,
                    290,
                    5279,
                    5286,
                    5287,
                    5288,
                    5289,
                    5290,
                    171,
                    5291,
                    5293,
                    174,
                    5294,
                    176,
                    5297,
                    5298,
                    5299,
                    5300,
                    181,
                    5301,
                    5302,
                    5434,
                    5437,
                    5446,
                    5319,
                    5320,
                    5321,
                    5322,
                    5447,
                    5326,
                    463,
                    5327,
                    5617,
                    632,
                    633,
                    5242,
                    5243,
                    5244,
                    5245,
                    5246,
                    5247
                ],
                "ABCDataFrame": [
                    2349,
                    141
                ],
                "ABCTimedeltaIndex": [
                    141,
                    4197
                ],
                "Series": [
                    2371,
                    2353,
                    146,
                    2358,
                    1080
                ],
                "index_arithmetic_method": [
                    153
                ],
                "_o_dtype": [
                    160,
                    5818
                ],
                "np.dtype": [
                    160,
                    5748,
                    5622
                ],
                "_Identity": [
                    161,
                    564
                ],
                "ABCPeriodIndex": [
                    171,
                    4198
                ],
                "_new_PeriodIndex": [
                    174
                ],
                "d": [
                    1984,
                    1985,
                    174,
                    177,
                    179,
                    181,
                    1983
                ],
                "d.pop": [
                    179
                ],
                "cls.__new__": [
                    181
                ],
                "IndexOpsMixin": [
                    184,
                    3833,
                    3923,
                    228
                ],
                "PandasObject": [
                    184,
                    227
                ],
                "_deprecations": [
                    226
                ],
                "FrozenSet": [
                    226
                ],
                "PandasObject._deprecations": [
                    227
                ],
                "IndexOpsMixin._deprecations": [
                    228
                ],
                "_join_precedence": [
                    233
                ],
                "libjoin.left_join_indexer_unique": [
                    240
                ],
                "libjoin": [
                    240,
                    249,
                    243,
                    246
                ],
                "right": [
                    3650,
                    3654,
                    3660,
                    240,
                    3666,
                    243,
                    246,
                    249
                ],
                "libjoin.left_join_indexer": [
                    243
                ],
                "libjoin.inner_join_indexer": [
                    246
                ],
                "libjoin.outer_join_indexer": [
                    249
                ],
                "_typ": [
                    251
                ],
                "_data": [
                    252,
                    4231
                ],
                "Union": [
                    3843,
                    252
                ],
                "_cache": [
                    253
                ],
                "Dict": [
                    253
                ],
                "Any": [
                    4057,
                    253
                ],
                "_id": [
                    254
                ],
                "_name": [
                    255
                ],
                "Label": [
                    5606,
                    454,
                    489,
                    5790,
                    255
                ],
                "_no_setting_name": [
                    259
                ],
                "_comparables": [
                    260
                ],
                "_attributes": [
                    261
                ],
                "_is_numeric_dtype": [
                    262
                ],
                "_can_hold_na": [
                    263
                ],
                "_defer_to_indexing": [
                    266
                ],
                "_infer_as_myclass": [
                    270
                ],
                "_engine_type": [
                    272
                ],
                "libindex.ObjectEngine": [
                    272
                ],
                "libindex": [
                    272
                ],
                "_supports_partial_string_indexing": [
                    275
                ],
                "_accessors": [
                    277
                ],
                "CachedAccessor": [
                    279
                ],
                "StringMethods": [
                    279
                ],
                "maybe_extract_name": [
                    1161,
                    290
                ],
                "data": [
                    5643,
                    5772,
                    5645,
                    5773,
                    5647,
                    400,
                    401,
                    402,
                    403,
                    5651,
                    405,
                    5781,
                    407,
                    408,
                    3991,
                    410,
                    5656,
                    5658,
                    5782,
                    5663,
                    416,
                    5665,
                    290,
                    419,
                    292,
                    5669,
                    294,
                    5671,
                    297,
                    298,
                    299,
                    300,
                    5673,
                    303,
                    307,
                    310,
                    314,
                    317,
                    5821,
                    5824,
                    324,
                    326,
                    5702,
                    5703,
                    330,
                    332,
                    336,
                    339,
                    5715,
                    5716,
                    343,
                    345,
                    348,
                    349,
                    860,
                    5726,
                    352,
                    5727,
                    867,
                    868,
                    870,
                    5735,
                    5736,
                    5739,
                    5740,
                    366,
                    367,
                    370,
                    371,
                    372,
                    373,
                    374,
                    375,
                    376,
                    377,
                    379
                ],
                "ABCPandasArray": [
                    292
                ],
                "data.to_numpy": [
                    294
                ],
                "RangeIndex": [
                    297,
                    298,
                    5603,
                    300
                ],
                "copy": [
                    5645,
                    401,
                    664,
                    5656,
                    5658,
                    669,
                    672,
                    675,
                    420,
                    5539,
                    5543,
                    5671,
                    298,
                    307,
                    314,
                    5565,
                    5568,
                    5824,
                    324,
                    330,
                    336,
                    349,
                    366,
                    371,
                    373,
                    375,
                    383
                ],
                "dtype": [
                    386,
                    3973,
                    5768,
                    5642,
                    3980,
                    5645,
                    3982,
                    401,
                    5651,
                    663,
                    5656,
                    666,
                    669,
                    671,
                    672,
                    5663,
                    5664,
                    675,
                    420,
                    5669,
                    678,
                    5671,
                    680,
                    4009,
                    298,
                    300,
                    4014,
                    303,
                    4016,
                    307,
                    310,
                    314,
                    5818,
                    318,
                    5824,
                    324,
                    836,
                    326,
                    837,
                    330,
                    332,
                    336,
                    593,
                    339,
                    340,
                    342,
                    343,
                    360,
                    366,
                    367,
                    371,
                    373,
                    375,
                    3966
                ],
                "RangeIndex.from_range": [
                    300
                ],
                "is_categorical_dtype": [
                    666,
                    940,
                    303
                ],
                "_maybe_asobject": [
                    324,
                    330,
                    336,
                    307,
                    314
                ],
                "CategoricalIndex": [
                    307,
                    669
                ],
                "kwargs": [
                    390,
                    393,
                    394,
                    525,
                    527,
                    401,
                    416,
                    420,
                    933,
                    307,
                    314,
                    5821,
                    319,
                    5824,
                    324,
                    712,
                    713,
                    330,
                    841,
                    4552,
                    4683,
                    4684,
                    336,
                    988,
                    349
                ],
                "is_interval_dtype": [
                    310
                ],
                "IntervalIndex": [
                    314
                ],
                "is_datetime64_any_dtype": [
                    317,
                    318
                ],
                "DatetimeIndex": [
                    324
                ],
                "is_timedelta64_dtype": [
                    326
                ],
                "TimedeltaIndex": [
                    330
                ],
                "is_period_dtype": [
                    332,
                    4229
                ],
                "PeriodIndex": [
                    336
                ],
                "is_extension_array_dtype": [
                    3585,
                    4264,
                    3762,
                    339,
                    671
                ],
                "ea_cls": [
                    342,
                    343
                ],
                "dtype.construct_array_type": [
                    342
                ],
                "ea_cls._from_sequence": [
                    343
                ],
                "data.astype": [
                    5669,
                    5772,
                    5781,
                    377,
                    348,
                    5663
                ],
                "_maybe_cast_with_dtype": [
                    366
                ],
                "data.dtype": [
                    5703,
                    5736,
                    5740,
                    367,
                    370,
                    372,
                    5716,
                    374,
                    376,
                    5727
                ],
                "is_signed_integer_dtype": [
                    370
                ],
                "Int64Index": [
                    371
                ],
                "is_unsigned_integer_dtype": [
                    5768,
                    372
                ],
                "UInt64Index": [
                    373
                ],
                "is_float_dtype": [
                    5664,
                    374
                ],
                "Float64Index": [
                    375
                ],
                "data.dtype.type": [
                    376
                ],
                "np.bool": [
                    376
                ],
                "subarr": [
                    384,
                    5698,
                    387,
                    419,
                    420,
                    5702,
                    5735,
                    395,
                    5707,
                    5739,
                    398,
                    5711,
                    5744,
                    5715,
                    377,
                    379,
                    5726
                ],
                "com.asarray_tuplesafe": [
                    379,
                    419,
                    3198
                ],
                "com": [
                    4129,
                    4930,
                    419,
                    3144,
                    5225,
                    3509,
                    3510,
                    4121,
                    379,
                    3198
                ],
                "subarr.copy": [
                    384
                ],
                "new_data": [
                    387,
                    390
                ],
                "new_dtype": [
                    387,
                    388,
                    390
                ],
                "_maybe_cast_data_without_dtype": [
                    387
                ],
                "subarr.ndim": [
                    395
                ],
                "cls._simple_new": [
                    398
                ],
                "is_scalar": [
                    4034,
                    4133,
                    402,
                    4563,
                    4917,
                    4919,
                    4120
                ],
                "cls._scalar_data_error": [
                    403
                ],
                "tupleize_cols": [
                    405
                ],
                "is_list_like": [
                    1282,
                    1284,
                    1203,
                    1276,
                    405,
                    2805,
                    1176,
                    1180,
                    1279
                ],
                "is_iterator": [
                    5545,
                    407
                ],
                "e": [
                    410
                ],
                "MultiIndex.from_tuples": [
                    4756,
                    415
                ],
                "MultiIndex": [
                    1504,
                    3652,
                    5503,
                    415,
                    3723,
                    4750,
                    4756,
                    5559,
                    3550,
                    3647
                ],
                "kwargs.get": [
                    416
                ],
                "values": [
                    4226,
                    3972,
                    4228,
                    4868,
                    3975,
                    4231,
                    3977,
                    4232,
                    3982,
                    527,
                    532,
                    3350,
                    535,
                    2328,
                    2331,
                    2334,
                    2339,
                    2343,
                    936,
                    940,
                    941,
                    943,
                    944,
                    946,
                    947,
                    1203,
                    1205,
                    950,
                    1206,
                    1210,
                    957,
                    1213,
                    461,
                    464,
                    2002,
                    2003,
                    2004,
                    3285,
                    470,
                    3287,
                    3288,
                    985,
                    987,
                    988,
                    996,
                    998,
                    1000,
                    1001,
                    4713,
                    4714,
                    748,
                    4715,
                    4716,
                    751,
                    503,
                    504,
                    505,
                    507,
                    3967
                ],
                "object.__new__": [
                    463
                ],
                "result._data": [
                    464
                ],
                "result._index_data": [
                    470
                ],
                "result._name": [
                    1499,
                    471
                ],
                "result._cache": [
                    472,
                    508
                ],
                "result._reset_identity": [
                    474
                ],
                "cache_readonly": [
                    1993,
                    1965,
                    1617,
                    1972,
                    2006,
                    3832,
                    570,
                    476,
                    2013,
                    606
                ],
                "k": [
                    4719,
                    863,
                    487
                ],
                "self._attributes": [
                    487
                ],
                "no_default": [
                    489,
                    502
                ],
                "self.name": [
                    925,
                    669,
                    926,
                    1185,
                    680,
                    4784,
                    1078,
                    4178,
                    3288,
                    2400,
                    1380,
                    1382,
                    2155,
                    1136,
                    3315,
                    3317,
                    502,
                    2811,
                    2812
                ],
                "cache": [
                    508,
                    503
                ],
                "self._cache.copy": [
                    503
                ],
                "self._cache": [
                    503
                ],
                "self._simple_new": [
                    3288,
                    507
                ],
                "attributes": [
                    4746,
                    524,
                    525,
                    526,
                    4752,
                    529,
                    4753,
                    532,
                    4758,
                    535,
                    4761,
                    4763
                ],
                "self._get_attributes_dict": [
                    1984,
                    5313,
                    4746,
                    524,
                    2798,
                    4207,
                    4016,
                    603
                ],
                "attributes.update": [
                    525
                ],
                "self.dtype": [
                    2624,
                    3585,
                    4256,
                    4229,
                    2951,
                    5224,
                    3753,
                    2442,
                    3583,
                    4009,
                    529,
                    3762,
                    4693,
                    663,
                    4761,
                    1850,
                    3966,
                    3447
                ],
                "self._infer_as_myclass": [
                    530
                ],
                "self._constructor": [
                    532
                ],
                "self._id": [
                    564,
                    637,
                    558
                ],
                "self._engine.clear_mapping": [
                    568
                ],
                "self._engine": [
                    2979,
                    1581,
                    2866,
                    3928,
                    4627,
                    1622,
                    2998,
                    568,
                    3000,
                    4667,
                    1564,
                    4094
                ],
                "target_values": [
                    576,
                    577,
                    2994,
                    3002,
                    3006
                ],
                "self._get_engine_target": [
                    576
                ],
                "self._engine_type": [
                    577
                ],
                "self._data": [
                    3586,
                    611,
                    587,
                    2704,
                    593,
                    3763,
                    3871,
                    4117,
                    3830,
                    3287,
                    5181,
                    633,
                    3835,
                    829,
                    1983
                ],
                "lib.item_from_zerodim": [
                    599
                ],
                "lib": [
                    5665,
                    5698,
                    5643,
                    944,
                    1970,
                    5043,
                    5554,
                    5045,
                    599,
                    600,
                    3645,
                    3679
                ],
                "lib.is_scalar": [
                    600
                ],
                "np.ndim": [
                    600,
                    4134
                ],
                "attrs": [
                    5313,
                    5314,
                    603,
                    604,
                    861,
                    863
                ],
                "self._data.dtype": [
                    611
                ],
                "self._ndarray_values.ravel": [
                    626
                ],
                "self._ndarray_values": [
                    626
                ],
                "order": [
                    626
                ],
                "self._data.view": [
                    633,
                    3830
                ],
                "self._shallow_copy": [
                    2176,
                    2177,
                    4232,
                    1290,
                    2704,
                    2580,
                    4118,
                    797,
                    2206,
                    2343,
                    1076,
                    829,
                    5181,
                    831,
                    730,
                    3422,
                    2655,
                    2401,
                    2156,
                    635
                ],
                "result._id": [
                    637
                ],
                "is_dtype_equal": [
                    2624,
                    2951,
                    663,
                    2442,
                    3447,
                    5818
                ],
                "self.copy": [
                    664,
                    841,
                    850
                ],
                "casted": [
                    680,
                    675
                ],
                "self.values.astype": [
                    675
                ],
                "err": [
                    679,
                    2570,
                    4235,
                    5037,
                    2868
                ],
                "nv.validate_take": [
                    713
                ],
                "nv": [
                    713,
                    796
                ],
                "indices": [
                    738,
                    742,
                    714,
                    748,
                    718,
                    751,
                    729
                ],
                "ensure_platform_int": [
                    3745,
                    738,
                    2981,
                    714,
                    3596,
                    3597,
                    3347,
                    3797,
                    3798,
                    795,
                    4668,
                    3742,
                    2943
                ],
                "self._can_hold_na": [
                    2008,
                    2018,
                    715,
                    1998
                ],
                "taken": [
                    2657,
                    2658,
                    747,
                    716,
                    751,
                    752,
                    2650,
                    729,
                    730,
                    2654,
                    2655
                ],
                "self._assert_take_fillable": [
                    716
                ],
                "allow_fill": [
                    748,
                    724,
                    741,
                    719
                ],
                "fill_value": [
                    720,
                    724,
                    741
                ],
                "self._na_value": [
                    721,
                    3964,
                    4351
                ],
                "cls_name": [
                    725,
                    727
                ],
                "self.values.take": [
                    729
                ],
                "Appender": [
                    710,
                    5418,
                    5419,
                    4653,
                    2930,
                    3923,
                    3833,
                    793
                ],
                "np.nan": [
                    1497,
                    733,
                    1990
                ],
                "algos.take": [
                    747
                ],
                "algos": [
                    3681,
                    4868,
                    2567,
                    2794,
                    747,
                    3731,
                    2647,
                    2556,
                    2717,
                    2654,
                    2559
                ],
                "na_value": [
                    748
                ],
                "values.take": [
                    751
                ],
                "repeats": [
                    795,
                    797
                ],
                "nv.validate_repeat": [
                    796
                ],
                "axis": [
                    796
                ],
                "self._values.repeat": [
                    797
                ],
                "deep": [
                    833,
                    3925,
                    1174,
                    3928,
                    828
                ],
                "new_index": [
                    834,
                    837,
                    838,
                    3376,
                    3377,
                    829,
                    831
                ],
                "self._data.copy": [
                    829
                ],
                "names": [
                    1282,
                    1283,
                    1291,
                    4751,
                    4753,
                    1171,
                    4755,
                    1173,
                    4756,
                    1175,
                    1176,
                    5500,
                    1178,
                    5503,
                    1215,
                    833,
                    834,
                    4177,
                    4178,
                    3545,
                    3551,
                    5499,
                    1276,
                    5501,
                    1279
                ],
                "self._validate_names": [
                    833
                ],
                "new_index.set_names": [
                    834
                ],
                "new_index.astype": [
                    837
                ],
                "klass_name": [
                    859,
                    870
                ],
                "self._format_data": [
                    860
                ],
                "self._format_attrs": [
                    861
                ],
                "space": [
                    864,
                    862
                ],
                "self._format_space": [
                    862
                ],
                "attrs_str": [
                    864,
                    863
                ],
                "v": [
                    3112,
                    4719,
                    863
                ],
                "prepr": [
                    864,
                    870
                ],
                "join": [
                    864
                ],
                "res": [
                    870,
                    872,
                    5772,
                    5773,
                    5774,
                    5781,
                    5782,
                    5783
                ],
                "default_pprint": [
                    889
                ],
                "is_justify": [
                    896,
                    905,
                    899,
                    902
                ],
                "self.inferred_type": [
                    898,
                    900,
                    1893,
                    1926,
                    1767,
                    1957,
                    1963,
                    1810,
                    4690,
                    4692,
                    4055,
                    1689,
                    1724
                ],
                "self.categories": [
                    901
                ],
                "format_object_summary": [
                    904
                ],
                "self._formatter_func": [
                    905
                ],
                "format_object_attrs": [
                    912
                ],
                "header": [
                    931,
                    933,
                    922,
                    924,
                    958
                ],
                "header.append": [
                    924
                ],
                "pprint_thing": [
                    947,
                    925
                ],
                "formatter": [
                    930,
                    931
                ],
                "self.map": [
                    931,
                    1535
                ],
                "self._format_with_header": [
                    933
                ],
                "values.dtype": [
                    946,
                    940,
                    943
                ],
                "np.array": [
                    998,
                    4551,
                    5671,
                    941,
                    952,
                    5658,
                    2011,
                    2365
                ],
                "lib.maybe_convert_objects": [
                    944
                ],
                "x": [
                    5591,
                    4776,
                    4777,
                    5322,
                    4203,
                    4780,
                    4783,
                    4210,
                    3443,
                    947,
                    2548,
                    3444,
                    5590
                ],
                "mask": [
                    3713,
                    4228,
                    3721,
                    4238,
                    3600,
                    3601,
                    4386,
                    4389,
                    4391,
                    950,
                    951,
                    953,
                    1494,
                    1496,
                    1497,
                    994,
                    1000,
                    5227,
                    5228,
                    3693,
                    3694,
                    3695,
                    3696,
                    5230,
                    5231,
                    3710,
                    3711
                ],
                "isna": [
                    994,
                    2339,
                    3977,
                    4011,
                    1999,
                    5647,
                    950,
                    2078
                ],
                "mask.any": [
                    1496,
                    5228,
                    951
                ],
                "na_rep": [
                    1000,
                    953
                ],
                "result.tolist": [
                    954
                ],
                "_trim_front": [
                    957
                ],
                "format_array": [
                    957
                ],
                "slicer": [
                    986,
                    987
                ],
                "values._format_native_types": [
                    988
                ],
                "self.is_object": [
                    4049,
                    995,
                    4150
                ],
                "quoting": [
                    995
                ],
                "astype": [
                    2425,
                    2426,
                    996
                ],
                "head": [
                    1017,
                    1018,
                    1019,
                    1023
                ],
                "head.format": [
                    1019
                ],
                "tail": [
                    1020,
                    1021,
                    1022,
                    1023
                ],
                "tail.format": [
                    1022
                ],
                "index_summary": [
                    1025,
                    1029,
                    1023
                ],
                "index": [
                    1139,
                    1075,
                    1076,
                    1080,
                    5821,
                    5822
                ],
                "self.values.copy": [
                    1080,
                    4226
                ],
                "DataFrame": [
                    1137
                ],
                "self._values.copy": [
                    1137
                ],
                "result.index": [
                    1140
                ],
                "self._name": [
                    1162,
                    1213,
                    1151
                ],
                "self._no_setting_name": [
                    1155
                ],
                "value": [
                    4034,
                    4035,
                    4228,
                    2149,
                    2151,
                    1161,
                    1162,
                    4238,
                    4628,
                    4629,
                    4028
                ],
                "name.setter": [
                    1153
                ],
                "deepcopy": [
                    1174
                ],
                "self.names": [
                    3529,
                    1484,
                    4781,
                    4751,
                    3410,
                    3509,
                    1174
                ],
                "FrozenList": [
                    1185
                ],
                "is_hashable": [
                    5616,
                    1211
                ],
                "_set_names": [
                    1215
                ],
                "_get_names": [
                    1215
                ],
                "level": [
                    4866,
                    3715,
                    1284,
                    1285,
                    4867,
                    1291,
                    3732,
                    3735,
                    2203,
                    2204,
                    1444,
                    4774,
                    4776,
                    1468,
                    1469,
                    1471,
                    1473,
                    1475,
                    1477,
                    3657,
                    3658,
                    3407,
                    3416,
                    1370,
                    1371,
                    3292,
                    3418,
                    1374,
                    3674,
                    1376,
                    3296,
                    1378,
                    3682,
                    1380,
                    1382,
                    3686,
                    3689,
                    1386,
                    3440,
                    3569,
                    3571,
                    3699,
                    1273,
                    1531,
                    1276,
                    1279
                ],
                "self.nlevels": [
                    1475,
                    1477,
                    1279
                ],
                "inplace": [
                    1344,
                    1292,
                    1287
                ],
                "idx": [
                    1288,
                    1290,
                    1291,
                    1293,
                    5202,
                    5203
                ],
                "idx._set_names": [
                    1291
                ],
                "self.set_names": [
                    1344
                ],
                "self._validate_index_level": [
                    2204,
                    1386,
                    4867,
                    1444
                ],
                "self.sort_values": [
                    1406
                ],
                "ascending": [
                    4440,
                    1406
                ],
                "get_level_values": [
                    1447
                ],
                "_get_level_values": [
                    1447
                ],
                "levnums": [
                    1486,
                    1471
                ],
                "self._get_level_number": [
                    1471
                ],
                "lev": [
                    1471
                ],
                "new_levels": [
                    1505,
                    3688,
                    3689,
                    1482,
                    3724,
                    1487,
                    1491,
                    1495
                ],
                "self.levels": [
                    1482
                ],
                "new_codes": [
                    3713,
                    1506,
                    3715,
                    3716,
                    3685,
                    3686,
                    1483,
                    3725,
                    3695,
                    1488,
                    1494,
                    1495,
                    3707
                ],
                "self.codes": [
                    1483
                ],
                "new_names": [
                    1489,
                    1499,
                    1484,
                    1507
                ],
                "i": [
                    4776,
                    1486,
                    1487,
                    1488,
                    1489
                ],
                "new_levels.pop": [
                    1487
                ],
                "new_codes.pop": [
                    1488
                ],
                "new_names.pop": [
                    1489
                ],
                "take": [
                    4389,
                    1495
                ],
                "result.putmask": [
                    1497
                ],
                "mapper": [
                    4744,
                    1532,
                    1535
                ],
                "grouper": [
                    1537,
                    1533,
                    1535
                ],
                "self.is_monotonic_increasing": [
                    1547,
                    3054,
                    2996,
                    4984,
                    1598
                ],
                "self._engine.is_monotonic_increasing": [
                    1564
                ],
                "self._engine.is_monotonic_decreasing": [
                    1581
                ],
                "self.is_unique": [
                    3454,
                    3458,
                    3303,
                    4682,
                    2958,
                    1615,
                    3769,
                    2325,
                    1654,
                    2552,
                    3257,
                    2330,
                    1598
                ],
                "self.is_monotonic_decreasing": [
                    4986,
                    1615
                ],
                "self._engine.is_unique": [
                    1622
                ],
                "lib.infer_dtype": [
                    5665,
                    1970,
                    5643,
                    5698
                ],
                "is_datetime_array": [
                    1977
                ],
                "ensure_object": [
                    1977
                ],
                "d.update": [
                    1984
                ],
                "_new_Index": [
                    1985
                ],
                "_na_value": [
                    1990
                ],
                "np.empty": [
                    3353,
                    2002,
                    3630
                ],
                "np.bool_": [
                    2002
                ],
                "values.fill": [
                    2003
                ],
                "self._isnan.nonzero": [
                    2009
                ],
                "self._isnan": [
                    2176,
                    2019,
                    2151,
                    2009,
                    2076
                ],
                "np.int64": [
                    2011
                ],
                "self._isnan.any": [
                    2019
                ],
                "isnull": [
                    2078
                ],
                "self.isna": [
                    2122
                ],
                "notnull": [
                    2124
                ],
                "notna": [
                    2124
                ],
                "self._assert_can_do_op": [
                    2149
                ],
                "self.hasnans": [
                    2338,
                    2150,
                    2175
                ],
                "self.putmask": [
                    2151
                ],
                "downcast": [
                    2152
                ],
                "how": [
                    3456,
                    3461,
                    3465,
                    3593,
                    3470,
                    3475,
                    3477,
                    3479,
                    3483,
                    3756,
                    2172,
                    3771,
                    3775,
                    3779,
                    3782,
                    3655,
                    3786,
                    3788,
                    3790,
                    3792,
                    3537,
                    3666,
                    3413,
                    3418,
                    3421,
                    3429,
                    3438,
                    3567,
                    3440,
                    3571,
                    3450,
                    3452,
                    2173
                ],
                "unique": [
                    2205
                ],
                "drop_duplicates": [
                    2254
                ],
                "keep": [
                    2254,
                    2310
                ],
                "duplicated": [
                    2310
                ],
                "dropna": [
                    2336,
                    2325
                ],
                "self.unique": [
                    2331
                ],
                "values._data": [
                    2334
                ],
                "self.intersection": [
                    3482,
                    2374
                ],
                "self.union": [
                    2377,
                    3486
                ],
                "self.symmetric_difference": [
                    2380
                ],
                "__bool__": [
                    2388
                ],
                "__nonzero__": [
                    2388
                ],
                "get_op_result_name": [
                    2579,
                    2651,
                    3804,
                    2814,
                    2399
                ],
                "this": [
                    2778,
                    2625,
                    2721,
                    2627,
                    2785,
                    3448,
                    2952,
                    2954,
                    3450,
                    2776,
                    2708,
                    2710,
                    2423,
                    2714,
                    2713,
                    2426,
                    2783
                ],
                "self.astype": [
                    2625,
                    2952,
                    4238,
                    4694,
                    2423,
                    3448
                ],
                "Index.union": [
                    2426
                ],
                "sort": [
                    3488,
                    2627,
                    2565,
                    2502,
                    2792,
                    2506,
                    2539,
                    2508,
                    2445,
                    2699,
                    2448,
                    2770,
                    2617,
                    2426,
                    2715,
                    2653
                ],
                "self._validate_sort_keyword": [
                    2617,
                    2770,
                    2699,
                    2502
                ],
                "self._assert_can_do_setop": [
                    2618,
                    2771,
                    2700,
                    2503
                ],
                "self._is_compatible_with_other": [
                    2505
                ],
                "self._union_incompatible_dtypes": [
                    2506
                ],
                "self._union": [
                    2508
                ],
                "self.equals": [
                    2529,
                    3299,
                    3755,
                    2702,
                    4282,
                    2621
                ],
                "self._get_reconciled_name_object": [
                    2530,
                    2622
                ],
                "other._get_reconciled_name_object": [
                    2533
                ],
                "lvals": [
                    2560,
                    2563,
                    2630,
                    2536,
                    2635,
                    2541,
                    2544,
                    2642,
                    2547,
                    2647
                ],
                "rvals": [
                    2631,
                    2537,
                    2635,
                    2541,
                    2642,
                    2548,
                    2647,
                    2559
                ],
                "other._values": [
                    2789,
                    3590,
                    2631,
                    2537,
                    4268,
                    3767
                ],
                "self.is_monotonic": [
                    3467,
                    2633,
                    2539,
                    3459
                ],
                "other.is_monotonic": [
                    3467,
                    2633,
                    2539,
                    3459
                ],
                "self._outer_indexer": [
                    3793,
                    2541,
                    3783
                ],
                "value_set": [
                    2547,
                    2548
                ],
                "result.extend": [
                    2548
                ],
                "_values": [
                    5201,
                    2549
                ],
                "indexer": [
                    3339,
                    3340,
                    3341,
                    3345,
                    2964,
                    2710,
                    2711,
                    2966,
                    2713,
                    3350,
                    3353,
                    3361,
                    2979,
                    2981,
                    3370,
                    3373,
                    3377,
                    2873,
                    2874,
                    3002,
                    2876,
                    3004,
                    3006,
                    3007,
                    3257,
                    4667,
                    4668,
                    3146,
                    3068,
                    4684,
                    4685,
                    3025,
                    2642,
                    2643,
                    3026,
                    3027,
                    3157,
                    2647,
                    2648,
                    3033,
                    2778,
                    2650,
                    3159,
                    2781,
                    3161,
                    3039,
                    3040,
                    3295,
                    2788,
                    3300,
                    3304,
                    5226,
                    5227,
                    3182,
                    3055,
                    3183,
                    3313,
                    5231,
                    5232,
                    3061,
                    3062,
                    3319,
                    2553,
                    2554,
                    3067,
                    2556,
                    3069,
                    2558,
                    2559
                ],
                "self.get_indexer": [
                    3495,
                    3048,
                    3049,
                    3304,
                    4683,
                    5226,
                    3025,
                    2873,
                    2553
                ],
                "nonzero": [
                    2788,
                    2643,
                    2711,
                    2554,
                    3643,
                    2781
                ],
                "algos.unique1d": [
                    2556,
                    2647
                ],
                "self.get_indexer_non_unique": [
                    3313,
                    3339,
                    2556,
                    4684
                ],
                "other_diff": [
                    2560,
                    2559
                ],
                "algos.take_nd": [
                    3681,
                    3731,
                    2559
                ],
                "concat_compat": [
                    2560,
                    2791
                ],
                "algos.safe_sort": [
                    2794,
                    2717,
                    2654,
                    2567
                ],
                "warnings.warn": [
                    2569,
                    4619,
                    3150
                ],
                "warnings": [
                    2569,
                    4619,
                    3150
                ],
                "self._wrap_setop_result": [
                    2576,
                    2639
                ],
                "ensure_index": [
                    3401,
                    3338,
                    4655,
                    2935,
                    3290,
                    2619
                ],
                "other.astype": [
                    3449,
                    2626,
                    4694
                ],
                "this.intersection": [
                    2627
                ],
                "self._inner_indexer": [
                    2635,
                    3780,
                    3791
                ],
                "get_indexer": [
                    2642
                ],
                "indexer.take": [
                    2643,
                    2781,
                    2711
                ],
                "InvalidIndexError": [
                    2644,
                    4566,
                    2959
                ],
                "IncompatibleFrequency": [
                    2644,
                    5741
                ],
                "get_indexer_non_unique": [
                    2647
                ],
                "other.take": [
                    2650
                ],
                "res_name": [
                    2657,
                    2651,
                    2655
                ],
                "taken.values": [
                    2654
                ],
                "taken.name": [
                    2657
                ],
                "result_name": [
                    2721,
                    2799,
                    2706,
                    2773,
                    2774,
                    2812,
                    2814,
                    2815
                ],
                "self._convert_can_do_setop": [
                    2706,
                    2772
                ],
                "self._get_unique_index": [
                    2776,
                    2708
                ],
                "this.get_indexer": [
                    2778,
                    2710,
                    2954
                ],
                "label_diff": [
                    2713,
                    2714
                ],
                "np.setdiff1d": [
                    2713,
                    2782
                ],
                "np.arange": [
                    3361,
                    3362,
                    4389,
                    3692,
                    3373,
                    3345,
                    2713,
                    2783
                ],
                "this.size": [
                    2713,
                    2783
                ],
                "the_diff": [
                    2721,
                    2791,
                    2794,
                    2802,
                    2714,
                    2717
                ],
                "this.values.take": [
                    2714
                ],
                "this.values": [
                    2714
                ],
                "this._shallow_copy": [
                    2721
                ],
                "result_name_update": [
                    2772,
                    2774
                ],
                "other._get_unique_index": [
                    2777
                ],
                "common_indexer": [
                    2781,
                    2783
                ],
                "left_indexer": [
                    3715,
                    3716,
                    3721,
                    3738,
                    3741,
                    3742,
                    3747,
                    3671,
                    3674,
                    3675,
                    2782,
                    2785,
                    3048,
                    3051,
                    3692,
                    3696,
                    3057,
                    3701,
                    3706,
                    3707
                ],
                "left_diff": [
                    2785,
                    2791
                ],
                "this._values.take": [
                    2785
                ],
                "this._values": [
                    2785
                ],
                "right_indexer": [
                    3744,
                    3745,
                    3747,
                    2788,
                    2789,
                    3049,
                    3052,
                    3056,
                    3058,
                    3731,
                    3735,
                    3738
                ],
                "right_diff": [
                    2789,
                    2791
                ],
                "other._values.take": [
                    2789
                ],
                "attribs": [
                    2798,
                    2799,
                    2800,
                    2801,
                    2802,
                    4207,
                    4208,
                    4212
                ],
                "self._shallow_copy_with_infer": [
                    3982,
                    3376,
                    2802,
                    5203,
                    4212
                ],
                "method": [
                    5597,
                    2948,
                    3305,
                    2858,
                    2955,
                    3018,
                    3308,
                    3022,
                    2963,
                    2964,
                    2965,
                    2934,
                    2999,
                    2873,
                    5596,
                    3004,
                    3293
                ],
                "tolerance": [
                    2948,
                    2955,
                    2964,
                    2966,
                    2968,
                    2985,
                    2986,
                    2859,
                    2988,
                    2870,
                    2871,
                    2873,
                    3005,
                    3006,
                    3305,
                    3060,
                    3061,
                    2936,
                    2937,
                    3068
                ],
                "casted_key": [
                    2864,
                    2866
                ],
                "self._maybe_cast_indexer": [
                    2864
                ],
                "key": [
                    3082,
                    3089,
                    3090,
                    3091,
                    4627,
                    4120,
                    4121,
                    4122,
                    4124,
                    4127,
                    4129,
                    4130,
                    3108,
                    4132,
                    3238,
                    2864,
                    2868,
                    3125,
                    3126,
                    2871,
                    3127,
                    2873,
                    3128,
                    2878,
                    4930,
                    4931,
                    3144,
                    3146,
                    4940,
                    4942,
                    4945,
                    4563,
                    3157,
                    4566,
                    4574,
                    4578,
                    4581,
                    4585,
                    4092,
                    4094
                ],
                "self._engine.get_loc": [
                    2866,
                    4627
                ],
                "self._convert_tolerance": [
                    2937,
                    2871
                ],
                "indexer.ndim": [
                    2874
                ],
                "indexer.size": [
                    2874
                ],
                "loc": [
                    4353,
                    4354,
                    4355,
                    4605,
                    4581,
                    4585,
                    2877,
                    4607,
                    4604,
                    5202,
                    4627,
                    5181,
                    4629,
                    2876,
                    4349,
                    4574,
                    2879
                ],
                "indexer.item": [
                    2876
                ],
                "missing.clean_reindex_fill_method": [
                    2934
                ],
                "missing": [
                    3339,
                    3344,
                    3313,
                    3347,
                    3348,
                    2934,
                    4667,
                    4668
                ],
                "target": [
                    2945,
                    2946,
                    2951,
                    2953,
                    3338,
                    2955,
                    3339,
                    2964,
                    3348,
                    2966,
                    3358,
                    2979,
                    2986,
                    4655,
                    4656,
                    4657,
                    2994,
                    2996,
                    4660,
                    4661,
                    4662,
                    4663,
                    4665,
                    3319,
                    3004,
                    4683,
                    4684,
                    3278,
                    3025,
                    3281,
                    3027,
                    3283,
                    3288,
                    3290,
                    3296,
                    3299,
                    3048,
                    3049,
                    3305,
                    3051,
                    3052,
                    3313,
                    3315,
                    3316,
                    3061,
                    3317,
                    2935,
                    2937,
                    3067,
                    2942,
                    2943
                ],
                "target.is_boolean": [
                    2942
                ],
                "self.is_numeric": [
                    2942
                ],
                "np.repeat": [
                    3424,
                    3432,
                    2943
                ],
                "target.size": [
                    2986,
                    2943
                ],
                "pself": [
                    2945,
                    2946,
                    2947,
                    4656,
                    4657,
                    4658
                ],
                "ptarget": [
                    2945,
                    2946,
                    2948,
                    4656,
                    4657,
                    4658
                ],
                "self._maybe_promote": [
                    4656,
                    2945
                ],
                "pself.get_indexer": [
                    2947
                ],
                "limit": [
                    2948,
                    3016,
                    3048,
                    3049,
                    2955,
                    3305,
                    3308,
                    2964,
                    2966,
                    3002,
                    3004,
                    2973
                ],
                "target.dtype": [
                    2951
                ],
                "target.astype": [
                    2953
                ],
                "self._get_fill_indexer": [
                    2964
                ],
                "self._get_nearest_indexer": [
                    2966
                ],
                "self._engine.get_indexer": [
                    2979
                ],
                "target._get_engine_target": [
                    4665,
                    2994,
                    2979
                ],
                "tolerance.size": [
                    2986
                ],
                "target.is_monotonic_increasing": [
                    2996
                ],
                "engine_method": [
                    3002,
                    2997
                ],
                "self._engine.get_pad_indexer": [
                    2998
                ],
                "self._engine.get_backfill_indexer": [
                    3000
                ],
                "self._get_fill_indexer_searchsorted": [
                    3004
                ],
                "self._filter_indexer_tolerance": [
                    3061,
                    3006
                ],
                "side": [
                    5058,
                    5027,
                    5034,
                    3022,
                    3027,
                    3028,
                    5048,
                    4985,
                    5017,
                    5020,
                    5053,
                    4991
                ],
                "nonexact": [
                    3033,
                    3026,
                    3027
                ],
                "self._searchsorted_monotonic": [
                    5034,
                    3027
                ],
                "left_distances": [
                    3056,
                    3051
                ],
                "np.abs": [
                    5321,
                    3051,
                    3052
                ],
                "right_distances": [
                    3056,
                    3052
                ],
                "operator.lt": [
                    5244,
                    3054
                ],
                "operator": [
                    5286,
                    5319,
                    5288,
                    5320,
                    5291,
                    5293,
                    3054,
                    5297,
                    5298,
                    5301,
                    5242,
                    5243,
                    5244,
                    5245,
                    5246,
                    5247
                ],
                "operator.le": [
                    5246,
                    3054
                ],
                "np.where": [
                    3975,
                    4387,
                    3068,
                    3055
                ],
                "distance": [
                    3067,
                    3068
                ],
                "self._validate_indexer": [
                    3089,
                    3090,
                    3091,
                    3125,
                    3126,
                    3127
                ],
                "key.start": [
                    3089,
                    3108,
                    3125
                ],
                "key.stop": [
                    3090,
                    3108,
                    3126
                ],
                "key.step": [
                    3091,
                    3108,
                    3127
                ],
                "kind": [
                    3105,
                    5121,
                    5027,
                    4967,
                    4938,
                    3148,
                    3119,
                    5015,
                    4914,
                    3159,
                    4055,
                    5115
                ],
                "start": [
                    3136,
                    3137,
                    3108,
                    3114,
                    5099,
                    5103,
                    5105,
                    4914,
                    3159,
                    5114,
                    5115
                ],
                "stop": [
                    3138,
                    3139,
                    3108,
                    3114,
                    3159
                ],
                "step": [
                    3108,
                    5095,
                    3114,
                    4914,
                    3159,
                    4922
                ],
                "is_integer": [
                    4578,
                    3112,
                    4942,
                    4978,
                    4604
                ],
                "is_index_slice": [
                    3114,
                    3115,
                    3124
                ],
                "is_int": [
                    3114
                ],
                "is_positional": [
                    3147,
                    3115,
                    3140,
                    3133
                ],
                "self.is_integer": [
                    3116,
                    3124
                ],
                "self.is_categorical": [
                    3116,
                    4150
                ],
                "self.is_mixed": [
                    3133
                ],
                "self.get_loc": [
                    3137,
                    3139,
                    5031,
                    4349,
                    4574
                ],
                "com.is_null_slice": [
                    3144
                ],
                "self.slice_indexer": [
                    3159
                ],
                "keyarr": [
                    3177,
                    3178,
                    3180,
                    3182,
                    3183,
                    3214,
                    3198,
                    3199
                ],
                "self._convert_index_indexer": [
                    3178
                ],
                "self._convert_arr_indexer": [
                    3180
                ],
                "self._convert_list_indexer": [
                    3182
                ],
                "form": [
                    4945,
                    3237
                ],
                "preserve_names": [
                    3315,
                    3278
                ],
                "_ensure_has_len": [
                    3281
                ],
                "ABCRangeIndex": [
                    3284
                ],
                "_": [
                    3634,
                    4684,
                    3295
                ],
                "self._join_level": [
                    3417,
                    3570,
                    3295
                ],
                "target.nlevels": [
                    3315
                ],
                "target.name": [
                    3315,
                    3317
                ],
                "target.copy": [
                    3316
                ],
                "check": [
                    3370,
                    3340,
                    3341,
                    3374,
                    3349,
                    3350,
                    3351
                ],
                "new_labels": [
                    3341,
                    3376,
                    3353,
                    3354,
                    3355
                ],
                "self.take": [
                    3373,
                    3341,
                    4719,
                    3350,
                    4443
                ],
                "new_indexer": [
                    3361,
                    3362,
                    3363,
                    3373,
                    3342,
                    3374,
                    3377
                ],
                "length": [
                    3345,
                    3349,
                    3351
                ],
                "missing_labels": [
                    3355,
                    3348
                ],
                "target.take": [
                    3348
                ],
                "missing_indexer": [
                    3363,
                    3355,
                    3349
                ],
                "ensure_int64": [
                    3633,
                    3349,
                    3351,
                    3644,
                    3645,
                    3678
                ],
                "cur_labels": [
                    3354,
                    3362,
                    3350
                ],
                "cur_indexer": [
                    3354,
                    3362,
                    3351
                ],
                "target.is_unique": [
                    3358
                ],
                "self_is_mi": [
                    3520,
                    3402,
                    3563,
                    3407,
                    3416,
                    3517
                ],
                "other_is_mi": [
                    3520,
                    3403,
                    3407,
                    3416,
                    3518
                ],
                "other.names": [
                    3569,
                    3410,
                    3510
                ],
                "self._join_multi": [
                    3413
                ],
                "return_indexers": [
                    3456,
                    3491,
                    3461,
                    3431,
                    3465,
                    3757,
                    3450,
                    3470,
                    3440,
                    3442,
                    3571,
                    3796,
                    3413,
                    3605,
                    3418,
                    3740,
                    3423
                ],
                "join_index": [
                    3723,
                    3599,
                    3601,
                    3603,
                    3476,
                    3732,
                    3478,
                    3606,
                    3608,
                    3735,
                    3482,
                    3486,
                    3489,
                    3747,
                    3492,
                    3749,
                    3495,
                    3496,
                    3499,
                    3500,
                    3502,
                    3772,
                    3776,
                    3780,
                    3781,
                    3783,
                    3784,
                    3787,
                    3789,
                    3791,
                    3793,
                    3794,
                    3799,
                    3672,
                    3801,
                    3675,
                    3422,
                    3424,
                    3425,
                    3427,
                    3430,
                    3432,
                    3433,
                    3435
                ],
                "rindexer": [
                    3424,
                    3425,
                    3497,
                    3499,
                    3500
                ],
                "other._shallow_copy": [
                    3430
                ],
                "lindexer": [
                    3493,
                    3495,
                    3432,
                    3433,
                    3500
                ],
                "self._join_precedence": [
                    3437
                ],
                "other._join_precedence": [
                    3437
                ],
                "get": [
                    3655,
                    3438,
                    3567
                ],
                "other.join": [
                    3439
                ],
                "y": [
                    4776,
                    4780,
                    3443,
                    3444
                ],
                "z": [
                    3443,
                    3444
                ],
                "this.join": [
                    3450
                ],
                "_validate_join_method": [
                    3452
                ],
                "other.is_unique": [
                    3769,
                    3458,
                    3454
                ],
                "self._join_non_unique": [
                    3464,
                    3455
                ],
                "self._join_monotonic": [
                    3460,
                    3469
                ],
                "join_index.sort_values": [
                    3489
                ],
                "other.get_indexer": [
                    3499
                ],
                "self_names": [
                    3523,
                    3509,
                    3511
                ],
                "com.not_none": [
                    3509,
                    3510
                ],
                "other_names": [
                    3524,
                    3510,
                    3511
                ],
                "overlap": [
                    3523,
                    3524,
                    3558,
                    3511,
                    3514
                ],
                "ldrop_names": [
                    3543,
                    3523,
                    3531,
                    3527
                ],
                "rdrop_names": [
                    3543,
                    3532,
                    3524,
                    3527
                ],
                "self_jnlevels": [
                    3528,
                    3531,
                    3536
                ],
                "other_jnlevels": [
                    3537,
                    3529,
                    3532
                ],
                "other.reorder_levels": [
                    3529
                ],
                "self.droplevel": [
                    3531
                ],
                "other.droplevel": [
                    3532
                ],
                "join_idx": [
                    3536,
                    3546
                ],
                "lidx": [
                    3777,
                    3556,
                    3780,
                    3783,
                    3787,
                    3789,
                    3791,
                    3536,
                    3793,
                    3797,
                    3799,
                    3546,
                    3773
                ],
                "ridx": [
                    3778,
                    3556,
                    3780,
                    3783,
                    3787,
                    3789,
                    3791,
                    3536,
                    3793,
                    3798,
                    3799,
                    3546,
                    3774
                ],
                "self_jnlevels.join": [
                    3536
                ],
                "dropped_names": [
                    3546,
                    3543
                ],
                "levels": [
                    3545,
                    3551
                ],
                "codes": [
                    3545,
                    3551
                ],
                "_restore_dropped_levels_multijoin": [
                    3545
                ],
                "multi_join_idx": [
                    3554,
                    3556,
                    3550
                ],
                "multi_join_idx.remove_unused_levels": [
                    3554
                ],
                "jl": [
                    3569,
                    3558
                ],
                "flip_order": [
                    3652,
                    3653,
                    3562,
                    3565,
                    3574,
                    3737
                ],
                "other.names.index": [
                    3569
                ],
                "lvalues": [
                    3593,
                    3586,
                    3589,
                    3599
                ],
                "self._data._values_for_argsort": [
                    3586,
                    3763
                ],
                "rvalues": [
                    3593,
                    3601,
                    3587,
                    3590
                ],
                "other._data._values_for_argsort": [
                    3587,
                    3764
                ],
                "other._data": [
                    3587,
                    3764
                ],
                "left_idx": [
                    3592,
                    3596,
                    3599,
                    3600,
                    3606
                ],
                "right_idx": [
                    3592,
                    3601,
                    3597,
                    3606
                ],
                "_get_join_indexers": [
                    3592
                ],
                "lvalues.take": [
                    3599
                ],
                "np.putmask": [
                    3601,
                    4228
                ],
                "rvalues.take": [
                    3601
                ],
                "self._wrap_joined_index": [
                    3784,
                    3794,
                    3603,
                    3781
                ],
                "size": [
                    3629
                ],
                "labels": [
                    5225,
                    5226,
                    3629,
                    5230,
                    3632,
                    3633,
                    3639,
                    3640,
                    3644
                ],
                "lab": [
                    3713,
                    3716,
                    3695,
                    3633,
                    3634,
                    3640,
                    3641,
                    3707,
                    3644,
                    3645
                ],
                "sorter": [
                    3634,
                    3635
                ],
                "libalgos.groupsort_indexer": [
                    3634,
                    3701
                ],
                "libalgos": [
                    3634,
                    3701
                ],
                "lab.max": [
                    3634
                ],
                "tic": [
                    3641,
                    3643,
                    3639
                ],
                "starts": [
                    3643,
                    3645
                ],
                "np.hstack": [
                    3643
                ],
                "lib.get_level_sorter": [
                    3645
                ],
                "left._get_level_number": [
                    3657
                ],
                "old_level": [
                    3665,
                    3658,
                    3679
                ],
                "left.levels": [
                    3688,
                    3658
                ],
                "right.is_unique": [
                    3660
                ],
                "new_level": [
                    3665,
                    3689
                ],
                "left_lev_indexer": [
                    3665,
                    3669,
                    3678,
                    3679
                ],
                "right_lev_indexer": [
                    3665,
                    3730,
                    3732
                ],
                "old_level.join": [
                    3665
                ],
                "keep_order": [
                    3691,
                    3670
                ],
                "_get_leaf_sorter": [
                    3674,
                    3715
                ],
                "left.codes": [
                    3674,
                    3685,
                    3682
                ],
                "rev_indexer": [
                    3682,
                    3679
                ],
                "lib.get_reverse_indexer": [
                    3679
                ],
                "new_lev_codes": [
                    3681,
                    3686,
                    3693,
                    3700,
                    3702,
                    3710
                ],
                "np.intp": [
                    3692
                ],
                "mask.all": [
                    3694,
                    3711
                ],
                "ngroups": [
                    3700,
                    3702
                ],
                "new_lev_codes.max": [
                    3700
                ],
                "counts": [
                    3706,
                    3701
                ],
                "mask_all": [
                    3712,
                    3720,
                    3711
                ],
                "mask.nonzero": [
                    3721
                ],
                "left.names": [
                    3726
                ],
                "join_index.codes": [
                    3732,
                    3735
                ],
                "ret_index": [
                    3760,
                    3756,
                    3758
                ],
                "sv": [
                    3777,
                    3780,
                    3783,
                    3787,
                    3789,
                    3791,
                    3793,
                    3763,
                    3766,
                    3774
                ],
                "ov": [
                    3777,
                    3780,
                    3783,
                    3787,
                    3789,
                    3791,
                    3793,
                    3764,
                    3767,
                    3774
                ],
                "self._left_indexer_unique": [
                    3777,
                    3774
                ],
                "self._left_indexer": [
                    3787,
                    3789
                ],
                "joined": [
                    3805
                ],
                "array": [
                    3840,
                    3835,
                    3836,
                    3839
                ],
                "PandasArray": [
                    3839
                ],
                "IndexOpsMixin.array.__doc__": [
                    3833
                ],
                "IndexOpsMixin.array": [
                    3833
                ],
                "memory_usage": [
                    3925
                ],
                "self._engine.sizeof": [
                    3928
                ],
                "IndexOpsMixin.memory_usage.__doc__": [
                    3923
                ],
                "IndexOpsMixin.memory_usage": [
                    3923
                ],
                "is_bool": [
                    3969
                ],
                "values.astype": [
                    3972
                ],
                "cond": [
                    3975
                ],
                "self._is_numeric_dtype": [
                    3977,
                    4011
                ],
                "np.any": [
                    3977,
                    5438
                ],
                "cls.__name__": [
                    5617,
                    3990
                ],
                "item": [
                    4016,
                    5201,
                    5202,
                    4011
                ],
                "getitem": [
                    4122,
                    4132,
                    4117,
                    4127
                ],
                "self._data.__getitem__": [
                    4117
                ],
                "promote": [
                    4137,
                    4118,
                    4127
                ],
                "com.cast_scalar_indexer": [
                    4121,
                    4930
                ],
                "com.is_bool_indexer": [
                    4129
                ],
                "deprecate_ndim_indexing": [
                    4135
                ],
                "to_concat": [
                    4166,
                    4169,
                    4202,
                    4171,
                    4203,
                    4173,
                    4206,
                    4177,
                    4210,
                    4180,
                    4212,
                    4184,
                    4187,
                    4188
                ],
                "to_concat.append": [
                    4171
                ],
                "obj": [
                    5610,
                    5613,
                    4173,
                    4174,
                    4177
                ],
                "obj.name": [
                    4177,
                    5613
                ],
                "self._concat": [
                    4180
                ],
                "typs": [
                    4184,
                    4186
                ],
                "_concat.get_dtype_kinds": [
                    4184
                ],
                "_concat": [
                    4184
                ],
                "self._concat_same_dtype": [
                    4187
                ],
                "Index._concat_same_dtype": [
                    4188
                ],
                "klasses": [
                    4195,
                    4203
                ],
                "ABCDatetimeIndex": [
                    4690,
                    4196
                ],
                "ABCIntervalIndex": [
                    4200
                ],
                "x.astype": [
                    4203
                ],
                "x._values": [
                    4210
                ],
                "np.concatenate": [
                    5202,
                    4212
                ],
                "self._convert_for_op": [
                    4228
                ],
                "putmask": [
                    4238
                ],
                "self.is_": [
                    4250
                ],
                "other.equals": [
                    4266,
                    4258,
                    4262
                ],
                "array_equivalent": [
                    4268
                ],
                "c": [
                    4285,
                    4286
                ],
                "self._comparables": [
                    4286
                ],
                "label": [
                    5027,
                    5031,
                    5034,
                    4973,
                    4974,
                    4978,
                    4979,
                    4981,
                    5023,
                    4985,
                    4349,
                    4991
                ],
                "loc.indices": [
                    4354
                ],
                "locs": [
                    4392,
                    4386,
                    4387,
                    4389
                ],
                "searchsorted": [
                    4386,
                    4990
                ],
                "where.values": [
                    4392,
                    4386
                ],
                "where": [
                    4392,
                    4386
                ],
                "first": [
                    4392,
                    4391
                ],
                "mask.argmax": [
                    4391
                ],
                "_as": [
                    4441,
                    4443,
                    4446,
                    4439
                ],
                "self.argsort": [
                    4439
                ],
                "sorted_index": [
                    4448,
                    4443,
                    4446
                ],
                "return_indexer": [
                    4445
                ],
                "self.asi8": [
                    4549
                ],
                "result.argsort": [
                    4552
                ],
                "args": [
                    4552
                ],
                "self._should_fallback_to_positional": [
                    4576
                ],
                "self._get_values_for_loc": [
                    4585
                ],
                "series": [
                    4585,
                    4605,
                    4607
                ],
                "self.holds_integer": [
                    4591
                ],
                "self.is_boolean": [
                    4591
                ],
                "series._values": [
                    4605
                ],
                "series.iloc": [
                    4607
                ],
                "validate_numeric_casting": [
                    4628
                ],
                "arr.dtype": [
                    4628
                ],
                "arr": [
                    5200,
                    5202,
                    4628,
                    4629
                ],
                "pself.get_indexer_non_unique": [
                    4658
                ],
                "is_categorical": [
                    4660
                ],
                "tgt_values": [
                    4665,
                    4667,
                    4661,
                    4663
                ],
                "self.is_all_dates": [
                    4662
                ],
                "target.is_all_dates": [
                    4662
                ],
                "target.asi8": [
                    4663
                ],
                "self._engine.get_indexer_non_unique": [
                    4667
                ],
                "values.values": [
                    4714
                ],
                "ensure_categorical": [
                    4715
                ],
                "values._reverse_indexer": [
                    4716
                ],
                "result.items": [
                    4719
                ],
                "PrettyDict": [
                    4697,
                    4721
                ],
                "Hashable": [
                    4697
                ],
                "new_values": [
                    4744,
                    4749,
                    4753,
                    4756,
                    4759,
                    4763
                ],
                "_map_values": [
                    4744
                ],
                "na_action": [
                    4744
                ],
                "new_values.size": [
                    4749,
                    4759
                ],
                "attributes.get": [
                    4752,
                    4753
                ],
                "items": [
                    4775,
                    4780,
                    4781,
                    4783,
                    4784
                ],
                "func": [
                    4776,
                    4780,
                    4783
                ],
                "from_tuples": [
                    4781
                ],
                "algos.isin": [
                    4868
                ],
                "start_slice": [
                    5147,
                    5148,
                    4914,
                    5140,
                    4917,
                    5113,
                    4922,
                    5115,
                    5116,
                    5117,
                    5150
                ],
                "end_slice": [
                    5121,
                    5122,
                    5123,
                    5146,
                    4914,
                    5140,
                    4919,
                    5145,
                    4922,
                    5150,
                    5119
                ],
                "self.slice_locs": [
                    4914
                ],
                "end": [
                    5120,
                    5121,
                    5099,
                    5103,
                    4914,
                    5106
                ],
                "self.is_floating": [
                    4929
                ],
                "self._invalid_indexer": [
                    4945,
                    4979,
                    4974
                ],
                "is_float": [
                    4973
                ],
                "self.searchsorted": [
                    4985
                ],
                "pos": [
                    4993,
                    4990
                ],
                "original_label": [
                    5049,
                    5023
                ],
                "self._maybe_cast_slice_bound": [
                    5027
                ],
                "slc": [
                    5056,
                    5059,
                    5061,
                    5031,
                    5039,
                    5042,
                    5043,
                    5045,
                    5046,
                    5052,
                    5054
                ],
                "lib.maybe_booleans_to_slice": [
                    5043
                ],
                "slc.view": [
                    5043
                ],
                "lib.maybe_indices_to_slice": [
                    5045
                ],
                "slc.astype": [
                    5045
                ],
                "slc.start": [
                    5054
                ],
                "slc.stop": [
                    5056
                ],
                "inc": [
                    5097,
                    5125,
                    5095
                ],
                "datetime": [
                    5103
                ],
                "ts_start": [
                    5105,
                    5110
                ],
                "Timestamp": [
                    5105,
                    5106
                ],
                "ts_end": [
                    5106,
                    5110
                ],
                "tz_compare": [
                    5110
                ],
                "ts_start.tzinfo": [
                    5110
                ],
                "ts_end.tzinfo": [
                    5110
                ],
                "self.get_slice_bound": [
                    5121,
                    5115
                ],
                "np.delete": [
                    5181
                ],
                "self._coerce_scalar_to_index": [
                    5201
                ],
                "arr_dtype": [
                    5224,
                    5225
                ],
                "com.index_labels_to_array": [
                    5225
                ],
                "errors": [
                    5229
                ],
                "self.delete": [
                    5232
                ],
                "cls.__eq__": [
                    5242
                ],
                "_make_comparison_op": [
                    5242,
                    5243,
                    5244,
                    5245,
                    5246,
                    5247
                ],
                "operator.eq": [
                    5242
                ],
                "cls.__ne__": [
                    5243
                ],
                "operator.ne": [
                    5243
                ],
                "cls.__lt__": [
                    5244
                ],
                "cls.__gt__": [
                    5245
                ],
                "operator.gt": [
                    5245
                ],
                "cls.__le__": [
                    5246
                ],
                "cls.__ge__": [
                    5247
                ],
                "operator.ge": [
                    5247
                ],
                "cls.__add__": [
                    5286,
                    5254
                ],
                "make_invalid_op": [
                    5254,
                    5255,
                    5256,
                    5257,
                    5258,
                    5259,
                    5266,
                    5267,
                    5268,
                    5269,
                    5270,
                    5271,
                    5272,
                    5273,
                    5274,
                    5275,
                    5276,
                    5277,
                    5278,
                    5279,
                    5446,
                    5447
                ],
                "cls.__radd__": [
                    5287,
                    5255
                ],
                "cls.__iadd__": [
                    5256
                ],
                "cls.__sub__": [
                    5288,
                    5257
                ],
                "cls.__rsub__": [
                    5289,
                    5258
                ],
                "cls.__isub__": [
                    5259
                ],
                "cls.__pow__": [
                    5266,
                    5291
                ],
                "cls.__rpow__": [
                    5290,
                    5267
                ],
                "cls.__mul__": [
                    5268,
                    5301
                ],
                "cls.__rmul__": [
                    5269,
                    5302
                ],
                "cls.__floordiv__": [
                    5298,
                    5270
                ],
                "cls.__rfloordiv__": [
                    5299,
                    5271
                ],
                "cls.__truediv__": [
                    5272,
                    5293
                ],
                "cls.__rtruediv__": [
                    5273,
                    5294
                ],
                "cls.__mod__": [
                    5297,
                    5274
                ],
                "cls.__divmod__": [
                    5275,
                    5300
                ],
                "cls.__neg__": [
                    5276,
                    5319
                ],
                "cls.__pos__": [
                    5320,
                    5277
                ],
                "cls.__abs__": [
                    5321,
                    5278
                ],
                "cls.__inv__": [
                    5322,
                    5279
                ],
                "_make_arithmetic_op": [
                    5286,
                    5287,
                    5288,
                    5289,
                    5290,
                    5291,
                    5293,
                    5294,
                    5297,
                    5298,
                    5299,
                    5300,
                    5301,
                    5302
                ],
                "operator.add": [
                    5286
                ],
                "ops.radd": [
                    5287
                ],
                "operator.sub": [
                    5288
                ],
                "ops.rsub": [
                    5289
                ],
                "ops.rpow": [
                    5290
                ],
                "operator.pow": [
                    5291
                ],
                "operator.truediv": [
                    5293
                ],
                "ops.rtruediv": [
                    5294
                ],
                "operator.mod": [
                    5297
                ],
                "operator.floordiv": [
                    5298
                ],
                "ops.rfloordiv": [
                    5299
                ],
                "operator.mul": [
                    5301
                ],
                "ops.rmul": [
                    5302
                ],
                "_evaluate_numeric_unary.__name__": [
                    5316
                ],
                "_evaluate_numeric_unary": [
                    5316,
                    5317
                ],
                "opstr": [
                    5316
                ],
                "_make_evaluate_unary": [
                    5320,
                    5321,
                    5322,
                    5319
                ],
                "operator.neg": [
                    5319
                ],
                "operator.pos": [
                    5320
                ],
                "cls._add_numeric_methods_unary": [
                    5326
                ],
                "cls._add_numeric_methods_binary": [
                    5327
                ],
                "_doc": [
                    5419,
                    5334
                ],
                "dedent": [
                    5349,
                    5391
                ],
                "f": [
                    5421
                ],
                "result.ndim": [
                    5424
                ],
                "result.dtype.type": [
                    5427
                ],
                "result.dtype": [
                    5427
                ],
                "result.item": [
                    5427
                ],
                "Substitution": [
                    5417
                ],
                "desc": [
                    5417
                ],
                "logical_func.__name__": [
                    5431
                ],
                "logical_func": [
                    5432,
                    5431
                ],
                "cls.all": [
                    5434,
                    5446
                ],
                "_make_logical_function": [
                    5434,
                    5437
                ],
                "np.all": [
                    5435
                ],
                "cls.any": [
                    5437,
                    5447
                ],
                "self._values.shape": [
                    5457
                ],
                "Index._add_numeric_methods_disabled": [
                    5460
                ],
                "Index._add_logical_methods": [
                    5461
                ],
                "Index._add_comparison_methods": [
                    5462
                ],
                "sequences": [
                    5498,
                    5501,
                    5503
                ],
                "MultiIndex.from_arrays": [
                    5559,
                    5503
                ],
                "index_like": [
                    5568,
                    5538,
                    5570,
                    5540,
                    5541,
                    5542,
                    5543,
                    5545,
                    5546,
                    5550,
                    5551,
                    5552,
                    5554,
                    5561
                ],
                "index_like.copy": [
                    5540
                ],
                "index_like.name": [
                    5543
                ],
                "converted": [
                    5561,
                    5554,
                    5556,
                    5559
                ],
                "all_arrays": [
                    5554,
                    5556
                ],
                "lib.clean_index_list": [
                    5554
                ],
                "seq": [
                    5578,
                    5580,
                    5582
                ],
                "trimmed": [
                    5592,
                    5589,
                    5590,
                    5591
                ],
                "strings": [
                    5589,
                    5590
                ],
                "n": [
                    5603
                ],
                "is_integer_dtype": [
                    5642
                ],
                "inferred": [
                    5665,
                    5666,
                    5698,
                    5700,
                    5734,
                    5737,
                    5643,
                    5644,
                    5709,
                    5646,
                    5713,
                    5650,
                    5720,
                    5723,
                    5660,
                    5724
                ],
                "maybe_cast_to_integer_array": [
                    5651,
                    5645
                ],
                "_try_convert_to_int_array": [
                    5656,
                    5702
                ],
                "np.float64": [
                    5658,
                    5711
                ],
                "IntervalArray._from_sequence": [
                    5715
                ],
                "IntervalArray": [
                    5715
                ],
                "inferred.startswith": [
                    5724,
                    5734
                ],
                "DatetimeArray._from_sequence": [
                    5726
                ],
                "DatetimeArray": [
                    5726
                ],
                "OutOfBoundsDatetime": [
                    5728
                ],
                "TimedeltaArray._from_sequence": [
                    5735
                ],
                "TimedeltaArray": [
                    5735
                ],
                "PeriodArray._from_sequence": [
                    5739
                ],
                "PeriodArray": [
                    5739
                ],
                "subarr.dtype": [
                    5744
                ],
                "klass": [
                    5824,
                    5821
                ],
                "index.astype": [
                    5822
                ]
            }
        },
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/core/indexes/datetimelike.py": {
            "buggy_functions": [],
            "inscope_functions": [
                "_join_i8_wrapper(joinf, with_indexers: bool=True)",
                "wrapper(left, right)",
                "is_all_dates(self) -> bool",
                "values(self)",
                "__array_wrap__(self, result, context=None)",
                "equals(self, other) -> bool",
                "__contains__(self, key: Any) -> bool",
                "sort_values(self, return_indexer=False, ascending=True)",
                "take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs)",
                "searchsorted(self, value, side='left', sorter=None)",
                "_convert_tolerance(self, tolerance, target)",
                "tolist(self) -> List",
                "min(self, axis=None, skipna=True, *args, **kwargs)",
                "argmin(self, axis=None, skipna=True, *args, **kwargs)",
                "max(self, axis=None, skipna=True, *args, **kwargs)",
                "argmax(self, axis=None, skipna=True, *args, **kwargs)",
                "_format_with_header(self, header, na_rep='NaT', **kwargs)",
                "_formatter_func(self)",
                "_format_attrs(self)",
                "_validate_partial_date_slice(self, reso: str)",
                "_parsed_string_to_bounds(self, reso: str, parsed: datetime)",
                "_partial_date_slice(self, reso: str, parsed: datetime, use_lhs: bool=True, use_rhs: bool=True)",
                "isin(self, values, level=None)",
                "where(self, cond, other=None)",
                "_summary(self, name=None) -> str",
                "shift(self, periods=1, freq=None)",
                "delete(self, loc)",
                "_set_freq(self, freq)",
                "_shallow_copy(self, values=None, name: Label=lib.no_default)",
                "difference(self, other, sort=None)",
                "intersection(self, other, sort=False)",
                "_can_fast_union(self, other) -> bool",
                "_fast_union(self, other, sort=None)",
                "_union(self, other, sort)",
                "join(self, other, how: str='left', level=None, return_indexers=False, sort=False)",
                "_maybe_utc_convert(self, other)",
                "_is_convertible_to_index_for_join(cls, other: Index) -> bool",
                "_wrap_joined_index(self, joined: np.ndarray, other)",
                "insert(self, loc, item)"
            ],
            "variables_in_file": {
                "_index_doc_kwargs": [
                    195,
                    47
                ],
                "dict": [
                    47
                ],
                "ibase._index_doc_kwargs": [
                    47
                ],
                "ibase": [
                    47
                ],
                "bool": [
                    128,
                    160,
                    385,
                    867,
                    101,
                    50,
                    723,
                    154
                ],
                "isinstance": [
                    135,
                    137,
                    912,
                    923,
                    800,
                    161,
                    680,
                    682,
                    945,
                    57,
                    59,
                    576,
                    201,
                    464,
                    210,
                    724,
                    854,
                    215,
                    607,
                    872,
                    625
                ],
                "left": [
                    768,
                    769,
                    772,
                    778,
                    780,
                    787,
                    793,
                    418,
                    420,
                    57,
                    58,
                    62,
                    66,
                    707,
                    709,
                    713,
                    719,
                    720,
                    740,
                    742,
                    745,
                    749,
                    764
                ],
                "np.ndarray": [
                    57,
                    59,
                    885,
                    625
                ],
                "np": [
                    226,
                    292,
                    937,
                    938,
                    494,
                    625,
                    178,
                    565,
                    885,
                    151,
                    57,
                    59,
                    575
                ],
                "ABCIndex": [
                    57,
                    59
                ],
                "ABCSeries": [
                    57,
                    59
                ],
                "DatetimeLikeArrayMixin": [
                    97,
                    78,
                    83,
                    57,
                    59
                ],
                "left.view": [
                    58
                ],
                "right": [
                    768,
                    770,
                    771,
                    778,
                    781,
                    785,
                    786,
                    419,
                    420,
                    59,
                    60,
                    62,
                    707,
                    709,
                    713,
                    714,
                    740,
                    742,
                    744,
                    764
                ],
                "right.view": [
                    60
                ],
                "results": [
                    68,
                    62,
                    71
                ],
                "joinf": [
                    62
                ],
                "with_indexers": [
                    63
                ],
                "dtype": [
                    66,
                    69
                ],
                "left.dtype.base": [
                    66
                ],
                "left.dtype": [
                    66
                ],
                "join_index": [
                    68,
                    69,
                    70
                ],
                "left_indexer": [
                    68,
                    70
                ],
                "right_indexer": [
                    68,
                    70
                ],
                "join_index.view": [
                    69
                ],
                "staticmethod": [
                    55
                ],
                "wrapper": [
                    73
                ],
                "ExtensionIndex": [
                    204,
                    85
                ],
                "_data": [
                    90
                ],
                "Union": [
                    90
                ],
                "DatetimeArray": [
                    90
                ],
                "TimedeltaArray": [
                    90
                ],
                "PeriodArray": [
                    90
                ],
                "freq": [
                    922,
                    931,
                    933,
                    940,
                    558,
                    180,
                    181,
                    182,
                    567,
                    183,
                    569,
                    184,
                    185,
                    572,
                    191,
                    578,
                    580,
                    727,
                    729,
                    91,
                    604,
                    607,
                    613,
                    614,
                    616,
                    749,
                    369,
                    370,
                    371,
                    372,
                    889,
                    890
                ],
                "Optional": [
                    91,
                    92
                ],
                "DateOffset": [
                    91,
                    607
                ],
                "freqstr": [
                    92
                ],
                "str": [
                    385,
                    828,
                    945,
                    210,
                    498,
                    378,
                    92,
                    381,
                    94,
                    95
                ],
                "_resolution": [
                    93
                ],
                "int": [
                    93
                ],
                "_bool_ops": [
                    94
                ],
                "List": [
                    232,
                    94,
                    95
                ],
                "_field_ops": [
                    95
                ],
                "hasnans": [
                    97,
                    98
                ],
                "cache_readonly": [
                    97
                ],
                "DatetimeLikeArrayMixin._hasnans.fget": [
                    97
                ],
                "DatetimeLikeArrayMixin._hasnans": [
                    97
                ],
                "_hasnans": [
                    98
                ],
                "property": [
                    107,
                    100,
                    358
                ],
                "self._data._data": [
                    110
                ],
                "self._data": [
                    580,
                    616,
                    940,
                    110,
                    495,
                    558,
                    623,
                    912,
                    403,
                    627,
                    913,
                    890,
                    218,
                    923,
                    924,
                    190
                ],
                "self": [
                    512,
                    513,
                    514,
                    519,
                    520,
                    521,
                    522,
                    558,
                    559,
                    565,
                    568,
                    569,
                    571,
                    572,
                    575,
                    577,
                    578,
                    580,
                    581,
                    607,
                    614,
                    616,
                    619,
                    620,
                    110,
                    623,
                    627,
                    629,
                    120,
                    121,
                    132,
                    137,
                    139,
                    147,
                    151,
                    157,
                    669,
                    670,
                    672,
                    673,
                    675,
                    676,
                    680,
                    169,
                    681,
                    682,
                    172,
                    689,
                    178,
                    690,
                    180,
                    181,
                    692,
                    694,
                    700,
                    190,
                    191,
                    193,
                    706,
                    707,
                    709,
                    200,
                    202,
                    205,
                    717,
                    721,
                    724,
                    727,
                    218,
                    732,
                    735,
                    739,
                    740,
                    742,
                    236,
                    757,
                    759,
                    760,
                    251,
                    252,
                    763,
                    254,
                    764,
                    768,
                    257,
                    259,
                    261,
                    773,
                    263,
                    265,
                    778,
                    268,
                    270,
                    788,
                    796,
                    286,
                    287,
                    288,
                    800,
                    802,
                    810,
                    813,
                    308,
                    309,
                    311,
                    314,
                    316,
                    318,
                    320,
                    833,
                    322,
                    835,
                    325,
                    327,
                    839,
                    850,
                    851,
                    854,
                    343,
                    344,
                    345,
                    855,
                    861,
                    862,
                    356,
                    360,
                    367,
                    369,
                    886,
                    887,
                    889,
                    890,
                    892,
                    399,
                    912,
                    401,
                    402,
                    403,
                    913,
                    405,
                    914,
                    407,
                    408,
                    409,
                    916,
                    919,
                    923,
                    924,
                    927,
                    930,
                    931,
                    932,
                    933,
                    938,
                    940,
                    941,
                    946,
                    948,
                    462,
                    464,
                    466,
                    468,
                    470,
                    474,
                    486,
                    489,
                    495,
                    496
                ],
                "result": [
                    773,
                    774,
                    520,
                    776,
                    522,
                    525,
                    526,
                    788,
                    789,
                    791,
                    805,
                    806,
                    807,
                    808,
                    681,
                    682,
                    683,
                    684,
                    685,
                    558,
                    559,
                    813,
                    814,
                    694,
                    699,
                    700,
                    701,
                    702,
                    703,
                    494,
                    495,
                    116,
                    117,
                    118,
                    631,
                    629,
                    630,
                    124
                ],
                "lib.item_from_zerodim": [
                    116
                ],
                "lib": [
                    200,
                    618,
                    619,
                    116,
                    117,
                    575
                ],
                "is_bool_dtype": [
                    117
                ],
                "lib.is_scalar": [
                    117
                ],
                "attrs": [
                    366,
                    372,
                    373,
                    120,
                    121,
                    123,
                    124
                ],
                "self._get_attributes_dict": [
                    120
                ],
                "is_period_dtype": [
                    568,
                    121,
                    181
                ],
                "Index": [
                    636,
                    482,
                    867,
                    840,
                    681,
                    591,
                    592,
                    593,
                    694,
                    215,
                    472,
                    153,
                    124
                ],
                "self.is_": [
                    132
                ],
                "other": [
                    768,
                    132,
                    135,
                    137,
                    778,
                    139,
                    147,
                    151,
                    796,
                    797,
                    670,
                    672,
                    673,
                    800,
                    802,
                    804,
                    677,
                    678,
                    805,
                    680,
                    681,
                    811,
                    688,
                    690,
                    691,
                    692,
                    694,
                    833,
                    706,
                    707,
                    835,
                    709,
                    839,
                    842,
                    724,
                    852,
                    854,
                    856,
                    729,
                    858,
                    476,
                    477,
                    732,
                    735,
                    861,
                    863,
                    482,
                    739,
                    484,
                    740,
                    486,
                    487,
                    742,
                    489,
                    490,
                    872,
                    492,
                    864,
                    494,
                    874,
                    756,
                    886,
                    887,
                    760,
                    889,
                    763,
                    764,
                    638
                ],
                "ABCIndexClass": [
                    135
                ],
                "type": [
                    519,
                    137,
                    139,
                    919,
                    800,
                    680,
                    682,
                    940,
                    813,
                    941,
                    559,
                    948,
                    190,
                    193,
                    835,
                    580,
                    581,
                    717,
                    464,
                    466,
                    724,
                    213,
                    854,
                    495,
                    496,
                    627,
                    629,
                    757,
                    760,
                    890,
                    892
                ],
                "ValueError": [
                    836,
                    229,
                    326,
                    140,
                    269,
                    750,
                    467,
                    158
                ],
                "TypeError": [
                    836,
                    490,
                    140,
                    942,
                    211,
                    947,
                    918,
                    857,
                    859,
                    158
                ],
                "OverflowError": [
                    140
                ],
                "is_dtype_equal": [
                    489,
                    147,
                    486
                ],
                "self.dtype": [
                    580,
                    486,
                    489,
                    940,
                    813,
                    495,
                    914,
                    147,
                    627,
                    886,
                    890,
                    191
                ],
                "other.dtype": [
                    489,
                    490,
                    147,
                    886
                ],
                "np.array_equal": [
                    151
                ],
                "self.asi8": [
                    810,
                    178,
                    402,
                    254,
                    343,
                    470,
                    311,
                    151,
                    565,
                    286
                ],
                "other.asi8": [
                    811,
                    151
                ],
                "Any": [
                    154
                ],
                "hash": [
                    155
                ],
                "key": [
                    155,
                    157
                ],
                "res": [
                    161,
                    157
                ],
                "self.get_loc": [
                    157
                ],
                "KeyError": [
                    412,
                    158
                ],
                "is_scalar": [
                    161,
                    476,
                    917
                ],
                "slice": [
                    576,
                    161,
                    420,
                    201,
                    719
                ],
                "is_list_like": [
                    161,
                    574
                ],
                "len": [
                    257,
                    513,
                    520,
                    407,
                    796,
                    161,
                    930,
                    675,
                    932,
                    677,
                    308,
                    314,
                    571,
                    575,
                    577,
                    200,
                    607,
                    735,
                    874,
                    756,
                    759,
                    251
                ],
                "Appender": [
                    472,
                    153,
                    195,
                    636
                ],
                "Index.__contains__.__doc__": [
                    153
                ],
                "Index.__contains__": [
                    153
                ],
                "return_indexer": [
                    168
                ],
                "_as": [
                    169,
                    171,
                    172,
                    173
                ],
                "self.argsort": [
                    169
                ],
                "ascending": [
                    184,
                    170,
                    187,
                    182
                ],
                "sorted_index": [
                    172,
                    173
                ],
                "self.take": [
                    172
                ],
                "sorted_values": [
                    178,
                    188,
                    191
                ],
                "np.sort": [
                    178
                ],
                "self.freq": [
                    578,
                    930,
                    931,
                    932,
                    933,
                    521,
                    689,
                    690,
                    180,
                    727,
                    569,
                    572,
                    889,
                    927
                ],
                "freq.n": [
                    184,
                    182
                ],
                "arr": [
                    193,
                    580,
                    581,
                    940,
                    941,
                    495,
                    496,
                    190
                ],
                "_simple_new": [
                    193,
                    580,
                    581,
                    940,
                    941,
                    495,
                    496,
                    629,
                    890,
                    892,
                    190
                ],
                "self.name": [
                    193,
                    581,
                    810,
                    619,
                    941,
                    559,
                    496
                ],
                "nv.validate_take": [
                    197
                ],
                "nv": [
                    197,
                    305,
                    306,
                    340,
                    341,
                    248,
                    249,
                    283,
                    284
                ],
                "tuple": [
                    197
                ],
                "kwargs": [
                    356,
                    197,
                    205,
                    305,
                    340,
                    248,
                    283
                ],
                "indices": [
                    200,
                    205,
                    198
                ],
                "ensure_int64": [
                    198,
                    575
                ],
                "maybe_slice": [
                    200,
                    201,
                    202
                ],
                "lib.maybe_indices_to_slice": [
                    200,
                    575
                ],
                "ExtensionIndex.take": [
                    204
                ],
                "axis": [
                    205,
                    306,
                    341,
                    249,
                    284
                ],
                "allow_fill": [
                    205
                ],
                "fill_value": [
                    205
                ],
                "_index_shared_docs": [
                    195
                ],
                "value": [
                    210,
                    213,
                    215,
                    216,
                    218
                ],
                "__name__": [
                    919,
                    948,
                    213,
                    519
                ],
                "value._data": [
                    216
                ],
                "self._data.searchsorted": [
                    218
                ],
                "side": [
                    218
                ],
                "sorter": [
                    218
                ],
                "doc": [
                    208
                ],
                "IndexOpsMixin.searchsorted": [
                    208
                ],
                "IndexOpsMixin": [
                    208
                ],
                "_can_hold_na": [
                    220
                ],
                "_na_value": [
                    222
                ],
                "NaT": [
                    928,
                    923,
                    477,
                    222
                ],
                "tolerance": [
                    226,
                    228,
                    230
                ],
                "np.asarray": [
                    226
                ],
                "to_numpy": [
                    226
                ],
                "to_timedelta": [
                    226
                ],
                "target.size": [
                    228
                ],
                "target": [
                    228
                ],
                "tolerance.size": [
                    228
                ],
                "list": [
                    356,
                    236
                ],
                "self.astype": [
                    946,
                    468,
                    236
                ],
                "object": [
                    946,
                    468,
                    236
                ],
                "nv.validate_min": [
                    248
                ],
                "args": [
                    248,
                    305,
                    283,
                    340
                ],
                "nv.validate_minmax_axis": [
                    249,
                    306,
                    284,
                    341
                ],
                "self._na_value": [
                    322,
                    327,
                    265,
                    270,
                    916,
                    309,
                    252
                ],
                "i8": [
                    257,
                    258,
                    259,
                    291,
                    292,
                    293,
                    324,
                    350,
                    267,
                    343,
                    348,
                    311,
                    314,
                    315,
                    316,
                    349,
                    254,
                    286
                ],
                "self.is_monotonic": [
                    257,
                    692,
                    405,
                    314,
                    732
                ],
                "iNaT": [
                    258,
                    315
                ],
                "self._box_func": [
                    259,
                    268,
                    325,
                    316
                ],
                "self.hasnans": [
                    344,
                    261,
                    318,
                    287
                ],
                "skipna": [
                    289,
                    346,
                    262,
                    319
                ],
                "min_stamp": [
                    267,
                    268,
                    263
                ],
                "asi8.min": [
                    263
                ],
                "asi8": [
                    320,
                    938,
                    263
                ],
                "self._isnan": [
                    288,
                    345,
                    320,
                    263
                ],
                "i8.min": [
                    267
                ],
                "nv.validate_argmin": [
                    283
                ],
                "mask": [
                    288,
                    289,
                    292,
                    345,
                    346,
                    349
                ],
                "mask.all": [
                    289,
                    346
                ],
                "i8.copy": [
                    291,
                    348
                ],
                "max": [
                    292
                ],
                "np.iinfo": [
                    292
                ],
                "i8.argmin": [
                    293
                ],
                "nv.validate_max": [
                    305
                ],
                "max_stamp": [
                    320,
                    324,
                    325
                ],
                "asi8.max": [
                    320
                ],
                "i8.max": [
                    324
                ],
                "nv.validate_argmax": [
                    340
                ],
                "i8.argmax": [
                    350
                ],
                "header": [
                    356
                ],
                "self._format_native_types": [
                    356
                ],
                "na_rep": [
                    356
                ],
                "AbstractMethodError": [
                    360
                ],
                "_format_attrs": [
                    366
                ],
                "super": [
                    638,
                    797,
                    366
                ],
                "attrib": [
                    368,
                    367
                ],
                "self._attributes": [
                    367
                ],
                "self.freqstr": [
                    369,
                    522
                ],
                "repr": [
                    371
                ],
                "attrs.append": [
                    372
                ],
                "NotImplementedError": [
                    379,
                    382
                ],
                "datetime": [
                    385,
                    381
                ],
                "self._validate_partial_date_slice": [
                    399
                ],
                "reso": [
                    401,
                    399
                ],
                "t1": [
                    418,
                    423,
                    401,
                    408,
                    409
                ],
                "t2": [
                    419,
                    424,
                    401,
                    408,
                    409
                ],
                "self._parsed_string_to_bounds": [
                    401
                ],
                "parsed": [
                    401
                ],
                "i8vals": [
                    418,
                    419,
                    423,
                    424,
                    402
                ],
                "unbox": [
                    418,
                    419,
                    423,
                    424,
                    403
                ],
                "self._data._unbox_scalar": [
                    403
                ],
                "use_lhs": [
                    408,
                    418,
                    423
                ],
                "use_rhs": [
                    424,
                    409,
                    419
                ],
                "i8vals.searchsorted": [
                    418,
                    419
                ],
                "lhs_mask": [
                    427,
                    423
                ],
                "rhs_mask": [
                    424,
                    427
                ],
                "nonzero": [
                    427
                ],
                "__add__": [
                    431
                ],
                "make_wrapped_arith_op": [
                    431,
                    432,
                    433,
                    434,
                    435,
                    436,
                    437,
                    438,
                    439,
                    440,
                    441,
                    442,
                    443,
                    444,
                    445,
                    446
                ],
                "__radd__": [
                    432
                ],
                "__sub__": [
                    433
                ],
                "__rsub__": [
                    434
                ],
                "__pow__": [
                    435
                ],
                "__rpow__": [
                    436
                ],
                "__mul__": [
                    437
                ],
                "__rmul__": [
                    438
                ],
                "__floordiv__": [
                    439
                ],
                "__rfloordiv__": [
                    440
                ],
                "__mod__": [
                    441
                ],
                "__rmod__": [
                    442
                ],
                "__divmod__": [
                    443
                ],
                "__rdivmod__": [
                    444
                ],
                "__truediv__": [
                    445
                ],
                "__rtruediv__": [
                    446
                ],
                "level": [
                    844,
                    461,
                    462
                ],
                "self._validate_index_level": [
                    462
                ],
                "values": [
                    620,
                    494,
                    622,
                    464,
                    623,
                    466,
                    625,
                    468,
                    627,
                    470,
                    629,
                    474
                ],
                "isin": [
                    468
                ],
                "algorithms.isin": [
                    470
                ],
                "algorithms": [
                    470
                ],
                "values.asi8": [
                    470
                ],
                "self.view": [
                    474,
                    757
                ],
                "isna": [
                    476,
                    917
                ],
                "NaT.value": [
                    477
                ],
                "is_categorical_dtype": [
                    484
                ],
                "other.categories.dtype": [
                    486
                ],
                "other.categories": [
                    486
                ],
                "other._internal_get_values": [
                    487
                ],
                "other.view": [
                    760,
                    492
                ],
                "astype": [
                    494
                ],
                "np.where": [
                    494
                ],
                "cond": [
                    494
                ],
                "Index.where.__doc__": [
                    472
                ],
                "Index.where": [
                    472
                ],
                "formatter": [
                    512,
                    514
                ],
                "self._formatter_func": [
                    512
                ],
                "index_summary": [
                    520,
                    514,
                    516
                ],
                "name": [
                    518,
                    519,
                    520,
                    619,
                    629,
                    887,
                    892
                ],
                "result.replace": [
                    525
                ],
                "self._data._time_shift": [
                    558
                ],
                "periods": [
                    558
                ],
                "new_i8s": [
                    937,
                    940,
                    580,
                    565
                ],
                "np.delete": [
                    565
                ],
                "loc": [
                    576,
                    577,
                    770,
                    771,
                    930,
                    932,
                    938,
                    785,
                    786,
                    946,
                    565,
                    570,
                    571,
                    574,
                    575
                ],
                "is_integer": [
                    570
                ],
                "np.array": [
                    575
                ],
                "loc.step": [
                    576
                ],
                "loc.start": [
                    577
                ],
                "loc.stop": [
                    577
                ],
                "inherit_names": [
                    81,
                    76
                ],
                "DatetimeIndexOpsMixin": [
                    584
                ],
                "Int64Index": [
                    584,
                    810,
                    811
                ],
                "_is_monotonic_increasing": [
                    591
                ],
                "Index.is_monotonic_increasing": [
                    591
                ],
                "_is_monotonic_decreasing": [
                    592
                ],
                "Index.is_monotonic_decreasing": [
                    592
                ],
                "_is_unique": [
                    593
                ],
                "Index.is_unique": [
                    593
                ],
                "to_offset": [
                    614
                ],
                "self.inferred_freq": [
                    614
                ],
                "self._data._freq": [
                    616
                ],
                "Label": [
                    618
                ],
                "lib.no_default": [
                    618,
                    619
                ],
                "cache": [
                    620,
                    630
                ],
                "self._cache.copy": [
                    620
                ],
                "self._cache": [
                    620
                ],
                "result._cache": [
                    630
                ],
                "new_idx": [
                    640,
                    638,
                    639
                ],
                "difference": [
                    638
                ],
                "sort": [
                    805,
                    681,
                    765,
                    797,
                    812,
                    846,
                    694,
                    669,
                    638
                ],
                "new_idx._set_freq": [
                    639
                ],
                "Index.difference.__doc__": [
                    636
                ],
                "Index.difference": [
                    636
                ],
                "self._validate_sort_keyword": [
                    669
                ],
                "self._assert_can_do_setop": [
                    670
                ],
                "self.equals": [
                    672,
                    796
                ],
                "self._get_reconciled_name_object": [
                    673
                ],
                "self.copy": [
                    676
                ],
                "other.copy": [
                    678
                ],
                "Index.intersection": [
                    681,
                    694
                ],
                "result.freq": [
                    683,
                    701,
                    806
                ],
                "result._set_freq": [
                    774,
                    807,
                    684,
                    789,
                    699,
                    702
                ],
                "other.freq": [
                    688,
                    729,
                    690,
                    691
                ],
                "other.freq.is_anchored": [
                    691
                ],
                "other.is_monotonic": [
                    732,
                    692
                ],
                "self._shallow_copy": [
                    721,
                    788,
                    700,
                    773
                ],
                "result._data": [
                    700
                ],
                "result.name": [
                    700
                ],
                "end": [
                    713,
                    716,
                    719
                ],
                "min": [
                    713
                ],
                "start": [
                    714,
                    716,
                    719
                ],
                "lslice": [
                    720,
                    719
                ],
                "left.slice_locs": [
                    719
                ],
                "left_chunk": [
                    720,
                    721
                ],
                "left.values": [
                    720,
                    787,
                    772
                ],
                "right_start": [
                    744,
                    749
                ],
                "left_end": [
                    745,
                    780,
                    749,
                    784,
                    785
                ],
                "left_start": [
                    769,
                    770
                ],
                "right.searchsorted": [
                    785,
                    770
                ],
                "right_chunk": [
                    787,
                    786,
                    771,
                    772
                ],
                "right.values": [
                    786,
                    771
                ],
                "dates": [
                    788,
                    787,
                    772,
                    773
                ],
                "concat_compat": [
                    787,
                    772
                ],
                "right_end": [
                    784,
                    781
                ],
                "_union": [
                    797
                ],
                "this": [
                    864,
                    802,
                    804,
                    805,
                    839,
                    841,
                    850,
                    852,
                    862
                ],
                "self._maybe_utc_convert": [
                    802,
                    839
                ],
                "this._can_fast_union": [
                    804
                ],
                "this._fast_union": [
                    805
                ],
                "i8self": [
                    810,
                    812
                ],
                "Int64Index._simple_new": [
                    810,
                    811
                ],
                "i8other": [
                    811,
                    812
                ],
                "other.name": [
                    811
                ],
                "i8result": [
                    812,
                    813
                ],
                "i8self._union": [
                    812
                ],
                "_join_precedence": [
                    818
                ],
                "_inner_indexer": [
                    820
                ],
                "_join_i8_wrapper": [
                    820,
                    821,
                    822,
                    823
                ],
                "libjoin.inner_join_indexer": [
                    820
                ],
                "libjoin": [
                    824,
                    820,
                    821,
                    822
                ],
                "_outer_indexer": [
                    821
                ],
                "libjoin.outer_join_indexer": [
                    821
                ],
                "_left_indexer": [
                    822
                ],
                "libjoin.left_join_indexer": [
                    822
                ],
                "_left_indexer_unique": [
                    823
                ],
                "libjoin.left_join_indexer_unique": [
                    824
                ],
                "self._is_convertible_to_index_for_join": [
                    833
                ],
                "Index.join": [
                    840
                ],
                "how": [
                    843
                ],
                "return_indexers": [
                    845
                ],
                "hasattr": [
                    851
                ],
                "self.tz": [
                    861,
                    855
                ],
                "other.tz": [
                    856,
                    858,
                    861
                ],
                "timezones.tz_compare": [
                    861
                ],
                "timezones": [
                    861
                ],
                "self.tz_convert": [
                    862
                ],
                "other.tz_convert": [
                    863
                ],
                "cls": [
                    872
                ],
                "other.inferred_type": [
                    874
                ],
                "classmethod": [
                    866
                ],
                "get_op_result_name": [
                    887
                ],
                "self._can_fast_union": [
                    889
                ],
                "new_data": [
                    890,
                    892
                ],
                "joined": [
                    890
                ],
                "item": [
                    928,
                    930,
                    932,
                    934,
                    938,
                    912,
                    913,
                    914,
                    945,
                    916,
                    917,
                    946,
                    923,
                    924
                ],
                "self._data._recognized_scalars": [
                    912
                ],
                "self._data._scalar_type": [
                    913,
                    923
                ],
                "is_valid_nat_for_dtype": [
                    914
                ],
                "self._data._check_compatible_with": [
                    924
                ],
                "self.size": [
                    927
                ],
                "item.asm8": [
                    934
                ],
                "np.concatenate": [
                    937
                ],
                "item.view": [
                    938
                ],
                "np.int64": [
                    938
                ],
                "AttributeError": [
                    942
                ],
                "insert": [
                    946
                ],
                "err": [
                    949
                ]
            },
            "filtered_variables_in_file": {
                "_index_doc_kwargs": [
                    195,
                    47
                ],
                "ibase._index_doc_kwargs": [
                    47
                ],
                "ibase": [
                    47
                ],
                "left": [
                    768,
                    769,
                    772,
                    778,
                    780,
                    787,
                    793,
                    418,
                    420,
                    57,
                    58,
                    62,
                    66,
                    707,
                    709,
                    713,
                    719,
                    720,
                    740,
                    742,
                    745,
                    749,
                    764
                ],
                "np.ndarray": [
                    57,
                    59,
                    885,
                    625
                ],
                "np": [
                    226,
                    292,
                    937,
                    938,
                    494,
                    625,
                    178,
                    565,
                    885,
                    151,
                    57,
                    59,
                    575
                ],
                "ABCIndex": [
                    57,
                    59
                ],
                "ABCSeries": [
                    57,
                    59
                ],
                "DatetimeLikeArrayMixin": [
                    97,
                    78,
                    83,
                    57,
                    59
                ],
                "left.view": [
                    58
                ],
                "right": [
                    768,
                    770,
                    771,
                    778,
                    781,
                    785,
                    786,
                    419,
                    420,
                    59,
                    60,
                    62,
                    707,
                    709,
                    713,
                    714,
                    740,
                    742,
                    744,
                    764
                ],
                "right.view": [
                    60
                ],
                "results": [
                    68,
                    62,
                    71
                ],
                "joinf": [
                    62
                ],
                "with_indexers": [
                    63
                ],
                "dtype": [
                    66,
                    69
                ],
                "left.dtype.base": [
                    66
                ],
                "left.dtype": [
                    66
                ],
                "join_index": [
                    68,
                    69,
                    70
                ],
                "left_indexer": [
                    68,
                    70
                ],
                "right_indexer": [
                    68,
                    70
                ],
                "join_index.view": [
                    69
                ],
                "wrapper": [
                    73
                ],
                "ExtensionIndex": [
                    204,
                    85
                ],
                "_data": [
                    90
                ],
                "Union": [
                    90
                ],
                "DatetimeArray": [
                    90
                ],
                "TimedeltaArray": [
                    90
                ],
                "PeriodArray": [
                    90
                ],
                "freq": [
                    922,
                    931,
                    933,
                    940,
                    558,
                    180,
                    181,
                    182,
                    567,
                    183,
                    569,
                    184,
                    185,
                    572,
                    191,
                    578,
                    580,
                    727,
                    729,
                    91,
                    604,
                    607,
                    613,
                    614,
                    616,
                    749,
                    369,
                    370,
                    371,
                    372,
                    889,
                    890
                ],
                "Optional": [
                    91,
                    92
                ],
                "DateOffset": [
                    91,
                    607
                ],
                "freqstr": [
                    92
                ],
                "_resolution": [
                    93
                ],
                "_bool_ops": [
                    94
                ],
                "List": [
                    232,
                    94,
                    95
                ],
                "_field_ops": [
                    95
                ],
                "hasnans": [
                    97,
                    98
                ],
                "cache_readonly": [
                    97
                ],
                "DatetimeLikeArrayMixin._hasnans.fget": [
                    97
                ],
                "DatetimeLikeArrayMixin._hasnans": [
                    97
                ],
                "_hasnans": [
                    98
                ],
                "self._data._data": [
                    110
                ],
                "self._data": [
                    580,
                    616,
                    940,
                    110,
                    495,
                    558,
                    623,
                    912,
                    403,
                    627,
                    913,
                    890,
                    218,
                    923,
                    924,
                    190
                ],
                "self": [
                    512,
                    513,
                    514,
                    519,
                    520,
                    521,
                    522,
                    558,
                    559,
                    565,
                    568,
                    569,
                    571,
                    572,
                    575,
                    577,
                    578,
                    580,
                    581,
                    607,
                    614,
                    616,
                    619,
                    620,
                    110,
                    623,
                    627,
                    629,
                    120,
                    121,
                    132,
                    137,
                    139,
                    147,
                    151,
                    157,
                    669,
                    670,
                    672,
                    673,
                    675,
                    676,
                    680,
                    169,
                    681,
                    682,
                    172,
                    689,
                    178,
                    690,
                    180,
                    181,
                    692,
                    694,
                    700,
                    190,
                    191,
                    193,
                    706,
                    707,
                    709,
                    200,
                    202,
                    205,
                    717,
                    721,
                    724,
                    727,
                    218,
                    732,
                    735,
                    739,
                    740,
                    742,
                    236,
                    757,
                    759,
                    760,
                    251,
                    252,
                    763,
                    254,
                    764,
                    768,
                    257,
                    259,
                    261,
                    773,
                    263,
                    265,
                    778,
                    268,
                    270,
                    788,
                    796,
                    286,
                    287,
                    288,
                    800,
                    802,
                    810,
                    813,
                    308,
                    309,
                    311,
                    314,
                    316,
                    318,
                    320,
                    833,
                    322,
                    835,
                    325,
                    327,
                    839,
                    850,
                    851,
                    854,
                    343,
                    344,
                    345,
                    855,
                    861,
                    862,
                    356,
                    360,
                    367,
                    369,
                    886,
                    887,
                    889,
                    890,
                    892,
                    399,
                    912,
                    401,
                    402,
                    403,
                    913,
                    405,
                    914,
                    407,
                    408,
                    409,
                    916,
                    919,
                    923,
                    924,
                    927,
                    930,
                    931,
                    932,
                    933,
                    938,
                    940,
                    941,
                    946,
                    948,
                    462,
                    464,
                    466,
                    468,
                    470,
                    474,
                    486,
                    489,
                    495,
                    496
                ],
                "result": [
                    773,
                    774,
                    520,
                    776,
                    522,
                    525,
                    526,
                    788,
                    789,
                    791,
                    805,
                    806,
                    807,
                    808,
                    681,
                    682,
                    683,
                    684,
                    685,
                    558,
                    559,
                    813,
                    814,
                    694,
                    699,
                    700,
                    701,
                    702,
                    703,
                    494,
                    495,
                    116,
                    117,
                    118,
                    631,
                    629,
                    630,
                    124
                ],
                "lib.item_from_zerodim": [
                    116
                ],
                "lib": [
                    200,
                    618,
                    619,
                    116,
                    117,
                    575
                ],
                "is_bool_dtype": [
                    117
                ],
                "lib.is_scalar": [
                    117
                ],
                "attrs": [
                    366,
                    372,
                    373,
                    120,
                    121,
                    123,
                    124
                ],
                "self._get_attributes_dict": [
                    120
                ],
                "is_period_dtype": [
                    568,
                    121,
                    181
                ],
                "Index": [
                    636,
                    482,
                    867,
                    840,
                    681,
                    591,
                    592,
                    593,
                    694,
                    215,
                    472,
                    153,
                    124
                ],
                "self.is_": [
                    132
                ],
                "other": [
                    768,
                    132,
                    135,
                    137,
                    778,
                    139,
                    147,
                    151,
                    796,
                    797,
                    670,
                    672,
                    673,
                    800,
                    802,
                    804,
                    677,
                    678,
                    805,
                    680,
                    681,
                    811,
                    688,
                    690,
                    691,
                    692,
                    694,
                    833,
                    706,
                    707,
                    835,
                    709,
                    839,
                    842,
                    724,
                    852,
                    854,
                    856,
                    729,
                    858,
                    476,
                    477,
                    732,
                    735,
                    861,
                    863,
                    482,
                    739,
                    484,
                    740,
                    486,
                    487,
                    742,
                    489,
                    490,
                    872,
                    492,
                    864,
                    494,
                    874,
                    756,
                    886,
                    887,
                    760,
                    889,
                    763,
                    764,
                    638
                ],
                "ABCIndexClass": [
                    135
                ],
                "is_dtype_equal": [
                    489,
                    147,
                    486
                ],
                "self.dtype": [
                    580,
                    486,
                    489,
                    940,
                    813,
                    495,
                    914,
                    147,
                    627,
                    886,
                    890,
                    191
                ],
                "other.dtype": [
                    489,
                    490,
                    147,
                    886
                ],
                "np.array_equal": [
                    151
                ],
                "self.asi8": [
                    810,
                    178,
                    402,
                    254,
                    343,
                    470,
                    311,
                    151,
                    565,
                    286
                ],
                "other.asi8": [
                    811,
                    151
                ],
                "Any": [
                    154
                ],
                "key": [
                    155,
                    157
                ],
                "res": [
                    161,
                    157
                ],
                "self.get_loc": [
                    157
                ],
                "is_scalar": [
                    161,
                    476,
                    917
                ],
                "is_list_like": [
                    161,
                    574
                ],
                "Appender": [
                    472,
                    153,
                    195,
                    636
                ],
                "Index.__contains__.__doc__": [
                    153
                ],
                "Index.__contains__": [
                    153
                ],
                "return_indexer": [
                    168
                ],
                "_as": [
                    169,
                    171,
                    172,
                    173
                ],
                "self.argsort": [
                    169
                ],
                "ascending": [
                    184,
                    170,
                    187,
                    182
                ],
                "sorted_index": [
                    172,
                    173
                ],
                "self.take": [
                    172
                ],
                "sorted_values": [
                    178,
                    188,
                    191
                ],
                "np.sort": [
                    178
                ],
                "self.freq": [
                    578,
                    930,
                    931,
                    932,
                    933,
                    521,
                    689,
                    690,
                    180,
                    727,
                    569,
                    572,
                    889,
                    927
                ],
                "freq.n": [
                    184,
                    182
                ],
                "arr": [
                    193,
                    580,
                    581,
                    940,
                    941,
                    495,
                    496,
                    190
                ],
                "_simple_new": [
                    193,
                    580,
                    581,
                    940,
                    941,
                    495,
                    496,
                    629,
                    890,
                    892,
                    190
                ],
                "self.name": [
                    193,
                    581,
                    810,
                    619,
                    941,
                    559,
                    496
                ],
                "nv.validate_take": [
                    197
                ],
                "nv": [
                    197,
                    305,
                    306,
                    340,
                    341,
                    248,
                    249,
                    283,
                    284
                ],
                "kwargs": [
                    356,
                    197,
                    205,
                    305,
                    340,
                    248,
                    283
                ],
                "indices": [
                    200,
                    205,
                    198
                ],
                "ensure_int64": [
                    198,
                    575
                ],
                "maybe_slice": [
                    200,
                    201,
                    202
                ],
                "lib.maybe_indices_to_slice": [
                    200,
                    575
                ],
                "ExtensionIndex.take": [
                    204
                ],
                "axis": [
                    205,
                    306,
                    341,
                    249,
                    284
                ],
                "allow_fill": [
                    205
                ],
                "fill_value": [
                    205
                ],
                "_index_shared_docs": [
                    195
                ],
                "value": [
                    210,
                    213,
                    215,
                    216,
                    218
                ],
                "value._data": [
                    216
                ],
                "self._data.searchsorted": [
                    218
                ],
                "side": [
                    218
                ],
                "sorter": [
                    218
                ],
                "doc": [
                    208
                ],
                "IndexOpsMixin.searchsorted": [
                    208
                ],
                "IndexOpsMixin": [
                    208
                ],
                "_can_hold_na": [
                    220
                ],
                "_na_value": [
                    222
                ],
                "NaT": [
                    928,
                    923,
                    477,
                    222
                ],
                "tolerance": [
                    226,
                    228,
                    230
                ],
                "np.asarray": [
                    226
                ],
                "to_numpy": [
                    226
                ],
                "to_timedelta": [
                    226
                ],
                "target.size": [
                    228
                ],
                "target": [
                    228
                ],
                "tolerance.size": [
                    228
                ],
                "self.astype": [
                    946,
                    468,
                    236
                ],
                "nv.validate_min": [
                    248
                ],
                "args": [
                    248,
                    305,
                    283,
                    340
                ],
                "nv.validate_minmax_axis": [
                    249,
                    306,
                    284,
                    341
                ],
                "self._na_value": [
                    322,
                    327,
                    265,
                    270,
                    916,
                    309,
                    252
                ],
                "i8": [
                    257,
                    258,
                    259,
                    291,
                    292,
                    293,
                    324,
                    350,
                    267,
                    343,
                    348,
                    311,
                    314,
                    315,
                    316,
                    349,
                    254,
                    286
                ],
                "self.is_monotonic": [
                    257,
                    692,
                    405,
                    314,
                    732
                ],
                "iNaT": [
                    258,
                    315
                ],
                "self._box_func": [
                    259,
                    268,
                    325,
                    316
                ],
                "self.hasnans": [
                    344,
                    261,
                    318,
                    287
                ],
                "skipna": [
                    289,
                    346,
                    262,
                    319
                ],
                "min_stamp": [
                    267,
                    268,
                    263
                ],
                "asi8.min": [
                    263
                ],
                "asi8": [
                    320,
                    938,
                    263
                ],
                "self._isnan": [
                    288,
                    345,
                    320,
                    263
                ],
                "i8.min": [
                    267
                ],
                "nv.validate_argmin": [
                    283
                ],
                "mask": [
                    288,
                    289,
                    292,
                    345,
                    346,
                    349
                ],
                "mask.all": [
                    289,
                    346
                ],
                "i8.copy": [
                    291,
                    348
                ],
                "np.iinfo": [
                    292
                ],
                "i8.argmin": [
                    293
                ],
                "nv.validate_max": [
                    305
                ],
                "max_stamp": [
                    320,
                    324,
                    325
                ],
                "asi8.max": [
                    320
                ],
                "i8.max": [
                    324
                ],
                "nv.validate_argmax": [
                    340
                ],
                "i8.argmax": [
                    350
                ],
                "header": [
                    356
                ],
                "self._format_native_types": [
                    356
                ],
                "na_rep": [
                    356
                ],
                "AbstractMethodError": [
                    360
                ],
                "_format_attrs": [
                    366
                ],
                "attrib": [
                    368,
                    367
                ],
                "self._attributes": [
                    367
                ],
                "self.freqstr": [
                    369,
                    522
                ],
                "attrs.append": [
                    372
                ],
                "datetime": [
                    385,
                    381
                ],
                "self._validate_partial_date_slice": [
                    399
                ],
                "reso": [
                    401,
                    399
                ],
                "t1": [
                    418,
                    423,
                    401,
                    408,
                    409
                ],
                "t2": [
                    419,
                    424,
                    401,
                    408,
                    409
                ],
                "self._parsed_string_to_bounds": [
                    401
                ],
                "parsed": [
                    401
                ],
                "i8vals": [
                    418,
                    419,
                    423,
                    424,
                    402
                ],
                "unbox": [
                    418,
                    419,
                    423,
                    424,
                    403
                ],
                "self._data._unbox_scalar": [
                    403
                ],
                "use_lhs": [
                    408,
                    418,
                    423
                ],
                "use_rhs": [
                    424,
                    409,
                    419
                ],
                "i8vals.searchsorted": [
                    418,
                    419
                ],
                "lhs_mask": [
                    427,
                    423
                ],
                "rhs_mask": [
                    424,
                    427
                ],
                "nonzero": [
                    427
                ],
                "__add__": [
                    431
                ],
                "make_wrapped_arith_op": [
                    431,
                    432,
                    433,
                    434,
                    435,
                    436,
                    437,
                    438,
                    439,
                    440,
                    441,
                    442,
                    443,
                    444,
                    445,
                    446
                ],
                "__radd__": [
                    432
                ],
                "__sub__": [
                    433
                ],
                "__rsub__": [
                    434
                ],
                "__pow__": [
                    435
                ],
                "__rpow__": [
                    436
                ],
                "__mul__": [
                    437
                ],
                "__rmul__": [
                    438
                ],
                "__floordiv__": [
                    439
                ],
                "__rfloordiv__": [
                    440
                ],
                "__mod__": [
                    441
                ],
                "__rmod__": [
                    442
                ],
                "__divmod__": [
                    443
                ],
                "__rdivmod__": [
                    444
                ],
                "__truediv__": [
                    445
                ],
                "__rtruediv__": [
                    446
                ],
                "level": [
                    844,
                    461,
                    462
                ],
                "self._validate_index_level": [
                    462
                ],
                "values": [
                    620,
                    494,
                    622,
                    464,
                    623,
                    466,
                    625,
                    468,
                    627,
                    470,
                    629,
                    474
                ],
                "isin": [
                    468
                ],
                "algorithms.isin": [
                    470
                ],
                "algorithms": [
                    470
                ],
                "values.asi8": [
                    470
                ],
                "self.view": [
                    474,
                    757
                ],
                "isna": [
                    476,
                    917
                ],
                "NaT.value": [
                    477
                ],
                "is_categorical_dtype": [
                    484
                ],
                "other.categories.dtype": [
                    486
                ],
                "other.categories": [
                    486
                ],
                "other._internal_get_values": [
                    487
                ],
                "other.view": [
                    760,
                    492
                ],
                "astype": [
                    494
                ],
                "np.where": [
                    494
                ],
                "cond": [
                    494
                ],
                "Index.where.__doc__": [
                    472
                ],
                "Index.where": [
                    472
                ],
                "formatter": [
                    512,
                    514
                ],
                "self._formatter_func": [
                    512
                ],
                "index_summary": [
                    520,
                    514,
                    516
                ],
                "name": [
                    518,
                    519,
                    520,
                    619,
                    629,
                    887,
                    892
                ],
                "result.replace": [
                    525
                ],
                "self._data._time_shift": [
                    558
                ],
                "periods": [
                    558
                ],
                "new_i8s": [
                    937,
                    940,
                    580,
                    565
                ],
                "np.delete": [
                    565
                ],
                "loc": [
                    576,
                    577,
                    770,
                    771,
                    930,
                    932,
                    938,
                    785,
                    786,
                    946,
                    565,
                    570,
                    571,
                    574,
                    575
                ],
                "is_integer": [
                    570
                ],
                "np.array": [
                    575
                ],
                "loc.step": [
                    576
                ],
                "loc.start": [
                    577
                ],
                "loc.stop": [
                    577
                ],
                "inherit_names": [
                    81,
                    76
                ],
                "DatetimeIndexOpsMixin": [
                    584
                ],
                "Int64Index": [
                    584,
                    810,
                    811
                ],
                "_is_monotonic_increasing": [
                    591
                ],
                "Index.is_monotonic_increasing": [
                    591
                ],
                "_is_monotonic_decreasing": [
                    592
                ],
                "Index.is_monotonic_decreasing": [
                    592
                ],
                "_is_unique": [
                    593
                ],
                "Index.is_unique": [
                    593
                ],
                "to_offset": [
                    614
                ],
                "self.inferred_freq": [
                    614
                ],
                "self._data._freq": [
                    616
                ],
                "Label": [
                    618
                ],
                "lib.no_default": [
                    618,
                    619
                ],
                "cache": [
                    620,
                    630
                ],
                "self._cache.copy": [
                    620
                ],
                "self._cache": [
                    620
                ],
                "result._cache": [
                    630
                ],
                "new_idx": [
                    640,
                    638,
                    639
                ],
                "difference": [
                    638
                ],
                "sort": [
                    805,
                    681,
                    765,
                    797,
                    812,
                    846,
                    694,
                    669,
                    638
                ],
                "new_idx._set_freq": [
                    639
                ],
                "Index.difference.__doc__": [
                    636
                ],
                "Index.difference": [
                    636
                ],
                "self._validate_sort_keyword": [
                    669
                ],
                "self._assert_can_do_setop": [
                    670
                ],
                "self.equals": [
                    672,
                    796
                ],
                "self._get_reconciled_name_object": [
                    673
                ],
                "self.copy": [
                    676
                ],
                "other.copy": [
                    678
                ],
                "Index.intersection": [
                    681,
                    694
                ],
                "result.freq": [
                    683,
                    701,
                    806
                ],
                "result._set_freq": [
                    774,
                    807,
                    684,
                    789,
                    699,
                    702
                ],
                "other.freq": [
                    688,
                    729,
                    690,
                    691
                ],
                "other.freq.is_anchored": [
                    691
                ],
                "other.is_monotonic": [
                    732,
                    692
                ],
                "self._shallow_copy": [
                    721,
                    788,
                    700,
                    773
                ],
                "result._data": [
                    700
                ],
                "result.name": [
                    700
                ],
                "end": [
                    713,
                    716,
                    719
                ],
                "start": [
                    714,
                    716,
                    719
                ],
                "lslice": [
                    720,
                    719
                ],
                "left.slice_locs": [
                    719
                ],
                "left_chunk": [
                    720,
                    721
                ],
                "left.values": [
                    720,
                    787,
                    772
                ],
                "right_start": [
                    744,
                    749
                ],
                "left_end": [
                    745,
                    780,
                    749,
                    784,
                    785
                ],
                "left_start": [
                    769,
                    770
                ],
                "right.searchsorted": [
                    785,
                    770
                ],
                "right_chunk": [
                    787,
                    786,
                    771,
                    772
                ],
                "right.values": [
                    786,
                    771
                ],
                "dates": [
                    788,
                    787,
                    772,
                    773
                ],
                "concat_compat": [
                    787,
                    772
                ],
                "right_end": [
                    784,
                    781
                ],
                "_union": [
                    797
                ],
                "this": [
                    864,
                    802,
                    804,
                    805,
                    839,
                    841,
                    850,
                    852,
                    862
                ],
                "self._maybe_utc_convert": [
                    802,
                    839
                ],
                "this._can_fast_union": [
                    804
                ],
                "this._fast_union": [
                    805
                ],
                "i8self": [
                    810,
                    812
                ],
                "Int64Index._simple_new": [
                    810,
                    811
                ],
                "i8other": [
                    811,
                    812
                ],
                "other.name": [
                    811
                ],
                "i8result": [
                    812,
                    813
                ],
                "i8self._union": [
                    812
                ],
                "_join_precedence": [
                    818
                ],
                "_inner_indexer": [
                    820
                ],
                "_join_i8_wrapper": [
                    820,
                    821,
                    822,
                    823
                ],
                "libjoin.inner_join_indexer": [
                    820
                ],
                "libjoin": [
                    824,
                    820,
                    821,
                    822
                ],
                "_outer_indexer": [
                    821
                ],
                "libjoin.outer_join_indexer": [
                    821
                ],
                "_left_indexer": [
                    822
                ],
                "libjoin.left_join_indexer": [
                    822
                ],
                "_left_indexer_unique": [
                    823
                ],
                "libjoin.left_join_indexer_unique": [
                    824
                ],
                "self._is_convertible_to_index_for_join": [
                    833
                ],
                "Index.join": [
                    840
                ],
                "how": [
                    843
                ],
                "return_indexers": [
                    845
                ],
                "self.tz": [
                    861,
                    855
                ],
                "other.tz": [
                    856,
                    858,
                    861
                ],
                "timezones.tz_compare": [
                    861
                ],
                "timezones": [
                    861
                ],
                "self.tz_convert": [
                    862
                ],
                "other.tz_convert": [
                    863
                ],
                "cls": [
                    872
                ],
                "other.inferred_type": [
                    874
                ],
                "get_op_result_name": [
                    887
                ],
                "self._can_fast_union": [
                    889
                ],
                "new_data": [
                    890,
                    892
                ],
                "joined": [
                    890
                ],
                "item": [
                    928,
                    930,
                    932,
                    934,
                    938,
                    912,
                    913,
                    914,
                    945,
                    916,
                    917,
                    946,
                    923,
                    924
                ],
                "self._data._recognized_scalars": [
                    912
                ],
                "self._data._scalar_type": [
                    913,
                    923
                ],
                "is_valid_nat_for_dtype": [
                    914
                ],
                "self._data._check_compatible_with": [
                    924
                ],
                "self.size": [
                    927
                ],
                "item.asm8": [
                    934
                ],
                "np.concatenate": [
                    937
                ],
                "item.view": [
                    938
                ],
                "np.int64": [
                    938
                ],
                "insert": [
                    946
                ],
                "err": [
                    949
                ]
            }
        },
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/core/indexes/datetimes.py": {
            "buggy_functions": [],
            "inscope_functions": [
                "_new_DatetimeIndex(cls, d)",
                "date_range(start=None, end=None, periods=None, freq=None, tz=None, normalize=False, name=None, closed=None, **kwargs) -> DatetimeIndex",
                "bdate_range(start=None, end=None, periods=None, freq='B', tz=None, normalize=True, name=None, weekmask=None, holidays=None, closed=None, **kwargs) -> DatetimeIndex",
                "_time_to_micros(time)",
                "__new__(cls, data=None, freq=None, tz=None, normalize=False, closed=None, ambiguous='raise', dayfirst=False, yearfirst=False, dtype=None, copy=False, name=None)",
                "_simple_new(cls, values: DatetimeArray, name: Label=None)",
                "_is_dates_only(self) -> bool",
                "__reduce__(self)",
                "_convert_for_op(self, value)",
                "_mpl_repr(self)",
                "_formatter_func(self)",
                "union_many(self, others)",
                "_get_time_micros(self)",
                "to_series(self, keep_tz=lib.no_default, index=None, name=None)",
                "snap(self, freq='S')",
                "_parsed_string_to_bounds(self, reso: str, parsed: datetime)",
                "_validate_partial_date_slice(self, reso: str)",
                "_maybe_promote(self, other)",
                "get_loc(self, key, method=None, tolerance=None)",
                "_maybe_cast_for_get_loc(self, key) -> Timestamp",
                "_maybe_cast_slice_bound(self, label, side: str, kind)",
                "_get_string_slice(self, key: str, use_lhs: bool=True, use_rhs: bool=True)",
                "slice_indexer(self, start=None, end=None, step=None, kind=None)",
                "is_type_compatible(self, typ) -> bool",
                "inferred_type(self) -> str",
                "indexer_at_time(self, time, asof=False)",
                "indexer_between_time(self, start_time, end_time, include_start=True, include_end=True)"
            ],
            "variables_in_file": {
                "d": [
                    32,
                    289,
                    34,
                    290,
                    291,
                    38,
                    39,
                    46,
                    47,
                    48,
                    54
                ],
                "isinstance": [
                    257,
                    649,
                    1037,
                    654,
                    659,
                    661,
                    541,
                    670,
                    671,
                    32,
                    545,
                    35,
                    556,
                    562,
                    325,
                    329,
                    724,
                    607,
                    610
                ],
                "DatetimeIndex": [
                    32,
                    451,
                    803,
                    325,
                    968,
                    329,
                    331,
                    523,
                    789,
                    790,
                    953
                ],
                "data": [
                    34,
                    35,
                    231,
                    40,
                    42,
                    234,
                    239,
                    242
                ],
                "d.pop": [
                    34,
                    47,
                    38,
                    39
                ],
                "DatetimeArray": [
                    256,
                    257,
                    450,
                    35,
                    66,
                    40,
                    943,
                    241,
                    210,
                    85,
                    86,
                    61,
                    62,
                    63
                ],
                "tz": [
                    1056,
                    38,
                    40,
                    211,
                    948,
                    245
                ],
                "freq": [
                    1033,
                    1037,
                    1040,
                    1042,
                    1047,
                    1055,
                    39,
                    40,
                    940,
                    941,
                    435,
                    947,
                    441,
                    442,
                    443,
                    611,
                    612,
                    627,
                    628,
                    246
                ],
                "dta": [
                    450,
                    451,
                    40,
                    42,
                    47,
                    48
                ],
                "DatetimeArray._simple_new": [
                    40
                ],
                "tz_to_dtype": [
                    40
                ],
                "key": [
                    534,
                    535,
                    537,
                    538,
                    539,
                    541,
                    543,
                    545,
                    547,
                    552,
                    554,
                    43,
                    556,
                    46,
                    47,
                    559,
                    562,
                    567,
                    571,
                    574,
                    580,
                    581,
                    582,
                    584,
                    585,
                    628
                ],
                "getattr": [
                    627,
                    611,
                    47
                ],
                "result": [
                    259,
                    260,
                    261,
                    262,
                    263,
                    265,
                    266,
                    267,
                    48,
                    54,
                    56
                ],
                "cls._simple_new": [
                    48,
                    252
                ],
                "cls": [
                    259,
                    233,
                    239,
                    48,
                    54,
                    252
                ],
                "warnings.catch_warnings": [
                    50
                ],
                "warnings": [
                    50,
                    406,
                    53,
                    398
                ],
                "warnings.simplefilter": [
                    53
                ],
                "cls.__new__": [
                    54
                ],
                "DatetimeTimedeltaMixin": [
                    88
                ],
                "_typ": [
                    199
                ],
                "_engine_type": [
                    201
                ],
                "libindex.DatetimeEngine": [
                    201
                ],
                "libindex": [
                    201
                ],
                "_supports_partial_string_indexing": [
                    202
                ],
                "_comparables": [
                    204
                ],
                "_attributes": [
                    205
                ],
                "_is_numeric_dtype": [
                    207
                ],
                "_infer_as_myclass": [
                    208
                ],
                "_data": [
                    210
                ],
                "Optional": [
                    211
                ],
                "tzinfo": [
                    211
                ],
                "is_scalar": [
                    534,
                    231
                ],
                "TypeError": [
                    548,
                    232,
                    1035,
                    332,
                    558,
                    1041
                ],
                "cls.__name__": [
                    233
                ],
                "repr": [
                    234
                ],
                "name": [
                    1058,
                    261,
                    424,
                    393,
                    394,
                    239,
                    953,
                    252
                ],
                "maybe_extract_name": [
                    239
                ],
                "dtarr": [
                    241,
                    953,
                    252,
                    943
                ],
                "DatetimeArray._from_sequence": [
                    241
                ],
                "dtype": [
                    243
                ],
                "copy": [
                    244
                ],
                "dayfirst": [
                    247
                ],
                "yearfirst": [
                    248
                ],
                "ambiguous": [
                    249
                ],
                "subarr": [
                    252,
                    253
                ],
                "Label": [
                    256
                ],
                "values": [
                    257,
                    260,
                    420,
                    422,
                    424,
                    265,
                    346,
                    348,
                    349
                ],
                "type": [
                    257,
                    291,
                    559
                ],
                "object.__new__": [
                    259
                ],
                "object": [
                    259
                ],
                "result._data": [
                    260
                ],
                "result.name": [
                    261
                ],
                "result._cache": [
                    262
                ],
                "result._no_setting_name": [
                    263
                ],
                "result._index_data": [
                    265
                ],
                "values._data": [
                    265
                ],
                "result._reset_identity": [
                    266
                ],
                "classmethod": [
                    255
                ],
                "_is_dates_only": [
                    282
                ],
                "self.values": [
                    282,
                    422
                ],
                "self": [
                    764,
                    392,
                    394,
                    524,
                    652,
                    665,
                    282,
                    538,
                    541,
                    543,
                    289,
                    290,
                    291,
                    418,
                    420,
                    422,
                    547,
                    552,
                    297,
                    675,
                    676,
                    679,
                    680,
                    683,
                    559,
                    306,
                    437,
                    693,
                    439,
                    312,
                    313,
                    567,
                    574,
                    322,
                    450,
                    451,
                    582,
                    584,
                    346,
                    347,
                    348,
                    730,
                    732,
                    734,
                    608,
                    611,
                    613,
                    492,
                    620,
                    497,
                    498,
                    499,
                    500,
                    501,
                    627,
                    629,
                    506,
                    508
                ],
                "self.tz": [
                    418,
                    582,
                    584,
                    492,
                    497,
                    306,
                    498,
                    499,
                    500,
                    501,
                    313,
                    282,
                    347,
                    730
                ],
                "cache_readonly": [
                    271
                ],
                "bool": [
                    272,
                    626,
                    692
                ],
                "dict": [
                    289
                ],
                "self._data": [
                    289,
                    348,
                    541
                ],
                "d.update": [
                    290
                ],
                "self._get_attributes_dict": [
                    290
                ],
                "_new_DatetimeIndex": [
                    291
                ],
                "self._has_same_tz": [
                    297
                ],
                "value": [
                    297,
                    298
                ],
                "asm8": [
                    298
                ],
                "Timestamp": [
                    298,
                    580,
                    578
                ],
                "ValueError": [
                    548,
                    553,
                    651,
                    299,
                    493,
                    1043,
                    1049,
                    731
                ],
                "libts.ints_to_pydatetime": [
                    306
                ],
                "libts": [
                    306
                ],
                "self.asi8": [
                    306,
                    346
                ],
                "formatter": [
                    312,
                    313
                ],
                "_get_format_datetime64": [
                    312
                ],
                "self._is_dates_only": [
                    312
                ],
                "x": [
                    313
                ],
                "property": [
                    308,
                    695
                ],
                "this": [
                    322,
                    325,
                    326,
                    335,
                    337,
                    338,
                    340,
                    341
                ],
                "other": [
                    324,
                    326,
                    329,
                    522,
                    331,
                    523,
                    524,
                    335,
                    337,
                    338,
                    340
                ],
                "others": [
                    324
                ],
                "Index.union": [
                    340,
                    326
                ],
                "Index": [
                    574,
                    665,
                    340,
                    326
                ],
                "this._maybe_utc_convert": [
                    335
                ],
                "this._can_fast_union": [
                    337
                ],
                "this._fast_union": [
                    338
                ],
                "timezones.is_utc": [
                    347
                ],
                "timezones": [
                    347
                ],
                "self._data._local_timestamps": [
                    348
                ],
                "fields.get_time_micros": [
                    349
                ],
                "fields": [
                    349
                ],
                "lib.no_default": [
                    396,
                    351
                ],
                "lib": [
                    396,
                    351
                ],
                "index": [
                    392,
                    424,
                    391
                ],
                "self._shallow_copy": [
                    392
                ],
                "self.name": [
                    394,
                    451
                ],
                "keep_tz": [
                    416,
                    418,
                    396,
                    397
                ],
                "warnings.warn": [
                    406,
                    398
                ],
                "FutureWarning": [
                    402,
                    412
                ],
                "self.copy": [
                    420
                ],
                "self.values.copy": [
                    422
                ],
                "Series": [
                    424
                ],
                "to_offset": [
                    435
                ],
                "snapped": [
                    448,
                    450,
                    437
                ],
                "np.empty": [
                    437
                ],
                "np": [
                    437
                ],
                "len": [
                    683,
                    620,
                    437
                ],
                "_NS_DTYPE": [
                    437
                ],
                "i": [
                    448,
                    439
                ],
                "v": [
                    440,
                    439
                ],
                "enumerate": [
                    439
                ],
                "s": [
                    448,
                    440,
                    441,
                    442,
                    443,
                    444,
                    445,
                    447
                ],
                "freq.is_on_offset": [
                    441
                ],
                "t0": [
                    442,
                    444,
                    445
                ],
                "freq.rollback": [
                    442
                ],
                "t1": [
                    443,
                    444,
                    447
                ],
                "freq.rollforward": [
                    443
                ],
                "abs": [
                    444
                ],
                "self.dtype": [
                    450,
                    538
                ],
                "DatetimeIndex._simple_new": [
                    953,
                    451
                ],
                "str": [
                    545,
                    610,
                    453,
                    587,
                    1037,
                    696,
                    626,
                    724,
                    504,
                    670,
                    671
                ],
                "datetime": [
                    453,
                    659,
                    660,
                    661,
                    662
                ],
                "valid_resos": [
                    480,
                    468
                ],
                "reso": [
                    480,
                    483,
                    516,
                    612,
                    613,
                    628,
                    629,
                    507,
                    508
                ],
                "KeyError": [
                    576,
                    481,
                    514,
                    548,
                    519,
                    554,
                    655,
                    1041,
                    666,
                    571,
                    575
                ],
                "grp": [
                    483,
                    484
                ],
                "Resolution.get_freq_group": [
                    483
                ],
                "Resolution": [
                    483,
                    508
                ],
                "per": [
                    484,
                    485
                ],
                "Period": [
                    484
                ],
                "parsed": [
                    612,
                    484,
                    613,
                    491,
                    497,
                    498,
                    628,
                    629
                ],
                "start": [
                    674,
                    675,
                    485,
                    649,
                    652,
                    940,
                    654,
                    944,
                    497,
                    659,
                    500,
                    660,
                    502,
                    665,
                    1052,
                    670
                ],
                "end": [
                    485,
                    678,
                    679,
                    649,
                    652,
                    940,
                    654,
                    945,
                    498,
                    501,
                    502,
                    661,
                    662,
                    665,
                    1053,
                    671
                ],
                "per.start_time": [
                    485
                ],
                "per.end_time": [
                    485
                ],
                "parsed.tzinfo": [
                    497,
                    498,
                    491
                ],
                "tz_convert": [
                    497,
                    498
                ],
                "start.tz_localize": [
                    497,
                    500
                ],
                "end.tz_localize": [
                    498,
                    501
                ],
                "self.is_monotonic": [
                    506
                ],
                "self._resolution": [
                    508
                ],
                "Resolution.get_reso": [
                    508
                ],
                "other.inferred_type": [
                    522
                ],
                "InvalidIndexError": [
                    535
                ],
                "orig_key": [
                    576,
                    537
                ],
                "is_valid_nat_for_dtype": [
                    538
                ],
                "NaT": [
                    539
                ],
                "self._data._recognized_scalars": [
                    541
                ],
                "self._maybe_cast_for_get_loc": [
                    552,
                    543
                ],
                "self._get_string_slice": [
                    547
                ],
                "OverflowError": [
                    548
                ],
                "err": [
                    576,
                    554,
                    1043
                ],
                "timedelta": [
                    556
                ],
                "__name__": [
                    559
                ],
                "time": [
                    649,
                    1065,
                    1066,
                    654,
                    562,
                    735,
                    660,
                    724,
                    662,
                    727,
                    729,
                    732,
                    607
                ],
                "method": [
                    563,
                    574
                ],
                "NotImplementedError": [
                    722,
                    564
                ],
                "self.indexer_at_time": [
                    567
                ],
                "Index.get_loc": [
                    574
                ],
                "tolerance": [
                    574
                ],
                "key.tzinfo": [
                    581
                ],
                "key.tz_localize": [
                    582
                ],
                "key.tz_convert": [
                    584
                ],
                "kind": [
                    665,
                    675,
                    605,
                    679
                ],
                "is_float": [
                    607
                ],
                "label": [
                    608,
                    610,
                    612,
                    624,
                    607
                ],
                "is_integer": [
                    607
                ],
                "self._invalid_indexer": [
                    608
                ],
                "parsing.parse_time_string": [
                    628,
                    612
                ],
                "parsing": [
                    628,
                    612
                ],
                "lower": [
                    621,
                    613,
                    622
                ],
                "upper": [
                    621,
                    613,
                    622
                ],
                "self._parsed_string_to_bounds": [
                    613
                ],
                "self._is_strictly_monotonic_decreasing": [
                    620
                ],
                "side": [
                    621,
                    622
                ],
                "loc": [
                    629,
                    630
                ],
                "self._partial_date_slice": [
                    629
                ],
                "use_lhs": [
                    629
                ],
                "use_rhs": [
                    629
                ],
                "step": [
                    682,
                    665,
                    650
                ],
                "self.indexer_between_time": [
                    652
                ],
                "date": [
                    659,
                    661
                ],
                "datetime.combine": [
                    660,
                    662
                ],
                "Index.slice_indexer": [
                    665
                ],
                "mask": [
                    673,
                    676,
                    680,
                    682,
                    784,
                    786
                ],
                "start_casted": [
                    675,
                    676
                ],
                "self._maybe_cast_slice_bound": [
                    675,
                    679
                ],
                "end_casted": [
                    680,
                    679
                ],
                "indexer": [
                    682,
                    683,
                    686
                ],
                "mask.nonzero": [
                    682,
                    786
                ],
                "slice": [
                    684
                ],
                "typ": [
                    693
                ],
                "self.inferred_type": [
                    693
                ],
                "asof": [
                    721
                ],
                "parse": [
                    727
                ],
                "time.tzinfo": [
                    729,
                    732
                ],
                "time_micros": [
                    736,
                    764,
                    784,
                    732,
                    734
                ],
                "_get_time_micros": [
                    732
                ],
                "self.tz_convert": [
                    732
                ],
                "self._get_time_micros": [
                    764,
                    734
                ],
                "micros": [
                    736,
                    735
                ],
                "_time_to_micros": [
                    765,
                    766,
                    735
                ],
                "nonzero": [
                    736
                ],
                "start_time": [
                    762,
                    779,
                    765
                ],
                "tools.to_time": [
                    762,
                    763
                ],
                "tools": [
                    762,
                    763
                ],
                "end_time": [
                    779,
                    763,
                    766
                ],
                "start_micros": [
                    784,
                    765
                ],
                "end_micros": [
                    784,
                    766
                ],
                "include_start": [
                    768,
                    770
                ],
                "include_end": [
                    768,
                    773
                ],
                "lop": [
                    769,
                    771,
                    774,
                    777,
                    784
                ],
                "rop": [
                    769,
                    772,
                    775,
                    777,
                    784
                ],
                "operator.le": [
                    769,
                    771,
                    775
                ],
                "operator": [
                    769,
                    771,
                    772,
                    774,
                    775,
                    777,
                    780,
                    782
                ],
                "operator.lt": [
                    777,
                    772,
                    774
                ],
                "join_op": [
                    784,
                    780,
                    782
                ],
                "operator.and_": [
                    780
                ],
                "operator.or_": [
                    782
                ],
                "inherit_names": [
                    67,
                    66,
                    59
                ],
                "DatetimeArray._field_ops": [
                    61
                ],
                "DatetimeArray._datetimelike_methods": [
                    62
                ],
                "DatetimeArray._bool_ops": [
                    85
                ],
                "DatetimeIndex._add_numeric_methods_disabled": [
                    789
                ],
                "DatetimeIndex._add_logical_methods_disabled": [
                    790
                ],
                "com.any_none": [
                    940
                ],
                "com": [
                    940
                ],
                "periods": [
                    946,
                    940,
                    1054
                ],
                "DatetimeArray._generate_range": [
                    943
                ],
                "normalize": [
                    1057,
                    949
                ],
                "closed": [
                    1059,
                    950
                ],
                "kwargs": [
                    1060,
                    951
                ],
                "msg": [
                    1034,
                    1035,
                    1042,
                    1043,
                    1045,
                    1049
                ],
                "freq.startswith": [
                    1037
                ],
                "weekmask": [
                    1040,
                    1044,
                    1039
                ],
                "prefix_mapping": [
                    1040
                ],
                "holidays": [
                    1040,
                    1044
                ],
                "date_range": [
                    1051
                ],
                "seconds": [
                    1065,
                    1066
                ],
                "time.hour": [
                    1065
                ],
                "time.minute": [
                    1065
                ],
                "time.second": [
                    1065
                ],
                "time.microsecond": [
                    1066
                ]
            },
            "filtered_variables_in_file": {
                "d": [
                    32,
                    289,
                    34,
                    290,
                    291,
                    38,
                    39,
                    46,
                    47,
                    48,
                    54
                ],
                "DatetimeIndex": [
                    32,
                    451,
                    803,
                    325,
                    968,
                    329,
                    331,
                    523,
                    789,
                    790,
                    953
                ],
                "data": [
                    34,
                    35,
                    231,
                    40,
                    42,
                    234,
                    239,
                    242
                ],
                "d.pop": [
                    34,
                    47,
                    38,
                    39
                ],
                "DatetimeArray": [
                    256,
                    257,
                    450,
                    35,
                    66,
                    40,
                    943,
                    241,
                    210,
                    85,
                    86,
                    61,
                    62,
                    63
                ],
                "tz": [
                    1056,
                    38,
                    40,
                    211,
                    948,
                    245
                ],
                "freq": [
                    1033,
                    1037,
                    1040,
                    1042,
                    1047,
                    1055,
                    39,
                    40,
                    940,
                    941,
                    435,
                    947,
                    441,
                    442,
                    443,
                    611,
                    612,
                    627,
                    628,
                    246
                ],
                "dta": [
                    450,
                    451,
                    40,
                    42,
                    47,
                    48
                ],
                "DatetimeArray._simple_new": [
                    40
                ],
                "tz_to_dtype": [
                    40
                ],
                "key": [
                    534,
                    535,
                    537,
                    538,
                    539,
                    541,
                    543,
                    545,
                    547,
                    552,
                    554,
                    43,
                    556,
                    46,
                    47,
                    559,
                    562,
                    567,
                    571,
                    574,
                    580,
                    581,
                    582,
                    584,
                    585,
                    628
                ],
                "result": [
                    259,
                    260,
                    261,
                    262,
                    263,
                    265,
                    266,
                    267,
                    48,
                    54,
                    56
                ],
                "cls._simple_new": [
                    48,
                    252
                ],
                "cls": [
                    259,
                    233,
                    239,
                    48,
                    54,
                    252
                ],
                "warnings.catch_warnings": [
                    50
                ],
                "warnings": [
                    50,
                    406,
                    53,
                    398
                ],
                "warnings.simplefilter": [
                    53
                ],
                "cls.__new__": [
                    54
                ],
                "DatetimeTimedeltaMixin": [
                    88
                ],
                "_typ": [
                    199
                ],
                "_engine_type": [
                    201
                ],
                "libindex.DatetimeEngine": [
                    201
                ],
                "libindex": [
                    201
                ],
                "_supports_partial_string_indexing": [
                    202
                ],
                "_comparables": [
                    204
                ],
                "_attributes": [
                    205
                ],
                "_is_numeric_dtype": [
                    207
                ],
                "_infer_as_myclass": [
                    208
                ],
                "_data": [
                    210
                ],
                "Optional": [
                    211
                ],
                "tzinfo": [
                    211
                ],
                "is_scalar": [
                    534,
                    231
                ],
                "cls.__name__": [
                    233
                ],
                "name": [
                    1058,
                    261,
                    424,
                    393,
                    394,
                    239,
                    953,
                    252
                ],
                "maybe_extract_name": [
                    239
                ],
                "dtarr": [
                    241,
                    953,
                    252,
                    943
                ],
                "DatetimeArray._from_sequence": [
                    241
                ],
                "dtype": [
                    243
                ],
                "copy": [
                    244
                ],
                "dayfirst": [
                    247
                ],
                "yearfirst": [
                    248
                ],
                "ambiguous": [
                    249
                ],
                "subarr": [
                    252,
                    253
                ],
                "Label": [
                    256
                ],
                "values": [
                    257,
                    260,
                    420,
                    422,
                    424,
                    265,
                    346,
                    348,
                    349
                ],
                "object.__new__": [
                    259
                ],
                "result._data": [
                    260
                ],
                "result.name": [
                    261
                ],
                "result._cache": [
                    262
                ],
                "result._no_setting_name": [
                    263
                ],
                "result._index_data": [
                    265
                ],
                "values._data": [
                    265
                ],
                "result._reset_identity": [
                    266
                ],
                "_is_dates_only": [
                    282
                ],
                "self.values": [
                    282,
                    422
                ],
                "self": [
                    764,
                    392,
                    394,
                    524,
                    652,
                    665,
                    282,
                    538,
                    541,
                    543,
                    289,
                    290,
                    291,
                    418,
                    420,
                    422,
                    547,
                    552,
                    297,
                    675,
                    676,
                    679,
                    680,
                    683,
                    559,
                    306,
                    437,
                    693,
                    439,
                    312,
                    313,
                    567,
                    574,
                    322,
                    450,
                    451,
                    582,
                    584,
                    346,
                    347,
                    348,
                    730,
                    732,
                    734,
                    608,
                    611,
                    613,
                    492,
                    620,
                    497,
                    498,
                    499,
                    500,
                    501,
                    627,
                    629,
                    506,
                    508
                ],
                "self.tz": [
                    418,
                    582,
                    584,
                    492,
                    497,
                    306,
                    498,
                    499,
                    500,
                    501,
                    313,
                    282,
                    347,
                    730
                ],
                "cache_readonly": [
                    271
                ],
                "self._data": [
                    289,
                    348,
                    541
                ],
                "d.update": [
                    290
                ],
                "self._get_attributes_dict": [
                    290
                ],
                "_new_DatetimeIndex": [
                    291
                ],
                "self._has_same_tz": [
                    297
                ],
                "value": [
                    297,
                    298
                ],
                "asm8": [
                    298
                ],
                "Timestamp": [
                    298,
                    580,
                    578
                ],
                "libts.ints_to_pydatetime": [
                    306
                ],
                "libts": [
                    306
                ],
                "self.asi8": [
                    306,
                    346
                ],
                "formatter": [
                    312,
                    313
                ],
                "_get_format_datetime64": [
                    312
                ],
                "self._is_dates_only": [
                    312
                ],
                "x": [
                    313
                ],
                "this": [
                    322,
                    325,
                    326,
                    335,
                    337,
                    338,
                    340,
                    341
                ],
                "other": [
                    324,
                    326,
                    329,
                    522,
                    331,
                    523,
                    524,
                    335,
                    337,
                    338,
                    340
                ],
                "others": [
                    324
                ],
                "Index.union": [
                    340,
                    326
                ],
                "Index": [
                    574,
                    665,
                    340,
                    326
                ],
                "this._maybe_utc_convert": [
                    335
                ],
                "this._can_fast_union": [
                    337
                ],
                "this._fast_union": [
                    338
                ],
                "timezones.is_utc": [
                    347
                ],
                "timezones": [
                    347
                ],
                "self._data._local_timestamps": [
                    348
                ],
                "fields.get_time_micros": [
                    349
                ],
                "fields": [
                    349
                ],
                "lib.no_default": [
                    396,
                    351
                ],
                "lib": [
                    396,
                    351
                ],
                "index": [
                    392,
                    424,
                    391
                ],
                "self._shallow_copy": [
                    392
                ],
                "self.name": [
                    394,
                    451
                ],
                "keep_tz": [
                    416,
                    418,
                    396,
                    397
                ],
                "warnings.warn": [
                    406,
                    398
                ],
                "self.copy": [
                    420
                ],
                "self.values.copy": [
                    422
                ],
                "Series": [
                    424
                ],
                "to_offset": [
                    435
                ],
                "snapped": [
                    448,
                    450,
                    437
                ],
                "np.empty": [
                    437
                ],
                "np": [
                    437
                ],
                "_NS_DTYPE": [
                    437
                ],
                "i": [
                    448,
                    439
                ],
                "v": [
                    440,
                    439
                ],
                "s": [
                    448,
                    440,
                    441,
                    442,
                    443,
                    444,
                    445,
                    447
                ],
                "freq.is_on_offset": [
                    441
                ],
                "t0": [
                    442,
                    444,
                    445
                ],
                "freq.rollback": [
                    442
                ],
                "t1": [
                    443,
                    444,
                    447
                ],
                "freq.rollforward": [
                    443
                ],
                "self.dtype": [
                    450,
                    538
                ],
                "DatetimeIndex._simple_new": [
                    953,
                    451
                ],
                "datetime": [
                    453,
                    659,
                    660,
                    661,
                    662
                ],
                "valid_resos": [
                    480,
                    468
                ],
                "reso": [
                    480,
                    483,
                    516,
                    612,
                    613,
                    628,
                    629,
                    507,
                    508
                ],
                "grp": [
                    483,
                    484
                ],
                "Resolution.get_freq_group": [
                    483
                ],
                "Resolution": [
                    483,
                    508
                ],
                "per": [
                    484,
                    485
                ],
                "Period": [
                    484
                ],
                "parsed": [
                    612,
                    484,
                    613,
                    491,
                    497,
                    498,
                    628,
                    629
                ],
                "start": [
                    674,
                    675,
                    485,
                    649,
                    652,
                    940,
                    654,
                    944,
                    497,
                    659,
                    500,
                    660,
                    502,
                    665,
                    1052,
                    670
                ],
                "end": [
                    485,
                    678,
                    679,
                    649,
                    652,
                    940,
                    654,
                    945,
                    498,
                    501,
                    502,
                    661,
                    662,
                    665,
                    1053,
                    671
                ],
                "per.start_time": [
                    485
                ],
                "per.end_time": [
                    485
                ],
                "parsed.tzinfo": [
                    497,
                    498,
                    491
                ],
                "tz_convert": [
                    497,
                    498
                ],
                "start.tz_localize": [
                    497,
                    500
                ],
                "end.tz_localize": [
                    498,
                    501
                ],
                "self.is_monotonic": [
                    506
                ],
                "self._resolution": [
                    508
                ],
                "Resolution.get_reso": [
                    508
                ],
                "other.inferred_type": [
                    522
                ],
                "InvalidIndexError": [
                    535
                ],
                "orig_key": [
                    576,
                    537
                ],
                "is_valid_nat_for_dtype": [
                    538
                ],
                "NaT": [
                    539
                ],
                "self._data._recognized_scalars": [
                    541
                ],
                "self._maybe_cast_for_get_loc": [
                    552,
                    543
                ],
                "self._get_string_slice": [
                    547
                ],
                "err": [
                    576,
                    554,
                    1043
                ],
                "timedelta": [
                    556
                ],
                "time": [
                    649,
                    1065,
                    1066,
                    654,
                    562,
                    735,
                    660,
                    724,
                    662,
                    727,
                    729,
                    732,
                    607
                ],
                "method": [
                    563,
                    574
                ],
                "self.indexer_at_time": [
                    567
                ],
                "Index.get_loc": [
                    574
                ],
                "tolerance": [
                    574
                ],
                "key.tzinfo": [
                    581
                ],
                "key.tz_localize": [
                    582
                ],
                "key.tz_convert": [
                    584
                ],
                "kind": [
                    665,
                    675,
                    605,
                    679
                ],
                "is_float": [
                    607
                ],
                "label": [
                    608,
                    610,
                    612,
                    624,
                    607
                ],
                "is_integer": [
                    607
                ],
                "self._invalid_indexer": [
                    608
                ],
                "parsing.parse_time_string": [
                    628,
                    612
                ],
                "parsing": [
                    628,
                    612
                ],
                "lower": [
                    621,
                    613,
                    622
                ],
                "upper": [
                    621,
                    613,
                    622
                ],
                "self._parsed_string_to_bounds": [
                    613
                ],
                "self._is_strictly_monotonic_decreasing": [
                    620
                ],
                "side": [
                    621,
                    622
                ],
                "loc": [
                    629,
                    630
                ],
                "self._partial_date_slice": [
                    629
                ],
                "use_lhs": [
                    629
                ],
                "use_rhs": [
                    629
                ],
                "step": [
                    682,
                    665,
                    650
                ],
                "self.indexer_between_time": [
                    652
                ],
                "date": [
                    659,
                    661
                ],
                "datetime.combine": [
                    660,
                    662
                ],
                "Index.slice_indexer": [
                    665
                ],
                "mask": [
                    673,
                    676,
                    680,
                    682,
                    784,
                    786
                ],
                "start_casted": [
                    675,
                    676
                ],
                "self._maybe_cast_slice_bound": [
                    675,
                    679
                ],
                "end_casted": [
                    680,
                    679
                ],
                "indexer": [
                    682,
                    683,
                    686
                ],
                "mask.nonzero": [
                    682,
                    786
                ],
                "typ": [
                    693
                ],
                "self.inferred_type": [
                    693
                ],
                "asof": [
                    721
                ],
                "parse": [
                    727
                ],
                "time.tzinfo": [
                    729,
                    732
                ],
                "time_micros": [
                    736,
                    764,
                    784,
                    732,
                    734
                ],
                "_get_time_micros": [
                    732
                ],
                "self.tz_convert": [
                    732
                ],
                "self._get_time_micros": [
                    764,
                    734
                ],
                "micros": [
                    736,
                    735
                ],
                "_time_to_micros": [
                    765,
                    766,
                    735
                ],
                "nonzero": [
                    736
                ],
                "start_time": [
                    762,
                    779,
                    765
                ],
                "tools.to_time": [
                    762,
                    763
                ],
                "tools": [
                    762,
                    763
                ],
                "end_time": [
                    779,
                    763,
                    766
                ],
                "start_micros": [
                    784,
                    765
                ],
                "end_micros": [
                    784,
                    766
                ],
                "include_start": [
                    768,
                    770
                ],
                "include_end": [
                    768,
                    773
                ],
                "lop": [
                    769,
                    771,
                    774,
                    777,
                    784
                ],
                "rop": [
                    769,
                    772,
                    775,
                    777,
                    784
                ],
                "operator.le": [
                    769,
                    771,
                    775
                ],
                "operator": [
                    769,
                    771,
                    772,
                    774,
                    775,
                    777,
                    780,
                    782
                ],
                "operator.lt": [
                    777,
                    772,
                    774
                ],
                "join_op": [
                    784,
                    780,
                    782
                ],
                "operator.and_": [
                    780
                ],
                "operator.or_": [
                    782
                ],
                "inherit_names": [
                    67,
                    66,
                    59
                ],
                "DatetimeArray._field_ops": [
                    61
                ],
                "DatetimeArray._datetimelike_methods": [
                    62
                ],
                "DatetimeArray._bool_ops": [
                    85
                ],
                "DatetimeIndex._add_numeric_methods_disabled": [
                    789
                ],
                "DatetimeIndex._add_logical_methods_disabled": [
                    790
                ],
                "com.any_none": [
                    940
                ],
                "com": [
                    940
                ],
                "periods": [
                    946,
                    940,
                    1054
                ],
                "DatetimeArray._generate_range": [
                    943
                ],
                "normalize": [
                    1057,
                    949
                ],
                "closed": [
                    1059,
                    950
                ],
                "kwargs": [
                    1060,
                    951
                ],
                "msg": [
                    1034,
                    1035,
                    1042,
                    1043,
                    1045,
                    1049
                ],
                "freq.startswith": [
                    1037
                ],
                "weekmask": [
                    1040,
                    1044,
                    1039
                ],
                "prefix_mapping": [
                    1040
                ],
                "holidays": [
                    1040,
                    1044
                ],
                "date_range": [
                    1051
                ],
                "seconds": [
                    1065,
                    1066
                ],
                "time.hour": [
                    1065
                ],
                "time.minute": [
                    1065
                ],
                "time.second": [
                    1065
                ],
                "time.microsecond": [
                    1066
                ]
            }
        },
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/core/indexes/period.py": {
            "buggy_functions": [
                {
                    "function_name": "get_indexer_non_unique",
                    "function_code": "@Appender(_index_shared_docs[\"get_indexer_non_unique\"] % _index_doc_kwargs)\ndef get_indexer_non_unique(self, target):\n    target = ensure_index(target)\n\n    if isinstance(target, PeriodIndex):\n        if target.freq != self.freq:\n            no_matches = -1 * np.ones(self.shape, dtype=np.intp)\n            return no_matches, no_matches\n\n        target = target.asi8\n\n    indexer, missing = self._int64index.get_indexer_non_unique(target)\n    return ensure_platform_int(indexer), missing\n",
                    "decorators": [
                        "Appender(_index_shared_docs['get_indexer_non_unique'] % _index_doc_kwargs)"
                    ],
                    "docstring": null,
                    "start_line": 453,
                    "variables": {
                        "target": [
                            455,
                            457,
                            458,
                            462,
                            464
                        ],
                        "ensure_index": [
                            455
                        ],
                        "isinstance": [
                            457
                        ],
                        "PeriodIndex": [
                            457
                        ],
                        "target.freq": [
                            458
                        ],
                        "self.freq": [
                            458
                        ],
                        "self": [
                            464,
                            458,
                            459
                        ],
                        "no_matches": [
                            459,
                            460
                        ],
                        "np.ones": [
                            459
                        ],
                        "np": [
                            459
                        ],
                        "self.shape": [
                            459
                        ],
                        "np.intp": [
                            459
                        ],
                        "target.asi8": [
                            462
                        ],
                        "indexer": [
                            464,
                            465
                        ],
                        "missing": [
                            464,
                            465
                        ],
                        "self._int64index.get_indexer_non_unique": [
                            464
                        ],
                        "self._int64index": [
                            464
                        ],
                        "ensure_platform_int": [
                            465
                        ],
                        "Appender": [
                            453
                        ],
                        "_index_shared_docs": [
                            453
                        ],
                        "_index_doc_kwargs": [
                            453
                        ]
                    },
                    "filtered_variables": {
                        "target": [
                            455,
                            457,
                            458,
                            462,
                            464
                        ],
                        "ensure_index": [
                            455
                        ],
                        "PeriodIndex": [
                            457
                        ],
                        "target.freq": [
                            458
                        ],
                        "self.freq": [
                            458
                        ],
                        "self": [
                            464,
                            458,
                            459
                        ],
                        "no_matches": [
                            459,
                            460
                        ],
                        "np.ones": [
                            459
                        ],
                        "np": [
                            459
                        ],
                        "self.shape": [
                            459
                        ],
                        "np.intp": [
                            459
                        ],
                        "target.asi8": [
                            462
                        ],
                        "indexer": [
                            464,
                            465
                        ],
                        "missing": [
                            464,
                            465
                        ],
                        "self._int64index.get_indexer_non_unique": [
                            464
                        ],
                        "self._int64index": [
                            464
                        ],
                        "ensure_platform_int": [
                            465
                        ],
                        "Appender": [
                            453
                        ],
                        "_index_shared_docs": [
                            453
                        ],
                        "_index_doc_kwargs": [
                            453
                        ]
                    },
                    "diff_line_number": 457,
                    "class_data": {
                        "signature": "class PeriodIndex(DatetimeIndexOpsMixin, Int64Index)",
                        "docstring": "Immutable ndarray holding ordinal values indicating regular periods in time.\n\nIndex keys are boxed to Period objects which carries the metadata (eg,\nfrequency information).\n\nParameters\n----------\ndata : array-like (1d int np.ndarray or PeriodArray), optional\n    Optional period-like data to construct index with.\ncopy : bool\n    Make a copy of input ndarray.\nfreq : str or period object, optional\n    One of pandas period strings or corresponding objects.\nyear : int, array, or Series, default None\nmonth : int, array, or Series, default None\nquarter : int, array, or Series, default None\nday : int, array, or Series, default None\nhour : int, array, or Series, default None\nminute : int, array, or Series, default None\nsecond : int, array, or Series, default None\ntz : object, default None\n    Timezone for converting datetime64 data to Periods.\ndtype : str or PeriodDtype, default None\n\nAttributes\n----------\nday\ndayofweek\ndayofyear\ndays_in_month\ndaysinmonth\nend_time\nfreq\nfreqstr\nhour\nis_leap_year\nminute\nmonth\nquarter\nqyear\nsecond\nstart_time\nweek\nweekday\nweekofyear\nyear\n\nMethods\n-------\nasfreq\nstrftime\nto_timestamp\n\nSee Also\n--------\nIndex : The base pandas Index type.\nPeriod : Represents a period of time.\nDatetimeIndex : Index with datetime64 data.\nTimedeltaIndex : Index of timedelta64 data.\nperiod_range : Create a fixed-frequency PeriodIndex.\n\nExamples\n--------\n>>> idx = pd.PeriodIndex(year=year_arr, quarter=q_arr)",
                        "constructor_docstring": null,
                        "functions": [
                            "__new__(cls, data=None, ordinal=None, freq=None, tz=None, dtype=None, copy=False, name=None, **fields)",
                            "_simple_new(cls, values: PeriodArray, name: Label=None)",
                            "values(self)",
                            "_has_complex_internals(self)",
                            "_shallow_copy(self, values=None, name: Label=no_default)",
                            "_maybe_convert_timedelta(self, other)",
                            "_mpl_repr(self)",
                            "_formatter_func(self)",
                            "_engine(self)",
                            "__contains__(self, key: Any) -> bool",
                            "_int64index(self) -> Int64Index",
                            "__array_wrap__(self, result, context=None)",
                            "asof_locs(self, where, mask: np.ndarray) -> np.ndarray",
                            "astype(self, dtype, copy=True, how='start')",
                            "is_full(self) -> bool",
                            "inferred_type(self) -> str",
                            "get_indexer(self, target, method=None, limit=None, tolerance=None)",
                            "get_indexer_non_unique(self, target)",
                            "get_loc(self, key, method=None, tolerance=None)",
                            "_maybe_cast_slice_bound(self, label, side: str, kind: str)",
                            "_parsed_string_to_bounds(self, reso: str, parsed: datetime)",
                            "_validate_partial_date_slice(self, reso: str)",
                            "_get_string_slice(self, key: str, use_lhs: bool=True, use_rhs: bool=True)",
                            "insert(self, loc, item)",
                            "join(self, other, how='left', level=None, return_indexers=False, sort=False)",
                            "_assert_can_do_setop(self, other)",
                            "_setop(self, other, sort, opname: str)",
                            "intersection(self, other, sort=False)",
                            "difference(self, other, sort=None)",
                            "_union(self, other, sort)",
                            "_apply_meta(self, rawarr) -> 'PeriodIndex'",
                            "memory_usage(self, deep=False)"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [
                            "_typ",
                            "_attributes",
                            "_is_numeric_dtype",
                            "_infer_as_myclass",
                            "_data",
                            "_engine_type",
                            "_supports_partial_string_indexing"
                        ],
                        "class_decorators": [
                            "inherit_names(['strftime', 'to_timestamp', 'asfreq', 'start_time', 'end_time'] + PeriodArray._field_ops, PeriodArray, wrap=True)",
                            "inherit_names(['is_leap_year', 'freq', '_format_native_types'], PeriodArray)"
                        ]
                    }
                }
            ],
            "inscope_functions": [
                "_new_PeriodIndex(cls, **d)",
                "period_range(start=None, end=None, periods=None, freq=None, name=None) -> PeriodIndex",
                "__new__(cls, data=None, ordinal=None, freq=None, tz=None, dtype=None, copy=False, name=None, **fields)",
                "_simple_new(cls, values: PeriodArray, name: Label=None)",
                "values(self)",
                "_has_complex_internals(self)",
                "_shallow_copy(self, values=None, name: Label=no_default)",
                "_maybe_convert_timedelta(self, other)",
                "_mpl_repr(self)",
                "_formatter_func(self)",
                "_engine(self)",
                "__contains__(self, key: Any) -> bool",
                "_int64index(self) -> Int64Index",
                "__array_wrap__(self, result, context=None)",
                "asof_locs(self, where, mask: np.ndarray) -> np.ndarray",
                "astype(self, dtype, copy=True, how='start')",
                "is_full(self) -> bool",
                "inferred_type(self) -> str",
                "get_indexer(self, target, method=None, limit=None, tolerance=None)",
                "get_indexer_non_unique(self, target)",
                "get_loc(self, key, method=None, tolerance=None)",
                "_maybe_cast_slice_bound(self, label, side: str, kind: str)",
                "_parsed_string_to_bounds(self, reso: str, parsed: datetime)",
                "_validate_partial_date_slice(self, reso: str)",
                "_get_string_slice(self, key: str, use_lhs: bool=True, use_rhs: bool=True)",
                "insert(self, loc, item)",
                "join(self, other, how='left', level=None, return_indexers=False, sort=False)",
                "_assert_can_do_setop(self, other)",
                "_setop(self, other, sort, opname: str)",
                "intersection(self, other, sort=False)",
                "difference(self, other, sort=None)",
                "_union(self, other, sort)",
                "_apply_meta(self, rawarr) -> 'PeriodIndex'",
                "memory_usage(self, deep=False)"
            ],
            "variables_in_file": {
                "_index_doc_kwargs": [
                    51,
                    52,
                    453,
                    430
                ],
                "dict": [
                    51,
                    52
                ],
                "ibase._index_doc_kwargs": [
                    51
                ],
                "ibase": [
                    51
                ],
                "_index_doc_kwargs.update": [
                    52
                ],
                "values": [
                    256,
                    65,
                    258,
                    255,
                    229,
                    421,
                    422,
                    232,
                    234,
                    306,
                    254,
                    59,
                    60,
                    62,
                    63
                ],
                "d.pop": [
                    59,
                    61
                ],
                "d": [
                    65,
                    59,
                    61,
                    63
                ],
                "values.dtype": [
                    60
                ],
                "freq": [
                    193,
                    195,
                    200,
                    203,
                    208,
                    211,
                    788,
                    789,
                    791,
                    792,
                    188,
                    61,
                    62,
                    191
                ],
                "PeriodArray": [
                    193,
                    229,
                    70,
                    71,
                    74,
                    715,
                    716,
                    208,
                    150,
                    791,
                    792,
                    219,
                    188,
                    62
                ],
                "cls._simple_new": [
                    216,
                    63
                ],
                "cls": [
                    65,
                    231,
                    200,
                    184,
                    63,
                    216
                ],
                "DatetimeIndexOpsMixin": [
                    75
                ],
                "Int64Index": [
                    75,
                    622,
                    656,
                    337,
                    338,
                    657
                ],
                "_typ": [
                    143
                ],
                "_attributes": [
                    144
                ],
                "_is_numeric_dtype": [
                    147
                ],
                "_infer_as_myclass": [
                    148
                ],
                "_data": [
                    150
                ],
                "_engine_type": [
                    152
                ],
                "libindex.PeriodEngine": [
                    152
                ],
                "libindex": [
                    152
                ],
                "_supports_partial_string_indexing": [
                    153
                ],
                "valid_field_set": [
                    170,
                    180,
                    181
                ],
                "issubset": [
                    180
                ],
                "set": [
                    180,
                    181
                ],
                "fields": [
                    188,
                    180,
                    181
                ],
                "argument": [
                    181,
                    182
                ],
                "list": [
                    181
                ],
                "TypeError": [
                    385,
                    497,
                    182
                ],
                "name": [
                    258,
                    355,
                    359,
                    360,
                    362,
                    235,
                    184,
                    793,
                    253,
                    216
                ],
                "maybe_extract_name": [
                    184
                ],
                "data": [
                    193,
                    200,
                    203,
                    205,
                    208,
                    792,
                    211,
                    214,
                    791,
                    184,
                    793,
                    186,
                    188,
                    216
                ],
                "ordinal": [
                    208,
                    186,
                    205,
                    207
                ],
                "freq2": [
                    188,
                    191
                ],
                "PeriodArray._generate_range": [
                    188,
                    791
                ],
                "validate_dtype_freq": [
                    195
                ],
                "dtype": [
                    195,
                    401,
                    403,
                    405,
                    409
                ],
                "isinstance": [
                    384,
                    644,
                    788,
                    279,
                    281,
                    285,
                    558,
                    560,
                    434,
                    702,
                    323,
                    200,
                    457,
                    714,
                    715,
                    602,
                    350,
                    229,
                    358,
                    361,
                    617,
                    363,
                    492,
                    382
                ],
                "data.freq": [
                    200
                ],
                "data.asfreq": [
                    203
                ],
                "np.asarray": [
                    660,
                    245,
                    207
                ],
                "np": [
                    352,
                    354,
                    391,
                    392,
                    363,
                    459,
                    207,
                    660,
                    245,
                    437,
                    279,
                    376,
                    605,
                    606
                ],
                "np.int64": [
                    660,
                    207
                ],
                "period_array": [
                    211
                ],
                "copy": [
                    409,
                    213
                ],
                "data.copy": [
                    214
                ],
                "Label": [
                    219,
                    252
                ],
                "type": [
                    608,
                    609,
                    229,
                    687,
                    660,
                    661,
                    374,
                    702
                ],
                "result": [
                    258,
                    259,
                    260,
                    392,
                    395,
                    397,
                    661,
                    662,
                    721,
                    723,
                    724,
                    231,
                    232,
                    360,
                    234,
                    235,
                    236,
                    237,
                    238,
                    362,
                    622,
                    370,
                    371,
                    374,
                    632,
                    633,
                    634
                ],
                "object.__new__": [
                    231
                ],
                "object": [
                    231,
                    618,
                    690,
                    306,
                    603
                ],
                "result._data": [
                    232
                ],
                "result._index_data": [
                    234
                ],
                "values._data": [
                    234
                ],
                "result.name": [
                    235
                ],
                "result._cache": [
                    259,
                    236
                ],
                "result._reset_identity": [
                    237
                ],
                "classmethod": [
                    218
                ],
                "self": [
                    513,
                    514,
                    526,
                    532,
                    559,
                    562,
                    563,
                    570,
                    580,
                    584,
                    594,
                    597,
                    602,
                    603,
                    606,
                    608,
                    609,
                    615,
                    618,
                    623,
                    633,
                    634,
                    644,
                    645,
                    651,
                    652,
                    653,
                    656,
                    660,
                    661,
                    665,
                    666,
                    669,
                    670,
                    672,
                    674,
                    678,
                    681,
                    682,
                    685,
                    687,
                    690,
                    692,
                    693,
                    695,
                    698,
                    702,
                    704,
                    705,
                    709,
                    716,
                    717,
                    722,
                    723,
                    245,
                    253,
                    254,
                    256,
                    258,
                    280,
                    283,
                    288,
                    291,
                    299,
                    306,
                    310,
                    318,
                    319,
                    324,
                    327,
                    331,
                    338,
                    355,
                    374,
                    383,
                    386,
                    387,
                    389,
                    392,
                    395,
                    406,
                    417,
                    419,
                    421,
                    435,
                    437,
                    441,
                    443,
                    446,
                    447,
                    449,
                    458,
                    459,
                    464,
                    495,
                    501,
                    507
                ],
                "property": [
                    424,
                    243,
                    308,
                    247,
                    411
                ],
                "no_default": [
                    252,
                    253
                ],
                "self.name": [
                    609,
                    355,
                    717,
                    687,
                    338,
                    374,
                    253
                ],
                "cache": [
                    259,
                    254
                ],
                "self._cache.copy": [
                    254
                ],
                "self._cache": [
                    722,
                    254
                ],
                "self._data": [
                    256,
                    608,
                    687,
                    660,
                    283
                ],
                "self._simple_new": [
                    258
                ],
                "other": [
                    640,
                    644,
                    645,
                    652,
                    653,
                    654,
                    657,
                    279,
                    666,
                    283,
                    667,
                    285,
                    286,
                    669,
                    670,
                    289,
                    672,
                    291,
                    292,
                    675,
                    676,
                    678,
                    296,
                    682,
                    683,
                    685,
                    689,
                    690,
                    692,
                    695,
                    698,
                    699,
                    702,
                    704,
                    706,
                    707,
                    709,
                    615,
                    617,
                    619,
                    624
                ],
                "timedelta": [
                    279
                ],
                "np.timedelta64": [
                    279
                ],
                "Tick": [
                    281,
                    279
                ],
                "np.ndarray": [
                    376,
                    279
                ],
                "offset": [
                    280,
                    281
                ],
                "frequencies.to_offset": [
                    280
                ],
                "frequencies": [
                    280
                ],
                "self.freq.rule_code": [
                    280,
                    288
                ],
                "self.freq": [
                    513,
                    386,
                    644,
                    526,
                    280,
                    288,
                    559,
                    562,
                    435,
                    324,
                    580,
                    584,
                    458,
                    716,
                    594,
                    602,
                    501,
                    374,
                    507,
                    383
                ],
                "delta": [
                    283,
                    284
                ],
                "self._data._check_timedeltalike_freq_compat": [
                    283
                ],
                "DateOffset": [
                    285
                ],
                "freqstr": [
                    286,
                    287
                ],
                "other.rule_code": [
                    286
                ],
                "base": [
                    288,
                    287
                ],
                "libfrequencies.get_base_alias": [
                    287
                ],
                "libfrequencies": [
                    287
                ],
                "other.n": [
                    289
                ],
                "raise_on_incompatible": [
                    299,
                    291,
                    387,
                    645
                ],
                "is_integer": [
                    521,
                    292,
                    569
                ],
                "self.astype": [
                    705,
                    674,
                    618,
                    690,
                    306,
                    603
                ],
                "self.array._formatter": [
                    310
                ],
                "self.array": [
                    310
                ],
                "period": [
                    318,
                    319
                ],
                "weakref.ref": [
                    318
                ],
                "weakref": [
                    318
                ],
                "self._engine_type": [
                    319
                ],
                "len": [
                    417,
                    392,
                    698,
                    350,
                    319
                ],
                "cache_readonly": [
                    336,
                    315
                ],
                "Any": [
                    322
                ],
                "key": [
                    513,
                    514,
                    517,
                    519,
                    521,
                    523,
                    526,
                    532,
                    323,
                    324,
                    327,
                    329,
                    331,
                    594,
                    599,
                    487,
                    489,
                    490,
                    492,
                    495,
                    501,
                    504
                ],
                "Period": [
                    513,
                    323,
                    579,
                    361,
                    526,
                    559,
                    788,
                    602
                ],
                "key.freq": [
                    324
                ],
                "key.ordinal": [
                    327
                ],
                "self._engine": [
                    327
                ],
                "hash": [
                    329
                ],
                "self.get_loc": [
                    514,
                    331
                ],
                "KeyError": [
                    576,
                    517,
                    599,
                    568,
                    523,
                    333,
                    529,
                    533,
                    534,
                    598,
                    504
                ],
                "Appender": [
                    321,
                    453,
                    430,
                    399
                ],
                "Index.__contains__.__doc__": [
                    321
                ],
                "Index.__contains__": [
                    321
                ],
                "Index": [
                    321,
                    451,
                    360,
                    362,
                    399,
                    532
                ],
                "bool": [
                    592,
                    322,
                    412
                ],
                "Int64Index._simple_new": [
                    656,
                    657,
                    338
                ],
                "self.asi8": [
                    389,
                    421,
                    395,
                    656,
                    338
                ],
                "context": [
                    356,
                    357,
                    350,
                    351
                ],
                "tuple": [
                    350
                ],
                "func": [
                    352,
                    354,
                    363,
                    364,
                    365,
                    351
                ],
                "np.add": [
                    352
                ],
                "np.subtract": [
                    354
                ],
                "left": [
                    361,
                    356,
                    358,
                    359
                ],
                "right": [
                    361,
                    357,
                    358,
                    359
                ],
                "PeriodIndex": [
                    384,
                    644,
                    358,
                    457,
                    617,
                    714,
                    717,
                    434,
                    727,
                    728,
                    793,
                    733,
                    383
                ],
                "left.name": [
                    359
                ],
                "right.name": [
                    359
                ],
                "np.ufunc": [
                    363
                ],
                "func.types": [
                    364
                ],
                "msg": [
                    368,
                    365
                ],
                "func.__name__": [
                    365
                ],
                "ValueError": [
                    420,
                    590,
                    527,
                    368,
                    497,
                    784,
                    565
                ],
                "is_bool_dtype": [
                    370
                ],
                "where_idx": [
                    384,
                    386,
                    387,
                    389,
                    395,
                    381,
                    382,
                    383
                ],
                "where": [
                    381
                ],
                "DatetimeIndex": [
                    382
                ],
                "where_idx.values": [
                    383
                ],
                "where_idx.freq": [
                    386
                ],
                "locs": [
                    392,
                    395,
                    389,
                    391
                ],
                "searchsorted": [
                    389
                ],
                "mask": [
                    392,
                    394,
                    389
                ],
                "where_idx.asi8": [
                    395,
                    389
                ],
                "np.where": [
                    391
                ],
                "take": [
                    392
                ],
                "np.arange": [
                    392
                ],
                "first": [
                    394,
                    395
                ],
                "mask.argmax": [
                    394
                ],
                "pandas_dtype": [
                    401
                ],
                "is_datetime64_any_dtype": [
                    403
                ],
                "tz": [
                    405,
                    406
                ],
                "getattr": [
                    658,
                    405
                ],
                "tz_localize": [
                    406
                ],
                "self.to_timestamp": [
                    406
                ],
                "how": [
                    625,
                    619,
                    406
                ],
                "astype": [
                    409,
                    690
                ],
                "super": [
                    640,
                    409,
                    699,
                    721
                ],
                "Index.astype.__doc__": [
                    399
                ],
                "Index.astype": [
                    399
                ],
                "self.is_monotonic": [
                    419
                ],
                "all": [
                    422
                ],
                "str": [
                    582,
                    647,
                    425,
                    492,
                    560,
                    592,
                    536,
                    574
                ],
                "target": [
                    451,
                    455,
                    457,
                    458,
                    462,
                    432,
                    464,
                    434,
                    435,
                    440,
                    446
                ],
                "ensure_index": [
                    455,
                    683,
                    654,
                    432,
                    667
                ],
                "target.freq": [
                    458,
                    435
                ],
                "no_matches": [
                    459,
                    460,
                    437,
                    438
                ],
                "np.ones": [
                    459,
                    437
                ],
                "self.shape": [
                    459,
                    437
                ],
                "np.intp": [
                    459,
                    437
                ],
                "target.asi8": [
                    440,
                    462
                ],
                "self_index": [
                    441,
                    443,
                    451,
                    447
                ],
                "self._int64index": [
                    464,
                    441,
                    723
                ],
                "tolerance": [
                    449,
                    514,
                    451,
                    532,
                    445,
                    446
                ],
                "self._convert_tolerance": [
                    446
                ],
                "self._maybe_convert_timedelta": [
                    449
                ],
                "Index.get_indexer": [
                    451
                ],
                "method": [
                    514,
                    451,
                    516,
                    532
                ],
                "limit": [
                    451
                ],
                "_index_shared_docs": [
                    453,
                    430
                ],
                "indexer": [
                    464,
                    465
                ],
                "missing": [
                    464,
                    465
                ],
                "self._int64index.get_indexer_non_unique": [
                    464
                ],
                "ensure_platform_int": [
                    465
                ],
                "orig_key": [
                    529,
                    534,
                    487
                ],
                "is_scalar": [
                    489
                ],
                "InvalidIndexError": [
                    490
                ],
                "loc": [
                    514,
                    515,
                    495,
                    496,
                    603,
                    606
                ],
                "self._get_string_slice": [
                    495
                ],
                "asdt": [
                    513,
                    501,
                    519
                ],
                "reso": [
                    576,
                    578,
                    583,
                    562,
                    563,
                    594,
                    501,
                    597,
                    506,
                    575
                ],
                "parse_time_string": [
                    562,
                    594,
                    501
                ],
                "DateParseError": [
                    502
                ],
                "err": [
                    568,
                    529,
                    534,
                    599,
                    504
                ],
                "grp": [
                    512,
                    578,
                    579,
                    583,
                    586,
                    506,
                    510
                ],
                "resolution.Resolution.get_freq_group": [
                    506,
                    578,
                    583
                ],
                "resolution.Resolution": [
                    506,
                    578,
                    583
                ],
                "resolution": [
                    578,
                    583,
                    584,
                    506,
                    507
                ],
                "freqn": [
                    512,
                    584,
                    586,
                    507,
                    510
                ],
                "resolution.get_freq_group": [
                    584,
                    507
                ],
                "Index.get_loc": [
                    532
                ],
                "kind": [
                    556
                ],
                "label": [
                    558,
                    559,
                    560,
                    562,
                    568,
                    569,
                    570,
                    572
                ],
                "datetime": [
                    574,
                    558
                ],
                "parsed": [
                    579,
                    562,
                    563,
                    594,
                    597
                ],
                "bounds": [
                    563,
                    564
                ],
                "self._parsed_string_to_bounds": [
                    563
                ],
                "side": [
                    564
                ],
                "is_float": [
                    569
                ],
                "self._invalid_indexer": [
                    570
                ],
                "iv": [
                    579,
                    580
                ],
                "iv.asfreq": [
                    580
                ],
                "self._partial_date_slice": [
                    597
                ],
                "use_lhs": [
                    597
                ],
                "use_rhs": [
                    597
                ],
                "item": [
                    602,
                    603,
                    606
                ],
                "item.freq": [
                    602
                ],
                "insert": [
                    603
                ],
                "i8result": [
                    608,
                    658,
                    660,
                    605
                ],
                "np.concatenate": [
                    605
                ],
                "asi8": [
                    606
                ],
                "np.array": [
                    606
                ],
                "item.ordinal": [
                    606
                ],
                "arr": [
                    608,
                    609
                ],
                "_simple_new": [
                    608,
                    609,
                    661,
                    687
                ],
                "self.dtype": [
                    608,
                    672,
                    704,
                    690,
                    692,
                    660
                ],
                "self._assert_can_do_setop": [
                    682,
                    666,
                    652,
                    615
                ],
                "join": [
                    618
                ],
                "level": [
                    626,
                    619
                ],
                "return_indexers": [
                    627,
                    619,
                    631
                ],
                "sort": [
                    707,
                    676,
                    709,
                    678,
                    681,
                    619,
                    651,
                    658,
                    628,
                    695,
                    665,
                    699
                ],
                "Int64Index.join": [
                    622
                ],
                "lidx": [
                    632,
                    633
                ],
                "ridx": [
                    632,
                    633
                ],
                "self._apply_meta": [
                    633,
                    634
                ],
                "_assert_can_do_setop": [
                    640
                ],
                "other.freq": [
                    644
                ],
                "self._validate_sort_keyword": [
                    681,
                    665,
                    651
                ],
                "res_name": [
                    653,
                    661
                ],
                "get_op_result_name": [
                    653
                ],
                "i8self": [
                    656,
                    658
                ],
                "i8other": [
                    657,
                    658
                ],
                "other.asi8": [
                    657
                ],
                "opname": [
                    658
                ],
                "parr": [
                    660,
                    661
                ],
                "self.equals": [
                    698,
                    669,
                    685
                ],
                "self._get_reconciled_name_object": [
                    670
                ],
                "is_dtype_equal": [
                    672,
                    692,
                    704
                ],
                "other.dtype": [
                    672,
                    692,
                    704
                ],
                "this": [
                    705,
                    674,
                    707,
                    676
                ],
                "other.astype": [
                    706,
                    675
                ],
                "this.intersection": [
                    676
                ],
                "self._setop": [
                    709,
                    678,
                    695
                ],
                "is_object_dtype": [
                    689
                ],
                "difference": [
                    690
                ],
                "_union": [
                    699
                ],
                "this._union": [
                    707
                ],
                "rawarr": [
                    714,
                    715,
                    716,
                    717,
                    718
                ],
                "PeriodIndex._simple_new": [
                    717
                ],
                "memory_usage": [
                    721
                ],
                "deep": [
                    721,
                    723
                ],
                "hasattr": [
                    722
                ],
                "self._int64index.memory_usage": [
                    723
                ],
                "inherit_names": [
                    74,
                    68
                ],
                "PeriodArray._field_ops": [
                    70
                ],
                "PeriodIndex._add_numeric_methods_disabled": [
                    727
                ],
                "PeriodIndex._add_logical_methods_disabled": [
                    728
                ],
                "com.count_not_none": [
                    783
                ],
                "com": [
                    783
                ],
                "start": [
                    788,
                    791,
                    783
                ],
                "end": [
                    788,
                    791,
                    783
                ],
                "periods": [
                    791,
                    783
                ]
            },
            "filtered_variables_in_file": {
                "_index_doc_kwargs": [
                    51,
                    52,
                    453,
                    430
                ],
                "ibase._index_doc_kwargs": [
                    51
                ],
                "ibase": [
                    51
                ],
                "_index_doc_kwargs.update": [
                    52
                ],
                "values": [
                    256,
                    65,
                    258,
                    255,
                    229,
                    421,
                    422,
                    232,
                    234,
                    306,
                    254,
                    59,
                    60,
                    62,
                    63
                ],
                "d.pop": [
                    59,
                    61
                ],
                "d": [
                    65,
                    59,
                    61,
                    63
                ],
                "values.dtype": [
                    60
                ],
                "freq": [
                    193,
                    195,
                    200,
                    203,
                    208,
                    211,
                    788,
                    789,
                    791,
                    792,
                    188,
                    61,
                    62,
                    191
                ],
                "PeriodArray": [
                    193,
                    229,
                    70,
                    71,
                    74,
                    715,
                    716,
                    208,
                    150,
                    791,
                    792,
                    219,
                    188,
                    62
                ],
                "cls._simple_new": [
                    216,
                    63
                ],
                "cls": [
                    65,
                    231,
                    200,
                    184,
                    63,
                    216
                ],
                "DatetimeIndexOpsMixin": [
                    75
                ],
                "Int64Index": [
                    75,
                    622,
                    656,
                    337,
                    338,
                    657
                ],
                "_typ": [
                    143
                ],
                "_attributes": [
                    144
                ],
                "_is_numeric_dtype": [
                    147
                ],
                "_infer_as_myclass": [
                    148
                ],
                "_data": [
                    150
                ],
                "_engine_type": [
                    152
                ],
                "libindex.PeriodEngine": [
                    152
                ],
                "libindex": [
                    152
                ],
                "_supports_partial_string_indexing": [
                    153
                ],
                "valid_field_set": [
                    170,
                    180,
                    181
                ],
                "issubset": [
                    180
                ],
                "fields": [
                    188,
                    180,
                    181
                ],
                "argument": [
                    181,
                    182
                ],
                "name": [
                    258,
                    355,
                    359,
                    360,
                    362,
                    235,
                    184,
                    793,
                    253,
                    216
                ],
                "maybe_extract_name": [
                    184
                ],
                "data": [
                    193,
                    200,
                    203,
                    205,
                    208,
                    792,
                    211,
                    214,
                    791,
                    184,
                    793,
                    186,
                    188,
                    216
                ],
                "ordinal": [
                    208,
                    186,
                    205,
                    207
                ],
                "freq2": [
                    188,
                    191
                ],
                "PeriodArray._generate_range": [
                    188,
                    791
                ],
                "validate_dtype_freq": [
                    195
                ],
                "dtype": [
                    195,
                    401,
                    403,
                    405,
                    409
                ],
                "data.freq": [
                    200
                ],
                "data.asfreq": [
                    203
                ],
                "np.asarray": [
                    660,
                    245,
                    207
                ],
                "np": [
                    352,
                    354,
                    391,
                    392,
                    363,
                    459,
                    207,
                    660,
                    245,
                    437,
                    279,
                    376,
                    605,
                    606
                ],
                "np.int64": [
                    660,
                    207
                ],
                "period_array": [
                    211
                ],
                "copy": [
                    409,
                    213
                ],
                "data.copy": [
                    214
                ],
                "Label": [
                    219,
                    252
                ],
                "result": [
                    258,
                    259,
                    260,
                    392,
                    395,
                    397,
                    661,
                    662,
                    721,
                    723,
                    724,
                    231,
                    232,
                    360,
                    234,
                    235,
                    236,
                    237,
                    238,
                    362,
                    622,
                    370,
                    371,
                    374,
                    632,
                    633,
                    634
                ],
                "object.__new__": [
                    231
                ],
                "result._data": [
                    232
                ],
                "result._index_data": [
                    234
                ],
                "values._data": [
                    234
                ],
                "result.name": [
                    235
                ],
                "result._cache": [
                    259,
                    236
                ],
                "result._reset_identity": [
                    237
                ],
                "self": [
                    513,
                    514,
                    526,
                    532,
                    559,
                    562,
                    563,
                    570,
                    580,
                    584,
                    594,
                    597,
                    602,
                    603,
                    606,
                    608,
                    609,
                    615,
                    618,
                    623,
                    633,
                    634,
                    644,
                    645,
                    651,
                    652,
                    653,
                    656,
                    660,
                    661,
                    665,
                    666,
                    669,
                    670,
                    672,
                    674,
                    678,
                    681,
                    682,
                    685,
                    687,
                    690,
                    692,
                    693,
                    695,
                    698,
                    702,
                    704,
                    705,
                    709,
                    716,
                    717,
                    722,
                    723,
                    245,
                    253,
                    254,
                    256,
                    258,
                    280,
                    283,
                    288,
                    291,
                    299,
                    306,
                    310,
                    318,
                    319,
                    324,
                    327,
                    331,
                    338,
                    355,
                    374,
                    383,
                    386,
                    387,
                    389,
                    392,
                    395,
                    406,
                    417,
                    419,
                    421,
                    435,
                    437,
                    441,
                    443,
                    446,
                    447,
                    449,
                    458,
                    459,
                    464,
                    495,
                    501,
                    507
                ],
                "no_default": [
                    252,
                    253
                ],
                "self.name": [
                    609,
                    355,
                    717,
                    687,
                    338,
                    374,
                    253
                ],
                "cache": [
                    259,
                    254
                ],
                "self._cache.copy": [
                    254
                ],
                "self._cache": [
                    722,
                    254
                ],
                "self._data": [
                    256,
                    608,
                    687,
                    660,
                    283
                ],
                "self._simple_new": [
                    258
                ],
                "other": [
                    640,
                    644,
                    645,
                    652,
                    653,
                    654,
                    657,
                    279,
                    666,
                    283,
                    667,
                    285,
                    286,
                    669,
                    670,
                    289,
                    672,
                    291,
                    292,
                    675,
                    676,
                    678,
                    296,
                    682,
                    683,
                    685,
                    689,
                    690,
                    692,
                    695,
                    698,
                    699,
                    702,
                    704,
                    706,
                    707,
                    709,
                    615,
                    617,
                    619,
                    624
                ],
                "timedelta": [
                    279
                ],
                "np.timedelta64": [
                    279
                ],
                "Tick": [
                    281,
                    279
                ],
                "np.ndarray": [
                    376,
                    279
                ],
                "offset": [
                    280,
                    281
                ],
                "frequencies.to_offset": [
                    280
                ],
                "frequencies": [
                    280
                ],
                "self.freq.rule_code": [
                    280,
                    288
                ],
                "self.freq": [
                    513,
                    386,
                    644,
                    526,
                    280,
                    288,
                    559,
                    562,
                    435,
                    324,
                    580,
                    584,
                    458,
                    716,
                    594,
                    602,
                    501,
                    374,
                    507,
                    383
                ],
                "delta": [
                    283,
                    284
                ],
                "self._data._check_timedeltalike_freq_compat": [
                    283
                ],
                "DateOffset": [
                    285
                ],
                "freqstr": [
                    286,
                    287
                ],
                "other.rule_code": [
                    286
                ],
                "base": [
                    288,
                    287
                ],
                "libfrequencies.get_base_alias": [
                    287
                ],
                "libfrequencies": [
                    287
                ],
                "other.n": [
                    289
                ],
                "raise_on_incompatible": [
                    299,
                    291,
                    387,
                    645
                ],
                "is_integer": [
                    521,
                    292,
                    569
                ],
                "self.astype": [
                    705,
                    674,
                    618,
                    690,
                    306,
                    603
                ],
                "self.array._formatter": [
                    310
                ],
                "self.array": [
                    310
                ],
                "period": [
                    318,
                    319
                ],
                "weakref.ref": [
                    318
                ],
                "weakref": [
                    318
                ],
                "self._engine_type": [
                    319
                ],
                "cache_readonly": [
                    336,
                    315
                ],
                "Any": [
                    322
                ],
                "key": [
                    513,
                    514,
                    517,
                    519,
                    521,
                    523,
                    526,
                    532,
                    323,
                    324,
                    327,
                    329,
                    331,
                    594,
                    599,
                    487,
                    489,
                    490,
                    492,
                    495,
                    501,
                    504
                ],
                "Period": [
                    513,
                    323,
                    579,
                    361,
                    526,
                    559,
                    788,
                    602
                ],
                "key.freq": [
                    324
                ],
                "key.ordinal": [
                    327
                ],
                "self._engine": [
                    327
                ],
                "self.get_loc": [
                    514,
                    331
                ],
                "Appender": [
                    321,
                    453,
                    430,
                    399
                ],
                "Index.__contains__.__doc__": [
                    321
                ],
                "Index.__contains__": [
                    321
                ],
                "Index": [
                    321,
                    451,
                    360,
                    362,
                    399,
                    532
                ],
                "Int64Index._simple_new": [
                    656,
                    657,
                    338
                ],
                "self.asi8": [
                    389,
                    421,
                    395,
                    656,
                    338
                ],
                "context": [
                    356,
                    357,
                    350,
                    351
                ],
                "func": [
                    352,
                    354,
                    363,
                    364,
                    365,
                    351
                ],
                "np.add": [
                    352
                ],
                "np.subtract": [
                    354
                ],
                "left": [
                    361,
                    356,
                    358,
                    359
                ],
                "right": [
                    361,
                    357,
                    358,
                    359
                ],
                "PeriodIndex": [
                    384,
                    644,
                    358,
                    457,
                    617,
                    714,
                    717,
                    434,
                    727,
                    728,
                    793,
                    733,
                    383
                ],
                "left.name": [
                    359
                ],
                "right.name": [
                    359
                ],
                "np.ufunc": [
                    363
                ],
                "func.types": [
                    364
                ],
                "msg": [
                    368,
                    365
                ],
                "func.__name__": [
                    365
                ],
                "is_bool_dtype": [
                    370
                ],
                "where_idx": [
                    384,
                    386,
                    387,
                    389,
                    395,
                    381,
                    382,
                    383
                ],
                "where": [
                    381
                ],
                "DatetimeIndex": [
                    382
                ],
                "where_idx.values": [
                    383
                ],
                "where_idx.freq": [
                    386
                ],
                "locs": [
                    392,
                    395,
                    389,
                    391
                ],
                "searchsorted": [
                    389
                ],
                "mask": [
                    392,
                    394,
                    389
                ],
                "where_idx.asi8": [
                    395,
                    389
                ],
                "np.where": [
                    391
                ],
                "take": [
                    392
                ],
                "np.arange": [
                    392
                ],
                "first": [
                    394,
                    395
                ],
                "mask.argmax": [
                    394
                ],
                "pandas_dtype": [
                    401
                ],
                "is_datetime64_any_dtype": [
                    403
                ],
                "tz": [
                    405,
                    406
                ],
                "tz_localize": [
                    406
                ],
                "self.to_timestamp": [
                    406
                ],
                "how": [
                    625,
                    619,
                    406
                ],
                "astype": [
                    409,
                    690
                ],
                "Index.astype.__doc__": [
                    399
                ],
                "Index.astype": [
                    399
                ],
                "self.is_monotonic": [
                    419
                ],
                "target": [
                    451,
                    455,
                    457,
                    458,
                    462,
                    432,
                    464,
                    434,
                    435,
                    440,
                    446
                ],
                "ensure_index": [
                    455,
                    683,
                    654,
                    432,
                    667
                ],
                "target.freq": [
                    458,
                    435
                ],
                "no_matches": [
                    459,
                    460,
                    437,
                    438
                ],
                "np.ones": [
                    459,
                    437
                ],
                "self.shape": [
                    459,
                    437
                ],
                "np.intp": [
                    459,
                    437
                ],
                "target.asi8": [
                    440,
                    462
                ],
                "self_index": [
                    441,
                    443,
                    451,
                    447
                ],
                "self._int64index": [
                    464,
                    441,
                    723
                ],
                "tolerance": [
                    449,
                    514,
                    451,
                    532,
                    445,
                    446
                ],
                "self._convert_tolerance": [
                    446
                ],
                "self._maybe_convert_timedelta": [
                    449
                ],
                "Index.get_indexer": [
                    451
                ],
                "method": [
                    514,
                    451,
                    516,
                    532
                ],
                "limit": [
                    451
                ],
                "_index_shared_docs": [
                    453,
                    430
                ],
                "indexer": [
                    464,
                    465
                ],
                "missing": [
                    464,
                    465
                ],
                "self._int64index.get_indexer_non_unique": [
                    464
                ],
                "ensure_platform_int": [
                    465
                ],
                "orig_key": [
                    529,
                    534,
                    487
                ],
                "is_scalar": [
                    489
                ],
                "InvalidIndexError": [
                    490
                ],
                "loc": [
                    514,
                    515,
                    495,
                    496,
                    603,
                    606
                ],
                "self._get_string_slice": [
                    495
                ],
                "asdt": [
                    513,
                    501,
                    519
                ],
                "reso": [
                    576,
                    578,
                    583,
                    562,
                    563,
                    594,
                    501,
                    597,
                    506,
                    575
                ],
                "parse_time_string": [
                    562,
                    594,
                    501
                ],
                "DateParseError": [
                    502
                ],
                "err": [
                    568,
                    529,
                    534,
                    599,
                    504
                ],
                "grp": [
                    512,
                    578,
                    579,
                    583,
                    586,
                    506,
                    510
                ],
                "resolution.Resolution.get_freq_group": [
                    506,
                    578,
                    583
                ],
                "resolution.Resolution": [
                    506,
                    578,
                    583
                ],
                "resolution": [
                    578,
                    583,
                    584,
                    506,
                    507
                ],
                "freqn": [
                    512,
                    584,
                    586,
                    507,
                    510
                ],
                "resolution.get_freq_group": [
                    584,
                    507
                ],
                "Index.get_loc": [
                    532
                ],
                "kind": [
                    556
                ],
                "label": [
                    558,
                    559,
                    560,
                    562,
                    568,
                    569,
                    570,
                    572
                ],
                "datetime": [
                    574,
                    558
                ],
                "parsed": [
                    579,
                    562,
                    563,
                    594,
                    597
                ],
                "bounds": [
                    563,
                    564
                ],
                "self._parsed_string_to_bounds": [
                    563
                ],
                "side": [
                    564
                ],
                "is_float": [
                    569
                ],
                "self._invalid_indexer": [
                    570
                ],
                "iv": [
                    579,
                    580
                ],
                "iv.asfreq": [
                    580
                ],
                "self._partial_date_slice": [
                    597
                ],
                "use_lhs": [
                    597
                ],
                "use_rhs": [
                    597
                ],
                "item": [
                    602,
                    603,
                    606
                ],
                "item.freq": [
                    602
                ],
                "insert": [
                    603
                ],
                "i8result": [
                    608,
                    658,
                    660,
                    605
                ],
                "np.concatenate": [
                    605
                ],
                "asi8": [
                    606
                ],
                "np.array": [
                    606
                ],
                "item.ordinal": [
                    606
                ],
                "arr": [
                    608,
                    609
                ],
                "_simple_new": [
                    608,
                    609,
                    661,
                    687
                ],
                "self.dtype": [
                    608,
                    672,
                    704,
                    690,
                    692,
                    660
                ],
                "self._assert_can_do_setop": [
                    682,
                    666,
                    652,
                    615
                ],
                "join": [
                    618
                ],
                "level": [
                    626,
                    619
                ],
                "return_indexers": [
                    627,
                    619,
                    631
                ],
                "sort": [
                    707,
                    676,
                    709,
                    678,
                    681,
                    619,
                    651,
                    658,
                    628,
                    695,
                    665,
                    699
                ],
                "Int64Index.join": [
                    622
                ],
                "lidx": [
                    632,
                    633
                ],
                "ridx": [
                    632,
                    633
                ],
                "self._apply_meta": [
                    633,
                    634
                ],
                "_assert_can_do_setop": [
                    640
                ],
                "other.freq": [
                    644
                ],
                "self._validate_sort_keyword": [
                    681,
                    665,
                    651
                ],
                "res_name": [
                    653,
                    661
                ],
                "get_op_result_name": [
                    653
                ],
                "i8self": [
                    656,
                    658
                ],
                "i8other": [
                    657,
                    658
                ],
                "other.asi8": [
                    657
                ],
                "opname": [
                    658
                ],
                "parr": [
                    660,
                    661
                ],
                "self.equals": [
                    698,
                    669,
                    685
                ],
                "self._get_reconciled_name_object": [
                    670
                ],
                "is_dtype_equal": [
                    672,
                    692,
                    704
                ],
                "other.dtype": [
                    672,
                    692,
                    704
                ],
                "this": [
                    705,
                    674,
                    707,
                    676
                ],
                "other.astype": [
                    706,
                    675
                ],
                "this.intersection": [
                    676
                ],
                "self._setop": [
                    709,
                    678,
                    695
                ],
                "is_object_dtype": [
                    689
                ],
                "difference": [
                    690
                ],
                "_union": [
                    699
                ],
                "this._union": [
                    707
                ],
                "rawarr": [
                    714,
                    715,
                    716,
                    717,
                    718
                ],
                "PeriodIndex._simple_new": [
                    717
                ],
                "memory_usage": [
                    721
                ],
                "deep": [
                    721,
                    723
                ],
                "self._int64index.memory_usage": [
                    723
                ],
                "inherit_names": [
                    74,
                    68
                ],
                "PeriodArray._field_ops": [
                    70
                ],
                "PeriodIndex._add_numeric_methods_disabled": [
                    727
                ],
                "PeriodIndex._add_logical_methods_disabled": [
                    728
                ],
                "com.count_not_none": [
                    783
                ],
                "com": [
                    783
                ],
                "start": [
                    788,
                    791,
                    783
                ],
                "end": [
                    788,
                    791,
                    783
                ],
                "periods": [
                    791,
                    783
                ]
            }
        },
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/core/indexes/timedeltas.py": {
            "buggy_functions": [
                {
                    "function_name": "get_loc",
                    "function_code": "def get_loc(self, key, method=None, tolerance=None):\n    \"\"\"\n    Get integer location for requested label\n\n    Returns\n    -------\n    loc : int, slice, or ndarray[int]\n    \"\"\"\n    if not is_scalar(key):\n        raise InvalidIndexError(key)\n\n    if is_valid_nat_for_dtype(key, self.dtype):\n        key = NaT\n\n    elif isinstance(key, str):\n        try:\n            key = Timedelta(key)\n        except ValueError as err:\n            raise KeyError(key) from err\n\n    elif isinstance(key, self._data._recognized_scalars) or key is NaT:\n        key = Timedelta(key)\n\n    else:\n        raise KeyError(key)\n\n    return Index.get_loc(self, key, method, tolerance)\n",
                    "decorators": [],
                    "docstring": "Get integer location for requested label\n\nReturns\n-------\nloc : int, slice, or ndarray[int]",
                    "start_line": 216,
                    "variables": {
                        "is_scalar": [
                            224
                        ],
                        "key": [
                            224,
                            225,
                            227,
                            228,
                            230,
                            232,
                            234,
                            236,
                            237,
                            240,
                            242
                        ],
                        "InvalidIndexError": [
                            225
                        ],
                        "is_valid_nat_for_dtype": [
                            227
                        ],
                        "self.dtype": [
                            227
                        ],
                        "self": [
                            242,
                            227,
                            236
                        ],
                        "NaT": [
                            228,
                            236
                        ],
                        "isinstance": [
                            236,
                            230
                        ],
                        "str": [
                            230
                        ],
                        "Timedelta": [
                            232,
                            237
                        ],
                        "ValueError": [
                            233
                        ],
                        "KeyError": [
                            240,
                            234
                        ],
                        "err": [
                            234
                        ],
                        "self._data._recognized_scalars": [
                            236
                        ],
                        "self._data": [
                            236
                        ],
                        "Index.get_loc": [
                            242
                        ],
                        "Index": [
                            242
                        ],
                        "method": [
                            242
                        ],
                        "tolerance": [
                            242
                        ]
                    },
                    "filtered_variables": {
                        "is_scalar": [
                            224
                        ],
                        "key": [
                            224,
                            225,
                            227,
                            228,
                            230,
                            232,
                            234,
                            236,
                            237,
                            240,
                            242
                        ],
                        "InvalidIndexError": [
                            225
                        ],
                        "is_valid_nat_for_dtype": [
                            227
                        ],
                        "self.dtype": [
                            227
                        ],
                        "self": [
                            242,
                            227,
                            236
                        ],
                        "NaT": [
                            228,
                            236
                        ],
                        "Timedelta": [
                            232,
                            237
                        ],
                        "err": [
                            234
                        ],
                        "self._data._recognized_scalars": [
                            236
                        ],
                        "self._data": [
                            236
                        ],
                        "Index.get_loc": [
                            242
                        ],
                        "Index": [
                            242
                        ],
                        "method": [
                            242
                        ],
                        "tolerance": [
                            242
                        ]
                    },
                    "diff_line_number": 216,
                    "class_data": {
                        "signature": "class TimedeltaIndex(DatetimeTimedeltaMixin, dtl.TimelikeOps)",
                        "docstring": "Immutable ndarray of timedelta64 data, represented internally as int64, and\nwhich can be boxed to timedelta objects.\n\nParameters\n----------\ndata  : array-like (1-dimensional), optional\n    Optional timedelta-like data to construct index with.\nunit : unit of the arg (D,h,m,s,ms,us,ns) denote the unit, optional\n    Which is an integer/float number.\nfreq : str or pandas offset object, optional\n    One of pandas date offset strings or corresponding objects. The string\n    'infer' can be passed in order to set the frequency of the index as the\n    inferred frequency upon creation.\ncopy  : bool\n    Make a copy of input ndarray.\nname : object\n    Name to be stored in the index.\n\nAttributes\n----------\ndays\nseconds\nmicroseconds\nnanoseconds\ncomponents\ninferred_freq\n\nMethods\n-------\nto_pytimedelta\nto_series\nround\nfloor\nceil\nto_frame\nmean\n\nSee Also\n--------\nIndex : The base pandas Index type.\nTimedelta : Represents a duration between two dates or times.\nDatetimeIndex : Index of datetime64 data.\nPeriodIndex : Index of Period data.\ntimedelta_range : Create a fixed-frequency TimedeltaIndex.\n\nNotes\n-----\nTo learn more about the frequency strings, please see `this link\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.",
                        "constructor_docstring": null,
                        "functions": [
                            "__new__(cls, data=None, unit=None, freq=None, closed=None, dtype=_TD_DTYPE, copy=False, name=None)",
                            "_simple_new(cls, values: TimedeltaArray, name: Label=None)",
                            "_formatter_func(self)",
                            "astype(self, dtype, copy=True)",
                            "_maybe_promote(self, other)",
                            "get_loc(self, key, method=None, tolerance=None)",
                            "_maybe_cast_slice_bound(self, label, side: str, kind)",
                            "is_type_compatible(self, typ) -> bool",
                            "inferred_type(self) -> str"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [
                            "_typ",
                            "_engine_type",
                            "_comparables",
                            "_attributes",
                            "_is_numeric_dtype",
                            "_infer_as_myclass",
                            "_data"
                        ],
                        "class_decorators": [
                            "inherit_names(['_box_values', '__neg__', '__pos__', '__abs__', 'total_seconds', 'round', 'floor', 'ceil'] + TimedeltaArray._field_ops, TimedeltaArray, wrap=True)",
                            "inherit_names(['_bool_ops', '_object_ops', '_field_ops', '_datetimelike_ops', '_datetimelike_methods', '_other_ops', 'components', 'to_pytimedelta', 'sum', 'std', 'median', '_format_native_types', 'freq'], TimedeltaArray)"
                        ]
                    }
                }
            ],
            "inscope_functions": [
                "timedelta_range(start=None, end=None, periods=None, freq=None, name=None, closed=None) -> TimedeltaIndex",
                "__new__(cls, data=None, unit=None, freq=None, closed=None, dtype=_TD_DTYPE, copy=False, name=None)",
                "_simple_new(cls, values: TimedeltaArray, name: Label=None)",
                "_formatter_func(self)",
                "astype(self, dtype, copy=True)",
                "_maybe_promote(self, other)",
                "get_loc(self, key, method=None, tolerance=None)",
                "_maybe_cast_slice_bound(self, label, side: str, kind)",
                "is_type_compatible(self, typ) -> bool",
                "inferred_type(self) -> str"
            ],
            "variables_in_file": {
                "DatetimeTimedeltaMixin": [
                    64
                ],
                "dtl.TimelikeOps": [
                    64
                ],
                "dtl": [
                    64,
                    353
                ],
                "_typ": [
                    117
                ],
                "_engine_type": [
                    119
                ],
                "libindex.TimedeltaEngine": [
                    119
                ],
                "libindex": [
                    119
                ],
                "_comparables": [
                    121
                ],
                "_attributes": [
                    122
                ],
                "_is_numeric_dtype": [
                    123
                ],
                "_infer_as_myclass": [
                    124
                ],
                "_data": [
                    126
                ],
                "TimedeltaArray": [
                    354,
                    168,
                    42,
                    43,
                    174,
                    175,
                    62,
                    155,
                    126
                ],
                "_TD_DTYPE": [
                    137
                ],
                "name": [
                    160,
                    355,
                    171,
                    141,
                    179,
                    158
                ],
                "maybe_extract_name": [
                    141
                ],
                "data": [
                    160,
                    162,
                    164,
                    169,
                    141,
                    143,
                    146,
                    155,
                    157,
                    158
                ],
                "cls": [
                    171,
                    141,
                    177,
                    145,
                    158
                ],
                "is_scalar": [
                    224,
                    143
                ],
                "TypeError": [
                    144
                ],
                "cls.__name__": [
                    145
                ],
                "repr": [
                    146
                ],
                "unit": [
                    169,
                    149
                ],
                "ValueError": [
                    233,
                    150
                ],
                "isinstance": [
                    160,
                    260,
                    230,
                    236,
                    175,
                    155
                ],
                "freq": [
                    160,
                    353,
                    354,
                    169,
                    155,
                    350,
                    351
                ],
                "copy": [
                    161,
                    169,
                    205,
                    209,
                    156
                ],
                "data.copy": [
                    162,
                    157
                ],
                "cls._simple_new": [
                    171,
                    158
                ],
                "TimedeltaIndex": [
                    160,
                    355,
                    213,
                    280,
                    285
                ],
                "data._shallow_copy": [
                    164
                ],
                "tdarr": [
                    168,
                    355,
                    354,
                    171
                ],
                "TimedeltaArray._from_sequence": [
                    168
                ],
                "dtype": [
                    200,
                    169,
                    201,
                    205,
                    209
                ],
                "Label": [
                    174
                ],
                "values": [
                    178,
                    182,
                    175
                ],
                "result": [
                    205,
                    207,
                    208,
                    177,
                    178,
                    179,
                    180,
                    182,
                    184,
                    185
                ],
                "object.__new__": [
                    177
                ],
                "object": [
                    177
                ],
                "result._data": [
                    178
                ],
                "result._name": [
                    179
                ],
                "result._cache": [
                    180
                ],
                "result._index_data": [
                    182
                ],
                "values._data": [
                    182
                ],
                "result._reset_identity": [
                    184
                ],
                "classmethod": [
                    173
                ],
                "_get_format_timedelta64": [
                    194
                ],
                "self": [
                    194,
                    227,
                    236,
                    205,
                    206,
                    207,
                    208,
                    209,
                    242,
                    268,
                    273,
                    214
                ],
                "property": [
                    275,
                    190
                ],
                "pandas_dtype": [
                    200
                ],
                "is_timedelta64_dtype": [
                    201
                ],
                "is_timedelta64_ns_dtype": [
                    201
                ],
                "self._data.astype": [
                    205
                ],
                "self._data": [
                    236,
                    205
                ],
                "self.hasnans": [
                    206
                ],
                "Index": [
                    208,
                    242,
                    198,
                    207
                ],
                "self.name": [
                    208,
                    207
                ],
                "result.astype": [
                    208
                ],
                "DatetimeIndexOpsMixin.astype": [
                    209
                ],
                "DatetimeIndexOpsMixin": [
                    209
                ],
                "Appender": [
                    198
                ],
                "Index.astype.__doc__": [
                    198
                ],
                "Index.astype": [
                    198
                ],
                "other.inferred_type": [
                    212
                ],
                "other": [
                    212,
                    213,
                    214
                ],
                "key": [
                    224,
                    225,
                    227,
                    228,
                    230,
                    232,
                    234,
                    236,
                    237,
                    240,
                    242
                ],
                "InvalidIndexError": [
                    225
                ],
                "is_valid_nat_for_dtype": [
                    227
                ],
                "self.dtype": [
                    227
                ],
                "NaT": [
                    228,
                    236
                ],
                "str": [
                    276,
                    244,
                    260,
                    230
                ],
                "Timedelta": [
                    232,
                    261,
                    266,
                    237
                ],
                "KeyError": [
                    240,
                    234
                ],
                "err": [
                    234
                ],
                "self._data._recognized_scalars": [
                    236
                ],
                "Index.get_loc": [
                    242
                ],
                "method": [
                    242
                ],
                "tolerance": [
                    242
                ],
                "kind": [
                    258
                ],
                "label": [
                    260,
                    261,
                    267,
                    268,
                    270
                ],
                "parsed": [
                    266,
                    261,
                    262
                ],
                "lbound": [
                    264,
                    266,
                    262
                ],
                "parsed.round": [
                    262
                ],
                "parsed.resolution_string": [
                    266,
                    262
                ],
                "side": [
                    263
                ],
                "to_offset": [
                    266
                ],
                "is_integer": [
                    267
                ],
                "is_float": [
                    267
                ],
                "self._invalid_indexer": [
                    268
                ],
                "typ": [
                    273
                ],
                "self.inferred_type": [
                    273
                ],
                "bool": [
                    272
                ],
                "inherit_names": [
                    46,
                    31
                ],
                "TimedeltaArray._field_ops": [
                    42
                ],
                "TimedeltaIndex._add_logical_methods_disabled": [
                    280
                ],
                "com.any_none": [
                    350
                ],
                "com": [
                    350
                ],
                "periods": [
                    354,
                    350
                ],
                "start": [
                    354,
                    350
                ],
                "end": [
                    354,
                    350
                ],
                "freq_infer": [
                    353
                ],
                "dtl.maybe_infer_freq": [
                    353
                ],
                "TimedeltaArray._generate_range": [
                    354
                ],
                "closed": [
                    354
                ],
                "TimedeltaIndex._simple_new": [
                    355
                ]
            },
            "filtered_variables_in_file": {
                "DatetimeTimedeltaMixin": [
                    64
                ],
                "dtl.TimelikeOps": [
                    64
                ],
                "dtl": [
                    64,
                    353
                ],
                "_typ": [
                    117
                ],
                "_engine_type": [
                    119
                ],
                "libindex.TimedeltaEngine": [
                    119
                ],
                "libindex": [
                    119
                ],
                "_comparables": [
                    121
                ],
                "_attributes": [
                    122
                ],
                "_is_numeric_dtype": [
                    123
                ],
                "_infer_as_myclass": [
                    124
                ],
                "_data": [
                    126
                ],
                "TimedeltaArray": [
                    354,
                    168,
                    42,
                    43,
                    174,
                    175,
                    62,
                    155,
                    126
                ],
                "_TD_DTYPE": [
                    137
                ],
                "name": [
                    160,
                    355,
                    171,
                    141,
                    179,
                    158
                ],
                "maybe_extract_name": [
                    141
                ],
                "data": [
                    160,
                    162,
                    164,
                    169,
                    141,
                    143,
                    146,
                    155,
                    157,
                    158
                ],
                "cls": [
                    171,
                    141,
                    177,
                    145,
                    158
                ],
                "is_scalar": [
                    224,
                    143
                ],
                "cls.__name__": [
                    145
                ],
                "unit": [
                    169,
                    149
                ],
                "freq": [
                    160,
                    353,
                    354,
                    169,
                    155,
                    350,
                    351
                ],
                "copy": [
                    161,
                    169,
                    205,
                    209,
                    156
                ],
                "data.copy": [
                    162,
                    157
                ],
                "cls._simple_new": [
                    171,
                    158
                ],
                "TimedeltaIndex": [
                    160,
                    355,
                    213,
                    280,
                    285
                ],
                "data._shallow_copy": [
                    164
                ],
                "tdarr": [
                    168,
                    355,
                    354,
                    171
                ],
                "TimedeltaArray._from_sequence": [
                    168
                ],
                "dtype": [
                    200,
                    169,
                    201,
                    205,
                    209
                ],
                "Label": [
                    174
                ],
                "values": [
                    178,
                    182,
                    175
                ],
                "result": [
                    205,
                    207,
                    208,
                    177,
                    178,
                    179,
                    180,
                    182,
                    184,
                    185
                ],
                "object.__new__": [
                    177
                ],
                "result._data": [
                    178
                ],
                "result._name": [
                    179
                ],
                "result._cache": [
                    180
                ],
                "result._index_data": [
                    182
                ],
                "values._data": [
                    182
                ],
                "result._reset_identity": [
                    184
                ],
                "_get_format_timedelta64": [
                    194
                ],
                "self": [
                    194,
                    227,
                    236,
                    205,
                    206,
                    207,
                    208,
                    209,
                    242,
                    268,
                    273,
                    214
                ],
                "pandas_dtype": [
                    200
                ],
                "is_timedelta64_dtype": [
                    201
                ],
                "is_timedelta64_ns_dtype": [
                    201
                ],
                "self._data.astype": [
                    205
                ],
                "self._data": [
                    236,
                    205
                ],
                "self.hasnans": [
                    206
                ],
                "Index": [
                    208,
                    242,
                    198,
                    207
                ],
                "self.name": [
                    208,
                    207
                ],
                "result.astype": [
                    208
                ],
                "DatetimeIndexOpsMixin.astype": [
                    209
                ],
                "DatetimeIndexOpsMixin": [
                    209
                ],
                "Appender": [
                    198
                ],
                "Index.astype.__doc__": [
                    198
                ],
                "Index.astype": [
                    198
                ],
                "other.inferred_type": [
                    212
                ],
                "other": [
                    212,
                    213,
                    214
                ],
                "key": [
                    224,
                    225,
                    227,
                    228,
                    230,
                    232,
                    234,
                    236,
                    237,
                    240,
                    242
                ],
                "InvalidIndexError": [
                    225
                ],
                "is_valid_nat_for_dtype": [
                    227
                ],
                "self.dtype": [
                    227
                ],
                "NaT": [
                    228,
                    236
                ],
                "Timedelta": [
                    232,
                    261,
                    266,
                    237
                ],
                "err": [
                    234
                ],
                "self._data._recognized_scalars": [
                    236
                ],
                "Index.get_loc": [
                    242
                ],
                "method": [
                    242
                ],
                "tolerance": [
                    242
                ],
                "kind": [
                    258
                ],
                "label": [
                    260,
                    261,
                    267,
                    268,
                    270
                ],
                "parsed": [
                    266,
                    261,
                    262
                ],
                "lbound": [
                    264,
                    266,
                    262
                ],
                "parsed.round": [
                    262
                ],
                "parsed.resolution_string": [
                    266,
                    262
                ],
                "side": [
                    263
                ],
                "to_offset": [
                    266
                ],
                "is_integer": [
                    267
                ],
                "is_float": [
                    267
                ],
                "self._invalid_indexer": [
                    268
                ],
                "typ": [
                    273
                ],
                "self.inferred_type": [
                    273
                ],
                "inherit_names": [
                    46,
                    31
                ],
                "TimedeltaArray._field_ops": [
                    42
                ],
                "TimedeltaIndex._add_logical_methods_disabled": [
                    280
                ],
                "com.any_none": [
                    350
                ],
                "com": [
                    350
                ],
                "periods": [
                    354,
                    350
                ],
                "start": [
                    354,
                    350
                ],
                "end": [
                    354,
                    350
                ],
                "freq_infer": [
                    353
                ],
                "dtl.maybe_infer_freq": [
                    353
                ],
                "TimedeltaArray._generate_range": [
                    354
                ],
                "closed": [
                    354
                ],
                "TimedeltaIndex._simple_new": [
                    355
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/indexes/test_base.py",
                "test_function": "test_get_indexer_non_unique_wrong_dtype",
                "test_function_code": "@pytest.mark.parametrize(\"ldtype\", dtlike_dtypes)\n@pytest.mark.parametrize(\"rdtype\", dtlike_dtypes)\ndef test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):\n\n    vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)\n\n    def construct(dtype):\n        if dtype is dtlike_dtypes[-1]:\n            # PeriodArray will try to cast ints to strings\n            return pd.DatetimeIndex(vals).astype(dtype)\n        return pd.Index(vals, dtype=dtype)\n\n    left = construct(ldtype)\n    right = construct(rdtype)\n\n    result = left.get_indexer_non_unique(right)\n\n    if ldtype is rdtype:\n        ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)\n        ex2 = np.array([], dtype=np.intp)\n        tm.assert_numpy_array_equal(result[0], ex1)\n        tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))\n\n    else:\n        no_matches = np.array([-1] * 6, dtype=np.intp)\n        tm.assert_numpy_array_equal(result[0], no_matches)\n        tm.assert_numpy_array_equal(result[1], no_matches)",
                "test_error": "AssertionError: numpy array are different  numpy array shapes are different [left]:  (12,) [right]: (6,)",
                "full_test_error": "ldtype = dtype('<M8[ns]'), rdtype = dtype('<m8[ns]')\n\n    @pytest.mark.parametrize(\"ldtype\", dtlike_dtypes)\n    @pytest.mark.parametrize(\"rdtype\", dtlike_dtypes)\n    def test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):\n    \n        vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)\n    \n        def construct(dtype):\n            if dtype is dtlike_dtypes[-1]:\n                # PeriodArray will try to cast ints to strings\n                return pd.DatetimeIndex(vals).astype(dtype)\n            return pd.Index(vals, dtype=dtype)\n    \n        left = construct(ldtype)\n        right = construct(rdtype)\n    \n        result = left.get_indexer_non_unique(right)\n    \n        if ldtype is rdtype:\n            ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)\n            ex2 = np.array([], dtype=np.intp)\n            tm.assert_numpy_array_equal(result[0], ex1)\n            tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))\n    \n        else:\n            no_matches = np.array([-1] * 6, dtype=np.intp)\n>           tm.assert_numpy_array_equal(result[0], no_matches)\n\npandas/tests/indexes/test_base.py:2654: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nleft = array([0, 3, 1, 4, 2, 5, 0, 3, 1, 4, 2, 5])\nright = array([-1, -1, -1, -1, -1, -1]), err_msg = None\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n>               raise_assert_detail(\n                    obj, f\"{obj} shapes are different\", left.shape, right.shape,\n                )\nE               AssertionError: numpy array are different\nE               \nE               numpy array shapes are different\nE               [left]:  (12,)\nE               [right]: (6,)\n\npandas/_testing.py:968: AssertionError",
                "traceback": "left = array([0, 3, 1, 4, 2, 5, 0, 3, 1, 4, 2, 5])\nright = array([-1, -1, -1, -1, -1, -1]), err_msg = None\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n>               raise_assert_detail(\n                    obj, f\"{obj} shapes are different\", left.shape, right.shape,\n                )\nE               AssertionError: numpy array are different",
                "test_error_location": "E               \nE               numpy array shapes are different\nE               [left]:  (12,)\nE               [right]: (6,)\n\npandas/_testing.py:968: AssertionError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('ldtype', dtlike_dtypes)",
                    "pytest.mark.parametrize('rdtype', dtlike_dtypes)"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/indexes/test_base.py",
                "test_function": "test_get_indexer_non_unique_wrong_dtype",
                "test_function_code": "@pytest.mark.parametrize(\"ldtype\", dtlike_dtypes)\n@pytest.mark.parametrize(\"rdtype\", dtlike_dtypes)\ndef test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):\n\n    vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)\n\n    def construct(dtype):\n        if dtype is dtlike_dtypes[-1]:\n            # PeriodArray will try to cast ints to strings\n            return pd.DatetimeIndex(vals).astype(dtype)\n        return pd.Index(vals, dtype=dtype)\n\n    left = construct(ldtype)\n    right = construct(rdtype)\n\n    result = left.get_indexer_non_unique(right)\n\n    if ldtype is rdtype:\n        ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)\n        ex2 = np.array([], dtype=np.intp)\n        tm.assert_numpy_array_equal(result[0], ex1)\n        tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))\n\n    else:\n        no_matches = np.array([-1] * 6, dtype=np.intp)\n        tm.assert_numpy_array_equal(result[0], no_matches)\n        tm.assert_numpy_array_equal(result[1], no_matches)",
                "test_error": "AssertionError: numpy array are different  numpy array shapes are different [left]:  (12,) [right]: (6,)",
                "full_test_error": "ldtype = datetime64[ns, Asia/Tokyo], rdtype = dtype('<m8[ns]')\n\n    @pytest.mark.parametrize(\"ldtype\", dtlike_dtypes)\n    @pytest.mark.parametrize(\"rdtype\", dtlike_dtypes)\n    def test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):\n    \n        vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)\n    \n        def construct(dtype):\n            if dtype is dtlike_dtypes[-1]:\n                # PeriodArray will try to cast ints to strings\n                return pd.DatetimeIndex(vals).astype(dtype)\n            return pd.Index(vals, dtype=dtype)\n    \n        left = construct(ldtype)\n        right = construct(rdtype)\n    \n        result = left.get_indexer_non_unique(right)\n    \n        if ldtype is rdtype:\n            ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)\n            ex2 = np.array([], dtype=np.intp)\n            tm.assert_numpy_array_equal(result[0], ex1)\n            tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))\n    \n        else:\n            no_matches = np.array([-1] * 6, dtype=np.intp)\n>           tm.assert_numpy_array_equal(result[0], no_matches)\n\npandas/tests/indexes/test_base.py:2654: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nleft = array([0, 3, 1, 4, 2, 5, 0, 3, 1, 4, 2, 5])\nright = array([-1, -1, -1, -1, -1, -1]), err_msg = None\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n>               raise_assert_detail(\n                    obj, f\"{obj} shapes are different\", left.shape, right.shape,\n                )\nE               AssertionError: numpy array are different\nE               \nE               numpy array shapes are different\nE               [left]:  (12,)\nE               [right]: (6,)\n\npandas/_testing.py:968: AssertionError",
                "traceback": "left = array([0, 3, 1, 4, 2, 5, 0, 3, 1, 4, 2, 5])\nright = array([-1, -1, -1, -1, -1, -1]), err_msg = None\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n>               raise_assert_detail(\n                    obj, f\"{obj} shapes are different\", left.shape, right.shape,\n                )\nE               AssertionError: numpy array are different",
                "test_error_location": "E               \nE               numpy array shapes are different\nE               [left]:  (12,)\nE               [right]: (6,)\n\npandas/_testing.py:968: AssertionError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('ldtype', dtlike_dtypes)",
                    "pytest.mark.parametrize('rdtype', dtlike_dtypes)"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/indexes/test_base.py",
                "test_function": "test_get_indexer_non_unique_wrong_dtype",
                "test_function_code": "@pytest.mark.parametrize(\"ldtype\", dtlike_dtypes)\n@pytest.mark.parametrize(\"rdtype\", dtlike_dtypes)\ndef test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):\n\n    vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)\n\n    def construct(dtype):\n        if dtype is dtlike_dtypes[-1]:\n            # PeriodArray will try to cast ints to strings\n            return pd.DatetimeIndex(vals).astype(dtype)\n        return pd.Index(vals, dtype=dtype)\n\n    left = construct(ldtype)\n    right = construct(rdtype)\n\n    result = left.get_indexer_non_unique(right)\n\n    if ldtype is rdtype:\n        ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)\n        ex2 = np.array([], dtype=np.intp)\n        tm.assert_numpy_array_equal(result[0], ex1)\n        tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))\n\n    else:\n        no_matches = np.array([-1] * 6, dtype=np.intp)\n        tm.assert_numpy_array_equal(result[0], no_matches)\n        tm.assert_numpy_array_equal(result[1], no_matches)",
                "test_error": "AssertionError: numpy array are different  numpy array values are different (100.0 %) [left]:  [0, 1, 2, 3, 4, 5] [right]: [-1, -1, -1, -1, -1, -1]",
                "full_test_error": "ldtype = period[N], rdtype = dtype('<m8[ns]')\n\n    @pytest.mark.parametrize(\"ldtype\", dtlike_dtypes)\n    @pytest.mark.parametrize(\"rdtype\", dtlike_dtypes)\n    def test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):\n    \n        vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)\n    \n        def construct(dtype):\n            if dtype is dtlike_dtypes[-1]:\n                # PeriodArray will try to cast ints to strings\n                return pd.DatetimeIndex(vals).astype(dtype)\n            return pd.Index(vals, dtype=dtype)\n    \n        left = construct(ldtype)\n        right = construct(rdtype)\n    \n        result = left.get_indexer_non_unique(right)\n    \n        if ldtype is rdtype:\n            ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)\n            ex2 = np.array([], dtype=np.intp)\n            tm.assert_numpy_array_equal(result[0], ex1)\n            tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))\n    \n        else:\n            no_matches = np.array([-1] * 6, dtype=np.intp)\n            tm.assert_numpy_array_equal(result[0], no_matches)\n>           tm.assert_numpy_array_equal(result[1], no_matches)\n\npandas/tests/indexes/test_base.py:2655: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nleft = array([0, 1, 2, 3, 4, 5]), right = array([-1, -1, -1, -1, -1, -1])\nerr_msg = None\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n                raise_assert_detail(\n                    obj, f\"{obj} shapes are different\", left.shape, right.shape,\n                )\n    \n            diff = 0\n            for l, r in zip(left, right):\n                # count up differences\n                if not array_equivalent(l, r, strict_nan=strict_nan):\n                    diff += 1\n    \n            diff = diff * 100.0 / left.size\n            msg = f\"{obj} values are different ({np.round(diff, 5)} %)\"\n>           raise_assert_detail(obj, msg, left, right)\nE           AssertionError: numpy array are different\nE           \nE           numpy array values are different (100.0 %)\nE           [left]:  [0, 1, 2, 3, 4, 5]\nE           [right]: [-1, -1, -1, -1, -1, -1]\n\npandas/_testing.py:980: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('ldtype', dtlike_dtypes)",
                    "pytest.mark.parametrize('rdtype', dtlike_dtypes)"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/indexes/test_base.py",
                "test_function": "test_get_indexer_non_unique_wrong_dtype",
                "test_function_code": "@pytest.mark.parametrize(\"ldtype\", dtlike_dtypes)\n@pytest.mark.parametrize(\"rdtype\", dtlike_dtypes)\ndef test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):\n\n    vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)\n\n    def construct(dtype):\n        if dtype is dtlike_dtypes[-1]:\n            # PeriodArray will try to cast ints to strings\n            return pd.DatetimeIndex(vals).astype(dtype)\n        return pd.Index(vals, dtype=dtype)\n\n    left = construct(ldtype)\n    right = construct(rdtype)\n\n    result = left.get_indexer_non_unique(right)\n\n    if ldtype is rdtype:\n        ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)\n        ex2 = np.array([], dtype=np.intp)\n        tm.assert_numpy_array_equal(result[0], ex1)\n        tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))\n\n    else:\n        no_matches = np.array([-1] * 6, dtype=np.intp)\n        tm.assert_numpy_array_equal(result[0], no_matches)\n        tm.assert_numpy_array_equal(result[1], no_matches)",
                "test_error": "AssertionError: numpy array are different  numpy array shapes are different [left]:  (12,) [right]: (6,)",
                "full_test_error": "ldtype = dtype('<m8[ns]'), rdtype = dtype('<M8[ns]')\n\n    @pytest.mark.parametrize(\"ldtype\", dtlike_dtypes)\n    @pytest.mark.parametrize(\"rdtype\", dtlike_dtypes)\n    def test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):\n    \n        vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)\n    \n        def construct(dtype):\n            if dtype is dtlike_dtypes[-1]:\n                # PeriodArray will try to cast ints to strings\n                return pd.DatetimeIndex(vals).astype(dtype)\n            return pd.Index(vals, dtype=dtype)\n    \n        left = construct(ldtype)\n        right = construct(rdtype)\n    \n        result = left.get_indexer_non_unique(right)\n    \n        if ldtype is rdtype:\n            ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)\n            ex2 = np.array([], dtype=np.intp)\n            tm.assert_numpy_array_equal(result[0], ex1)\n            tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))\n    \n        else:\n            no_matches = np.array([-1] * 6, dtype=np.intp)\n>           tm.assert_numpy_array_equal(result[0], no_matches)\n\npandas/tests/indexes/test_base.py:2654: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nleft = array([0, 3, 1, 4, 2, 5, 0, 3, 1, 4, 2, 5])\nright = array([-1, -1, -1, -1, -1, -1]), err_msg = None\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n>               raise_assert_detail(\n                    obj, f\"{obj} shapes are different\", left.shape, right.shape,\n                )\nE               AssertionError: numpy array are different\nE               \nE               numpy array shapes are different\nE               [left]:  (12,)\nE               [right]: (6,)\n\npandas/_testing.py:968: AssertionError",
                "traceback": "left = array([0, 3, 1, 4, 2, 5, 0, 3, 1, 4, 2, 5])\nright = array([-1, -1, -1, -1, -1, -1]), err_msg = None\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n>               raise_assert_detail(\n                    obj, f\"{obj} shapes are different\", left.shape, right.shape,\n                )\nE               AssertionError: numpy array are different",
                "test_error_location": "E               \nE               numpy array shapes are different\nE               [left]:  (12,)\nE               [right]: (6,)\n\npandas/_testing.py:968: AssertionError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('ldtype', dtlike_dtypes)",
                    "pytest.mark.parametrize('rdtype', dtlike_dtypes)"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/indexes/test_base.py",
                "test_function": "test_get_indexer_non_unique_wrong_dtype",
                "test_function_code": "@pytest.mark.parametrize(\"ldtype\", dtlike_dtypes)\n@pytest.mark.parametrize(\"rdtype\", dtlike_dtypes)\ndef test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):\n\n    vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)\n\n    def construct(dtype):\n        if dtype is dtlike_dtypes[-1]:\n            # PeriodArray will try to cast ints to strings\n            return pd.DatetimeIndex(vals).astype(dtype)\n        return pd.Index(vals, dtype=dtype)\n\n    left = construct(ldtype)\n    right = construct(rdtype)\n\n    result = left.get_indexer_non_unique(right)\n\n    if ldtype is rdtype:\n        ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)\n        ex2 = np.array([], dtype=np.intp)\n        tm.assert_numpy_array_equal(result[0], ex1)\n        tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))\n\n    else:\n        no_matches = np.array([-1] * 6, dtype=np.intp)\n        tm.assert_numpy_array_equal(result[0], no_matches)\n        tm.assert_numpy_array_equal(result[1], no_matches)",
                "test_error": "AssertionError: numpy array are different  numpy array shapes are different [left]:  (12,) [right]: (6,)",
                "full_test_error": "ldtype = datetime64[ns, Asia/Tokyo], rdtype = dtype('<M8[ns]')\n\n    @pytest.mark.parametrize(\"ldtype\", dtlike_dtypes)\n    @pytest.mark.parametrize(\"rdtype\", dtlike_dtypes)\n    def test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):\n    \n        vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)\n    \n        def construct(dtype):\n            if dtype is dtlike_dtypes[-1]:\n                # PeriodArray will try to cast ints to strings\n                return pd.DatetimeIndex(vals).astype(dtype)\n            return pd.Index(vals, dtype=dtype)\n    \n        left = construct(ldtype)\n        right = construct(rdtype)\n    \n        result = left.get_indexer_non_unique(right)\n    \n        if ldtype is rdtype:\n            ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)\n            ex2 = np.array([], dtype=np.intp)\n            tm.assert_numpy_array_equal(result[0], ex1)\n            tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))\n    \n        else:\n            no_matches = np.array([-1] * 6, dtype=np.intp)\n>           tm.assert_numpy_array_equal(result[0], no_matches)\n\npandas/tests/indexes/test_base.py:2654: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nleft = array([0, 3, 1, 4, 2, 5, 0, 3, 1, 4, 2, 5])\nright = array([-1, -1, -1, -1, -1, -1]), err_msg = None\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n>               raise_assert_detail(\n                    obj, f\"{obj} shapes are different\", left.shape, right.shape,\n                )\nE               AssertionError: numpy array are different\nE               \nE               numpy array shapes are different\nE               [left]:  (12,)\nE               [right]: (6,)\n\npandas/_testing.py:968: AssertionError",
                "traceback": "left = array([0, 3, 1, 4, 2, 5, 0, 3, 1, 4, 2, 5])\nright = array([-1, -1, -1, -1, -1, -1]), err_msg = None\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n>               raise_assert_detail(\n                    obj, f\"{obj} shapes are different\", left.shape, right.shape,\n                )\nE               AssertionError: numpy array are different",
                "test_error_location": "E               \nE               numpy array shapes are different\nE               [left]:  (12,)\nE               [right]: (6,)\n\npandas/_testing.py:968: AssertionError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('ldtype', dtlike_dtypes)",
                    "pytest.mark.parametrize('rdtype', dtlike_dtypes)"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/indexes/test_base.py",
                "test_function": "test_get_indexer_non_unique_wrong_dtype",
                "test_function_code": "@pytest.mark.parametrize(\"ldtype\", dtlike_dtypes)\n@pytest.mark.parametrize(\"rdtype\", dtlike_dtypes)\ndef test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):\n\n    vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)\n\n    def construct(dtype):\n        if dtype is dtlike_dtypes[-1]:\n            # PeriodArray will try to cast ints to strings\n            return pd.DatetimeIndex(vals).astype(dtype)\n        return pd.Index(vals, dtype=dtype)\n\n    left = construct(ldtype)\n    right = construct(rdtype)\n\n    result = left.get_indexer_non_unique(right)\n\n    if ldtype is rdtype:\n        ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)\n        ex2 = np.array([], dtype=np.intp)\n        tm.assert_numpy_array_equal(result[0], ex1)\n        tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))\n\n    else:\n        no_matches = np.array([-1] * 6, dtype=np.intp)\n        tm.assert_numpy_array_equal(result[0], no_matches)\n        tm.assert_numpy_array_equal(result[1], no_matches)",
                "test_error": "AssertionError: numpy array are different  numpy array values are different (100.0 %) [left]:  [0, 1, 2, 3, 4, 5] [right]: [-1, -1, -1, -1, -1, -1]",
                "full_test_error": "ldtype = period[N], rdtype = dtype('<M8[ns]')\n\n    @pytest.mark.parametrize(\"ldtype\", dtlike_dtypes)\n    @pytest.mark.parametrize(\"rdtype\", dtlike_dtypes)\n    def test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):\n    \n        vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)\n    \n        def construct(dtype):\n            if dtype is dtlike_dtypes[-1]:\n                # PeriodArray will try to cast ints to strings\n                return pd.DatetimeIndex(vals).astype(dtype)\n            return pd.Index(vals, dtype=dtype)\n    \n        left = construct(ldtype)\n        right = construct(rdtype)\n    \n        result = left.get_indexer_non_unique(right)\n    \n        if ldtype is rdtype:\n            ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)\n            ex2 = np.array([], dtype=np.intp)\n            tm.assert_numpy_array_equal(result[0], ex1)\n            tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))\n    \n        else:\n            no_matches = np.array([-1] * 6, dtype=np.intp)\n            tm.assert_numpy_array_equal(result[0], no_matches)\n>           tm.assert_numpy_array_equal(result[1], no_matches)\n\npandas/tests/indexes/test_base.py:2655: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nleft = array([0, 1, 2, 3, 4, 5]), right = array([-1, -1, -1, -1, -1, -1])\nerr_msg = None\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n                raise_assert_detail(\n                    obj, f\"{obj} shapes are different\", left.shape, right.shape,\n                )\n    \n            diff = 0\n            for l, r in zip(left, right):\n                # count up differences\n                if not array_equivalent(l, r, strict_nan=strict_nan):\n                    diff += 1\n    \n            diff = diff * 100.0 / left.size\n            msg = f\"{obj} values are different ({np.round(diff, 5)} %)\"\n>           raise_assert_detail(obj, msg, left, right)\nE           AssertionError: numpy array are different\nE           \nE           numpy array values are different (100.0 %)\nE           [left]:  [0, 1, 2, 3, 4, 5]\nE           [right]: [-1, -1, -1, -1, -1, -1]\n\npandas/_testing.py:980: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('ldtype', dtlike_dtypes)",
                    "pytest.mark.parametrize('rdtype', dtlike_dtypes)"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/indexes/test_base.py",
                "test_function": "test_get_indexer_non_unique_wrong_dtype",
                "test_function_code": "@pytest.mark.parametrize(\"ldtype\", dtlike_dtypes)\n@pytest.mark.parametrize(\"rdtype\", dtlike_dtypes)\ndef test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):\n\n    vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)\n\n    def construct(dtype):\n        if dtype is dtlike_dtypes[-1]:\n            # PeriodArray will try to cast ints to strings\n            return pd.DatetimeIndex(vals).astype(dtype)\n        return pd.Index(vals, dtype=dtype)\n\n    left = construct(ldtype)\n    right = construct(rdtype)\n\n    result = left.get_indexer_non_unique(right)\n\n    if ldtype is rdtype:\n        ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)\n        ex2 = np.array([], dtype=np.intp)\n        tm.assert_numpy_array_equal(result[0], ex1)\n        tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))\n\n    else:\n        no_matches = np.array([-1] * 6, dtype=np.intp)\n        tm.assert_numpy_array_equal(result[0], no_matches)\n        tm.assert_numpy_array_equal(result[1], no_matches)",
                "test_error": "AssertionError: numpy array are different  numpy array shapes are different [left]:  (12,) [right]: (6,)",
                "full_test_error": "ldtype = dtype('<m8[ns]'), rdtype = datetime64[ns, Asia/Tokyo]\n\n    @pytest.mark.parametrize(\"ldtype\", dtlike_dtypes)\n    @pytest.mark.parametrize(\"rdtype\", dtlike_dtypes)\n    def test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):\n    \n        vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)\n    \n        def construct(dtype):\n            if dtype is dtlike_dtypes[-1]:\n                # PeriodArray will try to cast ints to strings\n                return pd.DatetimeIndex(vals).astype(dtype)\n            return pd.Index(vals, dtype=dtype)\n    \n        left = construct(ldtype)\n        right = construct(rdtype)\n    \n        result = left.get_indexer_non_unique(right)\n    \n        if ldtype is rdtype:\n            ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)\n            ex2 = np.array([], dtype=np.intp)\n            tm.assert_numpy_array_equal(result[0], ex1)\n            tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))\n    \n        else:\n            no_matches = np.array([-1] * 6, dtype=np.intp)\n>           tm.assert_numpy_array_equal(result[0], no_matches)\n\npandas/tests/indexes/test_base.py:2654: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nleft = array([0, 3, 1, 4, 2, 5, 0, 3, 1, 4, 2, 5])\nright = array([-1, -1, -1, -1, -1, -1]), err_msg = None\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n>               raise_assert_detail(\n                    obj, f\"{obj} shapes are different\", left.shape, right.shape,\n                )\nE               AssertionError: numpy array are different\nE               \nE               numpy array shapes are different\nE               [left]:  (12,)\nE               [right]: (6,)\n\npandas/_testing.py:968: AssertionError",
                "traceback": "left = array([0, 3, 1, 4, 2, 5, 0, 3, 1, 4, 2, 5])\nright = array([-1, -1, -1, -1, -1, -1]), err_msg = None\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n>               raise_assert_detail(\n                    obj, f\"{obj} shapes are different\", left.shape, right.shape,\n                )\nE               AssertionError: numpy array are different",
                "test_error_location": "E               \nE               numpy array shapes are different\nE               [left]:  (12,)\nE               [right]: (6,)\n\npandas/_testing.py:968: AssertionError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('ldtype', dtlike_dtypes)",
                    "pytest.mark.parametrize('rdtype', dtlike_dtypes)"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/indexes/test_base.py",
                "test_function": "test_get_indexer_non_unique_wrong_dtype",
                "test_function_code": "@pytest.mark.parametrize(\"ldtype\", dtlike_dtypes)\n@pytest.mark.parametrize(\"rdtype\", dtlike_dtypes)\ndef test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):\n\n    vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)\n\n    def construct(dtype):\n        if dtype is dtlike_dtypes[-1]:\n            # PeriodArray will try to cast ints to strings\n            return pd.DatetimeIndex(vals).astype(dtype)\n        return pd.Index(vals, dtype=dtype)\n\n    left = construct(ldtype)\n    right = construct(rdtype)\n\n    result = left.get_indexer_non_unique(right)\n\n    if ldtype is rdtype:\n        ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)\n        ex2 = np.array([], dtype=np.intp)\n        tm.assert_numpy_array_equal(result[0], ex1)\n        tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))\n\n    else:\n        no_matches = np.array([-1] * 6, dtype=np.intp)\n        tm.assert_numpy_array_equal(result[0], no_matches)\n        tm.assert_numpy_array_equal(result[1], no_matches)",
                "test_error": "AssertionError: numpy array are different  numpy array shapes are different [left]:  (12,) [right]: (6,)",
                "full_test_error": "ldtype = dtype('<M8[ns]'), rdtype = datetime64[ns, Asia/Tokyo]\n\n    @pytest.mark.parametrize(\"ldtype\", dtlike_dtypes)\n    @pytest.mark.parametrize(\"rdtype\", dtlike_dtypes)\n    def test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):\n    \n        vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)\n    \n        def construct(dtype):\n            if dtype is dtlike_dtypes[-1]:\n                # PeriodArray will try to cast ints to strings\n                return pd.DatetimeIndex(vals).astype(dtype)\n            return pd.Index(vals, dtype=dtype)\n    \n        left = construct(ldtype)\n        right = construct(rdtype)\n    \n        result = left.get_indexer_non_unique(right)\n    \n        if ldtype is rdtype:\n            ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)\n            ex2 = np.array([], dtype=np.intp)\n            tm.assert_numpy_array_equal(result[0], ex1)\n            tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))\n    \n        else:\n            no_matches = np.array([-1] * 6, dtype=np.intp)\n>           tm.assert_numpy_array_equal(result[0], no_matches)\n\npandas/tests/indexes/test_base.py:2654: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nleft = array([0, 3, 1, 4, 2, 5, 0, 3, 1, 4, 2, 5])\nright = array([-1, -1, -1, -1, -1, -1]), err_msg = None\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n>               raise_assert_detail(\n                    obj, f\"{obj} shapes are different\", left.shape, right.shape,\n                )\nE               AssertionError: numpy array are different\nE               \nE               numpy array shapes are different\nE               [left]:  (12,)\nE               [right]: (6,)\n\npandas/_testing.py:968: AssertionError",
                "traceback": "left = array([0, 3, 1, 4, 2, 5, 0, 3, 1, 4, 2, 5])\nright = array([-1, -1, -1, -1, -1, -1]), err_msg = None\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n>               raise_assert_detail(\n                    obj, f\"{obj} shapes are different\", left.shape, right.shape,\n                )\nE               AssertionError: numpy array are different",
                "test_error_location": "E               \nE               numpy array shapes are different\nE               [left]:  (12,)\nE               [right]: (6,)\n\npandas/_testing.py:968: AssertionError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('ldtype', dtlike_dtypes)",
                    "pytest.mark.parametrize('rdtype', dtlike_dtypes)"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/indexes/test_base.py",
                "test_function": "test_get_indexer_non_unique_wrong_dtype",
                "test_function_code": "@pytest.mark.parametrize(\"ldtype\", dtlike_dtypes)\n@pytest.mark.parametrize(\"rdtype\", dtlike_dtypes)\ndef test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):\n\n    vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)\n\n    def construct(dtype):\n        if dtype is dtlike_dtypes[-1]:\n            # PeriodArray will try to cast ints to strings\n            return pd.DatetimeIndex(vals).astype(dtype)\n        return pd.Index(vals, dtype=dtype)\n\n    left = construct(ldtype)\n    right = construct(rdtype)\n\n    result = left.get_indexer_non_unique(right)\n\n    if ldtype is rdtype:\n        ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)\n        ex2 = np.array([], dtype=np.intp)\n        tm.assert_numpy_array_equal(result[0], ex1)\n        tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))\n\n    else:\n        no_matches = np.array([-1] * 6, dtype=np.intp)\n        tm.assert_numpy_array_equal(result[0], no_matches)\n        tm.assert_numpy_array_equal(result[1], no_matches)",
                "test_error": "AssertionError: numpy array are different  numpy array values are different (100.0 %) [left]:  [0, 1, 2, 3, 4, 5] [right]: [-1, -1, -1, -1, -1, -1]",
                "full_test_error": "ldtype = period[N], rdtype = datetime64[ns, Asia/Tokyo]\n\n    @pytest.mark.parametrize(\"ldtype\", dtlike_dtypes)\n    @pytest.mark.parametrize(\"rdtype\", dtlike_dtypes)\n    def test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):\n    \n        vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)\n    \n        def construct(dtype):\n            if dtype is dtlike_dtypes[-1]:\n                # PeriodArray will try to cast ints to strings\n                return pd.DatetimeIndex(vals).astype(dtype)\n            return pd.Index(vals, dtype=dtype)\n    \n        left = construct(ldtype)\n        right = construct(rdtype)\n    \n        result = left.get_indexer_non_unique(right)\n    \n        if ldtype is rdtype:\n            ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)\n            ex2 = np.array([], dtype=np.intp)\n            tm.assert_numpy_array_equal(result[0], ex1)\n            tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))\n    \n        else:\n            no_matches = np.array([-1] * 6, dtype=np.intp)\n            tm.assert_numpy_array_equal(result[0], no_matches)\n>           tm.assert_numpy_array_equal(result[1], no_matches)\n\npandas/tests/indexes/test_base.py:2655: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nleft = array([0, 1, 2, 3, 4, 5]), right = array([-1, -1, -1, -1, -1, -1])\nerr_msg = None\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n                raise_assert_detail(\n                    obj, f\"{obj} shapes are different\", left.shape, right.shape,\n                )\n    \n            diff = 0\n            for l, r in zip(left, right):\n                # count up differences\n                if not array_equivalent(l, r, strict_nan=strict_nan):\n                    diff += 1\n    \n            diff = diff * 100.0 / left.size\n            msg = f\"{obj} values are different ({np.round(diff, 5)} %)\"\n>           raise_assert_detail(obj, msg, left, right)\nE           AssertionError: numpy array are different\nE           \nE           numpy array values are different (100.0 %)\nE           [left]:  [0, 1, 2, 3, 4, 5]\nE           [right]: [-1, -1, -1, -1, -1, -1]\n\npandas/_testing.py:980: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('ldtype', dtlike_dtypes)",
                    "pytest.mark.parametrize('rdtype', dtlike_dtypes)"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/indexes/test_base.py",
                "test_function": "test_get_indexer_non_unique_wrong_dtype",
                "test_function_code": "@pytest.mark.parametrize(\"ldtype\", dtlike_dtypes)\n@pytest.mark.parametrize(\"rdtype\", dtlike_dtypes)\ndef test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):\n\n    vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)\n\n    def construct(dtype):\n        if dtype is dtlike_dtypes[-1]:\n            # PeriodArray will try to cast ints to strings\n            return pd.DatetimeIndex(vals).astype(dtype)\n        return pd.Index(vals, dtype=dtype)\n\n    left = construct(ldtype)\n    right = construct(rdtype)\n\n    result = left.get_indexer_non_unique(right)\n\n    if ldtype is rdtype:\n        ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)\n        ex2 = np.array([], dtype=np.intp)\n        tm.assert_numpy_array_equal(result[0], ex1)\n        tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))\n\n    else:\n        no_matches = np.array([-1] * 6, dtype=np.intp)\n        tm.assert_numpy_array_equal(result[0], no_matches)\n        tm.assert_numpy_array_equal(result[1], no_matches)",
                "test_error": "AssertionError: numpy array are different  numpy array shapes are different [left]:  (12,) [right]: (6,)",
                "full_test_error": "ldtype = dtype('<m8[ns]'), rdtype = period[N]\n\n    @pytest.mark.parametrize(\"ldtype\", dtlike_dtypes)\n    @pytest.mark.parametrize(\"rdtype\", dtlike_dtypes)\n    def test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):\n    \n        vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)\n    \n        def construct(dtype):\n            if dtype is dtlike_dtypes[-1]:\n                # PeriodArray will try to cast ints to strings\n                return pd.DatetimeIndex(vals).astype(dtype)\n            return pd.Index(vals, dtype=dtype)\n    \n        left = construct(ldtype)\n        right = construct(rdtype)\n    \n        result = left.get_indexer_non_unique(right)\n    \n        if ldtype is rdtype:\n            ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)\n            ex2 = np.array([], dtype=np.intp)\n            tm.assert_numpy_array_equal(result[0], ex1)\n            tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))\n    \n        else:\n            no_matches = np.array([-1] * 6, dtype=np.intp)\n>           tm.assert_numpy_array_equal(result[0], no_matches)\n\npandas/tests/indexes/test_base.py:2654: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nleft = array([0, 3, 1, 4, 2, 5, 0, 3, 1, 4, 2, 5])\nright = array([-1, -1, -1, -1, -1, -1]), err_msg = None\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n>               raise_assert_detail(\n                    obj, f\"{obj} shapes are different\", left.shape, right.shape,\n                )\nE               AssertionError: numpy array are different\nE               \nE               numpy array shapes are different\nE               [left]:  (12,)\nE               [right]: (6,)\n\npandas/_testing.py:968: AssertionError",
                "traceback": "left = array([0, 3, 1, 4, 2, 5, 0, 3, 1, 4, 2, 5])\nright = array([-1, -1, -1, -1, -1, -1]), err_msg = None\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n>               raise_assert_detail(\n                    obj, f\"{obj} shapes are different\", left.shape, right.shape,\n                )\nE               AssertionError: numpy array are different",
                "test_error_location": "E               \nE               numpy array shapes are different\nE               [left]:  (12,)\nE               [right]: (6,)\n\npandas/_testing.py:968: AssertionError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('ldtype', dtlike_dtypes)",
                    "pytest.mark.parametrize('rdtype', dtlike_dtypes)"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/indexes/test_base.py",
                "test_function": "test_get_indexer_non_unique_wrong_dtype",
                "test_function_code": "@pytest.mark.parametrize(\"ldtype\", dtlike_dtypes)\n@pytest.mark.parametrize(\"rdtype\", dtlike_dtypes)\ndef test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):\n\n    vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)\n\n    def construct(dtype):\n        if dtype is dtlike_dtypes[-1]:\n            # PeriodArray will try to cast ints to strings\n            return pd.DatetimeIndex(vals).astype(dtype)\n        return pd.Index(vals, dtype=dtype)\n\n    left = construct(ldtype)\n    right = construct(rdtype)\n\n    result = left.get_indexer_non_unique(right)\n\n    if ldtype is rdtype:\n        ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)\n        ex2 = np.array([], dtype=np.intp)\n        tm.assert_numpy_array_equal(result[0], ex1)\n        tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))\n\n    else:\n        no_matches = np.array([-1] * 6, dtype=np.intp)\n        tm.assert_numpy_array_equal(result[0], no_matches)\n        tm.assert_numpy_array_equal(result[1], no_matches)",
                "test_error": "AssertionError: numpy array are different  numpy array shapes are different [left]:  (12,) [right]: (6,)",
                "full_test_error": "ldtype = dtype('<M8[ns]'), rdtype = period[N]\n\n    @pytest.mark.parametrize(\"ldtype\", dtlike_dtypes)\n    @pytest.mark.parametrize(\"rdtype\", dtlike_dtypes)\n    def test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):\n    \n        vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)\n    \n        def construct(dtype):\n            if dtype is dtlike_dtypes[-1]:\n                # PeriodArray will try to cast ints to strings\n                return pd.DatetimeIndex(vals).astype(dtype)\n            return pd.Index(vals, dtype=dtype)\n    \n        left = construct(ldtype)\n        right = construct(rdtype)\n    \n        result = left.get_indexer_non_unique(right)\n    \n        if ldtype is rdtype:\n            ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)\n            ex2 = np.array([], dtype=np.intp)\n            tm.assert_numpy_array_equal(result[0], ex1)\n            tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))\n    \n        else:\n            no_matches = np.array([-1] * 6, dtype=np.intp)\n>           tm.assert_numpy_array_equal(result[0], no_matches)\n\npandas/tests/indexes/test_base.py:2654: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nleft = array([0, 3, 1, 4, 2, 5, 0, 3, 1, 4, 2, 5])\nright = array([-1, -1, -1, -1, -1, -1]), err_msg = None\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n>               raise_assert_detail(\n                    obj, f\"{obj} shapes are different\", left.shape, right.shape,\n                )\nE               AssertionError: numpy array are different\nE               \nE               numpy array shapes are different\nE               [left]:  (12,)\nE               [right]: (6,)\n\npandas/_testing.py:968: AssertionError",
                "traceback": "left = array([0, 3, 1, 4, 2, 5, 0, 3, 1, 4, 2, 5])\nright = array([-1, -1, -1, -1, -1, -1]), err_msg = None\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n>               raise_assert_detail(\n                    obj, f\"{obj} shapes are different\", left.shape, right.shape,\n                )\nE               AssertionError: numpy array are different",
                "test_error_location": "E               \nE               numpy array shapes are different\nE               [left]:  (12,)\nE               [right]: (6,)\n\npandas/_testing.py:968: AssertionError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('ldtype', dtlike_dtypes)",
                    "pytest.mark.parametrize('rdtype', dtlike_dtypes)"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/indexes/test_base.py",
                "test_function": "test_get_indexer_non_unique_wrong_dtype",
                "test_function_code": "@pytest.mark.parametrize(\"ldtype\", dtlike_dtypes)\n@pytest.mark.parametrize(\"rdtype\", dtlike_dtypes)\ndef test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):\n\n    vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)\n\n    def construct(dtype):\n        if dtype is dtlike_dtypes[-1]:\n            # PeriodArray will try to cast ints to strings\n            return pd.DatetimeIndex(vals).astype(dtype)\n        return pd.Index(vals, dtype=dtype)\n\n    left = construct(ldtype)\n    right = construct(rdtype)\n\n    result = left.get_indexer_non_unique(right)\n\n    if ldtype is rdtype:\n        ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)\n        ex2 = np.array([], dtype=np.intp)\n        tm.assert_numpy_array_equal(result[0], ex1)\n        tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))\n\n    else:\n        no_matches = np.array([-1] * 6, dtype=np.intp)\n        tm.assert_numpy_array_equal(result[0], no_matches)\n        tm.assert_numpy_array_equal(result[1], no_matches)",
                "test_error": "AssertionError: numpy array are different  numpy array shapes are different [left]:  (12,) [right]: (6,)",
                "full_test_error": "ldtype = datetime64[ns, Asia/Tokyo], rdtype = period[N]\n\n    @pytest.mark.parametrize(\"ldtype\", dtlike_dtypes)\n    @pytest.mark.parametrize(\"rdtype\", dtlike_dtypes)\n    def test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):\n    \n        vals = np.tile(3600 * 10 ** 9 * np.arange(3), 2)\n    \n        def construct(dtype):\n            if dtype is dtlike_dtypes[-1]:\n                # PeriodArray will try to cast ints to strings\n                return pd.DatetimeIndex(vals).astype(dtype)\n            return pd.Index(vals, dtype=dtype)\n    \n        left = construct(ldtype)\n        right = construct(rdtype)\n    \n        result = left.get_indexer_non_unique(right)\n    \n        if ldtype is rdtype:\n            ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)\n            ex2 = np.array([], dtype=np.intp)\n            tm.assert_numpy_array_equal(result[0], ex1)\n            tm.assert_numpy_array_equal(result[1], ex2.astype(np.int64))\n    \n        else:\n            no_matches = np.array([-1] * 6, dtype=np.intp)\n>           tm.assert_numpy_array_equal(result[0], no_matches)\n\npandas/tests/indexes/test_base.py:2654: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nleft = array([0, 3, 1, 4, 2, 5, 0, 3, 1, 4, 2, 5])\nright = array([-1, -1, -1, -1, -1, -1]), err_msg = None\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n>               raise_assert_detail(\n                    obj, f\"{obj} shapes are different\", left.shape, right.shape,\n                )\nE               AssertionError: numpy array are different\nE               \nE               numpy array shapes are different\nE               [left]:  (12,)\nE               [right]: (6,)\n\npandas/_testing.py:968: AssertionError",
                "traceback": "left = array([0, 3, 1, 4, 2, 5, 0, 3, 1, 4, 2, 5])\nright = array([-1, -1, -1, -1, -1, -1]), err_msg = None\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n>               raise_assert_detail(\n                    obj, f\"{obj} shapes are different\", left.shape, right.shape,\n                )\nE               AssertionError: numpy array are different",
                "test_error_location": "E               \nE               numpy array shapes are different\nE               [left]:  (12,)\nE               [right]: (6,)\n\npandas/_testing.py:968: AssertionError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('ldtype', dtlike_dtypes)",
                    "pytest.mark.parametrize('rdtype', dtlike_dtypes)"
                ]
            }
        ]
    }
}