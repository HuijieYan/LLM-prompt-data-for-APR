{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.3.1": 0,
                "1.3.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.1.2": 0,
                "2.2.3": 1,
                "2.2.4": 0,
                "2.2.5": 1,
                "2.2.6": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.2.1": 1,
                "2.2.2": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n    \n    input_layers = model._input_layers\n    outputs = []\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    \n    for layer in input_layers:\n        input_tensor = Input(batch_shape=layer.batch_input_shape,\n                             dtype=layer.dtype,\n                             sparse=layer.sparse,\n                             name=layer.name)\n        layer_map[layer] = input_tensor\n        outputs.append(input_tensor)\n    \n    for node in model._nodes_by_depth:\n        layer = node.outbound_layer\n        if layer not in layer_map:\n            new_layer = layer.__class__.from_config(layer.get_config())\n            layer_map[layer] = new_layer\n    \n        reference_input_tensors = node.input_tensors\n        reference_output_tensors = node.output_tensors\n    \n        output_tensors = []\n        computed_data = []  # List of tuples (input, mask).\n        for x in reference_input_tensors:\n            if x in tensor_map:\n                computed_data.append(tensor_map[x])\n    \n        if len(computed_data) == len(reference_input_tensors):\n            if node.arguments:\n                kwargs = node.arguments\n            else:\n                kwargs = {}\n    \n            computed_tensors = [x[0] for x in computed_data]\n            if has_arg(layer.call, 'mask'):\n                if 'mask' not in kwargs:\n                    kwargs['mask'] = [None] * len(reference_output_tensors)\n                output_tensors = layer(computed_tensors, **kwargs)\n                for x, y in zip(reference_output_tensors, output_tensors):\n                    tensor_map[x] = (y, None)  # tensor, mask\n    \n    for x in model.outputs:\n        assert x in tensor_map, 'Could not compute output ' + str(x)\n        tensor, _ = tensor_map[x]\n        outputs.append(tensor)\n    \n    return Model(input_layers, outputs, name=model.name)"
        }
    ]
}