{
    "scrapy:26": {
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/scrapy/scrapy/settings/__init__.py": {
            "buggy_functions": [
                {
                    "function_name": "getbool",
                    "function_code": "def getbool(self, name, default=False):\n    \"\"\"\n    Get a setting value as a boolean.\n    \n    ``1``, ``'1'``, and ``True`` return ``True``, while ``0``, ``'0'``,\n    ``False`` and ``None`` return ``False``. \n\n    For example, settings populated through environment variables set to\n    ``'0'`` will return ``False`` when using this method.\n\n    :param name: the setting name\n    :type name: string\n\n    :param default: the value to return if no setting is found\n    :type default: any\n    \"\"\"\n    return bool(int(self.get(name, default)))\n",
                    "decorators": [],
                    "docstring": "Get a setting value as a boolean.\n\n``1``, ``'1'``, and ``True`` return ``True``, while ``0``, ``'0'``,\n``False`` and ``None`` return ``False``. \n\nFor example, settings populated through environment variables set to\n``'0'`` will return ``False`` when using this method.\n\n:param name: the setting name\n:type name: string\n\n:param default: the value to return if no setting is found\n:type default: any",
                    "start_line": 116,
                    "variables": {
                        "bool": [
                            132
                        ],
                        "int": [
                            132
                        ],
                        "self.get": [
                            132
                        ],
                        "self": [
                            132
                        ],
                        "name": [
                            132
                        ],
                        "default": [
                            132
                        ]
                    },
                    "filtered_variables": {
                        "self.get": [
                            132
                        ],
                        "self": [
                            132
                        ],
                        "name": [
                            132
                        ],
                        "default": [
                            132
                        ]
                    },
                    "diff_line_number": 119,
                    "class_data": {
                        "signature": "class BaseSettings(MutableMapping)",
                        "docstring": "Instances of this class behave like dictionaries, but store priorities\nalong with their ``(key, value)`` pairs, and can be frozen (i.e. marked\nimmutable).\n\nKey-value entries can be passed on initialization with the ``values``\nargument, and they would take the ``priority`` level (unless ``values`` is\nalready an instance of :class:`~scrapy.settings.BaseSettings`, in which\ncase the existing priority levels will be kept).  If the ``priority``\nargument is a string, the priority name will be looked up in\n:attr:`~scrapy.settings.SETTINGS_PRIORITIES`. Otherwise, a specific integer\nshould be provided.\n\nOnce the object is created, new settings can be loaded or updated with the\n:meth:`~scrapy.settings.BaseSettings.set` method, and can be accessed with\nthe square bracket notation of dictionaries, or with the\n:meth:`~scrapy.settings.BaseSettings.get` method of the instance and its\nvalue conversion variants. When requesting a stored key, the value with the\nhighest priority will be retrieved.",
                        "constructor_docstring": null,
                        "functions": [
                            "__init__(self, values=None, priority='project')",
                            "__getitem__(self, opt_name)",
                            "__contains__(self, name)",
                            "get(self, name, default=None)",
                            "getbool(self, name, default=False)",
                            "getint(self, name, default=0)",
                            "getfloat(self, name, default=0.0)",
                            "getlist(self, name, default=None)",
                            "getdict(self, name, default=None)",
                            "_getcomposite(self, name)",
                            "getpriority(self, name)",
                            "maxpriority(self)",
                            "__setitem__(self, name, value)",
                            "set(self, name, value, priority='project')",
                            "setdict(self, values, priority='project')",
                            "setmodule(self, module, priority='project')",
                            "update(self, values, priority='project')",
                            "delete(self, name, priority='project')",
                            "__delitem__(self, name)",
                            "_assert_mutability(self)",
                            "copy(self)",
                            "freeze(self)",
                            "frozencopy(self)",
                            "__iter__(self)",
                            "__len__(self)",
                            "__str__(self)",
                            "__repr__(self)",
                            "overrides(self)",
                            "defaults(self)"
                        ],
                        "constructor_variables": [
                            "frozen",
                            "attributes"
                        ],
                        "class_level_variables": [],
                        "class_decorators": []
                    }
                },
                {
                    "function_name": "_getcomposite",
                    "function_code": "def _getcomposite(self, name):\n    # DO NOT USE THIS FUNCTION IN YOUR CUSTOM PROJECTS\n    # It's for internal use in the transition away from the _BASE settings\n    # and will be removed along with _BASE support in a future release\n    basename = name + \"_BASE\"\n    if basename in self:\n        warnings.warn('_BASE settings are deprecated.',\n                      category=ScrapyDeprecationWarning)\n        compsett = BaseSettings(self[name + \"_BASE\"], priority='default')\n        compsett.update(self[name])\n        return compsett\n    else:\n        return self[name]\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 198,
                    "variables": {
                        "basename": [
                            202,
                            203
                        ],
                        "name": [
                            210,
                            202,
                            206,
                            207
                        ],
                        "self": [
                            210,
                            203,
                            206,
                            207
                        ],
                        "warnings.warn": [
                            204
                        ],
                        "warnings": [
                            204
                        ],
                        "ScrapyDeprecationWarning": [
                            205
                        ],
                        "compsett": [
                            208,
                            206,
                            207
                        ],
                        "BaseSettings": [
                            206
                        ],
                        "compsett.update": [
                            207
                        ]
                    },
                    "filtered_variables": {
                        "basename": [
                            202,
                            203
                        ],
                        "name": [
                            210,
                            202,
                            206,
                            207
                        ],
                        "self": [
                            210,
                            203,
                            206,
                            207
                        ],
                        "warnings.warn": [
                            204
                        ],
                        "warnings": [
                            204
                        ],
                        "ScrapyDeprecationWarning": [
                            205
                        ],
                        "compsett": [
                            208,
                            206,
                            207
                        ],
                        "BaseSettings": [
                            206
                        ],
                        "compsett.update": [
                            207
                        ]
                    },
                    "diff_line_number": 206,
                    "class_data": {
                        "signature": "class BaseSettings(MutableMapping)",
                        "docstring": "Instances of this class behave like dictionaries, but store priorities\nalong with their ``(key, value)`` pairs, and can be frozen (i.e. marked\nimmutable).\n\nKey-value entries can be passed on initialization with the ``values``\nargument, and they would take the ``priority`` level (unless ``values`` is\nalready an instance of :class:`~scrapy.settings.BaseSettings`, in which\ncase the existing priority levels will be kept).  If the ``priority``\nargument is a string, the priority name will be looked up in\n:attr:`~scrapy.settings.SETTINGS_PRIORITIES`. Otherwise, a specific integer\nshould be provided.\n\nOnce the object is created, new settings can be loaded or updated with the\n:meth:`~scrapy.settings.BaseSettings.set` method, and can be accessed with\nthe square bracket notation of dictionaries, or with the\n:meth:`~scrapy.settings.BaseSettings.get` method of the instance and its\nvalue conversion variants. When requesting a stored key, the value with the\nhighest priority will be retrieved.",
                        "constructor_docstring": null,
                        "functions": [
                            "__init__(self, values=None, priority='project')",
                            "__getitem__(self, opt_name)",
                            "__contains__(self, name)",
                            "get(self, name, default=None)",
                            "getbool(self, name, default=False)",
                            "getint(self, name, default=0)",
                            "getfloat(self, name, default=0.0)",
                            "getlist(self, name, default=None)",
                            "getdict(self, name, default=None)",
                            "_getcomposite(self, name)",
                            "getpriority(self, name)",
                            "maxpriority(self)",
                            "__setitem__(self, name, value)",
                            "set(self, name, value, priority='project')",
                            "setdict(self, values, priority='project')",
                            "setmodule(self, module, priority='project')",
                            "update(self, values, priority='project')",
                            "delete(self, name, priority='project')",
                            "__delitem__(self, name)",
                            "_assert_mutability(self)",
                            "copy(self)",
                            "freeze(self)",
                            "frozencopy(self)",
                            "__iter__(self)",
                            "__len__(self)",
                            "__str__(self)",
                            "__repr__(self)",
                            "overrides(self)",
                            "defaults(self)"
                        ],
                        "constructor_variables": [
                            "frozen",
                            "attributes"
                        ],
                        "class_level_variables": [],
                        "class_decorators": []
                    }
                },
                {
                    "function_name": null,
                    "function_code": null,
                    "decorators": [],
                    "docstring": null,
                    "start_line": null,
                    "variables": {},
                    "filtered_variables": {},
                    "diff_line_number": 211,
                    "class_data": {
                        "signature": "class BaseSettings(MutableMapping)",
                        "docstring": "Instances of this class behave like dictionaries, but store priorities\nalong with their ``(key, value)`` pairs, and can be frozen (i.e. marked\nimmutable).\n\nKey-value entries can be passed on initialization with the ``values``\nargument, and they would take the ``priority`` level (unless ``values`` is\nalready an instance of :class:`~scrapy.settings.BaseSettings`, in which\ncase the existing priority levels will be kept).  If the ``priority``\nargument is a string, the priority name will be looked up in\n:attr:`~scrapy.settings.SETTINGS_PRIORITIES`. Otherwise, a specific integer\nshould be provided.\n\nOnce the object is created, new settings can be loaded or updated with the\n:meth:`~scrapy.settings.BaseSettings.set` method, and can be accessed with\nthe square bracket notation of dictionaries, or with the\n:meth:`~scrapy.settings.BaseSettings.get` method of the instance and its\nvalue conversion variants. When requesting a stored key, the value with the\nhighest priority will be retrieved.",
                        "constructor_docstring": null,
                        "functions": [
                            "__init__(self, values=None, priority='project')",
                            "__getitem__(self, opt_name)",
                            "__contains__(self, name)",
                            "get(self, name, default=None)",
                            "getbool(self, name, default=False)",
                            "getint(self, name, default=0)",
                            "getfloat(self, name, default=0.0)",
                            "getlist(self, name, default=None)",
                            "getdict(self, name, default=None)",
                            "_getcomposite(self, name)",
                            "getpriority(self, name)",
                            "maxpriority(self)",
                            "__setitem__(self, name, value)",
                            "set(self, name, value, priority='project')",
                            "setdict(self, values, priority='project')",
                            "setmodule(self, module, priority='project')",
                            "update(self, values, priority='project')",
                            "delete(self, name, priority='project')",
                            "__delitem__(self, name)",
                            "_assert_mutability(self)",
                            "copy(self)",
                            "freeze(self)",
                            "frozencopy(self)",
                            "__iter__(self)",
                            "__len__(self)",
                            "__str__(self)",
                            "__repr__(self)",
                            "overrides(self)",
                            "defaults(self)"
                        ],
                        "constructor_variables": [
                            "frozen",
                            "attributes"
                        ],
                        "class_level_variables": [],
                        "class_decorators": []
                    }
                }
            ],
            "inscope_functions": [
                "get_settings_priority(priority)",
                "iter_default_settings()",
                "overridden_settings(settings)",
                "__init__(self, value, priority)",
                "set(self, value, priority)",
                "__str__(self)",
                "__init__(self, values=None, priority='project')",
                "__getitem__(self, opt_name)",
                "__contains__(self, name)",
                "get(self, name, default=None)",
                "getbool(self, name, default=False)",
                "getint(self, name, default=0)",
                "getfloat(self, name, default=0.0)",
                "getlist(self, name, default=None)",
                "getdict(self, name, default=None)",
                "_getcomposite(self, name)",
                "getpriority(self, name)",
                "maxpriority(self)",
                "__setitem__(self, name, value)",
                "set(self, name, value, priority='project')",
                "setdict(self, values, priority='project')",
                "setmodule(self, module, priority='project')",
                "update(self, values, priority='project')",
                "delete(self, name, priority='project')",
                "__delitem__(self, name)",
                "_assert_mutability(self)",
                "copy(self)",
                "freeze(self)",
                "frozencopy(self)",
                "__iter__(self)",
                "__len__(self)",
                "__str__(self)",
                "__repr__(self)",
                "overrides(self)",
                "defaults(self)",
                "__init__(self, settings, priority)",
                "__len__(self)",
                "__getitem__(self, k)",
                "__setitem__(self, k, v)",
                "__delitem__(self, k)",
                "__iter__(self, k, v)",
                "__init__(self, values=None, priority='project')",
                "__init__(self, settings_module=None, **kw)",
                "__getitem__(self, opt_name)",
                "__str__(self)"
            ],
            "variables_in_file": {
                "SETTINGS_PRIORITIES": [
                    14,
                    30
                ],
                "isinstance": [
                    194,
                    261,
                    319,
                    453,
                    492,
                    45,
                    173,
                    52,
                    316,
                    29,
                    287
                ],
                "priority": [
                    259,
                    264,
                    266,
                    269,
                    29,
                    30,
                    414,
                    32,
                    291,
                    46,
                    48,
                    54,
                    55,
                    57,
                    59,
                    324,
                    455,
                    328,
                    329,
                    93,
                    222
                ],
                "six.string_types": [
                    194,
                    173,
                    316,
                    29,
                    287
                ],
                "six": [
                    320,
                    194,
                    323,
                    452,
                    173,
                    316,
                    29,
                    287
                ],
                "object": [
                    35
                ],
                "self.value": [
                    44,
                    45,
                    46,
                    52,
                    54,
                    55,
                    58
                ],
                "self": [
                    44,
                    45,
                    46,
                    48,
                    52,
                    54,
                    55,
                    57,
                    58,
                    59,
                    63,
                    91,
                    92,
                    93,
                    97,
                    98,
                    102,
                    114,
                    132,
                    144,
                    156,
                    172,
                    193,
                    203,
                    206,
                    207,
                    210,
                    221,
                    222,
                    232,
                    233,
                    238,
                    258,
                    260,
                    262,
                    264,
                    266,
                    269,
                    286,
                    291,
                    315,
                    321,
                    324,
                    327,
                    329,
                    330,
                    333,
                    334,
                    337,
                    350,
                    360,
                    368,
                    373,
                    376,
                    379,
                    382,
                    391,
                    393,
                    403,
                    405,
                    412,
                    413,
                    414,
                    417,
                    420,
                    423,
                    424,
                    427,
                    430,
                    448,
                    449,
                    452,
                    454,
                    455,
                    461,
                    462,
                    465,
                    466,
                    467,
                    468,
                    469,
                    470,
                    471,
                    474
                ],
                "value": [
                    261,
                    262,
                    264,
                    266,
                    44,
                    172,
                    173,
                    174,
                    175,
                    54,
                    58,
                    320,
                    193,
                    194,
                    195,
                    196,
                    321,
                    323,
                    324,
                    96,
                    98,
                    99,
                    491,
                    492,
                    493,
                    238
                ],
                "BaseSettings": [
                    454,
                    45,
                    206,
                    433,
                    52,
                    319
                ],
                "self.priority": [
                    423,
                    46,
                    48,
                    55,
                    57,
                    59,
                    414
                ],
                "max": [
                    233,
                    46,
                    55
                ],
                "self.value.maxpriority": [
                    46,
                    55
                ],
                "self.value.update": [
                    54
                ],
                "format": [
                    62
                ],
                "__repr__": [
                    65
                ],
                "__str__": [
                    65
                ],
                "MutableMapping": [
                    409,
                    68
                ],
                "self.frozen": [
                    360,
                    337,
                    91
                ],
                "self.attributes": [
                    98,
                    382,
                    102,
                    262,
                    264,
                    266,
                    330,
                    334,
                    373,
                    376,
                    379,
                    92,
                    222
                ],
                "self.update": [
                    269,
                    93,
                    455
                ],
                "values": [
                    320,
                    321,
                    323,
                    455,
                    269,
                    93,
                    316,
                    317,
                    318,
                    319
                ],
                "opt_name": [
                    97,
                    98,
                    465,
                    466,
                    467,
                    468,
                    469,
                    470,
                    471
                ],
                "name": [
                    132,
                    260,
                    262,
                    264,
                    266,
                    144,
                    156,
                    172,
                    320,
                    193,
                    321,
                    323,
                    324,
                    452,
                    454,
                    329,
                    202,
                    330,
                    206,
                    207,
                    334,
                    210,
                    221,
                    222,
                    483,
                    484,
                    485,
                    102,
                    233,
                    490,
                    491,
                    493,
                    238,
                    114
                ],
                "default": [
                    193,
                    132,
                    172,
                    144,
                    114,
                    156
                ],
                "bool": [
                    132
                ],
                "int": [
                    144,
                    132
                ],
                "self.get": [
                    193,
                    132,
                    172,
                    144,
                    156
                ],
                "float": [
                    156
                ],
                "value.split": [
                    174
                ],
                "list": [
                    175
                ],
                "json.loads": [
                    195,
                    317
                ],
                "json": [
                    195,
                    317
                ],
                "dict": [
                    492,
                    196,
                    453
                ],
                "basename": [
                    202,
                    203
                ],
                "warnings.warn": [
                    386,
                    204,
                    398
                ],
                "warnings": [
                    386,
                    204,
                    398
                ],
                "ScrapyDeprecationWarning": [
                    401,
                    205,
                    389
                ],
                "compsett": [
                    208,
                    206,
                    207
                ],
                "compsett.update": [
                    207
                ],
                "prio": [
                    220,
                    222,
                    223
                ],
                "len": [
                    232,
                    417,
                    376
                ],
                "self.getpriority": [
                    329,
                    233
                ],
                "get_settings_priority": [
                    259,
                    328,
                    235
                ],
                "self.set": [
                    321,
                    291,
                    324,
                    454,
                    238
                ],
                "self._assert_mutability": [
                    258,
                    327,
                    333,
                    315,
                    286
                ],
                "SettingsAttribute": [
                    264,
                    261
                ],
                "set": [
                    266
                ],
                "module": [
                    288,
                    289,
                    291,
                    287
                ],
                "import_module": [
                    288
                ],
                "key": [
                    289,
                    290,
                    291
                ],
                "dir": [
                    289,
                    483
                ],
                "key.isupper": [
                    290
                ],
                "getattr": [
                    291,
                    468,
                    485
                ],
                "six.iteritems": [
                    320,
                    323,
                    452
                ],
                "values.getpriority": [
                    321
                ],
                "TypeError": [
                    338
                ],
                "copy.deepcopy": [
                    350
                ],
                "copy": [
                    368,
                    369,
                    370,
                    350
                ],
                "self.copy": [
                    368
                ],
                "copy.freeze": [
                    369
                ],
                "iter": [
                    373,
                    430
                ],
                "str": [
                    379
                ],
                "self.__class__.__name__": [
                    382
                ],
                "self.__class__": [
                    382
                ],
                "o": [
                    391,
                    393,
                    394,
                    403,
                    405,
                    406
                ],
                "self._overrides": [
                    393,
                    391
                ],
                "AttributeError": [
                    392,
                    404
                ],
                "_DictProxy": [
                    393,
                    405
                ],
                "property": [
                    384,
                    396
                ],
                "self._defaults": [
                    403,
                    405
                ],
                "self.o": [
                    417,
                    420,
                    424,
                    427,
                    430,
                    412
                ],
                "self.settings": [
                    413,
                    423
                ],
                "settings": [
                    491,
                    413
                ],
                "k": [
                    424,
                    427,
                    420,
                    423
                ],
                "self.settings.set": [
                    423
                ],
                "v": [
                    424,
                    423
                ],
                "__init__": [
                    448
                ],
                "super": [
                    448
                ],
                "Settings": [
                    448,
                    458,
                    462,
                    471
                ],
                "self.setmodule": [
                    449
                ],
                "default_settings": [
                    449,
                    483,
                    485
                ],
                "val": [
                    452,
                    453,
                    454
                ],
                "self.settings_module": [
                    474,
                    467,
                    468,
                    461
                ],
                "settings_module": [
                    461
                ],
                "Settings.__init__": [
                    462
                ],
                "kw": [
                    462
                ],
                "self.overrides": [
                    465,
                    466
                ],
                "hasattr": [
                    467
                ],
                "self.defaults": [
                    469,
                    470
                ],
                "Settings.__getitem__": [
                    471
                ],
                "CrawlerSettings": [
                    476,
                    477
                ],
                "create_deprecated_class": [
                    476
                ],
                "name.isupper": [
                    484
                ],
                "defvalue": [
                    490,
                    492
                ],
                "iter_default_settings": [
                    490
                ]
            },
            "filtered_variables_in_file": {
                "SETTINGS_PRIORITIES": [
                    14,
                    30
                ],
                "priority": [
                    259,
                    264,
                    266,
                    269,
                    29,
                    30,
                    414,
                    32,
                    291,
                    46,
                    48,
                    54,
                    55,
                    57,
                    59,
                    324,
                    455,
                    328,
                    329,
                    93,
                    222
                ],
                "six.string_types": [
                    194,
                    173,
                    316,
                    29,
                    287
                ],
                "six": [
                    320,
                    194,
                    323,
                    452,
                    173,
                    316,
                    29,
                    287
                ],
                "self.value": [
                    44,
                    45,
                    46,
                    52,
                    54,
                    55,
                    58
                ],
                "self": [
                    44,
                    45,
                    46,
                    48,
                    52,
                    54,
                    55,
                    57,
                    58,
                    59,
                    63,
                    91,
                    92,
                    93,
                    97,
                    98,
                    102,
                    114,
                    132,
                    144,
                    156,
                    172,
                    193,
                    203,
                    206,
                    207,
                    210,
                    221,
                    222,
                    232,
                    233,
                    238,
                    258,
                    260,
                    262,
                    264,
                    266,
                    269,
                    286,
                    291,
                    315,
                    321,
                    324,
                    327,
                    329,
                    330,
                    333,
                    334,
                    337,
                    350,
                    360,
                    368,
                    373,
                    376,
                    379,
                    382,
                    391,
                    393,
                    403,
                    405,
                    412,
                    413,
                    414,
                    417,
                    420,
                    423,
                    424,
                    427,
                    430,
                    448,
                    449,
                    452,
                    454,
                    455,
                    461,
                    462,
                    465,
                    466,
                    467,
                    468,
                    469,
                    470,
                    471,
                    474
                ],
                "value": [
                    261,
                    262,
                    264,
                    266,
                    44,
                    172,
                    173,
                    174,
                    175,
                    54,
                    58,
                    320,
                    193,
                    194,
                    195,
                    196,
                    321,
                    323,
                    324,
                    96,
                    98,
                    99,
                    491,
                    492,
                    493,
                    238
                ],
                "BaseSettings": [
                    454,
                    45,
                    206,
                    433,
                    52,
                    319
                ],
                "self.priority": [
                    423,
                    46,
                    48,
                    55,
                    57,
                    59,
                    414
                ],
                "self.value.maxpriority": [
                    46,
                    55
                ],
                "self.value.update": [
                    54
                ],
                "__repr__": [
                    65
                ],
                "__str__": [
                    65
                ],
                "MutableMapping": [
                    409,
                    68
                ],
                "self.frozen": [
                    360,
                    337,
                    91
                ],
                "self.attributes": [
                    98,
                    382,
                    102,
                    262,
                    264,
                    266,
                    330,
                    334,
                    373,
                    376,
                    379,
                    92,
                    222
                ],
                "self.update": [
                    269,
                    93,
                    455
                ],
                "values": [
                    320,
                    321,
                    323,
                    455,
                    269,
                    93,
                    316,
                    317,
                    318,
                    319
                ],
                "opt_name": [
                    97,
                    98,
                    465,
                    466,
                    467,
                    468,
                    469,
                    470,
                    471
                ],
                "name": [
                    132,
                    260,
                    262,
                    264,
                    266,
                    144,
                    156,
                    172,
                    320,
                    193,
                    321,
                    323,
                    324,
                    452,
                    454,
                    329,
                    202,
                    330,
                    206,
                    207,
                    334,
                    210,
                    221,
                    222,
                    483,
                    484,
                    485,
                    102,
                    233,
                    490,
                    491,
                    493,
                    238,
                    114
                ],
                "default": [
                    193,
                    132,
                    172,
                    144,
                    114,
                    156
                ],
                "self.get": [
                    193,
                    132,
                    172,
                    144,
                    156
                ],
                "value.split": [
                    174
                ],
                "json.loads": [
                    195,
                    317
                ],
                "json": [
                    195,
                    317
                ],
                "basename": [
                    202,
                    203
                ],
                "warnings.warn": [
                    386,
                    204,
                    398
                ],
                "warnings": [
                    386,
                    204,
                    398
                ],
                "ScrapyDeprecationWarning": [
                    401,
                    205,
                    389
                ],
                "compsett": [
                    208,
                    206,
                    207
                ],
                "compsett.update": [
                    207
                ],
                "prio": [
                    220,
                    222,
                    223
                ],
                "self.getpriority": [
                    329,
                    233
                ],
                "get_settings_priority": [
                    259,
                    328,
                    235
                ],
                "self.set": [
                    321,
                    291,
                    324,
                    454,
                    238
                ],
                "self._assert_mutability": [
                    258,
                    327,
                    333,
                    315,
                    286
                ],
                "SettingsAttribute": [
                    264,
                    261
                ],
                "module": [
                    288,
                    289,
                    291,
                    287
                ],
                "import_module": [
                    288
                ],
                "key": [
                    289,
                    290,
                    291
                ],
                "key.isupper": [
                    290
                ],
                "six.iteritems": [
                    320,
                    323,
                    452
                ],
                "values.getpriority": [
                    321
                ],
                "copy.deepcopy": [
                    350
                ],
                "copy": [
                    368,
                    369,
                    370,
                    350
                ],
                "self.copy": [
                    368
                ],
                "copy.freeze": [
                    369
                ],
                "self.__class__.__name__": [
                    382
                ],
                "self.__class__": [
                    382
                ],
                "o": [
                    391,
                    393,
                    394,
                    403,
                    405,
                    406
                ],
                "self._overrides": [
                    393,
                    391
                ],
                "_DictProxy": [
                    393,
                    405
                ],
                "self._defaults": [
                    403,
                    405
                ],
                "self.o": [
                    417,
                    420,
                    424,
                    427,
                    430,
                    412
                ],
                "self.settings": [
                    413,
                    423
                ],
                "settings": [
                    491,
                    413
                ],
                "k": [
                    424,
                    427,
                    420,
                    423
                ],
                "self.settings.set": [
                    423
                ],
                "v": [
                    424,
                    423
                ],
                "__init__": [
                    448
                ],
                "Settings": [
                    448,
                    458,
                    462,
                    471
                ],
                "self.setmodule": [
                    449
                ],
                "default_settings": [
                    449,
                    483,
                    485
                ],
                "val": [
                    452,
                    453,
                    454
                ],
                "self.settings_module": [
                    474,
                    467,
                    468,
                    461
                ],
                "settings_module": [
                    461
                ],
                "Settings.__init__": [
                    462
                ],
                "kw": [
                    462
                ],
                "self.overrides": [
                    465,
                    466
                ],
                "self.defaults": [
                    469,
                    470
                ],
                "Settings.__getitem__": [
                    471
                ],
                "CrawlerSettings": [
                    476,
                    477
                ],
                "create_deprecated_class": [
                    476
                ],
                "name.isupper": [
                    484
                ],
                "defvalue": [
                    490,
                    492
                ],
                "iter_default_settings": [
                    490
                ]
            }
        },
        "test_data": []
    }
}