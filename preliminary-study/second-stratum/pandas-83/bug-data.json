{
    "pandas:83": {
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/core/indexes/api.py": {
            "buggy_functions": [
                {
                    "function_name": "get_objs_combined_axis",
                    "function_code": "def get_objs_combined_axis(\n    objs, intersect: bool = False, axis=0, sort: bool = True\n) -> Index:\n    \"\"\"\n    Extract combined index: return intersection or union (depending on the\n    value of \"intersect\") of indexes on given axis, or None if all objects\n    lack indexes (e.g. they are numpy arrays).\n\n    Parameters\n    ----------\n    objs : list\n        Series or DataFrame objects, may be mix of the two.\n    intersect : bool, default False\n        If True, calculate the intersection between indexes. Otherwise,\n        calculate the union.\n    axis : {0 or 'index', 1 or 'outer'}, default 0\n        The axis to extract indexes from.\n    sort : bool, default True\n        Whether the result index should come out sorted or not.\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    obs_idxes = [obj._get_axis(axis) for obj in objs]\n    return _get_combined_index(obs_idxes, intersect=intersect, sort=sort)\n",
                    "decorators": [],
                    "docstring": "Extract combined index: return intersection or union (depending on the\nvalue of \"intersect\") of indexes on given axis, or None if all objects\nlack indexes (e.g. they are numpy arrays).\n\nParameters\n----------\nobjs : list\n    Series or DataFrame objects, may be mix of the two.\nintersect : bool, default False\n    If True, calculate the intersection between indexes. Otherwise,\n    calculate the union.\naxis : {0 or 'index', 1 or 'outer'}, default 0\n    The axis to extract indexes from.\nsort : bool, default True\n    Whether the result index should come out sorted or not.\n\nReturns\n-------\nIndex",
                    "start_line": 65,
                    "variables": {
                        "bool": [
                            66
                        ],
                        "obs_idxes": [
                            89,
                            90
                        ],
                        "obj._get_axis": [
                            89
                        ],
                        "obj": [
                            89
                        ],
                        "axis": [
                            89
                        ],
                        "objs": [
                            89
                        ],
                        "_get_combined_index": [
                            90
                        ],
                        "intersect": [
                            90
                        ],
                        "sort": [
                            90
                        ],
                        "Index": [
                            67
                        ]
                    },
                    "filtered_variables": {
                        "obs_idxes": [
                            89,
                            90
                        ],
                        "obj._get_axis": [
                            89
                        ],
                        "obj": [
                            89
                        ],
                        "axis": [
                            89
                        ],
                        "objs": [
                            89
                        ],
                        "_get_combined_index": [
                            90
                        ],
                        "intersect": [
                            90
                        ],
                        "sort": [
                            90
                        ],
                        "Index": [
                            67
                        ]
                    },
                    "diff_line_number": 66,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "_get_combined_index",
                    "function_code": "def _get_combined_index(\n    indexes: List[Index], intersect: bool = False, sort: bool = False\n) -> Index:\n    \"\"\"\n    Return the union or intersection of indexes.\n\n    Parameters\n    ----------\n    indexes : list of Index or list objects\n        When intersect=True, do not accept list of lists.\n    intersect : bool, default False\n        If True, calculate the intersection between indexes. Otherwise,\n        calculate the union.\n    sort : bool, default False\n        Whether the result index should come out sorted or not.\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    # TODO: handle index names!\n    indexes = _get_distinct_objs(indexes)\n    if len(indexes) == 0:\n        index = Index([])\n    elif len(indexes) == 1:\n        index = indexes[0]\n    elif intersect:\n        index = indexes[0]\n        for other in indexes[1:]:\n            index = index.intersection(other)\n    else:\n        index = union_indexes(indexes, sort=sort)\n        index = ensure_index(index)\n\n    if sort:\n        try:\n            index = index.sort_values()\n        except TypeError:\n            pass\n    return index\n",
                    "decorators": [],
                    "docstring": "Return the union or intersection of indexes.\n\nParameters\n----------\nindexes : list of Index or list objects\n    When intersect=True, do not accept list of lists.\nintersect : bool, default False\n    If True, calculate the intersection between indexes. Otherwise,\n    calculate the union.\nsort : bool, default False\n    Whether the result index should come out sorted or not.\n\nReturns\n-------\nIndex",
                    "start_line": 107,
                    "variables": {
                        "List": [
                            108
                        ],
                        "Index": [
                            130,
                            108,
                            109
                        ],
                        "bool": [
                            108
                        ],
                        "indexes": [
                            128,
                            129,
                            131,
                            132,
                            134,
                            135,
                            138
                        ],
                        "_get_distinct_objs": [
                            128
                        ],
                        "len": [
                            129,
                            131
                        ],
                        "index": [
                            130,
                            132,
                            134,
                            136,
                            138,
                            139,
                            143,
                            146
                        ],
                        "intersect": [
                            133
                        ],
                        "other": [
                            136,
                            135
                        ],
                        "index.intersection": [
                            136
                        ],
                        "union_indexes": [
                            138
                        ],
                        "sort": [
                            138,
                            141
                        ],
                        "ensure_index": [
                            139
                        ],
                        "index.sort_values": [
                            143
                        ],
                        "TypeError": [
                            144
                        ]
                    },
                    "filtered_variables": {
                        "List": [
                            108
                        ],
                        "Index": [
                            130,
                            108,
                            109
                        ],
                        "indexes": [
                            128,
                            129,
                            131,
                            132,
                            134,
                            135,
                            138
                        ],
                        "_get_distinct_objs": [
                            128
                        ],
                        "index": [
                            130,
                            132,
                            134,
                            136,
                            138,
                            139,
                            143,
                            146
                        ],
                        "intersect": [
                            133
                        ],
                        "other": [
                            136,
                            135
                        ],
                        "index.intersection": [
                            136
                        ],
                        "union_indexes": [
                            138
                        ],
                        "sort": [
                            138,
                            141
                        ],
                        "ensure_index": [
                            139
                        ],
                        "index.sort_values": [
                            143
                        ]
                    },
                    "diff_line_number": 108,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def get_objs_combined_axis(\n    objs, intersect: bool = False, axis=0, sort: bool = True\n) -> Index:\n    \"\"\"\n    Extract combined index: return intersection or union (depending on the\n    value of \"intersect\") of indexes on given axis, or None if all objects\n    lack indexes (e.g. they are numpy arrays).\n\n    Parameters\n    ----------\n    objs : list\n        Series or DataFrame objects, may be mix of the two.\n    intersect : bool, default False\n        If True, calculate the intersection between indexes. Otherwise,\n        calculate the union.\n    axis : {0 or 'index', 1 or 'outer'}, default 0\n        The axis to extract indexes from.\n    sort : bool, default True\n        Whether the result index should come out sorted or not.\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    obs_idxes = [obj._get_axis(axis) for obj in objs]\n    return _get_combined_index(obs_idxes, intersect=intersect, sort=sort)",
                "def _get_distinct_objs(objs: List[Index]) -> List[Index]:\n    \"\"\"\n    Return a list with distinct elements of \"objs\" (different ids).\n    Preserves order.\n    \"\"\"\n    ids: Set[int] = set()\n    res = []\n    for obj in objs:\n        if id(obj) not in ids:\n            ids.add(id(obj))\n            res.append(obj)\n    return res",
                "def _get_combined_index(\n    indexes: List[Index], intersect: bool = False, sort: bool = False\n) -> Index:\n    \"\"\"\n    Return the union or intersection of indexes.\n\n    Parameters\n    ----------\n    indexes : list of Index or list objects\n        When intersect=True, do not accept list of lists.\n    intersect : bool, default False\n        If True, calculate the intersection between indexes. Otherwise,\n        calculate the union.\n    sort : bool, default False\n        Whether the result index should come out sorted or not.\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    # TODO: handle index names!\n    indexes = _get_distinct_objs(indexes)\n    if len(indexes) == 0:\n        index = Index([])\n    elif len(indexes) == 1:\n        index = indexes[0]\n    elif intersect:\n        index = indexes[0]\n        for other in indexes[1:]:\n            index = index.intersection(other)\n    else:\n        index = union_indexes(indexes, sort=sort)\n        index = ensure_index(index)\n\n    if sort:\n        try:\n            index = index.sort_values()\n        except TypeError:\n            pass\n    return index",
                "def union_indexes(indexes, sort=True) -> Index:\n    \"\"\"\n    Return the union of indexes.\n\n    The behavior of sort and names is not consistent.\n\n    Parameters\n    ----------\n    indexes : list of Index or list objects\n    sort : bool, default True\n        Whether the result index should come out sorted or not.\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    if len(indexes) == 0:\n        raise AssertionError(\"Must have at least 1 Index to union\")\n    if len(indexes) == 1:\n        result = indexes[0]\n        if isinstance(result, list):\n            result = Index(sorted(result))\n        return result\n\n    indexes, kind = _sanitize_and_check(indexes)\n\n    def _unique_indices(inds) -> Index:\n        \"\"\"\n        Convert indexes to lists and concatenate them, removing duplicates.\n\n        The final dtype is inferred.\n\n        Parameters\n        ----------\n        inds : list of Index or list objects\n\n        Returns\n        -------\n        Index\n        \"\"\"\n\n        def conv(i):\n            if isinstance(i, Index):\n                i = i.tolist()\n            return i\n\n        return Index(lib.fast_unique_multiple_list([conv(i) for i in inds], sort=sort))\n\n    if kind == \"special\":\n        result = indexes[0]\n\n        if hasattr(result, \"union_many\"):\n            # DatetimeIndex\n            return result.union_many(indexes[1:])\n        else:\n            for other in indexes[1:]:\n                result = result.union(other)\n            return result\n    elif kind == \"array\":\n        index = indexes[0]\n        for other in indexes[1:]:\n            if not index.equals(other):\n                return _unique_indices(indexes)\n\n        name = get_consensus_names(indexes)[0]\n        if name != index.name:\n            index = index._shallow_copy(name=name)\n        return index\n    else:  # kind='list'\n        return _unique_indices(indexes)",
                "def _sanitize_and_check(indexes):\n    \"\"\"\n    Verify the type of indexes and convert lists to Index.\n\n    Cases:\n\n    - [list, list, ...]: Return ([list, list, ...], 'list')\n    - [list, Index, ...]: Return _sanitize_and_check([Index, Index, ...])\n        Lists are sorted and converted to Index.\n    - [Index, Index, ...]: Return ([Index, Index, ...], TYPE)\n        TYPE = 'special' if at least one special type, 'array' otherwise.\n\n    Parameters\n    ----------\n    indexes : list of Index or list objects\n\n    Returns\n    -------\n    sanitized_indexes : list of Index or list objects\n    type : {'list', 'array', 'special'}\n    \"\"\"\n    kinds = list({type(index) for index in indexes})\n\n    if list in kinds:\n        if len(kinds) > 1:\n            indexes = [\n                Index(com.try_sort(x)) if not isinstance(x, Index) else x\n                for x in indexes\n            ]\n            kinds.remove(list)\n        else:\n            return indexes, \"list\"\n\n    if len(kinds) > 1 or Index not in kinds:\n        return indexes, \"special\"\n    else:\n        return indexes, \"array\"",
                "def get_consensus_names(indexes):\n    \"\"\"\n    Give a consensus 'names' to indexes.\n\n    If there's exactly one non-empty 'names', return this,\n    otherwise, return empty.\n\n    Parameters\n    ----------\n    indexes : list of Index objects\n\n    Returns\n    -------\n    list\n        A list representing the consensus 'names' found.\n    \"\"\"\n    # find the non-none names, need to tupleify to make\n    # the set hashable, then reverse on return\n    consensus_names = {tuple(i.names) for i in indexes if com.any_not_none(*i.names)}\n    if len(consensus_names) == 1:\n        return list(list(consensus_names)[0])\n    return [None] * indexes[0].nlevels",
                "def all_indexes_same(indexes):\n    \"\"\"\n    Determine if all indexes contain the same elements.\n\n    Parameters\n    ----------\n    indexes : list of Index objects\n\n    Returns\n    -------\n    bool\n        True if all indexes contain the same elements, False otherwise.\n    \"\"\"\n    first = indexes[0]\n    for index in indexes[1:]:\n        if not first.equals(index):\n            return False\n    return True",
                "def _unique_indices(inds) -> Index:\n    \"\"\"\n    Convert indexes to lists and concatenate them, removing duplicates.\n\n    The final dtype is inferred.\n\n    Parameters\n    ----------\n    inds : list of Index or list objects\n\n    Returns\n    -------\n    Index\n    \"\"\"\n\n    def conv(i):\n        if isinstance(i, Index):\n            i = i.tolist()\n        return i\n\n    return Index(lib.fast_unique_multiple_list([conv(i) for i in inds], sort=sort))",
                "def conv(i):\n    if isinstance(i, Index):\n        i = i.tolist()\n    return i"
            ],
            "inscope_function_signatures": [
                "get_objs_combined_axis(objs, intersect: bool=False, axis=0, sort: bool=True) -> Index",
                "_get_distinct_objs(objs: List[Index]) -> List[Index]",
                "_get_combined_index(indexes: List[Index], intersect: bool=False, sort: bool=False) -> Index",
                "union_indexes(indexes, sort=True) -> Index",
                "_sanitize_and_check(indexes)",
                "get_consensus_names(indexes)",
                "all_indexes_same(indexes)",
                "_unique_indices(inds) -> Index",
                "conv(i)"
            ],
            "variables_in_file": {
                "_sort_msg": [
                    28
                ],
                "textwrap.dedent": [
                    28
                ],
                "textwrap": [
                    28
                ],
                "__all__": [
                    40
                ],
                "bool": [
                    66,
                    108
                ],
                "obs_idxes": [
                    89,
                    90
                ],
                "obj._get_axis": [
                    89
                ],
                "obj": [
                    100,
                    101,
                    102,
                    103,
                    89
                ],
                "axis": [
                    89
                ],
                "objs": [
                    89,
                    100
                ],
                "_get_combined_index": [
                    90
                ],
                "intersect": [
                    90,
                    133
                ],
                "sort": [
                    90,
                    195,
                    141,
                    138
                ],
                "Index": [
                    130,
                    67,
                    195,
                    170,
                    108,
                    109,
                    175,
                    149,
                    247,
                    93,
                    254,
                    191
                ],
                "List": [
                    108,
                    93
                ],
                "ids": [
                    98,
                    101,
                    102
                ],
                "Set": [
                    98
                ],
                "int": [
                    98
                ],
                "set": [
                    98
                ],
                "res": [
                    104,
                    99,
                    103
                ],
                "id": [
                    101,
                    102
                ],
                "ids.add": [
                    102
                ],
                "res.append": [
                    103
                ],
                "indexes": [
                    128,
                    129,
                    257,
                    131,
                    132,
                    134,
                    135,
                    138,
                    278,
                    281,
                    165,
                    167,
                    168,
                    297,
                    298,
                    173,
                    198,
                    202,
                    204,
                    208,
                    209,
                    211,
                    213,
                    218,
                    242,
                    246,
                    248,
                    252,
                    255
                ],
                "_get_distinct_objs": [
                    128
                ],
                "len": [
                    129,
                    131,
                    165,
                    167,
                    245,
                    279,
                    254
                ],
                "index": [
                    130,
                    132,
                    134,
                    136,
                    138,
                    139,
                    298,
                    299,
                    143,
                    208,
                    146,
                    210,
                    242,
                    214,
                    215,
                    216
                ],
                "other": [
                    135,
                    136,
                    204,
                    205,
                    209,
                    210
                ],
                "index.intersection": [
                    136
                ],
                "union_indexes": [
                    138
                ],
                "ensure_index": [
                    139
                ],
                "index.sort_values": [
                    143
                ],
                "TypeError": [
                    144
                ],
                "AssertionError": [
                    166
                ],
                "result": [
                    198,
                    168,
                    169,
                    170,
                    171,
                    200,
                    202,
                    205,
                    206
                ],
                "isinstance": [
                    169,
                    247,
                    191
                ],
                "list": [
                    169,
                    242,
                    244,
                    280,
                    250
                ],
                "sorted": [
                    170
                ],
                "kind": [
                    197,
                    173,
                    207
                ],
                "_sanitize_and_check": [
                    173
                ],
                "i": [
                    192,
                    193,
                    195,
                    278,
                    191
                ],
                "i.tolist": [
                    192
                ],
                "lib.fast_unique_multiple_list": [
                    195
                ],
                "lib": [
                    195
                ],
                "conv": [
                    195
                ],
                "inds": [
                    195
                ],
                "hasattr": [
                    200
                ],
                "result.union_many": [
                    202
                ],
                "result.union": [
                    205
                ],
                "index.equals": [
                    210
                ],
                "_unique_indices": [
                    218,
                    211
                ],
                "name": [
                    213,
                    214,
                    215
                ],
                "get_consensus_names": [
                    213
                ],
                "index.name": [
                    214
                ],
                "index._shallow_copy": [
                    215
                ],
                "kinds": [
                    242,
                    244,
                    245,
                    250,
                    254
                ],
                "type": [
                    242
                ],
                "x": [
                    248,
                    247
                ],
                "com.try_sort": [
                    247
                ],
                "com": [
                    278,
                    247
                ],
                "kinds.remove": [
                    250
                ],
                "consensus_names": [
                    280,
                    278,
                    279
                ],
                "tuple": [
                    278
                ],
                "i.names": [
                    278
                ],
                "com.any_not_none": [
                    278
                ],
                "nlevels": [
                    281
                ],
                "first": [
                    297,
                    299
                ],
                "first.equals": [
                    299
                ]
            },
            "filtered_variables_in_file": {
                "_sort_msg": [
                    28
                ],
                "textwrap.dedent": [
                    28
                ],
                "textwrap": [
                    28
                ],
                "__all__": [
                    40
                ],
                "obs_idxes": [
                    89,
                    90
                ],
                "obj._get_axis": [
                    89
                ],
                "obj": [
                    100,
                    101,
                    102,
                    103,
                    89
                ],
                "axis": [
                    89
                ],
                "objs": [
                    89,
                    100
                ],
                "_get_combined_index": [
                    90
                ],
                "intersect": [
                    90,
                    133
                ],
                "sort": [
                    90,
                    195,
                    141,
                    138
                ],
                "Index": [
                    130,
                    67,
                    195,
                    170,
                    108,
                    109,
                    175,
                    149,
                    247,
                    93,
                    254,
                    191
                ],
                "List": [
                    108,
                    93
                ],
                "ids": [
                    98,
                    101,
                    102
                ],
                "Set": [
                    98
                ],
                "res": [
                    104,
                    99,
                    103
                ],
                "ids.add": [
                    102
                ],
                "res.append": [
                    103
                ],
                "indexes": [
                    128,
                    129,
                    257,
                    131,
                    132,
                    134,
                    135,
                    138,
                    278,
                    281,
                    165,
                    167,
                    168,
                    297,
                    298,
                    173,
                    198,
                    202,
                    204,
                    208,
                    209,
                    211,
                    213,
                    218,
                    242,
                    246,
                    248,
                    252,
                    255
                ],
                "_get_distinct_objs": [
                    128
                ],
                "index": [
                    130,
                    132,
                    134,
                    136,
                    138,
                    139,
                    298,
                    299,
                    143,
                    208,
                    146,
                    210,
                    242,
                    214,
                    215,
                    216
                ],
                "other": [
                    135,
                    136,
                    204,
                    205,
                    209,
                    210
                ],
                "index.intersection": [
                    136
                ],
                "union_indexes": [
                    138
                ],
                "ensure_index": [
                    139
                ],
                "index.sort_values": [
                    143
                ],
                "result": [
                    198,
                    168,
                    169,
                    170,
                    171,
                    200,
                    202,
                    205,
                    206
                ],
                "kind": [
                    197,
                    173,
                    207
                ],
                "_sanitize_and_check": [
                    173
                ],
                "i": [
                    192,
                    193,
                    195,
                    278,
                    191
                ],
                "i.tolist": [
                    192
                ],
                "lib.fast_unique_multiple_list": [
                    195
                ],
                "lib": [
                    195
                ],
                "conv": [
                    195
                ],
                "inds": [
                    195
                ],
                "result.union_many": [
                    202
                ],
                "result.union": [
                    205
                ],
                "index.equals": [
                    210
                ],
                "_unique_indices": [
                    218,
                    211
                ],
                "name": [
                    213,
                    214,
                    215
                ],
                "get_consensus_names": [
                    213
                ],
                "index.name": [
                    214
                ],
                "index._shallow_copy": [
                    215
                ],
                "kinds": [
                    242,
                    244,
                    245,
                    250,
                    254
                ],
                "x": [
                    248,
                    247
                ],
                "com.try_sort": [
                    247
                ],
                "com": [
                    278,
                    247
                ],
                "kinds.remove": [
                    250
                ],
                "consensus_names": [
                    280,
                    278,
                    279
                ],
                "i.names": [
                    278
                ],
                "com.any_not_none": [
                    278
                ],
                "nlevels": [
                    281
                ],
                "first": [
                    297,
                    299
                ],
                "first.equals": [
                    299
                ]
            }
        },
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/core/reshape/concat.py": {
            "buggy_functions": [
                {
                    "function_name": "_get_comb_axis",
                    "function_code": "def _get_comb_axis(self, i: int) -> Index:\n    data_axis = self.objs[0]._get_block_manager_axis(i)\n    return get_objs_combined_axis(\n        self.objs, axis=data_axis, intersect=self.intersect, sort=self.sort\n    )\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 517,
                    "variables": {
                        "int": [
                            517
                        ],
                        "data_axis": [
                            520,
                            518
                        ],
                        "_get_block_manager_axis": [
                            518
                        ],
                        "self.objs": [
                            520,
                            518
                        ],
                        "self": [
                            520,
                            518
                        ],
                        "i": [
                            518
                        ],
                        "get_objs_combined_axis": [
                            519
                        ],
                        "self.intersect": [
                            520
                        ],
                        "self.sort": [
                            520
                        ],
                        "Index": [
                            517
                        ]
                    },
                    "filtered_variables": {
                        "data_axis": [
                            520,
                            518
                        ],
                        "_get_block_manager_axis": [
                            518
                        ],
                        "self.objs": [
                            520,
                            518
                        ],
                        "self": [
                            520,
                            518
                        ],
                        "i": [
                            518
                        ],
                        "get_objs_combined_axis": [
                            519
                        ],
                        "self.intersect": [
                            520
                        ],
                        "self.sort": [
                            520
                        ],
                        "Index": [
                            517
                        ]
                    },
                    "diff_line_number": 520,
                    "class_data": {
                        "signature": "class _Concatenator()",
                        "docstring": "Orchestrates a concatenation operation for BlockManagers",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, objs, axis=0, join: str='outer', keys=None, levels=None, names=None, ignore_index: bool=False, verify_integrity: bool=False, copy: bool=True, sort=False):\n    if isinstance(objs, (NDFrame, str)):\n        raise TypeError(f'first argument must be an iterable of pandas objects, you passed an object of type \"{type(objs).__name__}\"')\n    if join == 'outer':\n        self.intersect = False\n    elif join == 'inner':\n        self.intersect = True\n    else:\n        raise ValueError('Only can inner (intersect) or outer (union) join the other axis')\n    if isinstance(objs, dict):\n        if keys is None:\n            keys = list(objs.keys())\n        objs = [objs[k] for k in keys]\n    else:\n        objs = list(objs)\n    if len(objs) == 0:\n        raise ValueError('No objects to concatenate')\n    if keys is None:\n        objs = list(com.not_none(*objs))\n    else:\n        clean_keys = []\n        clean_objs = []\n        for k, v in zip(keys, objs):\n            if v is None:\n                continue\n            clean_keys.append(k)\n            clean_objs.append(v)\n        objs = clean_objs\n        name = getattr(keys, 'name', None)\n        keys = Index(clean_keys, name=name)\n    if len(objs) == 0:\n        raise ValueError('All objects passed were None')\n    ndims = set()\n    for obj in objs:\n        if not isinstance(obj, (Series, DataFrame)):\n            msg = \"cannot concatenate object of type '{typ}'; only Series and DataFrame objs are valid\".format(typ=type(obj))\n            raise TypeError(msg)\n        obj._consolidate(inplace=True)\n        ndims.add(obj.ndim)\n    sample = None\n    if len(ndims) > 1:\n        max_ndim = max(ndims)\n        for obj in objs:\n            if obj.ndim == max_ndim and np.sum(obj.shape):\n                sample = obj\n                break\n    else:\n        non_empties = [obj for obj in objs if sum(obj.shape) > 0 or isinstance(obj, Series)]\n        if len(non_empties) and (keys is None and names is None and (levels is None) and (not self.intersect)):\n            objs = non_empties\n            sample = objs[0]\n    if sample is None:\n        sample = objs[0]\n    self.objs = objs\n    if isinstance(sample, Series):\n        axis = DataFrame._get_axis_number(axis)\n    else:\n        axis = sample._get_axis_number(axis)\n    self._is_frame = isinstance(sample, DataFrame)\n    if self._is_frame:\n        axis = 1 if axis == 0 else 0\n    self._is_series = isinstance(sample, Series)\n    if not 0 <= axis <= sample.ndim:\n        raise AssertionError('axis must be between 0 and {ndim}, input was {axis}'.format(ndim=sample.ndim, axis=axis))\n    if len(ndims) > 1:\n        current_column = 0\n        max_ndim = sample.ndim\n        self.objs, objs = ([], self.objs)\n        for obj in objs:\n            ndim = obj.ndim\n            if ndim == max_ndim:\n                pass\n            elif ndim != max_ndim - 1:\n                raise ValueError('cannot concatenate unaligned mixed dimensional NDFrame objects')\n            else:\n                name = getattr(obj, 'name', None)\n                if ignore_index or name is None:\n                    name = current_column\n                    current_column += 1\n                if self._is_frame and axis == 1:\n                    name = 0\n                obj = sample._constructor({name: obj})\n            self.objs.append(obj)\n    self.axis = axis\n    self.keys = keys\n    self.names = names or getattr(keys, 'names', None)\n    self.levels = levels\n    self.sort = sort\n    self.ignore_index = ignore_index\n    self.verify_integrity = verify_integrity\n    self.copy = copy\n    self.new_axes = self._get_new_axes()",
                            "def get_result(self):\n    if self._is_series:\n        if self.axis == 0:\n            name = com.consensus_name_attr(self.objs)\n            mgr = self.objs[0]._data.concat([x._data for x in self.objs], self.new_axes)\n            cons = self.objs[0]._constructor\n            return cons(mgr, name=name).__finalize__(self, method='concat')\n        else:\n            data = dict(zip(range(len(self.objs)), self.objs))\n            cons = DataFrame\n            index, columns = self.new_axes\n            df = cons(data, index=index)\n            df.columns = columns\n            return df.__finalize__(self, method='concat')\n    else:\n        mgrs_indexers = []\n        for obj in self.objs:\n            mgr = obj._data\n            indexers = {}\n            for ax, new_labels in enumerate(self.new_axes):\n                if ax == self.axis:\n                    continue\n                obj_labels = mgr.axes[ax]\n                if not new_labels.equals(obj_labels):\n                    indexers[ax] = obj_labels.reindex(new_labels)[1]\n            mgrs_indexers.append((obj._data, indexers))\n        new_data = concatenate_block_managers(mgrs_indexers, self.new_axes, concat_axis=self.axis, copy=self.copy)\n        if not self.copy:\n            new_data._consolidate_inplace()\n        cons = self.objs[0]._constructor\n        return cons(new_data).__finalize__(self, method='concat')",
                            "def _get_result_dim(self) -> int:\n    if self._is_series and self.axis == 1:\n        return 2\n    else:\n        return self.objs[0].ndim",
                            "def _get_new_axes(self) -> List[Index]:\n    ndim = self._get_result_dim()\n    return [self._get_concat_axis() if i == self.axis else self._get_comb_axis(i) for i in range(ndim)]",
                            "def _get_comb_axis(self, i: int) -> Index:\n    data_axis = self.objs[0]._get_block_manager_axis(i)\n    return get_objs_combined_axis(self.objs, axis=data_axis, intersect=self.intersect, sort=self.sort)",
                            "def _get_concat_axis(self) -> Index:\n    \"\"\"\n    Return index to be used along concatenation axis.\n    \"\"\"\n    if self._is_series:\n        if self.axis == 0:\n            indexes = [x.index for x in self.objs]\n        elif self.ignore_index:\n            idx = ibase.default_index(len(self.objs))\n            return idx\n        elif self.keys is None:\n            names: List[Optional[Hashable]] = [None] * len(self.objs)\n            num = 0\n            has_names = False\n            for i, x in enumerate(self.objs):\n                if not isinstance(x, Series):\n                    raise TypeError(f\"Cannot concatenate type 'Series' with object of type '{type(x).__name__}'\")\n                if x.name is not None:\n                    names[i] = x.name\n                    has_names = True\n                else:\n                    names[i] = num\n                    num += 1\n            if has_names:\n                return Index(names)\n            else:\n                return ibase.default_index(len(self.objs))\n        else:\n            return ensure_index(self.keys).set_names(self.names)\n    else:\n        indexes = [x._data.axes[self.axis] for x in self.objs]\n    if self.ignore_index:\n        idx = ibase.default_index(sum((len(i) for i in indexes)))\n        return idx\n    if self.keys is None:\n        concat_axis = _concat_indexes(indexes)\n    else:\n        concat_axis = _make_concat_multiindex(indexes, self.keys, self.levels, self.names)\n    self._maybe_check_integrity(concat_axis)\n    return concat_axis",
                            "def _maybe_check_integrity(self, concat_index: Index):\n    if self.verify_integrity:\n        if not concat_index.is_unique:\n            overlap = concat_index[concat_index.duplicated()].unique()\n            raise ValueError(f'Indexes have overlapping values: {overlap}')"
                        ],
                        "constructor_variables": [
                            "copy",
                            "ndims",
                            "keys",
                            "sample",
                            "ndim",
                            "max_ndim",
                            "clean_objs",
                            "levels",
                            "current_column",
                            "clean_keys",
                            "axis",
                            "objs",
                            "names",
                            "ignore_index",
                            "verify_integrity",
                            "msg",
                            "intersect",
                            "name",
                            "non_empties",
                            "sort",
                            "new_axes",
                            "_is_series",
                            "obj",
                            "_is_frame"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, objs, axis=0, join: str='outer', keys=None, levels=None, names=None, ignore_index: bool=False, verify_integrity: bool=False, copy: bool=True, sort=False)",
                            "get_result(self)",
                            "_get_result_dim(self) -> int",
                            "_get_new_axes(self) -> List[Index]",
                            "_get_comb_axis(self, i: int) -> Index",
                            "_get_concat_axis(self) -> Index",
                            "_maybe_check_integrity(self, concat_index: Index)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "@overload\ndef concat(\n    objs: Union[Iterable[\"DataFrame\"], Mapping[Optional[Hashable], \"DataFrame\"]],\n    axis=0,\n    join: str = \"outer\",\n    ignore_index: bool = False,\n    keys=None,\n    levels=None,\n    names=None,\n    verify_integrity: bool = False,\n    sort: bool = False,\n    copy: bool = True,\n) -> \"DataFrame\":\n    ...",
                "@overload\ndef concat(\n    objs: Union[\n        Iterable[FrameOrSeriesUnion], Mapping[Optional[Hashable], FrameOrSeriesUnion]\n    ],\n    axis=0,\n    join: str = \"outer\",\n    ignore_index: bool = False,\n    keys=None,\n    levels=None,\n    names=None,\n    verify_integrity: bool = False,\n    sort: bool = False,\n    copy: bool = True,\n) -> FrameOrSeriesUnion:\n    ...",
                "def concat(\n    objs: Union[\n        Iterable[FrameOrSeriesUnion], Mapping[Optional[Hashable], FrameOrSeriesUnion]\n    ],\n    axis=0,\n    join=\"outer\",\n    ignore_index: bool = False,\n    keys=None,\n    levels=None,\n    names=None,\n    verify_integrity: bool = False,\n    sort: bool = False,\n    copy: bool = True,\n) -> FrameOrSeriesUnion:\n    \"\"\"\n    Concatenate pandas objects along a particular axis with optional set logic\n    along the other axes.\n\n    Can also add a layer of hierarchical indexing on the concatenation axis,\n    which may be useful if the labels are the same (or overlapping) on\n    the passed axis number.\n\n    Parameters\n    ----------\n    objs : a sequence or mapping of Series or DataFrame objects\n        If a dict is passed, the sorted keys will be used as the `keys`\n        argument, unless it is passed, in which case the values will be\n        selected (see below). Any None objects will be dropped silently unless\n        they are all None in which case a ValueError will be raised.\n    axis : {0/'index', 1/'columns'}, default 0\n        The axis to concatenate along.\n    join : {'inner', 'outer'}, default 'outer'\n        How to handle indexes on other axis (or axes).\n    ignore_index : bool, default False\n        If True, do not use the index values along the concatenation axis. The\n        resulting axis will be labeled 0, ..., n - 1. This is useful if you are\n        concatenating objects where the concatenation axis does not have\n        meaningful indexing information. Note the index values on the other\n        axes are still respected in the join.\n    keys : sequence, default None\n        If multiple levels passed, should contain tuples. Construct\n        hierarchical index using the passed keys as the outermost level.\n    levels : list of sequences, default None\n        Specific levels (unique values) to use for constructing a\n        MultiIndex. Otherwise they will be inferred from the keys.\n    names : list, default None\n        Names for the levels in the resulting hierarchical index.\n    verify_integrity : bool, default False\n        Check whether the new concatenated axis contains duplicates. This can\n        be very expensive relative to the actual data concatenation.\n    sort : bool, default False\n        Sort non-concatenation axis if it is not already aligned when `join`\n        is 'outer'.\n        This has no effect when ``join='inner'``, which already preserves\n        the order of the non-concatenation axis.\n\n        .. versionadded:: 0.23.0\n        .. versionchanged:: 1.0.0\n\n           Changed to not sort by default.\n\n    copy : bool, default True\n        If False, do not copy data unnecessarily.\n\n    Returns\n    -------\n    object, type of objs\n        When concatenating all ``Series`` along the index (axis=0), a\n        ``Series`` is returned. When ``objs`` contains at least one\n        ``DataFrame``, a ``DataFrame`` is returned. When concatenating along\n        the columns (axis=1), a ``DataFrame`` is returned.\n\n    See Also\n    --------\n    Series.append : Concatenate Series.\n    DataFrame.append : Concatenate DataFrames.\n    DataFrame.join : Join DataFrames using indexes.\n    DataFrame.merge : Merge DataFrames by indexes or columns.\n\n    Notes\n    -----\n    The keys, levels, and names arguments are all optional.\n\n    A walkthrough of how this method fits in with other tools for combining\n    pandas objects can be found `here\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html>`__.\n\n    Examples\n    --------\n    Combine two ``Series``.\n\n    >>> s1 = pd.Series(['a', 'b'])\n    >>> s2 = pd.Series(['c', 'd'])\n    >>> pd.concat([s1, s2])\n    0    a\n    1    b\n    0    c\n    1    d\n    dtype: object\n\n    Clear the existing index and reset it in the result\n    by setting the ``ignore_index`` option to ``True``.\n\n    >>> pd.concat([s1, s2], ignore_index=True)\n    0    a\n    1    b\n    2    c\n    3    d\n    dtype: object\n\n    Add a hierarchical index at the outermost level of\n    the data with the ``keys`` option.\n\n    >>> pd.concat([s1, s2], keys=['s1', 's2'])\n    s1  0    a\n        1    b\n    s2  0    c\n        1    d\n    dtype: object\n\n    Label the index keys you create with the ``names`` option.\n\n    >>> pd.concat([s1, s2], keys=['s1', 's2'],\n    ...           names=['Series name', 'Row ID'])\n    Series name  Row ID\n    s1           0         a\n                 1         b\n    s2           0         c\n                 1         d\n    dtype: object\n\n    Combine two ``DataFrame`` objects with identical columns.\n\n    >>> df1 = pd.DataFrame([['a', 1], ['b', 2]],\n    ...                    columns=['letter', 'number'])\n    >>> df1\n      letter  number\n    0      a       1\n    1      b       2\n    >>> df2 = pd.DataFrame([['c', 3], ['d', 4]],\n    ...                    columns=['letter', 'number'])\n    >>> df2\n      letter  number\n    0      c       3\n    1      d       4\n    >>> pd.concat([df1, df2])\n      letter  number\n    0      a       1\n    1      b       2\n    0      c       3\n    1      d       4\n\n    Combine ``DataFrame`` objects with overlapping columns\n    and return everything. Columns outside the intersection will\n    be filled with ``NaN`` values.\n\n    >>> df3 = pd.DataFrame([['c', 3, 'cat'], ['d', 4, 'dog']],\n    ...                    columns=['letter', 'number', 'animal'])\n    >>> df3\n      letter  number animal\n    0      c       3    cat\n    1      d       4    dog\n    >>> pd.concat([df1, df3], sort=False)\n      letter  number animal\n    0      a       1    NaN\n    1      b       2    NaN\n    0      c       3    cat\n    1      d       4    dog\n\n    Combine ``DataFrame`` objects with overlapping columns\n    and return only those that are shared by passing ``inner`` to\n    the ``join`` keyword argument.\n\n    >>> pd.concat([df1, df3], join=\"inner\")\n      letter  number\n    0      a       1\n    1      b       2\n    0      c       3\n    1      d       4\n\n    Combine ``DataFrame`` objects horizontally along the x axis by\n    passing in ``axis=1``.\n\n    >>> df4 = pd.DataFrame([['bird', 'polly'], ['monkey', 'george']],\n    ...                    columns=['animal', 'name'])\n    >>> pd.concat([df1, df4], axis=1)\n      letter  number  animal    name\n    0      a       1    bird   polly\n    1      b       2  monkey  george\n\n    Prevent the result from including duplicate index values with the\n    ``verify_integrity`` option.\n\n    >>> df5 = pd.DataFrame([1], index=['a'])\n    >>> df5\n       0\n    a  1\n    >>> df6 = pd.DataFrame([2], index=['a'])\n    >>> df6\n       0\n    a  2\n    >>> pd.concat([df5, df6], verify_integrity=True)\n    Traceback (most recent call last):\n        ...\n    ValueError: Indexes have overlapping values: ['a']\n    \"\"\"\n    op = _Concatenator(\n        objs,\n        axis=axis,\n        ignore_index=ignore_index,\n        join=join,\n        keys=keys,\n        levels=levels,\n        names=names,\n        verify_integrity=verify_integrity,\n        copy=copy,\n        sort=sort,\n    )\n\n    return op.get_result()",
                "def _concat_indexes(indexes) -> Index:\n    return indexes[0].append(indexes[1:])",
                "def _make_concat_multiindex(indexes, keys, levels=None, names=None) -> MultiIndex:\n\n    if (levels is None and isinstance(keys[0], tuple)) or (\n        levels is not None and len(levels) > 1\n    ):\n        zipped = list(zip(*keys))\n        if names is None:\n            names = [None] * len(zipped)\n\n        if levels is None:\n            _, levels = factorize_from_iterables(zipped)\n        else:\n            levels = [ensure_index(x) for x in levels]\n    else:\n        zipped = [keys]\n        if names is None:\n            names = [None]\n\n        if levels is None:\n            levels = [ensure_index(keys)]\n        else:\n            levels = [ensure_index(x) for x in levels]\n\n    if not all_indexes_same(indexes):\n        codes_list = []\n\n        # things are potentially different sizes, so compute the exact codes\n        # for each level and pass those to MultiIndex.from_arrays\n\n        for hlevel, level in zip(zipped, levels):\n            to_concat = []\n            for key, index in zip(hlevel, indexes):\n                try:\n                    i = level.get_loc(key)\n                except KeyError:\n                    raise ValueError(\n                        \"Key {key!s} not in level {level!s}\".format(\n                            key=key, level=level\n                        )\n                    )\n\n                to_concat.append(np.repeat(i, len(index)))\n            codes_list.append(np.concatenate(to_concat))\n\n        concat_index = _concat_indexes(indexes)\n\n        # these go at the end\n        if isinstance(concat_index, MultiIndex):\n            levels.extend(concat_index.levels)\n            codes_list.extend(concat_index.codes)\n        else:\n            codes, categories = factorize_from_iterable(concat_index)\n            levels.append(categories)\n            codes_list.append(codes)\n\n        if len(names) == len(levels):\n            names = list(names)\n        else:\n            # make sure that all of the passed indices have the same nlevels\n            if not len({idx.nlevels for idx in indexes}) == 1:\n                raise AssertionError(\n                    \"Cannot concat indices that do not have the same number of levels\"\n                )\n\n            # also copies\n            names = names + get_consensus_names(indexes)\n\n        return MultiIndex(\n            levels=levels, codes=codes_list, names=names, verify_integrity=False\n        )\n\n    new_index = indexes[0]\n    n = len(new_index)\n    kpieces = len(indexes)\n\n    # also copies\n    new_names = list(names)\n    new_levels = list(levels)\n\n    # construct codes\n    new_codes = []\n\n    # do something a bit more speedy\n\n    for hlevel, level in zip(zipped, levels):\n        hlevel = ensure_index(hlevel)\n        mapped = level.get_indexer(hlevel)\n\n        mask = mapped == -1\n        if mask.any():\n            raise ValueError(\n                \"Values not found in passed level: {hlevel!s}\".format(\n                    hlevel=hlevel[mask]\n                )\n            )\n\n        new_codes.append(np.repeat(mapped, n))\n\n    if isinstance(new_index, MultiIndex):\n        new_levels.extend(new_index.levels)\n        new_codes.extend([np.tile(lab, kpieces) for lab in new_index.codes])\n    else:\n        new_levels.append(new_index)\n        new_codes.append(np.tile(np.arange(n), kpieces))\n\n    if len(new_names) < len(new_levels):\n        new_names.extend(new_index.names)\n\n    return MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )",
                "def __init__(\n    self,\n    objs,\n    axis=0,\n    join: str = \"outer\",\n    keys=None,\n    levels=None,\n    names=None,\n    ignore_index: bool = False,\n    verify_integrity: bool = False,\n    copy: bool = True,\n    sort=False,\n):\n    if isinstance(objs, (NDFrame, str)):\n        raise TypeError(\n            \"first argument must be an iterable of pandas \"\n            f'objects, you passed an object of type \"{type(objs).__name__}\"'\n        )\n\n    if join == \"outer\":\n        self.intersect = False\n    elif join == \"inner\":\n        self.intersect = True\n    else:  # pragma: no cover\n        raise ValueError(\n            \"Only can inner (intersect) or outer (union) join the other axis\"\n        )\n\n    if isinstance(objs, dict):\n        if keys is None:\n            keys = list(objs.keys())\n        objs = [objs[k] for k in keys]\n    else:\n        objs = list(objs)\n\n    if len(objs) == 0:\n        raise ValueError(\"No objects to concatenate\")\n\n    if keys is None:\n        objs = list(com.not_none(*objs))\n    else:\n        # #1649\n        clean_keys = []\n        clean_objs = []\n        for k, v in zip(keys, objs):\n            if v is None:\n                continue\n            clean_keys.append(k)\n            clean_objs.append(v)\n        objs = clean_objs\n        name = getattr(keys, \"name\", None)\n        keys = Index(clean_keys, name=name)\n\n    if len(objs) == 0:\n        raise ValueError(\"All objects passed were None\")\n\n    # consolidate data & figure out what our result ndim is going to be\n    ndims = set()\n    for obj in objs:\n        if not isinstance(obj, (Series, DataFrame)):\n            msg = (\n                \"cannot concatenate object of type '{typ}'; \"\n                \"only Series and DataFrame objs are valid\".format(typ=type(obj))\n            )\n            raise TypeError(msg)\n\n        # consolidate\n        obj._consolidate(inplace=True)\n        ndims.add(obj.ndim)\n\n    # get the sample\n    # want the highest ndim that we have, and must be non-empty\n    # unless all objs are empty\n    sample = None\n    if len(ndims) > 1:\n        max_ndim = max(ndims)\n        for obj in objs:\n            if obj.ndim == max_ndim and np.sum(obj.shape):\n                sample = obj\n                break\n\n    else:\n        # filter out the empties if we have not multi-index possibilities\n        # note to keep empty Series as it affect to result columns / name\n        non_empties = [\n            obj for obj in objs if sum(obj.shape) > 0 or isinstance(obj, Series)\n        ]\n\n        if len(non_empties) and (\n            keys is None and names is None and levels is None and not self.intersect\n        ):\n            objs = non_empties\n            sample = objs[0]\n\n    if sample is None:\n        sample = objs[0]\n    self.objs = objs\n\n    # Standardize axis parameter to int\n    if isinstance(sample, Series):\n        axis = DataFrame._get_axis_number(axis)\n    else:\n        axis = sample._get_axis_number(axis)\n\n    # Need to flip BlockManager axis in the DataFrame special case\n    self._is_frame = isinstance(sample, DataFrame)\n    if self._is_frame:\n        axis = 1 if axis == 0 else 0\n\n    self._is_series = isinstance(sample, Series)\n    if not 0 <= axis <= sample.ndim:\n        raise AssertionError(\n            \"axis must be between 0 and {ndim}, input was \"\n            \"{axis}\".format(ndim=sample.ndim, axis=axis)\n        )\n\n    # if we have mixed ndims, then convert to highest ndim\n    # creating column numbers as needed\n    if len(ndims) > 1:\n        current_column = 0\n        max_ndim = sample.ndim\n        self.objs, objs = [], self.objs\n        for obj in objs:\n\n            ndim = obj.ndim\n            if ndim == max_ndim:\n                pass\n\n            elif ndim != max_ndim - 1:\n                raise ValueError(\n                    \"cannot concatenate unaligned mixed \"\n                    \"dimensional NDFrame objects\"\n                )\n\n            else:\n                name = getattr(obj, \"name\", None)\n                if ignore_index or name is None:\n                    name = current_column\n                    current_column += 1\n\n                # doing a row-wise concatenation so need everything\n                # to line up\n                if self._is_frame and axis == 1:\n                    name = 0\n                obj = sample._constructor({name: obj})\n\n            self.objs.append(obj)\n\n    # note: this is the BlockManager axis (since DataFrame is transposed)\n    self.axis = axis\n    self.keys = keys\n    self.names = names or getattr(keys, \"names\", None)\n    self.levels = levels\n    self.sort = sort\n\n    self.ignore_index = ignore_index\n    self.verify_integrity = verify_integrity\n    self.copy = copy\n\n    self.new_axes = self._get_new_axes()",
                "def get_result(self):\n\n    # series only\n    if self._is_series:\n\n        # stack blocks\n        if self.axis == 0:\n            name = com.consensus_name_attr(self.objs)\n\n            mgr = self.objs[0]._data.concat(\n                [x._data for x in self.objs], self.new_axes\n            )\n            cons = self.objs[0]._constructor\n            return cons(mgr, name=name).__finalize__(self, method=\"concat\")\n\n        # combine as columns in a frame\n        else:\n            data = dict(zip(range(len(self.objs)), self.objs))\n            cons = DataFrame\n\n            index, columns = self.new_axes\n            df = cons(data, index=index)\n            df.columns = columns\n            return df.__finalize__(self, method=\"concat\")\n\n    # combine block managers\n    else:\n        mgrs_indexers = []\n        for obj in self.objs:\n            mgr = obj._data\n            indexers = {}\n            for ax, new_labels in enumerate(self.new_axes):\n                if ax == self.axis:\n                    # Suppress reindexing on concat axis\n                    continue\n\n                obj_labels = mgr.axes[ax]\n                if not new_labels.equals(obj_labels):\n                    indexers[ax] = obj_labels.reindex(new_labels)[1]\n\n            mgrs_indexers.append((obj._data, indexers))\n\n        new_data = concatenate_block_managers(\n            mgrs_indexers, self.new_axes, concat_axis=self.axis, copy=self.copy\n        )\n        if not self.copy:\n            new_data._consolidate_inplace()\n\n        cons = self.objs[0]._constructor\n        return cons(new_data).__finalize__(self, method=\"concat\")",
                "def _get_result_dim(self) -> int:\n    if self._is_series and self.axis == 1:\n        return 2\n    else:\n        return self.objs[0].ndim",
                "def _get_new_axes(self) -> List[Index]:\n    ndim = self._get_result_dim()\n    return [\n        self._get_concat_axis() if i == self.axis else self._get_comb_axis(i)\n        for i in range(ndim)\n    ]",
                "def _get_comb_axis(self, i: int) -> Index:\n    data_axis = self.objs[0]._get_block_manager_axis(i)\n    return get_objs_combined_axis(\n        self.objs, axis=data_axis, intersect=self.intersect, sort=self.sort\n    )",
                "def _get_concat_axis(self) -> Index:\n    \"\"\"\n    Return index to be used along concatenation axis.\n    \"\"\"\n    if self._is_series:\n        if self.axis == 0:\n            indexes = [x.index for x in self.objs]\n        elif self.ignore_index:\n            idx = ibase.default_index(len(self.objs))\n            return idx\n        elif self.keys is None:\n            names: List[Optional[Hashable]] = [None] * len(self.objs)\n            num = 0\n            has_names = False\n            for i, x in enumerate(self.objs):\n                if not isinstance(x, Series):\n                    raise TypeError(\n                        f\"Cannot concatenate type 'Series' with \"\n                        f\"object of type '{type(x).__name__}'\"\n                    )\n                if x.name is not None:\n                    names[i] = x.name\n                    has_names = True\n                else:\n                    names[i] = num\n                    num += 1\n            if has_names:\n                return Index(names)\n            else:\n                return ibase.default_index(len(self.objs))\n        else:\n            return ensure_index(self.keys).set_names(self.names)\n    else:\n        indexes = [x._data.axes[self.axis] for x in self.objs]\n\n    if self.ignore_index:\n        idx = ibase.default_index(sum(len(i) for i in indexes))\n        return idx\n\n    if self.keys is None:\n        concat_axis = _concat_indexes(indexes)\n    else:\n        concat_axis = _make_concat_multiindex(\n            indexes, self.keys, self.levels, self.names\n        )\n\n    self._maybe_check_integrity(concat_axis)\n\n    return concat_axis",
                "def _maybe_check_integrity(self, concat_index: Index):\n    if self.verify_integrity:\n        if not concat_index.is_unique:\n            overlap = concat_index[concat_index.duplicated()].unique()\n            raise ValueError(f\"Indexes have overlapping values: {overlap}\")"
            ],
            "inscope_function_signatures": [
                "concat(objs: Union[Iterable['DataFrame'], Mapping[Optional[Hashable], 'DataFrame']], axis=0, join: str='outer', ignore_index: bool=False, keys=None, levels=None, names=None, verify_integrity: bool=False, sort: bool=False, copy: bool=True) -> 'DataFrame'",
                "concat(objs: Union[Iterable[FrameOrSeriesUnion], Mapping[Optional[Hashable], FrameOrSeriesUnion]], axis=0, join: str='outer', ignore_index: bool=False, keys=None, levels=None, names=None, verify_integrity: bool=False, sort: bool=False, copy: bool=True) -> FrameOrSeriesUnion",
                "concat(objs: Union[Iterable[FrameOrSeriesUnion], Mapping[Optional[Hashable], FrameOrSeriesUnion]], axis=0, join='outer', ignore_index: bool=False, keys=None, levels=None, names=None, verify_integrity: bool=False, sort: bool=False, copy: bool=True) -> FrameOrSeriesUnion",
                "_concat_indexes(indexes) -> Index",
                "_make_concat_multiindex(indexes, keys, levels=None, names=None) -> MultiIndex",
                "__init__(self, objs, axis=0, join: str='outer', keys=None, levels=None, names=None, ignore_index: bool=False, verify_integrity: bool=False, copy: bool=True, sort=False)",
                "get_result(self)",
                "_get_result_dim(self) -> int",
                "_get_new_axes(self) -> List[Index]",
                "_get_comb_axis(self, i: int) -> Index",
                "_get_concat_axis(self) -> Index",
                "_maybe_check_integrity(self, concat_index: Index)"
            ],
            "variables_in_file": {
                "Union": [
                    33,
                    66,
                    49
                ],
                "Iterable": [
                    33,
                    50,
                    67
                ],
                "Mapping": [
                    33,
                    50,
                    67
                ],
                "Optional": [
                    33,
                    50,
                    67,
                    534
                ],
                "Hashable": [
                    33,
                    50,
                    67,
                    534
                ],
                "str": [
                    296,
                    305,
                    35,
                    53
                ],
                "bool": [
                    36,
                    71,
                    40,
                    41,
                    42,
                    75,
                    76,
                    77,
                    300,
                    301,
                    302,
                    54,
                    58,
                    59,
                    60
                ],
                "overload": [
                    47,
                    31
                ],
                "FrameOrSeriesUnion": [
                    50,
                    67,
                    61,
                    78
                ],
                "op": [
                    284,
                    271
                ],
                "_Concatenator": [
                    271
                ],
                "objs": [
                    384,
                    387,
                    388,
                    272,
                    413,
                    414,
                    305,
                    308,
                    320,
                    322,
                    323,
                    325,
                    327,
                    331,
                    336,
                    341,
                    345,
                    350,
                    368,
                    377,
                    383
                ],
                "axis": [
                    392,
                    394,
                    399,
                    273,
                    402,
                    434,
                    405,
                    441
                ],
                "ignore_index": [
                    274,
                    428,
                    447
                ],
                "join": [
                    313,
                    275,
                    311
                ],
                "keys": [
                    321,
                    322,
                    323,
                    603,
                    330,
                    586,
                    589,
                    336,
                    276,
                    342,
                    343,
                    598,
                    442,
                    443,
                    381
                ],
                "levels": [
                    636,
                    668,
                    605,
                    613,
                    586,
                    587,
                    652,
                    593,
                    594,
                    596,
                    277,
                    661,
                    632,
                    602,
                    603,
                    444,
                    381,
                    639
                ],
                "names": [
                    544,
                    640,
                    547,
                    550,
                    599,
                    649,
                    652,
                    590,
                    591,
                    660,
                    278,
                    534,
                    600,
                    443,
                    381,
                    639
                ],
                "verify_integrity": [
                    448,
                    279
                ],
                "copy": [
                    280,
                    449
                ],
                "sort": [
                    281,
                    445
                ],
                "op.get_result": [
                    284
                ],
                "isinstance": [
                    320,
                    391,
                    586,
                    682,
                    397,
                    305,
                    401,
                    631,
                    377,
                    538,
                    351
                ],
                "NDFrame": [
                    305
                ],
                "TypeError": [
                    306,
                    539,
                    356
                ],
                "__name__": [
                    308,
                    541
                ],
                "type": [
                    354,
                    308,
                    541
                ],
                "self.intersect": [
                    312,
                    520,
                    314,
                    381
                ],
                "self": [
                    513,
                    388,
                    518,
                    520,
                    397,
                    398,
                    527,
                    528,
                    401,
                    529,
                    530,
                    531,
                    533,
                    534,
                    537,
                    413,
                    552,
                    554,
                    556,
                    558,
                    434,
                    562,
                    438,
                    566,
                    312,
                    441,
                    442,
                    314,
                    443,
                    444,
                    445,
                    447,
                    448,
                    449,
                    569,
                    451,
                    574,
                    456,
                    459,
                    460,
                    462,
                    463,
                    465,
                    466,
                    470,
                    473,
                    476,
                    481,
                    484,
                    485,
                    496,
                    498,
                    501,
                    502,
                    505,
                    508,
                    381,
                    511
                ],
                "ValueError": [
                    577,
                    674,
                    421,
                    328,
                    619,
                    346,
                    316
                ],
                "dict": [
                    320,
                    470
                ],
                "list": [
                    640,
                    322,
                    325,
                    331,
                    589,
                    660,
                    661
                ],
                "objs.keys": [
                    322
                ],
                "k": [
                    336,
                    339,
                    323
                ],
                "len": [
                    643,
                    327,
                    552,
                    587,
                    366,
                    559,
                    591,
                    625,
                    656,
                    531,
                    657,
                    689,
                    470,
                    534,
                    345,
                    410,
                    380,
                    639
                ],
                "com.not_none": [
                    331
                ],
                "com": [
                    331,
                    460
                ],
                "clean_keys": [
                    339,
                    334,
                    343
                ],
                "clean_objs": [
                    340,
                    341,
                    335
                ],
                "v": [
                    336,
                    337,
                    340
                ],
                "zip": [
                    613,
                    615,
                    589,
                    336,
                    470,
                    668
                ],
                "clean_keys.append": [
                    339
                ],
                "clean_objs.append": [
                    340
                ],
                "name": [
                    427,
                    428,
                    429,
                    460,
                    466,
                    435,
                    436,
                    342,
                    343
                ],
                "getattr": [
                    427,
                    443,
                    342
                ],
                "Index": [
                    580,
                    517,
                    550,
                    523,
                    343,
                    573,
                    510
                ],
                "ndims": [
                    360,
                    366,
                    367,
                    410,
                    349
                ],
                "set": [
                    349
                ],
                "obj": [
                    416,
                    481,
                    354,
                    414,
                    482,
                    359,
                    360,
                    427,
                    493,
                    368,
                    369,
                    370,
                    436,
                    438,
                    377,
                    350,
                    351
                ],
                "Series": [
                    391,
                    401,
                    377,
                    538,
                    351
                ],
                "DataFrame": [
                    392,
                    471,
                    397,
                    351
                ],
                "msg": [
                    352,
                    356
                ],
                "format": [
                    620,
                    353,
                    675,
                    404
                ],
                "obj._consolidate": [
                    359
                ],
                "ndims.add": [
                    360
                ],
                "obj.ndim": [
                    360,
                    369,
                    416
                ],
                "sample": [
                    384,
                    386,
                    387,
                    391,
                    394,
                    365,
                    397,
                    401,
                    370,
                    402,
                    436,
                    405,
                    412
                ],
                "max_ndim": [
                    417,
                    420,
                    367,
                    369,
                    412
                ],
                "max": [
                    367
                ],
                "np.sum": [
                    369
                ],
                "np": [
                    680,
                    684,
                    687,
                    369,
                    626,
                    625
                ],
                "obj.shape": [
                    369,
                    377
                ],
                "non_empties": [
                    376,
                    380,
                    383
                ],
                "sum": [
                    377,
                    559
                ],
                "self.objs": [
                    388,
                    518,
                    520,
                    529,
                    531,
                    534,
                    537,
                    413,
                    552,
                    556,
                    438,
                    460,
                    462,
                    463,
                    465,
                    470,
                    481,
                    501,
                    508
                ],
                "DataFrame._get_axis_number": [
                    392
                ],
                "sample._get_axis_number": [
                    394
                ],
                "self._is_frame": [
                    434,
                    397,
                    398
                ],
                "self._is_series": [
                    456,
                    401,
                    505,
                    527
                ],
                "sample.ndim": [
                    402,
                    412,
                    405
                ],
                "AssertionError": [
                    403,
                    644
                ],
                "current_column": [
                    411,
                    429,
                    430
                ],
                "ndim": [
                    416,
                    417,
                    514,
                    420,
                    508,
                    511
                ],
                "sample._constructor": [
                    436
                ],
                "self.objs.append": [
                    438
                ],
                "self.axis": [
                    513,
                    485,
                    459,
                    556,
                    505,
                    496,
                    528,
                    441
                ],
                "self.keys": [
                    554,
                    562,
                    533,
                    566,
                    442
                ],
                "self.names": [
                    554,
                    443,
                    566
                ],
                "self.levels": [
                    444,
                    566
                ],
                "self.sort": [
                    520,
                    445
                ],
                "self.ignore_index": [
                    530,
                    558,
                    447
                ],
                "self.verify_integrity": [
                    448,
                    574
                ],
                "self.copy": [
                    496,
                    449,
                    498
                ],
                "self.new_axes": [
                    451,
                    484,
                    463,
                    496,
                    473
                ],
                "self._get_new_axes": [
                    451
                ],
                "com.consensus_name_attr": [
                    460
                ],
                "mgr": [
                    489,
                    466,
                    482,
                    462
                ],
                "_data.concat": [
                    462
                ],
                "_data": [
                    462
                ],
                "x._data": [
                    556,
                    463
                ],
                "x": [
                    544,
                    605,
                    556,
                    463,
                    529,
                    596,
                    537,
                    538,
                    541,
                    543
                ],
                "cons": [
                    465,
                    466,
                    501,
                    502,
                    471,
                    474
                ],
                "_constructor": [
                    465,
                    501
                ],
                "__finalize__": [
                    466,
                    502
                ],
                "data": [
                    474,
                    470
                ],
                "range": [
                    514,
                    470
                ],
                "index": [
                    473,
                    474,
                    625,
                    615
                ],
                "columns": [
                    473,
                    475
                ],
                "df": [
                    474,
                    475,
                    476
                ],
                "df.columns": [
                    475
                ],
                "df.__finalize__": [
                    476
                ],
                "mgrs_indexers": [
                    480,
                    496,
                    493
                ],
                "obj._data": [
                    482,
                    493
                ],
                "indexers": [
                    483,
                    493,
                    491
                ],
                "ax": [
                    489,
                    491,
                    484,
                    485
                ],
                "new_labels": [
                    490,
                    491,
                    484
                ],
                "enumerate": [
                    537,
                    484
                ],
                "obj_labels": [
                    489,
                    490,
                    491
                ],
                "mgr.axes": [
                    489
                ],
                "new_labels.equals": [
                    490
                ],
                "obj_labels.reindex": [
                    491
                ],
                "mgrs_indexers.append": [
                    493
                ],
                "new_data": [
                    499,
                    502,
                    495
                ],
                "concatenate_block_managers": [
                    495
                ],
                "new_data._consolidate_inplace": [
                    499
                ],
                "int": [
                    504,
                    517
                ],
                "self._get_result_dim": [
                    511
                ],
                "i": [
                    544,
                    513,
                    514,
                    547,
                    518,
                    617,
                    559,
                    625,
                    537
                ],
                "self._get_concat_axis": [
                    513
                ],
                "self._get_comb_axis": [
                    513
                ],
                "List": [
                    510,
                    534
                ],
                "data_axis": [
                    520,
                    518
                ],
                "_get_block_manager_axis": [
                    518
                ],
                "get_objs_combined_axis": [
                    519
                ],
                "indexes": [
                    643,
                    581,
                    615,
                    649,
                    556,
                    559,
                    655,
                    529,
                    657,
                    563,
                    628,
                    566,
                    607
                ],
                "x.index": [
                    529
                ],
                "idx": [
                    643,
                    559,
                    560,
                    531,
                    532
                ],
                "ibase.default_index": [
                    552,
                    531,
                    559
                ],
                "ibase": [
                    552,
                    531,
                    559
                ],
                "num": [
                    547,
                    548,
                    535
                ],
                "has_names": [
                    536,
                    545,
                    549
                ],
                "x.name": [
                    544,
                    543
                ],
                "set_names": [
                    554
                ],
                "ensure_index": [
                    669,
                    554,
                    596,
                    603,
                    605
                ],
                "x._data.axes": [
                    556
                ],
                "concat_axis": [
                    569,
                    563,
                    565,
                    571
                ],
                "_concat_indexes": [
                    563,
                    628
                ],
                "_make_concat_multiindex": [
                    565
                ],
                "self._maybe_check_integrity": [
                    569
                ],
                "concat_index.is_unique": [
                    575
                ],
                "concat_index": [
                    576,
                    628,
                    631,
                    632,
                    633,
                    635,
                    575
                ],
                "overlap": [
                    576,
                    577
                ],
                "unique": [
                    576
                ],
                "concat_index.duplicated": [
                    576
                ],
                "append": [
                    581
                ],
                "tuple": [
                    586
                ],
                "zipped": [
                    613,
                    589,
                    591,
                    594,
                    598,
                    668
                ],
                "_": [
                    594
                ],
                "factorize_from_iterables": [
                    594
                ],
                "all_indexes_same": [
                    607
                ],
                "codes_list": [
                    608,
                    652,
                    626,
                    633,
                    637
                ],
                "hlevel": [
                    676,
                    613,
                    615,
                    668,
                    669,
                    670
                ],
                "level": [
                    613,
                    617,
                    621,
                    668,
                    670
                ],
                "to_concat": [
                    625,
                    626,
                    614
                ],
                "key": [
                    617,
                    621,
                    615
                ],
                "level.get_loc": [
                    617
                ],
                "KeyError": [
                    618
                ],
                "to_concat.append": [
                    625
                ],
                "np.repeat": [
                    680,
                    625
                ],
                "codes_list.append": [
                    626,
                    637
                ],
                "np.concatenate": [
                    626
                ],
                "MultiIndex": [
                    584,
                    682,
                    651,
                    692,
                    631
                ],
                "levels.extend": [
                    632
                ],
                "concat_index.levels": [
                    632
                ],
                "codes_list.extend": [
                    633
                ],
                "concat_index.codes": [
                    633
                ],
                "codes": [
                    635,
                    637
                ],
                "categories": [
                    635,
                    636
                ],
                "factorize_from_iterable": [
                    635
                ],
                "levels.append": [
                    636
                ],
                "idx.nlevels": [
                    643
                ],
                "get_consensus_names": [
                    649
                ],
                "new_index": [
                    682,
                    683,
                    684,
                    686,
                    655,
                    656,
                    690
                ],
                "n": [
                    656,
                    680,
                    687
                ],
                "kpieces": [
                    657,
                    684,
                    687
                ],
                "new_names": [
                    689,
                    690,
                    660,
                    693
                ],
                "new_levels": [
                    683,
                    686,
                    689,
                    661,
                    693
                ],
                "new_codes": [
                    680,
                    684,
                    687,
                    693,
                    664
                ],
                "mapped": [
                    672,
                    670,
                    680
                ],
                "level.get_indexer": [
                    670
                ],
                "mask": [
                    672,
                    673,
                    676
                ],
                "mask.any": [
                    673
                ],
                "new_codes.append": [
                    680,
                    687
                ],
                "new_levels.extend": [
                    683
                ],
                "new_index.levels": [
                    683
                ],
                "new_codes.extend": [
                    684
                ],
                "np.tile": [
                    684,
                    687
                ],
                "lab": [
                    684
                ],
                "new_index.codes": [
                    684
                ],
                "new_levels.append": [
                    686
                ],
                "np.arange": [
                    687
                ],
                "new_names.extend": [
                    690
                ],
                "new_index.names": [
                    690
                ]
            },
            "filtered_variables_in_file": {
                "Union": [
                    33,
                    66,
                    49
                ],
                "Iterable": [
                    33,
                    50,
                    67
                ],
                "Mapping": [
                    33,
                    50,
                    67
                ],
                "Optional": [
                    33,
                    50,
                    67,
                    534
                ],
                "Hashable": [
                    33,
                    50,
                    67,
                    534
                ],
                "overload": [
                    47,
                    31
                ],
                "FrameOrSeriesUnion": [
                    50,
                    67,
                    61,
                    78
                ],
                "op": [
                    284,
                    271
                ],
                "_Concatenator": [
                    271
                ],
                "objs": [
                    384,
                    387,
                    388,
                    272,
                    413,
                    414,
                    305,
                    308,
                    320,
                    322,
                    323,
                    325,
                    327,
                    331,
                    336,
                    341,
                    345,
                    350,
                    368,
                    377,
                    383
                ],
                "axis": [
                    392,
                    394,
                    399,
                    273,
                    402,
                    434,
                    405,
                    441
                ],
                "ignore_index": [
                    274,
                    428,
                    447
                ],
                "join": [
                    313,
                    275,
                    311
                ],
                "keys": [
                    321,
                    322,
                    323,
                    603,
                    330,
                    586,
                    589,
                    336,
                    276,
                    342,
                    343,
                    598,
                    442,
                    443,
                    381
                ],
                "levels": [
                    636,
                    668,
                    605,
                    613,
                    586,
                    587,
                    652,
                    593,
                    594,
                    596,
                    277,
                    661,
                    632,
                    602,
                    603,
                    444,
                    381,
                    639
                ],
                "names": [
                    544,
                    640,
                    547,
                    550,
                    599,
                    649,
                    652,
                    590,
                    591,
                    660,
                    278,
                    534,
                    600,
                    443,
                    381,
                    639
                ],
                "verify_integrity": [
                    448,
                    279
                ],
                "copy": [
                    280,
                    449
                ],
                "sort": [
                    281,
                    445
                ],
                "op.get_result": [
                    284
                ],
                "NDFrame": [
                    305
                ],
                "self.intersect": [
                    312,
                    520,
                    314,
                    381
                ],
                "self": [
                    513,
                    388,
                    518,
                    520,
                    397,
                    398,
                    527,
                    528,
                    401,
                    529,
                    530,
                    531,
                    533,
                    534,
                    537,
                    413,
                    552,
                    554,
                    556,
                    558,
                    434,
                    562,
                    438,
                    566,
                    312,
                    441,
                    442,
                    314,
                    443,
                    444,
                    445,
                    447,
                    448,
                    449,
                    569,
                    451,
                    574,
                    456,
                    459,
                    460,
                    462,
                    463,
                    465,
                    466,
                    470,
                    473,
                    476,
                    481,
                    484,
                    485,
                    496,
                    498,
                    501,
                    502,
                    505,
                    508,
                    381,
                    511
                ],
                "objs.keys": [
                    322
                ],
                "k": [
                    336,
                    339,
                    323
                ],
                "com.not_none": [
                    331
                ],
                "com": [
                    331,
                    460
                ],
                "clean_keys": [
                    339,
                    334,
                    343
                ],
                "clean_objs": [
                    340,
                    341,
                    335
                ],
                "v": [
                    336,
                    337,
                    340
                ],
                "clean_keys.append": [
                    339
                ],
                "clean_objs.append": [
                    340
                ],
                "name": [
                    427,
                    428,
                    429,
                    460,
                    466,
                    435,
                    436,
                    342,
                    343
                ],
                "Index": [
                    580,
                    517,
                    550,
                    523,
                    343,
                    573,
                    510
                ],
                "ndims": [
                    360,
                    366,
                    367,
                    410,
                    349
                ],
                "obj": [
                    416,
                    481,
                    354,
                    414,
                    482,
                    359,
                    360,
                    427,
                    493,
                    368,
                    369,
                    370,
                    436,
                    438,
                    377,
                    350,
                    351
                ],
                "Series": [
                    391,
                    401,
                    377,
                    538,
                    351
                ],
                "DataFrame": [
                    392,
                    471,
                    397,
                    351
                ],
                "msg": [
                    352,
                    356
                ],
                "obj._consolidate": [
                    359
                ],
                "ndims.add": [
                    360
                ],
                "obj.ndim": [
                    360,
                    369,
                    416
                ],
                "sample": [
                    384,
                    386,
                    387,
                    391,
                    394,
                    365,
                    397,
                    401,
                    370,
                    402,
                    436,
                    405,
                    412
                ],
                "max_ndim": [
                    417,
                    420,
                    367,
                    369,
                    412
                ],
                "np.sum": [
                    369
                ],
                "np": [
                    680,
                    684,
                    687,
                    369,
                    626,
                    625
                ],
                "obj.shape": [
                    369,
                    377
                ],
                "non_empties": [
                    376,
                    380,
                    383
                ],
                "self.objs": [
                    388,
                    518,
                    520,
                    529,
                    531,
                    534,
                    537,
                    413,
                    552,
                    556,
                    438,
                    460,
                    462,
                    463,
                    465,
                    470,
                    481,
                    501,
                    508
                ],
                "DataFrame._get_axis_number": [
                    392
                ],
                "sample._get_axis_number": [
                    394
                ],
                "self._is_frame": [
                    434,
                    397,
                    398
                ],
                "self._is_series": [
                    456,
                    401,
                    505,
                    527
                ],
                "sample.ndim": [
                    402,
                    412,
                    405
                ],
                "current_column": [
                    411,
                    429,
                    430
                ],
                "ndim": [
                    416,
                    417,
                    514,
                    420,
                    508,
                    511
                ],
                "sample._constructor": [
                    436
                ],
                "self.objs.append": [
                    438
                ],
                "self.axis": [
                    513,
                    485,
                    459,
                    556,
                    505,
                    496,
                    528,
                    441
                ],
                "self.keys": [
                    554,
                    562,
                    533,
                    566,
                    442
                ],
                "self.names": [
                    554,
                    443,
                    566
                ],
                "self.levels": [
                    444,
                    566
                ],
                "self.sort": [
                    520,
                    445
                ],
                "self.ignore_index": [
                    530,
                    558,
                    447
                ],
                "self.verify_integrity": [
                    448,
                    574
                ],
                "self.copy": [
                    496,
                    449,
                    498
                ],
                "self.new_axes": [
                    451,
                    484,
                    463,
                    496,
                    473
                ],
                "self._get_new_axes": [
                    451
                ],
                "com.consensus_name_attr": [
                    460
                ],
                "mgr": [
                    489,
                    466,
                    482,
                    462
                ],
                "_data.concat": [
                    462
                ],
                "_data": [
                    462
                ],
                "x._data": [
                    556,
                    463
                ],
                "x": [
                    544,
                    605,
                    556,
                    463,
                    529,
                    596,
                    537,
                    538,
                    541,
                    543
                ],
                "cons": [
                    465,
                    466,
                    501,
                    502,
                    471,
                    474
                ],
                "_constructor": [
                    465,
                    501
                ],
                "__finalize__": [
                    466,
                    502
                ],
                "data": [
                    474,
                    470
                ],
                "index": [
                    473,
                    474,
                    625,
                    615
                ],
                "columns": [
                    473,
                    475
                ],
                "df": [
                    474,
                    475,
                    476
                ],
                "df.columns": [
                    475
                ],
                "df.__finalize__": [
                    476
                ],
                "mgrs_indexers": [
                    480,
                    496,
                    493
                ],
                "obj._data": [
                    482,
                    493
                ],
                "indexers": [
                    483,
                    493,
                    491
                ],
                "ax": [
                    489,
                    491,
                    484,
                    485
                ],
                "new_labels": [
                    490,
                    491,
                    484
                ],
                "obj_labels": [
                    489,
                    490,
                    491
                ],
                "mgr.axes": [
                    489
                ],
                "new_labels.equals": [
                    490
                ],
                "obj_labels.reindex": [
                    491
                ],
                "mgrs_indexers.append": [
                    493
                ],
                "new_data": [
                    499,
                    502,
                    495
                ],
                "concatenate_block_managers": [
                    495
                ],
                "new_data._consolidate_inplace": [
                    499
                ],
                "self._get_result_dim": [
                    511
                ],
                "i": [
                    544,
                    513,
                    514,
                    547,
                    518,
                    617,
                    559,
                    625,
                    537
                ],
                "self._get_concat_axis": [
                    513
                ],
                "self._get_comb_axis": [
                    513
                ],
                "List": [
                    510,
                    534
                ],
                "data_axis": [
                    520,
                    518
                ],
                "_get_block_manager_axis": [
                    518
                ],
                "get_objs_combined_axis": [
                    519
                ],
                "indexes": [
                    643,
                    581,
                    615,
                    649,
                    556,
                    559,
                    655,
                    529,
                    657,
                    563,
                    628,
                    566,
                    607
                ],
                "x.index": [
                    529
                ],
                "idx": [
                    643,
                    559,
                    560,
                    531,
                    532
                ],
                "ibase.default_index": [
                    552,
                    531,
                    559
                ],
                "ibase": [
                    552,
                    531,
                    559
                ],
                "num": [
                    547,
                    548,
                    535
                ],
                "has_names": [
                    536,
                    545,
                    549
                ],
                "x.name": [
                    544,
                    543
                ],
                "set_names": [
                    554
                ],
                "ensure_index": [
                    669,
                    554,
                    596,
                    603,
                    605
                ],
                "x._data.axes": [
                    556
                ],
                "concat_axis": [
                    569,
                    563,
                    565,
                    571
                ],
                "_concat_indexes": [
                    563,
                    628
                ],
                "_make_concat_multiindex": [
                    565
                ],
                "self._maybe_check_integrity": [
                    569
                ],
                "concat_index.is_unique": [
                    575
                ],
                "concat_index": [
                    576,
                    628,
                    631,
                    632,
                    633,
                    635,
                    575
                ],
                "overlap": [
                    576,
                    577
                ],
                "unique": [
                    576
                ],
                "concat_index.duplicated": [
                    576
                ],
                "append": [
                    581
                ],
                "zipped": [
                    613,
                    589,
                    591,
                    594,
                    598,
                    668
                ],
                "_": [
                    594
                ],
                "factorize_from_iterables": [
                    594
                ],
                "all_indexes_same": [
                    607
                ],
                "codes_list": [
                    608,
                    652,
                    626,
                    633,
                    637
                ],
                "hlevel": [
                    676,
                    613,
                    615,
                    668,
                    669,
                    670
                ],
                "level": [
                    613,
                    617,
                    621,
                    668,
                    670
                ],
                "to_concat": [
                    625,
                    626,
                    614
                ],
                "key": [
                    617,
                    621,
                    615
                ],
                "level.get_loc": [
                    617
                ],
                "to_concat.append": [
                    625
                ],
                "np.repeat": [
                    680,
                    625
                ],
                "codes_list.append": [
                    626,
                    637
                ],
                "np.concatenate": [
                    626
                ],
                "MultiIndex": [
                    584,
                    682,
                    651,
                    692,
                    631
                ],
                "levels.extend": [
                    632
                ],
                "concat_index.levels": [
                    632
                ],
                "codes_list.extend": [
                    633
                ],
                "concat_index.codes": [
                    633
                ],
                "codes": [
                    635,
                    637
                ],
                "categories": [
                    635,
                    636
                ],
                "factorize_from_iterable": [
                    635
                ],
                "levels.append": [
                    636
                ],
                "idx.nlevels": [
                    643
                ],
                "get_consensus_names": [
                    649
                ],
                "new_index": [
                    682,
                    683,
                    684,
                    686,
                    655,
                    656,
                    690
                ],
                "n": [
                    656,
                    680,
                    687
                ],
                "kpieces": [
                    657,
                    684,
                    687
                ],
                "new_names": [
                    689,
                    690,
                    660,
                    693
                ],
                "new_levels": [
                    683,
                    686,
                    689,
                    661,
                    693
                ],
                "new_codes": [
                    680,
                    684,
                    687,
                    693,
                    664
                ],
                "mapped": [
                    672,
                    670,
                    680
                ],
                "level.get_indexer": [
                    670
                ],
                "mask": [
                    672,
                    673,
                    676
                ],
                "mask.any": [
                    673
                ],
                "new_codes.append": [
                    680,
                    687
                ],
                "new_levels.extend": [
                    683
                ],
                "new_index.levels": [
                    683
                ],
                "new_codes.extend": [
                    684
                ],
                "np.tile": [
                    684,
                    687
                ],
                "lab": [
                    684
                ],
                "new_index.codes": [
                    684
                ],
                "new_levels.append": [
                    686
                ],
                "np.arange": [
                    687
                ],
                "new_names.extend": [
                    690
                ],
                "new_index.names": [
                    690
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/reshape/test_concat.py",
                "test_function": "test_concat_copy_index",
                "test_function_code": "@pytest.mark.parametrize(\"test_series\", [True, False])\ndef test_concat_copy_index(test_series, axis):\n    # GH 29879\n    if test_series:\n        ser = Series([1, 2])\n        comb = concat([ser, ser], axis=axis, copy=True)\n        assert comb.index is not ser.index\n    else:\n        df = DataFrame([[1, 2], [3, 4]], columns=[\"a\", \"b\"])\n        comb = concat([df, df], axis=axis, copy=True)\n        assert comb.index is not df.index\n        assert comb.columns is not df.columns",
                "test_error": "AssertionError: assert Index(['a', 'b'], dtype='object') is not Index(['a', 'b'], dtype='object')  +  where Index(['a', 'b'], dtype='object') =    a  b\\n0  1  2\\n1  3  4\\n0  1  2\\n1  3  4.columns  +  and   Index(['a', 'b'], dtype='object') =    a  b\\n0  1  2\\n1  3  4.columns",
                "full_test_error": "test_series = False, axis = 0\n\n    @pytest.mark.parametrize(\"test_series\", [True, False])\n    def test_concat_copy_index(test_series, axis):\n        # GH 29879\n        if test_series:\n            ser = Series([1, 2])\n            comb = concat([ser, ser], axis=axis, copy=True)\n            assert comb.index is not ser.index\n        else:\n            df = DataFrame([[1, 2], [3, 4]], columns=[\"a\", \"b\"])\n            comb = concat([df, df], axis=axis, copy=True)\n            assert comb.index is not df.index\n>           assert comb.columns is not df.columns\nE           AssertionError: assert Index(['a', 'b'], dtype='object') is not Index(['a', 'b'], dtype='object')\nE            +  where Index(['a', 'b'], dtype='object') =    a  b\\n0  1  2\\n1  3  4\\n0  1  2\\n1  3  4.columns\nE            +  and   Index(['a', 'b'], dtype='object') =    a  b\\n0  1  2\\n1  3  4.columns\n\npandas/tests/reshape/test_concat.py:2766: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('test_series', [True, False])"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/reshape/test_concat.py",
                "test_function": "test_concat_copy_index",
                "test_function_code": "@pytest.mark.parametrize(\"test_series\", [True, False])\ndef test_concat_copy_index(test_series, axis):\n    # GH 29879\n    if test_series:\n        ser = Series([1, 2])\n        comb = concat([ser, ser], axis=axis, copy=True)\n        assert comb.index is not ser.index\n    else:\n        df = DataFrame([[1, 2], [3, 4]], columns=[\"a\", \"b\"])\n        comb = concat([df, df], axis=axis, copy=True)\n        assert comb.index is not df.index\n        assert comb.columns is not df.columns",
                "test_error": "assert RangeIndex(start=0, stop=2, step=1) is not RangeIndex(start=0, stop=2, step=1)  +  where RangeIndex(start=0, stop=2, step=1) =    0  1\\n0  1  1\\n1  2  2.index  +  and   RangeIndex(start=0, stop=2, step=1) = 0    1\\n1    2\\ndtype: int64.index",
                "full_test_error": "test_series = True, axis = 1\n\n    @pytest.mark.parametrize(\"test_series\", [True, False])\n    def test_concat_copy_index(test_series, axis):\n        # GH 29879\n        if test_series:\n            ser = Series([1, 2])\n            comb = concat([ser, ser], axis=axis, copy=True)\n>           assert comb.index is not ser.index\nE           assert RangeIndex(start=0, stop=2, step=1) is not RangeIndex(start=0, stop=2, step=1)\nE            +  where RangeIndex(start=0, stop=2, step=1) =    0  1\\n0  1  1\\n1  2  2.index\nE            +  and   RangeIndex(start=0, stop=2, step=1) = 0    1\\n1    2\\ndtype: int64.index\n\npandas/tests/reshape/test_concat.py:2761: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('test_series', [True, False])"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/reshape/test_concat.py",
                "test_function": "test_concat_copy_index",
                "test_function_code": "@pytest.mark.parametrize(\"test_series\", [True, False])\ndef test_concat_copy_index(test_series, axis):\n    # GH 29879\n    if test_series:\n        ser = Series([1, 2])\n        comb = concat([ser, ser], axis=axis, copy=True)\n        assert comb.index is not ser.index\n    else:\n        df = DataFrame([[1, 2], [3, 4]], columns=[\"a\", \"b\"])\n        comb = concat([df, df], axis=axis, copy=True)\n        assert comb.index is not df.index\n        assert comb.columns is not df.columns",
                "test_error": "assert RangeIndex(start=0, stop=2, step=1) is not RangeIndex(start=0, stop=2, step=1)  +  where RangeIndex(start=0, stop=2, step=1) =    a  b  a  b\\n0  1  2  1  2\\n1  3  4  3  4.index  +  and   RangeIndex(start=0, stop=2, step=1) =    a  b\\n0  1  2\\n1  3  4.index",
                "full_test_error": "test_series = False, axis = 1\n\n    @pytest.mark.parametrize(\"test_series\", [True, False])\n    def test_concat_copy_index(test_series, axis):\n        # GH 29879\n        if test_series:\n            ser = Series([1, 2])\n            comb = concat([ser, ser], axis=axis, copy=True)\n            assert comb.index is not ser.index\n        else:\n            df = DataFrame([[1, 2], [3, 4]], columns=[\"a\", \"b\"])\n            comb = concat([df, df], axis=axis, copy=True)\n>           assert comb.index is not df.index\nE           assert RangeIndex(start=0, stop=2, step=1) is not RangeIndex(start=0, stop=2, step=1)\nE            +  where RangeIndex(start=0, stop=2, step=1) =    a  b  a  b\\n0  1  2  1  2\\n1  3  4  3  4.index\nE            +  and   RangeIndex(start=0, stop=2, step=1) =    a  b\\n0  1  2\\n1  3  4.index\n\npandas/tests/reshape/test_concat.py:2765: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('test_series', [True, False])"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/reshape/test_concat.py",
                "test_function": "test_concat_copy_index",
                "test_function_code": "@pytest.mark.parametrize(\"test_series\", [True, False])\ndef test_concat_copy_index(test_series, axis):\n    # GH 29879\n    if test_series:\n        ser = Series([1, 2])\n        comb = concat([ser, ser], axis=axis, copy=True)\n        assert comb.index is not ser.index\n    else:\n        df = DataFrame([[1, 2], [3, 4]], columns=[\"a\", \"b\"])\n        comb = concat([df, df], axis=axis, copy=True)\n        assert comb.index is not df.index\n        assert comb.columns is not df.columns",
                "test_error": "AssertionError: assert Index(['a', 'b'], dtype='object') is not Index(['a', 'b'], dtype='object')  +  where Index(['a', 'b'], dtype='object') =    a  b\\n0  1  2\\n1  3  4\\n0  1  2\\n1  3  4.columns  +  and   Index(['a', 'b'], dtype='object') =    a  b\\n0  1  2\\n1  3  4.columns",
                "full_test_error": "test_series = False, axis = 'index'\n\n    @pytest.mark.parametrize(\"test_series\", [True, False])\n    def test_concat_copy_index(test_series, axis):\n        # GH 29879\n        if test_series:\n            ser = Series([1, 2])\n            comb = concat([ser, ser], axis=axis, copy=True)\n            assert comb.index is not ser.index\n        else:\n            df = DataFrame([[1, 2], [3, 4]], columns=[\"a\", \"b\"])\n            comb = concat([df, df], axis=axis, copy=True)\n            assert comb.index is not df.index\n>           assert comb.columns is not df.columns\nE           AssertionError: assert Index(['a', 'b'], dtype='object') is not Index(['a', 'b'], dtype='object')\nE            +  where Index(['a', 'b'], dtype='object') =    a  b\\n0  1  2\\n1  3  4\\n0  1  2\\n1  3  4.columns\nE            +  and   Index(['a', 'b'], dtype='object') =    a  b\\n0  1  2\\n1  3  4.columns\n\npandas/tests/reshape/test_concat.py:2766: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('test_series', [True, False])"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/reshape/test_concat.py",
                "test_function": "test_concat_copy_index",
                "test_function_code": "@pytest.mark.parametrize(\"test_series\", [True, False])\ndef test_concat_copy_index(test_series, axis):\n    # GH 29879\n    if test_series:\n        ser = Series([1, 2])\n        comb = concat([ser, ser], axis=axis, copy=True)\n        assert comb.index is not ser.index\n    else:\n        df = DataFrame([[1, 2], [3, 4]], columns=[\"a\", \"b\"])\n        comb = concat([df, df], axis=axis, copy=True)\n        assert comb.index is not df.index\n        assert comb.columns is not df.columns",
                "test_error": "assert RangeIndex(start=0, stop=2, step=1) is not RangeIndex(start=0, stop=2, step=1)  +  where RangeIndex(start=0, stop=2, step=1) =    0  1\\n0  1  1\\n1  2  2.index  +  and   RangeIndex(start=0, stop=2, step=1) = 0    1\\n1    2\\ndtype: int64.index",
                "full_test_error": "test_series = True, axis = 'columns'\n\n    @pytest.mark.parametrize(\"test_series\", [True, False])\n    def test_concat_copy_index(test_series, axis):\n        # GH 29879\n        if test_series:\n            ser = Series([1, 2])\n            comb = concat([ser, ser], axis=axis, copy=True)\n>           assert comb.index is not ser.index\nE           assert RangeIndex(start=0, stop=2, step=1) is not RangeIndex(start=0, stop=2, step=1)\nE            +  where RangeIndex(start=0, stop=2, step=1) =    0  1\\n0  1  1\\n1  2  2.index\nE            +  and   RangeIndex(start=0, stop=2, step=1) = 0    1\\n1    2\\ndtype: int64.index\n\npandas/tests/reshape/test_concat.py:2761: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('test_series', [True, False])"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/reshape/test_concat.py",
                "test_function": "test_concat_copy_index",
                "test_function_code": "@pytest.mark.parametrize(\"test_series\", [True, False])\ndef test_concat_copy_index(test_series, axis):\n    # GH 29879\n    if test_series:\n        ser = Series([1, 2])\n        comb = concat([ser, ser], axis=axis, copy=True)\n        assert comb.index is not ser.index\n    else:\n        df = DataFrame([[1, 2], [3, 4]], columns=[\"a\", \"b\"])\n        comb = concat([df, df], axis=axis, copy=True)\n        assert comb.index is not df.index\n        assert comb.columns is not df.columns",
                "test_error": "assert RangeIndex(start=0, stop=2, step=1) is not RangeIndex(start=0, stop=2, step=1)  +  where RangeIndex(start=0, stop=2, step=1) =    a  b  a  b\\n0  1  2  1  2\\n1  3  4  3  4.index  +  and   RangeIndex(start=0, stop=2, step=1) =    a  b\\n0  1  2\\n1  3  4.index",
                "full_test_error": "test_series = False, axis = 'columns'\n\n    @pytest.mark.parametrize(\"test_series\", [True, False])\n    def test_concat_copy_index(test_series, axis):\n        # GH 29879\n        if test_series:\n            ser = Series([1, 2])\n            comb = concat([ser, ser], axis=axis, copy=True)\n            assert comb.index is not ser.index\n        else:\n            df = DataFrame([[1, 2], [3, 4]], columns=[\"a\", \"b\"])\n            comb = concat([df, df], axis=axis, copy=True)\n>           assert comb.index is not df.index\nE           assert RangeIndex(start=0, stop=2, step=1) is not RangeIndex(start=0, stop=2, step=1)\nE            +  where RangeIndex(start=0, stop=2, step=1) =    a  b  a  b\\n0  1  2  1  2\\n1  3  4  3  4.index\nE            +  and   RangeIndex(start=0, stop=2, step=1) =    a  b\\n0  1  2\\n1  3  4.index\n\npandas/tests/reshape/test_concat.py:2765: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('test_series', [True, False])"
                ]
            }
        ]
    }
}