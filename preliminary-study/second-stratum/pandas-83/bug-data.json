{
    "pandas:83": {
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/core/indexes/api.py": {
            "buggy_functions": [
                {
                    "function_name": "get_objs_combined_axis",
                    "function_code": "def get_objs_combined_axis(\n    objs, intersect: bool = False, axis=0, sort: bool = True\n) -> Index:\n    \"\"\"\n    Extract combined index: return intersection or union (depending on the\n    value of \"intersect\") of indexes on given axis, or None if all objects\n    lack indexes (e.g. they are numpy arrays).\n\n    Parameters\n    ----------\n    objs : list\n        Series or DataFrame objects, may be mix of the two.\n    intersect : bool, default False\n        If True, calculate the intersection between indexes. Otherwise,\n        calculate the union.\n    axis : {0 or 'index', 1 or 'outer'}, default 0\n        The axis to extract indexes from.\n    sort : bool, default True\n        Whether the result index should come out sorted or not.\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    obs_idxes = [obj._get_axis(axis) for obj in objs]\n    return _get_combined_index(obs_idxes, intersect=intersect, sort=sort)\n",
                    "decorators": [],
                    "docstring": "Extract combined index: return intersection or union (depending on the\nvalue of \"intersect\") of indexes on given axis, or None if all objects\nlack indexes (e.g. they are numpy arrays).\n\nParameters\n----------\nobjs : list\n    Series or DataFrame objects, may be mix of the two.\nintersect : bool, default False\n    If True, calculate the intersection between indexes. Otherwise,\n    calculate the union.\naxis : {0 or 'index', 1 or 'outer'}, default 0\n    The axis to extract indexes from.\nsort : bool, default True\n    Whether the result index should come out sorted or not.\n\nReturns\n-------\nIndex",
                    "start_line": 65,
                    "variables": {
                        "bool": [
                            66
                        ],
                        "obs_idxes": [
                            89,
                            90
                        ],
                        "obj._get_axis": [
                            89
                        ],
                        "obj": [
                            89
                        ],
                        "axis": [
                            89
                        ],
                        "objs": [
                            89
                        ],
                        "_get_combined_index": [
                            90
                        ],
                        "intersect": [
                            90
                        ],
                        "sort": [
                            90
                        ],
                        "Index": [
                            67
                        ]
                    },
                    "filtered_variables": {
                        "obs_idxes": [
                            89,
                            90
                        ],
                        "obj._get_axis": [
                            89
                        ],
                        "obj": [
                            89
                        ],
                        "axis": [
                            89
                        ],
                        "objs": [
                            89
                        ],
                        "_get_combined_index": [
                            90
                        ],
                        "intersect": [
                            90
                        ],
                        "sort": [
                            90
                        ],
                        "Index": [
                            67
                        ]
                    },
                    "diff_line_number": 66,
                    "class_data": null
                },
                {
                    "function_name": null,
                    "function_code": null,
                    "decorators": [],
                    "docstring": null,
                    "start_line": null,
                    "variables": {},
                    "filtered_variables": {},
                    "diff_line_number": 91,
                    "class_data": null
                },
                {
                    "function_name": "_get_combined_index",
                    "function_code": "def _get_combined_index(\n    indexes: List[Index], intersect: bool = False, sort: bool = False\n) -> Index:\n    \"\"\"\n    Return the union or intersection of indexes.\n\n    Parameters\n    ----------\n    indexes : list of Index or list objects\n        When intersect=True, do not accept list of lists.\n    intersect : bool, default False\n        If True, calculate the intersection between indexes. Otherwise,\n        calculate the union.\n    sort : bool, default False\n        Whether the result index should come out sorted or not.\n\n    Returns\n    -------\n    Index\n    \"\"\"\n    # TODO: handle index names!\n    indexes = _get_distinct_objs(indexes)\n    if len(indexes) == 0:\n        index = Index([])\n    elif len(indexes) == 1:\n        index = indexes[0]\n    elif intersect:\n        index = indexes[0]\n        for other in indexes[1:]:\n            index = index.intersection(other)\n    else:\n        index = union_indexes(indexes, sort=sort)\n        index = ensure_index(index)\n\n    if sort:\n        try:\n            index = index.sort_values()\n        except TypeError:\n            pass\n    return index\n",
                    "decorators": [],
                    "docstring": "Return the union or intersection of indexes.\n\nParameters\n----------\nindexes : list of Index or list objects\n    When intersect=True, do not accept list of lists.\nintersect : bool, default False\n    If True, calculate the intersection between indexes. Otherwise,\n    calculate the union.\nsort : bool, default False\n    Whether the result index should come out sorted or not.\n\nReturns\n-------\nIndex",
                    "start_line": 107,
                    "variables": {
                        "List": [
                            108
                        ],
                        "Index": [
                            130,
                            108,
                            109
                        ],
                        "bool": [
                            108
                        ],
                        "indexes": [
                            128,
                            129,
                            131,
                            132,
                            134,
                            135,
                            138
                        ],
                        "_get_distinct_objs": [
                            128
                        ],
                        "len": [
                            129,
                            131
                        ],
                        "index": [
                            130,
                            132,
                            134,
                            136,
                            138,
                            139,
                            143,
                            146
                        ],
                        "intersect": [
                            133
                        ],
                        "other": [
                            136,
                            135
                        ],
                        "index.intersection": [
                            136
                        ],
                        "union_indexes": [
                            138
                        ],
                        "sort": [
                            138,
                            141
                        ],
                        "ensure_index": [
                            139
                        ],
                        "index.sort_values": [
                            143
                        ],
                        "TypeError": [
                            144
                        ]
                    },
                    "filtered_variables": {
                        "List": [
                            108
                        ],
                        "Index": [
                            130,
                            108,
                            109
                        ],
                        "indexes": [
                            128,
                            129,
                            131,
                            132,
                            134,
                            135,
                            138
                        ],
                        "_get_distinct_objs": [
                            128
                        ],
                        "index": [
                            130,
                            132,
                            134,
                            136,
                            138,
                            139,
                            143,
                            146
                        ],
                        "intersect": [
                            133
                        ],
                        "other": [
                            136,
                            135
                        ],
                        "index.intersection": [
                            136
                        ],
                        "union_indexes": [
                            138
                        ],
                        "sort": [
                            138,
                            141
                        ],
                        "ensure_index": [
                            139
                        ],
                        "index.sort_values": [
                            143
                        ]
                    },
                    "diff_line_number": 108,
                    "class_data": null
                }
            ],
            "inscope_functions": [
                "get_objs_combined_axis(objs, intersect: bool=False, axis=0, sort: bool=True) -> Index",
                "_get_distinct_objs(objs: List[Index]) -> List[Index]",
                "_get_combined_index(indexes: List[Index], intersect: bool=False, sort: bool=False) -> Index",
                "union_indexes(indexes, sort=True) -> Index",
                "_sanitize_and_check(indexes)",
                "get_consensus_names(indexes)",
                "all_indexes_same(indexes)",
                "_unique_indices(inds) -> Index",
                "conv(i)"
            ],
            "variables_in_file": {
                "_sort_msg": [
                    28
                ],
                "textwrap.dedent": [
                    28
                ],
                "textwrap": [
                    28
                ],
                "__all__": [
                    40
                ],
                "bool": [
                    66,
                    108
                ],
                "obs_idxes": [
                    89,
                    90
                ],
                "obj._get_axis": [
                    89
                ],
                "obj": [
                    100,
                    101,
                    102,
                    103,
                    89
                ],
                "axis": [
                    89
                ],
                "objs": [
                    89,
                    100
                ],
                "_get_combined_index": [
                    90
                ],
                "intersect": [
                    90,
                    133
                ],
                "sort": [
                    90,
                    195,
                    141,
                    138
                ],
                "Index": [
                    130,
                    67,
                    195,
                    170,
                    108,
                    109,
                    175,
                    149,
                    247,
                    93,
                    254,
                    191
                ],
                "List": [
                    108,
                    93
                ],
                "ids": [
                    98,
                    101,
                    102
                ],
                "Set": [
                    98
                ],
                "int": [
                    98
                ],
                "set": [
                    98
                ],
                "res": [
                    104,
                    99,
                    103
                ],
                "id": [
                    101,
                    102
                ],
                "ids.add": [
                    102
                ],
                "res.append": [
                    103
                ],
                "indexes": [
                    128,
                    129,
                    257,
                    131,
                    132,
                    134,
                    135,
                    138,
                    278,
                    281,
                    165,
                    167,
                    168,
                    297,
                    298,
                    173,
                    198,
                    202,
                    204,
                    208,
                    209,
                    211,
                    213,
                    218,
                    242,
                    246,
                    248,
                    252,
                    255
                ],
                "_get_distinct_objs": [
                    128
                ],
                "len": [
                    129,
                    131,
                    165,
                    167,
                    245,
                    279,
                    254
                ],
                "index": [
                    130,
                    132,
                    134,
                    136,
                    138,
                    139,
                    298,
                    299,
                    143,
                    208,
                    146,
                    210,
                    242,
                    214,
                    215,
                    216
                ],
                "other": [
                    135,
                    136,
                    204,
                    205,
                    209,
                    210
                ],
                "index.intersection": [
                    136
                ],
                "union_indexes": [
                    138
                ],
                "ensure_index": [
                    139
                ],
                "index.sort_values": [
                    143
                ],
                "TypeError": [
                    144
                ],
                "AssertionError": [
                    166
                ],
                "result": [
                    198,
                    168,
                    169,
                    170,
                    171,
                    200,
                    202,
                    205,
                    206
                ],
                "isinstance": [
                    169,
                    247,
                    191
                ],
                "list": [
                    169,
                    242,
                    244,
                    280,
                    250
                ],
                "sorted": [
                    170
                ],
                "kind": [
                    197,
                    173,
                    207
                ],
                "_sanitize_and_check": [
                    173
                ],
                "i": [
                    192,
                    193,
                    195,
                    278,
                    191
                ],
                "i.tolist": [
                    192
                ],
                "lib.fast_unique_multiple_list": [
                    195
                ],
                "lib": [
                    195
                ],
                "conv": [
                    195
                ],
                "inds": [
                    195
                ],
                "hasattr": [
                    200
                ],
                "result.union_many": [
                    202
                ],
                "result.union": [
                    205
                ],
                "index.equals": [
                    210
                ],
                "_unique_indices": [
                    218,
                    211
                ],
                "name": [
                    213,
                    214,
                    215
                ],
                "get_consensus_names": [
                    213
                ],
                "index.name": [
                    214
                ],
                "index._shallow_copy": [
                    215
                ],
                "kinds": [
                    242,
                    244,
                    245,
                    250,
                    254
                ],
                "type": [
                    242
                ],
                "x": [
                    248,
                    247
                ],
                "com.try_sort": [
                    247
                ],
                "com": [
                    278,
                    247
                ],
                "kinds.remove": [
                    250
                ],
                "consensus_names": [
                    280,
                    278,
                    279
                ],
                "tuple": [
                    278
                ],
                "i.names": [
                    278
                ],
                "com.any_not_none": [
                    278
                ],
                "nlevels": [
                    281
                ],
                "first": [
                    297,
                    299
                ],
                "first.equals": [
                    299
                ]
            },
            "filtered_variables_in_file": {
                "_sort_msg": [
                    28
                ],
                "textwrap.dedent": [
                    28
                ],
                "textwrap": [
                    28
                ],
                "__all__": [
                    40
                ],
                "obs_idxes": [
                    89,
                    90
                ],
                "obj._get_axis": [
                    89
                ],
                "obj": [
                    100,
                    101,
                    102,
                    103,
                    89
                ],
                "axis": [
                    89
                ],
                "objs": [
                    89,
                    100
                ],
                "_get_combined_index": [
                    90
                ],
                "intersect": [
                    90,
                    133
                ],
                "sort": [
                    90,
                    195,
                    141,
                    138
                ],
                "Index": [
                    130,
                    67,
                    195,
                    170,
                    108,
                    109,
                    175,
                    149,
                    247,
                    93,
                    254,
                    191
                ],
                "List": [
                    108,
                    93
                ],
                "ids": [
                    98,
                    101,
                    102
                ],
                "Set": [
                    98
                ],
                "res": [
                    104,
                    99,
                    103
                ],
                "ids.add": [
                    102
                ],
                "res.append": [
                    103
                ],
                "indexes": [
                    128,
                    129,
                    257,
                    131,
                    132,
                    134,
                    135,
                    138,
                    278,
                    281,
                    165,
                    167,
                    168,
                    297,
                    298,
                    173,
                    198,
                    202,
                    204,
                    208,
                    209,
                    211,
                    213,
                    218,
                    242,
                    246,
                    248,
                    252,
                    255
                ],
                "_get_distinct_objs": [
                    128
                ],
                "index": [
                    130,
                    132,
                    134,
                    136,
                    138,
                    139,
                    298,
                    299,
                    143,
                    208,
                    146,
                    210,
                    242,
                    214,
                    215,
                    216
                ],
                "other": [
                    135,
                    136,
                    204,
                    205,
                    209,
                    210
                ],
                "index.intersection": [
                    136
                ],
                "union_indexes": [
                    138
                ],
                "ensure_index": [
                    139
                ],
                "index.sort_values": [
                    143
                ],
                "result": [
                    198,
                    168,
                    169,
                    170,
                    171,
                    200,
                    202,
                    205,
                    206
                ],
                "kind": [
                    197,
                    173,
                    207
                ],
                "_sanitize_and_check": [
                    173
                ],
                "i": [
                    192,
                    193,
                    195,
                    278,
                    191
                ],
                "i.tolist": [
                    192
                ],
                "lib.fast_unique_multiple_list": [
                    195
                ],
                "lib": [
                    195
                ],
                "conv": [
                    195
                ],
                "inds": [
                    195
                ],
                "result.union_many": [
                    202
                ],
                "result.union": [
                    205
                ],
                "index.equals": [
                    210
                ],
                "_unique_indices": [
                    218,
                    211
                ],
                "name": [
                    213,
                    214,
                    215
                ],
                "get_consensus_names": [
                    213
                ],
                "index.name": [
                    214
                ],
                "index._shallow_copy": [
                    215
                ],
                "kinds": [
                    242,
                    244,
                    245,
                    250,
                    254
                ],
                "x": [
                    248,
                    247
                ],
                "com.try_sort": [
                    247
                ],
                "com": [
                    278,
                    247
                ],
                "kinds.remove": [
                    250
                ],
                "consensus_names": [
                    280,
                    278,
                    279
                ],
                "i.names": [
                    278
                ],
                "com.any_not_none": [
                    278
                ],
                "nlevels": [
                    281
                ],
                "first": [
                    297,
                    299
                ],
                "first.equals": [
                    299
                ]
            }
        },
        "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/core/reshape/concat.py": {
            "buggy_functions": [
                {
                    "function_name": "_get_comb_axis",
                    "function_code": "def _get_comb_axis(self, i: int) -> Index:\n    data_axis = self.objs[0]._get_block_manager_axis(i)\n    return get_objs_combined_axis(\n        self.objs, axis=data_axis, intersect=self.intersect, sort=self.sort\n    )\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 517,
                    "variables": {
                        "int": [
                            517
                        ],
                        "data_axis": [
                            520,
                            518
                        ],
                        "_get_block_manager_axis": [
                            518
                        ],
                        "self.objs": [
                            520,
                            518
                        ],
                        "self": [
                            520,
                            518
                        ],
                        "i": [
                            518
                        ],
                        "get_objs_combined_axis": [
                            519
                        ],
                        "self.intersect": [
                            520
                        ],
                        "self.sort": [
                            520
                        ],
                        "Index": [
                            517
                        ]
                    },
                    "filtered_variables": {
                        "data_axis": [
                            520,
                            518
                        ],
                        "_get_block_manager_axis": [
                            518
                        ],
                        "self.objs": [
                            520,
                            518
                        ],
                        "self": [
                            520,
                            518
                        ],
                        "i": [
                            518
                        ],
                        "get_objs_combined_axis": [
                            519
                        ],
                        "self.intersect": [
                            520
                        ],
                        "self.sort": [
                            520
                        ],
                        "Index": [
                            517
                        ]
                    },
                    "diff_line_number": 520,
                    "class_data": {
                        "signature": "class _Concatenator()",
                        "docstring": "Orchestrates a concatenation operation for BlockManagers",
                        "constructor_docstring": null,
                        "functions": [
                            "__init__(self, objs, axis=0, join: str='outer', keys=None, levels=None, names=None, ignore_index: bool=False, verify_integrity: bool=False, copy: bool=True, sort=False)",
                            "get_result(self)",
                            "_get_result_dim(self) -> int",
                            "_get_new_axes(self) -> List[Index]",
                            "_get_comb_axis(self, i: int) -> Index",
                            "_get_concat_axis(self) -> Index",
                            "_maybe_check_integrity(self, concat_index: Index)"
                        ],
                        "constructor_variables": [
                            "new_axes",
                            "clean_objs",
                            "objs",
                            "copy",
                            "intersect",
                            "ignore_index",
                            "verify_integrity",
                            "axis",
                            "max_ndim",
                            "_is_series",
                            "name",
                            "clean_keys",
                            "_is_frame",
                            "non_empties",
                            "current_column",
                            "keys",
                            "ndim",
                            "ndims",
                            "sample",
                            "names",
                            "sort",
                            "msg",
                            "levels",
                            "obj"
                        ],
                        "class_level_variables": [],
                        "class_decorators": []
                    }
                }
            ],
            "inscope_functions": [
                "concat(objs: Union[Iterable['DataFrame'], Mapping[Optional[Hashable], 'DataFrame']], axis=0, join: str='outer', ignore_index: bool=False, keys=None, levels=None, names=None, verify_integrity: bool=False, sort: bool=False, copy: bool=True) -> 'DataFrame'",
                "concat(objs: Union[Iterable[FrameOrSeriesUnion], Mapping[Optional[Hashable], FrameOrSeriesUnion]], axis=0, join: str='outer', ignore_index: bool=False, keys=None, levels=None, names=None, verify_integrity: bool=False, sort: bool=False, copy: bool=True) -> FrameOrSeriesUnion",
                "concat(objs: Union[Iterable[FrameOrSeriesUnion], Mapping[Optional[Hashable], FrameOrSeriesUnion]], axis=0, join='outer', ignore_index: bool=False, keys=None, levels=None, names=None, verify_integrity: bool=False, sort: bool=False, copy: bool=True) -> FrameOrSeriesUnion",
                "_concat_indexes(indexes) -> Index",
                "_make_concat_multiindex(indexes, keys, levels=None, names=None) -> MultiIndex",
                "__init__(self, objs, axis=0, join: str='outer', keys=None, levels=None, names=None, ignore_index: bool=False, verify_integrity: bool=False, copy: bool=True, sort=False)",
                "get_result(self)",
                "_get_result_dim(self) -> int",
                "_get_new_axes(self) -> List[Index]",
                "_get_comb_axis(self, i: int) -> Index",
                "_get_concat_axis(self) -> Index",
                "_maybe_check_integrity(self, concat_index: Index)"
            ],
            "variables_in_file": {
                "Union": [
                    33,
                    66,
                    49
                ],
                "Iterable": [
                    33,
                    50,
                    67
                ],
                "Mapping": [
                    33,
                    50,
                    67
                ],
                "Optional": [
                    33,
                    50,
                    67,
                    534
                ],
                "Hashable": [
                    33,
                    50,
                    67,
                    534
                ],
                "str": [
                    296,
                    305,
                    35,
                    53
                ],
                "bool": [
                    36,
                    71,
                    40,
                    41,
                    42,
                    75,
                    76,
                    77,
                    300,
                    301,
                    302,
                    54,
                    58,
                    59,
                    60
                ],
                "overload": [
                    47,
                    31
                ],
                "FrameOrSeriesUnion": [
                    50,
                    67,
                    61,
                    78
                ],
                "op": [
                    284,
                    271
                ],
                "_Concatenator": [
                    271
                ],
                "objs": [
                    384,
                    387,
                    388,
                    272,
                    413,
                    414,
                    305,
                    308,
                    320,
                    322,
                    323,
                    325,
                    327,
                    331,
                    336,
                    341,
                    345,
                    350,
                    368,
                    377,
                    383
                ],
                "axis": [
                    392,
                    394,
                    399,
                    273,
                    402,
                    434,
                    405,
                    441
                ],
                "ignore_index": [
                    274,
                    428,
                    447
                ],
                "join": [
                    313,
                    275,
                    311
                ],
                "keys": [
                    321,
                    322,
                    323,
                    603,
                    330,
                    586,
                    589,
                    336,
                    276,
                    342,
                    343,
                    598,
                    442,
                    443,
                    381
                ],
                "levels": [
                    636,
                    668,
                    605,
                    613,
                    586,
                    587,
                    652,
                    593,
                    594,
                    596,
                    277,
                    661,
                    632,
                    602,
                    603,
                    444,
                    381,
                    639
                ],
                "names": [
                    544,
                    640,
                    547,
                    550,
                    599,
                    649,
                    652,
                    590,
                    591,
                    660,
                    278,
                    534,
                    600,
                    443,
                    381,
                    639
                ],
                "verify_integrity": [
                    448,
                    279
                ],
                "copy": [
                    280,
                    449
                ],
                "sort": [
                    281,
                    445
                ],
                "op.get_result": [
                    284
                ],
                "isinstance": [
                    320,
                    391,
                    586,
                    682,
                    397,
                    305,
                    401,
                    631,
                    377,
                    538,
                    351
                ],
                "NDFrame": [
                    305
                ],
                "TypeError": [
                    306,
                    539,
                    356
                ],
                "__name__": [
                    308,
                    541
                ],
                "type": [
                    354,
                    308,
                    541
                ],
                "self.intersect": [
                    312,
                    520,
                    314,
                    381
                ],
                "self": [
                    513,
                    388,
                    518,
                    520,
                    397,
                    398,
                    527,
                    528,
                    401,
                    529,
                    530,
                    531,
                    533,
                    534,
                    537,
                    413,
                    552,
                    554,
                    556,
                    558,
                    434,
                    562,
                    438,
                    566,
                    312,
                    441,
                    442,
                    314,
                    443,
                    444,
                    445,
                    447,
                    448,
                    449,
                    569,
                    451,
                    574,
                    456,
                    459,
                    460,
                    462,
                    463,
                    465,
                    466,
                    470,
                    473,
                    476,
                    481,
                    484,
                    485,
                    496,
                    498,
                    501,
                    502,
                    505,
                    508,
                    381,
                    511
                ],
                "ValueError": [
                    577,
                    674,
                    421,
                    328,
                    619,
                    346,
                    316
                ],
                "dict": [
                    320,
                    470
                ],
                "list": [
                    640,
                    322,
                    325,
                    331,
                    589,
                    660,
                    661
                ],
                "objs.keys": [
                    322
                ],
                "k": [
                    336,
                    339,
                    323
                ],
                "len": [
                    643,
                    327,
                    552,
                    587,
                    366,
                    559,
                    591,
                    625,
                    656,
                    531,
                    657,
                    689,
                    470,
                    534,
                    345,
                    410,
                    380,
                    639
                ],
                "com.not_none": [
                    331
                ],
                "com": [
                    331,
                    460
                ],
                "clean_keys": [
                    339,
                    334,
                    343
                ],
                "clean_objs": [
                    340,
                    341,
                    335
                ],
                "v": [
                    336,
                    337,
                    340
                ],
                "zip": [
                    613,
                    615,
                    589,
                    336,
                    470,
                    668
                ],
                "clean_keys.append": [
                    339
                ],
                "clean_objs.append": [
                    340
                ],
                "name": [
                    427,
                    428,
                    429,
                    460,
                    466,
                    435,
                    436,
                    342,
                    343
                ],
                "getattr": [
                    427,
                    443,
                    342
                ],
                "Index": [
                    580,
                    517,
                    550,
                    523,
                    343,
                    573,
                    510
                ],
                "ndims": [
                    360,
                    366,
                    367,
                    410,
                    349
                ],
                "set": [
                    349
                ],
                "obj": [
                    416,
                    481,
                    354,
                    414,
                    482,
                    359,
                    360,
                    427,
                    493,
                    368,
                    369,
                    370,
                    436,
                    438,
                    377,
                    350,
                    351
                ],
                "Series": [
                    391,
                    401,
                    377,
                    538,
                    351
                ],
                "DataFrame": [
                    392,
                    471,
                    397,
                    351
                ],
                "msg": [
                    352,
                    356
                ],
                "format": [
                    620,
                    353,
                    675,
                    404
                ],
                "obj._consolidate": [
                    359
                ],
                "ndims.add": [
                    360
                ],
                "obj.ndim": [
                    360,
                    369,
                    416
                ],
                "sample": [
                    384,
                    386,
                    387,
                    391,
                    394,
                    365,
                    397,
                    401,
                    370,
                    402,
                    436,
                    405,
                    412
                ],
                "max_ndim": [
                    417,
                    420,
                    367,
                    369,
                    412
                ],
                "max": [
                    367
                ],
                "np.sum": [
                    369
                ],
                "np": [
                    680,
                    684,
                    687,
                    369,
                    626,
                    625
                ],
                "obj.shape": [
                    369,
                    377
                ],
                "non_empties": [
                    376,
                    380,
                    383
                ],
                "sum": [
                    377,
                    559
                ],
                "self.objs": [
                    388,
                    518,
                    520,
                    529,
                    531,
                    534,
                    537,
                    413,
                    552,
                    556,
                    438,
                    460,
                    462,
                    463,
                    465,
                    470,
                    481,
                    501,
                    508
                ],
                "DataFrame._get_axis_number": [
                    392
                ],
                "sample._get_axis_number": [
                    394
                ],
                "self._is_frame": [
                    434,
                    397,
                    398
                ],
                "self._is_series": [
                    456,
                    401,
                    505,
                    527
                ],
                "sample.ndim": [
                    402,
                    412,
                    405
                ],
                "AssertionError": [
                    403,
                    644
                ],
                "current_column": [
                    411,
                    429,
                    430
                ],
                "ndim": [
                    416,
                    417,
                    514,
                    420,
                    508,
                    511
                ],
                "sample._constructor": [
                    436
                ],
                "self.objs.append": [
                    438
                ],
                "self.axis": [
                    513,
                    485,
                    459,
                    556,
                    505,
                    496,
                    528,
                    441
                ],
                "self.keys": [
                    554,
                    562,
                    533,
                    566,
                    442
                ],
                "self.names": [
                    554,
                    443,
                    566
                ],
                "self.levels": [
                    444,
                    566
                ],
                "self.sort": [
                    520,
                    445
                ],
                "self.ignore_index": [
                    530,
                    558,
                    447
                ],
                "self.verify_integrity": [
                    448,
                    574
                ],
                "self.copy": [
                    496,
                    449,
                    498
                ],
                "self.new_axes": [
                    451,
                    484,
                    463,
                    496,
                    473
                ],
                "self._get_new_axes": [
                    451
                ],
                "com.consensus_name_attr": [
                    460
                ],
                "mgr": [
                    489,
                    466,
                    482,
                    462
                ],
                "_data.concat": [
                    462
                ],
                "_data": [
                    462
                ],
                "x._data": [
                    556,
                    463
                ],
                "x": [
                    544,
                    605,
                    556,
                    463,
                    529,
                    596,
                    537,
                    538,
                    541,
                    543
                ],
                "cons": [
                    465,
                    466,
                    501,
                    502,
                    471,
                    474
                ],
                "_constructor": [
                    465,
                    501
                ],
                "__finalize__": [
                    466,
                    502
                ],
                "data": [
                    474,
                    470
                ],
                "range": [
                    514,
                    470
                ],
                "index": [
                    473,
                    474,
                    625,
                    615
                ],
                "columns": [
                    473,
                    475
                ],
                "df": [
                    474,
                    475,
                    476
                ],
                "df.columns": [
                    475
                ],
                "df.__finalize__": [
                    476
                ],
                "mgrs_indexers": [
                    480,
                    496,
                    493
                ],
                "obj._data": [
                    482,
                    493
                ],
                "indexers": [
                    483,
                    493,
                    491
                ],
                "ax": [
                    489,
                    491,
                    484,
                    485
                ],
                "new_labels": [
                    490,
                    491,
                    484
                ],
                "enumerate": [
                    537,
                    484
                ],
                "obj_labels": [
                    489,
                    490,
                    491
                ],
                "mgr.axes": [
                    489
                ],
                "new_labels.equals": [
                    490
                ],
                "obj_labels.reindex": [
                    491
                ],
                "mgrs_indexers.append": [
                    493
                ],
                "new_data": [
                    499,
                    502,
                    495
                ],
                "concatenate_block_managers": [
                    495
                ],
                "new_data._consolidate_inplace": [
                    499
                ],
                "int": [
                    504,
                    517
                ],
                "self._get_result_dim": [
                    511
                ],
                "i": [
                    544,
                    513,
                    514,
                    547,
                    518,
                    617,
                    559,
                    625,
                    537
                ],
                "self._get_concat_axis": [
                    513
                ],
                "self._get_comb_axis": [
                    513
                ],
                "List": [
                    510,
                    534
                ],
                "data_axis": [
                    520,
                    518
                ],
                "_get_block_manager_axis": [
                    518
                ],
                "get_objs_combined_axis": [
                    519
                ],
                "indexes": [
                    643,
                    581,
                    615,
                    649,
                    556,
                    559,
                    655,
                    529,
                    657,
                    563,
                    628,
                    566,
                    607
                ],
                "x.index": [
                    529
                ],
                "idx": [
                    643,
                    559,
                    560,
                    531,
                    532
                ],
                "ibase.default_index": [
                    552,
                    531,
                    559
                ],
                "ibase": [
                    552,
                    531,
                    559
                ],
                "num": [
                    547,
                    548,
                    535
                ],
                "has_names": [
                    536,
                    545,
                    549
                ],
                "x.name": [
                    544,
                    543
                ],
                "set_names": [
                    554
                ],
                "ensure_index": [
                    669,
                    554,
                    596,
                    603,
                    605
                ],
                "x._data.axes": [
                    556
                ],
                "concat_axis": [
                    569,
                    563,
                    565,
                    571
                ],
                "_concat_indexes": [
                    563,
                    628
                ],
                "_make_concat_multiindex": [
                    565
                ],
                "self._maybe_check_integrity": [
                    569
                ],
                "concat_index.is_unique": [
                    575
                ],
                "concat_index": [
                    576,
                    628,
                    631,
                    632,
                    633,
                    635,
                    575
                ],
                "overlap": [
                    576,
                    577
                ],
                "unique": [
                    576
                ],
                "concat_index.duplicated": [
                    576
                ],
                "append": [
                    581
                ],
                "tuple": [
                    586
                ],
                "zipped": [
                    613,
                    589,
                    591,
                    594,
                    598,
                    668
                ],
                "_": [
                    594
                ],
                "factorize_from_iterables": [
                    594
                ],
                "all_indexes_same": [
                    607
                ],
                "codes_list": [
                    608,
                    652,
                    626,
                    633,
                    637
                ],
                "hlevel": [
                    676,
                    613,
                    615,
                    668,
                    669,
                    670
                ],
                "level": [
                    613,
                    617,
                    621,
                    668,
                    670
                ],
                "to_concat": [
                    625,
                    626,
                    614
                ],
                "key": [
                    617,
                    621,
                    615
                ],
                "level.get_loc": [
                    617
                ],
                "KeyError": [
                    618
                ],
                "to_concat.append": [
                    625
                ],
                "np.repeat": [
                    680,
                    625
                ],
                "codes_list.append": [
                    626,
                    637
                ],
                "np.concatenate": [
                    626
                ],
                "MultiIndex": [
                    584,
                    682,
                    651,
                    692,
                    631
                ],
                "levels.extend": [
                    632
                ],
                "concat_index.levels": [
                    632
                ],
                "codes_list.extend": [
                    633
                ],
                "concat_index.codes": [
                    633
                ],
                "codes": [
                    635,
                    637
                ],
                "categories": [
                    635,
                    636
                ],
                "factorize_from_iterable": [
                    635
                ],
                "levels.append": [
                    636
                ],
                "idx.nlevels": [
                    643
                ],
                "get_consensus_names": [
                    649
                ],
                "new_index": [
                    682,
                    683,
                    684,
                    686,
                    655,
                    656,
                    690
                ],
                "n": [
                    656,
                    680,
                    687
                ],
                "kpieces": [
                    657,
                    684,
                    687
                ],
                "new_names": [
                    689,
                    690,
                    660,
                    693
                ],
                "new_levels": [
                    683,
                    686,
                    689,
                    661,
                    693
                ],
                "new_codes": [
                    680,
                    684,
                    687,
                    693,
                    664
                ],
                "mapped": [
                    672,
                    670,
                    680
                ],
                "level.get_indexer": [
                    670
                ],
                "mask": [
                    672,
                    673,
                    676
                ],
                "mask.any": [
                    673
                ],
                "new_codes.append": [
                    680,
                    687
                ],
                "new_levels.extend": [
                    683
                ],
                "new_index.levels": [
                    683
                ],
                "new_codes.extend": [
                    684
                ],
                "np.tile": [
                    684,
                    687
                ],
                "lab": [
                    684
                ],
                "new_index.codes": [
                    684
                ],
                "new_levels.append": [
                    686
                ],
                "np.arange": [
                    687
                ],
                "new_names.extend": [
                    690
                ],
                "new_index.names": [
                    690
                ]
            },
            "filtered_variables_in_file": {
                "Union": [
                    33,
                    66,
                    49
                ],
                "Iterable": [
                    33,
                    50,
                    67
                ],
                "Mapping": [
                    33,
                    50,
                    67
                ],
                "Optional": [
                    33,
                    50,
                    67,
                    534
                ],
                "Hashable": [
                    33,
                    50,
                    67,
                    534
                ],
                "overload": [
                    47,
                    31
                ],
                "FrameOrSeriesUnion": [
                    50,
                    67,
                    61,
                    78
                ],
                "op": [
                    284,
                    271
                ],
                "_Concatenator": [
                    271
                ],
                "objs": [
                    384,
                    387,
                    388,
                    272,
                    413,
                    414,
                    305,
                    308,
                    320,
                    322,
                    323,
                    325,
                    327,
                    331,
                    336,
                    341,
                    345,
                    350,
                    368,
                    377,
                    383
                ],
                "axis": [
                    392,
                    394,
                    399,
                    273,
                    402,
                    434,
                    405,
                    441
                ],
                "ignore_index": [
                    274,
                    428,
                    447
                ],
                "join": [
                    313,
                    275,
                    311
                ],
                "keys": [
                    321,
                    322,
                    323,
                    603,
                    330,
                    586,
                    589,
                    336,
                    276,
                    342,
                    343,
                    598,
                    442,
                    443,
                    381
                ],
                "levels": [
                    636,
                    668,
                    605,
                    613,
                    586,
                    587,
                    652,
                    593,
                    594,
                    596,
                    277,
                    661,
                    632,
                    602,
                    603,
                    444,
                    381,
                    639
                ],
                "names": [
                    544,
                    640,
                    547,
                    550,
                    599,
                    649,
                    652,
                    590,
                    591,
                    660,
                    278,
                    534,
                    600,
                    443,
                    381,
                    639
                ],
                "verify_integrity": [
                    448,
                    279
                ],
                "copy": [
                    280,
                    449
                ],
                "sort": [
                    281,
                    445
                ],
                "op.get_result": [
                    284
                ],
                "NDFrame": [
                    305
                ],
                "self.intersect": [
                    312,
                    520,
                    314,
                    381
                ],
                "self": [
                    513,
                    388,
                    518,
                    520,
                    397,
                    398,
                    527,
                    528,
                    401,
                    529,
                    530,
                    531,
                    533,
                    534,
                    537,
                    413,
                    552,
                    554,
                    556,
                    558,
                    434,
                    562,
                    438,
                    566,
                    312,
                    441,
                    442,
                    314,
                    443,
                    444,
                    445,
                    447,
                    448,
                    449,
                    569,
                    451,
                    574,
                    456,
                    459,
                    460,
                    462,
                    463,
                    465,
                    466,
                    470,
                    473,
                    476,
                    481,
                    484,
                    485,
                    496,
                    498,
                    501,
                    502,
                    505,
                    508,
                    381,
                    511
                ],
                "objs.keys": [
                    322
                ],
                "k": [
                    336,
                    339,
                    323
                ],
                "com.not_none": [
                    331
                ],
                "com": [
                    331,
                    460
                ],
                "clean_keys": [
                    339,
                    334,
                    343
                ],
                "clean_objs": [
                    340,
                    341,
                    335
                ],
                "v": [
                    336,
                    337,
                    340
                ],
                "clean_keys.append": [
                    339
                ],
                "clean_objs.append": [
                    340
                ],
                "name": [
                    427,
                    428,
                    429,
                    460,
                    466,
                    435,
                    436,
                    342,
                    343
                ],
                "Index": [
                    580,
                    517,
                    550,
                    523,
                    343,
                    573,
                    510
                ],
                "ndims": [
                    360,
                    366,
                    367,
                    410,
                    349
                ],
                "obj": [
                    416,
                    481,
                    354,
                    414,
                    482,
                    359,
                    360,
                    427,
                    493,
                    368,
                    369,
                    370,
                    436,
                    438,
                    377,
                    350,
                    351
                ],
                "Series": [
                    391,
                    401,
                    377,
                    538,
                    351
                ],
                "DataFrame": [
                    392,
                    471,
                    397,
                    351
                ],
                "msg": [
                    352,
                    356
                ],
                "obj._consolidate": [
                    359
                ],
                "ndims.add": [
                    360
                ],
                "obj.ndim": [
                    360,
                    369,
                    416
                ],
                "sample": [
                    384,
                    386,
                    387,
                    391,
                    394,
                    365,
                    397,
                    401,
                    370,
                    402,
                    436,
                    405,
                    412
                ],
                "max_ndim": [
                    417,
                    420,
                    367,
                    369,
                    412
                ],
                "np.sum": [
                    369
                ],
                "np": [
                    680,
                    684,
                    687,
                    369,
                    626,
                    625
                ],
                "obj.shape": [
                    369,
                    377
                ],
                "non_empties": [
                    376,
                    380,
                    383
                ],
                "self.objs": [
                    388,
                    518,
                    520,
                    529,
                    531,
                    534,
                    537,
                    413,
                    552,
                    556,
                    438,
                    460,
                    462,
                    463,
                    465,
                    470,
                    481,
                    501,
                    508
                ],
                "DataFrame._get_axis_number": [
                    392
                ],
                "sample._get_axis_number": [
                    394
                ],
                "self._is_frame": [
                    434,
                    397,
                    398
                ],
                "self._is_series": [
                    456,
                    401,
                    505,
                    527
                ],
                "sample.ndim": [
                    402,
                    412,
                    405
                ],
                "current_column": [
                    411,
                    429,
                    430
                ],
                "ndim": [
                    416,
                    417,
                    514,
                    420,
                    508,
                    511
                ],
                "sample._constructor": [
                    436
                ],
                "self.objs.append": [
                    438
                ],
                "self.axis": [
                    513,
                    485,
                    459,
                    556,
                    505,
                    496,
                    528,
                    441
                ],
                "self.keys": [
                    554,
                    562,
                    533,
                    566,
                    442
                ],
                "self.names": [
                    554,
                    443,
                    566
                ],
                "self.levels": [
                    444,
                    566
                ],
                "self.sort": [
                    520,
                    445
                ],
                "self.ignore_index": [
                    530,
                    558,
                    447
                ],
                "self.verify_integrity": [
                    448,
                    574
                ],
                "self.copy": [
                    496,
                    449,
                    498
                ],
                "self.new_axes": [
                    451,
                    484,
                    463,
                    496,
                    473
                ],
                "self._get_new_axes": [
                    451
                ],
                "com.consensus_name_attr": [
                    460
                ],
                "mgr": [
                    489,
                    466,
                    482,
                    462
                ],
                "_data.concat": [
                    462
                ],
                "_data": [
                    462
                ],
                "x._data": [
                    556,
                    463
                ],
                "x": [
                    544,
                    605,
                    556,
                    463,
                    529,
                    596,
                    537,
                    538,
                    541,
                    543
                ],
                "cons": [
                    465,
                    466,
                    501,
                    502,
                    471,
                    474
                ],
                "_constructor": [
                    465,
                    501
                ],
                "__finalize__": [
                    466,
                    502
                ],
                "data": [
                    474,
                    470
                ],
                "index": [
                    473,
                    474,
                    625,
                    615
                ],
                "columns": [
                    473,
                    475
                ],
                "df": [
                    474,
                    475,
                    476
                ],
                "df.columns": [
                    475
                ],
                "df.__finalize__": [
                    476
                ],
                "mgrs_indexers": [
                    480,
                    496,
                    493
                ],
                "obj._data": [
                    482,
                    493
                ],
                "indexers": [
                    483,
                    493,
                    491
                ],
                "ax": [
                    489,
                    491,
                    484,
                    485
                ],
                "new_labels": [
                    490,
                    491,
                    484
                ],
                "obj_labels": [
                    489,
                    490,
                    491
                ],
                "mgr.axes": [
                    489
                ],
                "new_labels.equals": [
                    490
                ],
                "obj_labels.reindex": [
                    491
                ],
                "mgrs_indexers.append": [
                    493
                ],
                "new_data": [
                    499,
                    502,
                    495
                ],
                "concatenate_block_managers": [
                    495
                ],
                "new_data._consolidate_inplace": [
                    499
                ],
                "self._get_result_dim": [
                    511
                ],
                "i": [
                    544,
                    513,
                    514,
                    547,
                    518,
                    617,
                    559,
                    625,
                    537
                ],
                "self._get_concat_axis": [
                    513
                ],
                "self._get_comb_axis": [
                    513
                ],
                "List": [
                    510,
                    534
                ],
                "data_axis": [
                    520,
                    518
                ],
                "_get_block_manager_axis": [
                    518
                ],
                "get_objs_combined_axis": [
                    519
                ],
                "indexes": [
                    643,
                    581,
                    615,
                    649,
                    556,
                    559,
                    655,
                    529,
                    657,
                    563,
                    628,
                    566,
                    607
                ],
                "x.index": [
                    529
                ],
                "idx": [
                    643,
                    559,
                    560,
                    531,
                    532
                ],
                "ibase.default_index": [
                    552,
                    531,
                    559
                ],
                "ibase": [
                    552,
                    531,
                    559
                ],
                "num": [
                    547,
                    548,
                    535
                ],
                "has_names": [
                    536,
                    545,
                    549
                ],
                "x.name": [
                    544,
                    543
                ],
                "set_names": [
                    554
                ],
                "ensure_index": [
                    669,
                    554,
                    596,
                    603,
                    605
                ],
                "x._data.axes": [
                    556
                ],
                "concat_axis": [
                    569,
                    563,
                    565,
                    571
                ],
                "_concat_indexes": [
                    563,
                    628
                ],
                "_make_concat_multiindex": [
                    565
                ],
                "self._maybe_check_integrity": [
                    569
                ],
                "concat_index.is_unique": [
                    575
                ],
                "concat_index": [
                    576,
                    628,
                    631,
                    632,
                    633,
                    635,
                    575
                ],
                "overlap": [
                    576,
                    577
                ],
                "unique": [
                    576
                ],
                "concat_index.duplicated": [
                    576
                ],
                "append": [
                    581
                ],
                "zipped": [
                    613,
                    589,
                    591,
                    594,
                    598,
                    668
                ],
                "_": [
                    594
                ],
                "factorize_from_iterables": [
                    594
                ],
                "all_indexes_same": [
                    607
                ],
                "codes_list": [
                    608,
                    652,
                    626,
                    633,
                    637
                ],
                "hlevel": [
                    676,
                    613,
                    615,
                    668,
                    669,
                    670
                ],
                "level": [
                    613,
                    617,
                    621,
                    668,
                    670
                ],
                "to_concat": [
                    625,
                    626,
                    614
                ],
                "key": [
                    617,
                    621,
                    615
                ],
                "level.get_loc": [
                    617
                ],
                "to_concat.append": [
                    625
                ],
                "np.repeat": [
                    680,
                    625
                ],
                "codes_list.append": [
                    626,
                    637
                ],
                "np.concatenate": [
                    626
                ],
                "MultiIndex": [
                    584,
                    682,
                    651,
                    692,
                    631
                ],
                "levels.extend": [
                    632
                ],
                "concat_index.levels": [
                    632
                ],
                "codes_list.extend": [
                    633
                ],
                "concat_index.codes": [
                    633
                ],
                "codes": [
                    635,
                    637
                ],
                "categories": [
                    635,
                    636
                ],
                "factorize_from_iterable": [
                    635
                ],
                "levels.append": [
                    636
                ],
                "idx.nlevels": [
                    643
                ],
                "get_consensus_names": [
                    649
                ],
                "new_index": [
                    682,
                    683,
                    684,
                    686,
                    655,
                    656,
                    690
                ],
                "n": [
                    656,
                    680,
                    687
                ],
                "kpieces": [
                    657,
                    684,
                    687
                ],
                "new_names": [
                    689,
                    690,
                    660,
                    693
                ],
                "new_levels": [
                    683,
                    686,
                    689,
                    661,
                    693
                ],
                "new_codes": [
                    680,
                    684,
                    687,
                    693,
                    664
                ],
                "mapped": [
                    672,
                    670,
                    680
                ],
                "level.get_indexer": [
                    670
                ],
                "mask": [
                    672,
                    673,
                    676
                ],
                "mask.any": [
                    673
                ],
                "new_codes.append": [
                    680,
                    687
                ],
                "new_levels.extend": [
                    683
                ],
                "new_index.levels": [
                    683
                ],
                "new_codes.extend": [
                    684
                ],
                "np.tile": [
                    684,
                    687
                ],
                "lab": [
                    684
                ],
                "new_index.codes": [
                    684
                ],
                "new_levels.append": [
                    686
                ],
                "np.arange": [
                    687
                ],
                "new_names.extend": [
                    690
                ],
                "new_index.names": [
                    690
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/reshape/test_concat.py",
                "test_function": "test_concat_copy_index",
                "test_function_code": "@pytest.mark.parametrize(\"test_series\", [True, False])\ndef test_concat_copy_index(test_series, axis):\n    # GH 29879\n    if test_series:\n        ser = Series([1, 2])\n        comb = concat([ser, ser], axis=axis, copy=True)\n        assert comb.index is not ser.index\n    else:\n        df = DataFrame([[1, 2], [3, 4]], columns=[\"a\", \"b\"])\n        comb = concat([df, df], axis=axis, copy=True)\n        assert comb.index is not df.index\n        assert comb.columns is not df.columns",
                "test_error": "AssertionError: assert Index(['a', 'b'], dtype='object') is not Index(['a', 'b'], dtype='object')  +  where Index(['a', 'b'], dtype='object') =    a  b\\n0  1  2\\n1  3  4\\n0  1  2\\n1  3  4.columns  +  and   Index(['a', 'b'], dtype='object') =    a  b\\n0  1  2\\n1  3  4.columns",
                "full_test_error": "test_series = False, axis = 0\n\n    @pytest.mark.parametrize(\"test_series\", [True, False])\n    def test_concat_copy_index(test_series, axis):\n        # GH 29879\n        if test_series:\n            ser = Series([1, 2])\n            comb = concat([ser, ser], axis=axis, copy=True)\n            assert comb.index is not ser.index\n        else:\n            df = DataFrame([[1, 2], [3, 4]], columns=[\"a\", \"b\"])\n            comb = concat([df, df], axis=axis, copy=True)\n            assert comb.index is not df.index\n>           assert comb.columns is not df.columns\nE           AssertionError: assert Index(['a', 'b'], dtype='object') is not Index(['a', 'b'], dtype='object')\nE            +  where Index(['a', 'b'], dtype='object') =    a  b\\n0  1  2\\n1  3  4\\n0  1  2\\n1  3  4.columns\nE            +  and   Index(['a', 'b'], dtype='object') =    a  b\\n0  1  2\\n1  3  4.columns\n\npandas/tests/reshape/test_concat.py:2766: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('test_series', [True, False])"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/reshape/test_concat.py",
                "test_function": "test_concat_copy_index",
                "test_function_code": "@pytest.mark.parametrize(\"test_series\", [True, False])\ndef test_concat_copy_index(test_series, axis):\n    # GH 29879\n    if test_series:\n        ser = Series([1, 2])\n        comb = concat([ser, ser], axis=axis, copy=True)\n        assert comb.index is not ser.index\n    else:\n        df = DataFrame([[1, 2], [3, 4]], columns=[\"a\", \"b\"])\n        comb = concat([df, df], axis=axis, copy=True)\n        assert comb.index is not df.index\n        assert comb.columns is not df.columns",
                "test_error": "assert RangeIndex(start=0, stop=2, step=1) is not RangeIndex(start=0, stop=2, step=1)  +  where RangeIndex(start=0, stop=2, step=1) =    0  1\\n0  1  1\\n1  2  2.index  +  and   RangeIndex(start=0, stop=2, step=1) = 0    1\\n1    2\\ndtype: int64.index",
                "full_test_error": "test_series = True, axis = 1\n\n    @pytest.mark.parametrize(\"test_series\", [True, False])\n    def test_concat_copy_index(test_series, axis):\n        # GH 29879\n        if test_series:\n            ser = Series([1, 2])\n            comb = concat([ser, ser], axis=axis, copy=True)\n>           assert comb.index is not ser.index\nE           assert RangeIndex(start=0, stop=2, step=1) is not RangeIndex(start=0, stop=2, step=1)\nE            +  where RangeIndex(start=0, stop=2, step=1) =    0  1\\n0  1  1\\n1  2  2.index\nE            +  and   RangeIndex(start=0, stop=2, step=1) = 0    1\\n1    2\\ndtype: int64.index\n\npandas/tests/reshape/test_concat.py:2761: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('test_series', [True, False])"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/reshape/test_concat.py",
                "test_function": "test_concat_copy_index",
                "test_function_code": "@pytest.mark.parametrize(\"test_series\", [True, False])\ndef test_concat_copy_index(test_series, axis):\n    # GH 29879\n    if test_series:\n        ser = Series([1, 2])\n        comb = concat([ser, ser], axis=axis, copy=True)\n        assert comb.index is not ser.index\n    else:\n        df = DataFrame([[1, 2], [3, 4]], columns=[\"a\", \"b\"])\n        comb = concat([df, df], axis=axis, copy=True)\n        assert comb.index is not df.index\n        assert comb.columns is not df.columns",
                "test_error": "assert RangeIndex(start=0, stop=2, step=1) is not RangeIndex(start=0, stop=2, step=1)  +  where RangeIndex(start=0, stop=2, step=1) =    a  b  a  b\\n0  1  2  1  2\\n1  3  4  3  4.index  +  and   RangeIndex(start=0, stop=2, step=1) =    a  b\\n0  1  2\\n1  3  4.index",
                "full_test_error": "test_series = False, axis = 1\n\n    @pytest.mark.parametrize(\"test_series\", [True, False])\n    def test_concat_copy_index(test_series, axis):\n        # GH 29879\n        if test_series:\n            ser = Series([1, 2])\n            comb = concat([ser, ser], axis=axis, copy=True)\n            assert comb.index is not ser.index\n        else:\n            df = DataFrame([[1, 2], [3, 4]], columns=[\"a\", \"b\"])\n            comb = concat([df, df], axis=axis, copy=True)\n>           assert comb.index is not df.index\nE           assert RangeIndex(start=0, stop=2, step=1) is not RangeIndex(start=0, stop=2, step=1)\nE            +  where RangeIndex(start=0, stop=2, step=1) =    a  b  a  b\\n0  1  2  1  2\\n1  3  4  3  4.index\nE            +  and   RangeIndex(start=0, stop=2, step=1) =    a  b\\n0  1  2\\n1  3  4.index\n\npandas/tests/reshape/test_concat.py:2765: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('test_series', [True, False])"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/reshape/test_concat.py",
                "test_function": "test_concat_copy_index",
                "test_function_code": "@pytest.mark.parametrize(\"test_series\", [True, False])\ndef test_concat_copy_index(test_series, axis):\n    # GH 29879\n    if test_series:\n        ser = Series([1, 2])\n        comb = concat([ser, ser], axis=axis, copy=True)\n        assert comb.index is not ser.index\n    else:\n        df = DataFrame([[1, 2], [3, 4]], columns=[\"a\", \"b\"])\n        comb = concat([df, df], axis=axis, copy=True)\n        assert comb.index is not df.index\n        assert comb.columns is not df.columns",
                "test_error": "AssertionError: assert Index(['a', 'b'], dtype='object') is not Index(['a', 'b'], dtype='object')  +  where Index(['a', 'b'], dtype='object') =    a  b\\n0  1  2\\n1  3  4\\n0  1  2\\n1  3  4.columns  +  and   Index(['a', 'b'], dtype='object') =    a  b\\n0  1  2\\n1  3  4.columns",
                "full_test_error": "test_series = False, axis = 'index'\n\n    @pytest.mark.parametrize(\"test_series\", [True, False])\n    def test_concat_copy_index(test_series, axis):\n        # GH 29879\n        if test_series:\n            ser = Series([1, 2])\n            comb = concat([ser, ser], axis=axis, copy=True)\n            assert comb.index is not ser.index\n        else:\n            df = DataFrame([[1, 2], [3, 4]], columns=[\"a\", \"b\"])\n            comb = concat([df, df], axis=axis, copy=True)\n            assert comb.index is not df.index\n>           assert comb.columns is not df.columns\nE           AssertionError: assert Index(['a', 'b'], dtype='object') is not Index(['a', 'b'], dtype='object')\nE            +  where Index(['a', 'b'], dtype='object') =    a  b\\n0  1  2\\n1  3  4\\n0  1  2\\n1  3  4.columns\nE            +  and   Index(['a', 'b'], dtype='object') =    a  b\\n0  1  2\\n1  3  4.columns\n\npandas/tests/reshape/test_concat.py:2766: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('test_series', [True, False])"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/reshape/test_concat.py",
                "test_function": "test_concat_copy_index",
                "test_function_code": "@pytest.mark.parametrize(\"test_series\", [True, False])\ndef test_concat_copy_index(test_series, axis):\n    # GH 29879\n    if test_series:\n        ser = Series([1, 2])\n        comb = concat([ser, ser], axis=axis, copy=True)\n        assert comb.index is not ser.index\n    else:\n        df = DataFrame([[1, 2], [3, 4]], columns=[\"a\", \"b\"])\n        comb = concat([df, df], axis=axis, copy=True)\n        assert comb.index is not df.index\n        assert comb.columns is not df.columns",
                "test_error": "assert RangeIndex(start=0, stop=2, step=1) is not RangeIndex(start=0, stop=2, step=1)  +  where RangeIndex(start=0, stop=2, step=1) =    0  1\\n0  1  1\\n1  2  2.index  +  and   RangeIndex(start=0, stop=2, step=1) = 0    1\\n1    2\\ndtype: int64.index",
                "full_test_error": "test_series = True, axis = 'columns'\n\n    @pytest.mark.parametrize(\"test_series\", [True, False])\n    def test_concat_copy_index(test_series, axis):\n        # GH 29879\n        if test_series:\n            ser = Series([1, 2])\n            comb = concat([ser, ser], axis=axis, copy=True)\n>           assert comb.index is not ser.index\nE           assert RangeIndex(start=0, stop=2, step=1) is not RangeIndex(start=0, stop=2, step=1)\nE            +  where RangeIndex(start=0, stop=2, step=1) =    0  1\\n0  1  1\\n1  2  2.index\nE            +  and   RangeIndex(start=0, stop=2, step=1) = 0    1\\n1    2\\ndtype: int64.index\n\npandas/tests/reshape/test_concat.py:2761: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('test_series', [True, False])"
                ]
            },
            {
                "test_path": "/Users/jerry/.abw/BugsInPy_Dir/BugsInPy_Cloned_Repos/pandas/pandas/tests/reshape/test_concat.py",
                "test_function": "test_concat_copy_index",
                "test_function_code": "@pytest.mark.parametrize(\"test_series\", [True, False])\ndef test_concat_copy_index(test_series, axis):\n    # GH 29879\n    if test_series:\n        ser = Series([1, 2])\n        comb = concat([ser, ser], axis=axis, copy=True)\n        assert comb.index is not ser.index\n    else:\n        df = DataFrame([[1, 2], [3, 4]], columns=[\"a\", \"b\"])\n        comb = concat([df, df], axis=axis, copy=True)\n        assert comb.index is not df.index\n        assert comb.columns is not df.columns",
                "test_error": "assert RangeIndex(start=0, stop=2, step=1) is not RangeIndex(start=0, stop=2, step=1)  +  where RangeIndex(start=0, stop=2, step=1) =    a  b  a  b\\n0  1  2  1  2\\n1  3  4  3  4.index  +  and   RangeIndex(start=0, stop=2, step=1) =    a  b\\n0  1  2\\n1  3  4.index",
                "full_test_error": "test_series = False, axis = 'columns'\n\n    @pytest.mark.parametrize(\"test_series\", [True, False])\n    def test_concat_copy_index(test_series, axis):\n        # GH 29879\n        if test_series:\n            ser = Series([1, 2])\n            comb = concat([ser, ser], axis=axis, copy=True)\n            assert comb.index is not ser.index\n        else:\n            df = DataFrame([[1, 2], [3, 4]], columns=[\"a\", \"b\"])\n            comb = concat([df, df], axis=axis, copy=True)\n>           assert comb.index is not df.index\nE           assert RangeIndex(start=0, stop=2, step=1) is not RangeIndex(start=0, stop=2, step=1)\nE            +  where RangeIndex(start=0, stop=2, step=1) =    a  b  a  b\\n0  1  2  1  2\\n1  3  4  3  4.index\nE            +  and   RangeIndex(start=0, stop=2, step=1) =    a  b\\n0  1  2\\n1  3  4.index\n\npandas/tests/reshape/test_concat.py:2765: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('test_series', [True, False])"
                ]
            }
        ]
    }
}