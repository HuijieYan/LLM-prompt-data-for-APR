{
    "pandas": [
        {
            "bugID": 145,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 463,
            "file_name": "pandas/core/ops/__init__.py",
            "replace_code": "def dispatch_to_series(left, right, func, str_rep=None, axis=None):\n    import numpy as np\n    import pandas.core.computation.expressions as expressions\n    from pandas.api.types import is_scalar, is_scalar_nan\n    \"\"\"\n    Evaluate the frame operation func(left, right) by evaluating\n    column-by-column, dispatching to the Series implementation.\n    \n    Parameters\n    ----------\n    left : DataFrame\n    right : scalar or DataFrame\n    func : arithmetic or comparison operator\n    str_rep : str or None, default None\n    axis : {None, 0, 1, \"index\", \"columns\"}\n    \n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    # Note: we use iloc to access columns for compat with cases\n    #       with non-unique columns.\n    import numpy as np\n    import pandas.core.computation.expressions as expressions\n    from pandas.api.types import is_scalar, is_scalar_nan\n    if axis not in (None, \"columns\", 1, \"index\", 0):\n        raise NotImplementedError()\n    \n    dtype_match = (isinstance(right, ABCDataFrame) or\n                   (isinstance(right, ABCSeries) and\n                    axis in [None, 1, \"index\"]))\n    \n    right = lib.item_from_zerodim(right)\n    if is_scalar(right) or np.ndim(right) == 0:\n    \n        def column_op(a, b):\n            return {i: func(a.iloc[:, i], b) for i in range(len(a.columns))}\n    \n    elif dtype_match:\n        if isinstance(right, ABCDataFrame):\n            assert right._indexed_same(left)\n    \n        def column_op(a, b):\n            if dtype_match:\n                # We only get here if called via left._combine_match_index,\n                # in which case we specifically want to operate row-by-row\n                assert right.index.equals(left.index) or len(right) == 0\n            return {i: func(a.iloc[:, i], b.iloc[:, i]) for i in range(len(a.columns))}\n    else:\n        # All other cases\n        raise NotImplementedError(right)\n    \n    new_data = expressions.evaluate(column_op, str_rep, left, right, use_numexpr=True)\n    return new_data"
        }
    ]
}