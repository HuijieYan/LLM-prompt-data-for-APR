{
    "pandas": [
        {
            "bugID": 21,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 915,
            "file_name": "pandas/core/series.py",
            "replace_code": "def _get_with(self, key):\n    # other: fancy integer or otherwise\n\n    if isinstance(key, slice):\n        # _convert_slice_indexer to determine if this slice is positional\n        #  or label based, and if the latter, convert to positional\n        if getattr(key, \"dtype\", None) is not None:\n            key = key\n        slobj = self.index._convert_slice_indexer(key, kind=\"getitem\")\n        return self._slice(slobj)\n    elif isinstance(key, ABCDataFrame):\n        raise TypeError(\n            \"Indexing a Series with DataFrame is not \"\n            \"supported, use the appropriate DataFrame column\"\n        )\n    elif isinstance(key, tuple):\n        return self._get_values_tuple(key)\n    elif isinstance(key, str) or not is_list_like(key):\n        # e.g. scalars that aren't recognized by lib.is_scalar, GH#32684\n        return self.loc[key]\n    \n    key_arr = np.array(key, dtype=object)\n    # if key_arr doesn't have some sort of numpy dtype, we are not\n    #  deduplicating\n    if getattr(key_arr.dtype, \"kind\", None) == \"O\":\n        key_arr = key_arr.tolist()\n    \n    key_type = lib.infer_dtype(key_arr)\n    \n    # Note: The key_type == \"boolean\" case should be caught by the\n    #  com.is_bool_indexer check in __getitem__\n    if key_type == \"integer\":\n        # We need to decide whether to treat this as a positional indexer\n        #  (i.e. self.iloc) or label-based (i.e. self.loc)\n        if not self.index._should_fallback_to_positional():\n            return self.loc[key]\n        else:\n            return self.iloc[key]\n    \n    if isinstance(key, list):\n        # handle the dup indexing case, GH#4246\n        return self.loc[key]\n    \n    return self.reindex(key)"
        }
    ]
}