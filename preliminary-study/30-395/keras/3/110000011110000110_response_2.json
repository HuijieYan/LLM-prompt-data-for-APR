{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 26,
            "file_name": "keras/models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    from tensorflow.python.util import tf_decorator\n    from tensorflow.python.keras.engine import base_layer_utils\n    from tensorflow.python.keras.engine import network\n    \"\"\"Clone a functional `Model` instance.\n    \n    Model cloning is similar to calling a model on new inputs,\n    except that it creates new layers (and thus new weights) instead\n    of sharing the weights of the existing layers.\n    \n    # Arguments\n        model: Instance of `Model`.\n        input_tensors: optional list of input tensors\n            to build the model upon. If not provided,\n            placeholders will be created.\n    \n    # Returns\n        An instance of `Model` reproducing the behavior\n        of the original model, on top of new inputs tensors,\n        using newly instantiated weights.\n    \n    # Raises\n        ValueError: in case of invalid `model` argument value.\n    \"\"\"\n    from tensorflow.python.util import tf_decorator\n    from tensorflow.python.keras.engine import base_layer_utils\n    from tensorflow.python.keras.engine import network\n    \n    if not isinstance(model, network.Network):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    if isinstance(model, tf.keras.Sequential):\n        raise ValueError('Expected `model` argument to be a functional `Model` instance, got a `Sequential` instance instead:', model)\n    \n    input_layer = model._input_layers\n    output_layer = model._output_layers\n    layers = model.layers\n    \n    clone_mapping = {} \n    cloned_layers = []\n    \n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_tensors = [tf.keras.Input(shape=layer.input.shape[1:]) for layer in input_layer]\n    else:\n        # Make sure that input tensors have the correct shape\n        input_tensors = base_layer_utils.unnest_if_single_tensor(input_tensors)\n    \n    for layer in layers:\n        # Clone the layer and add it to the cloned_layers list\n        clone = tf.keras.layers.deserialize(tf.keras.layers.serialize(layer))\n        clone._self_set_trainable(False)\n        cloned_layers.append(clone)\n        clone_mapping[id(layer)] = clone\n    \n    for layer in cloned_layers:\n        # Update the input and output tensors of the cloned layers using clone_mapping\n        if isinstance(layer, tf.keras.layers.InputLayer):\n            old_layer = layer._original_layer\n            layer._original_layer = clone_mapping[id(old_layer)]\n        if hasattr(layer, 'inbound_nodes'):\n            for i, node in enumerate(layer.inbound_nodes):\n                if isinstance(node.inbound_layers, list):\n                    node.inbound_layers = [clone_mapping[id(n)] for n in node.inbound_layers]\n                else:\n                    node.inbound_layers = clone_mapping[id(node.inbound_layers)]\n    \n    # Check that we did compute the model outputs,\n    # then instantiate a new model from inputs and outputs.\n    output_tensors = [clone_mapping[id(x)] for x in output_layer]\n    return tf.keras.models.Model(input_tensors, output_tensors, name=model.name)"
        }
    ]
}