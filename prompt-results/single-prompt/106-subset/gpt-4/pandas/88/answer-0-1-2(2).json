{
    "pandas": [
        {
            "bugID": 88,
            "start_line": 27,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def pivot_table(data,\n                values=None,\n                index=None,\n                columns=None,\n                aggfunc=\"mean\",\n                fill_value=None,\n                margins=False,\n                dropna=True,\n                margins_name=\"All\",\n                observed=False) -> \"DataFrame\":\n\n    keys = index + columns\n    values_passed = values is not None\n\n    if values_passed:\n        if is_list_like(values):\n            values_multi = True\n            values = list(values)\n        else:\n            values_multi = False\n            values = [values]\n\n        for i in values:\n            if i not in data:\n                raise KeyError(i)\n\n        to_filter = []\n        for x in keys + values:\n            try:\n                if x in data:\n                    to_filter.append(x)\n            except TypeError:\n                pass\n        if len(to_filter) < len(data.columns):\n            data = data[to_filter]\n    else:\n        values = data.columns\n        for key in keys:\n            try:\n                values = values.drop(key)\n            except (TypeError, ValueError, KeyError):\n                pass\n        values = list(values)\n\n    grouped = data.groupby(keys, observed=observed)\n    agged = grouped.agg(aggfunc)\n    if dropna and isinstance(agged, pd.DataFrame) and len(agged.columns):\n        agged = agged.dropna(how=\"all\")\n\n    table = agged\n    if table.index.nlevels > 1:\n        index_names = agged.index.names[: len(index)]\n        to_unstack = []\n        for i in range(len(index), len(keys)):\n            name = agged.index.names[i]\n            if name is None or name in index_names:\n                to_unstack.append(i)\n            else:\n                to_unstack.append(name)\n        table = agged.unstack(to_unstack)\n\n    if not dropna:\n        if table.index.nlevels > 1:\n            m = MultiIndex.from_arrays(\n                pd.core.reshape.util.cartesian_product(table.index.levels),\n                names=table.index.names)\n            table = table.reindex(m, axis=0)\n\n        if table.columns.nlevels > 1:\n            m = MultiIndex.from_arrays(\n                pd.core.reshape.util.cartesian_product(table.columns.levels),\n                names=table.columns.names)\n            table = table.reindex(m, axis=1)\n\n    if isinstance(table, pd.DataFrame):\n        table = table.sort_index(axis=1)\n\n    if fill_value is not None:\n        table = table._ensure_type(table.fillna(fill_value, downcast=\"infer\"))\n\n    if margins:\n        if dropna:\n            data = data[data.notna().all(axis=1)]\n\n        _add_margins = functools.partial(pd.core.reshape.pivot._add_margins, observed=observed)\n        table = _add_margins(\n            table,\n            data,\n            values,\n            rows=index,\n            cols=columns,\n            aggfunc=aggfunc,\n            margins_name=margins_name,\n            fill_value=fill_value,\n        )\n\n    if values_passed and not values_multi and not table.empty and isinstance(table, pd.DataFrame):\n        table = table[values[0]]\n\n    if len(index) == 0 and len(columns) > 0:\n        table = table.T\n\n    if isinstance(table, pd.DataFrame) and dropna:\n        table = table.dropna(how=\"all\", axis=1)\n\n    return table"
        }
    ]
}