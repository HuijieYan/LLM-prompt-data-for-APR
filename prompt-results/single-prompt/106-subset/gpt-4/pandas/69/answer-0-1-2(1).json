{
    "pandas": [
        {
            "bugID": 69,
            "start_line": 2110,
            "file_name": "pandas/core/indexing.py",
            "replace_code": "def _convert_key(self, key, is_setter: bool = False):\n    \"\"\"\n    Require they keys to be the same type as the index. (so we don't\n    fallback)\n    \"\"\"\n    # allow arbitrary setting\n    if is_setter:\n        return list(key)\n\n    converted_key = []\n    for ax, i in zip(self.obj.axes, key):\n        if ax.is_integer() and not is_integer(i):\n            raise ValueError(\n                \"At based indexing on an integer index \"\n                \"can only have integer indexers\"\n            )\n        elif is_integer(i) and not ax.is_integer():\n            converted_key.append(float(i))  # Convert integer keys to float since the index is float type.\n        else:\n            converted_key.append(i)\n    return tuple(converted_key)\n@Appender(IndexingMixin.at.__doc__)\nclass _AtIndexer(_ScalarAccessIndexer):\n    _takeable = False\n\n    def _convert_key(self, key, is_setter: bool = False):\n        \"\"\"\n        Require they keys to be the same type as the index. (so we don't\n        fallback)\n        \"\"\"\n        # allow arbitrary setting\n        if is_setter:\n            return list(key)\n\n        converted_key = []\n        for ax, i in zip(self.obj.axes, key):\n            if ax.is_integer() and not is_integer(i):\n                raise ValueError(\n                    \"At based indexing on an integer index \"\n                    \"can only have integer indexers\"\n                )\n            elif is_integer(i) and not ax.is_integer():\n                converted_key.append(float(i))  # Convert integer keys to float since the index is float type.\n            else:\n                converted_key.append(i)\n        return tuple(converted_key)"
        }
    ]
}