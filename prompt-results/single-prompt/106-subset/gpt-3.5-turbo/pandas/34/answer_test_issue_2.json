{
    "pandas": [
        {
            "bugID": 34,
            "used_features": [
                "test_code_blocks",
                "raised_issue_descriptions"
            ],
            "start_line": 1406,
            "file_name": "pandas/core/resample.py",
            "replace_code": "def _get_time_bins(self, ax):\n    if not isinstance(ax, pd.DatetimeIndex):\n        raise TypeError(\n            \"axis must be a DatetimeIndex, but got \"\n            f\"an instance of {type(ax).__name__}\"\n        )\n\n    if len(ax) == 0:\n        binner = labels = pd.DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n        return binner, [], labels\n\n    first, last = pd._libs.tslibs.timestamps._get_timestamp_range_edges(\n        ax.min(), ax.max(), self.freq, closed=self.closed, base=self.base\n    )\n    # GH #12037\n    # use first/last directly instead of call replace() on them\n    # because replace() will swallow the nanosecond part\n    # thus last bin maybe slightly before the end if the end contains\n    # nanosecond part and lead to `Values falls after last bin` error\n    binner = labels = pd.date_range(\n        freq=self.freq,\n        start=first,\n        end=last,\n        tz=ax.tz,\n        name=ax.name,\n        ambiguous=\"infer\",\n        nonexistent=\"shift_forward\",\n    )\n\n    ax_values = ax.asi8\n    binner, bin_edges = self._adjust_bin_edges(binner, ax_values)\n\n    # general version, knowing nothing about relative frequencies\n    bins = pd._libs.ops.interval.generate_bins_mm(\n        ax_values, bin_edges, self.closed, hasnans=ax.hasnans\n    )\n\n    if self.closed == \"right\":\n        labels = binner\n        if self.label == \"right\":\n            labels = labels[1:]\n    elif self.label == \"right\":\n        labels = labels[1:]\n\n    if ax.hasnans:\n        binner = binner.insert(0, NaT)\n        labels = labels.insert(0, NaT)\n\n    # if we end up with more labels than bins\n    # adjust the labels\n    # GH4076\n    if len(bins) < len(labels):\n        labels = labels[: len(bins)]\n\n    return binner, bins, labels\n\ndef test_downsample_dst_at_midnight():\n    # GH 25758\n    start = pd.Timestamp(2018, 11, 3, 12)\n    end = pd.Timestamp(2018, 11, 5, 12)\n    index = pd.date_range(start, end, freq=\"1H\")\n    index = index.tz_localize(\"UTC\").tz_convert(\"America/Havana\")\n    data = list(range(len(index)))\n    dataframe = pd.DataFrame(data, index=index)\n    result = dataframe.groupby(pd.Grouper(freq=\"1D\", ambiguous='infer', base=to_offset('H'))).mean()\n    expected = pd.DataFrame(\n        [7.5, 28.0, 44.5],\n        index=pd.date_range(\"2018-11-03\", periods=3).tz_localize(\n            \"America/Havana\", ambiguous='infer'\n        ),\n    )\n    pd.testing.assert_frame_equal(result, expected)"
        }
    ]
}