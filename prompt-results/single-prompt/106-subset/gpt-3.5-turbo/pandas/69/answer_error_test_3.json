{
    "pandas": [
        {
            "bugID": 69,
            "used_features": [
                "error_message",
                "test_code_blocks"
            ],
            "start_line": 2110,
            "file_name": "pandas/core/indexing.py",
            "replace_code": "@Appender(IndexingMixin.at.__doc__)\nclass _AtIndexer(_ScalarAccessIndexer):\n    _takeable = False\n\n    def _convert_key(self, key, is_setter: bool = False):\n        \"\"\"\n        Require they keys to be the same type as the index. (so we don't\n        fallback)\n        \"\"\"\n        # allow arbitrary setting\n        if is_setter:\n            return list(key)\n\n        for ax, i in zip(self.obj.axes, key):\n            if ax.is_integer():\n                if not isinstance(i, int):  # Fix: Use isinstance() instead of is_integer()\n                    raise ValueError(\n                        \"At based indexing on an integer index \"\n                        \"can only have integer indexers\"\n                    )\n            else:\n                if isinstance(i, int) and not ax.holds_integer():  # Fix: Use isinstance() instead of is_integer()\n                    raise ValueError(\n                        \"At based indexing on an non-integer \"\n                        \"index can only have non-integer \"\n                        \"indexers\"\n                    )\n        return key"
        }
    ]
}