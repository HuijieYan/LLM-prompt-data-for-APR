{
    "pandas": [
        {
            "bugID": 48,
            "used_features": [
                "test_code_blocks",
                "raised_issue_descriptions"
            ],
            "start_line": 999,
            "file_name": "pandas/core/groupby/generic.py",
            "replace_code": "@pytest.mark.parametrize(\n    \"values\",\n    [\n        {\n            \"a\": [1, 1, 1, 2, 2, 2, 3, 3, 3],\n            \"b\": [1, pd.NA, 2, 1, pd.NA, 2, 1, pd.NA, 2],\n        },\n        {\"a\": [1, 1, 2, 2, 3, 3], \"b\": [1, 2, 1, 2, 1, 2]},\n    ],\n)\n@pytest.mark.parametrize(\"function\", [\"mean\", \"median\", \"var\"])\ndef test_apply_to_nullable_integer_returns_float(values, function):\n    # Convert Int64 dtype to float64\n    values['a'] = pd.Series(values['a'], dtype='float64')\n    arr = np.array([0.5] * 3, dtype=float)\n    idx = pd.Index([1, 2, 3], dtype='float64', name=\"a\")\n    expected = pd.DataFrame({\"b\": arr}, index=idx)\n\n    groups = pd.DataFrame(values).groupby(\"a\")\n\n    result = getattr(groups, function)()\n    tm.assert_frame_equal(result, expected)\n\n    result = groups.agg(function)\n    tm.assert_frame_equal(result, expected)\n\n    result = groups.agg([function])\n    expected.columns = pd.MultiIndex.from_tuples([(\"b\", function)])\n    tm.assert_frame_equal(result, expected)"
        }
    ]
}