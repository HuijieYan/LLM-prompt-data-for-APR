{
    "tqdm": [
        {
            "bugID": 4,
            "used_features": [
                "test_code_blocks"
            ],
            "start_line": 253,
            "file_name": "tqdm/_tqdm.py",
            "replace_code": "@staticmethod\ndef format_meter(n, total, elapsed, ncols=None, prefix='', ascii=False,\n                     unit='it', unit_scale=False, rate=None, bar_format=None,\n                     postfix=None, unit_divisor=1000, **extra_kwargs):\n    \"\"\"\n    Return a string-based progress bar given some parameters\n    ...\n\n    Returns\n    -------\n    out  : Formatted meter and stats, ready to display.\n    \"\"\"\n    # sanity check: total\n    if total and n > total:\n        total = None\n\n    # apply custom scale if necessary\n    if unit_scale and unit_scale not in (True, 1):\n        total *= unit_scale\n        n *= unit_scale\n        if rate:\n            rate *= unit_scale  # by default rate = 1 / self.avg_time\n        unit_scale = False\n\n    # calculate the ratio of finished iterations to total iterations\n    if total:\n        frac = n / total\n    else:\n        frac = 0.0\n\n    # calculate the percentage progress\n    percentage = frac * 100\n\n    # format the stats displayed to the left and right sides of the bar\n    l_bar = prefix + \": {0:3.0f}%|\".format(percentage)\n    r_bar = \"| {0}/{1}\".format(n, total) if total else \"\"\n    format_dict = {\n        'l_bar': l_bar,\n        'r_bar': r_bar,\n        'percentage': percentage,\n        'n': n,\n        'total': total,\n    }\n\n    # Interpolate supplied bar format with the dict\n    if bar_format:\n        return bar_format.format(**format_dict)\n    else:\n        return l_bar + r_bar"
        }
    ]
}