{
    "keras:36": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/keras_36/keras/backend/tensorflow_backend.py": {
            "buggy_functions": [
                {
                    "function_name": "separable_conv1d",
                    "function_code": "def separable_conv1d(x, depthwise_kernel, pointwise_kernel, strides=1,\n                     padding='valid', data_format=None, dilation_rate=1):\n    \"\"\"1D convolution with separable filters.\n\n    # Arguments\n        x: input tensor\n        depthwise_kernel: convolution kernel for the depthwise convolution.\n        pointwise_kernel: kernel for the 1x1 convolution.\n        strides: stride integer.\n        padding: string, `\"same\"` or `\"valid\"`.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n        dilation_rate: integer dilation rate.\n\n    # Returns\n        Output tensor.\n\n    # Raises\n        ValueError: if `data_format` is neither `channels_last` or `channels_first`.\n    \"\"\"\n    if data_format is None:\n        data_format = image_data_format()\n    if data_format not in {'channels_first', 'channels_last'}:\n        raise ValueError('Unknown data_format: ' + str(data_format))\n\n    x, tf_data_format = _preprocess_conv1d_input(x, data_format)\n    padding = _preprocess_padding(padding)\n    if tf_data_format == 'NHWC':\n        spatial_start_dim = 1\n        strides = (1, 1) + strides + (1,)\n    else:\n        spatial_start_dim = 2\n        strides = (1, 1, 1) + strides\n    x = tf.expand_dims(x, spatial_start_dim)\n    depthwise_kernel = tf.expand_dims(depthwise_kernel, 0)\n    pointwise_kernel = tf.expand_dims(pointwise_kernel, 0)\n    dilation_rate = (1,) + dilation_rate\n\n    x = tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel,\n                               strides=strides,\n                               padding=padding,\n                               rate=dilation_rate,\n                               data_format=tf_data_format)\n\n    x = tf.squeeze(x, [spatial_start_dim])\n\n    if data_format == 'channels_first' and tf_data_format == 'NHWC':\n        x = tf.transpose(x, (0, 2, 1))  # NWC -> NCW\n\n    return x\n",
                    "decorators": [],
                    "docstring": "1D convolution with separable filters.\n\n# Arguments\n    x: input tensor\n    depthwise_kernel: convolution kernel for the depthwise convolution.\n    pointwise_kernel: kernel for the 1x1 convolution.\n    strides: stride integer.\n    padding: string, `\"same\"` or `\"valid\"`.\n    data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n    dilation_rate: integer dilation rate.\n\n# Returns\n    Output tensor.\n\n# Raises\n    ValueError: if `data_format` is neither `channels_last` or `channels_first`.",
                    "start_line": 3391,
                    "end_line": 3439,
                    "variables": {
                        "data_format": [
                            3436,
                            3410,
                            3411,
                            3412,
                            3413,
                            3415
                        ],
                        "image_data_format": [
                            3411
                        ],
                        "ValueError": [
                            3413
                        ],
                        "str": [
                            3413
                        ],
                        "x": [
                            3428,
                            3434,
                            3437,
                            3439,
                            3415,
                            3423
                        ],
                        "tf_data_format": [
                            3432,
                            3417,
                            3436,
                            3415
                        ],
                        "_preprocess_conv1d_input": [
                            3415
                        ],
                        "padding": [
                            3416,
                            3430
                        ],
                        "_preprocess_padding": [
                            3416
                        ],
                        "spatial_start_dim": [
                            3418,
                            3421,
                            3434,
                            3423
                        ],
                        "strides": [
                            3419,
                            3429,
                            3422
                        ],
                        "tf.expand_dims": [
                            3424,
                            3425,
                            3423
                        ],
                        "tf": [
                            3424,
                            3425,
                            3428,
                            3434,
                            3437,
                            3423
                        ],
                        "depthwise_kernel": [
                            3424,
                            3428
                        ],
                        "pointwise_kernel": [
                            3425,
                            3428
                        ],
                        "dilation_rate": [
                            3426,
                            3431
                        ],
                        "tf.nn.separable_conv2d": [
                            3428
                        ],
                        "tf.nn": [
                            3428
                        ],
                        "tf.squeeze": [
                            3434
                        ],
                        "tf.transpose": [
                            3437
                        ]
                    },
                    "filtered_variables": {
                        "data_format": [
                            3436,
                            3410,
                            3411,
                            3412,
                            3413,
                            3415
                        ],
                        "image_data_format": [
                            3411
                        ],
                        "x": [
                            3428,
                            3434,
                            3437,
                            3439,
                            3415,
                            3423
                        ],
                        "tf_data_format": [
                            3432,
                            3417,
                            3436,
                            3415
                        ],
                        "_preprocess_conv1d_input": [
                            3415
                        ],
                        "padding": [
                            3416,
                            3430
                        ],
                        "_preprocess_padding": [
                            3416
                        ],
                        "spatial_start_dim": [
                            3418,
                            3421,
                            3434,
                            3423
                        ],
                        "strides": [
                            3419,
                            3429,
                            3422
                        ],
                        "tf.expand_dims": [
                            3424,
                            3425,
                            3423
                        ],
                        "tf": [
                            3424,
                            3425,
                            3428,
                            3434,
                            3437,
                            3423
                        ],
                        "depthwise_kernel": [
                            3424,
                            3428
                        ],
                        "pointwise_kernel": [
                            3425,
                            3428
                        ],
                        "dilation_rate": [
                            3426,
                            3431
                        ],
                        "tf.nn.separable_conv2d": [
                            3428
                        ],
                        "tf.nn": [
                            3428
                        ],
                        "tf.squeeze": [
                            3434
                        ],
                        "tf.transpose": [
                            3437
                        ]
                    },
                    "diff_line_number": 3419,
                    "class_data": null,
                    "used_imports": [
                        "import tensorflow as tf",
                        "from .common import image_data_format"
                    ],
                    "variable_values": [
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'input_1:0' shape=(?, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_1/depthwise_kernel:0' shape=(3, 3, 1) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_1/pointwise_kernel:0' shape=(1, 3, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_1/Squeeze:0' shape=(?, 7, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(7), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_1/ExpandDims_1:0' shape=(1, 3, 3, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_1/ExpandDims_2:0' shape=(1, 1, 3, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'input_1_1:0' shape=(?, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_1_1/depthwise_kernel:0' shape=(3, 3, 1) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_1_1/pointwise_kernel:0' shape=(1, 3, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_1_1/Squeeze:0' shape=(?, 7, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(7), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_1_1/ExpandDims_1:0' shape=(1, 3, 3, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_1_1/ExpandDims_2:0' shape=(1, 1, 3, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_1_input:0' shape=(2, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_1_2/depthwise_kernel:0' shape=(3, 3, 1) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_1_2/pointwise_kernel:0' shape=(1, 3, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_1_2/Squeeze:0' shape=(2, 7, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(7), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_1_2/ExpandDims_1:0' shape=(1, 3, 3, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_1_2/ExpandDims_2:0' shape=(1, 1, 3, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_1_input_1:0' shape=(2, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_1_3/depthwise_kernel:0' shape=(3, 3, 1) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_1_3/pointwise_kernel:0' shape=(1, 3, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_1_3/Squeeze:0' shape=(2, 7, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(7), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_1_3/ExpandDims_1:0' shape=(1, 3, 3, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_1_3/ExpandDims_2:0' shape=(1, 1, 3, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'input_2:0' shape=(?, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_2/depthwise_kernel:0' shape=(3, 3, 1) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_2/pointwise_kernel:0' shape=(1, 3, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_2/Squeeze:0' shape=(?, 5, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(5), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_2/ExpandDims_1:0' shape=(1, 3, 3, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_2/ExpandDims_2:0' shape=(1, 1, 3, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'input_2_1:0' shape=(?, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_2_1/depthwise_kernel:0' shape=(3, 3, 1) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_2_1/pointwise_kernel:0' shape=(1, 3, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_2_1/Squeeze:0' shape=(?, 5, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(5), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_2_1/ExpandDims_1:0' shape=(1, 3, 3, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_2_1/ExpandDims_2:0' shape=(1, 1, 3, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_2_input:0' shape=(2, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_2_2/depthwise_kernel:0' shape=(3, 3, 1) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_2_2/pointwise_kernel:0' shape=(1, 3, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_2_2/Squeeze:0' shape=(2, 5, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(5), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_2_2/ExpandDims_1:0' shape=(1, 3, 3, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_2_2/ExpandDims_2:0' shape=(1, 1, 3, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_2_input_1:0' shape=(2, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_2_3/depthwise_kernel:0' shape=(3, 3, 1) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_2_3/pointwise_kernel:0' shape=(1, 3, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_2_3/Squeeze:0' shape=(2, 5, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(5), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_2_3/ExpandDims_1:0' shape=(1, 3, 3, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_2_3/ExpandDims_2:0' shape=(1, 1, 3, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'input_3:0' shape=(?, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_3/depthwise_kernel:0' shape=(3, 3, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_3/pointwise_kernel:0' shape=(1, 6, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_3/Squeeze:0' shape=(?, 7, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(7), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_3/ExpandDims_1:0' shape=(1, 3, 3, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_3/ExpandDims_2:0' shape=(1, 1, 6, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'input_3_1:0' shape=(?, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_3_1/depthwise_kernel:0' shape=(3, 3, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_3_1/pointwise_kernel:0' shape=(1, 6, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_3_1/Squeeze:0' shape=(?, 7, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(7), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_3_1/ExpandDims_1:0' shape=(1, 3, 3, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_3_1/ExpandDims_2:0' shape=(1, 1, 6, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_3_input:0' shape=(2, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_3_2/depthwise_kernel:0' shape=(3, 3, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_3_2/pointwise_kernel:0' shape=(1, 6, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_3_2/Squeeze:0' shape=(2, 7, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(7), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_3_2/ExpandDims_1:0' shape=(1, 3, 3, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_3_2/ExpandDims_2:0' shape=(1, 1, 6, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_3_input_1:0' shape=(2, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_3_3/depthwise_kernel:0' shape=(3, 3, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_3_3/pointwise_kernel:0' shape=(1, 6, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_3_3/Squeeze:0' shape=(2, 7, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(7), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_3_3/ExpandDims_1:0' shape=(1, 3, 3, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_3_3/ExpandDims_2:0' shape=(1, 1, 6, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'input_4:0' shape=(?, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_4/depthwise_kernel:0' shape=(3, 3, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_4/pointwise_kernel:0' shape=(1, 6, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_4/Squeeze:0' shape=(?, 5, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(5), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_4/ExpandDims_1:0' shape=(1, 3, 3, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_4/ExpandDims_2:0' shape=(1, 1, 6, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'input_4_1:0' shape=(?, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_4_1/depthwise_kernel:0' shape=(3, 3, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_4_1/pointwise_kernel:0' shape=(1, 6, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_4_1/Squeeze:0' shape=(?, 5, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(5), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_4_1/ExpandDims_1:0' shape=(1, 3, 3, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_4_1/ExpandDims_2:0' shape=(1, 1, 6, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_4_input:0' shape=(2, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_4_2/depthwise_kernel:0' shape=(3, 3, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_4_2/pointwise_kernel:0' shape=(1, 6, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_4_2/Squeeze:0' shape=(2, 5, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(5), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_4_2/ExpandDims_1:0' shape=(1, 3, 3, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_4_2/ExpandDims_2:0' shape=(1, 1, 6, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_4_input_1:0' shape=(2, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_4_3/depthwise_kernel:0' shape=(3, 3, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_4_3/pointwise_kernel:0' shape=(1, 6, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_4_3/Squeeze:0' shape=(2, 5, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(5), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_4_3/ExpandDims_1:0' shape=(1, 3, 3, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_4_3/ExpandDims_2:0' shape=(1, 1, 6, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'input_5:0' shape=(?, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_5/depthwise_kernel:0' shape=(3, 3, 1) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_5/pointwise_kernel:0' shape=(1, 3, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_5/Squeeze:0' shape=(?, 4, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(4), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 2, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_5/ExpandDims_1:0' shape=(1, 3, 3, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_5/ExpandDims_2:0' shape=(1, 1, 3, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'input_1:0' shape=(?, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_1/depthwise_kernel:0' shape=(3, 3, 1) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_1/pointwise_kernel:0' shape=(1, 3, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_1/Squeeze:0' shape=(?, 7, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(7), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_1/ExpandDims_1:0' shape=(1, 3, 3, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_1/ExpandDims_2:0' shape=(1, 1, 3, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'input_1_1:0' shape=(?, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_1_1/depthwise_kernel:0' shape=(3, 3, 1) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_1_1/pointwise_kernel:0' shape=(1, 3, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_1_1/Squeeze:0' shape=(?, 7, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(7), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_1_1/ExpandDims_1:0' shape=(1, 3, 3, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_1_1/ExpandDims_2:0' shape=(1, 1, 3, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_1_input:0' shape=(2, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_1_2/depthwise_kernel:0' shape=(3, 3, 1) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_1_2/pointwise_kernel:0' shape=(1, 3, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_1_2/Squeeze:0' shape=(2, 7, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(7), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_1_2/ExpandDims_1:0' shape=(1, 3, 3, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_1_2/ExpandDims_2:0' shape=(1, 1, 3, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_1_input_1:0' shape=(2, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_1_3/depthwise_kernel:0' shape=(3, 3, 1) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_1_3/pointwise_kernel:0' shape=(1, 3, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_1_3/Squeeze:0' shape=(2, 7, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(7), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_1_3/ExpandDims_1:0' shape=(1, 3, 3, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_1_3/ExpandDims_2:0' shape=(1, 1, 3, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'input_2:0' shape=(?, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_2/depthwise_kernel:0' shape=(3, 3, 1) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_2/pointwise_kernel:0' shape=(1, 3, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_2/Squeeze:0' shape=(?, 5, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(5), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_2/ExpandDims_1:0' shape=(1, 3, 3, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_2/ExpandDims_2:0' shape=(1, 1, 3, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'input_2_1:0' shape=(?, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_2_1/depthwise_kernel:0' shape=(3, 3, 1) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_2_1/pointwise_kernel:0' shape=(1, 3, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_2_1/Squeeze:0' shape=(?, 5, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(5), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_2_1/ExpandDims_1:0' shape=(1, 3, 3, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_2_1/ExpandDims_2:0' shape=(1, 1, 3, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_2_input:0' shape=(2, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_2_2/depthwise_kernel:0' shape=(3, 3, 1) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_2_2/pointwise_kernel:0' shape=(1, 3, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_2_2/Squeeze:0' shape=(2, 5, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(5), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_2_2/ExpandDims_1:0' shape=(1, 3, 3, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_2_2/ExpandDims_2:0' shape=(1, 1, 3, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_2_input_1:0' shape=(2, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_2_3/depthwise_kernel:0' shape=(3, 3, 1) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_2_3/pointwise_kernel:0' shape=(1, 3, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_2_3/Squeeze:0' shape=(2, 5, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(5), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_2_3/ExpandDims_1:0' shape=(1, 3, 3, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_2_3/ExpandDims_2:0' shape=(1, 1, 3, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'input_3:0' shape=(?, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_3/depthwise_kernel:0' shape=(3, 3, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_3/pointwise_kernel:0' shape=(1, 6, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_3/Squeeze:0' shape=(?, 7, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(7), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_3/ExpandDims_1:0' shape=(1, 3, 3, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_3/ExpandDims_2:0' shape=(1, 1, 6, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'input_3_1:0' shape=(?, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_3_1/depthwise_kernel:0' shape=(3, 3, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_3_1/pointwise_kernel:0' shape=(1, 6, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_3_1/Squeeze:0' shape=(?, 7, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(7), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_3_1/ExpandDims_1:0' shape=(1, 3, 3, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_3_1/ExpandDims_2:0' shape=(1, 1, 6, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_3_input:0' shape=(2, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_3_2/depthwise_kernel:0' shape=(3, 3, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_3_2/pointwise_kernel:0' shape=(1, 6, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_3_2/Squeeze:0' shape=(2, 7, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(7), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_3_2/ExpandDims_1:0' shape=(1, 3, 3, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_3_2/ExpandDims_2:0' shape=(1, 1, 6, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_3_input_1:0' shape=(2, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_3_3/depthwise_kernel:0' shape=(3, 3, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_3_3/pointwise_kernel:0' shape=(1, 6, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_3_3/Squeeze:0' shape=(2, 7, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(7), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_3_3/ExpandDims_1:0' shape=(1, 3, 3, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_3_3/ExpandDims_2:0' shape=(1, 1, 6, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'input_4:0' shape=(?, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_4/depthwise_kernel:0' shape=(3, 3, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_4/pointwise_kernel:0' shape=(1, 6, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_4/Squeeze:0' shape=(?, 5, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(5), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_4/ExpandDims_1:0' shape=(1, 3, 3, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_4/ExpandDims_2:0' shape=(1, 1, 6, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'input_4_1:0' shape=(?, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_4_1/depthwise_kernel:0' shape=(3, 3, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_4_1/pointwise_kernel:0' shape=(1, 6, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_4_1/Squeeze:0' shape=(?, 5, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(5), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_4_1/ExpandDims_1:0' shape=(1, 3, 3, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_4_1/ExpandDims_2:0' shape=(1, 1, 6, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_4_input:0' shape=(2, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_4_2/depthwise_kernel:0' shape=(3, 3, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_4_2/pointwise_kernel:0' shape=(1, 6, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_4_2/Squeeze:0' shape=(2, 5, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(5), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_4_2/ExpandDims_1:0' shape=(1, 3, 3, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_4_2/ExpandDims_2:0' shape=(1, 1, 6, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_4_input_1:0' shape=(2, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_4_3/depthwise_kernel:0' shape=(3, 3, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_4_3/pointwise_kernel:0' shape=(1, 6, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_4_3/Squeeze:0' shape=(2, 5, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(5), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_4_3/ExpandDims_1:0' shape=(1, 3, 3, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_4_3/ExpandDims_2:0' shape=(1, 1, 6, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'input_5:0' shape=(?, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_5/depthwise_kernel:0' shape=(3, 3, 1) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_5/pointwise_kernel:0' shape=(1, 3, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_5/Squeeze:0' shape=(?, 4, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(4), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 2, 2, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_5/ExpandDims_1:0' shape=(1, 3, 3, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_5/ExpandDims_2:0' shape=(1, 1, 3, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'input_5_1:0' shape=(?, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_5_1/depthwise_kernel:0' shape=(3, 3, 1) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_5_1/pointwise_kernel:0' shape=(1, 3, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_5_1/Squeeze:0' shape=(?, 4, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(4), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 2, 2, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_5_1/ExpandDims_1:0' shape=(1, 3, 3, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_5_1/ExpandDims_2:0' shape=(1, 1, 3, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_5_input:0' shape=(2, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_5_2/depthwise_kernel:0' shape=(3, 3, 1) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_5_2/pointwise_kernel:0' shape=(1, 3, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_5_2/Squeeze:0' shape=(2, 4, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(4), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 2, 2, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_5_2/ExpandDims_1:0' shape=(1, 3, 3, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_5_2/ExpandDims_2:0' shape=(1, 1, 3, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_5_input_1:0' shape=(2, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_5_3/depthwise_kernel:0' shape=(3, 3, 1) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_5_3/pointwise_kernel:0' shape=(1, 3, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_5_3/Squeeze:0' shape=(2, 4, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(4), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 2, 2, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_5_3/ExpandDims_1:0' shape=(1, 3, 3, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_5_3/ExpandDims_2:0' shape=(1, 1, 3, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'input_6:0' shape=(?, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_6/depthwise_kernel:0' shape=(3, 3, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_6/pointwise_kernel:0' shape=(1, 6, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_6/Squeeze:0' shape=(?, 4, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(4), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 2, 2, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_6/ExpandDims_1:0' shape=(1, 3, 3, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_6/ExpandDims_2:0' shape=(1, 1, 6, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'input_6_1:0' shape=(?, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_6_1/depthwise_kernel:0' shape=(3, 3, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_6_1/pointwise_kernel:0' shape=(1, 6, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_6_1/Squeeze:0' shape=(?, 4, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(4), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 2, 2, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_6_1/ExpandDims_1:0' shape=(1, 3, 3, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_6_1/ExpandDims_2:0' shape=(1, 1, 6, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_6_input:0' shape=(2, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_6_2/depthwise_kernel:0' shape=(3, 3, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_6_2/pointwise_kernel:0' shape=(1, 6, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_6_2/Squeeze:0' shape=(2, 4, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(4), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 2, 2, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_6_2/ExpandDims_1:0' shape=(1, 3, 3, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_6_2/ExpandDims_2:0' shape=(1, 1, 6, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_6_input_1:0' shape=(2, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'valid'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_6_3/depthwise_kernel:0' shape=(3, 3, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_6_3/pointwise_kernel:0' shape=(1, 6, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_6_3/Squeeze:0' shape=(2, 4, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(4), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'VALID'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 2, 2, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_6_3/ExpandDims_1:0' shape=(1, 3, 3, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_6_3/ExpandDims_2:0' shape=(1, 1, 6, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'input_7:0' shape=(?, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'same'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_7/depthwise_kernel:0' shape=(3, 3, 1) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_7/pointwise_kernel:0' shape=(1, 3, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_7/Squeeze:0' shape=(?, 9, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'SAME'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_7/ExpandDims_1:0' shape=(1, 3, 3, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_7/ExpandDims_2:0' shape=(1, 1, 3, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'input_7_1:0' shape=(?, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'same'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_7_1/depthwise_kernel:0' shape=(3, 3, 1) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_7_1/pointwise_kernel:0' shape=(1, 3, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_7_1/Squeeze:0' shape=(?, 9, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'SAME'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_7_1/ExpandDims_1:0' shape=(1, 3, 3, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_7_1/ExpandDims_2:0' shape=(1, 1, 3, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_7_input:0' shape=(2, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'same'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_7_2/depthwise_kernel:0' shape=(3, 3, 1) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_7_2/pointwise_kernel:0' shape=(1, 3, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_7_2/Squeeze:0' shape=(2, 9, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'SAME'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_7_2/ExpandDims_1:0' shape=(1, 3, 3, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_7_2/ExpandDims_2:0' shape=(1, 1, 3, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_7_input_1:0' shape=(2, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'same'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_7_3/depthwise_kernel:0' shape=(3, 3, 1) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_7_3/pointwise_kernel:0' shape=(1, 3, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_7_3/Squeeze:0' shape=(2, 9, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'SAME'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_7_3/ExpandDims_1:0' shape=(1, 3, 3, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_7_3/ExpandDims_2:0' shape=(1, 1, 3, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'input_8:0' shape=(?, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'same'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_8/depthwise_kernel:0' shape=(3, 3, 1) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_8/pointwise_kernel:0' shape=(1, 3, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_8/Squeeze:0' shape=(?, 9, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'SAME'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_8/ExpandDims_1:0' shape=(1, 3, 3, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_8/ExpandDims_2:0' shape=(1, 1, 3, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'input_8_1:0' shape=(?, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'same'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_8_1/depthwise_kernel:0' shape=(3, 3, 1) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_8_1/pointwise_kernel:0' shape=(1, 3, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_8_1/Squeeze:0' shape=(?, 9, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'SAME'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_8_1/ExpandDims_1:0' shape=(1, 3, 3, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_8_1/ExpandDims_2:0' shape=(1, 1, 3, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_8_input:0' shape=(2, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'same'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_8_2/depthwise_kernel:0' shape=(3, 3, 1) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_8_2/pointwise_kernel:0' shape=(1, 3, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_8_2/Squeeze:0' shape=(2, 9, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'SAME'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_8_2/ExpandDims_1:0' shape=(1, 3, 3, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_8_2/ExpandDims_2:0' shape=(1, 1, 3, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_8_input_1:0' shape=(2, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'same'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_8_3/depthwise_kernel:0' shape=(3, 3, 1) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_8_3/pointwise_kernel:0' shape=(1, 3, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_8_3/Squeeze:0' shape=(2, 9, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'SAME'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_8_3/ExpandDims_1:0' shape=(1, 3, 3, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(1)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_8_3/ExpandDims_2:0' shape=(1, 1, 3, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(3), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'input_9:0' shape=(?, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'same'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_9/depthwise_kernel:0' shape=(3, 3, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_9/pointwise_kernel:0' shape=(1, 6, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_9/Squeeze:0' shape=(?, 9, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'SAME'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_9/ExpandDims_1:0' shape=(1, 3, 3, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_9/ExpandDims_2:0' shape=(1, 1, 6, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'input_9_1:0' shape=(?, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'same'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_9_1/depthwise_kernel:0' shape=(3, 3, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_9_1/pointwise_kernel:0' shape=(1, 6, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_9_1/Squeeze:0' shape=(?, 9, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'SAME'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_9_1/ExpandDims_1:0' shape=(1, 3, 3, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_9_1/ExpandDims_2:0' shape=(1, 1, 6, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_9_input:0' shape=(2, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'same'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_9_2/depthwise_kernel:0' shape=(3, 3, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_9_2/pointwise_kernel:0' shape=(1, 6, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_9_2/Squeeze:0' shape=(2, 9, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'SAME'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_9_2/ExpandDims_1:0' shape=(1, 3, 3, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_9_2/ExpandDims_2:0' shape=(1, 1, 6, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_9_input_1:0' shape=(2, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'same'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_9_3/depthwise_kernel:0' shape=(3, 3, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_9_3/pointwise_kernel:0' shape=(1, 6, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_9_3/Squeeze:0' shape=(2, 9, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'SAME'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_9_3/ExpandDims_1:0' shape=(1, 3, 3, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_9_3/ExpandDims_2:0' shape=(1, 1, 6, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'input_10:0' shape=(?, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'same'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_10/depthwise_kernel:0' shape=(3, 3, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_10/pointwise_kernel:0' shape=(1, 6, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_10/Squeeze:0' shape=(?, 9, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'SAME'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_10/ExpandDims_1:0' shape=(1, 3, 3, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_10/ExpandDims_2:0' shape=(1, 1, 6, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'input_10_1:0' shape=(?, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'same'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_10_1/depthwise_kernel:0' shape=(3, 3, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_10_1/pointwise_kernel:0' shape=(1, 6, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_10_1/Squeeze:0' shape=(?, 9, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(9), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'SAME'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_10_1/ExpandDims_1:0' shape=(1, 3, 3, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_10_1/ExpandDims_2:0' shape=(1, 1, 6, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_10_input:0' shape=(2, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'same'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_10_2/depthwise_kernel:0' shape=(3, 3, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_10_2/pointwise_kernel:0' shape=(1, 6, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_10_2/Squeeze:0' shape=(2, 9, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'SAME'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_10_2/ExpandDims_1:0' shape=(1, 3, 3, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_10_2/ExpandDims_2:0' shape=(1, 1, 6, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_10_input_1:0' shape=(2, 9, 3) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(3)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'same'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_10_3/depthwise_kernel:0' shape=(3, 3, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_10_3/pointwise_kernel:0' shape=(1, 6, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(2,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_last'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_10_3/Squeeze:0' shape=(2, 9, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(9), Dimension(6)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'SAME'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_10_3/ExpandDims_1:0' shape=(1, 3, 3, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_10_3/ExpandDims_2:0' shape=(1, 1, 6, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_first'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'input_11:0' shape=(?, 3, 9) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(3), Dimension(9)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'same'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_11/depthwise_kernel:0' shape=(3, 3, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_11/pointwise_kernel:0' shape=(1, 6, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_first'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_11/transpose_1:0' shape=(?, 6, 9) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(6), Dimension(9)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'SAME'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_11/ExpandDims_1:0' shape=(1, 3, 3, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_11/ExpandDims_2:0' shape=(1, 1, 6, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_first'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'input_11_1:0' shape=(?, 3, 9) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(3), Dimension(9)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'same'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_11_1/depthwise_kernel:0' shape=(3, 3, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_11_1/pointwise_kernel:0' shape=(1, 6, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_first'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_11_1/transpose_1:0' shape=(?, 6, 9) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(6), Dimension(9)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'SAME'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_11_1/ExpandDims_1:0' shape=(1, 3, 3, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_11_1/ExpandDims_2:0' shape=(1, 1, 6, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_first'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_11_input:0' shape=(2, 3, 9) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(3), Dimension(9)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'same'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_11_2/depthwise_kernel:0' shape=(3, 3, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_11_2/pointwise_kernel:0' shape=(1, 6, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_first'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_11_2/transpose_1:0' shape=(2, 6, 9) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(6), Dimension(9)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'SAME'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_11_2/ExpandDims_1:0' shape=(1, 3, 3, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_11_2/ExpandDims_2:0' shape=(1, 1, 6, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "data_format": {
                                    "variable_value": "'channels_first'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_11_input_1:0' shape=(2, 3, 9) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(3), Dimension(9)])"
                                },
                                "tf_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'same'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_11_3/depthwise_kernel:0' shape=(3, 3, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Variable 'separable_conv1d_11_3/pointwise_kernel:0' shape=(1, 6, 6) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "data_format": {
                                    "variable_value": "'channels_first'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_11_3/transpose_1:0' shape=(2, 6, 9) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(6), Dimension(9)])"
                                },
                                "tf_data_format": {
                                    "variable_value": "'NHWC'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_conv1d_input": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "padding": {
                                    "variable_value": "'SAME'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "_preprocess_padding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spatial_start_dim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "strides": {
                                    "variable_value": "(1, 1, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "tf.expand_dims": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "depthwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_11_3/ExpandDims_1:0' shape=(1, 3, 3, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(3), Dimension(3), Dimension(2)])"
                                },
                                "pointwise_kernel": {
                                    "variable_value": "<tf.Tensor 'separable_conv1d_11_3/ExpandDims_2:0' shape=(1, 1, 6, 6) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(1), Dimension(6), Dimension(6)])"
                                },
                                "dilation_rate": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "tf.nn.separable_conv2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.nn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": {
                "file_scope_functions": [
                    {
                        "code": "def get_uid(prefix=''):\n    \"\"\"Get the uid for the default graph.\n\n    # Arguments\n        prefix: An optional prefix of the graph.\n\n    # Returns\n        A unique identifier for the graph.\n    \"\"\"\n    global _GRAPH_UID_DICTS\n    graph = tf.get_default_graph()\n    if graph not in _GRAPH_UID_DICTS:\n        _GRAPH_UID_DICTS[graph] = defaultdict(int)\n    _GRAPH_UID_DICTS[graph][prefix] += 1\n    return _GRAPH_UID_DICTS[graph][prefix]",
                        "signature": "get_uid(prefix='')"
                    },
                    {
                        "code": "def reset_uids():\n    \"\"\"Reset graph identifiers.\"\"\"\n    global _GRAPH_UID_DICTS\n    _GRAPH_UID_DICTS = {}",
                        "signature": "reset_uids()"
                    },
                    {
                        "code": "def clear_session():\n    \"\"\"Destroys the current TF graph and creates a new one.\n\n    Useful to avoid clutter from old models / layers.\n    \"\"\"\n    global _SESSION\n    global _GRAPH_LEARNING_PHASES\n    tf.reset_default_graph()\n    reset_uids()\n    _SESSION = None\n    phase = tf.placeholder_with_default(False,\n                                        shape=(),\n                                        name='keras_learning_phase')\n    _GRAPH_LEARNING_PHASES = {}\n    _GRAPH_LEARNING_PHASES[tf.get_default_graph()] = phase",
                        "signature": "clear_session()"
                    },
                    {
                        "code": "def manual_variable_initialization(value):\n    \"\"\"Sets the manual variable initialization flag.\n\n    This boolean flag determines whether\n    variables should be initialized\n    as they are instantiated (default), or if\n    the user should handle the initialization\n    (e.g. via `tf.initialize_all_variables()`).\n\n    # Arguments\n        value: Python boolean.\n    \"\"\"\n    global _MANUAL_VAR_INIT\n    _MANUAL_VAR_INIT = value",
                        "signature": "manual_variable_initialization(value)"
                    },
                    {
                        "code": "def learning_phase():\n    \"\"\"Returns the learning phase flag.\n\n    The learning phase flag is a bool tensor (0 = test, 1 = train)\n    to be passed as input to any Keras function\n    that uses a different behavior at train time and test time.\n\n    # Returns\n        Learning phase (scalar integer tensor or Python integer).\n    \"\"\"\n    graph = tf.get_default_graph()\n    if graph not in _GRAPH_LEARNING_PHASES:\n        phase = tf.placeholder_with_default(False,\n                                            shape=(),\n                                            name='keras_learning_phase')\n        _GRAPH_LEARNING_PHASES[graph] = phase\n    return _GRAPH_LEARNING_PHASES[graph]",
                        "signature": "learning_phase()"
                    },
                    {
                        "code": "def set_learning_phase(value):\n    \"\"\"Sets the learning phase to a fixed value.\n\n    # Arguments\n        value: Learning phase value, either 0 or 1 (integers).\n\n    # Raises\n        ValueError: if `value` is neither `0` nor `1`.\n    \"\"\"\n    global _GRAPH_LEARNING_PHASES\n    if value not in {0, 1}:\n        raise ValueError('Expected learning phase to be '\n                         '0 or 1.')\n    _GRAPH_LEARNING_PHASES[tf.get_default_graph()] = value",
                        "signature": "set_learning_phase(value)"
                    },
                    {
                        "code": "def get_session():\n    \"\"\"Returns the TF session to be used by the backend.\n\n    If a default TensorFlow session is available, we will return it.\n\n    Else, we will return the global Keras session.\n\n    If no global Keras session exists at this point:\n    we will create a new global session.\n\n    Note that you can manually set the global session\n    via `K.set_session(sess)`.\n\n    # Returns\n        A TensorFlow session.\n    \"\"\"\n    global _SESSION\n    if tf.get_default_session() is not None:\n        session = tf.get_default_session()\n    else:\n        if _SESSION is None:\n            if not os.environ.get('OMP_NUM_THREADS'):\n                config = tf.ConfigProto(allow_soft_placement=True)\n            else:\n                num_thread = int(os.environ.get('OMP_NUM_THREADS'))\n                config = tf.ConfigProto(intra_op_parallelism_threads=num_thread,\n                                        allow_soft_placement=True)\n            _SESSION = tf.Session(config=config)\n        session = _SESSION\n    if not _MANUAL_VAR_INIT:\n        with session.graph.as_default():\n            variables = tf.global_variables()\n            candidate_vars = []\n            for v in variables:\n                if not getattr(v, '_keras_initialized', False):\n                    candidate_vars.append(v)\n            if candidate_vars:\n                # This step is expensive, so we only run it on variables\n                # not already marked as initialized.\n                is_initialized = session.run(\n                    [tf.is_variable_initialized(v) for v in candidate_vars])\n                uninitialized_vars = []\n                for flag, v in zip(is_initialized, candidate_vars):\n                    if not flag:\n                        uninitialized_vars.append(v)\n                    v._keras_initialized = True\n                if uninitialized_vars:\n                    session.run(tf.variables_initializer(uninitialized_vars))\n    # hack for list_devices() function.\n    # list_devices() function is not available under tensorflow r1.3.\n    if not hasattr(session, 'list_devices'):\n        session.list_devices = lambda: device_lib.list_local_devices()\n    return session",
                        "signature": "get_session()"
                    },
                    {
                        "code": "def set_session(session):\n    \"\"\"Sets the global TensorFlow session.\n\n    # Arguments\n        session: A TF Session.\n    \"\"\"\n    global _SESSION\n    _SESSION = session",
                        "signature": "set_session(session)"
                    },
                    {
                        "code": "def _get_current_tf_device():\n    \"\"\"Return explicit device of current context, otherwise returns `None`.\n\n    # Returns\n        If the current device scope is explicitly set, it returns a string with\n        the device (`CPU` or `GPU`). If the scope is not explicitly set, it will\n        return `None`.\n    \"\"\"\n    g = tf.get_default_graph()\n    op = _TfDeviceCaptureOp()\n    g._apply_device_functions(op)\n    return op.device",
                        "signature": "_get_current_tf_device()"
                    },
                    {
                        "code": "def _is_current_explicit_device(device_type):\n    \"\"\"Check if the current device is explicitly set on the device type specified.\n\n    # Arguments\n        device_type: A string containing `GPU` or `CPU` (case-insensitive).\n\n    # Returns\n        A boolean indicating if the current device scope is explicitly set on the device type.\n\n    # Raises\n        ValueError: If the `device_type` string indicates an unsupported device.\n    \"\"\"\n    device_type = device_type.upper()\n    if device_type not in ['CPU', 'GPU']:\n        raise ValueError('device_type should be either \"CPU\" or \"GPU\".')\n    device = _get_current_tf_device()\n    return (device is not None and device.device_type == device_type.upper())",
                        "signature": "_is_current_explicit_device(device_type)"
                    },
                    {
                        "code": "def _get_available_gpus():\n    \"\"\"Get a list of available gpu devices (formatted as strings).\n\n    # Returns\n        A list of available GPU devices.\n    \"\"\"\n    global _LOCAL_DEVICES\n    if _LOCAL_DEVICES is None:\n        _LOCAL_DEVICES = get_session().list_devices()\n    return [x.name for x in _LOCAL_DEVICES if x.device_type == 'GPU']",
                        "signature": "_get_available_gpus()"
                    },
                    {
                        "code": "def _has_nchw_support():\n    \"\"\"Check whether the current scope supports NCHW ops.\n\n    TensorFlow does not support NCHW on CPU. Therefore we check if we are not explicitly put on\n    CPU, and have GPUs available. In this case there will be soft-placing on the GPU device.\n\n    # Returns\n        bool: if the current scope device placement would support nchw\n    \"\"\"\n    explicitly_on_cpu = _is_current_explicit_device('CPU')\n    gpus_available = len(_get_available_gpus()) > 0\n    return (not explicitly_on_cpu and gpus_available)",
                        "signature": "_has_nchw_support()"
                    },
                    {
                        "code": "def _to_tensor(x, dtype):\n    \"\"\"Convert the input `x` to a tensor of type `dtype`.\n\n    # Arguments\n        x: An object to be converted (numpy array, list, tensors).\n        dtype: The destination type.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.convert_to_tensor(x, dtype=dtype)",
                        "signature": "_to_tensor(x, dtype)"
                    },
                    {
                        "code": "def is_sparse(tensor):\n    \"\"\"Returns whether a tensor is a sparse tensor.\n\n    # Arguments\n        tensor: A tensor instance.\n\n    # Returns\n        A boolean.\n\n    # Example\n    ```python\n        >>> from keras import backend as K\n        >>> a = K.placeholder((2, 2), sparse=False)\n        >>> print(K.is_sparse(a))\n        False\n        >>> b = K.placeholder((2, 2), sparse=True)\n        >>> print(K.is_sparse(b))\n        True\n    ```\n    \"\"\"\n    return isinstance(tensor, tf.SparseTensor)",
                        "signature": "is_sparse(tensor)"
                    },
                    {
                        "code": "def to_dense(tensor):\n    \"\"\"Converts a sparse tensor into a dense tensor and returns it.\n\n    # Arguments\n        tensor: A tensor instance (potentially sparse).\n\n    # Returns\n        A dense tensor.\n\n    # Examples\n    ```python\n        >>> from keras import backend as K\n        >>> b = K.placeholder((2, 2), sparse=True)\n        >>> print(K.is_sparse(b))\n        True\n        >>> c = K.to_dense(b)\n        >>> print(K.is_sparse(c))\n        False\n    ```\n    \"\"\"\n    if is_sparse(tensor):\n        return tf.sparse_tensor_to_dense(tensor)\n    else:\n        return tensor",
                        "signature": "to_dense(tensor)"
                    },
                    {
                        "code": "def variable(value, dtype=None, name=None, constraint=None):\n    \"\"\"Instantiates a variable and returns it.\n\n    # Arguments\n        value: Numpy array, initial value of the tensor.\n        dtype: Tensor type.\n        name: Optional name string for the tensor.\n        constraint: Optional projection function to be\n            applied to the variable after an optimizer update.\n\n    # Returns\n        A variable instance (with Keras metadata included).\n\n    # Examples\n    ```python\n        >>> from keras import backend as K\n        >>> val = np.array([[1, 2], [3, 4]])\n        >>> kvar = K.variable(value=val, dtype='float64', name='example_var')\n        >>> K.dtype(kvar)\n        'float64'\n        >>> print(kvar)\n        example_var\n        >>> K.eval(kvar)\n        array([[ 1.,  2.],\n               [ 3.,  4.]])\n    ```\n    \"\"\"\n    if dtype is None:\n        dtype = floatx()\n    if hasattr(value, 'tocoo'):\n        sparse_coo = value.tocoo()\n        indices = np.concatenate((np.expand_dims(sparse_coo.row, 1),\n                                  np.expand_dims(sparse_coo.col, 1)), 1)\n        v = tf.SparseTensor(indices=indices,\n                            values=sparse_coo.data,\n                            dense_shape=sparse_coo.shape)\n        v._keras_shape = sparse_coo.shape\n        v._uses_learning_phase = False\n        return v\n    v = tf.Variable(value, dtype=tf.as_dtype(dtype), name=name)\n    if isinstance(value, np.ndarray):\n        v._keras_shape = value.shape\n    elif hasattr(value, 'get_shape'):\n        v._keras_shape = int_shape(value)\n    v._uses_learning_phase = False\n    # TODO: move to Variable constructor when supported in public release.\n    try:\n        v.constraint = constraint\n    except AttributeError:\n        v._constraint = constraint\n    return v",
                        "signature": "variable(value, dtype=None, name=None, constraint=None)"
                    },
                    {
                        "code": "def constant(value, dtype=None, shape=None, name=None):\n    \"\"\"Creates a constant tensor.\n\n    # Arguments\n        value: A constant value (or list)\n        dtype: The type of the elements of the resulting tensor.\n        shape: Optional dimensions of resulting tensor.\n        name: Optional name for the tensor.\n\n    # Returns\n        A Constant Tensor.\n    \"\"\"\n    if dtype is None:\n        dtype = floatx()\n    return tf.constant(value, dtype=dtype, shape=shape, name=name)",
                        "signature": "constant(value, dtype=None, shape=None, name=None)"
                    },
                    {
                        "code": "def is_keras_tensor(x):\n    \"\"\"Returns whether `x` is a Keras tensor.\n\n    A \"Keras tensor\" is a tensor that was returned by a Keras layer,\n    (`Layer` class) or by `Input`.\n\n    # Arguments\n        x: A candidate tensor.\n\n    # Returns\n        A boolean: Whether the argument is a Keras tensor.\n\n    # Raises\n        ValueError: In case `x` is not a symbolic tensor.\n\n    # Examples\n    ```python\n        >>> from keras import backend as K\n        >>> from keras.layers import Input, Dense\n        >>> np_var = numpy.array([1, 2])\n        >>> K.is_keras_tensor(np_var) # A numpy array is not a symbolic tensor.\n        ValueError\n        >>> k_var = tf.placeholder('float32', shape=(1,1))\n        >>> K.is_keras_tensor(k_var) # A variable indirectly created outside of keras is not a Keras tensor.\n        False\n        >>> keras_var = K.variable(np_var)\n        >>> K.is_keras_tensor(keras_var)  # A variable created with the keras backend is not a Keras tensor.\n        False\n        >>> keras_placeholder = K.placeholder(shape=(2, 4, 5))\n        >>> K.is_keras_tensor(keras_placeholder)  # A placeholder is not a Keras tensor.\n        False\n        >>> keras_input = Input([10])\n        >>> K.is_keras_tensor(keras_input) # An Input is a Keras tensor.\n        True\n        >>> keras_layer_output = Dense(10)(keras_input)\n        >>> K.is_keras_tensor(keras_layer_output) # Any Keras layer output is a Keras tensor.\n        True\n    ```\n    \"\"\"\n    if not isinstance(x, (tf.Tensor,\n                          tf_variables.Variable,\n                          tf.SparseTensor)):\n        raise ValueError('Unexpectedly found an instance of type `' + str(type(x)) + '`. '\n                         'Expected a symbolic tensor instance.')\n    return hasattr(x, '_keras_history')",
                        "signature": "is_keras_tensor(x)"
                    },
                    {
                        "code": "def placeholder(shape=None, ndim=None, dtype=None, sparse=False, name=None):\n    \"\"\"Instantiates a placeholder tensor and returns it.\n\n    # Arguments\n        shape: Shape of the placeholder\n            (integer tuple, may include `None` entries).\n        ndim: Number of axes of the tensor.\n            At least one of {`shape`, `ndim`} must be specified.\n            If both are specified, `shape` is used.\n        dtype: Placeholder type.\n        sparse: Boolean, whether the placeholder should have a sparse type.\n        name: Optional name string for the placeholder.\n\n    # Returns\n        Tensor instance (with Keras metadata included).\n\n    # Examples\n    ```python\n        >>> from keras import backend as K\n        >>> input_ph = K.placeholder(shape=(2, 4, 5))\n        >>> input_ph._keras_shape\n        (2, 4, 5)\n        >>> input_ph\n        <tf.Tensor 'Placeholder_4:0' shape=(2, 4, 5) dtype=float32>\n    ```\n    \"\"\"\n    if dtype is None:\n        dtype = floatx()\n    if not shape:\n        if ndim:\n            shape = tuple([None for _ in range(ndim)])\n    if sparse:\n        x = tf.sparse_placeholder(dtype, shape=shape, name=name)\n    else:\n        x = tf.placeholder(dtype, shape=shape, name=name)\n    x._keras_shape = shape\n    x._uses_learning_phase = False\n    return x",
                        "signature": "placeholder(shape=None, ndim=None, dtype=None, sparse=False, name=None)"
                    },
                    {
                        "code": "def is_placeholder(x):\n    \"\"\"Returns whether `x` is a placeholder.\n\n    # Arguments\n        x: A candidate placeholder.\n\n    # Returns\n        Boolean.\n    \"\"\"\n    try:\n        return x.op.type == 'Placeholder'\n    except AttributeError:\n        return False",
                        "signature": "is_placeholder(x)"
                    },
                    {
                        "code": "def shape(x):\n    \"\"\"Returns the symbolic shape of a tensor or variable.\n\n    # Arguments\n        x: A tensor or variable.\n\n    # Returns\n        A symbolic shape (which is itself a tensor).\n\n    # Examples\n    ```python\n        # TensorFlow example\n        >>> from keras import backend as K\n        >>> tf_session = K.get_session()\n        >>> val = np.array([[1, 2], [3, 4]])\n        >>> kvar = K.variable(value=val)\n        >>> inputs = keras.backend.placeholder(shape=(2, 4, 5))\n        >>> K.shape(kvar)\n        <tf.Tensor 'Shape_8:0' shape=(2,) dtype=int32>\n        >>> K.shape(inputs)\n        <tf.Tensor 'Shape_9:0' shape=(3,) dtype=int32>\n        # To get integer shape (Instead, you can use K.int_shape(x))\n        >>> K.shape(kvar).eval(session=tf_session)\n        array([2, 2], dtype=int32)\n        >>> K.shape(inputs).eval(session=tf_session)\n        array([2, 4, 5], dtype=int32)\n    ```\n    \"\"\"\n    return tf.shape(x)",
                        "signature": "shape(x)"
                    },
                    {
                        "code": "def int_shape(x):\n    \"\"\"Returns the shape of tensor or variable as a tuple of int or None entries.\n\n    # Arguments\n        x: Tensor or variable.\n\n    # Returns\n        A tuple of integers (or None entries).\n\n    # Examples\n    ```python\n        >>> from keras import backend as K\n        >>> inputs = K.placeholder(shape=(2, 4, 5))\n        >>> K.int_shape(inputs)\n        (2, 4, 5)\n        >>> val = np.array([[1, 2], [3, 4]])\n        >>> kvar = K.variable(value=val)\n        >>> K.int_shape(kvar)\n        (2, 2)\n    ```\n    \"\"\"\n    if hasattr(x, '_keras_shape'):\n        return x._keras_shape\n    try:\n        return tuple(x.get_shape().as_list())\n    except ValueError:\n        return None",
                        "signature": "int_shape(x)"
                    },
                    {
                        "code": "def ndim(x):\n    \"\"\"Returns the number of axes in a tensor, as an integer.\n\n    # Arguments\n        x: Tensor or variable.\n\n    # Returns\n        Integer (scalar), number of axes.\n\n    # Examples\n    ```python\n        >>> from keras import backend as K\n        >>> inputs = K.placeholder(shape=(2, 4, 5))\n        >>> val = np.array([[1, 2], [3, 4]])\n        >>> kvar = K.variable(value=val)\n        >>> K.ndim(inputs)\n        3\n        >>> K.ndim(kvar)\n        2\n    ```\n    \"\"\"\n    dims = x.get_shape()._dims\n    if dims is not None:\n        return len(dims)\n    return None",
                        "signature": "ndim(x)"
                    },
                    {
                        "code": "def dtype(x):\n    \"\"\"Returns the dtype of a Keras tensor or variable, as a string.\n\n    # Arguments\n        x: Tensor or variable.\n\n    # Returns\n        String, dtype of `x`.\n\n    # Examples\n    ```python\n        >>> from keras import backend as K\n        >>> K.dtype(K.placeholder(shape=(2,4,5)))\n        'float32'\n        >>> K.dtype(K.placeholder(shape=(2,4,5), dtype='float32'))\n        'float32'\n        >>> K.dtype(K.placeholder(shape=(2,4,5), dtype='float64'))\n        'float64'\n        # Keras variable\n        >>> kvar = K.variable(np.array([[1, 2], [3, 4]]))\n        >>> K.dtype(kvar)\n        'float32_ref'\n        >>> kvar = K.variable(np.array([[1, 2], [3, 4]]), dtype='float32')\n        >>> K.dtype(kvar)\n        'float32_ref'\n    ```\n    \"\"\"\n    return x.dtype.base_dtype.name",
                        "signature": "dtype(x)"
                    },
                    {
                        "code": "def eval(x):\n    \"\"\"Evaluates the value of a variable.\n\n    # Arguments\n        x: A variable.\n\n    # Returns\n        A Numpy array.\n\n    # Examples\n    ```python\n        >>> from keras import backend as K\n        >>> kvar = K.variable(np.array([[1, 2], [3, 4]]), dtype='float32')\n        >>> K.eval(kvar)\n        array([[ 1.,  2.],\n               [ 3.,  4.]], dtype=float32)\n    ```\n    \"\"\"\n    return to_dense(x).eval(session=get_session())",
                        "signature": "eval(x)"
                    },
                    {
                        "code": "def zeros(shape, dtype=None, name=None):\n    \"\"\"Instantiates an all-zeros variable and returns it.\n\n    # Arguments\n        shape: Tuple of integers, shape of returned Keras variable\n        dtype: String, data type of returned Keras variable\n        name: String, name of returned Keras variable\n\n    # Returns\n        A variable (including Keras metadata), filled with `0.0`.\n        Note that if `shape` was symbolic, we cannot return a variable,\n        and will return a dynamically-shaped tensor instead.\n\n    # Example\n    ```python\n        >>> from keras import backend as K\n        >>> kvar = K.zeros((3,4))\n        >>> K.eval(kvar)\n        array([[ 0.,  0.,  0.,  0.],\n               [ 0.,  0.,  0.,  0.],\n               [ 0.,  0.,  0.,  0.]], dtype=float32)\n    ```\n    \"\"\"\n    if dtype is None:\n        dtype = floatx()\n    tf_dtype = tf.as_dtype(dtype)\n    v = tf.zeros(shape=shape, dtype=tf_dtype, name=name)\n    if py_all(v.get_shape().as_list()):\n        return variable(v, dtype=dtype, name=name)\n    return v",
                        "signature": "zeros(shape, dtype=None, name=None)"
                    },
                    {
                        "code": "def ones(shape, dtype=None, name=None):\n    \"\"\"Instantiates an all-ones variable and returns it.\n\n    # Arguments\n        shape: Tuple of integers, shape of returned Keras variable.\n        dtype: String, data type of returned Keras variable.\n        name: String, name of returned Keras variable.\n\n    # Returns\n        A Keras variable, filled with `1.0`.\n        Note that if `shape` was symbolic, we cannot return a variable,\n        and will return a dynamically-shaped tensor instead.\n\n    # Example\n    ```python\n        >>> from keras import backend as K\n        >>> kvar = K.ones((3,4))\n        >>> K.eval(kvar)\n        array([[ 1.,  1.,  1.,  1.],\n               [ 1.,  1.,  1.,  1.],\n               [ 1.,  1.,  1.,  1.]], dtype=float32)\n    ```\n    \"\"\"\n    if dtype is None:\n        dtype = floatx()\n    tf_dtype = tf.as_dtype(dtype)\n    v = tf.ones(shape=shape, dtype=tf_dtype, name=name)\n    if py_all(v.get_shape().as_list()):\n        return variable(v, dtype=dtype, name=name)\n    return v",
                        "signature": "ones(shape, dtype=None, name=None)"
                    },
                    {
                        "code": "def eye(size, dtype=None, name=None):\n    \"\"\"Instantiate an identity matrix and returns it.\n\n    # Arguments\n        size: Integer, number of rows/columns.\n        dtype: String, data type of returned Keras variable.\n        name: String, name of returned Keras variable.\n\n    # Returns\n        A Keras variable, an identity matrix.\n\n    # Example\n    ```python\n        >>> from keras import backend as K\n        >>> kvar = K.eye(3)\n        >>> K.eval(kvar)\n        array([[ 1.,  0.,  0.],\n               [ 0.,  1.,  0.],\n               [ 0.,  0.,  1.]], dtype=float32)\n    ```\n\n    \"\"\"\n    if dtype is None:\n        dtype = floatx()\n    tf_dtype = tf.as_dtype(dtype)\n    return variable(tf.eye(size, dtype=tf_dtype), dtype, name)",
                        "signature": "eye(size, dtype=None, name=None)"
                    },
                    {
                        "code": "def zeros_like(x, dtype=None, name=None):\n    \"\"\"Instantiates an all-zeros variable of the same shape as another tensor.\n\n    # Arguments\n        x: Keras variable or Keras tensor.\n        dtype: String, dtype of returned Keras variable.\n             None uses the dtype of x.\n        name: String, name for the variable to create.\n\n    # Returns\n        A Keras variable with the shape of x filled with zeros.\n\n    # Example\n    ```python\n        >>> from keras import backend as K\n        >>> kvar = K.variable(np.random.random((2,3)))\n        >>> kvar_zeros = K.zeros_like(kvar)\n        >>> K.eval(kvar_zeros)\n        array([[ 0.,  0.,  0.],\n               [ 0.,  0.,  0.]], dtype=float32)\n    ```\n    \"\"\"\n    return tf.zeros_like(x, dtype=dtype, name=name)",
                        "signature": "zeros_like(x, dtype=None, name=None)"
                    },
                    {
                        "code": "def ones_like(x, dtype=None, name=None):\n    \"\"\"Instantiates an all-ones variable of the same shape as another tensor.\n\n    # Arguments\n        x: Keras variable or tensor.\n        dtype: String, dtype of returned Keras variable.\n             None uses the dtype of x.\n        name: String, name for the variable to create.\n\n    # Returns\n        A Keras variable with the shape of x filled with ones.\n\n    # Example\n    ```python\n        >>> from keras import backend as K\n        >>> kvar = K.variable(np.random.random((2,3)))\n        >>> kvar_ones = K.ones_like(kvar)\n        >>> K.eval(kvar_ones)\n        array([[ 1.,  1.,  1.],\n               [ 1.,  1.,  1.]], dtype=float32)\n    ```\n    \"\"\"\n    return tf.ones_like(x, dtype=dtype, name=name)",
                        "signature": "ones_like(x, dtype=None, name=None)"
                    },
                    {
                        "code": "def identity(x, name=None):\n    \"\"\"Returns a tensor with the same content as the input tensor.\n\n    # Arguments\n        x: The input tensor.\n        name: String, name for the variable to create.\n\n    # Returns\n        A tensor of the same shape, type and content.\n    \"\"\"\n    return tf.identity(x, name)",
                        "signature": "identity(x, name=None)"
                    },
                    {
                        "code": "def random_uniform_variable(shape, low, high, dtype=None,\n                            name=None, seed=None):\n    \"\"\"Instantiates a variable with values drawn from a uniform distribution.\n\n    # Arguments\n        shape: Tuple of integers, shape of returned Keras variable.\n        low: Float, lower boundary of the output interval.\n        high: Float, upper boundary of the output interval.\n        dtype: String, dtype of returned Keras variable.\n        name: String, name of returned Keras variable.\n        seed: Integer, random seed.\n\n    # Returns\n        A Keras variable, filled with drawn samples.\n\n    # Example\n    ```python\n        # TensorFlow example\n        >>> kvar = K.random_uniform_variable((2,3), 0, 1)\n        >>> kvar\n        <tensorflow.python.ops.variables.Variable object at 0x10ab40b10>\n        >>> K.eval(kvar)\n        array([[ 0.10940075,  0.10047495,  0.476143  ],\n               [ 0.66137183,  0.00869417,  0.89220798]], dtype=float32)\n    ```\n    \"\"\"\n    if dtype is None:\n        dtype = floatx()\n    tf_dtype = tf.as_dtype(dtype)\n    if seed is None:\n        # ensure that randomness is conditioned by the Numpy RNG\n        seed = np.random.randint(10e8)\n    value = tf.random_uniform_initializer(\n        low, high, dtype=tf_dtype, seed=seed)(shape)\n    return variable(value, dtype=dtype, name=name)",
                        "signature": "random_uniform_variable(shape, low, high, dtype=None, name=None, seed=None)"
                    },
                    {
                        "code": "def random_normal_variable(shape, mean, scale, dtype=None,\n                           name=None, seed=None):\n    \"\"\"Instantiates a variable with values drawn from a normal distribution.\n\n    # Arguments\n        shape: Tuple of integers, shape of returned Keras variable.\n        mean: Float, mean of the normal distribution.\n        scale: Float, standard deviation of the normal distribution.\n        dtype: String, dtype of returned Keras variable.\n        name: String, name of returned Keras variable.\n        seed: Integer, random seed.\n\n    # Returns\n        A Keras variable, filled with drawn samples.\n\n    # Example\n    ```python\n        # TensorFlow example\n        >>> kvar = K.random_normal_variable((2,3), 0, 1)\n        >>> kvar\n        <tensorflow.python.ops.variables.Variable object at 0x10ab12dd0>\n        >>> K.eval(kvar)\n        array([[ 1.19591331,  0.68685907, -0.63814116],\n               [ 0.92629528,  0.28055015,  1.70484698]], dtype=float32)\n    ```\n    \"\"\"\n    if dtype is None:\n        dtype = floatx()\n    tf_dtype = tf.as_dtype(dtype)\n    if seed is None:\n        # ensure that randomness is conditioned by the Numpy RNG\n        seed = np.random.randint(10e8)\n    value = tf.random_normal_initializer(\n        mean, scale, dtype=tf_dtype, seed=seed)(shape)\n    return variable(value, dtype=dtype, name=name)",
                        "signature": "random_normal_variable(shape, mean, scale, dtype=None, name=None, seed=None)"
                    },
                    {
                        "code": "def count_params(x):\n    \"\"\"Returns the static number of elements in a Keras variable or tensor.\n\n    # Arguments\n        x: Keras variable or tensor.\n\n    # Returns\n        Integer, the number of elements in `x`, i.e., the product of the\n        array's static dimensions.\n\n    # Example\n    ```python\n        >>> kvar = K.zeros((2,3))\n        >>> K.count_params(kvar)\n        6\n        >>> K.eval(kvar)\n        array([[ 0.,  0.,  0.],\n               [ 0.,  0.,  0.]], dtype=float32)\n    ```\n    \"\"\"\n    return np.prod(int_shape(x))",
                        "signature": "count_params(x)"
                    },
                    {
                        "code": "def cast(x, dtype):\n    \"\"\"Casts a tensor to a different dtype and returns it.\n\n    You can cast a Keras variable but it still returns a Keras tensor.\n\n    # Arguments\n        x: Keras tensor (or variable).\n        dtype: String, either (`'float16'`, `'float32'`, or `'float64'`).\n\n    # Returns\n        Keras tensor with dtype `dtype`.\n\n    # Example\n    ```python\n        >>> from keras import backend as K\n        >>> input = K.placeholder((2, 3), dtype='float32')\n        >>> input\n        <tf.Tensor 'Placeholder_2:0' shape=(2, 3) dtype=float32>\n        # It doesn't work in-place as below.\n        >>> K.cast(input, dtype='float16')\n        <tf.Tensor 'Cast_1:0' shape=(2, 3) dtype=float16>\n        >>> input\n        <tf.Tensor 'Placeholder_2:0' shape=(2, 3) dtype=float32>\n        # you need to assign it.\n        >>> input = K.cast(input, dtype='float16')\n        >>> input\n        <tf.Tensor 'Cast_2:0' shape=(2, 3) dtype=float16>\n    ```\n    \"\"\"\n    return tf.cast(x, dtype)",
                        "signature": "cast(x, dtype)"
                    },
                    {
                        "code": "def update(x, new_x):\n    \"\"\"Update the value of `x` to `new_x`.\n\n    # Arguments\n        x: A `Variable`.\n        new_x: A tensor of same shape as `x`.\n\n    # Returns\n        The variable `x` updated.\n    \"\"\"\n    return tf.assign(x, new_x)",
                        "signature": "update(x, new_x)"
                    },
                    {
                        "code": "def update_add(x, increment):\n    \"\"\"Update the value of `x` by adding `increment`.\n\n    # Arguments\n        x: A `Variable`.\n        increment: A tensor of same shape as `x`.\n\n    # Returns\n        The variable `x` updated.\n    \"\"\"\n    return tf.assign_add(x, increment)",
                        "signature": "update_add(x, increment)"
                    },
                    {
                        "code": "def update_sub(x, decrement):\n    \"\"\"Update the value of `x` by subtracting `decrement`.\n\n    # Arguments\n        x: A `Variable`.\n        decrement: A tensor of same shape as `x`.\n\n    # Returns\n        The variable `x` updated.\n    \"\"\"\n    return tf.assign_sub(x, decrement)",
                        "signature": "update_sub(x, decrement)"
                    },
                    {
                        "code": "def moving_average_update(x, value, momentum):\n    \"\"\"Compute the moving average of a variable.\n\n    # Arguments\n        x: A `Variable`.\n        value: A tensor with the same shape as `x`.\n        momentum: The moving average momentum.\n\n    # Returns\n        An operation to update the variable.\n    \"\"\"\n    return moving_averages.assign_moving_average(\n        x, value, momentum, zero_debias=True)",
                        "signature": "moving_average_update(x, value, momentum)"
                    },
                    {
                        "code": "def dot(x, y):\n    \"\"\"Multiplies 2 tensors (and/or variables) and returns a *tensor*.\n\n    When attempting to multiply a nD tensor\n    with a nD tensor, it reproduces the Theano behavior.\n    (e.g. `(2, 3) * (4, 3, 5) -> (2, 4, 5)`)\n\n    # Arguments\n        x: Tensor or variable.\n        y: Tensor or variable.\n\n    # Returns\n        A tensor, dot product of `x` and `y`.\n\n    # Examples\n    ```python\n        # dot product between tensors\n        >>> x = K.placeholder(shape=(2, 3))\n        >>> y = K.placeholder(shape=(3, 4))\n        >>> xy = K.dot(x, y)\n        >>> xy\n        <tf.Tensor 'MatMul_9:0' shape=(2, 4) dtype=float32>\n    ```\n\n    ```python\n        # dot product between tensors\n        >>> x = K.placeholder(shape=(32, 28, 3))\n        >>> y = K.placeholder(shape=(3, 4))\n        >>> xy = K.dot(x, y)\n        >>> xy\n        <tf.Tensor 'MatMul_9:0' shape=(32, 28, 4) dtype=float32>\n    ```\n\n    ```python\n        # Theano-like behavior example\n        >>> x = K.random_uniform_variable(shape=(2, 3), low=0, high=1)\n        >>> y = K.ones((4, 3, 5))\n        >>> xy = K.dot(x, y)\n        >>> K.int_shape(xy)\n        (2, 4, 5)\n    ```\n    \"\"\"\n    if ndim(x) is not None and (ndim(x) > 2 or ndim(y) > 2):\n        x_shape = []\n        for i, s in zip(int_shape(x), tf.unstack(tf.shape(x))):\n            if i is not None:\n                x_shape.append(i)\n            else:\n                x_shape.append(s)\n        x_shape = tuple(x_shape)\n        y_shape = []\n        for i, s in zip(int_shape(y), tf.unstack(tf.shape(y))):\n            if i is not None:\n                y_shape.append(i)\n            else:\n                y_shape.append(s)\n        y_shape = tuple(y_shape)\n        y_permute_dim = list(range(ndim(y)))\n        y_permute_dim = [y_permute_dim.pop(-2)] + y_permute_dim\n        xt = tf.reshape(x, [-1, x_shape[-1]])\n        yt = tf.reshape(tf.transpose(y, perm=y_permute_dim), [y_shape[-2], -1])\n        return tf.reshape(tf.matmul(xt, yt),\n                          x_shape[:-1] + y_shape[:-2] + y_shape[-1:])\n    if is_sparse(x):\n        out = tf.sparse_tensor_dense_matmul(x, y)\n    else:\n        out = tf.matmul(x, y)\n    return out",
                        "signature": "dot(x, y)"
                    },
                    {
                        "code": "def batch_dot(x, y, axes=None):\n    \"\"\"Batchwise dot product.\n\n    `batch_dot` is used to compute dot product of `x` and `y` when\n    `x` and `y` are data in batch, i.e. in a shape of\n    `(batch_size, :)`.\n    `batch_dot` results in a tensor or variable with less dimensions\n    than the input. If the number of dimensions is reduced to 1,\n    we use `expand_dims` to make sure that ndim is at least 2.\n\n    # Arguments\n        x: Keras tensor or variable with `ndim >= 2`.\n        y: Keras tensor or variable with `ndim >= 2`.\n        axes: list of (or single) int with target dimensions.\n            The lengths of `axes[0]` and `axes[1]` should be the same.\n\n    # Returns\n        A tensor with shape equal to the concatenation of `x`'s shape\n        (less the dimension that was summed over) and `y`'s shape\n        (less the batch dimension and the dimension that was summed over).\n        If the final rank is 1, we reshape it to `(batch_size, 1)`.\n\n    # Examples\n        Assume `x = [[1, 2], [3, 4]]` and `y = [[5, 6], [7, 8]]`\n        `batch_dot(x, y, axes=1) = [[17], [53]]` which is the main diagonal\n        of `x.dot(y.T)`, although we never have to calculate the off-diagonal\n        elements.\n\n        Shape inference:\n        Let `x`'s shape be `(100, 20)` and `y`'s shape be `(100, 30, 20)`.\n        If `axes` is (1, 2), to find the output shape of resultant tensor,\n            loop through each dimension in `x`'s shape and `y`'s shape:\n\n        * `x.shape[0]` : 100 : append to output shape\n        * `x.shape[1]` : 20 : do not append to output shape,\n            dimension 1 of `x` has been summed over. (`dot_axes[0]` = 1)\n        * `y.shape[0]` : 100 : do not append to output shape,\n            always ignore first dimension of `y`\n        * `y.shape[1]` : 30 : append to output shape\n        * `y.shape[2]` : 20 : do not append to output shape,\n            dimension 2 of `y` has been summed over. (`dot_axes[1]` = 2)\n        `output_shape` = `(100, 30)`\n\n    ```python\n        >>> x_batch = K.ones(shape=(32, 20, 1))\n        >>> y_batch = K.ones(shape=(32, 30, 20))\n        >>> xy_batch_dot = K.batch_dot(x_batch, y_batch, axes=[1, 2])\n        >>> K.int_shape(xy_batch_dot)\n        (32, 1, 30)\n    ```\n    \"\"\"\n    if isinstance(axes, int):\n        axes = (axes, axes)\n    x_ndim = ndim(x)\n    y_ndim = ndim(y)\n    if x_ndim > y_ndim:\n        diff = x_ndim - y_ndim\n        y = tf.reshape(y, tf.concat([tf.shape(y), [1] * (diff)], axis=0))\n    elif y_ndim > x_ndim:\n        diff = y_ndim - x_ndim\n        x = tf.reshape(x, tf.concat([tf.shape(x), [1] * (diff)], axis=0))\n    else:\n        diff = 0\n    if ndim(x) == 2 and ndim(y) == 2:\n        if axes[0] == axes[1]:\n            out = tf.reduce_sum(tf.multiply(x, y), axes[0])\n        else:\n            out = tf.reduce_sum(tf.multiply(tf.transpose(x, [1, 0]), y), axes[1])\n    else:\n        if axes is not None:\n            adj_x = None if axes[0] == ndim(x) - 1 else True\n            adj_y = True if axes[1] == ndim(y) - 1 else None\n        else:\n            adj_x = None\n            adj_y = None\n        out = tf.matmul(x, y, adjoint_a=adj_x, adjoint_b=adj_y)\n    if diff:\n        if x_ndim > y_ndim:\n            idx = x_ndim + y_ndim - 3\n        else:\n            idx = x_ndim - 1\n        out = tf.squeeze(out, list(range(idx, idx + diff)))\n    if ndim(out) == 1:\n        out = expand_dims(out, 1)\n    return out",
                        "signature": "batch_dot(x, y, axes=None)"
                    },
                    {
                        "code": "def transpose(x):\n    \"\"\"Transposes a tensor and returns it.\n\n    # Arguments\n        x: Tensor or variable.\n\n    # Returns\n        A tensor.\n\n    # Examples\n    ```python\n        >>> var = K.variable([[1, 2, 3], [4, 5, 6]])\n        >>> K.eval(var)\n        array([[ 1.,  2.,  3.],\n               [ 4.,  5.,  6.]], dtype=float32)\n        >>> var_transposed = K.transpose(var)\n        >>> K.eval(var_transposed)\n        array([[ 1.,  4.],\n               [ 2.,  5.],\n               [ 3.,  6.]], dtype=float32)\n    ```\n\n    ```python\n        >>> inputs = K.placeholder((2, 3))\n        >>> inputs\n        <tf.Tensor 'Placeholder_11:0' shape=(2, 3) dtype=float32>\n        >>> input_transposed = K.transpose(inputs)\n        >>> input_transposed\n        <tf.Tensor 'transpose_4:0' shape=(3, 2) dtype=float32>\n\n    ```\n    \"\"\"\n    return tf.transpose(x)",
                        "signature": "transpose(x)"
                    },
                    {
                        "code": "def gather(reference, indices):\n    \"\"\"Retrieves the elements of indices `indices` in the tensor `reference`.\n\n    # Arguments\n        reference: A tensor.\n        indices: An integer tensor of indices.\n\n    # Returns\n        A tensor of same type as `reference`.\n    \"\"\"\n    return tf.gather(reference, indices)",
                        "signature": "gather(reference, indices)"
                    },
                    {
                        "code": "def max(x, axis=None, keepdims=False):\n    \"\"\"Maximum value in a tensor.\n\n    # Arguments\n        x: A tensor or variable.\n        axis: An integer, the axis to find maximum values.\n        keepdims: A boolean, whether to keep the dimensions or not.\n            If `keepdims` is `False`, the rank of the tensor is reduced\n            by 1. If `keepdims` is `True`,\n            the reduced dimension is retained with length 1.\n\n    # Returns\n        A tensor with maximum values of `x`.\n    \"\"\"\n    return tf.reduce_max(x, axis, keepdims)",
                        "signature": "max(x, axis=None, keepdims=False)"
                    },
                    {
                        "code": "def min(x, axis=None, keepdims=False):\n    \"\"\"Minimum value in a tensor.\n\n    # Arguments\n        x: A tensor or variable.\n        axis: An integer, the axis to find minimum values.\n        keepdims: A boolean, whether to keep the dimensions or not.\n            If `keepdims` is `False`, the rank of the tensor is reduced\n            by 1. If `keepdims` is `True`,\n            the reduced dimension is retained with length 1.\n\n    # Returns\n        A tensor with miminum values of `x`.\n    \"\"\"\n    return tf.reduce_min(x, axis, keepdims)",
                        "signature": "min(x, axis=None, keepdims=False)"
                    },
                    {
                        "code": "def sum(x, axis=None, keepdims=False):\n    \"\"\"Sum of the values in a tensor, alongside the specified axis.\n\n    # Arguments\n        x: A tensor or variable.\n        axis: An integer, the axis to sum over.\n        keepdims: A boolean, whether to keep the dimensions or not.\n            If `keepdims` is `False`, the rank of the tensor is reduced\n            by 1. If `keepdims` is `True`,\n            the reduced dimension is retained with length 1.\n\n    # Returns\n        A tensor with sum of `x`.\n    \"\"\"\n    return tf.reduce_sum(x, axis, keepdims)",
                        "signature": "sum(x, axis=None, keepdims=False)"
                    },
                    {
                        "code": "def prod(x, axis=None, keepdims=False):\n    \"\"\"Multiplies the values in a tensor, alongside the specified axis.\n\n    # Arguments\n        x: A tensor or variable.\n        axis: An integer, the axis to compute the product.\n        keepdims: A boolean, whether to keep the dimensions or not.\n            If `keepdims` is `False`, the rank of the tensor is reduced\n            by 1. If `keepdims` is `True`,\n            the reduced dimension is retained with length 1.\n\n    # Returns\n        A tensor with the product of elements of `x`.\n    \"\"\"\n    return tf.reduce_prod(x, axis, keepdims)",
                        "signature": "prod(x, axis=None, keepdims=False)"
                    },
                    {
                        "code": "def cumsum(x, axis=0):\n    \"\"\"Cumulative sum of the values in a tensor, alongside the specified axis.\n\n    # Arguments\n        x: A tensor or variable.\n        axis: An integer, the axis to compute the sum.\n\n    # Returns\n        A tensor of the cumulative sum of values of `x` along `axis`.\n    \"\"\"\n    return tf.cumsum(x, axis=axis)",
                        "signature": "cumsum(x, axis=0)"
                    },
                    {
                        "code": "def cumprod(x, axis=0):\n    \"\"\"Cumulative product of the values in a tensor, alongside the specified axis.\n\n    # Arguments\n        x: A tensor or variable.\n        axis: An integer, the axis to compute the product.\n\n    # Returns\n        A tensor of the cumulative product of values of `x` along `axis`.\n    \"\"\"\n    return tf.cumprod(x, axis=axis)",
                        "signature": "cumprod(x, axis=0)"
                    },
                    {
                        "code": "def var(x, axis=None, keepdims=False):\n    \"\"\"Variance of a tensor, alongside the specified axis.\n\n    # Arguments\n        x: A tensor or variable.\n        axis: An integer, the axis to compute the variance.\n        keepdims: A boolean, whether to keep the dimensions or not.\n            If `keepdims` is `False`, the rank of the tensor is reduced\n            by 1. If `keepdims` is `True`,\n            the reduced dimension is retained with length 1.\n\n    # Returns\n        A tensor with the variance of elements of `x`.\n    \"\"\"\n    if x.dtype.base_dtype == tf.bool:\n        x = tf.cast(x, floatx())\n    m = tf.reduce_mean(x, axis, True)\n    devs_squared = tf.square(x - m)\n    return tf.reduce_mean(devs_squared,\n                          axis,\n                          keepdims)",
                        "signature": "var(x, axis=None, keepdims=False)"
                    },
                    {
                        "code": "def std(x, axis=None, keepdims=False):\n    \"\"\"Standard deviation of a tensor, alongside the specified axis.\n\n    # Arguments\n        x: A tensor or variable.\n        axis: An integer, the axis to compute the standard deviation.\n        keepdims: A boolean, whether to keep the dimensions or not.\n            If `keepdims` is `False`, the rank of the tensor is reduced\n            by 1. If `keepdims` is `True`,\n            the reduced dimension is retained with length 1.\n\n    # Returns\n        A tensor with the standard deviation of elements of `x`.\n    \"\"\"\n    return tf.sqrt(var(x, axis=axis, keepdims=keepdims))",
                        "signature": "std(x, axis=None, keepdims=False)"
                    },
                    {
                        "code": "def mean(x, axis=None, keepdims=False):\n    \"\"\"Mean of a tensor, alongside the specified axis.\n\n    # Arguments\n        x: A tensor or variable.\n        axis: A list of integer. Axes to compute the mean.\n        keepdims: A boolean, whether to keep the dimensions or not.\n            If `keepdims` is `False`, the rank of the tensor is reduced\n            by 1 for each entry in `axis`. If `keepdims` is `True`,\n            the reduced dimensions are retained with length 1.\n\n    # Returns\n        A tensor with the mean of elements of `x`.\n    \"\"\"\n    if x.dtype.base_dtype == tf.bool:\n        x = tf.cast(x, floatx())\n    return tf.reduce_mean(x, axis, keepdims)",
                        "signature": "mean(x, axis=None, keepdims=False)"
                    },
                    {
                        "code": "def any(x, axis=None, keepdims=False):\n    \"\"\"Bitwise reduction (logical OR).\n\n    # Arguments\n        x: Tensor or variable.\n        axis: axis along which to perform the reduction.\n        keepdims: whether the drop or broadcast the reduction axes.\n\n    # Returns\n        A uint8 tensor (0s and 1s).\n    \"\"\"\n    x = tf.cast(x, tf.bool)\n    return tf.reduce_any(x, axis, keepdims)",
                        "signature": "any(x, axis=None, keepdims=False)"
                    },
                    {
                        "code": "def all(x, axis=None, keepdims=False):\n    \"\"\"Bitwise reduction (logical AND).\n\n    # Arguments\n        x: Tensor or variable.\n        axis: axis along which to perform the reduction.\n        keepdims: whether the drop or broadcast the reduction axes.\n\n    # Returns\n        A uint8 tensor (0s and 1s).\n    \"\"\"\n    x = tf.cast(x, tf.bool)\n    return tf.reduce_all(x, axis, keepdims)",
                        "signature": "all(x, axis=None, keepdims=False)"
                    },
                    {
                        "code": "def argmax(x, axis=-1):\n    \"\"\"Returns the index of the maximum value along an axis.\n\n    # Arguments\n        x: Tensor or variable.\n        axis: axis along which to perform the reduction.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.argmax(x, axis)",
                        "signature": "argmax(x, axis=-1)"
                    },
                    {
                        "code": "def argmin(x, axis=-1):\n    \"\"\"Returns the index of the minimum value along an axis.\n\n    # Arguments\n        x: Tensor or variable.\n        axis: axis along which to perform the reduction.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.argmin(x, axis)",
                        "signature": "argmin(x, axis=-1)"
                    },
                    {
                        "code": "def square(x):\n    \"\"\"Element-wise square.\n\n    # Arguments\n        x: Tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.square(x)",
                        "signature": "square(x)"
                    },
                    {
                        "code": "def abs(x):\n    \"\"\"Element-wise absolute value.\n\n    # Arguments\n        x: Tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.abs(x)",
                        "signature": "abs(x)"
                    },
                    {
                        "code": "def sqrt(x):\n    \"\"\"Element-wise square root.\n\n    # Arguments\n        x: Tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    zero = _to_tensor(0., x.dtype.base_dtype)\n    inf = _to_tensor(np.inf, x.dtype.base_dtype)\n    x = tf.clip_by_value(x, zero, inf)\n    return tf.sqrt(x)",
                        "signature": "sqrt(x)"
                    },
                    {
                        "code": "def exp(x):\n    \"\"\"Element-wise exponential.\n\n    # Arguments\n        x: Tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.exp(x)",
                        "signature": "exp(x)"
                    },
                    {
                        "code": "def log(x):\n    \"\"\"Element-wise log.\n\n    # Arguments\n        x: Tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.log(x)",
                        "signature": "log(x)"
                    },
                    {
                        "code": "def logsumexp(x, axis=None, keepdims=False):\n    \"\"\"Computes log(sum(exp(elements across dimensions of a tensor))).\n\n    This function is more numerically stable than log(sum(exp(x))).\n    It avoids overflows caused by taking the exp of large inputs and\n    underflows caused by taking the log of small inputs.\n\n    # Arguments\n        x: A tensor or variable.\n        axis: An integer, the axis to reduce over.\n        keepdims: A boolean, whether to keep the dimensions or not.\n            If `keepdims` is `False`, the rank of the tensor is reduced\n            by 1. If `keepdims` is `True`, the reduced dimension is\n            retained with length 1.\n\n    # Returns\n        The reduced tensor.\n    \"\"\"\n    return tf.reduce_logsumexp(x, axis, keepdims)",
                        "signature": "logsumexp(x, axis=None, keepdims=False)"
                    },
                    {
                        "code": "def round(x):\n    \"\"\"Element-wise rounding to the closest integer.\n\n    In case of tie, the rounding mode used is \"half to even\".\n\n    # Arguments\n        x: Tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.round(x)",
                        "signature": "round(x)"
                    },
                    {
                        "code": "def sign(x):\n    \"\"\"Element-wise sign.\n\n    # Arguments\n        x: Tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.sign(x)",
                        "signature": "sign(x)"
                    },
                    {
                        "code": "def pow(x, a):\n    \"\"\"Element-wise exponentiation.\n\n    # Arguments\n        x: Tensor or variable.\n        a: Python integer.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.pow(x, a)",
                        "signature": "pow(x, a)"
                    },
                    {
                        "code": "def clip(x, min_value, max_value):\n    \"\"\"Element-wise value clipping.\n\n    # Arguments\n        x: Tensor or variable.\n        min_value: Python float or integer.\n        max_value: Python float or integer.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    if max_value is not None and max_value < min_value:\n        max_value = min_value\n    if max_value is None:\n        max_value = np.inf\n    min_value = _to_tensor(min_value, x.dtype.base_dtype)\n    max_value = _to_tensor(max_value, x.dtype.base_dtype)\n    return tf.clip_by_value(x, min_value, max_value)",
                        "signature": "clip(x, min_value, max_value)"
                    },
                    {
                        "code": "def equal(x, y):\n    \"\"\"Element-wise equality between two tensors.\n\n    # Arguments\n        x: Tensor or variable.\n        y: Tensor or variable.\n\n    # Returns\n        A bool tensor.\n    \"\"\"\n    return tf.equal(x, y)",
                        "signature": "equal(x, y)"
                    },
                    {
                        "code": "def not_equal(x, y):\n    \"\"\"Element-wise inequality between two tensors.\n\n    # Arguments\n        x: Tensor or variable.\n        y: Tensor or variable.\n\n    # Returns\n        A bool tensor.\n    \"\"\"\n    return tf.not_equal(x, y)",
                        "signature": "not_equal(x, y)"
                    },
                    {
                        "code": "def greater(x, y):\n    \"\"\"Element-wise truth value of (x > y).\n\n    # Arguments\n        x: Tensor or variable.\n        y: Tensor or variable.\n\n    # Returns\n        A bool tensor.\n    \"\"\"\n    return tf.greater(x, y)",
                        "signature": "greater(x, y)"
                    },
                    {
                        "code": "def greater_equal(x, y):\n    \"\"\"Element-wise truth value of (x >= y).\n\n    # Arguments\n        x: Tensor or variable.\n        y: Tensor or variable.\n\n    # Returns\n        A bool tensor.\n    \"\"\"\n    return tf.greater_equal(x, y)",
                        "signature": "greater_equal(x, y)"
                    },
                    {
                        "code": "def less(x, y):\n    \"\"\"Element-wise truth value of (x < y).\n\n    # Arguments\n        x: Tensor or variable.\n        y: Tensor or variable.\n\n    # Returns\n        A bool tensor.\n    \"\"\"\n    return tf.less(x, y)",
                        "signature": "less(x, y)"
                    },
                    {
                        "code": "def less_equal(x, y):\n    \"\"\"Element-wise truth value of (x <= y).\n\n    # Arguments\n        x: Tensor or variable.\n        y: Tensor or variable.\n\n    # Returns\n        A bool tensor.\n    \"\"\"\n    return tf.less_equal(x, y)",
                        "signature": "less_equal(x, y)"
                    },
                    {
                        "code": "def maximum(x, y):\n    \"\"\"Element-wise maximum of two tensors.\n\n    # Arguments\n        x: Tensor or variable.\n        y: Tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.maximum(x, y)",
                        "signature": "maximum(x, y)"
                    },
                    {
                        "code": "def minimum(x, y):\n    \"\"\"Element-wise minimum of two tensors.\n\n    # Arguments\n        x: Tensor or variable.\n        y: Tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.minimum(x, y)",
                        "signature": "minimum(x, y)"
                    },
                    {
                        "code": "def sin(x):\n    \"\"\"Computes sin of x element-wise.\n\n    # Arguments\n        x: Tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.sin(x)",
                        "signature": "sin(x)"
                    },
                    {
                        "code": "def cos(x):\n    \"\"\"Computes cos of x element-wise.\n\n    # Arguments\n        x: Tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.cos(x)",
                        "signature": "cos(x)"
                    },
                    {
                        "code": "def _regular_normalize_batch_in_training(x, gamma, beta,\n                                         reduction_axes, epsilon=1e-3):\n    \"\"\"Non-fused version of `normalize_batch_in_training`.\n\n    # Arguments\n        x: Input tensor or variable.\n        gamma: Tensor by which to scale the input.\n        beta: Tensor with which to center the input.\n        reduction_axes: iterable of integers,\n            axes over which to normalize.\n        epsilon: Fuzz factor.\n\n    # Returns\n        A tuple length of 3, `(normalized_tensor, mean, variance)`.\n    \"\"\"\n    mean, var = tf.nn.moments(x, reduction_axes,\n                              None, None, False)\n    normed = tf.nn.batch_normalization(x, mean, var,\n                                       beta, gamma,\n                                       epsilon)\n    return normed, mean, var",
                        "signature": "_regular_normalize_batch_in_training(x, gamma, beta, reduction_axes, epsilon=0.001)"
                    },
                    {
                        "code": "def _broadcast_normalize_batch_in_training(x, gamma, beta,\n                                           reduction_axes, epsilon=1e-3):\n    \"\"\"Non-fused, broadcast version of `normalize_batch_in_training`.\n\n    # Arguments\n        x: Input tensor or variable.\n        gamma: Tensor by which to scale the input.\n        beta: Tensor with which to center the input.\n        reduction_axes: iterable of integers,\n            axes over which to normalize.\n        epsilon: Fuzz factor.\n\n    # Returns\n        A tuple length of 3, `(normalized_tensor, mean, variance)`.\n    \"\"\"\n    mean, var = tf.nn.moments(x, reduction_axes,\n                              None, None, False)\n    target_shape = []\n    for axis in range(ndim(x)):\n        if axis in reduction_axes:\n            target_shape.append(1)\n        else:\n            target_shape.append(tf.shape(x)[axis])\n    target_shape = tf.stack(target_shape)\n\n    broadcast_mean = tf.reshape(mean, target_shape)\n    broadcast_var = tf.reshape(var, target_shape)\n    if gamma is None:\n        broadcast_gamma = None\n    else:\n        broadcast_gamma = tf.reshape(gamma, target_shape)\n    if beta is None:\n        broadcast_beta = None\n    else:\n        broadcast_beta = tf.reshape(beta, target_shape)\n\n    normed = tf.nn.batch_normalization(\n        x,\n        broadcast_mean,\n        broadcast_var,\n        broadcast_beta,\n        broadcast_gamma,\n        epsilon)\n    return normed, mean, var",
                        "signature": "_broadcast_normalize_batch_in_training(x, gamma, beta, reduction_axes, epsilon=0.001)"
                    },
                    {
                        "code": "def _fused_normalize_batch_in_training(x, gamma, beta, reduction_axes,\n                                       epsilon=1e-3):\n    \"\"\"Fused version of `normalize_batch_in_training`.\n\n    # Arguments\n        x: Input tensor or variable.\n        gamma: Tensor by which to scale the input.\n        beta: Tensor with which to center the input.\n        reduction_axes: iterable of integers,\n            axes over which to normalize.\n        epsilon: Fuzz factor.\n\n    # Returns\n        A tuple length of 3, `(normalized_tensor, mean, variance)`.\n    \"\"\"\n    if list(reduction_axes) == [0, 1, 2]:\n        normalization_axis = 3\n        tf_data_format = 'NHWC'\n    else:\n        normalization_axis = 1\n        tf_data_format = 'NCHW'\n\n    if gamma is None:\n        gamma = tf.constant(1.0,\n                            dtype=x.dtype,\n                            shape=[x.get_shape()[normalization_axis]])\n    if beta is None:\n        beta = tf.constant(0.0,\n                           dtype=x.dtype,\n                           shape=[x.get_shape()[normalization_axis]])\n\n    return tf.nn.fused_batch_norm(\n        x,\n        gamma,\n        beta,\n        epsilon=epsilon,\n        data_format=tf_data_format)",
                        "signature": "_fused_normalize_batch_in_training(x, gamma, beta, reduction_axes, epsilon=0.001)"
                    },
                    {
                        "code": "def normalize_batch_in_training(x, gamma, beta,\n                                reduction_axes, epsilon=1e-3):\n    \"\"\"Computes mean and std for batch then apply batch_normalization on batch.\n\n    # Arguments\n        x: Input tensor or variable.\n        gamma: Tensor by which to scale the input.\n        beta: Tensor with which to center the input.\n        reduction_axes: iterable of integers,\n            axes over which to normalize.\n        epsilon: Fuzz factor.\n\n    # Returns\n        A tuple length of 3, `(normalized_tensor, mean, variance)`.\n    \"\"\"\n    if ndim(x) == 4 and list(reduction_axes) in [[0, 1, 2], [0, 2, 3]]:\n        if not _has_nchw_support() and list(reduction_axes) == [0, 2, 3]:\n            return _broadcast_normalize_batch_in_training(x, gamma, beta,\n                                                          reduction_axes,\n                                                          epsilon=epsilon)\n        return _fused_normalize_batch_in_training(\n            x, gamma, beta, reduction_axes,\n            epsilon=epsilon)\n    else:\n        if sorted(reduction_axes) == list(range(ndim(x)))[:-1]:\n            return _regular_normalize_batch_in_training(x, gamma, beta,\n                                                        reduction_axes,\n                                                        epsilon=epsilon)\n        else:\n            return _broadcast_normalize_batch_in_training(x, gamma, beta,\n                                                          reduction_axes,\n                                                          epsilon=epsilon)",
                        "signature": "normalize_batch_in_training(x, gamma, beta, reduction_axes, epsilon=0.001)"
                    },
                    {
                        "code": "def batch_normalization(x, mean, var, beta, gamma, epsilon=1e-3):\n    \"\"\"Applies batch normalization on x given mean, var, beta and gamma.\n\n    I.e. returns:\n    `output = (x - mean) / (sqrt(var) + epsilon) * gamma + beta`\n\n    # Arguments\n        x: Input tensor or variable.\n        mean: Mean of batch.\n        var: Variance of batch.\n        beta: Tensor with which to center the input.\n        gamma: Tensor by which to scale the input.\n        epsilon: Fuzz factor.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.nn.batch_normalization(x, mean, var, beta, gamma, epsilon)",
                        "signature": "batch_normalization(x, mean, var, beta, gamma, epsilon=0.001)"
                    },
                    {
                        "code": "def concatenate(tensors, axis=-1):\n    \"\"\"Concatenates a list of tensors alongside the specified axis.\n\n    # Arguments\n        tensors: list of tensors to concatenate.\n        axis: concatenation axis.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    if axis < 0:\n        rank = ndim(tensors[0])\n        if rank:\n            axis %= rank\n        else:\n            axis = 0\n\n    if py_all([is_sparse(x) for x in tensors]):\n        return tf.sparse_concat(axis, tensors)\n    else:\n        return tf.concat([to_dense(x) for x in tensors], axis)",
                        "signature": "concatenate(tensors, axis=-1)"
                    },
                    {
                        "code": "def reshape(x, shape):\n    \"\"\"Reshapes a tensor to the specified shape.\n\n    # Arguments\n        x: Tensor or variable.\n        shape: Target shape tuple.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.reshape(x, shape)",
                        "signature": "reshape(x, shape)"
                    },
                    {
                        "code": "def permute_dimensions(x, pattern):\n    \"\"\"Permutes axes in a tensor.\n\n    # Arguments\n        x: Tensor or variable.\n        pattern: A tuple of\n            dimension indices, e.g. `(0, 2, 1)`.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.transpose(x, perm=pattern)",
                        "signature": "permute_dimensions(x, pattern)"
                    },
                    {
                        "code": "def resize_images(x, height_factor, width_factor, data_format):\n    \"\"\"Resizes the images contained in a 4D tensor.\n\n    # Arguments\n        x: Tensor or variable to resize.\n        height_factor: Positive integer.\n        width_factor: Positive integer.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n\n    # Returns\n        A tensor.\n\n    # Raises\n        ValueError: if `data_format` is neither `\"channels_last\"` or `\"channels_first\"`.\n    \"\"\"\n    if data_format == 'channels_first':\n        original_shape = int_shape(x)\n        new_shape = tf.shape(x)[2:]\n        new_shape *= tf.constant(np.array([height_factor, width_factor]).astype('int32'))\n        x = permute_dimensions(x, [0, 2, 3, 1])\n        x = tf.image.resize_nearest_neighbor(x, new_shape)\n        x = permute_dimensions(x, [0, 3, 1, 2])\n        x.set_shape((None, None, original_shape[2] * height_factor if original_shape[2] is not None else None,\n                     original_shape[3] * width_factor if original_shape[3] is not None else None))\n        return x\n    elif data_format == 'channels_last':\n        original_shape = int_shape(x)\n        new_shape = tf.shape(x)[1:3]\n        new_shape *= tf.constant(np.array([height_factor, width_factor]).astype('int32'))\n        x = tf.image.resize_nearest_neighbor(x, new_shape)\n        x.set_shape((None, original_shape[1] * height_factor if original_shape[1] is not None else None,\n                     original_shape[2] * width_factor if original_shape[2] is not None else None, None))\n        return x\n    else:\n        raise ValueError('Unknown data_format: ' + str(data_format))",
                        "signature": "resize_images(x, height_factor, width_factor, data_format)"
                    },
                    {
                        "code": "def resize_volumes(x, depth_factor, height_factor, width_factor, data_format):\n    \"\"\"Resizes the volume contained in a 5D tensor.\n\n    # Arguments\n        x: Tensor or variable to resize.\n        depth_factor: Positive integer.\n        height_factor: Positive integer.\n        width_factor: Positive integer.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n\n    # Returns\n        A tensor.\n\n    # Raises\n        ValueError: if `data_format` is neither `\"channels_last\"` or `\"channels_first\"`.\n    \"\"\"\n    if data_format == 'channels_first':\n        output = repeat_elements(x, depth_factor, axis=2)\n        output = repeat_elements(output, height_factor, axis=3)\n        output = repeat_elements(output, width_factor, axis=4)\n        return output\n    elif data_format == 'channels_last':\n        output = repeat_elements(x, depth_factor, axis=1)\n        output = repeat_elements(output, height_factor, axis=2)\n        output = repeat_elements(output, width_factor, axis=3)\n        return output\n    else:\n        raise ValueError('Unknown data_format: ' + str(data_format))",
                        "signature": "resize_volumes(x, depth_factor, height_factor, width_factor, data_format)"
                    },
                    {
                        "code": "def repeat_elements(x, rep, axis):\n    \"\"\"Repeats the elements of a tensor along an axis, like `np.repeat`.\n\n    If `x` has shape `(s1, s2, s3)` and `axis` is `1`, the output\n    will have shape `(s1, s2 * rep, s3)`.\n\n    # Arguments\n        x: Tensor or variable.\n        rep: Python integer, number of times to repeat.\n        axis: Axis along which to repeat.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    x_shape = x.get_shape().as_list()\n    # For static axis\n    if x_shape[axis] is not None:\n        # slices along the repeat axis\n        splits = tf.split(value=x, num_or_size_splits=x_shape[axis], axis=axis)\n        # repeat each slice the given number of reps\n        x_rep = [s for s in splits for _ in range(rep)]\n        return concatenate(x_rep, axis)\n\n    # Here we use tf.tile to mimic behavior of np.repeat so that\n    # we can handle dynamic shapes (that include None).\n    # To do that, we need an auxiliary axis to repeat elements along\n    # it and then merge them along the desired axis.\n\n    # Repeating\n    auxiliary_axis = axis + 1\n    x_shape = tf.shape(x)\n    x_rep = tf.expand_dims(x, axis=auxiliary_axis)\n    reps = np.ones(len(x.get_shape()) + 1)\n    reps[auxiliary_axis] = rep\n    x_rep = tf.tile(x_rep, reps)\n\n    # Merging\n    reps = np.delete(reps, auxiliary_axis)\n    reps[axis] = rep\n    reps = tf.constant(reps, dtype='int32')\n    x_shape = x_shape * reps\n    x_rep = tf.reshape(x_rep, x_shape)\n\n    # Fix shape representation\n    x_shape = x.get_shape().as_list()\n    x_rep.set_shape(x_shape)\n    x_rep._keras_shape = tuple(x_shape)\n    return x_rep",
                        "signature": "repeat_elements(x, rep, axis)"
                    },
                    {
                        "code": "def repeat(x, n):\n    \"\"\"Repeats a 2D tensor.\n\n    if `x` has shape (samples, dim) and `n` is `2`,\n    the output will have shape `(samples, 2, dim)`.\n\n    # Arguments\n        x: Tensor or variable.\n        n: Python integer, number of times to repeat.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    assert ndim(x) == 2\n    x = tf.expand_dims(x, 1)\n    pattern = tf.stack([1, n, 1])\n    return tf.tile(x, pattern)",
                        "signature": "repeat(x, n)"
                    },
                    {
                        "code": "def arange(start, stop=None, step=1, dtype='int32'):\n    \"\"\"Creates a 1D tensor containing a sequence of integers.\n\n    The function arguments use the same convention as\n    Theano's arange: if only one argument is provided,\n    it is in fact the \"stop\" argument and \"start\" is 0.\n\n    The default type of the returned tensor is `'int32'` to\n    match TensorFlow's default.\n\n    # Arguments\n        start: Start value.\n        stop: Stop value.\n        step: Difference between two successive values.\n        dtype: Integer dtype to use.\n\n    # Returns\n        An integer tensor.\n\n    \"\"\"\n    # Match the behavior of numpy and Theano by returning an empty sequence.\n    if stop is None:\n        try:\n            if start < 0:\n                start = 0\n        except TypeError:\n            # Handle case where start is a tensor\n            start = tf.cond(start < 0,\n                            true_fn=lambda: tf.constant(0, dtype=start.dtype),\n                            false_fn=lambda: start)\n\n    result = tf.range(start, limit=stop, delta=step, name='arange')\n    if dtype != 'int32':\n        result = cast(result, dtype)\n    return result",
                        "signature": "arange(start, stop=None, step=1, dtype='int32')"
                    },
                    {
                        "code": "def tile(x, n):\n    \"\"\"Creates a tensor by tiling `x` by `n`.\n\n    # Arguments\n        x: A tensor or variable\n        n: A list of integer. The length must be the same as the number of\n            dimensions in `x`.\n\n    # Returns\n        A tiled tensor.\n    \"\"\"\n    if isinstance(n, int):\n        n = [n]\n    return tf.tile(x, n)",
                        "signature": "tile(x, n)"
                    },
                    {
                        "code": "def flatten(x):\n    \"\"\"Flatten a tensor.\n\n    # Arguments\n        x: A tensor or variable.\n\n    # Returns\n        A tensor, reshaped into 1-D\n    \"\"\"\n    return tf.reshape(x, [-1])",
                        "signature": "flatten(x)"
                    },
                    {
                        "code": "def batch_flatten(x):\n    \"\"\"Turn a nD tensor into a 2D tensor with same 0th dimension.\n\n    In other words, it flattens each data samples of a batch.\n\n    # Arguments\n        x: A tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    x = tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))\n    return x",
                        "signature": "batch_flatten(x)"
                    },
                    {
                        "code": "def expand_dims(x, axis=-1):\n    \"\"\"Adds a 1-sized dimension at index \"axis\".\n\n    # Arguments\n        x: A tensor or variable.\n        axis: Position where to add a new axis.\n\n    # Returns\n        A tensor with expanded dimensions.\n    \"\"\"\n    return tf.expand_dims(x, axis)",
                        "signature": "expand_dims(x, axis=-1)"
                    },
                    {
                        "code": "def squeeze(x, axis):\n    \"\"\"Removes a 1-dimension from the tensor at index \"axis\".\n\n    # Arguments\n        x: A tensor or variable.\n        axis: Axis to drop.\n\n    # Returns\n        A tensor with the same data as `x` but reduced dimensions.\n    \"\"\"\n    return tf.squeeze(x, [axis])",
                        "signature": "squeeze(x, axis)"
                    },
                    {
                        "code": "def temporal_padding(x, padding=(1, 1)):\n    \"\"\"Pads the middle dimension of a 3D tensor.\n\n    # Arguments\n        x: Tensor or variable.\n        padding: Tuple of 2 integers, how many zeros to\n            add at the start and end of dim 1.\n\n    # Returns\n        A padded 3D tensor.\n    \"\"\"\n    assert len(padding) == 2\n    pattern = [[0, 0], [padding[0], padding[1]], [0, 0]]\n    return tf.pad(x, pattern)",
                        "signature": "temporal_padding(x, padding=(1, 1))"
                    },
                    {
                        "code": "def spatial_2d_padding(x, padding=((1, 1), (1, 1)), data_format=None):\n    \"\"\"Pads the 2nd and 3rd dimensions of a 4D tensor.\n\n    # Arguments\n        x: Tensor or variable.\n        padding: Tuple of 2 tuples, padding pattern.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n\n    # Returns\n        A padded 4D tensor.\n\n    # Raises\n        ValueError: if `data_format` is neither `\"channels_last\"` or `\"channels_first\"`.\n    \"\"\"\n    assert len(padding) == 2\n    assert len(padding[0]) == 2\n    assert len(padding[1]) == 2\n    if data_format is None:\n        data_format = image_data_format()\n    if data_format not in {'channels_first', 'channels_last'}:\n        raise ValueError('Unknown data_format: ' + str(data_format))\n\n    if data_format == 'channels_first':\n        pattern = [[0, 0],\n                   [0, 0],\n                   list(padding[0]),\n                   list(padding[1])]\n    else:\n        pattern = [[0, 0],\n                   list(padding[0]), list(padding[1]),\n                   [0, 0]]\n    return tf.pad(x, pattern)",
                        "signature": "spatial_2d_padding(x, padding=((1, 1), (1, 1)), data_format=None)"
                    },
                    {
                        "code": "def spatial_3d_padding(x, padding=((1, 1), (1, 1), (1, 1)), data_format=None):\n    \"\"\"Pads 5D tensor with zeros along the depth, height, width dimensions.\n\n    Pads these dimensions with respectively\n    \"padding[0]\", \"padding[1]\" and \"padding[2]\" zeros left and right.\n\n    For 'channels_last' data_format,\n    the 2nd, 3rd and 4th dimension will be padded.\n    For 'channels_first' data_format,\n    the 3rd, 4th and 5th dimension will be padded.\n\n    # Arguments\n        x: Tensor or variable.\n        padding: Tuple of 3 tuples, padding pattern.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n\n    # Returns\n        A padded 5D tensor.\n\n    # Raises\n        ValueError: if `data_format` is neither `\"channels_last\"` or `\"channels_first\"`.\n\n    \"\"\"\n    assert len(padding) == 3\n    assert len(padding[0]) == 2\n    assert len(padding[1]) == 2\n    assert len(padding[2]) == 2\n    if data_format is None:\n        data_format = image_data_format()\n    if data_format not in {'channels_first', 'channels_last'}:\n        raise ValueError('Unknown data_format: ' + str(data_format))\n\n    if data_format == 'channels_first':\n        pattern = [\n            [0, 0],\n            [0, 0],\n            [padding[0][0], padding[0][1]],\n            [padding[1][0], padding[1][1]],\n            [padding[2][0], padding[2][1]]\n        ]\n    else:\n        pattern = [\n            [0, 0],\n            [padding[0][0], padding[0][1]],\n            [padding[1][0], padding[1][1]],\n            [padding[2][0], padding[2][1]],\n            [0, 0]\n        ]\n    return tf.pad(x, pattern)",
                        "signature": "spatial_3d_padding(x, padding=((1, 1), (1, 1), (1, 1)), data_format=None)"
                    },
                    {
                        "code": "def stack(x, axis=0):\n    \"\"\"Stacks a list of rank `R` tensors into a rank `R+1` tensor.\n\n    # Arguments\n        x: List of tensors.\n        axis: Axis along which to perform stacking.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.stack(x, axis=axis)",
                        "signature": "stack(x, axis=0)"
                    },
                    {
                        "code": "def one_hot(indices, num_classes):\n    \"\"\"Computes the one-hot representation of an integer tensor.\n\n    # Arguments\n        indices: nD integer tensor of shape\n            `(batch_size, dim1, dim2, ... dim(n-1))`\n        num_classes: Integer, number of classes to consider.\n\n    # Returns\n        (n + 1)D one hot representation of the input\n        with shape `(batch_size, dim1, dim2, ... dim(n-1), num_classes)`\n    \"\"\"\n    return tf.one_hot(indices, depth=num_classes, axis=-1)",
                        "signature": "one_hot(indices, num_classes)"
                    },
                    {
                        "code": "def reverse(x, axes):\n    \"\"\"Reverse a tensor along the specified axes.\n\n    # Arguments\n        x: Tensor to reverse.\n        axes: Integer or iterable of integers.\n            Axes to reverse.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    if isinstance(axes, int):\n        axes = [axes]\n    return tf.reverse(x, axes)",
                        "signature": "reverse(x, axes)"
                    },
                    {
                        "code": "def get_value(x):\n    \"\"\"Returns the value of a variable.\n\n    # Arguments\n        x: input variable.\n\n    # Returns\n        A Numpy array.\n    \"\"\"\n    return x.eval(session=get_session())",
                        "signature": "get_value(x)"
                    },
                    {
                        "code": "def batch_get_value(ops):\n    \"\"\"Returns the value of more than one tensor variable.\n\n    # Arguments\n        ops: list of ops to run.\n\n    # Returns\n        A list of Numpy arrays.\n    \"\"\"\n    if ops:\n        return get_session().run(ops)\n    else:\n        return []",
                        "signature": "batch_get_value(ops)"
                    },
                    {
                        "code": "def set_value(x, value):\n    \"\"\"Sets the value of a variable, from a Numpy array.\n\n    # Arguments\n        x: Tensor to set to a new value.\n        value: Value to set the tensor to, as a Numpy array\n            (of the same shape).\n    \"\"\"\n    value = np.asarray(value, dtype=dtype(x))\n    tf_dtype = tf.as_dtype(x.dtype.name.split('_')[0])\n    if hasattr(x, '_assign_placeholder'):\n        assign_placeholder = x._assign_placeholder\n        assign_op = x._assign_op\n    else:\n        assign_placeholder = tf.placeholder(tf_dtype, shape=value.shape)\n        assign_op = x.assign(assign_placeholder)\n        x._assign_placeholder = assign_placeholder\n        x._assign_op = assign_op\n    get_session().run(assign_op, feed_dict={assign_placeholder: value})",
                        "signature": "set_value(x, value)"
                    },
                    {
                        "code": "def batch_set_value(tuples):\n    \"\"\"Sets the values of many tensor variables at once.\n\n    # Arguments\n        tuples: a list of tuples `(tensor, value)`.\n            `value` should be a Numpy array.\n    \"\"\"\n    if tuples:\n        assign_ops = []\n        feed_dict = {}\n        for x, value in tuples:\n            value = np.asarray(value, dtype=dtype(x))\n            tf_dtype = tf.as_dtype(x.dtype.name.split('_')[0])\n            if hasattr(x, '_assign_placeholder'):\n                assign_placeholder = x._assign_placeholder\n                assign_op = x._assign_op\n            else:\n                assign_placeholder = tf.placeholder(tf_dtype,\n                                                    shape=value.shape)\n                assign_op = x.assign(assign_placeholder)\n                x._assign_placeholder = assign_placeholder\n                x._assign_op = assign_op\n            assign_ops.append(assign_op)\n            feed_dict[assign_placeholder] = value\n        get_session().run(assign_ops, feed_dict=feed_dict)",
                        "signature": "batch_set_value(tuples)"
                    },
                    {
                        "code": "def get_variable_shape(x):\n    \"\"\"Returns the shape of a variable.\n\n    # Arguments\n        x: A variable.\n\n    # Returns\n        A tuple of integers.\n    \"\"\"\n    return int_shape(x)",
                        "signature": "get_variable_shape(x)"
                    },
                    {
                        "code": "def print_tensor(x, message=''):\n    \"\"\"Prints `message` and the tensor value when evaluated.\n\n     Note that `print_tensor` returns a new tensor identical to `x`\n     which should be used in the following code. Otherwise the\n     print operation is not taken into account during evaluation.\n\n     # Example\n     ```python\n         >>> x = K.print_tensor(x, message=\"x is: \")\n     ```\n\n    # Arguments\n        x: Tensor to print.\n        message: Message to print jointly with the tensor.\n\n    # Returns\n        The same tensor `x`, unchanged.\n    \"\"\"\n    return tf.Print(x, [x], message)",
                        "signature": "print_tensor(x, message='')"
                    },
                    {
                        "code": "def function(inputs, outputs, updates=None, **kwargs):\n    \"\"\"Instantiates a Keras function.\n\n    # Arguments\n        inputs: List of placeholder tensors.\n        outputs: List of output tensors.\n        updates: List of update ops.\n        **kwargs: Passed to `tf.Session.run`.\n\n    # Returns\n        Output values as Numpy arrays.\n\n    # Raises\n        ValueError: if invalid kwargs are passed in.\n    \"\"\"\n    if kwargs:\n        for key in kwargs:\n            if not (has_arg(tf.Session.run, key, True) or has_arg(Function.__init__, key, True)):\n                msg = 'Invalid argument \"%s\" passed to K.function with TensorFlow backend' % key\n                raise ValueError(msg)\n    return Function(inputs, outputs, updates=updates, **kwargs)",
                        "signature": "function(inputs, outputs, updates=None, **kwargs)"
                    },
                    {
                        "code": "def gradients(loss, variables):\n    \"\"\"Returns the gradients of `variables` w.r.t. `loss`.\n\n    # Arguments\n        loss: Scalar tensor to minimize.\n        variables: List of variables.\n\n    # Returns\n        A gradients tensor.\n    \"\"\"\n    return tf.gradients(loss, variables, colocate_gradients_with_ops=True)",
                        "signature": "gradients(loss, variables)"
                    },
                    {
                        "code": "def stop_gradient(variables):\n    \"\"\"Returns `variables` but with zero gradient w.r.t. every other variable.\n\n    # Arguments\n        variables: tensor or list of tensors to consider constant with respect\n            to any other variable.\n\n    # Returns\n        A single tensor or a list of tensors (depending on the passed argument)\n            that has constant gradient with respect to any other variable.\n    \"\"\"\n    if isinstance(variables, (list, tuple)):\n        return map(tf.stop_gradient, variables)\n    else:\n        return tf.stop_gradient(variables)",
                        "signature": "stop_gradient(variables)"
                    },
                    {
                        "code": "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n    \"\"\"Iterates over the time dimension of a tensor.\n\n    # Arguments\n        step_function: RNN step function.\n            Parameters:\n                inputs: tensor with shape `(samples, ...)` (no time dimension),\n                    representing input for the batch of samples at a certain\n                    time step.\n                states: list of tensors.\n            Returns:\n                outputs: tensor with shape `(samples, output_dim)`\n                    (no time dimension).\n                new_states: list of tensors, same length and shapes\n                    as 'states'. The first state in the list must be the\n                    output tensor at the previous timestep.\n        inputs: tensor of temporal data of shape `(samples, time, ...)`\n            (at least 3D).\n        initial_states: tensor with shape (samples, output_dim)\n            (no time dimension),\n            containing the initial values for the states used in\n            the step function.\n        go_backwards: boolean. If True, do the iteration over the time\n            dimension in reverse order and return the reversed sequence.\n        mask: binary tensor with shape `(samples, time, 1)`,\n            with a zero for every element that is masked.\n        constants: a list of constant values passed at each step.\n        unroll: whether to unroll the RNN or to use a symbolic loop (`while_loop` or `scan` depending on backend).\n        input_length: not relevant in the TensorFlow implementation.\n            Must be specified if using unrolling with Theano.\n\n    # Returns\n        A tuple, `(last_output, outputs, new_states)`.\n\n            last_output: the latest output of the rnn, of shape `(samples, ...)`\n            outputs: tensor with shape `(samples, time, ...)` where each\n                entry `outputs[s, t]` is the output of the step function\n                at time `t` for sample `s`.\n            new_states: list of tensors, latest states returned by\n                the step function, of shape `(samples, ...)`.\n\n    # Raises\n        ValueError: if input dimension is less than 3.\n        ValueError: if `unroll` is `True` but input timestep is not a fixed number.\n        ValueError: if `mask` is provided (not `None`) but states is not provided\n            (`len(states)` == 0).\n    \"\"\"\n    ndim = len(inputs.get_shape())\n    if ndim < 3:\n        raise ValueError('Input should be at least 3D.')\n\n    # Transpose to time-major, i.e.\n    # from (batch, time, ...) to (time, batch, ...)\n    axes = [1, 0] + list(range(2, ndim))\n    inputs = tf.transpose(inputs, (axes))\n\n    if mask is not None:\n        if mask.dtype != tf.bool:\n            mask = tf.cast(mask, tf.bool)\n        if len(mask.get_shape()) == ndim - 1:\n            mask = expand_dims(mask)\n        mask = tf.transpose(mask, axes)\n\n    if constants is None:\n        constants = []\n\n    global uses_learning_phase\n    uses_learning_phase = False\n\n    if unroll:\n        if not inputs.get_shape()[0]:\n            raise ValueError('Unrolling requires a '\n                             'fixed number of timesteps.')\n        states = initial_states\n        successive_states = []\n        successive_outputs = []\n\n        input_list = tf.unstack(inputs)\n        if go_backwards:\n            input_list.reverse()\n\n        if mask is not None:\n            mask_list = tf.unstack(mask)\n            if go_backwards:\n                mask_list.reverse()\n\n            for inp, mask_t in zip(input_list, mask_list):\n                output, new_states = step_function(inp, states + constants)\n                if getattr(output, '_uses_learning_phase', False):\n                    uses_learning_phase = True\n\n                # tf.where needs its condition tensor\n                # to be the same shape as its two\n                # result tensors, but in our case\n                # the condition (mask) tensor is\n                # (nsamples, 1), and A and B are (nsamples, ndimensions).\n                # So we need to\n                # broadcast the mask to match the shape of A and B.\n                # That's what the tile call does,\n                # it just repeats the mask along its second dimension\n                # n times.\n                tiled_mask_t = tf.tile(mask_t,\n                                       tf.stack([1, tf.shape(output)[1]]))\n\n                if not successive_outputs:\n                    prev_output = zeros_like(output)\n                else:\n                    prev_output = successive_outputs[-1]\n\n                output = tf.where(tiled_mask_t, output, prev_output)\n\n                return_states = []\n                for state, new_state in zip(states, new_states):\n                    # (see earlier comment for tile explanation)\n                    tiled_mask_t = tf.tile(mask_t,\n                                           tf.stack([1, tf.shape(new_state)[1]]))\n                    return_states.append(tf.where(tiled_mask_t,\n                                                  new_state,\n                                                  state))\n                states = return_states\n                successive_outputs.append(output)\n                successive_states.append(states)\n            last_output = successive_outputs[-1]\n            new_states = successive_states[-1]\n            outputs = tf.stack(successive_outputs)\n        else:\n            for inp in input_list:\n                output, states = step_function(inp, states + constants)\n                if getattr(output, '_uses_learning_phase', False):\n                    uses_learning_phase = True\n                successive_outputs.append(output)\n                successive_states.append(states)\n            last_output = successive_outputs[-1]\n            new_states = successive_states[-1]\n            outputs = tf.stack(successive_outputs)\n\n    else:\n        if go_backwards:\n            inputs = reverse(inputs, 0)\n\n        states = tuple(initial_states)\n\n        time_steps = tf.shape(inputs)[0]\n        outputs, _ = step_function(inputs[0], initial_states + constants)\n        output_ta = tensor_array_ops.TensorArray(\n            dtype=outputs.dtype,\n            size=time_steps,\n            tensor_array_name='output_ta')\n        input_ta = tensor_array_ops.TensorArray(\n            dtype=inputs.dtype,\n            size=time_steps,\n            tensor_array_name='input_ta')\n        input_ta = input_ta.unstack(inputs)\n        time = tf.constant(0, dtype='int32', name='time')\n\n        if mask is not None:\n            if not states:\n                raise ValueError('No initial states provided! '\n                                 'When using masking in an RNN, you should '\n                                 'provide initial states '\n                                 '(and your step function should return '\n                                 'as its first state at time `t` '\n                                 'the output at time `t-1`).')\n            if go_backwards:\n                mask = reverse(mask, 0)\n\n            mask_ta = tensor_array_ops.TensorArray(\n                dtype=tf.bool,\n                size=time_steps,\n                tensor_array_name='mask_ta')\n            mask_ta = mask_ta.unstack(mask)\n\n            def _step(time, output_ta_t, *states):\n                \"\"\"RNN step function.\n\n                # Arguments\n                    time: Current timestep value.\n                    output_ta_t: TensorArray.\n                    *states: List of states.\n\n                # Returns\n                    Tuple: `(time + 1,output_ta_t) + tuple(new_states)`\n                \"\"\"\n                current_input = input_ta.read(time)\n                mask_t = mask_ta.read(time)\n                output, new_states = step_function(current_input,\n                                                   tuple(states) +\n                                                   tuple(constants))\n                if getattr(output, '_uses_learning_phase', False):\n                    global uses_learning_phase\n                    uses_learning_phase = True\n                for state, new_state in zip(states, new_states):\n                    new_state.set_shape(state.get_shape())\n                tiled_mask_t = tf.tile(mask_t,\n                                       tf.stack([1, tf.shape(output)[1]]))\n                output = tf.where(tiled_mask_t, output, states[0])\n                new_states = [tf.where(tiled_mask_t, new_states[i], states[i]) for i in range(len(states))]\n                output_ta_t = output_ta_t.write(time, output)\n                return (time + 1, output_ta_t) + tuple(new_states)\n        else:\n            def _step(time, output_ta_t, *states):\n                \"\"\"RNN step function.\n\n                # Arguments\n                    time: Current timestep value.\n                    output_ta_t: TensorArray.\n                    *states: List of states.\n\n                # Returns\n                    Tuple: `(time + 1,output_ta_t) + tuple(new_states)`\n                \"\"\"\n                current_input = input_ta.read(time)\n                output, new_states = step_function(current_input,\n                                                   tuple(states) +\n                                                   tuple(constants))\n                if getattr(output, '_uses_learning_phase', False):\n                    global uses_learning_phase\n                    uses_learning_phase = True\n                for state, new_state in zip(states, new_states):\n                    new_state.set_shape(state.get_shape())\n                output_ta_t = output_ta_t.write(time, output)\n                return (time + 1, output_ta_t) + tuple(new_states)\n\n        final_outputs = control_flow_ops.while_loop(\n            cond=lambda time, *_: time < time_steps,\n            body=_step,\n            loop_vars=(time, output_ta) + states,\n            parallel_iterations=32,\n            swap_memory=True)\n        last_time = final_outputs[0]\n        output_ta = final_outputs[1]\n        new_states = final_outputs[2:]\n\n        outputs = output_ta.stack()\n        last_output = output_ta.read(last_time - 1)\n\n    axes = [1, 0] + list(range(2, len(outputs.get_shape())))\n    outputs = tf.transpose(outputs, axes)\n    last_output._uses_learning_phase = uses_learning_phase\n    return last_output, outputs, new_states",
                        "signature": "rnn(step_function, inputs, initial_states, go_backwards=False, mask=None, constants=None, unroll=False, input_length=None)"
                    },
                    {
                        "code": "def switch(condition, then_expression, else_expression):\n    \"\"\"Switches between two operations depending on a scalar value.\n\n    Note that both `then_expression` and `else_expression`\n    should be symbolic tensors of the *same shape*.\n\n    # Arguments\n        condition: tensor (`int` or `bool`).\n        then_expression: either a tensor, or a callable that returns a tensor.\n        else_expression: either a tensor, or a callable that returns a tensor.\n\n    # Returns\n        The selected tensor.\n\n    # Raises\n        ValueError: If rank of `condition` is greater than rank of expressions.\n    \"\"\"\n    if condition.dtype != tf.bool:\n        condition = tf.cast(condition, 'bool')\n    cond_ndim = ndim(condition)\n    if not cond_ndim:\n        if not callable(then_expression):\n            def then_expression_fn():\n                return then_expression\n        else:\n            then_expression_fn = then_expression\n        if not callable(else_expression):\n            def else_expression_fn():\n                return else_expression\n        else:\n            else_expression_fn = else_expression\n        x = tf.cond(condition,\n                    then_expression_fn,\n                    else_expression_fn)\n    else:\n        # tf.where needs its condition tensor\n        # to be the same shape as its two\n        # result tensors\n        if callable(then_expression):\n            then_expression = then_expression()\n        if callable(else_expression):\n            else_expression = else_expression()\n        expr_ndim = ndim(then_expression)\n        if cond_ndim > expr_ndim:\n            raise ValueError('Rank of `condition` should be less than or'\n                             ' equal to rank of `then_expression` and '\n                             '`else_expression`. ndim(condition)=' +\n                             str(cond_ndim) + ', ndim(then_expression)'\n                             '=' + str(expr_ndim))\n        if cond_ndim > 1:\n            ndim_diff = expr_ndim - cond_ndim\n            cond_shape = tf.concat([tf.shape(condition), [1] * ndim_diff], axis=0)\n            condition = tf.reshape(condition, cond_shape)\n            expr_shape = tf.shape(then_expression)\n            shape_diff = expr_shape - cond_shape\n            tile_shape = tf.where(shape_diff > 0, expr_shape, tf.ones_like(expr_shape))\n            condition = tf.tile(condition, tile_shape)\n        x = tf.where(condition, then_expression, else_expression)\n    return x",
                        "signature": "switch(condition, then_expression, else_expression)"
                    },
                    {
                        "code": "def in_train_phase(x, alt, training=None):\n    \"\"\"Selects `x` in train phase, and `alt` otherwise.\n\n    Note that `alt` should have the *same shape* as `x`.\n\n    # Arguments\n        x: What to return in train phase\n            (tensor or callable that returns a tensor).\n        alt: What to return otherwise\n            (tensor or callable that returns a tensor).\n        training: Optional scalar tensor\n            (or Python boolean, or Python integer)\n            specifying the learning phase.\n\n    # Returns\n        Either `x` or `alt` based on the `training` flag.\n        the `training` flag defaults to `K.learning_phase()`.\n    \"\"\"\n    if training is None:\n        training = learning_phase()\n        uses_learning_phase = True\n    else:\n        uses_learning_phase = False\n\n    if training is 1 or training is True:\n        if callable(x):\n            return x()\n        else:\n            return x\n\n    elif training is 0 or training is False:\n        if callable(alt):\n            return alt()\n        else:\n            return alt\n\n    # else: assume learning phase is a placeholder tensor.\n    x = switch(training, x, alt)\n    if uses_learning_phase:\n        x._uses_learning_phase = True\n    return x",
                        "signature": "in_train_phase(x, alt, training=None)"
                    },
                    {
                        "code": "def in_test_phase(x, alt, training=None):\n    \"\"\"Selects `x` in test phase, and `alt` otherwise.\n\n    Note that `alt` should have the *same shape* as `x`.\n\n    # Arguments\n        x: What to return in test phase\n            (tensor or callable that returns a tensor).\n        alt: What to return otherwise\n            (tensor or callable that returns a tensor).\n        training: Optional scalar tensor\n            (or Python boolean, or Python integer)\n            specifying the learning phase.\n\n    # Returns\n        Either `x` or `alt` based on `K.learning_phase`.\n    \"\"\"\n    return in_train_phase(alt, x, training=training)",
                        "signature": "in_test_phase(x, alt, training=None)"
                    },
                    {
                        "code": "def relu(x, alpha=0., max_value=None):\n    \"\"\"Rectified linear unit.\n\n    With default values, it returns element-wise `max(x, 0)`.\n\n    # Arguments\n        x: A tensor or variable.\n        alpha: A scalar, slope of negative section (default=`0.`).\n        max_value: Saturation threshold.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    if alpha != 0.:\n        x = tf.nn.leaky_relu(x, alpha)\n    else:\n        x = tf.nn.relu(x)\n\n    if max_value is not None:\n        max_value = _to_tensor(max_value, x.dtype.base_dtype)\n        x = tf.minimum(x, max_value)\n    return x",
                        "signature": "relu(x, alpha=0.0, max_value=None)"
                    },
                    {
                        "code": "def elu(x, alpha=1.):\n    \"\"\"Exponential linear unit.\n\n    # Arguments\n        x: A tensor or variable to compute the activation function for.\n        alpha: A scalar, slope of negative section.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    res = tf.nn.elu(x)\n    if alpha == 1:\n        return res\n    else:\n        return tf.where(x > 0, res, alpha * res)",
                        "signature": "elu(x, alpha=1.0)"
                    },
                    {
                        "code": "def softmax(x):\n    \"\"\"Softmax of a tensor.\n\n    # Arguments\n        x: A tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.nn.softmax(x)",
                        "signature": "softmax(x)"
                    },
                    {
                        "code": "def softplus(x):\n    \"\"\"Softplus of a tensor.\n\n    # Arguments\n        x: A tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.nn.softplus(x)",
                        "signature": "softplus(x)"
                    },
                    {
                        "code": "def softsign(x):\n    \"\"\"Softsign of a tensor.\n\n    # Arguments\n        x: A tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.nn.softsign(x)",
                        "signature": "softsign(x)"
                    },
                    {
                        "code": "def categorical_crossentropy(target, output, from_logits=False):\n    \"\"\"Categorical crossentropy between an output tensor and a target tensor.\n\n    # Arguments\n        target: A tensor of the same shape as `output`.\n        output: A tensor resulting from a softmax\n            (unless `from_logits` is True, in which\n            case `output` is expected to be the logits).\n        from_logits: Boolean, whether `output` is the\n            result of a softmax, or is a tensor of logits.\n\n    # Returns\n        Output tensor.\n    \"\"\"\n    # Note: tf.nn.softmax_cross_entropy_with_logits\n    # expects logits, Keras expects probabilities.\n    if not from_logits:\n        # scale preds so that the class probas of each sample sum to 1\n        output /= tf.reduce_sum(output,\n                                len(output.get_shape()) - 1,\n                                True)\n        # manual computation of crossentropy\n        _epsilon = _to_tensor(epsilon(), output.dtype.base_dtype)\n        output = tf.clip_by_value(output, _epsilon, 1. - _epsilon)\n        return - tf.reduce_sum(target * tf.log(output),\n                               len(output.get_shape()) - 1)\n    else:\n        return tf.nn.softmax_cross_entropy_with_logits(labels=target,\n                                                       logits=output)",
                        "signature": "categorical_crossentropy(target, output, from_logits=False)"
                    },
                    {
                        "code": "def sparse_categorical_crossentropy(target, output, from_logits=False):\n    \"\"\"Categorical crossentropy with integer targets.\n\n    # Arguments\n        target: An integer tensor.\n        output: A tensor resulting from a softmax\n            (unless `from_logits` is True, in which\n            case `output` is expected to be the logits).\n        from_logits: Boolean, whether `output` is the\n            result of a softmax, or is a tensor of logits.\n\n    # Returns\n        Output tensor.\n    \"\"\"\n    # Note: tf.nn.sparse_softmax_cross_entropy_with_logits\n    # expects logits, Keras expects probabilities.\n    if not from_logits:\n        _epsilon = _to_tensor(epsilon(), output.dtype.base_dtype)\n        output = tf.clip_by_value(output, _epsilon, 1 - _epsilon)\n        output = tf.log(output)\n\n    output_shape = output.get_shape()\n    targets = cast(flatten(target), 'int64')\n    logits = tf.reshape(output, [-1, int(output_shape[-1])])\n    res = tf.nn.sparse_softmax_cross_entropy_with_logits(\n        labels=targets,\n        logits=logits)\n    if len(output_shape) >= 3:\n        # if our output includes timestep dimension\n        # or spatial dimensions we need to reshape\n        return tf.reshape(res, tf.shape(output)[:-1])\n    else:\n        return res",
                        "signature": "sparse_categorical_crossentropy(target, output, from_logits=False)"
                    },
                    {
                        "code": "def binary_crossentropy(target, output, from_logits=False):\n    \"\"\"Binary crossentropy between an output tensor and a target tensor.\n\n    # Arguments\n        target: A tensor with the same shape as `output`.\n        output: A tensor.\n        from_logits: Whether `output` is expected to be a logits tensor.\n            By default, we consider that `output`\n            encodes a probability distribution.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    # Note: tf.nn.sigmoid_cross_entropy_with_logits\n    # expects logits, Keras expects probabilities.\n    if not from_logits:\n        # transform back to logits\n        _epsilon = _to_tensor(epsilon(), output.dtype.base_dtype)\n        output = tf.clip_by_value(output, _epsilon, 1 - _epsilon)\n        output = tf.log(output / (1 - output))\n\n    return tf.nn.sigmoid_cross_entropy_with_logits(labels=target,\n                                                   logits=output)",
                        "signature": "binary_crossentropy(target, output, from_logits=False)"
                    },
                    {
                        "code": "def sigmoid(x):\n    \"\"\"Element-wise sigmoid.\n\n    # Arguments\n        x: A tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.nn.sigmoid(x)",
                        "signature": "sigmoid(x)"
                    },
                    {
                        "code": "def hard_sigmoid(x):\n    \"\"\"Segment-wise linear approximation of sigmoid.\n\n    Faster than sigmoid.\n    Returns `0.` if `x < -2.5`, `1.` if `x > 2.5`.\n    In `-2.5 <= x <= 2.5`, returns `0.2 * x + 0.5`.\n\n    # Arguments\n        x: A tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    x = (0.2 * x) + 0.5\n    zero = _to_tensor(0., x.dtype.base_dtype)\n    one = _to_tensor(1., x.dtype.base_dtype)\n    x = tf.clip_by_value(x, zero, one)\n    return x",
                        "signature": "hard_sigmoid(x)"
                    },
                    {
                        "code": "def tanh(x):\n    \"\"\"Element-wise tanh.\n\n    # Arguments\n        x: A tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.nn.tanh(x)",
                        "signature": "tanh(x)"
                    },
                    {
                        "code": "def dropout(x, level, noise_shape=None, seed=None):\n    \"\"\"Sets entries in `x` to zero at random, while scaling the entire tensor.\n\n    # Arguments\n        x: tensor\n        level: fraction of the entries in the tensor\n            that will be set to 0.\n        noise_shape: shape for randomly generated keep/drop flags,\n            must be broadcastable to the shape of `x`\n        seed: random seed to ensure determinism.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    retain_prob = 1. - level\n    if seed is None:\n        seed = np.random.randint(10e6)\n    # the dummy 1. works around a TF bug\n    # (float32_ref vs. float32 incompatibility)\n    return tf.nn.dropout(x * 1., retain_prob, noise_shape, seed=seed)",
                        "signature": "dropout(x, level, noise_shape=None, seed=None)"
                    },
                    {
                        "code": "def l2_normalize(x, axis=None):\n    \"\"\"Normalizes a tensor wrt the L2 norm alongside the specified axis.\n\n    # Arguments\n        x: Tensor or variable.\n        axis: axis along which to perform normalization.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.nn.l2_normalize(x, dim=axis)",
                        "signature": "l2_normalize(x, axis=None)"
                    },
                    {
                        "code": "def in_top_k(predictions, targets, k):\n    \"\"\"Returns whether the `targets` are in the top `k` `predictions`.\n\n    # Arguments\n        predictions: A tensor of shape `(batch_size, classes)` and type `float32`.\n        targets: A 1D tensor of length `batch_size` and type `int32` or `int64`.\n        k: An `int`, number of top elements to consider.\n\n    # Returns\n        A 1D tensor of length `batch_size` and type `bool`.\n        `output[i]` is `True` if `predictions[i, targets[i]]` is within top-`k`\n        values of `predictions[i]`.\n    \"\"\"\n    return tf.nn.in_top_k(predictions, targets, k)",
                        "signature": "in_top_k(predictions, targets, k)"
                    },
                    {
                        "code": "def _preprocess_conv1d_input(x, data_format):\n    \"\"\"Transpose and cast the input before the conv1d.\n\n    # Arguments\n        x: input tensor.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    if dtype(x) == 'float64':\n        x = tf.cast(x, 'float32')\n    tf_data_format = 'NHWC'  # to pass TF Conv2dNative operations\n    if data_format == 'channels_first':\n        if not _has_nchw_support():\n            x = tf.transpose(x, (0, 2, 1))  # NCW -> NWC\n        else:\n            tf_data_format = 'NCHW'\n    return x, tf_data_format",
                        "signature": "_preprocess_conv1d_input(x, data_format)"
                    },
                    {
                        "code": "def _preprocess_conv2d_input(x, data_format):\n    \"\"\"Transpose and cast the input before the conv2d.\n\n    # Arguments\n        x: input tensor.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    if dtype(x) == 'float64':\n        x = tf.cast(x, 'float32')\n    tf_data_format = 'NHWC'\n    if data_format == 'channels_first':\n        if not _has_nchw_support():\n            x = tf.transpose(x, (0, 2, 3, 1))  # NCHW -> NHWC\n        else:\n            tf_data_format = 'NCHW'\n    return x, tf_data_format",
                        "signature": "_preprocess_conv2d_input(x, data_format)"
                    },
                    {
                        "code": "def _preprocess_conv3d_input(x, data_format):\n    \"\"\"Transpose and cast the input before the conv3d.\n\n    # Arguments\n        x: input tensor.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    if dtype(x) == 'float64':\n        x = tf.cast(x, 'float32')\n    tf_data_format = 'NDHWC'\n    if data_format == 'channels_first':\n        if not _has_nchw_support():\n            x = tf.transpose(x, (0, 2, 3, 4, 1))\n        else:\n            tf_data_format = 'NCDHW'\n    return x, tf_data_format",
                        "signature": "_preprocess_conv3d_input(x, data_format)"
                    },
                    {
                        "code": "def _preprocess_padding(padding):\n    \"\"\"Convert keras' padding to tensorflow's padding.\n\n    # Arguments\n        padding: string, `\"same\"` or `\"valid\"`.\n\n    # Returns\n        a string, `\"SAME\"` or `\"VALID\"`.\n\n    # Raises\n        ValueError: if `padding` is invalid.\n    \"\"\"\n    if padding == 'same':\n        padding = 'SAME'\n    elif padding == 'valid':\n        padding = 'VALID'\n    else:\n        raise ValueError('Invalid padding: ' + str(padding))\n    return padding",
                        "signature": "_preprocess_padding(padding)"
                    },
                    {
                        "code": "def conv1d(x, kernel, strides=1, padding='valid',\n           data_format=None, dilation_rate=1):\n    \"\"\"1D convolution.\n\n    # Arguments\n        x: Tensor or variable.\n        kernel: kernel tensor.\n        strides: stride integer.\n        padding: string, `\"same\"`, `\"causal\"` or `\"valid\"`.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n        dilation_rate: integer dilate rate.\n\n    # Returns\n        A tensor, result of 1D convolution.\n\n    # Raises\n        ValueError: if `data_format` is neither `channels_last` or `channels_first`.\n    \"\"\"\n    if data_format is None:\n        data_format = image_data_format()\n    if data_format not in {'channels_first', 'channels_last'}:\n        raise ValueError('Unknown data_format: ' + str(data_format))\n\n    kernel_shape = kernel.get_shape().as_list()\n    if padding == 'causal':\n        # causal (dilated) convolution:\n        left_pad = dilation_rate * (kernel_shape[0] - 1)\n        x = temporal_padding(x, (left_pad, 0))\n        padding = 'valid'\n    padding = _preprocess_padding(padding)\n    if data_format == 'channels_last':\n        tf_data_format = 'NWC'\n    else:\n        tf_data_format = 'NCW'\n    x = tf.nn.convolution(\n        input=x,\n        filter=kernel,\n        dilation_rate=(dilation_rate,),\n        strides=(strides,),\n        padding=padding,\n        data_format=tf_data_format)\n    return x",
                        "signature": "conv1d(x, kernel, strides=1, padding='valid', data_format=None, dilation_rate=1)"
                    },
                    {
                        "code": "def conv2d(x, kernel, strides=(1, 1), padding='valid',\n           data_format=None, dilation_rate=(1, 1)):\n    \"\"\"2D convolution.\n\n    # Arguments\n        x: Tensor or variable.\n        kernel: kernel tensor.\n        strides: strides tuple.\n        padding: string, `\"same\"` or `\"valid\"`.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n            Whether to use Theano or TensorFlow/CNTK data format\n            for inputs/kernels/outputs.\n        dilation_rate: tuple of 2 integers.\n\n    # Returns\n        A tensor, result of 2D convolution.\n\n    # Raises\n        ValueError: if `data_format` is neither `channels_last` or `channels_first`.\n    \"\"\"\n    if data_format is None:\n        data_format = image_data_format()\n    if data_format not in {'channels_first', 'channels_last'}:\n        raise ValueError('Unknown data_format: ' + str(data_format))\n\n    x, tf_data_format = _preprocess_conv2d_input(x, data_format)\n\n    padding = _preprocess_padding(padding)\n    x = tf.nn.convolution(\n        input=x,\n        filter=kernel,\n        dilation_rate=dilation_rate,\n        strides=strides,\n        padding=padding,\n        data_format=tf_data_format)\n\n    if data_format == 'channels_first' and tf_data_format == 'NHWC':\n        x = tf.transpose(x, (0, 3, 1, 2))  # NHWC -> NCHW\n    return x",
                        "signature": "conv2d(x, kernel, strides=(1, 1), padding='valid', data_format=None, dilation_rate=(1, 1))"
                    },
                    {
                        "code": "def conv2d_transpose(x, kernel, output_shape, strides=(1, 1),\n                     padding='valid', data_format=None):\n    \"\"\"2D deconvolution (i.e. transposed convolution).\n\n    # Arguments\n        x: Tensor or variable.\n        kernel: kernel tensor.\n        output_shape: 1D int tensor for the output shape.\n        strides: strides tuple.\n        padding: string, `\"same\"` or `\"valid\"`.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n            Whether to use Theano or TensorFlow/CNTK data format\n            for inputs/kernels/outputs.\n\n    # Returns\n        A tensor, result of transposed 2D convolution.\n\n    # Raises\n        ValueError: if `data_format` is neither `channels_last` or `channels_first`.\n    \"\"\"\n    if data_format is None:\n        data_format = image_data_format()\n    if data_format not in {'channels_first', 'channels_last'}:\n        raise ValueError('Unknown data_format: ' + str(data_format))\n    if isinstance(output_shape, (tuple, list)):\n        output_shape = tf.stack(output_shape)\n\n    x, tf_data_format = _preprocess_conv2d_input(x, data_format)\n\n    if data_format == 'channels_first' and tf_data_format == 'NHWC':\n        output_shape = (output_shape[0],\n                        output_shape[2],\n                        output_shape[3],\n                        output_shape[1])\n    if output_shape[0] is None:\n        output_shape = (tf.shape(x)[0],) + tuple(output_shape[1:])\n        output_shape = tf.stack(list(output_shape))\n\n    padding = _preprocess_padding(padding)\n    if tf_data_format == 'NHWC':\n        strides = (1,) + strides + (1,)\n    else:\n        strides = (1, 1) + strides\n\n    x = tf.nn.conv2d_transpose(x, kernel, output_shape, strides,\n                               padding=padding,\n                               data_format=tf_data_format)\n    if data_format == 'channels_first' and tf_data_format == 'NHWC':\n        x = tf.transpose(x, (0, 3, 1, 2))  # NHWC -> NCHW\n    return x",
                        "signature": "conv2d_transpose(x, kernel, output_shape, strides=(1, 1), padding='valid', data_format=None)"
                    },
                    {
                        "code": "def separable_conv1d(x, depthwise_kernel, pointwise_kernel, strides=1,\n                     padding='valid', data_format=None, dilation_rate=1):\n    \"\"\"1D convolution with separable filters.\n\n    # Arguments\n        x: input tensor\n        depthwise_kernel: convolution kernel for the depthwise convolution.\n        pointwise_kernel: kernel for the 1x1 convolution.\n        strides: stride integer.\n        padding: string, `\"same\"` or `\"valid\"`.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n        dilation_rate: integer dilation rate.\n\n    # Returns\n        Output tensor.\n\n    # Raises\n        ValueError: if `data_format` is neither `channels_last` or `channels_first`.\n    \"\"\"\n    if data_format is None:\n        data_format = image_data_format()\n    if data_format not in {'channels_first', 'channels_last'}:\n        raise ValueError('Unknown data_format: ' + str(data_format))\n\n    x, tf_data_format = _preprocess_conv1d_input(x, data_format)\n    padding = _preprocess_padding(padding)\n    if tf_data_format == 'NHWC':\n        spatial_start_dim = 1\n        strides = (1, 1) + strides + (1,)\n    else:\n        spatial_start_dim = 2\n        strides = (1, 1, 1) + strides\n    x = tf.expand_dims(x, spatial_start_dim)\n    depthwise_kernel = tf.expand_dims(depthwise_kernel, 0)\n    pointwise_kernel = tf.expand_dims(pointwise_kernel, 0)\n    dilation_rate = (1,) + dilation_rate\n\n    x = tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel,\n                               strides=strides,\n                               padding=padding,\n                               rate=dilation_rate,\n                               data_format=tf_data_format)\n\n    x = tf.squeeze(x, [spatial_start_dim])\n\n    if data_format == 'channels_first' and tf_data_format == 'NHWC':\n        x = tf.transpose(x, (0, 2, 1))  # NWC -> NCW\n\n    return x",
                        "signature": "separable_conv1d(x, depthwise_kernel, pointwise_kernel, strides=1, padding='valid', data_format=None, dilation_rate=1)"
                    },
                    {
                        "code": "def separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=(1, 1),\n                     padding='valid', data_format=None, dilation_rate=(1, 1)):\n    \"\"\"2D convolution with separable filters.\n\n    # Arguments\n        x: input tensor\n        depthwise_kernel: convolution kernel for the depthwise convolution.\n        pointwise_kernel: kernel for the 1x1 convolution.\n        strides: strides tuple (length 2).\n        padding: string, `\"same\"` or `\"valid\"`.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n        dilation_rate: tuple of integers,\n            dilation rates for the separable convolution.\n\n    # Returns\n        Output tensor.\n\n    # Raises\n        ValueError: if `data_format` is neither `channels_last` or `channels_first`.\n    \"\"\"\n    if data_format is None:\n        data_format = image_data_format()\n    if data_format not in {'channels_first', 'channels_last'}:\n        raise ValueError('Unknown data_format: ' + str(data_format))\n\n    x, tf_data_format = _preprocess_conv2d_input(x, data_format)\n    padding = _preprocess_padding(padding)\n    if tf_data_format == 'NHWC':\n        strides = (1,) + strides + (1,)\n    else:\n        strides = (1, 1) + strides\n\n    x = tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel,\n                               strides=strides,\n                               padding=padding,\n                               rate=dilation_rate,\n                               data_format=tf_data_format)\n    if data_format == 'channels_first' and tf_data_format == 'NHWC':\n        x = tf.transpose(x, (0, 3, 1, 2))  # NHWC -> NCHW\n    return x",
                        "signature": "separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=(1, 1), padding='valid', data_format=None, dilation_rate=(1, 1))"
                    },
                    {
                        "code": "def depthwise_conv2d(x, depthwise_kernel, strides=(1, 1), padding='valid',\n                     data_format=None, dilation_rate=(1, 1)):\n    \"\"\"2D convolution with separable filters.\n\n    # Arguments\n        x: input tensor\n        depthwise_kernel: convolution kernel for the depthwise convolution.\n        strides: strides tuple (length 2).\n        padding: string, `\"same\"` or `\"valid\"`.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n        dilation_rate: tuple of integers,\n            dilation rates for the separable convolution.\n\n    # Returns\n        Output tensor.\n\n    # Raises\n        ValueError: if `data_format` is neither `channels_last` or `channels_first`.\n    \"\"\"\n    if data_format is None:\n        data_format = image_data_format()\n    if data_format not in {'channels_first', 'channels_last'}:\n        raise ValueError('Unknown data_format: ' + str(data_format))\n\n    x, tf_data_format = _preprocess_conv2d_input(x, data_format)\n    padding = _preprocess_padding(padding)\n    if tf_data_format == 'NHWC':\n        strides = (1,) + strides + (1,)\n    else:\n        strides = (1, 1) + strides\n\n    x = tf.nn.depthwise_conv2d(x, depthwise_kernel,\n                               strides=strides,\n                               padding=padding,\n                               rate=dilation_rate,\n                               data_format=tf_data_format)\n    if data_format == 'channels_first' and tf_data_format == 'NHWC':\n        x = tf.transpose(x, (0, 3, 1, 2))  # NHWC -> NCHW\n    return x",
                        "signature": "depthwise_conv2d(x, depthwise_kernel, strides=(1, 1), padding='valid', data_format=None, dilation_rate=(1, 1))"
                    },
                    {
                        "code": "def conv3d(x, kernel, strides=(1, 1, 1), padding='valid',\n           data_format=None, dilation_rate=(1, 1, 1)):\n    \"\"\"3D convolution.\n\n    # Arguments\n        x: Tensor or variable.\n        kernel: kernel tensor.\n        strides: strides tuple.\n        padding: string, `\"same\"` or `\"valid\"`.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n            Whether to use Theano or TensorFlow/CNTK data format\n            for inputs/kernels/outputs.\n        dilation_rate: tuple of 3 integers.\n\n    # Returns\n        A tensor, result of 3D convolution.\n\n    # Raises\n        ValueError: if `data_format` is neither `channels_last` or `channels_first`.\n    \"\"\"\n    if data_format is None:\n        data_format = image_data_format()\n    if data_format not in {'channels_first', 'channels_last'}:\n        raise ValueError('Unknown data_format: ' + str(data_format))\n\n    x, tf_data_format = _preprocess_conv3d_input(x, data_format)\n    padding = _preprocess_padding(padding)\n    x = tf.nn.convolution(\n        input=x,\n        filter=kernel,\n        dilation_rate=dilation_rate,\n        strides=strides,\n        padding=padding,\n        data_format=tf_data_format)\n    if data_format == 'channels_first' and tf_data_format == 'NDHWC':\n        x = tf.transpose(x, (0, 4, 1, 2, 3))\n    return x",
                        "signature": "conv3d(x, kernel, strides=(1, 1, 1), padding='valid', data_format=None, dilation_rate=(1, 1, 1))"
                    },
                    {
                        "code": "def conv3d_transpose(x, kernel, output_shape, strides=(1, 1, 1),\n                     padding='valid', data_format=None):\n    \"\"\"3D deconvolution (i.e. transposed convolution).\n\n    # Arguments\n        x: input tensor.\n        kernel: kernel tensor.\n        output_shape: 1D int tensor for the output shape.\n        strides: strides tuple.\n        padding: string, \"same\" or \"valid\".\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n            Whether to use Theano or TensorFlow/CNTK data format\n            for inputs/kernels/outputs.\n\n    # Returns\n        A tensor, result of transposed 3D convolution.\n\n    # Raises\n        ValueError: if `data_format` is neither `channels_last` or `channels_first`.\n    \"\"\"\n    if data_format is None:\n        data_format = image_data_format()\n    if data_format not in {'channels_first', 'channels_last'}:\n        raise ValueError('Unknown data_format: ' + str(data_format))\n    if isinstance(output_shape, (tuple, list)):\n        output_shape = tf.stack(output_shape)\n\n    x, tf_data_format = _preprocess_conv3d_input(x, data_format)\n\n    if data_format == 'channels_first' and tf_data_format == 'NDHWC':\n        output_shape = (output_shape[0],\n                        output_shape[2],\n                        output_shape[3],\n                        output_shape[4],\n                        output_shape[1])\n    if output_shape[0] is None:\n        output_shape = (tf.shape(x)[0],) + tuple(output_shape[1:])\n        output_shape = tf.stack(list(output_shape))\n\n    padding = _preprocess_padding(padding)\n    if tf_data_format == 'NDHWC':\n        strides = (1,) + strides + (1,)\n    else:\n        strides = (1, 1) + strides\n\n    x = tf.nn.conv3d_transpose(x, kernel, output_shape, strides,\n                               padding=padding,\n                               data_format=tf_data_format)\n    if data_format == 'channels_first' and tf_data_format == 'NDHWC':\n        x = tf.transpose(x, (0, 4, 1, 2, 3))\n    return x",
                        "signature": "conv3d_transpose(x, kernel, output_shape, strides=(1, 1, 1), padding='valid', data_format=None)"
                    },
                    {
                        "code": "def pool2d(x, pool_size, strides=(1, 1),\n           padding='valid', data_format=None,\n           pool_mode='max'):\n    \"\"\"2D Pooling.\n\n    # Arguments\n        x: Tensor or variable.\n        pool_size: tuple of 2 integers.\n        strides: tuple of 2 integers.\n        padding: string, `\"same\"` or `\"valid\"`.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n        pool_mode: string, `\"max\"` or `\"avg\"`.\n\n    # Returns\n        A tensor, result of 2D pooling.\n\n    # Raises\n        ValueError: if `data_format` is neither `\"channels_last\"` or `\"channels_first\"`.\n        ValueError: if `pool_mode` is neither `\"max\"` or `\"avg\"`.\n    \"\"\"\n    if data_format is None:\n        data_format = image_data_format()\n    if data_format not in {'channels_first', 'channels_last'}:\n        raise ValueError('Unknown data_format: ' + str(data_format))\n\n    x, tf_data_format = _preprocess_conv2d_input(x, data_format)\n    padding = _preprocess_padding(padding)\n    if tf_data_format == 'NHWC':\n        strides = (1,) + strides + (1,)\n        pool_size = (1,) + pool_size + (1,)\n    else:\n        strides = (1, 1) + strides\n        pool_size = (1, 1) + pool_size\n\n    if pool_mode == 'max':\n        x = tf.nn.max_pool(x, pool_size, strides,\n                           padding=padding,\n                           data_format=tf_data_format)\n    elif pool_mode == 'avg':\n        x = tf.nn.avg_pool(x, pool_size, strides,\n                           padding=padding,\n                           data_format=tf_data_format)\n    else:\n        raise ValueError('Invalid pool_mode: ' + str(pool_mode))\n\n    if data_format == 'channels_first' and tf_data_format == 'NHWC':\n        x = tf.transpose(x, (0, 3, 1, 2))  # NHWC -> NCHW\n    return x",
                        "signature": "pool2d(x, pool_size, strides=(1, 1), padding='valid', data_format=None, pool_mode='max')"
                    },
                    {
                        "code": "def pool3d(x, pool_size, strides=(1, 1, 1), padding='valid',\n           data_format=None, pool_mode='max'):\n    \"\"\"3D Pooling.\n\n    # Arguments\n        x: Tensor or variable.\n        pool_size: tuple of 3 integers.\n        strides: tuple of 3 integers.\n        padding: string, `\"same\"` or `\"valid\"`.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n        pool_mode: string, `\"max\"` or `\"avg\"`.\n\n    # Returns\n        A tensor, result of 3D pooling.\n\n    # Raises\n        ValueError: if `data_format` is neither `\"channels_last\"` or `\"channels_first\"`.\n        ValueError: if `pool_mode` is neither `\"max\"` or `\"avg\"`.\n    \"\"\"\n    if data_format is None:\n        data_format = image_data_format()\n    if data_format not in {'channels_first', 'channels_last'}:\n        raise ValueError('Unknown data_format: ' + str(data_format))\n\n    x, tf_data_format = _preprocess_conv3d_input(x, data_format)\n    padding = _preprocess_padding(padding)\n    if tf_data_format == 'NDHWC':\n        strides = (1,) + strides + (1,)\n        pool_size = (1,) + pool_size + (1,)\n    else:\n        strides = (1, 1) + strides\n        pool_size = (1, 1) + pool_size\n\n    if pool_mode == 'max':\n        x = tf.nn.max_pool3d(x, pool_size, strides,\n                             padding=padding,\n                             data_format=tf_data_format)\n    elif pool_mode == 'avg':\n        x = tf.nn.avg_pool3d(x, pool_size, strides,\n                             padding=padding,\n                             data_format=tf_data_format)\n    else:\n        raise ValueError('Invalid pool_mode: ' + str(pool_mode))\n\n    if data_format == 'channels_first' and tf_data_format == 'NDHWC':\n        x = tf.transpose(x, (0, 4, 1, 2, 3))\n    return x",
                        "signature": "pool3d(x, pool_size, strides=(1, 1, 1), padding='valid', data_format=None, pool_mode='max')"
                    },
                    {
                        "code": "def bias_add(x, bias, data_format=None):\n    \"\"\"Adds a bias vector to a tensor.\n\n    # Arguments\n        x: Tensor or variable.\n        bias: Bias tensor to add.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n\n    # Returns\n        Output tensor.\n\n    # Raises\n        ValueError: In one of the two cases below:\n                    1. invalid `data_format` argument.\n                    2. invalid bias shape.\n                       the bias should be either a vector or\n                       a tensor with ndim(x) - 1 dimension\n    \"\"\"\n    if data_format is None:\n        data_format = image_data_format()\n    if data_format not in {'channels_first', 'channels_last'}:\n        raise ValueError('Unknown data_format: ' + str(data_format))\n    bias_shape = int_shape(bias)\n    if len(bias_shape) != 1 and len(bias_shape) != ndim(x) - 1:\n        raise ValueError('Unexpected bias dimensions %d, expect to be 1 or %d dimensions'\n                         % (len(bias_shape), ndim(x)))\n    if ndim(x) == 5:\n        if data_format == 'channels_first':\n            if len(bias_shape) == 1:\n                x += reshape(bias, (1, bias_shape[0], 1, 1, 1))\n            else:\n                x += reshape(bias, (1, bias_shape[3]) + bias_shape[:3])\n        elif data_format == 'channels_last':\n            if len(bias_shape) == 1:\n                x += reshape(bias, (1, 1, 1, bias_shape[0]))\n            else:\n                x += reshape(bias, (1,) + bias_shape)\n    elif ndim(x) == 4:\n        if data_format == 'channels_first':\n            if len(bias_shape) == 1:\n                if _has_nchw_support():\n                    x = tf.nn.bias_add(x, bias,\n                                       data_format='NCHW')\n                else:\n                    x += reshape(bias, (1, bias_shape[0], 1, 1))\n            else:\n                x += reshape(bias, (1, bias_shape[2]) + bias_shape[:2])\n        elif data_format == 'channels_last':\n            if len(bias_shape) == 1:\n                x = tf.nn.bias_add(x, bias,\n                                   data_format='NHWC')\n            else:\n                x += reshape(bias, (1,) + bias_shape)\n    elif ndim(x) == 3:\n        if data_format == 'channels_first':\n            if len(bias_shape) == 1:\n                x += reshape(bias, (1, bias_shape[0], 1))\n            else:\n                x += reshape(bias, (1, bias_shape[1], bias_shape[0]))\n        elif data_format == 'channels_last':\n            if len(bias_shape) == 1:\n                x += reshape(bias, (1, 1, bias_shape[0]))\n            else:\n                x += reshape(bias, (1, ) + bias_shape)\n    else:\n        x = tf.nn.bias_add(x, bias)\n    return x",
                        "signature": "bias_add(x, bias, data_format=None)"
                    },
                    {
                        "code": "def random_normal(shape, mean=0.0, stddev=1.0, dtype=None, seed=None):\n    \"\"\"Returns a tensor with normal distribution of values.\n\n    # Arguments\n        shape: A tuple of integers, the shape of tensor to create.\n        mean: A float, mean of the normal distribution to draw samples.\n        stddev: A float, standard deviation of the normal distribution\n            to draw samples.\n        dtype: String, dtype of returned tensor.\n        seed: Integer, random seed.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    if dtype is None:\n        dtype = floatx()\n    if seed is None:\n        seed = np.random.randint(10e6)\n    return tf.random_normal(shape, mean=mean, stddev=stddev,\n                            dtype=dtype, seed=seed)",
                        "signature": "random_normal(shape, mean=0.0, stddev=1.0, dtype=None, seed=None)"
                    },
                    {
                        "code": "def random_uniform(shape, minval=0.0, maxval=1.0, dtype=None, seed=None):\n    \"\"\"Returns a tensor with uniform distribution of values.\n\n    # Arguments\n        shape: A tuple of integers, the shape of tensor to create.\n        minval: A float, lower boundary of the uniform distribution\n            to draw samples.\n        maxval: A float, upper boundary of the uniform distribution\n            to draw samples.\n        dtype: String, dtype of returned tensor.\n        seed: Integer, random seed.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    if dtype is None:\n        dtype = floatx()\n    if seed is None:\n        seed = np.random.randint(10e6)\n    return tf.random_uniform(shape, minval=minval, maxval=maxval,\n                             dtype=dtype, seed=seed)",
                        "signature": "random_uniform(shape, minval=0.0, maxval=1.0, dtype=None, seed=None)"
                    },
                    {
                        "code": "def random_binomial(shape, p=0.0, dtype=None, seed=None):\n    \"\"\"Returns a tensor with random binomial distribution of values.\n\n    # Arguments\n        shape: A tuple of integers, the shape of tensor to create.\n        p: A float, `0. <= p <= 1`, probability of binomial distribution.\n        dtype: String, dtype of returned tensor.\n        seed: Integer, random seed.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    if dtype is None:\n        dtype = floatx()\n    if seed is None:\n        seed = np.random.randint(10e6)\n    return tf.where(tf.random_uniform(shape, dtype=dtype, seed=seed) <= p,\n                    tf.ones(shape, dtype=dtype),\n                    tf.zeros(shape, dtype=dtype))",
                        "signature": "random_binomial(shape, p=0.0, dtype=None, seed=None)"
                    },
                    {
                        "code": "def truncated_normal(shape, mean=0.0, stddev=1.0, dtype=None, seed=None):\n    \"\"\"Returns a tensor with truncated random normal distribution of values.\n\n    The generated values follow a normal distribution\n    with specified mean and standard deviation,\n    except that values whose magnitude is more than\n    two standard deviations from the mean are dropped and re-picked.\n\n    # Arguments\n        shape: A tuple of integers, the shape of tensor to create.\n        mean: Mean of the values.\n        stddev: Standard deviation of the values.\n        dtype: String, dtype of returned tensor.\n        seed: Integer, random seed.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    if dtype is None:\n        dtype = floatx()\n    if seed is None:\n        seed = np.random.randint(10e6)\n    return tf.truncated_normal(shape, mean, stddev, dtype=dtype, seed=seed)",
                        "signature": "truncated_normal(shape, mean=0.0, stddev=1.0, dtype=None, seed=None)"
                    },
                    {
                        "code": "def ctc_label_dense_to_sparse(labels, label_lengths):\n    \"\"\"Converts CTC labels from dense to sparse.\n\n    # Arguments\n        labels: dense CTC labels.\n        label_lengths: length of the labels.\n\n    # Returns\n        A sparse tensor representation of the labels.\n    \"\"\"\n    label_shape = tf.shape(labels)\n    num_batches_tns = tf.stack([label_shape[0]])\n    max_num_labels_tns = tf.stack([label_shape[1]])\n\n    def range_less_than(_, current_input):\n        return tf.expand_dims(tf.range(label_shape[1]), 0) < tf.fill(\n            max_num_labels_tns, current_input)\n\n    init = tf.cast(tf.fill([1, label_shape[1]], 0), tf.bool)\n    dense_mask = functional_ops.scan(range_less_than, label_lengths,\n                                     initializer=init, parallel_iterations=1)\n    dense_mask = dense_mask[:, 0, :]\n\n    label_array = tf.reshape(tf.tile(tf.range(label_shape[1]), num_batches_tns),\n                             label_shape)\n    label_ind = tf.boolean_mask(label_array, dense_mask)\n\n    batch_array = tf.transpose(tf.reshape(tf.tile(tf.range(label_shape[0]),\n                                                  max_num_labels_tns), reverse(label_shape, 0)))\n    batch_ind = tf.boolean_mask(batch_array, dense_mask)\n    indices = tf.transpose(tf.reshape(concatenate([batch_ind, label_ind], axis=0), [2, -1]))\n\n    vals_sparse = tf.gather_nd(labels, indices)\n\n    return tf.SparseTensor(tf.to_int64(indices), vals_sparse, tf.to_int64(label_shape))",
                        "signature": "ctc_label_dense_to_sparse(labels, label_lengths)"
                    },
                    {
                        "code": "def ctc_batch_cost(y_true, y_pred, input_length, label_length):\n    \"\"\"Runs CTC loss algorithm on each batch element.\n\n    # Arguments\n        y_true: tensor `(samples, max_string_length)`\n            containing the truth labels.\n        y_pred: tensor `(samples, time_steps, num_categories)`\n            containing the prediction, or output of the softmax.\n        input_length: tensor `(samples, 1)` containing the sequence length for\n            each batch item in `y_pred`.\n        label_length: tensor `(samples, 1)` containing the sequence length for\n            each batch item in `y_true`.\n\n    # Returns\n        Tensor with shape (samples,1) containing the\n            CTC loss of each element.\n    \"\"\"\n    label_length = tf.to_int32(tf.squeeze(label_length))\n    input_length = tf.to_int32(tf.squeeze(input_length))\n    sparse_labels = tf.to_int32(ctc_label_dense_to_sparse(y_true, label_length))\n\n    y_pred = tf.log(tf.transpose(y_pred, perm=[1, 0, 2]) + epsilon())\n\n    return tf.expand_dims(ctc.ctc_loss(inputs=y_pred,\n                                       labels=sparse_labels,\n                                       sequence_length=input_length), 1)",
                        "signature": "ctc_batch_cost(y_true, y_pred, input_length, label_length)"
                    },
                    {
                        "code": "def ctc_decode(y_pred, input_length, greedy=True, beam_width=100,\n               top_paths=1):\n    \"\"\"Decodes the output of a softmax.\n\n    Can use either greedy search (also known as best path)\n    or a constrained dictionary search.\n\n    # Arguments\n        y_pred: tensor `(samples, time_steps, num_categories)`\n            containing the prediction, or output of the softmax.\n        input_length: tensor `(samples, )` containing the sequence length for\n            each batch item in `y_pred`.\n        greedy: perform much faster best-path search if `true`.\n            This does not use a dictionary.\n        beam_width: if `greedy` is `false`: a beam search decoder will be used\n            with a beam of this width.\n        top_paths: if `greedy` is `false`,\n            how many of the most probable paths will be returned.\n\n    # Returns\n        Tuple:\n            List: if `greedy` is `true`, returns a list of one element that\n                contains the decoded sequence.\n                If `false`, returns the `top_paths` most probable\n                decoded sequences.\n                Important: blank labels are returned as `-1`.\n            Tensor `(top_paths, )` that contains\n                the log probability of each decoded sequence.\n    \"\"\"\n    y_pred = tf.log(tf.transpose(y_pred, perm=[1, 0, 2]) + epsilon())\n    input_length = tf.to_int32(input_length)\n\n    if greedy:\n        (decoded, log_prob) = ctc.ctc_greedy_decoder(\n            inputs=y_pred,\n            sequence_length=input_length)\n    else:\n        (decoded, log_prob) = ctc.ctc_beam_search_decoder(\n            inputs=y_pred,\n            sequence_length=input_length, beam_width=beam_width,\n            top_paths=top_paths)\n\n    decoded_dense = [tf.sparse_to_dense(st.indices, st.dense_shape, st.values, default_value=-1)\n                     for st in decoded]\n    return (decoded_dense, log_prob)",
                        "signature": "ctc_decode(y_pred, input_length, greedy=True, beam_width=100, top_paths=1)"
                    },
                    {
                        "code": "def map_fn(fn, elems, name=None, dtype=None):\n    \"\"\"Map the function fn over the elements elems and return the outputs.\n\n    # Arguments\n        fn: Callable that will be called upon each element in elems\n        elems: tensor\n        name: A string name for the map node in the graph\n        dtype: Output data type.\n\n    # Returns\n        Tensor with dtype `dtype`.\n    \"\"\"\n    return tf.map_fn(fn, elems, name=name, dtype=dtype)",
                        "signature": "map_fn(fn, elems, name=None, dtype=None)"
                    },
                    {
                        "code": "def foldl(fn, elems, initializer=None, name=None):\n    \"\"\"Reduce elems using fn to combine them from left to right.\n\n    # Arguments\n        fn: Callable that will be called upon each element in elems and an\n            accumulator, for instance `lambda acc, x: acc + x`\n        elems: tensor\n        initializer: The first value used (`elems[0]` in case of None)\n        name: A string name for the foldl node in the graph\n\n    # Returns\n        Tensor with same type and shape as `initializer`.\n    \"\"\"\n    return tf.foldl(fn, elems, initializer=initializer, name=name)",
                        "signature": "foldl(fn, elems, initializer=None, name=None)"
                    },
                    {
                        "code": "def foldr(fn, elems, initializer=None, name=None):\n    \"\"\"Reduce elems using fn to combine them from right to left.\n\n    # Arguments\n        fn: Callable that will be called upon each element in elems and an\n            accumulator, for instance `lambda acc, x: acc + x`\n        elems: tensor\n        initializer: The first value used (`elems[-1]` in case of None)\n        name: A string name for the foldr node in the graph\n\n    # Returns\n        Tensor with same type and shape as `initializer`.\n    \"\"\"\n    return tf.foldr(fn, elems, initializer=initializer, name=name)",
                        "signature": "foldr(fn, elems, initializer=None, name=None)"
                    },
                    {
                        "code": "def local_conv1d(inputs, kernel, kernel_size, strides, data_format=None):\n    \"\"\"Apply 1D conv with un-shared weights.\n\n    # Arguments\n        inputs: 3D tensor with shape: (batch_size, steps, input_dim)\n        kernel: the unshared weight for convolution,\n                with shape (output_length, feature_dim, filters)\n        kernel_size: a tuple of a single integer,\n                     specifying the length of the 1D convolution window\n        strides: a tuple of a single integer,\n                 specifying the stride length of the convolution\n        data_format: the data format, channels_first or channels_last\n\n    # Returns\n        the tensor after 1d conv with un-shared weights, with shape (batch_size, output_length, filters)\n\n    # Raises\n        ValueError: if `data_format` is neither `channels_last` or `channels_first`.\n    \"\"\"\n    if data_format is None:\n        data_format = image_data_format()\n    if data_format not in {'channels_first', 'channels_last'}:\n        raise ValueError('Unknown data_format: ' + str(data_format))\n\n    stride = strides[0]\n    kernel_shape = int_shape(kernel)\n    output_length, feature_dim, filters = kernel_shape\n\n    xs = []\n    for i in range(output_length):\n        slice_length = slice(i * stride,\n                             i * stride + kernel_size[0])\n        xs.append(reshape(inputs[:, slice_length, :],\n                          (1, -1, feature_dim)))\n    x_aggregate = concatenate(xs, axis=0)\n    # Shape: `(output_length, batch_size, filters)`.\n    output = batch_dot(x_aggregate, kernel)\n    return permute_dimensions(output, (1, 0, 2))",
                        "signature": "local_conv1d(inputs, kernel, kernel_size, strides, data_format=None)"
                    },
                    {
                        "code": "def local_conv2d(inputs, kernel, kernel_size, strides, output_shape, data_format=None):\n    \"\"\"Apply 2D conv with un-shared weights.\n\n    # Arguments\n        inputs: 4D tensor with shape:\n                (batch_size, filters, new_rows, new_cols)\n                if data_format='channels_first'\n                or 4D tensor with shape:\n                (batch_size, new_rows, new_cols, filters)\n                if data_format='channels_last'.\n        kernel: the unshared weight for convolution,\n                with shape (output_items, feature_dim, filters)\n        kernel_size: a tuple of 2 integers, specifying the\n                     width and height of the 2D convolution window.\n        strides: a tuple of 2 integers, specifying the strides\n                 of the convolution along the width and height.\n        output_shape: a tuple with (output_row, output_col)\n        data_format: the data format, channels_first or channels_last\n\n    # Returns\n        A 4d tensor with shape:\n        (batch_size, filters, new_rows, new_cols)\n        if data_format='channels_first'\n        or 4D tensor with shape:\n        (batch_size, new_rows, new_cols, filters)\n        if data_format='channels_last'.\n\n    # Raises\n        ValueError: if `data_format` is neither\n                    `channels_last` or `channels_first`.\n    \"\"\"\n    if data_format is None:\n        data_format = image_data_format()\n    if data_format not in {'channels_first', 'channels_last'}:\n        raise ValueError('Unknown data_format: ' + str(data_format))\n\n    stride_row, stride_col = strides\n    output_row, output_col = output_shape\n    kernel_shape = int_shape(kernel)\n    _, feature_dim, filters = kernel_shape\n\n    xs = []\n    for i in range(output_row):\n        for j in range(output_col):\n            slice_row = slice(i * stride_row,\n                              i * stride_row + kernel_size[0])\n            slice_col = slice(j * stride_col,\n                              j * stride_col + kernel_size[1])\n            if data_format == 'channels_first':\n                xs.append(reshape(inputs[:, :, slice_row, slice_col],\n                                  (1, -1, feature_dim)))\n            else:\n                xs.append(reshape(inputs[:, slice_row, slice_col, :],\n                                  (1, -1, feature_dim)))\n\n    x_aggregate = concatenate(xs, axis=0)\n    output = batch_dot(x_aggregate, kernel)\n    output = reshape(output,\n                     (output_row, output_col, -1, filters))\n\n    if data_format == 'channels_first':\n        output = permute_dimensions(output, (2, 3, 0, 1))\n    else:\n        output = permute_dimensions(output, (2, 0, 1, 3))\n    return output",
                        "signature": "local_conv2d(inputs, kernel, kernel_size, strides, output_shape, data_format=None)"
                    },
                    {
                        "code": "def _step(time, output_ta_t, *states):\n    \"\"\"RNN step function.\n\n    # Arguments\n        time: Current timestep value.\n        output_ta_t: TensorArray.\n        *states: List of states.\n\n    # Returns\n        Tuple: `(time + 1,output_ta_t) + tuple(new_states)`\n    \"\"\"\n    current_input = input_ta.read(time)\n    mask_t = mask_ta.read(time)\n    output, new_states = step_function(current_input,\n                                       tuple(states) +\n                                       tuple(constants))\n    if getattr(output, '_uses_learning_phase', False):\n        global uses_learning_phase\n        uses_learning_phase = True\n    for state, new_state in zip(states, new_states):\n        new_state.set_shape(state.get_shape())\n    tiled_mask_t = tf.tile(mask_t,\n                           tf.stack([1, tf.shape(output)[1]]))\n    output = tf.where(tiled_mask_t, output, states[0])\n    new_states = [tf.where(tiled_mask_t, new_states[i], states[i]) for i in range(len(states))]\n    output_ta_t = output_ta_t.write(time, output)\n    return (time + 1, output_ta_t) + tuple(new_states)",
                        "signature": "_step(time, output_ta_t, *states)"
                    },
                    {
                        "code": "def _step(time, output_ta_t, *states):\n    \"\"\"RNN step function.\n\n    # Arguments\n        time: Current timestep value.\n        output_ta_t: TensorArray.\n        *states: List of states.\n\n    # Returns\n        Tuple: `(time + 1,output_ta_t) + tuple(new_states)`\n    \"\"\"\n    current_input = input_ta.read(time)\n    output, new_states = step_function(current_input,\n                                       tuple(states) +\n                                       tuple(constants))\n    if getattr(output, '_uses_learning_phase', False):\n        global uses_learning_phase\n        uses_learning_phase = True\n    for state, new_state in zip(states, new_states):\n        new_state.set_shape(state.get_shape())\n    output_ta_t = output_ta_t.write(time, output)\n    return (time + 1, output_ta_t) + tuple(new_states)",
                        "signature": "_step(time, output_ta_t, *states)"
                    },
                    {
                        "code": "def then_expression_fn():\n    return then_expression",
                        "signature": "then_expression_fn()"
                    },
                    {
                        "code": "def else_expression_fn():\n    return else_expression",
                        "signature": "else_expression_fn()"
                    }
                ],
                "file_scope_classes": [
                    {
                        "class_declaration": "class _TfDeviceCaptureOp:",
                        "functions": [
                            {
                                "code": "def __init__(self):\n    self.device = None",
                                "signature": "__init__(self)"
                            },
                            {
                                "code": "def _set_device(self, device):\n    \"\"\"This method captures TF's explicit device scope setting.\"\"\"\n    self.device = device",
                                "signature": "_set_device(self, device)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class Function:",
                        "functions": [
                            {
                                "code": "def __init__(self, inputs, outputs, updates=None, name=None, **session_kwargs):\n    updates = updates or []\n    if not isinstance(inputs, (list, tuple)):\n        raise TypeError('`inputs` to a TensorFlow backend function '\n                        'should be a list or tuple.')\n    if not isinstance(outputs, (list, tuple)):\n        raise TypeError('`outputs` of a TensorFlow backend function '\n                        'should be a list or tuple.')\n    if not isinstance(updates, (list, tuple)):\n        raise TypeError('`updates` in a TensorFlow backend function '\n                        'should be a list or tuple.')\n    self.inputs = list(inputs)\n    self.outputs = list(outputs)\n    with tf.control_dependencies(self.outputs):\n        updates_ops = []\n        for update in updates:\n            if isinstance(update, tuple):\n                p, new_p = update\n                updates_ops.append(tf.assign(p, new_p))\n            else:\n                # assumed already an op\n                updates_ops.append(update)\n        self.updates_op = tf.group(*updates_ops)\n    self.name = name\n    # additional tensor substitutions\n    self.feed_dict = session_kwargs.pop('feed_dict', {})\n    # additional operations\n    self.fetches = session_kwargs.pop('fetches', [])\n    if not isinstance(self.fetches, list):\n        self.fetches = [self.fetches]\n    self.session_kwargs = session_kwargs",
                                "signature": "__init__(self, inputs, outputs, updates=None, name=None, **session_kwargs)"
                            },
                            {
                                "code": "def __call__(self, inputs):\n    if not isinstance(inputs, (list, tuple)):\n        raise TypeError('`inputs` should be a list or tuple.')\n    feed_dict = self.feed_dict.copy()\n    for tensor, value in zip(self.inputs, inputs):\n        if is_sparse(tensor):\n            sparse_coo = value.tocoo()\n            indices = np.concatenate((np.expand_dims(sparse_coo.row, 1),\n                                      np.expand_dims(sparse_coo.col, 1)), 1)\n            value = (indices, sparse_coo.data, sparse_coo.shape)\n        feed_dict[tensor] = value\n    fetches = self.outputs + [self.updates_op] + self.fetches\n    session = get_session()\n    updated = session.run(fetches=fetches, feed_dict=feed_dict,\n                          **self.session_kwargs)\n    return updated[:len(self.outputs)]",
                                "signature": "__call__(self, inputs)"
                            }
                        ]
                    }
                ]
            },
            "variables_in_file": {
                "py_all": [
                    722,
                    690,
                    27,
                    1875
                ],
                "all": [
                    27
                ],
                "py_sum": [
                    28
                ],
                "sum": [
                    28
                ],
                "_SESSION": [
                    34,
                    169,
                    176,
                    177,
                    211,
                    90
                ],
                "_GRAPH_LEARNING_PHASES": [
                    129,
                    130,
                    39,
                    146,
                    125,
                    94,
                    95
                ],
                "_GRAPH_UID_DICTS": [
                    69,
                    70,
                    71,
                    72,
                    45,
                    78
                ],
                "_MANUAL_VAR_INIT": [
                    178,
                    50,
                    111
                ],
                "_LOCAL_DEVICES": [
                    267,
                    268,
                    269,
                    55
                ],
                "graph": [
                    129,
                    130,
                    68,
                    69,
                    70,
                    71,
                    72,
                    124,
                    125
                ],
                "tf.get_default_graph": [
                    68,
                    235,
                    146,
                    124,
                    95
                ],
                "tf": [
                    3589,
                    1543,
                    3081,
                    3600,
                    3601,
                    2071,
                    2040,
                    2072,
                    1050,
                    1563,
                    2075,
                    3100,
                    2590,
                    3609,
                    3613,
                    1057,
                    2593,
                    2594,
                    2597,
                    1576,
                    553,
                    1065,
                    1066,
                    1067,
                    3113,
                    1070,
                    2094,
                    1072,
                    1589,
                    2613,
                    2106,
                    2618,
                    3065,
                    3135,
                    1602,
                    3066,
                    68,
                    3652,
                    2120,
                    3656,
                    3148,
                    2637,
                    2638,
                    1615,
                    3663,
                    2645,
                    2134,
                    88,
                    2650,
                    91,
                    1628,
                    2651,
                    2652,
                    95,
                    3164,
                    2147,
                    2660,
                    1641,
                    1133,
                    2670,
                    3181,
                    1136,
                    3185,
                    2163,
                    1141,
                    1654,
                    1143,
                    2678,
                    3701,
                    3705,
                    124,
                    126,
                    1151,
                    3712,
                    2689,
                    3202,
                    1667,
                    1157,
                    3206,
                    1679,
                    2703,
                    146,
                    2197,
                    3223,
                    1691,
                    3227,
                    166,
                    167,
                    2729,
                    2730,
                    171,
                    1195,
                    1709,
                    174,
                    1711,
                    176,
                    688,
                    689,
                    2731,
                    180,
                    2732,
                    3757,
                    3765,
                    1208,
                    189,
                    196,
                    1732,
                    3781,
                    2248,
                    1739,
                    1228,
                    1740,
                    1742,
                    1743,
                    720,
                    721,
                    1747,
                    2261,
                    2773,
                    1751,
                    3288,
                    1753,
                    1245,
                    3805,
                    2276,
                    235,
                    2795,
                    2796,
                    1262,
                    751,
                    752,
                    2292,
                    3828,
                    2809,
                    1786,
                    1790,
                    1279,
                    3326,
                    1794,
                    3335,
                    3848,
                    777,
                    3849,
                    3850,
                    1292,
                    2829,
                    2830,
                    2831,
                    2833,
                    2834,
                    2835,
                    1305,
                    2334,
                    802,
                    2339,
                    3364,
                    3875,
                    298,
                    1323,
                    1324,
                    1325,
                    1326,
                    815,
                    1322,
                    3374,
                    3375,
                    2358,
                    3383,
                    3895,
                    3896,
                    3897,
                    2363,
                    3387,
                    1853,
                    3900,
                    3903,
                    321,
                    1345,
                    3908,
                    3910,
                    3912,
                    3914,
                    3915,
                    3917,
                    846,
                    3919,
                    850,
                    1362,
                    1363,
                    1364,
                    1876,
                    1878,
                    345,
                    350,
                    3423,
                    3424,
                    3425,
                    1378,
                    1379,
                    1891,
                    2404,
                    2918,
                    3428,
                    2920,
                    3939,
                    3434,
                    3940,
                    2924,
                    3437,
                    3941,
                    3943,
                    3945,
                    1393,
                    1394,
                    883,
                    1905,
                    887,
                    2938,
                    2942,
                    1407,
                    386,
                    1925,
                    1926,
                    392,
                    1928,
                    2442,
                    2954,
                    1420,
                    3979,
                    3980,
                    1935,
                    1936,
                    1937,
                    2447,
                    2451,
                    3474,
                    2966,
                    1432,
                    3480,
                    3992,
                    2978,
                    420,
                    1444,
                    4011,
                    944,
                    1458,
                    1459,
                    2999,
                    3515,
                    3004,
                    3005,
                    4027,
                    1471,
                    960,
                    2496,
                    3008,
                    3521,
                    1993,
                    1483,
                    4043,
                    973,
                    462,
                    464,
                    2512,
                    2005,
                    2006,
                    3030,
                    3031,
                    2009,
                    986,
                    3035,
                    3036,
                    2014,
                    2527,
                    1504,
                    2016,
                    2529,
                    3042,
                    3552,
                    3560,
                    1518,
                    502,
                    2039,
                    504,
                    2041,
                    1530,
                    3068
                ],
                "defaultdict": [
                    70
                ],
                "int": [
                    70,
                    1127,
                    2092,
                    173,
                    2290,
                    3035
                ],
                "prefix": [
                    72,
                    71
                ],
                "tf.reset_default_graph": [
                    88
                ],
                "reset_uids": [
                    89
                ],
                "phase": [
                    129,
                    91,
                    126,
                    95
                ],
                "tf.placeholder_with_default": [
                    91,
                    126
                ],
                "value": [
                    392,
                    393,
                    394,
                    395,
                    396,
                    143,
                    146,
                    2333,
                    2465,
                    2339,
                    420,
                    2467,
                    2470,
                    2343,
                    2471,
                    2356,
                    2357,
                    2364,
                    2369,
                    850,
                    852,
                    1001,
                    111,
                    887,
                    889,
                    382,
                    383
                ],
                "ValueError": [
                    3587,
                    2693,
                    2822,
                    3465,
                    2186,
                    144,
                    1942,
                    4120,
                    2585,
                    3737,
                    3740,
                    3362,
                    2607,
                    3250,
                    3506,
                    1972,
                    2230,
                    3640,
                    2498,
                    581,
                    3275,
                    3660,
                    465,
                    3413,
                    3548,
                    4068,
                    3689,
                    3321,
                    3709,
                    255
                ],
                "tf.get_default_session": [
                    166,
                    167
                ],
                "session": [
                    196,
                    167,
                    199,
                    200,
                    201,
                    2473,
                    2474,
                    177,
                    179,
                    211,
                    188
                ],
                "os.environ.get": [
                    170,
                    173
                ],
                "os.environ": [
                    170,
                    173
                ],
                "os": [
                    170,
                    173
                ],
                "config": [
                    176,
                    171,
                    174
                ],
                "tf.ConfigProto": [
                    171,
                    174
                ],
                "num_thread": [
                    173,
                    174
                ],
                "tf.Session": [
                    176,
                    2496
                ],
                "session.graph.as_default": [
                    179
                ],
                "session.graph": [
                    179
                ],
                "variables": [
                    2529,
                    2512,
                    180,
                    182,
                    2526,
                    2527
                ],
                "tf.global_variables": [
                    180
                ],
                "candidate_vars": [
                    181,
                    184,
                    185,
                    189,
                    191
                ],
                "v": [
                    386,
                    389,
                    390,
                    391,
                    392,
                    394,
                    396,
                    397,
                    400,
                    402,
                    403,
                    689,
                    690,
                    691,
                    692,
                    182,
                    183,
                    184,
                    189,
                    191,
                    193,
                    194,
                    721,
                    722,
                    723,
                    724
                ],
                "getattr": [
                    2624,
                    2724,
                    2664,
                    183,
                    2751
                ],
                "candidate_vars.append": [
                    184
                ],
                "is_initialized": [
                    188,
                    191
                ],
                "session.run": [
                    2474,
                    196,
                    188
                ],
                "tf.is_variable_initialized": [
                    189
                ],
                "uninitialized_vars": [
                    193,
                    195,
                    196,
                    190
                ],
                "flag": [
                    192,
                    191
                ],
                "zip": [
                    1057,
                    2465,
                    2754,
                    2727,
                    2648,
                    1050,
                    2622,
                    191
                ],
                "uninitialized_vars.append": [
                    193
                ],
                "v._keras_initialized": [
                    194
                ],
                "tf.variables_initializer": [
                    196
                ],
                "hasattr": [
                    577,
                    199,
                    395,
                    467,
                    2359,
                    382,
                    2335
                ],
                "session.list_devices": [
                    200
                ],
                "device_lib.list_local_devices": [
                    200
                ],
                "device_lib": [
                    200
                ],
                "object": [
                    216,
                    2409
                ],
                "self.device": [
                    224,
                    220
                ],
                "self": [
                    224,
                    2464,
                    2465,
                    2440,
                    2441,
                    2442,
                    2472,
                    2475,
                    2476,
                    2451,
                    2452,
                    2454,
                    2456,
                    2457,
                    2458,
                    2459,
                    220
                ],
                "device": [
                    224,
                    256,
                    257
                ],
                "g": [
                    235,
                    237
                ],
                "op": [
                    236,
                    237,
                    238
                ],
                "_TfDeviceCaptureOp": [
                    236
                ],
                "g._apply_device_functions": [
                    237
                ],
                "op.device": [
                    238
                ],
                "device_type": [
                    257,
                    253,
                    254
                ],
                "device_type.upper": [
                    257,
                    253
                ],
                "_get_current_tf_device": [
                    256
                ],
                "device.device_type": [
                    257
                ],
                "list_devices": [
                    268
                ],
                "get_session": [
                    2370,
                    2307,
                    2343,
                    2473,
                    268,
                    2320,
                    660
                ],
                "x.name": [
                    269
                ],
                "x": [
                    1543,
                    520,
                    3081,
                    3591,
                    3600,
                    2039,
                    1048,
                    1561,
                    1050,
                    1562,
                    1563,
                    2041,
                    3097,
                    3098,
                    3099,
                    3100,
                    3101,
                    3613,
                    3614,
                    1576,
                    553,
                    1065,
                    3113,
                    3366,
                    1069,
                    1070,
                    2094,
                    1072,
                    1589,
                    2106,
                    3642,
                    3135,
                    577,
                    578,
                    1602,
                    580,
                    3652,
                    2120,
                    2121,
                    3656,
                    3148,
                    1615,
                    3663,
                    3664,
                    2134,
                    1628,
                    606,
                    2147,
                    1129,
                    1641,
                    3691,
                    3180,
                    3181,
                    1136,
                    3185,
                    1139,
                    2163,
                    1141,
                    1654,
                    1143,
                    3188,
                    3701,
                    1146,
                    3705,
                    1151,
                    639,
                    3201,
                    3202,
                    1667,
                    3712,
                    3713,
                    3206,
                    3209,
                    1679,
                    660,
                    2197,
                    3222,
                    3223,
                    1691,
                    3227,
                    3739,
                    3230,
                    3741,
                    3742,
                    3745,
                    3747,
                    3750,
                    3752,
                    3753,
                    1195,
                    1709,
                    3757,
                    1711,
                    3760,
                    3762,
                    3765,
                    3768,
                    3769,
                    3772,
                    3774,
                    3777,
                    3779,
                    1732,
                    3781,
                    3782,
                    1735,
                    2248,
                    1739,
                    1228,
                    3281,
                    2261,
                    3288,
                    3289,
                    1754,
                    1245,
                    3295,
                    1262,
                    3609,
                    2292,
                    2809,
                    1787,
                    1788,
                    3323,
                    3326,
                    1279,
                    1791,
                    1792,
                    3327,
                    1795,
                    2307,
                    3335,
                    3336,
                    777,
                    1292,
                    269,
                    2835,
                    2836,
                    1305,
                    1817,
                    1819,
                    2333,
                    2334,
                    1823,
                    2335,
                    2336,
                    802,
                    1826,
                    1827,
                    2337,
                    2340,
                    1831,
                    2341,
                    2342,
                    298,
                    1322,
                    1323,
                    1324,
                    1325,
                    815,
                    2864,
                    2865,
                    3374,
                    2867,
                    2356,
                    2357,
                    2358,
                    2359,
                    2360,
                    2361,
                    3383,
                    3387,
                    2876,
                    1853,
                    2365,
                    2366,
                    2367,
                    1345,
                    2878,
                    2879,
                    3388,
                    2382,
                    1362,
                    1363,
                    1364,
                    1875,
                    1878,
                    2899,
                    3415,
                    3423,
                    1378,
                    1379,
                    1891,
                    2404,
                    2918,
                    3428,
                    2920,
                    3434,
                    2923,
                    2924,
                    2925,
                    3437,
                    3439,
                    1393,
                    1394,
                    1905,
                    2938,
                    2942,
                    1407,
                    1924,
                    1925,
                    1927,
                    1928,
                    1929,
                    1930,
                    2954,
                    1420,
                    1932,
                    1934,
                    1935,
                    912,
                    1937,
                    1938,
                    3467,
                    1940,
                    3474,
                    2966,
                    1432,
                    3480,
                    3481,
                    2978,
                    1444,
                    1962,
                    1967,
                    944,
                    1456,
                    1457,
                    1458,
                    1459,
                    3508,
                    3515,
                    1471,
                    960,
                    3521,
                    3522,
                    1989,
                    1993,
                    1483,
                    973,
                    462,
                    465,
                    467,
                    2005,
                    2006,
                    2007,
                    986,
                    3550,
                    1504,
                    3552,
                    3553,
                    2019,
                    3560,
                    1001,
                    3561,
                    1518,
                    506,
                    502,
                    2038,
                    504,
                    505,
                    1530,
                    507
                ],
                "x.device_type": [
                    269
                ],
                "explicitly_on_cpu": [
                    281,
                    283
                ],
                "_is_current_explicit_device": [
                    281
                ],
                "gpus_available": [
                    282,
                    283
                ],
                "len": [
                    2180,
                    2181,
                    2182,
                    2583,
                    282,
                    3739,
                    3741,
                    3744,
                    2595,
                    3749,
                    3755,
                    2476,
                    2732,
                    2223,
                    2224,
                    2225,
                    2226,
                    3764,
                    3000,
                    3771,
                    3006,
                    3776,
                    2772,
                    2007,
                    3039,
                    608,
                    2161
                ],
                "_get_available_gpus": [
                    282
                ],
                "tf.convert_to_tensor": [
                    298
                ],
                "dtype": [
                    3201,
                    3844,
                    3845,
                    392,
                    777,
                    3848,
                    3849,
                    3850,
                    3222,
                    2076,
                    2077,
                    2333,
                    3871,
                    3872,
                    418,
                    419,
                    420,
                    802,
                    3875,
                    298,
                    4011,
                    686,
                    687,
                    688,
                    944,
                    691,
                    2357,
                    844,
                    845,
                    718,
                    719,
                    720,
                    846,
                    723,
                    852,
                    3801,
                    3802,
                    3806,
                    3180,
                    749,
                    750,
                    751,
                    496,
                    497,
                    752,
                    881,
                    882,
                    883,
                    502,
                    3824,
                    504,
                    889,
                    3825,
                    3829,
                    380,
                    381
                ],
                "isinstance": [
                    321,
                    2434,
                    3363,
                    3588,
                    2437,
                    2526,
                    1127,
                    393,
                    2092,
                    2445,
                    462,
                    2290,
                    2457,
                    2462,
                    2431
                ],
                "tensor": [
                    321,
                    2465,
                    2466,
                    2471,
                    344,
                    345,
                    347
                ],
                "tf.SparseTensor": [
                    464,
                    321,
                    386,
                    3919
                ],
                "is_sparse": [
                    344,
                    2466,
                    1875,
                    1069
                ],
                "tf.sparse_tensor_to_dense": [
                    345
                ],
                "name_scope": [
                    350
                ],
                "tf.name_scope": [
                    350
                ],
                "floatx": [
                    3872,
                    419,
                    3845,
                    1323,
                    845,
                    750,
                    719,
                    687,
                    497,
                    882,
                    1363,
                    3825,
                    3802,
                    381
                ],
                "sparse_coo": [
                    384,
                    385,
                    387,
                    388,
                    389,
                    2467,
                    2468,
                    2469,
                    2470,
                    383
                ],
                "value.tocoo": [
                    2467,
                    383
                ],
                "indices": [
                    384,
                    386,
                    2276,
                    2468,
                    2470,
                    3915,
                    3917,
                    3919,
                    1208
                ],
                "np.concatenate": [
                    384,
                    2468
                ],
                "np": [
                    384,
                    385,
                    1926,
                    3847,
                    393,
                    912,
                    1936,
                    1560,
                    2333,
                    3874,
                    2468,
                    2469,
                    1457,
                    2357,
                    3132,
                    849,
                    2007,
                    3804,
                    2012,
                    3827,
                    886
                ],
                "np.expand_dims": [
                    384,
                    385,
                    2468,
                    2469
                ],
                "sparse_coo.row": [
                    384,
                    2468
                ],
                "sparse_coo.col": [
                    385,
                    2469
                ],
                "sparse_coo.data": [
                    387,
                    2470
                ],
                "sparse_coo.shape": [
                    388,
                    389,
                    2470
                ],
                "v._keras_shape": [
                    394,
                    396,
                    389
                ],
                "v._uses_learning_phase": [
                    397,
                    390
                ],
                "tf.Variable": [
                    392
                ],
                "tf.as_dtype": [
                    392,
                    846,
                    751,
                    688,
                    720,
                    883,
                    2358,
                    2334
                ],
                "name": [
                    802,
                    420,
                    392,
                    777,
                    4011,
                    4043,
                    815,
                    752,
                    689,
                    721,
                    691,
                    723,
                    852,
                    502,
                    2452,
                    504,
                    889,
                    4027
                ],
                "np.ndarray": [
                    393
                ],
                "value.shape": [
                    394,
                    2339,
                    2364
                ],
                "int_shape": [
                    1057,
                    1924,
                    4071,
                    396,
                    1934,
                    2382,
                    912,
                    3738,
                    1050,
                    4124
                ],
                "v.constraint": [
                    400
                ],
                "constraint": [
                    400,
                    402
                ],
                "AttributeError": [
                    401,
                    521
                ],
                "v._constraint": [
                    402
                ],
                "tf.constant": [
                    2689,
                    420,
                    1926,
                    1936,
                    2014,
                    2072,
                    1786,
                    1790
                ],
                "shape": [
                    1891,
                    420,
                    3875,
                    2120,
                    3848,
                    3849,
                    3850,
                    689,
                    498,
                    721,
                    500,
                    851,
                    502,
                    888,
                    504,
                    505,
                    3828,
                    3805
                ],
                "tf.Tensor": [
                    462
                ],
                "tf_variables.Variable": [
                    463
                ],
                "tf_variables": [
                    463
                ],
                "str": [
                    3587,
                    2825,
                    2186,
                    2826,
                    3465,
                    1942,
                    4120,
                    3737,
                    3362,
                    3250,
                    3506,
                    1972,
                    2230,
                    3640,
                    3275,
                    3660,
                    465,
                    3413,
                    3548,
                    4068,
                    3689,
                    3321,
                    3709
                ],
                "type": [
                    465
                ],
                "ndim": [
                    2820,
                    1158,
                    2583,
                    2584,
                    1048,
                    1817,
                    3739,
                    2589,
                    3741,
                    3742,
                    1826,
                    2595,
                    1063,
                    3753,
                    3769,
                    1735,
                    1869,
                    1129,
                    1130,
                    2797,
                    499,
                    500,
                    1139,
                    2038,
                    1146,
                    1147
                ],
                "tuple": [
                    2434,
                    3588,
                    2437,
                    2445,
                    3600,
                    2462,
                    1055,
                    2722,
                    2723,
                    3363,
                    1062,
                    2734,
                    3374,
                    2749,
                    2750,
                    580,
                    2757,
                    2526,
                    2021,
                    500,
                    2676,
                    2431
                ],
                "_": [
                    1995,
                    500,
                    4125,
                    2679
                ],
                "range": [
                    4128,
                    4129,
                    1826,
                    1157,
                    1735,
                    1063,
                    1995,
                    2732,
                    4075,
                    500,
                    2772,
                    2589
                ],
                "sparse": [
                    501
                ],
                "tf.sparse_placeholder": [
                    502
                ],
                "tf.placeholder": [
                    504,
                    2363,
                    2339
                ],
                "x._keras_shape": [
                    505,
                    578
                ],
                "x._uses_learning_phase": [
                    506,
                    2878
                ],
                "x.op.type": [
                    520
                ],
                "x.op": [
                    520
                ],
                "tf.shape": [
                    1925,
                    2829,
                    1935,
                    2831,
                    3600,
                    1050,
                    1057,
                    553,
                    2730,
                    3374,
                    3895,
                    1739,
                    2638,
                    2005,
                    2651,
                    3042,
                    1133,
                    1136,
                    2678
                ],
                "as_list": [
                    2019,
                    580,
                    1989,
                    3277,
                    722,
                    690
                ],
                "x.get_shape": [
                    1792,
                    2019,
                    580,
                    1989,
                    2007,
                    1788,
                    606
                ],
                "dims": [
                    608,
                    606,
                    607
                ],
                "_dims": [
                    606
                ],
                "x.dtype.base_dtype.name": [
                    639
                ],
                "x.dtype.base_dtype": [
                    3098,
                    1322,
                    2923,
                    1456,
                    1457,
                    1362,
                    1561,
                    1562,
                    3099,
                    639
                ],
                "x.dtype": [
                    3098,
                    3099,
                    1322,
                    2923,
                    1456,
                    1457,
                    1362,
                    1791,
                    2358,
                    1561,
                    1562,
                    1787,
                    2334,
                    639
                ],
                "eval": [
                    660
                ],
                "to_dense": [
                    660,
                    1878
                ],
                "tf_dtype": [
                    2339,
                    846,
                    751,
                    688,
                    689,
                    721,
                    720,
                    752,
                    851,
                    883,
                    2358,
                    888,
                    2363,
                    2334
                ],
                "tf.zeros": [
                    689,
                    3850
                ],
                "v.get_shape": [
                    722,
                    690
                ],
                "variable": [
                    752,
                    691,
                    852,
                    723,
                    889
                ],
                "tf.ones": [
                    721,
                    3849
                ],
                "tf.eye": [
                    752
                ],
                "size": [
                    752
                ],
                "tf.zeros_like": [
                    777
                ],
                "tf.ones_like": [
                    2833,
                    802
                ],
                "tf.identity": [
                    815
                ],
                "seed": [
                    3846,
                    3847,
                    3848,
                    3873,
                    3874,
                    3875,
                    3131,
                    3132,
                    3135,
                    847,
                    849,
                    851,
                    3803,
                    3804,
                    3806,
                    3826,
                    3827,
                    884,
                    3829,
                    886,
                    888
                ],
                "np.random.randint": [
                    3874,
                    3847,
                    3132,
                    849,
                    3827,
                    886,
                    3804
                ],
                "np.random": [
                    3874,
                    3847,
                    3132,
                    849,
                    3827,
                    886,
                    3804
                ],
                "tf.random_uniform_initializer": [
                    850
                ],
                "low": [
                    851
                ],
                "high": [
                    851
                ],
                "tf.random_normal_initializer": [
                    887
                ],
                "mean": [
                    1760,
                    3875,
                    1732,
                    3805,
                    1709,
                    1742,
                    1711,
                    1714,
                    888,
                    1853
                ],
                "scale": [
                    888
                ],
                "np.prod": [
                    912
                ],
                "tf.cast": [
                    1378,
                    2594,
                    3202,
                    1323,
                    2796,
                    3181,
                    944,
                    1393,
                    1363,
                    3223,
                    3903
                ],
                "tf.assign": [
                    960,
                    2447
                ],
                "new_x": [
                    960
                ],
                "tf.assign_add": [
                    973
                ],
                "increment": [
                    973
                ],
                "tf.assign_sub": [
                    986
                ],
                "decrement": [
                    986
                ],
                "moving_averages.assign_moving_average": [
                    1000
                ],
                "moving_averages": [
                    1000
                ],
                "momentum": [
                    1001
                ],
                "y": [
                    1667,
                    1048,
                    1057,
                    1063,
                    1576,
                    1066,
                    1070,
                    1072,
                    1589,
                    1602,
                    1615,
                    1628,
                    1641,
                    1130,
                    1133,
                    1139,
                    1141,
                    1654,
                    1143,
                    1147,
                    1151
                ],
                "x_shape": [
                    2016,
                    2019,
                    2020,
                    1989,
                    2021,
                    1991,
                    1065,
                    1993,
                    1068,
                    2005,
                    1049,
                    2015,
                    1052,
                    1054,
                    1055
                ],
                "i": [
                    4128,
                    1057,
                    1058,
                    1059,
                    4130,
                    4131,
                    4075,
                    2732,
                    4076,
                    4077,
                    1050,
                    1051,
                    1052
                ],
                "s": [
                    1057,
                    1061,
                    1995,
                    1050,
                    1054
                ],
                "tf.unstack": [
                    1057,
                    1050,
                    2618,
                    2613
                ],
                "x_shape.append": [
                    1052,
                    1054
                ],
                "y_shape": [
                    1056,
                    1059,
                    1061,
                    1062,
                    1066,
                    1068
                ],
                "y_shape.append": [
                    1059,
                    1061
                ],
                "y_permute_dim": [
                    1064,
                    1066,
                    1063
                ],
                "list": [
                    2434,
                    3588,
                    1157,
                    2437,
                    2440,
                    2441,
                    2191,
                    2192,
                    3601,
                    2195,
                    2457,
                    1817,
                    1818,
                    2589,
                    2462,
                    1826,
                    3363,
                    1063,
                    3375,
                    2772,
                    2526,
                    1778,
                    2431
                ],
                "y_permute_dim.pop": [
                    1064
                ],
                "xt": [
                    1065,
                    1067
                ],
                "tf.reshape": [
                    2830,
                    1065,
                    1066,
                    1067,
                    2106,
                    3908,
                    2120,
                    3912,
                    3915,
                    1742,
                    1743,
                    1747,
                    1751,
                    3035,
                    2016,
                    3042,
                    1891,
                    1133,
                    1136
                ],
                "yt": [
                    1066,
                    1067
                ],
                "tf.transpose": [
                    3712,
                    3206,
                    3335,
                    3979,
                    3480,
                    3227,
                    3613,
                    2590,
                    2597,
                    1066,
                    1195,
                    3387,
                    3521,
                    3912,
                    3915,
                    3663,
                    2773,
                    3943,
                    3560,
                    3437,
                    1905,
                    3185,
                    1143
                ],
                "tf.matmul": [
                    1072,
                    1067,
                    1151
                ],
                "out": [
                    1157,
                    1158,
                    1159,
                    1160,
                    1070,
                    1072,
                    1073,
                    1141,
                    1143,
                    1151
                ],
                "tf.sparse_tensor_dense_matmul": [
                    1070
                ],
                "axes": [
                    2597,
                    1127,
                    1128,
                    2290,
                    2291,
                    1140,
                    1141,
                    2292,
                    1143,
                    2772,
                    1145,
                    1146,
                    1147,
                    2773,
                    2589,
                    2590
                ],
                "x_ndim": [
                    1153,
                    1154,
                    1156,
                    1129,
                    1131,
                    1132,
                    1134,
                    1135
                ],
                "y_ndim": [
                    1153,
                    1154,
                    1130,
                    1131,
                    1132,
                    1134,
                    1135
                ],
                "diff": [
                    1152,
                    1157,
                    1132,
                    1133,
                    1135,
                    1136,
                    1138
                ],
                "tf.concat": [
                    1136,
                    2829,
                    1133,
                    1878
                ],
                "tf.reduce_sum": [
                    1262,
                    1141,
                    1143,
                    2999,
                    3005
                ],
                "tf.multiply": [
                    1141,
                    1143
                ],
                "adj_x": [
                    1146,
                    1149,
                    1151
                ],
                "adj_y": [
                    1147,
                    1150,
                    1151
                ],
                "idx": [
                    1154,
                    1156,
                    1157
                ],
                "tf.squeeze": [
                    3939,
                    2147,
                    3940,
                    1157,
                    3434
                ],
                "expand_dims": [
                    2596,
                    1159
                ],
                "tf.gather": [
                    1208
                ],
                "reference": [
                    1208
                ],
                "tf.reduce_max": [
                    1228
                ],
                "axis": [
                    1292,
                    1420,
                    1305,
                    1279,
                    1324,
                    1327,
                    1345,
                    1735,
                    1736,
                    1991,
                    1993,
                    1739,
                    1228,
                    1868,
                    1996,
                    1871,
                    3148,
                    1873,
                    1364,
                    1876,
                    1878,
                    2004,
                    2134,
                    2261,
                    1245,
                    2013,
                    1504,
                    1379,
                    2147,
                    1262,
                    1394,
                    1407
                ],
                "keepdims": [
                    1504,
                    1345,
                    1379,
                    1228,
                    1262,
                    1328,
                    1394,
                    1364,
                    1245,
                    1279
                ],
                "tf.reduce_min": [
                    1245
                ],
                "tf.reduce_prod": [
                    1279
                ],
                "tf.cumsum": [
                    1292
                ],
                "tf.cumprod": [
                    1305
                ],
                "tf.bool": [
                    2593,
                    1378,
                    2594,
                    1322,
                    2795,
                    2703,
                    1393,
                    1362,
                    3903
                ],
                "m": [
                    1324,
                    1325
                ],
                "tf.reduce_mean": [
                    1324,
                    1326,
                    1364
                ],
                "devs_squared": [
                    1325,
                    1326
                ],
                "tf.square": [
                    1432,
                    1325
                ],
                "tf.sqrt": [
                    1345,
                    1459
                ],
                "var": [
                    1760,
                    1345,
                    1732,
                    1709,
                    1711,
                    1743,
                    1714,
                    1853
                ],
                "tf.reduce_any": [
                    1379
                ],
                "tf.reduce_all": [
                    1394
                ],
                "tf.argmax": [
                    1407
                ],
                "tf.argmin": [
                    1420
                ],
                "tf.abs": [
                    1444
                ],
                "zero": [
                    1456,
                    1458,
                    3098,
                    3100
                ],
                "_to_tensor": [
                    3098,
                    3099,
                    2923,
                    1456,
                    1457,
                    3029,
                    3064,
                    1561,
                    1562,
                    3003
                ],
                "inf": [
                    1457,
                    1458
                ],
                "np.inf": [
                    1560,
                    1457
                ],
                "tf.clip_by_value": [
                    3100,
                    1458,
                    3030,
                    3065,
                    1563,
                    3004
                ],
                "tf.exp": [
                    1471
                ],
                "tf.log": [
                    3943,
                    1483,
                    3979,
                    3031,
                    3066,
                    3005
                ],
                "tf.reduce_logsumexp": [
                    1504
                ],
                "tf.round": [
                    1518
                ],
                "tf.sign": [
                    1530
                ],
                "tf.pow": [
                    1543
                ],
                "a": [
                    1543
                ],
                "max_value": [
                    2922,
                    2923,
                    2924,
                    1557,
                    1558,
                    1559,
                    1560,
                    1562,
                    1563
                ],
                "min_value": [
                    1561,
                    1563,
                    1557,
                    1558
                ],
                "tf.equal": [
                    1576
                ],
                "tf.not_equal": [
                    1589
                ],
                "tf.greater": [
                    1602
                ],
                "tf.greater_equal": [
                    1615
                ],
                "tf.less": [
                    1628
                ],
                "tf.less_equal": [
                    1641
                ],
                "tf.maximum": [
                    1654
                ],
                "tf.minimum": [
                    1667,
                    2924
                ],
                "tf.sin": [
                    1679
                ],
                "tf.cos": [
                    1691
                ],
                "tf.nn.moments": [
                    1732,
                    1709
                ],
                "tf.nn": [
                    1794,
                    3081,
                    2954,
                    3474,
                    2966,
                    3609,
                    2978,
                    3113,
                    1709,
                    3757,
                    1711,
                    3765,
                    3383,
                    3515,
                    1853,
                    3135,
                    3008,
                    1732,
                    3652,
                    3781,
                    3656,
                    3148,
                    3288,
                    1753,
                    3036,
                    3164,
                    3552,
                    3428,
                    2918,
                    2920,
                    3701,
                    3705,
                    2938,
                    3068,
                    3326
                ],
                "reduction_axes": [
                    1826,
                    1732,
                    1828,
                    1736,
                    1832,
                    1709,
                    1778,
                    1817,
                    1818,
                    1820,
                    1823
                ],
                "normed": [
                    1760,
                    1753,
                    1714,
                    1711
                ],
                "tf.nn.batch_normalization": [
                    1753,
                    1853,
                    1711
                ],
                "beta": [
                    1827,
                    1797,
                    1831,
                    1853,
                    1712,
                    1748,
                    1751,
                    1819,
                    1789,
                    1790,
                    1823
                ],
                "gamma": [
                    1827,
                    1796,
                    1831,
                    1712,
                    1744,
                    1747,
                    1785,
                    1786,
                    1819,
                    1853,
                    1823
                ],
                "epsilon": [
                    1824,
                    1829,
                    1798,
                    3943,
                    1833,
                    1853,
                    3979,
                    1713,
                    3029,
                    3064,
                    3003,
                    1821,
                    1759
                ],
                "target_shape": [
                    1734,
                    1737,
                    1739,
                    1740,
                    1742,
                    1743,
                    1747,
                    1751
                ],
                "target_shape.append": [
                    1737,
                    1739
                ],
                "tf.stack": [
                    2660,
                    3364,
                    3589,
                    2120,
                    2730,
                    1740,
                    2638,
                    2670,
                    3375,
                    3601,
                    3896,
                    2261,
                    2040,
                    3897,
                    2651
                ],
                "broadcast_mean": [
                    1755,
                    1742
                ],
                "broadcast_var": [
                    1756,
                    1743
                ],
                "broadcast_gamma": [
                    1745,
                    1747,
                    1758
                ],
                "broadcast_beta": [
                    1757,
                    1749,
                    1751
                ],
                "normalization_axis": [
                    1792,
                    1779,
                    1788,
                    1782
                ],
                "tf_data_format": [
                    3203,
                    3332,
                    3334,
                    1799,
                    3208,
                    3209,
                    3591,
                    3467,
                    3593,
                    3469,
                    3604,
                    3478,
                    3479,
                    3224,
                    3611,
                    3612,
                    3229,
                    3230,
                    3366,
                    3368,
                    3378,
                    3508,
                    3510,
                    3385,
                    3386,
                    3642,
                    3644,
                    3519,
                    3520,
                    3654,
                    3703,
                    3658,
                    3662,
                    3285,
                    3287,
                    3415,
                    3417,
                    3707,
                    3294,
                    3550,
                    3558,
                    3559,
                    3432,
                    3691,
                    3436,
                    3693,
                    3182,
                    3187,
                    1780,
                    3188,
                    1783,
                    3323,
                    3711
                ],
                "tf.nn.fused_batch_norm": [
                    1794
                ],
                "_has_nchw_support": [
                    3205,
                    3226,
                    3756,
                    3184,
                    1818
                ],
                "_broadcast_normalize_batch_in_training": [
                    1819,
                    1831
                ],
                "_fused_normalize_batch_in_training": [
                    1822
                ],
                "sorted": [
                    1826
                ],
                "_regular_normalize_batch_in_training": [
                    1827
                ],
                "rank": [
                    1869,
                    1870,
                    1871
                ],
                "tensors": [
                    1875,
                    1876,
                    1869,
                    1878
                ],
                "tf.sparse_concat": [
                    1876
                ],
                "pattern": [
                    2241,
                    2233,
                    2248,
                    2189,
                    1905,
                    2162,
                    2163,
                    2194,
                    2197,
                    2040,
                    2041
                ],
                "data_format": [
                    3584,
                    3585,
                    3586,
                    3587,
                    3591,
                    3593,
                    4117,
                    4118,
                    4119,
                    4120,
                    3612,
                    4134,
                    4146,
                    3637,
                    3638,
                    3639,
                    3640,
                    3642,
                    3662,
                    3686,
                    3687,
                    3688,
                    3689,
                    3691,
                    3183,
                    3711,
                    3204,
                    2183,
                    2184,
                    2185,
                    2186,
                    2188,
                    3734,
                    3735,
                    3736,
                    3225,
                    3737,
                    3743,
                    3748,
                    3754,
                    2227,
                    2228,
                    2229,
                    2230,
                    3763,
                    2232,
                    3770,
                    3775,
                    3272,
                    3273,
                    3274,
                    3275,
                    3284,
                    3318,
                    3319,
                    3320,
                    3321,
                    3323,
                    3334,
                    3359,
                    3360,
                    3361,
                    3362,
                    3366,
                    3368,
                    3386,
                    3410,
                    3411,
                    3412,
                    3413,
                    3415,
                    3436,
                    1923,
                    3462,
                    3463,
                    3464,
                    3465,
                    3467,
                    1933,
                    1942,
                    3479,
                    1961,
                    1966,
                    3503,
                    3504,
                    3505,
                    3506,
                    1972,
                    3508,
                    3520,
                    3545,
                    3546,
                    3547,
                    3548,
                    3550,
                    4065,
                    4066,
                    4067,
                    4068,
                    3559
                ],
                "original_shape": [
                    1924,
                    1930,
                    1931,
                    1934,
                    1938,
                    1939
                ],
                "new_shape": [
                    1925,
                    1926,
                    1928,
                    1935,
                    1936,
                    1937
                ],
                "astype": [
                    1936,
                    1926
                ],
                "np.array": [
                    1936,
                    1926
                ],
                "height_factor": [
                    1926,
                    1930,
                    1963,
                    1936,
                    1968,
                    1938
                ],
                "width_factor": [
                    1926,
                    1931,
                    1964,
                    1936,
                    1969,
                    1939
                ],
                "permute_dimensions": [
                    1927,
                    1929,
                    4147,
                    4083,
                    4149
                ],
                "tf.image.resize_nearest_neighbor": [
                    1928,
                    1937
                ],
                "tf.image": [
                    1928,
                    1937
                ],
                "x.set_shape": [
                    1930,
                    1938
                ],
                "output": [
                    4150,
                    2721,
                    2724,
                    1962,
                    1963,
                    1964,
                    1965,
                    2730,
                    1967,
                    1968,
                    1969,
                    1970,
                    2731,
                    2733,
                    4142,
                    4143,
                    2999,
                    3000,
                    4147,
                    4149,
                    3003,
                    2748,
                    3004,
                    3005,
                    2623,
                    2624,
                    2751,
                    3006,
                    3009,
                    2756,
                    2638,
                    2641,
                    2645,
                    3029,
                    3030,
                    3031,
                    3033,
                    3035,
                    2656,
                    3042,
                    2663,
                    2664,
                    2666,
                    4082,
                    4083,
                    3064,
                    3065,
                    3066,
                    3069
                ],
                "repeat_elements": [
                    1962,
                    1963,
                    1964,
                    1967,
                    1968,
                    1969
                ],
                "depth_factor": [
                    1962,
                    1967
                ],
                "splits": [
                    1993,
                    1995
                ],
                "tf.split": [
                    1993
                ],
                "x_rep": [
                    2016,
                    2020,
                    2021,
                    2022,
                    1995,
                    1996,
                    2006,
                    2009
                ],
                "rep": [
                    2008,
                    1995,
                    2013
                ],
                "concatenate": [
                    4080,
                    3915,
                    1996,
                    4141
                ],
                "auxiliary_axis": [
                    2008,
                    2012,
                    2004,
                    2006
                ],
                "tf.expand_dims": [
                    3424,
                    3425,
                    3945,
                    2039,
                    2134,
                    2006,
                    3900,
                    3423
                ],
                "reps": [
                    2007,
                    2008,
                    2009,
                    2012,
                    2013,
                    2014,
                    2015
                ],
                "np.ones": [
                    2007
                ],
                "tf.tile": [
                    3908,
                    3912,
                    2729,
                    2637,
                    2094,
                    2834,
                    2009,
                    2650,
                    2041
                ],
                "np.delete": [
                    2012
                ],
                "x_rep.set_shape": [
                    2020
                ],
                "x_rep._keras_shape": [
                    2021
                ],
                "n": [
                    2040,
                    2092,
                    2093,
                    2094
                ],
                "stop": [
                    2065,
                    2075
                ],
                "start": [
                    2067,
                    2068,
                    2071,
                    2072,
                    2073,
                    2075
                ],
                "TypeError": [
                    2432,
                    2435,
                    2438,
                    2069,
                    2463
                ],
                "tf.cond": [
                    2809,
                    2071
                ],
                "start.dtype": [
                    2072
                ],
                "result": [
                    2075,
                    2077,
                    2078
                ],
                "tf.range": [
                    3912,
                    2075,
                    3900,
                    3908
                ],
                "step": [
                    2075
                ],
                "cast": [
                    3034,
                    2077
                ],
                "prod": [
                    2120
                ],
                "padding": [
                    3331,
                    2180,
                    2181,
                    2182,
                    3468,
                    2191,
                    2192,
                    2195,
                    3476,
                    3603,
                    3610,
                    3245,
                    3246,
                    2223,
                    2224,
                    2225,
                    2226,
                    3247,
                    3248,
                    3250,
                    3251,
                    3377,
                    3384,
                    3509,
                    3643,
                    2236,
                    2237,
                    2238,
                    3517,
                    2243,
                    2244,
                    2245,
                    3653,
                    3657,
                    3278,
                    3282,
                    3283,
                    3416,
                    3293,
                    3551,
                    3557,
                    3430,
                    3692,
                    2161,
                    2162,
                    3702,
                    3706,
                    3325
                ],
                "tf.pad": [
                    2248,
                    2163,
                    2197
                ],
                "image_data_format": [
                    3360,
                    3585,
                    4066,
                    3463,
                    2184,
                    3273,
                    3687,
                    3735,
                    3504,
                    3411,
                    2228,
                    3638,
                    3319,
                    4118,
                    3546
                ],
                "tf.one_hot": [
                    2276
                ],
                "num_classes": [
                    2276
                ],
                "tf.reverse": [
                    2292
                ],
                "x.eval": [
                    2307
                ],
                "ops": [
                    2320,
                    2319
                ],
                "run": [
                    2320,
                    2370,
                    2343
                ],
                "np.asarray": [
                    2357,
                    2333
                ],
                "x.dtype.name.split": [
                    2358,
                    2334
                ],
                "x.dtype.name": [
                    2358,
                    2334
                ],
                "assign_placeholder": [
                    2336,
                    2369,
                    2339,
                    2340,
                    2341,
                    2343,
                    2360,
                    2363,
                    2365,
                    2366
                ],
                "x._assign_placeholder": [
                    2336,
                    2360,
                    2341,
                    2366
                ],
                "assign_op": [
                    2368,
                    2337,
                    2340,
                    2342,
                    2343,
                    2361,
                    2365,
                    2367
                ],
                "x._assign_op": [
                    2337,
                    2367,
                    2342,
                    2361
                ],
                "x.assign": [
                    2340,
                    2365
                ],
                "tuples": [
                    2353,
                    2356
                ],
                "assign_ops": [
                    2368,
                    2354,
                    2370
                ],
                "feed_dict": [
                    2464,
                    2369,
                    2370,
                    2471,
                    2474,
                    2355
                ],
                "assign_ops.append": [
                    2368
                ],
                "tf.Print": [
                    2404
                ],
                "message": [
                    2404
                ],
                "updates": [
                    2499,
                    2444,
                    2437,
                    2430
                ],
                "inputs": [
                    2688,
                    2465,
                    2499,
                    2590,
                    2440,
                    2679,
                    4135,
                    4138,
                    2606,
                    4078,
                    2674,
                    2613,
                    2678,
                    2583,
                    2685,
                    2462,
                    2431
                ],
                "outputs": [
                    2434,
                    2499,
                    2660,
                    2441,
                    2775,
                    2670,
                    2769,
                    2772,
                    2773,
                    2679,
                    2681
                ],
                "self.inputs": [
                    2440,
                    2465
                ],
                "self.outputs": [
                    2472,
                    2441,
                    2442,
                    2476
                ],
                "tf.control_dependencies": [
                    2442
                ],
                "updates_ops": [
                    2450,
                    2443,
                    2451,
                    2447
                ],
                "update": [
                    2450,
                    2444,
                    2445,
                    2446
                ],
                "p": [
                    3848,
                    2446,
                    2447
                ],
                "new_p": [
                    2446,
                    2447
                ],
                "updates_ops.append": [
                    2450,
                    2447
                ],
                "self.updates_op": [
                    2472,
                    2451
                ],
                "tf.group": [
                    2451
                ],
                "self.name": [
                    2452
                ],
                "self.feed_dict": [
                    2464,
                    2454
                ],
                "session_kwargs.pop": [
                    2456,
                    2454
                ],
                "session_kwargs": [
                    2456,
                    2459,
                    2454
                ],
                "self.fetches": [
                    2456,
                    2457,
                    2458,
                    2472
                ],
                "self.session_kwargs": [
                    2459,
                    2475
                ],
                "self.feed_dict.copy": [
                    2464
                ],
                "fetches": [
                    2472,
                    2474
                ],
                "updated": [
                    2474,
                    2476
                ],
                "kwargs": [
                    2499,
                    2494,
                    2495
                ],
                "key": [
                    2496,
                    2497,
                    2495
                ],
                "has_arg": [
                    2496
                ],
                "tf.Session.run": [
                    2496
                ],
                "Function.__init__": [
                    2496
                ],
                "Function": [
                    2496,
                    2499
                ],
                "msg": [
                    2497,
                    2498
                ],
                "tf.gradients": [
                    2512
                ],
                "loss": [
                    2512
                ],
                "map": [
                    2527
                ],
                "tf.stop_gradient": [
                    2529,
                    2527
                ],
                "inputs.get_shape": [
                    2606,
                    2583
                ],
                "mask": [
                    2592,
                    2593,
                    2594,
                    2595,
                    2596,
                    2597,
                    2691,
                    2700,
                    2706,
                    2617,
                    2618
                ],
                "mask.dtype": [
                    2593
                ],
                "mask.get_shape": [
                    2595
                ],
                "constants": [
                    2723,
                    2663,
                    2600,
                    2599,
                    2679,
                    2750,
                    2623
                ],
                "uses_learning_phase": [
                    2625,
                    2753,
                    2726,
                    2665,
                    2603,
                    2859,
                    2861,
                    2774,
                    2877
                ],
                "unroll": [
                    2605
                ],
                "states": [
                    2657,
                    2722,
                    2754,
                    2692,
                    2663,
                    2727,
                    2762,
                    2667,
                    2731,
                    2623,
                    2732,
                    2609,
                    2676,
                    2648,
                    2749,
                    2655
                ],
                "initial_states": [
                    2609,
                    2676,
                    2679
                ],
                "successive_states": [
                    2657,
                    2659,
                    2667,
                    2669,
                    2610
                ],
                "successive_outputs": [
                    2656,
                    2658,
                    2660,
                    2666,
                    2668,
                    2670,
                    2640,
                    2643,
                    2611
                ],
                "input_list": [
                    2662,
                    2613,
                    2622,
                    2615
                ],
                "go_backwards": [
                    2673,
                    2619,
                    2699,
                    2614
                ],
                "input_list.reverse": [
                    2615
                ],
                "mask_list": [
                    2618,
                    2620,
                    2622
                ],
                "mask_list.reverse": [
                    2620
                ],
                "inp": [
                    2662,
                    2663,
                    2622,
                    2623
                ],
                "mask_t": [
                    2720,
                    2729,
                    2637,
                    2650,
                    2622
                ],
                "new_states": [
                    2721,
                    2754,
                    2659,
                    2757,
                    2727,
                    2732,
                    2669,
                    2734,
                    2767,
                    2775,
                    2648,
                    2748,
                    2623
                ],
                "step_function": [
                    2721,
                    2663,
                    2679,
                    2748,
                    2623
                ],
                "tiled_mask_t": [
                    2729,
                    2731,
                    2732,
                    2637,
                    2645,
                    2650,
                    2652
                ],
                "prev_output": [
                    2641,
                    2643,
                    2645
                ],
                "zeros_like": [
                    2641
                ],
                "tf.where": [
                    3848,
                    2731,
                    2732,
                    2833,
                    2835,
                    2645,
                    2652,
                    2942
                ],
                "return_states": [
                    2652,
                    2655,
                    2647
                ],
                "state": [
                    2754,
                    2755,
                    2727,
                    2728,
                    2648,
                    2654
                ],
                "new_state": [
                    2754,
                    2755,
                    2727,
                    2728,
                    2648,
                    2651,
                    2653
                ],
                "return_states.append": [
                    2652
                ],
                "successive_outputs.append": [
                    2656,
                    2666
                ],
                "successive_states.append": [
                    2657,
                    2667
                ],
                "last_output": [
                    2658,
                    2668,
                    2770,
                    2774,
                    2775
                ],
                "reverse": [
                    3913,
                    2674,
                    2700
                ],
                "time_steps": [
                    2760,
                    2704,
                    2678,
                    2682,
                    2686
                ],
                "output_ta": [
                    2762,
                    2766,
                    2769,
                    2770,
                    2680
                ],
                "tensor_array_ops.TensorArray": [
                    2680,
                    2684,
                    2702
                ],
                "tensor_array_ops": [
                    2680,
                    2684,
                    2702
                ],
                "outputs.dtype": [
                    2681
                ],
                "input_ta": [
                    2688,
                    2747,
                    2684,
                    2719
                ],
                "inputs.dtype": [
                    2685
                ],
                "input_ta.unstack": [
                    2688
                ],
                "time": [
                    2720,
                    2689,
                    2756,
                    2757,
                    2760,
                    2762,
                    2733,
                    2734,
                    2747,
                    2719
                ],
                "mask_ta": [
                    2720,
                    2706,
                    2702
                ],
                "mask_ta.unstack": [
                    2706
                ],
                "current_input": [
                    2721,
                    2747,
                    2748,
                    3901,
                    2719
                ],
                "input_ta.read": [
                    2747,
                    2719
                ],
                "mask_ta.read": [
                    2720
                ],
                "new_state.set_shape": [
                    2728,
                    2755
                ],
                "state.get_shape": [
                    2728,
                    2755
                ],
                "output_ta_t": [
                    2757,
                    2756,
                    2733,
                    2734
                ],
                "output_ta_t.write": [
                    2756,
                    2733
                ],
                "final_outputs": [
                    2767,
                    2765,
                    2766,
                    2759
                ],
                "control_flow_ops.while_loop": [
                    2759
                ],
                "control_flow_ops": [
                    2759
                ],
                "_step": [
                    2761
                ],
                "last_time": [
                    2770,
                    2765
                ],
                "output_ta.stack": [
                    2769
                ],
                "output_ta.read": [
                    2770
                ],
                "outputs.get_shape": [
                    2772
                ],
                "last_output._uses_learning_phase": [
                    2774
                ],
                "condition.dtype": [
                    2795
                ],
                "condition": [
                    2795,
                    2796,
                    2829,
                    2797,
                    2830,
                    2834,
                    2835,
                    2809
                ],
                "cond_ndim": [
                    2821,
                    2825,
                    2827,
                    2828,
                    2797,
                    2798
                ],
                "callable": [
                    2816,
                    2818,
                    2799,
                    2864,
                    2804,
                    2870
                ],
                "then_expression": [
                    2816,
                    2817,
                    2820,
                    2799,
                    2831,
                    2801,
                    2803,
                    2835
                ],
                "then_expression_fn": [
                    2810,
                    2803
                ],
                "else_expression": [
                    2818,
                    2819,
                    2835,
                    2804,
                    2806,
                    2808
                ],
                "else_expression_fn": [
                    2808,
                    2811
                ],
                "expr_ndim": [
                    2826,
                    2828,
                    2820,
                    2821
                ],
                "ndim_diff": [
                    2828,
                    2829
                ],
                "cond_shape": [
                    2832,
                    2829,
                    2830
                ],
                "expr_shape": [
                    2832,
                    2833,
                    2831
                ],
                "shape_diff": [
                    2832,
                    2833
                ],
                "tile_shape": [
                    2833,
                    2834
                ],
                "training": [
                    2857,
                    2858,
                    2863,
                    2899,
                    2869,
                    2876
                ],
                "learning_phase": [
                    2858
                ],
                "alt": [
                    2899,
                    2870,
                    2871,
                    2873,
                    2876
                ],
                "switch": [
                    2876
                ],
                "in_train_phase": [
                    2899
                ],
                "alpha": [
                    2942,
                    2939,
                    2917,
                    2918
                ],
                "tf.nn.leaky_relu": [
                    2918
                ],
                "tf.nn.relu": [
                    2920
                ],
                "res": [
                    3042,
                    3044,
                    2940,
                    2938,
                    3036,
                    2942
                ],
                "tf.nn.elu": [
                    2938
                ],
                "tf.nn.softmax": [
                    2954
                ],
                "tf.nn.softplus": [
                    2966
                ],
                "tf.nn.softsign": [
                    2978
                ],
                "from_logits": [
                    3028,
                    2997,
                    3062
                ],
                "output.get_shape": [
                    3000,
                    3033,
                    3006
                ],
                "_epsilon": [
                    3029,
                    3030,
                    3064,
                    3065,
                    3003,
                    3004
                ],
                "output.dtype.base_dtype": [
                    3064,
                    3003,
                    3029
                ],
                "output.dtype": [
                    3064,
                    3003,
                    3029
                ],
                "target": [
                    3008,
                    3034,
                    3068,
                    3005
                ],
                "tf.nn.softmax_cross_entropy_with_logits": [
                    3008
                ],
                "output_shape": [
                    3588,
                    3589,
                    3594,
                    3595,
                    3596,
                    3597,
                    3598,
                    3599,
                    3600,
                    3601,
                    3609,
                    4123,
                    3363,
                    3364,
                    3369,
                    3370,
                    3371,
                    3372,
                    3373,
                    3374,
                    3375,
                    3383,
                    3033,
                    3035,
                    3039
                ],
                "targets": [
                    3034,
                    3164,
                    3037
                ],
                "flatten": [
                    3034
                ],
                "logits": [
                    3035,
                    3038
                ],
                "tf.nn.sparse_softmax_cross_entropy_with_logits": [
                    3036
                ],
                "tf.nn.sigmoid_cross_entropy_with_logits": [
                    3068
                ],
                "tf.nn.sigmoid": [
                    3081
                ],
                "one": [
                    3099,
                    3100
                ],
                "tf.nn.tanh": [
                    3113
                ],
                "retain_prob": [
                    3130,
                    3135
                ],
                "level": [
                    3130
                ],
                "tf.nn.dropout": [
                    3135
                ],
                "noise_shape": [
                    3135
                ],
                "tf.nn.l2_normalize": [
                    3148
                ],
                "tf.nn.in_top_k": [
                    3164
                ],
                "predictions": [
                    3164
                ],
                "k": [
                    3164
                ],
                "kernel_shape": [
                    4071,
                    4072,
                    3277,
                    3280,
                    4124,
                    4125
                ],
                "kernel.get_shape": [
                    3277
                ],
                "kernel": [
                    3328,
                    3554,
                    4071,
                    3277,
                    4142,
                    4082,
                    3383,
                    3609,
                    3290,
                    4124
                ],
                "left_pad": [
                    3280,
                    3281
                ],
                "dilation_rate": [
                    3329,
                    3426,
                    3555,
                    3431,
                    3280,
                    3477,
                    3291,
                    3518
                ],
                "temporal_padding": [
                    3281
                ],
                "_preprocess_padding": [
                    3468,
                    3692,
                    3377,
                    3283,
                    3603,
                    3509,
                    3416,
                    3643,
                    3325,
                    3551
                ],
                "tf.nn.convolution": [
                    3288,
                    3552,
                    3326
                ],
                "strides": [
                    3330,
                    3470,
                    3472,
                    3475,
                    3605,
                    3607,
                    3609,
                    4122,
                    3379,
                    3381,
                    3511,
                    3383,
                    3513,
                    3516,
                    3645,
                    3648,
                    3652,
                    3656,
                    3419,
                    3292,
                    3422,
                    3556,
                    3429,
                    4070,
                    3694,
                    3697,
                    3701,
                    3705
                ],
                "_preprocess_conv2d_input": [
                    3366,
                    3467,
                    3508,
                    3642,
                    3323
                ],
                "tf.nn.conv2d_transpose": [
                    3383
                ],
                "_preprocess_conv1d_input": [
                    3415
                ],
                "spatial_start_dim": [
                    3418,
                    3421,
                    3434,
                    3423
                ],
                "depthwise_kernel": [
                    3424,
                    3474,
                    3515,
                    3428
                ],
                "pointwise_kernel": [
                    3425,
                    3474,
                    3428
                ],
                "tf.nn.separable_conv2d": [
                    3474,
                    3428
                ],
                "tf.nn.depthwise_conv2d": [
                    3515
                ],
                "_preprocess_conv3d_input": [
                    3691,
                    3550,
                    3591
                ],
                "tf.nn.conv3d_transpose": [
                    3609
                ],
                "pool_size": [
                    3649,
                    3652,
                    3656,
                    3695,
                    3698,
                    3701,
                    3705,
                    3646
                ],
                "pool_mode": [
                    3651,
                    3655,
                    3660,
                    3700,
                    3704,
                    3709
                ],
                "tf.nn.max_pool": [
                    3652
                ],
                "tf.nn.avg_pool": [
                    3656
                ],
                "tf.nn.max_pool3d": [
                    3701
                ],
                "tf.nn.avg_pool3d": [
                    3705
                ],
                "bias_shape": [
                    3738,
                    3739,
                    3741,
                    3744,
                    3745,
                    3747,
                    3749,
                    3750,
                    3752,
                    3755,
                    3760,
                    3762,
                    3764,
                    3768,
                    3771,
                    3772,
                    3774,
                    3776,
                    3777,
                    3779
                ],
                "bias": [
                    3745,
                    3777,
                    3747,
                    3779,
                    3781,
                    3750,
                    3752,
                    3757,
                    3760,
                    3762,
                    3765,
                    3768,
                    3738,
                    3772,
                    3774
                ],
                "reshape": [
                    3745,
                    3777,
                    3747,
                    3779,
                    3750,
                    4135,
                    3752,
                    4138,
                    4078,
                    4143,
                    3760,
                    3762,
                    3768,
                    3772,
                    3774
                ],
                "tf.nn.bias_add": [
                    3781,
                    3757,
                    3765
                ],
                "tf.random_normal": [
                    3805
                ],
                "stddev": [
                    3875,
                    3805
                ],
                "tf.random_uniform": [
                    3848,
                    3828
                ],
                "minval": [
                    3828
                ],
                "maxval": [
                    3828
                ],
                "tf.truncated_normal": [
                    3875
                ],
                "label_shape": [
                    3908,
                    3909,
                    3912,
                    3913,
                    3919,
                    3895,
                    3896,
                    3897,
                    3900,
                    3903
                ],
                "labels": [
                    3917,
                    3895
                ],
                "num_batches_tns": [
                    3896,
                    3908
                ],
                "max_num_labels_tns": [
                    3913,
                    3897,
                    3901
                ],
                "tf.fill": [
                    3900,
                    3903
                ],
                "init": [
                    3905,
                    3903
                ],
                "dense_mask": [
                    3904,
                    3906,
                    3914,
                    3910
                ],
                "functional_ops.scan": [
                    3904
                ],
                "functional_ops": [
                    3904
                ],
                "range_less_than": [
                    3904
                ],
                "label_lengths": [
                    3904
                ],
                "label_array": [
                    3908,
                    3910
                ],
                "label_ind": [
                    3915,
                    3910
                ],
                "tf.boolean_mask": [
                    3914,
                    3910
                ],
                "batch_array": [
                    3912,
                    3914
                ],
                "batch_ind": [
                    3914,
                    3915
                ],
                "vals_sparse": [
                    3917,
                    3919
                ],
                "tf.gather_nd": [
                    3917
                ],
                "tf.to_int64": [
                    3919
                ],
                "label_length": [
                    3939,
                    3941
                ],
                "tf.to_int32": [
                    3980,
                    3939,
                    3940,
                    3941
                ],
                "input_length": [
                    3940,
                    3947,
                    3980,
                    3985,
                    3989
                ],
                "sparse_labels": [
                    3946,
                    3941
                ],
                "ctc_label_dense_to_sparse": [
                    3941
                ],
                "y_true": [
                    3941
                ],
                "y_pred": [
                    3943,
                    3945,
                    3979,
                    3984,
                    3988
                ],
                "ctc.ctc_loss": [
                    3945
                ],
                "ctc": [
                    3945,
                    3987,
                    3983
                ],
                "greedy": [
                    3982
                ],
                "decoded": [
                    3993,
                    3987,
                    3983
                ],
                "log_prob": [
                    3994,
                    3987,
                    3983
                ],
                "ctc.ctc_greedy_decoder": [
                    3983
                ],
                "ctc.ctc_beam_search_decoder": [
                    3987
                ],
                "beam_width": [
                    3989
                ],
                "top_paths": [
                    3990
                ],
                "decoded_dense": [
                    3992,
                    3994
                ],
                "tf.sparse_to_dense": [
                    3992
                ],
                "st.indices": [
                    3992
                ],
                "st": [
                    3992,
                    3993
                ],
                "st.dense_shape": [
                    3992
                ],
                "st.values": [
                    3992
                ],
                "tf.map_fn": [
                    4011
                ],
                "fn": [
                    4011,
                    4027,
                    4043
                ],
                "elems": [
                    4011,
                    4027,
                    4043
                ],
                "tf.foldl": [
                    4027
                ],
                "initializer": [
                    4027,
                    4043
                ],
                "tf.foldr": [
                    4043
                ],
                "stride": [
                    4076,
                    4077,
                    4070
                ],
                "output_length": [
                    4072,
                    4075
                ],
                "feature_dim": [
                    4072,
                    4136,
                    4139,
                    4079,
                    4125
                ],
                "filters": [
                    4072,
                    4144,
                    4125
                ],
                "xs": [
                    4135,
                    4074,
                    4138,
                    4141,
                    4078,
                    4080,
                    4127
                ],
                "slice_length": [
                    4076,
                    4078
                ],
                "slice": [
                    4130,
                    4076,
                    4132
                ],
                "kernel_size": [
                    4131,
                    4133,
                    4077
                ],
                "xs.append": [
                    4138,
                    4078,
                    4135
                ],
                "x_aggregate": [
                    4080,
                    4082,
                    4141,
                    4142
                ],
                "batch_dot": [
                    4082,
                    4142
                ],
                "stride_row": [
                    4122,
                    4131,
                    4130
                ],
                "stride_col": [
                    4122,
                    4132,
                    4133
                ],
                "output_row": [
                    4128,
                    4144,
                    4123
                ],
                "output_col": [
                    4144,
                    4129,
                    4123
                ],
                "j": [
                    4129,
                    4132,
                    4133
                ],
                "slice_row": [
                    4130,
                    4138,
                    4135
                ],
                "slice_col": [
                    4138,
                    4132,
                    4135
                ]
            },
            "filtered_variables_in_file": {
                "py_all": [
                    722,
                    690,
                    27,
                    1875
                ],
                "py_sum": [
                    28
                ],
                "_SESSION": [
                    34,
                    169,
                    176,
                    177,
                    211,
                    90
                ],
                "_GRAPH_LEARNING_PHASES": [
                    129,
                    130,
                    39,
                    146,
                    125,
                    94,
                    95
                ],
                "_GRAPH_UID_DICTS": [
                    69,
                    70,
                    71,
                    72,
                    45,
                    78
                ],
                "_MANUAL_VAR_INIT": [
                    178,
                    50,
                    111
                ],
                "_LOCAL_DEVICES": [
                    267,
                    268,
                    269,
                    55
                ],
                "graph": [
                    129,
                    130,
                    68,
                    69,
                    70,
                    71,
                    72,
                    124,
                    125
                ],
                "tf.get_default_graph": [
                    68,
                    235,
                    146,
                    124,
                    95
                ],
                "tf": [
                    3589,
                    1543,
                    3081,
                    3600,
                    3601,
                    2071,
                    2040,
                    2072,
                    1050,
                    1563,
                    2075,
                    3100,
                    2590,
                    3609,
                    3613,
                    1057,
                    2593,
                    2594,
                    2597,
                    1576,
                    553,
                    1065,
                    1066,
                    1067,
                    3113,
                    1070,
                    2094,
                    1072,
                    1589,
                    2613,
                    2106,
                    2618,
                    3065,
                    3135,
                    1602,
                    3066,
                    68,
                    3652,
                    2120,
                    3656,
                    3148,
                    2637,
                    2638,
                    1615,
                    3663,
                    2645,
                    2134,
                    88,
                    2650,
                    91,
                    1628,
                    2651,
                    2652,
                    95,
                    3164,
                    2147,
                    2660,
                    1641,
                    1133,
                    2670,
                    3181,
                    1136,
                    3185,
                    2163,
                    1141,
                    1654,
                    1143,
                    2678,
                    3701,
                    3705,
                    124,
                    126,
                    1151,
                    3712,
                    2689,
                    3202,
                    1667,
                    1157,
                    3206,
                    1679,
                    2703,
                    146,
                    2197,
                    3223,
                    1691,
                    3227,
                    166,
                    167,
                    2729,
                    2730,
                    171,
                    1195,
                    1709,
                    174,
                    1711,
                    176,
                    688,
                    689,
                    2731,
                    180,
                    2732,
                    3757,
                    3765,
                    1208,
                    189,
                    196,
                    1732,
                    3781,
                    2248,
                    1739,
                    1228,
                    1740,
                    1742,
                    1743,
                    720,
                    721,
                    1747,
                    2261,
                    2773,
                    1751,
                    3288,
                    1753,
                    1245,
                    3805,
                    2276,
                    235,
                    2795,
                    2796,
                    1262,
                    751,
                    752,
                    2292,
                    3828,
                    2809,
                    1786,
                    1790,
                    1279,
                    3326,
                    1794,
                    3335,
                    3848,
                    777,
                    3849,
                    3850,
                    1292,
                    2829,
                    2830,
                    2831,
                    2833,
                    2834,
                    2835,
                    1305,
                    2334,
                    802,
                    2339,
                    3364,
                    3875,
                    298,
                    1323,
                    1324,
                    1325,
                    1326,
                    815,
                    1322,
                    3374,
                    3375,
                    2358,
                    3383,
                    3895,
                    3896,
                    3897,
                    2363,
                    3387,
                    1853,
                    3900,
                    3903,
                    321,
                    1345,
                    3908,
                    3910,
                    3912,
                    3914,
                    3915,
                    3917,
                    846,
                    3919,
                    850,
                    1362,
                    1363,
                    1364,
                    1876,
                    1878,
                    345,
                    350,
                    3423,
                    3424,
                    3425,
                    1378,
                    1379,
                    1891,
                    2404,
                    2918,
                    3428,
                    2920,
                    3939,
                    3434,
                    3940,
                    2924,
                    3437,
                    3941,
                    3943,
                    3945,
                    1393,
                    1394,
                    883,
                    1905,
                    887,
                    2938,
                    2942,
                    1407,
                    386,
                    1925,
                    1926,
                    392,
                    1928,
                    2442,
                    2954,
                    1420,
                    3979,
                    3980,
                    1935,
                    1936,
                    1937,
                    2447,
                    2451,
                    3474,
                    2966,
                    1432,
                    3480,
                    3992,
                    2978,
                    420,
                    1444,
                    4011,
                    944,
                    1458,
                    1459,
                    2999,
                    3515,
                    3004,
                    3005,
                    4027,
                    1471,
                    960,
                    2496,
                    3008,
                    3521,
                    1993,
                    1483,
                    4043,
                    973,
                    462,
                    464,
                    2512,
                    2005,
                    2006,
                    3030,
                    3031,
                    2009,
                    986,
                    3035,
                    3036,
                    2014,
                    2527,
                    1504,
                    2016,
                    2529,
                    3042,
                    3552,
                    3560,
                    1518,
                    502,
                    2039,
                    504,
                    2041,
                    1530,
                    3068
                ],
                "defaultdict": [
                    70
                ],
                "prefix": [
                    72,
                    71
                ],
                "tf.reset_default_graph": [
                    88
                ],
                "reset_uids": [
                    89
                ],
                "phase": [
                    129,
                    91,
                    126,
                    95
                ],
                "tf.placeholder_with_default": [
                    91,
                    126
                ],
                "value": [
                    392,
                    393,
                    394,
                    395,
                    396,
                    143,
                    146,
                    2333,
                    2465,
                    2339,
                    420,
                    2467,
                    2470,
                    2343,
                    2471,
                    2356,
                    2357,
                    2364,
                    2369,
                    850,
                    852,
                    1001,
                    111,
                    887,
                    889,
                    382,
                    383
                ],
                "tf.get_default_session": [
                    166,
                    167
                ],
                "session": [
                    196,
                    167,
                    199,
                    200,
                    201,
                    2473,
                    2474,
                    177,
                    179,
                    211,
                    188
                ],
                "os.environ.get": [
                    170,
                    173
                ],
                "os.environ": [
                    170,
                    173
                ],
                "os": [
                    170,
                    173
                ],
                "config": [
                    176,
                    171,
                    174
                ],
                "tf.ConfigProto": [
                    171,
                    174
                ],
                "num_thread": [
                    173,
                    174
                ],
                "tf.Session": [
                    176,
                    2496
                ],
                "session.graph.as_default": [
                    179
                ],
                "session.graph": [
                    179
                ],
                "variables": [
                    2529,
                    2512,
                    180,
                    182,
                    2526,
                    2527
                ],
                "tf.global_variables": [
                    180
                ],
                "candidate_vars": [
                    181,
                    184,
                    185,
                    189,
                    191
                ],
                "v": [
                    386,
                    389,
                    390,
                    391,
                    392,
                    394,
                    396,
                    397,
                    400,
                    402,
                    403,
                    689,
                    690,
                    691,
                    692,
                    182,
                    183,
                    184,
                    189,
                    191,
                    193,
                    194,
                    721,
                    722,
                    723,
                    724
                ],
                "candidate_vars.append": [
                    184
                ],
                "is_initialized": [
                    188,
                    191
                ],
                "session.run": [
                    2474,
                    196,
                    188
                ],
                "tf.is_variable_initialized": [
                    189
                ],
                "uninitialized_vars": [
                    193,
                    195,
                    196,
                    190
                ],
                "flag": [
                    192,
                    191
                ],
                "uninitialized_vars.append": [
                    193
                ],
                "v._keras_initialized": [
                    194
                ],
                "tf.variables_initializer": [
                    196
                ],
                "session.list_devices": [
                    200
                ],
                "device_lib.list_local_devices": [
                    200
                ],
                "device_lib": [
                    200
                ],
                "self.device": [
                    224,
                    220
                ],
                "self": [
                    224,
                    2464,
                    2465,
                    2440,
                    2441,
                    2442,
                    2472,
                    2475,
                    2476,
                    2451,
                    2452,
                    2454,
                    2456,
                    2457,
                    2458,
                    2459,
                    220
                ],
                "device": [
                    224,
                    256,
                    257
                ],
                "g": [
                    235,
                    237
                ],
                "op": [
                    236,
                    237,
                    238
                ],
                "_TfDeviceCaptureOp": [
                    236
                ],
                "g._apply_device_functions": [
                    237
                ],
                "op.device": [
                    238
                ],
                "device_type": [
                    257,
                    253,
                    254
                ],
                "device_type.upper": [
                    257,
                    253
                ],
                "_get_current_tf_device": [
                    256
                ],
                "device.device_type": [
                    257
                ],
                "list_devices": [
                    268
                ],
                "get_session": [
                    2370,
                    2307,
                    2343,
                    2473,
                    268,
                    2320,
                    660
                ],
                "x.name": [
                    269
                ],
                "x": [
                    1543,
                    520,
                    3081,
                    3591,
                    3600,
                    2039,
                    1048,
                    1561,
                    1050,
                    1562,
                    1563,
                    2041,
                    3097,
                    3098,
                    3099,
                    3100,
                    3101,
                    3613,
                    3614,
                    1576,
                    553,
                    1065,
                    3113,
                    3366,
                    1069,
                    1070,
                    2094,
                    1072,
                    1589,
                    2106,
                    3642,
                    3135,
                    577,
                    578,
                    1602,
                    580,
                    3652,
                    2120,
                    2121,
                    3656,
                    3148,
                    1615,
                    3663,
                    3664,
                    2134,
                    1628,
                    606,
                    2147,
                    1129,
                    1641,
                    3691,
                    3180,
                    3181,
                    1136,
                    3185,
                    1139,
                    2163,
                    1141,
                    1654,
                    1143,
                    3188,
                    3701,
                    1146,
                    3705,
                    1151,
                    639,
                    3201,
                    3202,
                    1667,
                    3712,
                    3713,
                    3206,
                    3209,
                    1679,
                    660,
                    2197,
                    3222,
                    3223,
                    1691,
                    3227,
                    3739,
                    3230,
                    3741,
                    3742,
                    3745,
                    3747,
                    3750,
                    3752,
                    3753,
                    1195,
                    1709,
                    3757,
                    1711,
                    3760,
                    3762,
                    3765,
                    3768,
                    3769,
                    3772,
                    3774,
                    3777,
                    3779,
                    1732,
                    3781,
                    3782,
                    1735,
                    2248,
                    1739,
                    1228,
                    3281,
                    2261,
                    3288,
                    3289,
                    1754,
                    1245,
                    3295,
                    1262,
                    3609,
                    2292,
                    2809,
                    1787,
                    1788,
                    3323,
                    3326,
                    1279,
                    1791,
                    1792,
                    3327,
                    1795,
                    2307,
                    3335,
                    3336,
                    777,
                    1292,
                    269,
                    2835,
                    2836,
                    1305,
                    1817,
                    1819,
                    2333,
                    2334,
                    1823,
                    2335,
                    2336,
                    802,
                    1826,
                    1827,
                    2337,
                    2340,
                    1831,
                    2341,
                    2342,
                    298,
                    1322,
                    1323,
                    1324,
                    1325,
                    815,
                    2864,
                    2865,
                    3374,
                    2867,
                    2356,
                    2357,
                    2358,
                    2359,
                    2360,
                    2361,
                    3383,
                    3387,
                    2876,
                    1853,
                    2365,
                    2366,
                    2367,
                    1345,
                    2878,
                    2879,
                    3388,
                    2382,
                    1362,
                    1363,
                    1364,
                    1875,
                    1878,
                    2899,
                    3415,
                    3423,
                    1378,
                    1379,
                    1891,
                    2404,
                    2918,
                    3428,
                    2920,
                    3434,
                    2923,
                    2924,
                    2925,
                    3437,
                    3439,
                    1393,
                    1394,
                    1905,
                    2938,
                    2942,
                    1407,
                    1924,
                    1925,
                    1927,
                    1928,
                    1929,
                    1930,
                    2954,
                    1420,
                    1932,
                    1934,
                    1935,
                    912,
                    1937,
                    1938,
                    3467,
                    1940,
                    3474,
                    2966,
                    1432,
                    3480,
                    3481,
                    2978,
                    1444,
                    1962,
                    1967,
                    944,
                    1456,
                    1457,
                    1458,
                    1459,
                    3508,
                    3515,
                    1471,
                    960,
                    3521,
                    3522,
                    1989,
                    1993,
                    1483,
                    973,
                    462,
                    465,
                    467,
                    2005,
                    2006,
                    2007,
                    986,
                    3550,
                    1504,
                    3552,
                    3553,
                    2019,
                    3560,
                    1001,
                    3561,
                    1518,
                    506,
                    502,
                    2038,
                    504,
                    505,
                    1530,
                    507
                ],
                "x.device_type": [
                    269
                ],
                "explicitly_on_cpu": [
                    281,
                    283
                ],
                "_is_current_explicit_device": [
                    281
                ],
                "gpus_available": [
                    282,
                    283
                ],
                "_get_available_gpus": [
                    282
                ],
                "tf.convert_to_tensor": [
                    298
                ],
                "dtype": [
                    3201,
                    3844,
                    3845,
                    392,
                    777,
                    3848,
                    3849,
                    3850,
                    3222,
                    2076,
                    2077,
                    2333,
                    3871,
                    3872,
                    418,
                    419,
                    420,
                    802,
                    3875,
                    298,
                    4011,
                    686,
                    687,
                    688,
                    944,
                    691,
                    2357,
                    844,
                    845,
                    718,
                    719,
                    720,
                    846,
                    723,
                    852,
                    3801,
                    3802,
                    3806,
                    3180,
                    749,
                    750,
                    751,
                    496,
                    497,
                    752,
                    881,
                    882,
                    883,
                    502,
                    3824,
                    504,
                    889,
                    3825,
                    3829,
                    380,
                    381
                ],
                "tensor": [
                    321,
                    2465,
                    2466,
                    2471,
                    344,
                    345,
                    347
                ],
                "tf.SparseTensor": [
                    464,
                    321,
                    386,
                    3919
                ],
                "is_sparse": [
                    344,
                    2466,
                    1875,
                    1069
                ],
                "tf.sparse_tensor_to_dense": [
                    345
                ],
                "name_scope": [
                    350
                ],
                "tf.name_scope": [
                    350
                ],
                "floatx": [
                    3872,
                    419,
                    3845,
                    1323,
                    845,
                    750,
                    719,
                    687,
                    497,
                    882,
                    1363,
                    3825,
                    3802,
                    381
                ],
                "sparse_coo": [
                    384,
                    385,
                    387,
                    388,
                    389,
                    2467,
                    2468,
                    2469,
                    2470,
                    383
                ],
                "value.tocoo": [
                    2467,
                    383
                ],
                "indices": [
                    384,
                    386,
                    2276,
                    2468,
                    2470,
                    3915,
                    3917,
                    3919,
                    1208
                ],
                "np.concatenate": [
                    384,
                    2468
                ],
                "np": [
                    384,
                    385,
                    1926,
                    3847,
                    393,
                    912,
                    1936,
                    1560,
                    2333,
                    3874,
                    2468,
                    2469,
                    1457,
                    2357,
                    3132,
                    849,
                    2007,
                    3804,
                    2012,
                    3827,
                    886
                ],
                "np.expand_dims": [
                    384,
                    385,
                    2468,
                    2469
                ],
                "sparse_coo.row": [
                    384,
                    2468
                ],
                "sparse_coo.col": [
                    385,
                    2469
                ],
                "sparse_coo.data": [
                    387,
                    2470
                ],
                "sparse_coo.shape": [
                    388,
                    389,
                    2470
                ],
                "v._keras_shape": [
                    394,
                    396,
                    389
                ],
                "v._uses_learning_phase": [
                    397,
                    390
                ],
                "tf.Variable": [
                    392
                ],
                "tf.as_dtype": [
                    392,
                    846,
                    751,
                    688,
                    720,
                    883,
                    2358,
                    2334
                ],
                "name": [
                    802,
                    420,
                    392,
                    777,
                    4011,
                    4043,
                    815,
                    752,
                    689,
                    721,
                    691,
                    723,
                    852,
                    502,
                    2452,
                    504,
                    889,
                    4027
                ],
                "np.ndarray": [
                    393
                ],
                "value.shape": [
                    394,
                    2339,
                    2364
                ],
                "int_shape": [
                    1057,
                    1924,
                    4071,
                    396,
                    1934,
                    2382,
                    912,
                    3738,
                    1050,
                    4124
                ],
                "v.constraint": [
                    400
                ],
                "constraint": [
                    400,
                    402
                ],
                "v._constraint": [
                    402
                ],
                "tf.constant": [
                    2689,
                    420,
                    1926,
                    1936,
                    2014,
                    2072,
                    1786,
                    1790
                ],
                "shape": [
                    1891,
                    420,
                    3875,
                    2120,
                    3848,
                    3849,
                    3850,
                    689,
                    498,
                    721,
                    500,
                    851,
                    502,
                    888,
                    504,
                    505,
                    3828,
                    3805
                ],
                "tf.Tensor": [
                    462
                ],
                "tf_variables.Variable": [
                    463
                ],
                "tf_variables": [
                    463
                ],
                "ndim": [
                    2820,
                    1158,
                    2583,
                    2584,
                    1048,
                    1817,
                    3739,
                    2589,
                    3741,
                    3742,
                    1826,
                    2595,
                    1063,
                    3753,
                    3769,
                    1735,
                    1869,
                    1129,
                    1130,
                    2797,
                    499,
                    500,
                    1139,
                    2038,
                    1146,
                    1147
                ],
                "_": [
                    1995,
                    500,
                    4125,
                    2679
                ],
                "sparse": [
                    501
                ],
                "tf.sparse_placeholder": [
                    502
                ],
                "tf.placeholder": [
                    504,
                    2363,
                    2339
                ],
                "x._keras_shape": [
                    505,
                    578
                ],
                "x._uses_learning_phase": [
                    506,
                    2878
                ],
                "x.op.type": [
                    520
                ],
                "x.op": [
                    520
                ],
                "tf.shape": [
                    1925,
                    2829,
                    1935,
                    2831,
                    3600,
                    1050,
                    1057,
                    553,
                    2730,
                    3374,
                    3895,
                    1739,
                    2638,
                    2005,
                    2651,
                    3042,
                    1133,
                    1136,
                    2678
                ],
                "as_list": [
                    2019,
                    580,
                    1989,
                    3277,
                    722,
                    690
                ],
                "x.get_shape": [
                    1792,
                    2019,
                    580,
                    1989,
                    2007,
                    1788,
                    606
                ],
                "dims": [
                    608,
                    606,
                    607
                ],
                "_dims": [
                    606
                ],
                "x.dtype.base_dtype.name": [
                    639
                ],
                "x.dtype.base_dtype": [
                    3098,
                    1322,
                    2923,
                    1456,
                    1457,
                    1362,
                    1561,
                    1562,
                    3099,
                    639
                ],
                "x.dtype": [
                    3098,
                    3099,
                    1322,
                    2923,
                    1456,
                    1457,
                    1362,
                    1791,
                    2358,
                    1561,
                    1562,
                    1787,
                    2334,
                    639
                ],
                "to_dense": [
                    660,
                    1878
                ],
                "tf_dtype": [
                    2339,
                    846,
                    751,
                    688,
                    689,
                    721,
                    720,
                    752,
                    851,
                    883,
                    2358,
                    888,
                    2363,
                    2334
                ],
                "tf.zeros": [
                    689,
                    3850
                ],
                "v.get_shape": [
                    722,
                    690
                ],
                "variable": [
                    752,
                    691,
                    852,
                    723,
                    889
                ],
                "tf.ones": [
                    721,
                    3849
                ],
                "tf.eye": [
                    752
                ],
                "size": [
                    752
                ],
                "tf.zeros_like": [
                    777
                ],
                "tf.ones_like": [
                    2833,
                    802
                ],
                "tf.identity": [
                    815
                ],
                "seed": [
                    3846,
                    3847,
                    3848,
                    3873,
                    3874,
                    3875,
                    3131,
                    3132,
                    3135,
                    847,
                    849,
                    851,
                    3803,
                    3804,
                    3806,
                    3826,
                    3827,
                    884,
                    3829,
                    886,
                    888
                ],
                "np.random.randint": [
                    3874,
                    3847,
                    3132,
                    849,
                    3827,
                    886,
                    3804
                ],
                "np.random": [
                    3874,
                    3847,
                    3132,
                    849,
                    3827,
                    886,
                    3804
                ],
                "tf.random_uniform_initializer": [
                    850
                ],
                "low": [
                    851
                ],
                "high": [
                    851
                ],
                "tf.random_normal_initializer": [
                    887
                ],
                "mean": [
                    1760,
                    3875,
                    1732,
                    3805,
                    1709,
                    1742,
                    1711,
                    1714,
                    888,
                    1853
                ],
                "scale": [
                    888
                ],
                "np.prod": [
                    912
                ],
                "tf.cast": [
                    1378,
                    2594,
                    3202,
                    1323,
                    2796,
                    3181,
                    944,
                    1393,
                    1363,
                    3223,
                    3903
                ],
                "tf.assign": [
                    960,
                    2447
                ],
                "new_x": [
                    960
                ],
                "tf.assign_add": [
                    973
                ],
                "increment": [
                    973
                ],
                "tf.assign_sub": [
                    986
                ],
                "decrement": [
                    986
                ],
                "moving_averages.assign_moving_average": [
                    1000
                ],
                "moving_averages": [
                    1000
                ],
                "momentum": [
                    1001
                ],
                "y": [
                    1667,
                    1048,
                    1057,
                    1063,
                    1576,
                    1066,
                    1070,
                    1072,
                    1589,
                    1602,
                    1615,
                    1628,
                    1641,
                    1130,
                    1133,
                    1139,
                    1141,
                    1654,
                    1143,
                    1147,
                    1151
                ],
                "x_shape": [
                    2016,
                    2019,
                    2020,
                    1989,
                    2021,
                    1991,
                    1065,
                    1993,
                    1068,
                    2005,
                    1049,
                    2015,
                    1052,
                    1054,
                    1055
                ],
                "i": [
                    4128,
                    1057,
                    1058,
                    1059,
                    4130,
                    4131,
                    4075,
                    2732,
                    4076,
                    4077,
                    1050,
                    1051,
                    1052
                ],
                "s": [
                    1057,
                    1061,
                    1995,
                    1050,
                    1054
                ],
                "tf.unstack": [
                    1057,
                    1050,
                    2618,
                    2613
                ],
                "x_shape.append": [
                    1052,
                    1054
                ],
                "y_shape": [
                    1056,
                    1059,
                    1061,
                    1062,
                    1066,
                    1068
                ],
                "y_shape.append": [
                    1059,
                    1061
                ],
                "y_permute_dim": [
                    1064,
                    1066,
                    1063
                ],
                "y_permute_dim.pop": [
                    1064
                ],
                "xt": [
                    1065,
                    1067
                ],
                "tf.reshape": [
                    2830,
                    1065,
                    1066,
                    1067,
                    2106,
                    3908,
                    2120,
                    3912,
                    3915,
                    1742,
                    1743,
                    1747,
                    1751,
                    3035,
                    2016,
                    3042,
                    1891,
                    1133,
                    1136
                ],
                "yt": [
                    1066,
                    1067
                ],
                "tf.transpose": [
                    3712,
                    3206,
                    3335,
                    3979,
                    3480,
                    3227,
                    3613,
                    2590,
                    2597,
                    1066,
                    1195,
                    3387,
                    3521,
                    3912,
                    3915,
                    3663,
                    2773,
                    3943,
                    3560,
                    3437,
                    1905,
                    3185,
                    1143
                ],
                "tf.matmul": [
                    1072,
                    1067,
                    1151
                ],
                "out": [
                    1157,
                    1158,
                    1159,
                    1160,
                    1070,
                    1072,
                    1073,
                    1141,
                    1143,
                    1151
                ],
                "tf.sparse_tensor_dense_matmul": [
                    1070
                ],
                "axes": [
                    2597,
                    1127,
                    1128,
                    2290,
                    2291,
                    1140,
                    1141,
                    2292,
                    1143,
                    2772,
                    1145,
                    1146,
                    1147,
                    2773,
                    2589,
                    2590
                ],
                "x_ndim": [
                    1153,
                    1154,
                    1156,
                    1129,
                    1131,
                    1132,
                    1134,
                    1135
                ],
                "y_ndim": [
                    1153,
                    1154,
                    1130,
                    1131,
                    1132,
                    1134,
                    1135
                ],
                "diff": [
                    1152,
                    1157,
                    1132,
                    1133,
                    1135,
                    1136,
                    1138
                ],
                "tf.concat": [
                    1136,
                    2829,
                    1133,
                    1878
                ],
                "tf.reduce_sum": [
                    1262,
                    1141,
                    1143,
                    2999,
                    3005
                ],
                "tf.multiply": [
                    1141,
                    1143
                ],
                "adj_x": [
                    1146,
                    1149,
                    1151
                ],
                "adj_y": [
                    1147,
                    1150,
                    1151
                ],
                "idx": [
                    1154,
                    1156,
                    1157
                ],
                "tf.squeeze": [
                    3939,
                    2147,
                    3940,
                    1157,
                    3434
                ],
                "expand_dims": [
                    2596,
                    1159
                ],
                "tf.gather": [
                    1208
                ],
                "reference": [
                    1208
                ],
                "tf.reduce_max": [
                    1228
                ],
                "axis": [
                    1292,
                    1420,
                    1305,
                    1279,
                    1324,
                    1327,
                    1345,
                    1735,
                    1736,
                    1991,
                    1993,
                    1739,
                    1228,
                    1868,
                    1996,
                    1871,
                    3148,
                    1873,
                    1364,
                    1876,
                    1878,
                    2004,
                    2134,
                    2261,
                    1245,
                    2013,
                    1504,
                    1379,
                    2147,
                    1262,
                    1394,
                    1407
                ],
                "keepdims": [
                    1504,
                    1345,
                    1379,
                    1228,
                    1262,
                    1328,
                    1394,
                    1364,
                    1245,
                    1279
                ],
                "tf.reduce_min": [
                    1245
                ],
                "tf.reduce_prod": [
                    1279
                ],
                "tf.cumsum": [
                    1292
                ],
                "tf.cumprod": [
                    1305
                ],
                "tf.bool": [
                    2593,
                    1378,
                    2594,
                    1322,
                    2795,
                    2703,
                    1393,
                    1362,
                    3903
                ],
                "m": [
                    1324,
                    1325
                ],
                "tf.reduce_mean": [
                    1324,
                    1326,
                    1364
                ],
                "devs_squared": [
                    1325,
                    1326
                ],
                "tf.square": [
                    1432,
                    1325
                ],
                "tf.sqrt": [
                    1345,
                    1459
                ],
                "var": [
                    1760,
                    1345,
                    1732,
                    1709,
                    1711,
                    1743,
                    1714,
                    1853
                ],
                "tf.reduce_any": [
                    1379
                ],
                "tf.reduce_all": [
                    1394
                ],
                "tf.argmax": [
                    1407
                ],
                "tf.argmin": [
                    1420
                ],
                "tf.abs": [
                    1444
                ],
                "zero": [
                    1456,
                    1458,
                    3098,
                    3100
                ],
                "_to_tensor": [
                    3098,
                    3099,
                    2923,
                    1456,
                    1457,
                    3029,
                    3064,
                    1561,
                    1562,
                    3003
                ],
                "inf": [
                    1457,
                    1458
                ],
                "np.inf": [
                    1560,
                    1457
                ],
                "tf.clip_by_value": [
                    3100,
                    1458,
                    3030,
                    3065,
                    1563,
                    3004
                ],
                "tf.exp": [
                    1471
                ],
                "tf.log": [
                    3943,
                    1483,
                    3979,
                    3031,
                    3066,
                    3005
                ],
                "tf.reduce_logsumexp": [
                    1504
                ],
                "tf.round": [
                    1518
                ],
                "tf.sign": [
                    1530
                ],
                "tf.pow": [
                    1543
                ],
                "a": [
                    1543
                ],
                "max_value": [
                    2922,
                    2923,
                    2924,
                    1557,
                    1558,
                    1559,
                    1560,
                    1562,
                    1563
                ],
                "min_value": [
                    1561,
                    1563,
                    1557,
                    1558
                ],
                "tf.equal": [
                    1576
                ],
                "tf.not_equal": [
                    1589
                ],
                "tf.greater": [
                    1602
                ],
                "tf.greater_equal": [
                    1615
                ],
                "tf.less": [
                    1628
                ],
                "tf.less_equal": [
                    1641
                ],
                "tf.maximum": [
                    1654
                ],
                "tf.minimum": [
                    1667,
                    2924
                ],
                "tf.sin": [
                    1679
                ],
                "tf.cos": [
                    1691
                ],
                "tf.nn.moments": [
                    1732,
                    1709
                ],
                "tf.nn": [
                    1794,
                    3081,
                    2954,
                    3474,
                    2966,
                    3609,
                    2978,
                    3113,
                    1709,
                    3757,
                    1711,
                    3765,
                    3383,
                    3515,
                    1853,
                    3135,
                    3008,
                    1732,
                    3652,
                    3781,
                    3656,
                    3148,
                    3288,
                    1753,
                    3036,
                    3164,
                    3552,
                    3428,
                    2918,
                    2920,
                    3701,
                    3705,
                    2938,
                    3068,
                    3326
                ],
                "reduction_axes": [
                    1826,
                    1732,
                    1828,
                    1736,
                    1832,
                    1709,
                    1778,
                    1817,
                    1818,
                    1820,
                    1823
                ],
                "normed": [
                    1760,
                    1753,
                    1714,
                    1711
                ],
                "tf.nn.batch_normalization": [
                    1753,
                    1853,
                    1711
                ],
                "beta": [
                    1827,
                    1797,
                    1831,
                    1853,
                    1712,
                    1748,
                    1751,
                    1819,
                    1789,
                    1790,
                    1823
                ],
                "gamma": [
                    1827,
                    1796,
                    1831,
                    1712,
                    1744,
                    1747,
                    1785,
                    1786,
                    1819,
                    1853,
                    1823
                ],
                "epsilon": [
                    1824,
                    1829,
                    1798,
                    3943,
                    1833,
                    1853,
                    3979,
                    1713,
                    3029,
                    3064,
                    3003,
                    1821,
                    1759
                ],
                "target_shape": [
                    1734,
                    1737,
                    1739,
                    1740,
                    1742,
                    1743,
                    1747,
                    1751
                ],
                "target_shape.append": [
                    1737,
                    1739
                ],
                "tf.stack": [
                    2660,
                    3364,
                    3589,
                    2120,
                    2730,
                    1740,
                    2638,
                    2670,
                    3375,
                    3601,
                    3896,
                    2261,
                    2040,
                    3897,
                    2651
                ],
                "broadcast_mean": [
                    1755,
                    1742
                ],
                "broadcast_var": [
                    1756,
                    1743
                ],
                "broadcast_gamma": [
                    1745,
                    1747,
                    1758
                ],
                "broadcast_beta": [
                    1757,
                    1749,
                    1751
                ],
                "normalization_axis": [
                    1792,
                    1779,
                    1788,
                    1782
                ],
                "tf_data_format": [
                    3203,
                    3332,
                    3334,
                    1799,
                    3208,
                    3209,
                    3591,
                    3467,
                    3593,
                    3469,
                    3604,
                    3478,
                    3479,
                    3224,
                    3611,
                    3612,
                    3229,
                    3230,
                    3366,
                    3368,
                    3378,
                    3508,
                    3510,
                    3385,
                    3386,
                    3642,
                    3644,
                    3519,
                    3520,
                    3654,
                    3703,
                    3658,
                    3662,
                    3285,
                    3287,
                    3415,
                    3417,
                    3707,
                    3294,
                    3550,
                    3558,
                    3559,
                    3432,
                    3691,
                    3436,
                    3693,
                    3182,
                    3187,
                    1780,
                    3188,
                    1783,
                    3323,
                    3711
                ],
                "tf.nn.fused_batch_norm": [
                    1794
                ],
                "_has_nchw_support": [
                    3205,
                    3226,
                    3756,
                    3184,
                    1818
                ],
                "_broadcast_normalize_batch_in_training": [
                    1819,
                    1831
                ],
                "_fused_normalize_batch_in_training": [
                    1822
                ],
                "_regular_normalize_batch_in_training": [
                    1827
                ],
                "rank": [
                    1869,
                    1870,
                    1871
                ],
                "tensors": [
                    1875,
                    1876,
                    1869,
                    1878
                ],
                "tf.sparse_concat": [
                    1876
                ],
                "pattern": [
                    2241,
                    2233,
                    2248,
                    2189,
                    1905,
                    2162,
                    2163,
                    2194,
                    2197,
                    2040,
                    2041
                ],
                "data_format": [
                    3584,
                    3585,
                    3586,
                    3587,
                    3591,
                    3593,
                    4117,
                    4118,
                    4119,
                    4120,
                    3612,
                    4134,
                    4146,
                    3637,
                    3638,
                    3639,
                    3640,
                    3642,
                    3662,
                    3686,
                    3687,
                    3688,
                    3689,
                    3691,
                    3183,
                    3711,
                    3204,
                    2183,
                    2184,
                    2185,
                    2186,
                    2188,
                    3734,
                    3735,
                    3736,
                    3225,
                    3737,
                    3743,
                    3748,
                    3754,
                    2227,
                    2228,
                    2229,
                    2230,
                    3763,
                    2232,
                    3770,
                    3775,
                    3272,
                    3273,
                    3274,
                    3275,
                    3284,
                    3318,
                    3319,
                    3320,
                    3321,
                    3323,
                    3334,
                    3359,
                    3360,
                    3361,
                    3362,
                    3366,
                    3368,
                    3386,
                    3410,
                    3411,
                    3412,
                    3413,
                    3415,
                    3436,
                    1923,
                    3462,
                    3463,
                    3464,
                    3465,
                    3467,
                    1933,
                    1942,
                    3479,
                    1961,
                    1966,
                    3503,
                    3504,
                    3505,
                    3506,
                    1972,
                    3508,
                    3520,
                    3545,
                    3546,
                    3547,
                    3548,
                    3550,
                    4065,
                    4066,
                    4067,
                    4068,
                    3559
                ],
                "original_shape": [
                    1924,
                    1930,
                    1931,
                    1934,
                    1938,
                    1939
                ],
                "new_shape": [
                    1925,
                    1926,
                    1928,
                    1935,
                    1936,
                    1937
                ],
                "astype": [
                    1936,
                    1926
                ],
                "np.array": [
                    1936,
                    1926
                ],
                "height_factor": [
                    1926,
                    1930,
                    1963,
                    1936,
                    1968,
                    1938
                ],
                "width_factor": [
                    1926,
                    1931,
                    1964,
                    1936,
                    1969,
                    1939
                ],
                "permute_dimensions": [
                    1927,
                    1929,
                    4147,
                    4083,
                    4149
                ],
                "tf.image.resize_nearest_neighbor": [
                    1928,
                    1937
                ],
                "tf.image": [
                    1928,
                    1937
                ],
                "x.set_shape": [
                    1930,
                    1938
                ],
                "output": [
                    4150,
                    2721,
                    2724,
                    1962,
                    1963,
                    1964,
                    1965,
                    2730,
                    1967,
                    1968,
                    1969,
                    1970,
                    2731,
                    2733,
                    4142,
                    4143,
                    2999,
                    3000,
                    4147,
                    4149,
                    3003,
                    2748,
                    3004,
                    3005,
                    2623,
                    2624,
                    2751,
                    3006,
                    3009,
                    2756,
                    2638,
                    2641,
                    2645,
                    3029,
                    3030,
                    3031,
                    3033,
                    3035,
                    2656,
                    3042,
                    2663,
                    2664,
                    2666,
                    4082,
                    4083,
                    3064,
                    3065,
                    3066,
                    3069
                ],
                "repeat_elements": [
                    1962,
                    1963,
                    1964,
                    1967,
                    1968,
                    1969
                ],
                "depth_factor": [
                    1962,
                    1967
                ],
                "splits": [
                    1993,
                    1995
                ],
                "tf.split": [
                    1993
                ],
                "x_rep": [
                    2016,
                    2020,
                    2021,
                    2022,
                    1995,
                    1996,
                    2006,
                    2009
                ],
                "rep": [
                    2008,
                    1995,
                    2013
                ],
                "concatenate": [
                    4080,
                    3915,
                    1996,
                    4141
                ],
                "auxiliary_axis": [
                    2008,
                    2012,
                    2004,
                    2006
                ],
                "tf.expand_dims": [
                    3424,
                    3425,
                    3945,
                    2039,
                    2134,
                    2006,
                    3900,
                    3423
                ],
                "reps": [
                    2007,
                    2008,
                    2009,
                    2012,
                    2013,
                    2014,
                    2015
                ],
                "np.ones": [
                    2007
                ],
                "tf.tile": [
                    3908,
                    3912,
                    2729,
                    2637,
                    2094,
                    2834,
                    2009,
                    2650,
                    2041
                ],
                "np.delete": [
                    2012
                ],
                "x_rep.set_shape": [
                    2020
                ],
                "x_rep._keras_shape": [
                    2021
                ],
                "n": [
                    2040,
                    2092,
                    2093,
                    2094
                ],
                "stop": [
                    2065,
                    2075
                ],
                "start": [
                    2067,
                    2068,
                    2071,
                    2072,
                    2073,
                    2075
                ],
                "tf.cond": [
                    2809,
                    2071
                ],
                "start.dtype": [
                    2072
                ],
                "result": [
                    2075,
                    2077,
                    2078
                ],
                "tf.range": [
                    3912,
                    2075,
                    3900,
                    3908
                ],
                "step": [
                    2075
                ],
                "cast": [
                    3034,
                    2077
                ],
                "prod": [
                    2120
                ],
                "padding": [
                    3331,
                    2180,
                    2181,
                    2182,
                    3468,
                    2191,
                    2192,
                    2195,
                    3476,
                    3603,
                    3610,
                    3245,
                    3246,
                    2223,
                    2224,
                    2225,
                    2226,
                    3247,
                    3248,
                    3250,
                    3251,
                    3377,
                    3384,
                    3509,
                    3643,
                    2236,
                    2237,
                    2238,
                    3517,
                    2243,
                    2244,
                    2245,
                    3653,
                    3657,
                    3278,
                    3282,
                    3283,
                    3416,
                    3293,
                    3551,
                    3557,
                    3430,
                    3692,
                    2161,
                    2162,
                    3702,
                    3706,
                    3325
                ],
                "tf.pad": [
                    2248,
                    2163,
                    2197
                ],
                "image_data_format": [
                    3360,
                    3585,
                    4066,
                    3463,
                    2184,
                    3273,
                    3687,
                    3735,
                    3504,
                    3411,
                    2228,
                    3638,
                    3319,
                    4118,
                    3546
                ],
                "tf.one_hot": [
                    2276
                ],
                "num_classes": [
                    2276
                ],
                "tf.reverse": [
                    2292
                ],
                "x.eval": [
                    2307
                ],
                "ops": [
                    2320,
                    2319
                ],
                "run": [
                    2320,
                    2370,
                    2343
                ],
                "np.asarray": [
                    2357,
                    2333
                ],
                "x.dtype.name.split": [
                    2358,
                    2334
                ],
                "x.dtype.name": [
                    2358,
                    2334
                ],
                "assign_placeholder": [
                    2336,
                    2369,
                    2339,
                    2340,
                    2341,
                    2343,
                    2360,
                    2363,
                    2365,
                    2366
                ],
                "x._assign_placeholder": [
                    2336,
                    2360,
                    2341,
                    2366
                ],
                "assign_op": [
                    2368,
                    2337,
                    2340,
                    2342,
                    2343,
                    2361,
                    2365,
                    2367
                ],
                "x._assign_op": [
                    2337,
                    2367,
                    2342,
                    2361
                ],
                "x.assign": [
                    2340,
                    2365
                ],
                "tuples": [
                    2353,
                    2356
                ],
                "assign_ops": [
                    2368,
                    2354,
                    2370
                ],
                "feed_dict": [
                    2464,
                    2369,
                    2370,
                    2471,
                    2474,
                    2355
                ],
                "assign_ops.append": [
                    2368
                ],
                "tf.Print": [
                    2404
                ],
                "message": [
                    2404
                ],
                "updates": [
                    2499,
                    2444,
                    2437,
                    2430
                ],
                "inputs": [
                    2688,
                    2465,
                    2499,
                    2590,
                    2440,
                    2679,
                    4135,
                    4138,
                    2606,
                    4078,
                    2674,
                    2613,
                    2678,
                    2583,
                    2685,
                    2462,
                    2431
                ],
                "outputs": [
                    2434,
                    2499,
                    2660,
                    2441,
                    2775,
                    2670,
                    2769,
                    2772,
                    2773,
                    2679,
                    2681
                ],
                "self.inputs": [
                    2440,
                    2465
                ],
                "self.outputs": [
                    2472,
                    2441,
                    2442,
                    2476
                ],
                "tf.control_dependencies": [
                    2442
                ],
                "updates_ops": [
                    2450,
                    2443,
                    2451,
                    2447
                ],
                "update": [
                    2450,
                    2444,
                    2445,
                    2446
                ],
                "p": [
                    3848,
                    2446,
                    2447
                ],
                "new_p": [
                    2446,
                    2447
                ],
                "updates_ops.append": [
                    2450,
                    2447
                ],
                "self.updates_op": [
                    2472,
                    2451
                ],
                "tf.group": [
                    2451
                ],
                "self.name": [
                    2452
                ],
                "self.feed_dict": [
                    2464,
                    2454
                ],
                "session_kwargs.pop": [
                    2456,
                    2454
                ],
                "session_kwargs": [
                    2456,
                    2459,
                    2454
                ],
                "self.fetches": [
                    2456,
                    2457,
                    2458,
                    2472
                ],
                "self.session_kwargs": [
                    2459,
                    2475
                ],
                "self.feed_dict.copy": [
                    2464
                ],
                "fetches": [
                    2472,
                    2474
                ],
                "updated": [
                    2474,
                    2476
                ],
                "kwargs": [
                    2499,
                    2494,
                    2495
                ],
                "key": [
                    2496,
                    2497,
                    2495
                ],
                "has_arg": [
                    2496
                ],
                "tf.Session.run": [
                    2496
                ],
                "Function.__init__": [
                    2496
                ],
                "Function": [
                    2496,
                    2499
                ],
                "msg": [
                    2497,
                    2498
                ],
                "tf.gradients": [
                    2512
                ],
                "loss": [
                    2512
                ],
                "tf.stop_gradient": [
                    2529,
                    2527
                ],
                "inputs.get_shape": [
                    2606,
                    2583
                ],
                "mask": [
                    2592,
                    2593,
                    2594,
                    2595,
                    2596,
                    2597,
                    2691,
                    2700,
                    2706,
                    2617,
                    2618
                ],
                "mask.dtype": [
                    2593
                ],
                "mask.get_shape": [
                    2595
                ],
                "constants": [
                    2723,
                    2663,
                    2600,
                    2599,
                    2679,
                    2750,
                    2623
                ],
                "uses_learning_phase": [
                    2625,
                    2753,
                    2726,
                    2665,
                    2603,
                    2859,
                    2861,
                    2774,
                    2877
                ],
                "unroll": [
                    2605
                ],
                "states": [
                    2657,
                    2722,
                    2754,
                    2692,
                    2663,
                    2727,
                    2762,
                    2667,
                    2731,
                    2623,
                    2732,
                    2609,
                    2676,
                    2648,
                    2749,
                    2655
                ],
                "initial_states": [
                    2609,
                    2676,
                    2679
                ],
                "successive_states": [
                    2657,
                    2659,
                    2667,
                    2669,
                    2610
                ],
                "successive_outputs": [
                    2656,
                    2658,
                    2660,
                    2666,
                    2668,
                    2670,
                    2640,
                    2643,
                    2611
                ],
                "input_list": [
                    2662,
                    2613,
                    2622,
                    2615
                ],
                "go_backwards": [
                    2673,
                    2619,
                    2699,
                    2614
                ],
                "input_list.reverse": [
                    2615
                ],
                "mask_list": [
                    2618,
                    2620,
                    2622
                ],
                "mask_list.reverse": [
                    2620
                ],
                "inp": [
                    2662,
                    2663,
                    2622,
                    2623
                ],
                "mask_t": [
                    2720,
                    2729,
                    2637,
                    2650,
                    2622
                ],
                "new_states": [
                    2721,
                    2754,
                    2659,
                    2757,
                    2727,
                    2732,
                    2669,
                    2734,
                    2767,
                    2775,
                    2648,
                    2748,
                    2623
                ],
                "step_function": [
                    2721,
                    2663,
                    2679,
                    2748,
                    2623
                ],
                "tiled_mask_t": [
                    2729,
                    2731,
                    2732,
                    2637,
                    2645,
                    2650,
                    2652
                ],
                "prev_output": [
                    2641,
                    2643,
                    2645
                ],
                "zeros_like": [
                    2641
                ],
                "tf.where": [
                    3848,
                    2731,
                    2732,
                    2833,
                    2835,
                    2645,
                    2652,
                    2942
                ],
                "return_states": [
                    2652,
                    2655,
                    2647
                ],
                "state": [
                    2754,
                    2755,
                    2727,
                    2728,
                    2648,
                    2654
                ],
                "new_state": [
                    2754,
                    2755,
                    2727,
                    2728,
                    2648,
                    2651,
                    2653
                ],
                "return_states.append": [
                    2652
                ],
                "successive_outputs.append": [
                    2656,
                    2666
                ],
                "successive_states.append": [
                    2657,
                    2667
                ],
                "last_output": [
                    2658,
                    2668,
                    2770,
                    2774,
                    2775
                ],
                "reverse": [
                    3913,
                    2674,
                    2700
                ],
                "time_steps": [
                    2760,
                    2704,
                    2678,
                    2682,
                    2686
                ],
                "output_ta": [
                    2762,
                    2766,
                    2769,
                    2770,
                    2680
                ],
                "tensor_array_ops.TensorArray": [
                    2680,
                    2684,
                    2702
                ],
                "tensor_array_ops": [
                    2680,
                    2684,
                    2702
                ],
                "outputs.dtype": [
                    2681
                ],
                "input_ta": [
                    2688,
                    2747,
                    2684,
                    2719
                ],
                "inputs.dtype": [
                    2685
                ],
                "input_ta.unstack": [
                    2688
                ],
                "time": [
                    2720,
                    2689,
                    2756,
                    2757,
                    2760,
                    2762,
                    2733,
                    2734,
                    2747,
                    2719
                ],
                "mask_ta": [
                    2720,
                    2706,
                    2702
                ],
                "mask_ta.unstack": [
                    2706
                ],
                "current_input": [
                    2721,
                    2747,
                    2748,
                    3901,
                    2719
                ],
                "input_ta.read": [
                    2747,
                    2719
                ],
                "mask_ta.read": [
                    2720
                ],
                "new_state.set_shape": [
                    2728,
                    2755
                ],
                "state.get_shape": [
                    2728,
                    2755
                ],
                "output_ta_t": [
                    2757,
                    2756,
                    2733,
                    2734
                ],
                "output_ta_t.write": [
                    2756,
                    2733
                ],
                "final_outputs": [
                    2767,
                    2765,
                    2766,
                    2759
                ],
                "control_flow_ops.while_loop": [
                    2759
                ],
                "control_flow_ops": [
                    2759
                ],
                "_step": [
                    2761
                ],
                "last_time": [
                    2770,
                    2765
                ],
                "output_ta.stack": [
                    2769
                ],
                "output_ta.read": [
                    2770
                ],
                "outputs.get_shape": [
                    2772
                ],
                "last_output._uses_learning_phase": [
                    2774
                ],
                "condition.dtype": [
                    2795
                ],
                "condition": [
                    2795,
                    2796,
                    2829,
                    2797,
                    2830,
                    2834,
                    2835,
                    2809
                ],
                "cond_ndim": [
                    2821,
                    2825,
                    2827,
                    2828,
                    2797,
                    2798
                ],
                "then_expression": [
                    2816,
                    2817,
                    2820,
                    2799,
                    2831,
                    2801,
                    2803,
                    2835
                ],
                "then_expression_fn": [
                    2810,
                    2803
                ],
                "else_expression": [
                    2818,
                    2819,
                    2835,
                    2804,
                    2806,
                    2808
                ],
                "else_expression_fn": [
                    2808,
                    2811
                ],
                "expr_ndim": [
                    2826,
                    2828,
                    2820,
                    2821
                ],
                "ndim_diff": [
                    2828,
                    2829
                ],
                "cond_shape": [
                    2832,
                    2829,
                    2830
                ],
                "expr_shape": [
                    2832,
                    2833,
                    2831
                ],
                "shape_diff": [
                    2832,
                    2833
                ],
                "tile_shape": [
                    2833,
                    2834
                ],
                "training": [
                    2857,
                    2858,
                    2863,
                    2899,
                    2869,
                    2876
                ],
                "learning_phase": [
                    2858
                ],
                "alt": [
                    2899,
                    2870,
                    2871,
                    2873,
                    2876
                ],
                "switch": [
                    2876
                ],
                "in_train_phase": [
                    2899
                ],
                "alpha": [
                    2942,
                    2939,
                    2917,
                    2918
                ],
                "tf.nn.leaky_relu": [
                    2918
                ],
                "tf.nn.relu": [
                    2920
                ],
                "res": [
                    3042,
                    3044,
                    2940,
                    2938,
                    3036,
                    2942
                ],
                "tf.nn.elu": [
                    2938
                ],
                "tf.nn.softmax": [
                    2954
                ],
                "tf.nn.softplus": [
                    2966
                ],
                "tf.nn.softsign": [
                    2978
                ],
                "from_logits": [
                    3028,
                    2997,
                    3062
                ],
                "output.get_shape": [
                    3000,
                    3033,
                    3006
                ],
                "_epsilon": [
                    3029,
                    3030,
                    3064,
                    3065,
                    3003,
                    3004
                ],
                "output.dtype.base_dtype": [
                    3064,
                    3003,
                    3029
                ],
                "output.dtype": [
                    3064,
                    3003,
                    3029
                ],
                "target": [
                    3008,
                    3034,
                    3068,
                    3005
                ],
                "tf.nn.softmax_cross_entropy_with_logits": [
                    3008
                ],
                "output_shape": [
                    3588,
                    3589,
                    3594,
                    3595,
                    3596,
                    3597,
                    3598,
                    3599,
                    3600,
                    3601,
                    3609,
                    4123,
                    3363,
                    3364,
                    3369,
                    3370,
                    3371,
                    3372,
                    3373,
                    3374,
                    3375,
                    3383,
                    3033,
                    3035,
                    3039
                ],
                "targets": [
                    3034,
                    3164,
                    3037
                ],
                "flatten": [
                    3034
                ],
                "logits": [
                    3035,
                    3038
                ],
                "tf.nn.sparse_softmax_cross_entropy_with_logits": [
                    3036
                ],
                "tf.nn.sigmoid_cross_entropy_with_logits": [
                    3068
                ],
                "tf.nn.sigmoid": [
                    3081
                ],
                "one": [
                    3099,
                    3100
                ],
                "tf.nn.tanh": [
                    3113
                ],
                "retain_prob": [
                    3130,
                    3135
                ],
                "level": [
                    3130
                ],
                "tf.nn.dropout": [
                    3135
                ],
                "noise_shape": [
                    3135
                ],
                "tf.nn.l2_normalize": [
                    3148
                ],
                "tf.nn.in_top_k": [
                    3164
                ],
                "predictions": [
                    3164
                ],
                "k": [
                    3164
                ],
                "kernel_shape": [
                    4071,
                    4072,
                    3277,
                    3280,
                    4124,
                    4125
                ],
                "kernel.get_shape": [
                    3277
                ],
                "kernel": [
                    3328,
                    3554,
                    4071,
                    3277,
                    4142,
                    4082,
                    3383,
                    3609,
                    3290,
                    4124
                ],
                "left_pad": [
                    3280,
                    3281
                ],
                "dilation_rate": [
                    3329,
                    3426,
                    3555,
                    3431,
                    3280,
                    3477,
                    3291,
                    3518
                ],
                "temporal_padding": [
                    3281
                ],
                "_preprocess_padding": [
                    3468,
                    3692,
                    3377,
                    3283,
                    3603,
                    3509,
                    3416,
                    3643,
                    3325,
                    3551
                ],
                "tf.nn.convolution": [
                    3288,
                    3552,
                    3326
                ],
                "strides": [
                    3330,
                    3470,
                    3472,
                    3475,
                    3605,
                    3607,
                    3609,
                    4122,
                    3379,
                    3381,
                    3511,
                    3383,
                    3513,
                    3516,
                    3645,
                    3648,
                    3652,
                    3656,
                    3419,
                    3292,
                    3422,
                    3556,
                    3429,
                    4070,
                    3694,
                    3697,
                    3701,
                    3705
                ],
                "_preprocess_conv2d_input": [
                    3366,
                    3467,
                    3508,
                    3642,
                    3323
                ],
                "tf.nn.conv2d_transpose": [
                    3383
                ],
                "_preprocess_conv1d_input": [
                    3415
                ],
                "spatial_start_dim": [
                    3418,
                    3421,
                    3434,
                    3423
                ],
                "depthwise_kernel": [
                    3424,
                    3474,
                    3515,
                    3428
                ],
                "pointwise_kernel": [
                    3425,
                    3474,
                    3428
                ],
                "tf.nn.separable_conv2d": [
                    3474,
                    3428
                ],
                "tf.nn.depthwise_conv2d": [
                    3515
                ],
                "_preprocess_conv3d_input": [
                    3691,
                    3550,
                    3591
                ],
                "tf.nn.conv3d_transpose": [
                    3609
                ],
                "pool_size": [
                    3649,
                    3652,
                    3656,
                    3695,
                    3698,
                    3701,
                    3705,
                    3646
                ],
                "pool_mode": [
                    3651,
                    3655,
                    3660,
                    3700,
                    3704,
                    3709
                ],
                "tf.nn.max_pool": [
                    3652
                ],
                "tf.nn.avg_pool": [
                    3656
                ],
                "tf.nn.max_pool3d": [
                    3701
                ],
                "tf.nn.avg_pool3d": [
                    3705
                ],
                "bias_shape": [
                    3738,
                    3739,
                    3741,
                    3744,
                    3745,
                    3747,
                    3749,
                    3750,
                    3752,
                    3755,
                    3760,
                    3762,
                    3764,
                    3768,
                    3771,
                    3772,
                    3774,
                    3776,
                    3777,
                    3779
                ],
                "bias": [
                    3745,
                    3777,
                    3747,
                    3779,
                    3781,
                    3750,
                    3752,
                    3757,
                    3760,
                    3762,
                    3765,
                    3768,
                    3738,
                    3772,
                    3774
                ],
                "reshape": [
                    3745,
                    3777,
                    3747,
                    3779,
                    3750,
                    4135,
                    3752,
                    4138,
                    4078,
                    4143,
                    3760,
                    3762,
                    3768,
                    3772,
                    3774
                ],
                "tf.nn.bias_add": [
                    3781,
                    3757,
                    3765
                ],
                "tf.random_normal": [
                    3805
                ],
                "stddev": [
                    3875,
                    3805
                ],
                "tf.random_uniform": [
                    3848,
                    3828
                ],
                "minval": [
                    3828
                ],
                "maxval": [
                    3828
                ],
                "tf.truncated_normal": [
                    3875
                ],
                "label_shape": [
                    3908,
                    3909,
                    3912,
                    3913,
                    3919,
                    3895,
                    3896,
                    3897,
                    3900,
                    3903
                ],
                "labels": [
                    3917,
                    3895
                ],
                "num_batches_tns": [
                    3896,
                    3908
                ],
                "max_num_labels_tns": [
                    3913,
                    3897,
                    3901
                ],
                "tf.fill": [
                    3900,
                    3903
                ],
                "init": [
                    3905,
                    3903
                ],
                "dense_mask": [
                    3904,
                    3906,
                    3914,
                    3910
                ],
                "functional_ops.scan": [
                    3904
                ],
                "functional_ops": [
                    3904
                ],
                "range_less_than": [
                    3904
                ],
                "label_lengths": [
                    3904
                ],
                "label_array": [
                    3908,
                    3910
                ],
                "label_ind": [
                    3915,
                    3910
                ],
                "tf.boolean_mask": [
                    3914,
                    3910
                ],
                "batch_array": [
                    3912,
                    3914
                ],
                "batch_ind": [
                    3914,
                    3915
                ],
                "vals_sparse": [
                    3917,
                    3919
                ],
                "tf.gather_nd": [
                    3917
                ],
                "tf.to_int64": [
                    3919
                ],
                "label_length": [
                    3939,
                    3941
                ],
                "tf.to_int32": [
                    3980,
                    3939,
                    3940,
                    3941
                ],
                "input_length": [
                    3940,
                    3947,
                    3980,
                    3985,
                    3989
                ],
                "sparse_labels": [
                    3946,
                    3941
                ],
                "ctc_label_dense_to_sparse": [
                    3941
                ],
                "y_true": [
                    3941
                ],
                "y_pred": [
                    3943,
                    3945,
                    3979,
                    3984,
                    3988
                ],
                "ctc.ctc_loss": [
                    3945
                ],
                "ctc": [
                    3945,
                    3987,
                    3983
                ],
                "greedy": [
                    3982
                ],
                "decoded": [
                    3993,
                    3987,
                    3983
                ],
                "log_prob": [
                    3994,
                    3987,
                    3983
                ],
                "ctc.ctc_greedy_decoder": [
                    3983
                ],
                "ctc.ctc_beam_search_decoder": [
                    3987
                ],
                "beam_width": [
                    3989
                ],
                "top_paths": [
                    3990
                ],
                "decoded_dense": [
                    3992,
                    3994
                ],
                "tf.sparse_to_dense": [
                    3992
                ],
                "st.indices": [
                    3992
                ],
                "st": [
                    3992,
                    3993
                ],
                "st.dense_shape": [
                    3992
                ],
                "st.values": [
                    3992
                ],
                "tf.map_fn": [
                    4011
                ],
                "fn": [
                    4011,
                    4027,
                    4043
                ],
                "elems": [
                    4011,
                    4027,
                    4043
                ],
                "tf.foldl": [
                    4027
                ],
                "initializer": [
                    4027,
                    4043
                ],
                "tf.foldr": [
                    4043
                ],
                "stride": [
                    4076,
                    4077,
                    4070
                ],
                "output_length": [
                    4072,
                    4075
                ],
                "feature_dim": [
                    4072,
                    4136,
                    4139,
                    4079,
                    4125
                ],
                "filters": [
                    4072,
                    4144,
                    4125
                ],
                "xs": [
                    4135,
                    4074,
                    4138,
                    4141,
                    4078,
                    4080,
                    4127
                ],
                "slice_length": [
                    4076,
                    4078
                ],
                "kernel_size": [
                    4131,
                    4133,
                    4077
                ],
                "xs.append": [
                    4138,
                    4078,
                    4135
                ],
                "x_aggregate": [
                    4080,
                    4082,
                    4141,
                    4142
                ],
                "batch_dot": [
                    4082,
                    4142
                ],
                "stride_row": [
                    4122,
                    4131,
                    4130
                ],
                "stride_col": [
                    4122,
                    4132,
                    4133
                ],
                "output_row": [
                    4128,
                    4144,
                    4123
                ],
                "output_col": [
                    4144,
                    4129,
                    4123
                ],
                "j": [
                    4129,
                    4132,
                    4133
                ],
                "slice_row": [
                    4130,
                    4138,
                    4135
                ],
                "slice_col": [
                    4138,
                    4132,
                    4135
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/keras_36/tests/keras/layers/convolutional_test.py",
                "test_function": "test_separable_conv_1d",
                "test_function_code": "@pytest.mark.skipif(K.backend() != 'tensorflow', reason='Requires TF backend')\n@keras_test\ndef test_separable_conv_1d():\n    num_samples = 2\n    filters = 6\n    stack_size = 3\n    num_step = 9\n\n    for padding in _convolution_paddings:\n        for strides in [1, 2]:\n            for multiplier in [1, 2]:\n                for dilation_rate in [1, 2]:\n                    if padding == 'same' and strides != 1:\n                        continue\n                    if dilation_rate != 1 and strides != 1:\n                        continue\n\n                    layer_test(convolutional.SeparableConv1D,\n                               kwargs={'filters': filters,\n                                       'kernel_size': 3,\n                                       'padding': padding,\n                                       'strides': strides,\n                                       'depth_multiplier': multiplier,\n                                       'dilation_rate': dilation_rate},\n                               input_shape=(num_samples, num_step, stack_size))\n\n    layer_test(convolutional.SeparableConv1D,\n               kwargs={'filters': filters,\n                       'kernel_size': 3,\n                       'padding': padding,\n                       'data_format': 'channels_first',\n                       'activation': None,\n                       'depthwise_regularizer': 'l2',\n                       'pointwise_regularizer': 'l2',\n                       'bias_regularizer': 'l2',\n                       'activity_regularizer': 'l2',\n                       'pointwise_constraint': 'unit_norm',\n                       'depthwise_constraint': 'unit_norm',\n                       'strides': 1,\n                       'depth_multiplier': multiplier},\n               input_shape=(num_samples, stack_size, num_step))\n\n    # Test invalid use case\n    with pytest.raises(ValueError):\n        model = Sequential([convolutional.SeparableConv1D(filters=filters,\n                                                          kernel_size=3,\n                                                          padding=padding,\n                                                          batch_input_shape=(None, 5, None))])",
                "test_error": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Current implementation only supports equal length strides in the row and column dimensions.   [[node separable_conv1d_5/separable_conv2d/depthwise (defined at /home/ubuntu/Desktop/bgp_envs_local/repos/keras_36/keras/backend/tensorflow_backend.py:3432) ]]  Caused by op 'separable_conv1d_5/separable_conv2d/depthwise', defined at:   File \"<string>\", line 1, in <module>   File \"<string>\", line 8, in <module>   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/execnet/gateway_base.py\", line 1554, in serve     SlaveGateway(io=io, id=id, _startcount=2).serve()   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/execnet/gateway_base.py\", line 1060, in serve     self._execpool.integrate_as_primary_thread()   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/execnet/gateway_base.py\", line 267, in integrate_as_primary_thread     self._perform_spawn(reply)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/execnet/gateway_base.py\", line 285, in _perform_spawn     reply.run()   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/execnet/gateway_base.py\", line 220, in run     self._result = func(*args, **kwargs)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/execnet/gateway_base.py\", line 1084, in executetask     do_exec(co, loc)  # noqa   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/xdist/remote.py\", line 261, in <module>     config.hook.pytest_cmdline_main(config=config)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/hooks.py\", line 286, in __call__     return self._hookexec(self, self.get_hookimpls(), kwargs)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/manager.py\", line 93, in _hookexec     return self._inner_hookexec(hook, methods, kwargs)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/manager.py\", line 87, in <lambda>     firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/callers.py\", line 187, in _multicall     res = hook_impl.function(*args)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/main.py\", line 240, in pytest_cmdline_main     return wrap_session(config, _main)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/main.py\", line 191, in wrap_session     session.exitstatus = doit(config, session) or 0   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/main.py\", line 247, in _main     config.hook.pytest_runtestloop(session=session)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/hooks.py\", line 286, in __call__     return self._hookexec(self, self.get_hookimpls(), kwargs)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/manager.py\", line 93, in _hookexec     return self._inner_hookexec(hook, methods, kwargs)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/manager.py\", line 87, in <lambda>     firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/callers.py\", line 187, in _multicall     res = hook_impl.function(*args)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/xdist/remote.py\", line 74, in pytest_runtestloop     self.run_one_test(torun)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/xdist/remote.py\", line 88, in run_one_test     self.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/hooks.py\", line 286, in __call__     return self._hookexec(self, self.get_hookimpls(), kwargs)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/manager.py\", line 93, in _hookexec     return self._inner_hookexec(hook, methods, kwargs)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/manager.py\", line 87, in <lambda>     firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/callers.py\", line 187, in _multicall     res = hook_impl.function(*args)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/runner.py\", line 85, in pytest_runtest_protocol     runtestprotocol(item, nextitem=nextitem)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/runner.py\", line 100, in runtestprotocol     reports.append(call_and_report(item, \"call\", log))   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/runner.py\", line 186, in call_and_report     call = call_runtest_hook(item, when, **kwds)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/runner.py\", line 217, in call_runtest_hook     lambda: ihook(item=item, **kwds), when=when, reraise=reraise   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/runner.py\", line 244, in from_call     result = func()   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/runner.py\", line 217, in <lambda>     lambda: ihook(item=item, **kwds), when=when, reraise=reraise   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/hooks.py\", line 286, in __call__     return self._hookexec(self, self.get_hookimpls(), kwargs)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/manager.py\", line 93, in _hookexec     return self._inner_hookexec(hook, methods, kwargs)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/manager.py\", line 87, in <lambda>     firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/callers.py\", line 187, in _multicall     res = hook_impl.function(*args)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/runner.py\", line 135, in pytest_runtest_call     item.runtest()   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/python.py\", line 1477, in runtest     self.ihook.pytest_pyfunc_call(pyfuncitem=self)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/hooks.py\", line 286, in __call__     return self._hookexec(self, self.get_hookimpls(), kwargs)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/manager.py\", line 93, in _hookexec     return self._inner_hookexec(hook, methods, kwargs)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/manager.py\", line 87, in <lambda>     firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/callers.py\", line 187, in _multicall     res = hook_impl.function(*args)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/python.py\", line 182, in pytest_pyfunc_call     result = testfunction(**testargs)   File \"/home/ubuntu/Desktop/bgp_envs_local/repos/keras_36/keras/utils/test_utils.py\", line 161, in wrapper     output = func(*args, **kwargs)   File \"/home/ubuntu/Desktop/bgp_envs_local/repos/keras_36/tests/keras/layers/convolutional_test.py\", line 256, in test_separable_conv_1d     input_shape=(num_samples, num_step, stack_size))   File \"/home/ubuntu/Desktop/bgp_envs_local/repos/keras_36/keras/utils/test_utils.py\", line 89, in layer_test     y = layer(x)   File \"/home/ubuntu/Desktop/bgp_envs_local/repos/keras_36/keras/engine/topology.py\", line 617, in __call__     output = self.call(inputs, **kwargs)   File \"/home/ubuntu/Desktop/bgp_envs_local/repos/keras_36/keras/layers/convolutional.py\", line 1222, in call     dilation_rate=self.dilation_rate)   File \"/home/ubuntu/Desktop/bgp_envs_local/repos/keras_36/keras/backend/tensorflow_backend.py\", line 3432, in separable_conv1d     data_format=tf_data_format)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/tensorflow/python/ops/nn_impl.py\", line 674, in separable_conv2d     op=op)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/tensorflow/python/ops/nn_ops.py\", line 435, in with_space_to_batch     return new_op(input, None)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/tensorflow/python/ops/nn_ops.py\", line 591, in __call__     return self.call(inp, filter)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/tensorflow/python/ops/nn_ops.py\", line 425, in <lambda>     return lambda inp, _: op(inp, num_spatial_dims, padding)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/tensorflow/python/ops/nn_impl.py\", line 666, in op     name=\"depthwise\")   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/tensorflow/python/ops/gen_nn_ops.py\", line 2251, in depthwise_conv2d_native     dilations=dilations, name=name)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/tensorflow/python/framework/op_def_library.py\", line 788, in _apply_op_helper     op_def=op_def)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/tensorflow/python/util/deprecation.py\", line 507, in new_func     return func(*args, **kwargs)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/tensorflow/python/framework/ops.py\", line 3300, in create_op     op_def=op_def)   File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/tensorflow/python/framework/ops.py\", line 1801, in __init__     self._traceback = tf_stack.extract_stack()  InvalidArgumentError (see above for traceback): Current implementation only supports equal length strides in the row and column dimensions.   [[node separable_conv1d_5/separable_conv2d/depthwise (defined at /home/ubuntu/Desktop/bgp_envs_local/repos/keras_36/keras/backend/tensorflow_backend.py:3432) ]]",
                "full_test_error": "self = <tensorflow.python.client.session.Session object at 0x7f7364523650>\nfn = <function BaseSession._do_run.<locals>._run_fn at 0x7f73608bdd40>\nargs = ({<tensorflow.python.pywrap_tensorflow_internal.TF_Output; proxy of <Swig Object of type 'TF_Output *' at 0x7f73604c1f...ct of type 'TF_Output *' at 0x7f7356982720> >], [<Swig Object of type 'TF_Operation *' at 0x7f7356982210>], None, None)\nmessage = 'Current implementation only supports equal length strides in the row and column dimensions.\\n\\t [[node separable_conv.../depthwise (defined at /home/ubuntu/Desktop/bgp_envs_local/repos/keras_36/keras/backend/tensorflow_backend.py:3432) ]]'\nm = <re.Match object; span=(94, 150), match='[[{{node separable_conv1d_5/separable_conv2d/dept>\n\n    def _do_call(self, fn, *args):\n      try:\n>       return fn(*args)\n\n../../envs/keras_36/lib/python3.7/site-packages/tensorflow/python/client/session.py:1334: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfeed_dict = {<tensorflow.python.pywrap_tensorflow_internal.TF_Output; proxy of <Swig Object of type 'TF_Output *' at 0x7f73604c1f3...81429  ],\n        [1.526855  , 2.8833413 , 1.6336393 ],\n        [5.969265  , 0.724065  , 2.4079006 ]]], dtype=float32)}\nfetch_list = [<tensorflow.python.pywrap_tensorflow_internal.TF_Output; proxy of <Swig Object of type 'TF_Output *' at 0x7f7356982720> >]\ntarget_list = [<Swig Object of type 'TF_Operation *' at 0x7f7356982210>]\noptions = None, run_metadata = None\n\n    def _run_fn(feed_dict, fetch_list, target_list, options, run_metadata):\n      # Ensure any changes to the graph are reflected in the runtime.\n      self._extend_graph()\n      return self._call_tf_sessionrun(\n>         options, feed_dict, fetch_list, target_list, run_metadata)\n\n../../envs/keras_36/lib/python3.7/site-packages/tensorflow/python/client/session.py:1319: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tensorflow.python.client.session.Session object at 0x7f7364523650>\noptions = None\nfeed_dict = {<tensorflow.python.pywrap_tensorflow_internal.TF_Output; proxy of <Swig Object of type 'TF_Output *' at 0x7f73604c1f3...81429  ],\n        [1.526855  , 2.8833413 , 1.6336393 ],\n        [5.969265  , 0.724065  , 2.4079006 ]]], dtype=float32)}\nfetch_list = [<tensorflow.python.pywrap_tensorflow_internal.TF_Output; proxy of <Swig Object of type 'TF_Output *' at 0x7f7356982720> >]\ntarget_list = [<Swig Object of type 'TF_Operation *' at 0x7f7356982210>]\nrun_metadata = None\n\n    def _call_tf_sessionrun(self, options, feed_dict, fetch_list, target_list,\n                            run_metadata):\n      return tf_session.TF_SessionRun_wrapper(\n          self._session, options, feed_dict, fetch_list, target_list,\n>         run_metadata)\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Current implementation only supports equal length strides in the row and column dimensions.\nE     \t [[{{node separable_conv1d_5/separable_conv2d/depthwise}}]]\n\n../../envs/keras_36/lib/python3.7/site-packages/tensorflow/python/client/session.py:1407: InvalidArgumentError\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.mark.skipif(K.backend() != 'tensorflow', reason='Requires TF backend')\n    @keras_test\n    def test_separable_conv_1d():\n        num_samples = 2\n        filters = 6\n        stack_size = 3\n        num_step = 9\n    \n        for padding in _convolution_paddings:\n            for strides in [1, 2]:\n                for multiplier in [1, 2]:\n                    for dilation_rate in [1, 2]:\n                        if padding == 'same' and strides != 1:\n                            continue\n                        if dilation_rate != 1 and strides != 1:\n                            continue\n    \n                        layer_test(convolutional.SeparableConv1D,\n                                   kwargs={'filters': filters,\n                                           'kernel_size': 3,\n                                           'padding': padding,\n                                           'strides': strides,\n                                           'depth_multiplier': multiplier,\n                                           'dilation_rate': dilation_rate},\n>                                  input_shape=(num_samples, num_step, stack_size))\n\ntests/keras/layers/convolutional_test.py:256: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nkeras/utils/test_utils.py:95: in layer_test\n    actual_output = model.predict(input_data)\nkeras/engine/training.py:1803: in predict\n    verbose=verbose, steps=steps)\nkeras/engine/training.py:1303: in _predict_loop\n    batch_outs = f(ins_batch)\nkeras/backend/tensorflow_backend.py:2475: in __call__\n    **self.session_kwargs)\n../../envs/keras_36/lib/python3.7/site-packages/tensorflow/python/client/session.py:929: in run\n    run_metadata_ptr)\n../../envs/keras_36/lib/python3.7/site-packages/tensorflow/python/client/session.py:1152: in _run\n    feed_dict_tensor, options, run_metadata)\n../../envs/keras_36/lib/python3.7/site-packages/tensorflow/python/client/session.py:1328: in _do_run\n    run_metadata)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tensorflow.python.client.session.Session object at 0x7f7364523650>\nfn = <function BaseSession._do_run.<locals>._run_fn at 0x7f73608bdd40>\nargs = ({<tensorflow.python.pywrap_tensorflow_internal.TF_Output; proxy of <Swig Object of type 'TF_Output *' at 0x7f73604c1f...ct of type 'TF_Output *' at 0x7f7356982720> >], [<Swig Object of type 'TF_Operation *' at 0x7f7356982210>], None, None)\nmessage = 'Current implementation only supports equal length strides in the row and column dimensions.\\n\\t [[node separable_conv.../depthwise (defined at /home/ubuntu/Desktop/bgp_envs_local/repos/keras_36/keras/backend/tensorflow_backend.py:3432) ]]'\nm = <re.Match object; span=(94, 150), match='[[{{node separable_conv1d_5/separable_conv2d/dept>\n\n    def _do_call(self, fn, *args):\n      try:\n        return fn(*args)\n      except errors.OpError as e:\n        message = compat.as_text(e.message)\n        m = BaseSession._NODEDEF_NAME_RE.search(message)\n        node_def = None\n        op = None\n        if m is not None:\n          node_name = m.group(3)\n          try:\n            op = self._graph.get_operation_by_name(node_name)\n            node_def = op.node_def\n          except KeyError:\n            pass\n        message = error_interpolation.interpolate(message, self._graph)\n>       raise type(e)(node_def, op, message)\nE       tensorflow.python.framework.errors_impl.InvalidArgumentError: Current implementation only supports equal length strides in the row and column dimensions.\nE       \t [[node separable_conv1d_5/separable_conv2d/depthwise (defined at /home/ubuntu/Desktop/bgp_envs_local/repos/keras_36/keras/backend/tensorflow_backend.py:3432) ]]\nE       \nE       Caused by op 'separable_conv1d_5/separable_conv2d/depthwise', defined at:\nE         File \"<string>\", line 1, in <module>\nE         File \"<string>\", line 8, in <module>\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/execnet/gateway_base.py\", line 1554, in serve\nE           SlaveGateway(io=io, id=id, _startcount=2).serve()\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/execnet/gateway_base.py\", line 1060, in serve\nE           self._execpool.integrate_as_primary_thread()\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/execnet/gateway_base.py\", line 267, in integrate_as_primary_thread\nE           self._perform_spawn(reply)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/execnet/gateway_base.py\", line 285, in _perform_spawn\nE           reply.run()\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/execnet/gateway_base.py\", line 220, in run\nE           self._result = func(*args, **kwargs)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/execnet/gateway_base.py\", line 1084, in executetask\nE           do_exec(co, loc)  # noqa\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/xdist/remote.py\", line 261, in <module>\nE           config.hook.pytest_cmdline_main(config=config)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/hooks.py\", line 286, in __call__\nE           return self._hookexec(self, self.get_hookimpls(), kwargs)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/manager.py\", line 93, in _hookexec\nE           return self._inner_hookexec(hook, methods, kwargs)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/manager.py\", line 87, in <lambda>\nE           firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/callers.py\", line 187, in _multicall\nE           res = hook_impl.function(*args)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/main.py\", line 240, in pytest_cmdline_main\nE           return wrap_session(config, _main)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/main.py\", line 191, in wrap_session\nE           session.exitstatus = doit(config, session) or 0\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/main.py\", line 247, in _main\nE           config.hook.pytest_runtestloop(session=session)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/hooks.py\", line 286, in __call__\nE           return self._hookexec(self, self.get_hookimpls(), kwargs)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/manager.py\", line 93, in _hookexec\nE           return self._inner_hookexec(hook, methods, kwargs)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/manager.py\", line 87, in <lambda>\nE           firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/callers.py\", line 187, in _multicall\nE           res = hook_impl.function(*args)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/xdist/remote.py\", line 74, in pytest_runtestloop\nE           self.run_one_test(torun)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/xdist/remote.py\", line 88, in run_one_test\nE           self.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/hooks.py\", line 286, in __call__\nE           return self._hookexec(self, self.get_hookimpls(), kwargs)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/manager.py\", line 93, in _hookexec\nE           return self._inner_hookexec(hook, methods, kwargs)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/manager.py\", line 87, in <lambda>\nE           firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/callers.py\", line 187, in _multicall\nE           res = hook_impl.function(*args)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/runner.py\", line 85, in pytest_runtest_protocol\nE           runtestprotocol(item, nextitem=nextitem)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/runner.py\", line 100, in runtestprotocol\nE           reports.append(call_and_report(item, \"call\", log))\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/runner.py\", line 186, in call_and_report\nE           call = call_runtest_hook(item, when, **kwds)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/runner.py\", line 217, in call_runtest_hook\nE           lambda: ihook(item=item, **kwds), when=when, reraise=reraise\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/runner.py\", line 244, in from_call\nE           result = func()\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/runner.py\", line 217, in <lambda>\nE           lambda: ihook(item=item, **kwds), when=when, reraise=reraise\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/hooks.py\", line 286, in __call__\nE           return self._hookexec(self, self.get_hookimpls(), kwargs)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/manager.py\", line 93, in _hookexec\nE           return self._inner_hookexec(hook, methods, kwargs)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/manager.py\", line 87, in <lambda>\nE           firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/callers.py\", line 187, in _multicall\nE           res = hook_impl.function(*args)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/runner.py\", line 135, in pytest_runtest_call\nE           item.runtest()\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/python.py\", line 1477, in runtest\nE           self.ihook.pytest_pyfunc_call(pyfuncitem=self)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/hooks.py\", line 286, in __call__\nE           return self._hookexec(self, self.get_hookimpls(), kwargs)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/manager.py\", line 93, in _hookexec\nE           return self._inner_hookexec(hook, methods, kwargs)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/manager.py\", line 87, in <lambda>\nE           firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/callers.py\", line 187, in _multicall\nE           res = hook_impl.function(*args)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/python.py\", line 182, in pytest_pyfunc_call\nE           result = testfunction(**testargs)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/repos/keras_36/keras/utils/test_utils.py\", line 161, in wrapper\nE           output = func(*args, **kwargs)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/repos/keras_36/tests/keras/layers/convolutional_test.py\", line 256, in test_separable_conv_1d\nE           input_shape=(num_samples, num_step, stack_size))\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/repos/keras_36/keras/utils/test_utils.py\", line 89, in layer_test\nE           y = layer(x)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/repos/keras_36/keras/engine/topology.py\", line 617, in __call__\nE           output = self.call(inputs, **kwargs)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/repos/keras_36/keras/layers/convolutional.py\", line 1222, in call\nE           dilation_rate=self.dilation_rate)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/repos/keras_36/keras/backend/tensorflow_backend.py\", line 3432, in separable_conv1d\nE           data_format=tf_data_format)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/tensorflow/python/ops/nn_impl.py\", line 674, in separable_conv2d\nE           op=op)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/tensorflow/python/ops/nn_ops.py\", line 435, in with_space_to_batch\nE           return new_op(input, None)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/tensorflow/python/ops/nn_ops.py\", line 591, in __call__\nE           return self.call(inp, filter)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/tensorflow/python/ops/nn_ops.py\", line 425, in <lambda>\nE           return lambda inp, _: op(inp, num_spatial_dims, padding)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/tensorflow/python/ops/nn_impl.py\", line 666, in op\nE           name=\"depthwise\")\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/tensorflow/python/ops/gen_nn_ops.py\", line 2251, in depthwise_conv2d_native\nE           dilations=dilations, name=name)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/tensorflow/python/framework/op_def_library.py\", line 788, in _apply_op_helper\nE           op_def=op_def)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/tensorflow/python/util/deprecation.py\", line 507, in new_func\nE           return func(*args, **kwargs)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/tensorflow/python/framework/ops.py\", line 3300, in create_op\nE           op_def=op_def)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/tensorflow/python/framework/ops.py\", line 1801, in __init__\nE           self._traceback = tf_stack.extract_stack()\nE       \nE       InvalidArgumentError (see above for traceback): Current implementation only supports equal length strides in the row and column dimensions.\nE       \t [[node separable_conv1d_5/separable_conv2d/depthwise (defined at /home/ubuntu/Desktop/bgp_envs_local/repos/keras_36/keras/backend/tensorflow_backend.py:3432) ]]\n\n../../envs/keras_36/lib/python3.7/site-packages/tensorflow/python/client/session.py:1348: InvalidArgumentError",
                "traceback": "feed_dict = {<tensorflow.python.pywrap_tensorflow_internal.TF_Output; proxy of <Swig Object of type 'TF_Output *' at 0x7f73604c1f3...81429  ],\n        [1.526855  , 2.8833413 , 1.6336393 ],\n        [5.969265  , 0.724065  , 2.4079006 ]]], dtype=float32)}\nfetch_list = [<tensorflow.python.pywrap_tensorflow_internal.TF_Output; proxy of <Swig Object of type 'TF_Output *' at 0x7f7356982720> >]\ntarget_list = [<Swig Object of type 'TF_Operation *' at 0x7f7356982210>]\noptions = None, run_metadata = None\n\n    def _run_fn(feed_dict, fetch_list, target_list, options, run_metadata):\n      # Ensure any changes to the graph are reflected in the runtime.\n      self._extend_graph()\n      return self._call_tf_sessionrun(\n>         options, feed_dict, fetch_list, target_list, run_metadata)\n\n../../envs/keras_36/lib/python3.7/site-packages/tensorflow/python/client/session.py:1319:",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tensorflow.python.client.session.Session object at 0x7f7364523650>\noptions = None\nfeed_dict = {<tensorflow.python.pywrap_tensorflow_internal.TF_Output; proxy of <Swig Object of type 'TF_Output *' at 0x7f73604c1f3...81429  ],\n        [1.526855  , 2.8833413 , 1.6336393 ],\n        [5.969265  , 0.724065  , 2.4079006 ]]], dtype=float32)}\nfetch_list = [<tensorflow.python.pywrap_tensorflow_internal.TF_Output; proxy of <Swig Object of type 'TF_Output *' at 0x7f7356982720> >]\ntarget_list = [<Swig Object of type 'TF_Operation *' at 0x7f7356982210>]\nrun_metadata = None\n\n    def _call_tf_sessionrun(self, options, feed_dict, fetch_list, target_list,\n                            run_metadata):\n      return tf_session.TF_SessionRun_wrapper(\n          self._session, options, feed_dict, fetch_list, target_list,\n>         run_metadata)\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Current implementation only supports equal length strides in the row and column dimensions.\nE     \t [[{{node separable_conv1d_5/separable_conv2d/depthwise}}]]\n\n../../envs/keras_36/lib/python3.7/site-packages/tensorflow/python/client/session.py:1407: InvalidArgumentError\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.mark.skipif(K.backend() != 'tensorflow', reason='Requires TF backend')\n    @keras_test\n    def test_separable_conv_1d():\n        num_samples = 2\n        filters = 6\n        stack_size = 3\n        num_step = 9\n    \n        for padding in _convolution_paddings:\n            for strides in [1, 2]:\n                for multiplier in [1, 2]:\n                    for dilation_rate in [1, 2]:\n                        if padding == 'same' and strides != 1:\n                            continue\n                        if dilation_rate != 1 and strides != 1:\n                            continue\n    \n                        layer_test(convolutional.SeparableConv1D,\n                                   kwargs={'filters': filters,\n                                           'kernel_size': 3,\n                                           'padding': padding,\n                                           'strides': strides,\n                                           'depth_multiplier': multiplier,\n                                           'dilation_rate': dilation_rate},\n>                                  input_shape=(num_samples, num_step, stack_size))\n\ntests/keras/layers/convolutional_test.py:256: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nkeras/utils/test_utils.py:95: in layer_test\n    actual_output = model.predict(input_data)\nkeras/engine/training.py:1803: in predict\n    verbose=verbose, steps=steps)\nkeras/engine/training.py:1303: in _predict_loop\n    batch_outs = f(ins_batch)\nkeras/backend/tensorflow_backend.py:2475: in __call__\n    **self.session_kwargs)\n../../envs/keras_36/lib/python3.7/site-packages/tensorflow/python/client/session.py:929: in run\n    run_metadata_ptr)\n../../envs/keras_36/lib/python3.7/site-packages/tensorflow/python/client/session.py:1152: in _run\n    feed_dict_tensor, options, run_metadata)\n../../envs/keras_36/lib/python3.7/site-packages/tensorflow/python/client/session.py:1328: in _do_run\n    run_metadata)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tensorflow.python.client.session.Session object at 0x7f7364523650>\nfn = <function BaseSession._do_run.<locals>._run_fn at 0x7f73608bdd40>\nargs = ({<tensorflow.python.pywrap_tensorflow_internal.TF_Output; proxy of <Swig Object of type 'TF_Output *' at 0x7f73604c1f...ct of type 'TF_Output *' at 0x7f7356982720> >], [<Swig Object of type 'TF_Operation *' at 0x7f7356982210>], None, None)\nmessage = 'Current implementation only supports equal length strides in the row and column dimensions.\\n\\t [[node separable_conv.../depthwise (defined at /home/ubuntu/Desktop/bgp_envs_local/repos/keras_36/keras/backend/tensorflow_backend.py:3432) ]]'\nm = <re.Match object; span=(94, 150), match='[[{{node separable_conv1d_5/separable_conv2d/dept>\n\n    def _do_call(self, fn, *args):\n      try:\n        return fn(*args)\n      except errors.OpError as e:\n        message = compat.as_text(e.message)\n        m = BaseSession._NODEDEF_NAME_RE.search(message)\n        node_def = None\n        op = None\n        if m is not None:\n          node_name = m.group(3)\n          try:\n            op = self._graph.get_operation_by_name(node_name)\n            node_def = op.node_def\n          except KeyError:\n            pass\n        message = error_interpolation.interpolate(message, self._graph)\n>       raise type(e)(node_def, op, message)\nE       tensorflow.python.framework.errors_impl.InvalidArgumentError: Current implementation only supports equal length strides in the row and column dimensions.\nE       \t [[node separable_conv1d_5/separable_conv2d/depthwise (defined at /home/ubuntu/Desktop/bgp_envs_local/repos/keras_36/keras/backend/tensorflow_backend.py:3432) ]]\nE       \nE       Caused by op 'separable_conv1d_5/separable_conv2d/depthwise', defined at:\nE         File \"<string>\", line 1, in <module>\nE         File \"<string>\", line 8, in <module>\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/execnet/gateway_base.py\", line 1554, in serve\nE           SlaveGateway(io=io, id=id, _startcount=2).serve()\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/execnet/gateway_base.py\", line 1060, in serve\nE           self._execpool.integrate_as_primary_thread()\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/execnet/gateway_base.py\", line 267, in integrate_as_primary_thread\nE           self._perform_spawn(reply)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/execnet/gateway_base.py\", line 285, in _perform_spawn\nE           reply.run()\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/execnet/gateway_base.py\", line 220, in run\nE           self._result = func(*args, **kwargs)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/execnet/gateway_base.py\", line 1084, in executetask\nE           do_exec(co, loc)  # noqa\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/xdist/remote.py\", line 261, in <module>\nE           config.hook.pytest_cmdline_main(config=config)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/hooks.py\", line 286, in __call__\nE           return self._hookexec(self, self.get_hookimpls(), kwargs)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/manager.py\", line 93, in _hookexec\nE           return self._inner_hookexec(hook, methods, kwargs)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/manager.py\", line 87, in <lambda>\nE           firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/callers.py\", line 187, in _multicall\nE           res = hook_impl.function(*args)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/main.py\", line 240, in pytest_cmdline_main\nE           return wrap_session(config, _main)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/main.py\", line 191, in wrap_session\nE           session.exitstatus = doit(config, session) or 0\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/main.py\", line 247, in _main\nE           config.hook.pytest_runtestloop(session=session)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/hooks.py\", line 286, in __call__\nE           return self._hookexec(self, self.get_hookimpls(), kwargs)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/manager.py\", line 93, in _hookexec\nE           return self._inner_hookexec(hook, methods, kwargs)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/manager.py\", line 87, in <lambda>\nE           firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/callers.py\", line 187, in _multicall\nE           res = hook_impl.function(*args)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/xdist/remote.py\", line 74, in pytest_runtestloop\nE           self.run_one_test(torun)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/xdist/remote.py\", line 88, in run_one_test\nE           self.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/hooks.py\", line 286, in __call__\nE           return self._hookexec(self, self.get_hookimpls(), kwargs)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/manager.py\", line 93, in _hookexec\nE           return self._inner_hookexec(hook, methods, kwargs)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/manager.py\", line 87, in <lambda>\nE           firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/callers.py\", line 187, in _multicall\nE           res = hook_impl.function(*args)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/runner.py\", line 85, in pytest_runtest_protocol\nE           runtestprotocol(item, nextitem=nextitem)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/runner.py\", line 100, in runtestprotocol\nE           reports.append(call_and_report(item, \"call\", log))\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/runner.py\", line 186, in call_and_report\nE           call = call_runtest_hook(item, when, **kwds)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/runner.py\", line 217, in call_runtest_hook\nE           lambda: ihook(item=item, **kwds), when=when, reraise=reraise\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/runner.py\", line 244, in from_call\nE           result = func()\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/runner.py\", line 217, in <lambda>\nE           lambda: ihook(item=item, **kwds), when=when, reraise=reraise\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/hooks.py\", line 286, in __call__\nE           return self._hookexec(self, self.get_hookimpls(), kwargs)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/manager.py\", line 93, in _hookexec\nE           return self._inner_hookexec(hook, methods, kwargs)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/manager.py\", line 87, in <lambda>\nE           firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/callers.py\", line 187, in _multicall\nE           res = hook_impl.function(*args)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/runner.py\", line 135, in pytest_runtest_call\nE           item.runtest()\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/python.py\", line 1477, in runtest\nE           self.ihook.pytest_pyfunc_call(pyfuncitem=self)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/hooks.py\", line 286, in __call__\nE           return self._hookexec(self, self.get_hookimpls(), kwargs)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/manager.py\", line 93, in _hookexec\nE           return self._inner_hookexec(hook, methods, kwargs)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/manager.py\", line 87, in <lambda>\nE           firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/pluggy/callers.py\", line 187, in _multicall\nE           res = hook_impl.function(*args)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/_pytest/python.py\", line 182, in pytest_pyfunc_call\nE           result = testfunction(**testargs)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/repos/keras_36/keras/utils/test_utils.py\", line 161, in wrapper\nE           output = func(*args, **kwargs)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/repos/keras_36/tests/keras/layers/convolutional_test.py\", line 256, in test_separable_conv_1d\nE           input_shape=(num_samples, num_step, stack_size))\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/repos/keras_36/keras/utils/test_utils.py\", line 89, in layer_test\nE           y = layer(x)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/repos/keras_36/keras/engine/topology.py\", line 617, in __call__\nE           output = self.call(inputs, **kwargs)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/repos/keras_36/keras/layers/convolutional.py\", line 1222, in call\nE           dilation_rate=self.dilation_rate)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/repos/keras_36/keras/backend/tensorflow_backend.py\", line 3432, in separable_conv1d\nE           data_format=tf_data_format)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/tensorflow/python/ops/nn_impl.py\", line 674, in separable_conv2d\nE           op=op)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/tensorflow/python/ops/nn_ops.py\", line 435, in with_space_to_batch\nE           return new_op(input, None)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/tensorflow/python/ops/nn_ops.py\", line 591, in __call__\nE           return self.call(inp, filter)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/tensorflow/python/ops/nn_ops.py\", line 425, in <lambda>\nE           return lambda inp, _: op(inp, num_spatial_dims, padding)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/tensorflow/python/ops/nn_impl.py\", line 666, in op\nE           name=\"depthwise\")\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/tensorflow/python/ops/gen_nn_ops.py\", line 2251, in depthwise_conv2d_native\nE           dilations=dilations, name=name)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/tensorflow/python/framework/op_def_library.py\", line 788, in _apply_op_helper\nE           op_def=op_def)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/tensorflow/python/util/deprecation.py\", line 507, in new_func\nE           return func(*args, **kwargs)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/tensorflow/python/framework/ops.py\", line 3300, in create_op\nE           op_def=op_def)\nE         File \"/home/ubuntu/Desktop/bgp_envs_local/envs/keras_36/lib/python3.7/site-packages/tensorflow/python/framework/ops.py\", line 1801, in __init__\nE           self._traceback = tf_stack.extract_stack()\nE       \nE       InvalidArgumentError (see above for traceback): Current implementation only supports equal length strides in the row and column dimensions.\nE       \t [[node separable_conv1d_5/separable_conv2d/depthwise (defined at /home/ubuntu/Desktop/bgp_envs_local/repos/keras_36/keras/backend/tensorflow_backend.py:3432) ]]\n\n../../envs/keras_36/lib/python3.7/site-packages/tensorflow/python/client/session.py:1348: InvalidArgumentError",
                "test_function_decorators": [
                    "pytest.mark.skipif(K.backend() != 'tensorflow', reason='Requires TF backend')",
                    "keras_test"
                ]
            }
        ]
    }
}