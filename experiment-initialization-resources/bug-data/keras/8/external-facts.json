{
    "keras:8": {
        "github_issue_title": [
            "Bug in loading model with shared layers accross multiple levels.\n"
        ],
        "github_issue_description": [
            "There is a bug in the from_config method of the Keras Network class. This bug occurs when loading a model from a config when the model uses a layer that is shared at multiple depths and the input tensors to the shared layer are not in the order of the layers in the model config file.\n\nFor example, the following model creates a single dense layer then applies it to the reshaped input x2. It is then applied to the non-reshaped input x1, and again at the reshaped output.\n\nsl = Dense(12)\n\nx2 = Input((1, 12))\nr2 = Reshape((12,))(x2)\nr21 = sl(r2)\n\nx1 = Input((1, 12))\nr1 = Reshape((12,))(sl(x1))\n\nr11 = sl(r1)\nc1 = Concatenate()([r11, r21])\no1 = Dense(2)(c1)\nThe layers of the model are as follows:\n\n__________________________________________________________________________________________________\nLayer (type)                    Output Shape         Param #     Connected to\n==================================================================================================\ninput_2 (InputLayer)            (None, 1, 12)        0\n__________________________________________________________________________________________________\ndense_1 (Dense)                 multiple             156         reshape_1[0][0]\n                                                                 input_2[0][0]\n                                                                 reshape_2[0][0]\n__________________________________________________________________________________________________\ninput_1 (InputLayer)            (None, 1, 12)        0\n__________________________________________________________________________________________________\nreshape_2 (Reshape)             (None, 12)           0           dense_1[1][0]\n__________________________________________________________________________________________________\nreshape_1 (Reshape)             (None, 12)           0           input_1[0][0]\n__________________________________________________________________________________________________\nconcatenate_1 (Concatenate)     (None, 24)           0           dense_1[2][0]\n                                                                 dense_1[0][0]\n__________________________________________________________________________________________________\ndense_2 (Dense)                 (None, 2)            50          concatenate_1[0][0]\n==================================================================================================\nNote that the dense_2 layer has reshape_1 and reshape_2 as inputs but those layers come after dense_2 in the list of layers.\n\nThe code in keras/engine/network.py contains the from_config method that loads the model. Then loading, the layer order of above is followed when recreating the model. At each layer Keras attempts to deserialize the layer using the inputs. When trying to deserialize the dense_2 layer Keras tries to create the first output but cannot because the input layers reshape_1 aren't available, Keras next tries to create the second output using input_2 which works because these layers are available. Keras will re-queue the first node (and third node) and will creates it at the next attempt when the input layers are available, unfortunately in doing this it swaps the output order of the output nodes of the dense_2 layer. The model loading then fails at the concatenate_1 layer as it uses the output nodes [0] and [2] of dense_2 but the output node [0] is now from input_2 which has the incorrect shape.\n\nNote that if we change the order that we apply the shared layer so that model layer order changes this bug can be avoided. The code to reproduce the bug including code to create the layers in an order that doesn't trigger the bug is on this gist:\nhttps://gist.github.com/adocherty/5f5c9983310ef2cf28e3ccb63ad39740\n\nThe error triggered by this script is as follows:\n\n  File \"example_load_bug.py\", line 57, in <module>\n    models.load_model(\"test.h5\")\n  File \".../lib/python3.6/site-packages/keras/engine/saving.py\", line 260, in load_model\n    model = model_from_config(model_config, custom_objects=custom_objects)\n  File \".../lib/python3.6/site-packages/keras/engine/saving.py\", line 334, in model_from_config\n    return deserialize(config, custom_objects=custom_objects)\n  File \".../lib/python3.6/site-packages/keras/layers/__init__.py\", line 55, in deserialize\n    printable_module_name='layer')\n  File \".../lib/python3.6/site-packages/keras/utils/generic_utils.py\", line 145, in deserialize_keras_object\n    list(custom_objects.items())))\n  File \".../lib/python3.6/site-packages/keras/engine/network.py\", line 1027, in from_config\n    process_node(layer, node_data)\n  File \".../lib/python3.6/site-packages/keras/engine/network.py\", line 986, in process_node\n    layer(unpack_singleton(input_tensors), **kwargs)\n  File \".../lib/python3.6/site-packages/keras/engine/base_layer.py\", line 431, in __call__\n    self.build(unpack_singleton(input_shapes))\n  File \".../lib/python3.6/site-packages/keras/layers/merge.py\", line 354, in build\n    'Got inputs shapes: %s' % (input_shape))\nValueError: A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got inputs shapes: [(None, 12), (None, 1, 12)]\n"
        ]
    }
}