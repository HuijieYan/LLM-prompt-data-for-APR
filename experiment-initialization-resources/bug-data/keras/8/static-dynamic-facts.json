{
    "keras:8": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/keras_8/keras/engine/network.py": {
            "buggy_functions": [
                {
                    "function_name": "from_config",
                    "function_code": "@classmethod\ndef from_config(cls, config, custom_objects=None):\n    \"\"\"Instantiates a Model from its config (output of `get_config()`).\n\n    # Arguments\n        config: Model config dictionary.\n        custom_objects: Optional dictionary mapping names\n            (strings) to custom classes or functions to be\n            considered during deserialization.\n\n    # Returns\n        A model instance.\n\n    # Raises\n        ValueError: In case of improperly formatted config dict.\n    \"\"\"\n    # Layer instances created during\n    # the graph reconstruction process\n    created_layers = {}\n\n    # Dictionary mapping layer instances to\n    # node data that specifies a layer call.\n    # It acts as a queue that maintains any unprocessed\n    # layer call until it becomes possible to process it\n    # (i.e. until the input tensors to the call all exist).\n    unprocessed_nodes = {}\n\n    def add_unprocessed_node(layer, node_data):\n        if layer not in unprocessed_nodes:\n            unprocessed_nodes[layer] = [node_data]\n        else:\n            unprocessed_nodes[layer].append(node_data)\n\n    def process_node(layer, node_data):\n        input_tensors = []\n        for input_data in node_data:\n            inbound_layer_name = input_data[0]\n            inbound_node_index = input_data[1]\n            inbound_tensor_index = input_data[2]\n            if len(input_data) == 3:\n                kwargs = {}\n            elif len(input_data) == 4:\n                kwargs = input_data[3]\n            else:\n                raise ValueError('Improperly formatted model config.')\n            inbound_layer = created_layers[inbound_layer_name]\n            if len(inbound_layer._inbound_nodes) <= inbound_node_index:\n                add_unprocessed_node(layer, node_data)\n                return\n            inbound_node = inbound_layer._inbound_nodes[inbound_node_index]\n            input_tensors.append(\n                inbound_node.output_tensors[inbound_tensor_index])\n        # Call layer on its inputs, thus creating the node\n        # and building the layer if needed.\n        if input_tensors:\n            layer(unpack_singleton(input_tensors), **kwargs)\n\n    def process_layer(layer_data):\n        \"\"\"Deserializes a layer, then call it on appropriate inputs.\n\n        # Arguments\n            layer_data: layer config dict.\n\n        # Raises\n            ValueError: In case of improperly formatted `layer_data` dict.\n        \"\"\"\n        layer_name = layer_data['name']\n\n        # Instantiate layer.\n        from ..layers import deserialize as deserialize_layer\n\n        layer = deserialize_layer(layer_data,\n                                  custom_objects=custom_objects)\n        created_layers[layer_name] = layer\n\n        # Gather layer inputs.\n        inbound_nodes_data = layer_data['inbound_nodes']\n        for node_data in inbound_nodes_data:\n            # We don't process nodes (i.e. make layer calls)\n            # on the fly because the inbound node may not yet exist,\n            # in case of layer shared at different topological depths\n            # (e.g. a model such as A(B(A(B(x)))))\n            add_unprocessed_node(layer, node_data)\n\n    # First, we create all layers and enqueue nodes to be processed\n    for layer_data in config['layers']:\n        process_layer(layer_data)\n    # Then we process nodes in order of layer depth.\n    # Nodes that cannot yet be processed (if the inbound node\n    # does not yet exist) are re-enqueued, and the process\n    # is repeated until all nodes are processed.\n    while unprocessed_nodes:\n        for layer_data in config['layers']:\n            layer = created_layers[layer_data['name']]\n            if layer in unprocessed_nodes:\n                for node_data in unprocessed_nodes.pop(layer):\n                    process_node(layer, node_data)\n\n    name = config.get('name')\n    input_tensors = []\n    output_tensors = []\n    for layer_data in config['input_layers']:\n        layer_name, node_index, tensor_index = layer_data\n        assert layer_name in created_layers\n        layer = created_layers[layer_name]\n        layer_output_tensors = layer._inbound_nodes[node_index].output_tensors\n        input_tensors.append(layer_output_tensors[tensor_index])\n    for layer_data in config['output_layers']:\n        layer_name, node_index, tensor_index = layer_data\n        assert layer_name in created_layers\n        layer = created_layers[layer_name]\n        layer_output_tensors = layer._inbound_nodes[node_index].output_tensors\n        output_tensors.append(layer_output_tensors[tensor_index])\n    return cls(inputs=input_tensors, outputs=output_tensors, name=name)\n",
                    "decorators": [
                        "classmethod"
                    ],
                    "docstring": "Instantiates a Model from its config (output of `get_config()`).\n\n# Arguments\n    config: Model config dictionary.\n    custom_objects: Optional dictionary mapping names\n        (strings) to custom classes or functions to be\n        considered during deserialization.\n\n# Returns\n    A model instance.\n\n# Raises\n    ValueError: In case of improperly formatted config dict.",
                    "start_line": 933,
                    "end_line": 1046,
                    "variables": {
                        "created_layers": [
                            1026,
                            1036,
                            1037,
                            1006,
                            978,
                            1042,
                            1043,
                            951
                        ],
                        "unprocessed_nodes": [
                            1024,
                            961,
                            962,
                            1027,
                            964,
                            1028,
                            958
                        ],
                        "layer": [
                            961,
                            962,
                            1026,
                            964,
                            1027,
                            1028,
                            1029,
                            1004,
                            1037,
                            1006,
                            1038,
                            1043,
                            980,
                            1044,
                            1015,
                            988
                        ],
                        "node_data": [
                            962,
                            964,
                            1028,
                            1029,
                            968,
                            1010,
                            980,
                            1015
                        ],
                        "append": [
                            964
                        ],
                        "input_tensors": [
                            967,
                            1032,
                            1039,
                            1046,
                            983,
                            987,
                            988
                        ],
                        "input_data": [
                            968,
                            969,
                            970,
                            971,
                            972,
                            974,
                            975
                        ],
                        "inbound_layer_name": [
                            969,
                            978
                        ],
                        "inbound_node_index": [
                            970,
                            979,
                            982
                        ],
                        "inbound_tensor_index": [
                            984,
                            971
                        ],
                        "len": [
                            979,
                            972,
                            974
                        ],
                        "kwargs": [
                            988,
                            973,
                            975
                        ],
                        "ValueError": [
                            977
                        ],
                        "inbound_layer": [
                            978,
                            979,
                            982
                        ],
                        "inbound_layer._inbound_nodes": [
                            979,
                            982
                        ],
                        "add_unprocessed_node": [
                            980,
                            1015
                        ],
                        "inbound_node": [
                            984,
                            982
                        ],
                        "input_tensors.append": [
                            1039,
                            983
                        ],
                        "inbound_node.output_tensors": [
                            984
                        ],
                        "unpack_singleton": [
                            988
                        ],
                        "layer_name": [
                            999,
                            1035,
                            1036,
                            1037,
                            1006,
                            1041,
                            1042,
                            1043
                        ],
                        "layer_data": [
                            1025,
                            1026,
                            999,
                            1034,
                            1035,
                            1004,
                            1040,
                            1009,
                            1041,
                            1018,
                            1019
                        ],
                        "deserialize_layer": [
                            1004
                        ],
                        "custom_objects": [
                            1005
                        ],
                        "inbound_nodes_data": [
                            1009,
                            1010
                        ],
                        "config": [
                            1025,
                            1031,
                            1034,
                            1040,
                            1018
                        ],
                        "process_layer": [
                            1019
                        ],
                        "unprocessed_nodes.pop": [
                            1028
                        ],
                        "process_node": [
                            1029
                        ],
                        "name": [
                            1046,
                            1031
                        ],
                        "config.get": [
                            1031
                        ],
                        "output_tensors": [
                            1033,
                            1038,
                            1044,
                            1045,
                            1046
                        ],
                        "node_index": [
                            1041,
                            1035,
                            1044,
                            1038
                        ],
                        "tensor_index": [
                            1041,
                            1035,
                            1045,
                            1039
                        ],
                        "layer_output_tensors": [
                            1044,
                            1045,
                            1038,
                            1039
                        ],
                        "layer._inbound_nodes": [
                            1044,
                            1038
                        ],
                        "output_tensors.append": [
                            1045
                        ],
                        "cls": [
                            1046
                        ],
                        "classmethod": [
                            933
                        ]
                    },
                    "filtered_variables": {
                        "created_layers": [
                            1026,
                            1036,
                            1037,
                            1006,
                            978,
                            1042,
                            1043,
                            951
                        ],
                        "unprocessed_nodes": [
                            1024,
                            961,
                            962,
                            1027,
                            964,
                            1028,
                            958
                        ],
                        "layer": [
                            961,
                            962,
                            1026,
                            964,
                            1027,
                            1028,
                            1029,
                            1004,
                            1037,
                            1006,
                            1038,
                            1043,
                            980,
                            1044,
                            1015,
                            988
                        ],
                        "node_data": [
                            962,
                            964,
                            1028,
                            1029,
                            968,
                            1010,
                            980,
                            1015
                        ],
                        "append": [
                            964
                        ],
                        "input_tensors": [
                            967,
                            1032,
                            1039,
                            1046,
                            983,
                            987,
                            988
                        ],
                        "input_data": [
                            968,
                            969,
                            970,
                            971,
                            972,
                            974,
                            975
                        ],
                        "inbound_layer_name": [
                            969,
                            978
                        ],
                        "inbound_node_index": [
                            970,
                            979,
                            982
                        ],
                        "inbound_tensor_index": [
                            984,
                            971
                        ],
                        "kwargs": [
                            988,
                            973,
                            975
                        ],
                        "inbound_layer": [
                            978,
                            979,
                            982
                        ],
                        "inbound_layer._inbound_nodes": [
                            979,
                            982
                        ],
                        "add_unprocessed_node": [
                            980,
                            1015
                        ],
                        "inbound_node": [
                            984,
                            982
                        ],
                        "input_tensors.append": [
                            1039,
                            983
                        ],
                        "inbound_node.output_tensors": [
                            984
                        ],
                        "unpack_singleton": [
                            988
                        ],
                        "layer_name": [
                            999,
                            1035,
                            1036,
                            1037,
                            1006,
                            1041,
                            1042,
                            1043
                        ],
                        "layer_data": [
                            1025,
                            1026,
                            999,
                            1034,
                            1035,
                            1004,
                            1040,
                            1009,
                            1041,
                            1018,
                            1019
                        ],
                        "deserialize_layer": [
                            1004
                        ],
                        "custom_objects": [
                            1005
                        ],
                        "inbound_nodes_data": [
                            1009,
                            1010
                        ],
                        "config": [
                            1025,
                            1031,
                            1034,
                            1040,
                            1018
                        ],
                        "process_layer": [
                            1019
                        ],
                        "unprocessed_nodes.pop": [
                            1028
                        ],
                        "process_node": [
                            1029
                        ],
                        "name": [
                            1046,
                            1031
                        ],
                        "config.get": [
                            1031
                        ],
                        "output_tensors": [
                            1033,
                            1038,
                            1044,
                            1045,
                            1046
                        ],
                        "node_index": [
                            1041,
                            1035,
                            1044,
                            1038
                        ],
                        "tensor_index": [
                            1041,
                            1035,
                            1045,
                            1039
                        ],
                        "layer_output_tensors": [
                            1044,
                            1045,
                            1038,
                            1039
                        ],
                        "layer._inbound_nodes": [
                            1044,
                            1038
                        ],
                        "output_tensors.append": [
                            1045
                        ],
                        "cls": [
                            1046
                        ]
                    },
                    "diff_line_number": 960,
                    "class_data": {
                        "signature": "class Network(Layer)",
                        "docstring": "A Network is a directed acyclic graph of layers.\n\nIt is the topological form of a \"model\". A Model\nis simply a Network with added training routines.\n\n# Properties\n    name\n    inputs\n    outputs\n    layers\n    input_spec (list of class instances)\n        each entry describes one required input:\n            - ndim\n            - dtype\n    trainable (boolean)\n    input_shape\n    output_shape\n    weights (list of variables)\n    trainable_weights (list of variables)\n    non_trainable_weights (list of variables)\n    losses\n    updates\n    state_updates\n    stateful\n\n# Methods\n    __call__\n    summary\n    get_layer\n    get_weights\n    set_weights\n    get_config\n    compute_output_shape\n    save\n    add_loss\n    add_update\n    get_losses_for\n    get_updates_for\n    to_json\n    to_yaml\n    reset_states\n\n# Class Methods\n    from_config\n\n# Raises\n    TypeError: if input tensors are not Keras tensors\n        (tensors returned by `Input`).",
                        "constructor_docstring": null,
                        "functions": [
                            "@interfaces.legacy_model_constructor_support\ndef __init__(self, *args, **kwargs):\n    if len(args) == 2 or (len(args) == 1 and 'outputs' in kwargs) or ('inputs' in kwargs and 'outputs' in kwargs):\n        self._init_graph_network(*args, **kwargs)\n    else:\n        self._init_subclassed_network(**kwargs)",
                            "def _base_init(self, name=None):\n    if not name:\n        prefix = self.__class__.__name__.lower()\n        name = prefix + '_' + str(K.get_uid(prefix))\n    self.name = name\n    self.trainable = True\n    self._is_compiled = False\n    self._expects_training_arg = False\n    self._initial_weights = None\n    self.supports_masking = False\n    if not hasattr(self, 'optimizer'):\n        self.optimizer = None\n    self._updates = []\n    self._losses = []\n    self._per_input_losses = {}\n    self._per_input_updates = {}\n    self._layers = []\n    self._outbound_nodes = []\n    self._inbound_nodes = []",
                            "def _init_graph_network(self, inputs, outputs, name=None):\n    self._uses_inputs_arg = True\n    self.inputs = to_list(inputs, allow_tuple=True)\n    self.outputs = to_list(outputs, allow_tuple=True)\n    if len(set(self.inputs)) != len(self.inputs):\n        raise ValueError('The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ' + str(self.inputs))\n    for x in self.inputs:\n        if not hasattr(x, '_keras_history'):\n            cls_name = self.__class__.__name__\n            raise ValueError('Input tensors to a ' + cls_name + ' ' + 'must come from `keras.layers.Input`. Received: ' + str(x) + ' (missing previous layer metadata).')\n        (layer, node_index, tensor_index) = x._keras_history\n        if len(layer._inbound_nodes) > 1 or (layer._inbound_nodes and layer._inbound_nodes[0].inbound_layers):\n            cls_name = self.__class__.__name__\n            warnings.warn(cls_name + ' inputs must come from `keras.layers.Input` (thus holding past layer metadata), they cannot be the output of a previous non-Input layer. Here, a tensor specified as input to your model was not an Input tensor, it was generated by layer ' + layer.name + '.\\nNote that input tensors are instantiated via `tensor = keras.layers.Input(shape)`.\\nThe tensor that caused the issue was: ' + str(x.name))\n    for x in self.outputs:\n        if not hasattr(x, '_keras_history'):\n            cls_name = self.__class__.__name__\n            raise ValueError('Output tensors to a ' + cls_name + ' must be the output of a Keras `Layer` (thus holding past layer metadata). Found: ' + str(x))\n    self._base_init(name=name)\n    self._compute_previous_mask = has_arg(self.call, 'mask') or hasattr(self, 'compute_mask')\n    self.built = True\n    self._is_graph_network = True\n    self._input_layers = []\n    self._output_layers = []\n    self._input_coordinates = []\n    self._output_coordinates = []\n    self._output_mask_cache = {}\n    self._output_tensor_cache = {}\n    self._output_shape_cache = {}\n    for x in self.outputs:\n        (layer, node_index, tensor_index) = x._keras_history\n        self._output_layers.append(layer)\n        self._output_coordinates.append((layer, node_index, tensor_index))\n    for x in self.inputs:\n        (layer, node_index, tensor_index) = x._keras_history\n        assert node_index == 0\n        assert tensor_index == 0\n        self._input_layers.append(layer)\n        self._input_coordinates.append((layer, node_index, tensor_index))\n    (nodes, nodes_by_depth, layers, layers_by_depth) = _map_graph_network(self.inputs, self.outputs)\n    self._network_nodes = nodes\n    self._nodes_by_depth = nodes_by_depth\n    self._layers = layers\n    self._layers_by_depth = layers_by_depth\n    Node(outbound_layer=self, inbound_layers=[], node_indices=[], tensor_indices=[], input_tensors=self.inputs, output_tensors=self.outputs, input_masks=[None for _ in self.inputs], output_masks=[None for _ in self.outputs], input_shapes=[x._keras_shape for x in self.inputs], output_shapes=[x._keras_shape for x in self.outputs])\n    masks = []\n    for x in self.inputs:\n        (layer, node_index, tensor_index) = x._keras_history\n        node = layer._inbound_nodes[node_index]\n        mask = node.output_masks[tensor_index]\n        masks.append(mask)\n    mask_cache_key = object_list_uid(inputs)\n    mask_cache_key += '_' + object_list_uid(masks)\n    masks = []\n    for x in self.outputs:\n        (layer, node_index, tensor_index) = x._keras_history\n        node = layer._inbound_nodes[node_index]\n        mask = node.output_masks[tensor_index]\n        masks.append(mask)\n    mask = unpack_singleton(masks)\n    self._output_mask_cache[mask_cache_key] = mask\n    self.input_names = []\n    self.output_names = []\n    self._feed_input_names = []\n    self._feed_inputs = []\n    self._feed_input_shapes = []\n    for (i, layer) in enumerate(self._input_layers):\n        if not isinstance(layer, InputLayer):\n            raise TypeError('Input layers to a `Model` must be `InputLayer` objects. Received inputs: {}. Input {} (0-based) originates from layer type `{}`.'.format(inputs, i, layer.__class__.__name__))\n        self.input_names.append(layer.name)\n        if layer.is_placeholder:\n            self._feed_inputs.append(layer.input)\n            self._feed_input_names.append(layer.name)\n            self._feed_input_shapes.append(self.inputs[i]._keras_shape)\n    for layer in self._output_layers:\n        self.output_names.append(layer.name)",
                            "def _init_subclassed_network(self, name=None):\n    self._base_init(name=name)\n    self._is_graph_network = False\n    self._expects_training_arg = has_arg(self.call, 'training')\n    self._uses_inputs_arg = has_arg(self.call, 'inputs')\n    self.outputs = None\n    self.inputs = None\n    self.built = False",
                            "def __setattr__(self, name, value):\n    if isinstance(value, (Layer, Network)):\n        try:\n            is_graph_network = self._is_graph_network\n        except AttributeError:\n            raise RuntimeError('It looks like you are subclassing `Model` and you forgot to call `super(YourClass, self).__init__()`. Always start with this line.')\n        if not is_graph_network:\n            if value not in self._layers:\n                self._layers.append(value)\n    super(Network, self).__setattr__(name, value)",
                            "@property\ndef layers(self):\n    return self._layers",
                            "def get_layer(self, name=None, index=None):\n    \"\"\"Retrieves a layer based on either its name (unique) or index.\n\n    If `name` and `index` are both provided, `index` will take precedence.\n\n    Indices are based on order of horizontal graph traversal (bottom-up).\n\n    # Arguments\n        name: String, name of layer.\n        index: Integer, index of layer.\n\n    # Returns\n        A layer instance.\n\n    # Raises\n        ValueError: In case of invalid layer name or index.\n    \"\"\"\n    if index is not None:\n        if len(self.layers) <= index:\n            raise ValueError('Was asked to retrieve layer at index ' + str(index) + ' but model only has ' + str(len(self.layers)) + ' layers.')\n        else:\n            return self.layers[index]\n    elif not name:\n        raise ValueError('Provide either a layer name or layer index.')\n    for layer in self.layers:\n        if layer.name == name:\n            return layer\n    raise ValueError('No such layer: ' + name)",
                            "@property\ndef updates(self):\n    \"\"\"Retrieves the model's updates.\n\n    Will only include updates that are either\n    unconditional, or conditional on inputs to this model\n    (e.g. will not include updates that depend on tensors\n    that aren't inputs to this model).\n\n    # Returns\n        A list of update ops.\n    \"\"\"\n    if not self.trainable and (not self.stateful):\n        return []\n    updates = []\n    for layer in self.layers:\n        if hasattr(layer, 'updates'):\n            if self._is_graph_network:\n                for (node_index, node) in enumerate(layer._inbound_nodes):\n                    node_key = self._node_key(layer, node_index)\n                    if node_key in self._network_nodes:\n                        inputs = node.input_tensors\n                        updates += layer.get_updates_for(inputs)\n                updates += layer.get_updates_for(None)\n            else:\n                updates += layer.updates\n    return updates",
                            "@property\ndef losses(self):\n    \"\"\"Retrieves the model's losses.\n\n    Will only include losses that are either\n    unconditional, or conditional on inputs to this model\n    (e.g. will not include losses that depend on tensors\n    that aren't inputs to this model).\n\n    # Returns\n        A list of loss tensors.\n    \"\"\"\n    losses = []\n    for layer in self.layers:\n        if hasattr(layer, 'losses'):\n            if self._is_graph_network:\n                for (node_index, node) in enumerate(layer._inbound_nodes):\n                    node_key = self._node_key(layer, node_index)\n                    if node_key in self._network_nodes:\n                        inputs = node.input_tensors\n                        losses += layer.get_losses_for(inputs)\n                losses += layer.get_losses_for(None)\n            else:\n                losses += layer.losses\n    losses += self.get_losses_for(None)\n    unique_tensors = list(set((x for x in losses if not isinstance(x, (float, int)))))\n    non_tensors = [x for x in losses if isinstance(x, (float, int))]\n    return unique_tensors + non_tensors",
                            "@property\ndef uses_learning_phase(self):\n    if not self.outputs:\n        return False\n    return any([x._uses_learning_phase for x in self.outputs])",
                            "@property\ndef stateful(self):\n    return any([hasattr(layer, 'stateful') and layer.stateful for layer in self.layers])",
                            "def reset_states(self):\n    for layer in self.layers:\n        if hasattr(layer, 'reset_states') and getattr(layer, 'stateful', False):\n            layer.reset_states()",
                            "@property\ndef state_updates(self):\n    \"\"\"Returns the `updates` from all layers that are stateful.\n\n    This is useful for separating training updates and\n    state updates, e.g. when we need to update a layer's internal state\n    during prediction.\n\n    # Returns\n        A list of update ops.\n    \"\"\"\n    state_updates = []\n    for layer in self.layers:\n        if layer.stateful:\n            state_updates += layer.updates\n    return state_updates",
                            "@property\ndef trainable_weights(self):\n    if not self.trainable:\n        return []\n    weights = []\n    for layer in self.layers:\n        weights += layer.trainable_weights\n    return weights",
                            "@property\ndef non_trainable_weights(self):\n    weights = []\n    for layer in self.layers:\n        weights += layer.non_trainable_weights\n    if not self.trainable:\n        trainable_weights = []\n        for layer in self.layers:\n            trainable_weights += layer.trainable_weights\n        return trainable_weights + weights\n    return weights",
                            "def get_weights(self):\n    \"\"\"Retrieves the weights of the model.\n\n    # Returns\n        A flat list of Numpy arrays.\n    \"\"\"\n    weights = []\n    for layer in self.layers:\n        weights += layer.weights\n    return K.batch_get_value(weights)",
                            "def set_weights(self, weights):\n    \"\"\"Sets the weights of the model.\n\n    # Arguments\n        weights: A list of Numpy arrays with shapes and types matching\n            the output of `model.get_weights()`.\n    \"\"\"\n    tuples = []\n    for layer in self.layers:\n        num_param = len(layer.weights)\n        layer_weights = weights[:num_param]\n        for (sw, w) in zip(layer.weights, layer_weights):\n            tuples.append((sw, w))\n        weights = weights[num_param:]\n    K.batch_set_value(tuples)",
                            "@property\ndef input_spec(self):\n    \"\"\"Gets the model's input specs.\n\n    # Returns\n        A list of `InputSpec` instances (one per input to the model)\n            or a single instance if the model has only one input.\n    \"\"\"\n    if not self._is_graph_network:\n        return None\n    specs = []\n    for layer in getattr(self, '_input_layers', []):\n        if layer.input_spec is None:\n            specs.append(None)\n        else:\n            if not isinstance(layer.input_spec, list):\n                raise TypeError('Layer ' + layer.name + ' has an input_spec attribute that is not a list. We expect a list. Found input_spec = ' + str(layer.input_spec))\n            specs += layer.input_spec\n    return unpack_singleton(specs)",
                            "def call(self, inputs, mask=None):\n    \"\"\"Calls the model on new inputs.\n\n    In this case `call` just reapplies\n    all ops in the graph to the new inputs\n    (e.g. build a new computational graph from the provided inputs).\n\n    A model is callable on non-Keras tensors.\n\n    # Arguments\n        inputs: A tensor or list of tensors.\n        mask: A mask or list of masks. A mask can be\n            either a tensor or None (no mask).\n\n    # Returns\n        A tensor if there is a single output, or\n        a list of tensors if there are more than one outputs.\n    \"\"\"\n    inputs = to_list(inputs)\n    if mask is None:\n        masks = [None for _ in range(len(inputs))]\n    else:\n        masks = to_list(mask)\n    cache_key = object_list_uid(inputs)\n    cache_key += '_' + object_list_uid(masks)\n    if cache_key in self._output_tensor_cache:\n        return self._output_tensor_cache[cache_key]\n    else:\n        (output_tensors, _, _) = self.run_internal_graph(inputs, masks)\n        return output_tensors",
                            "def compute_mask(self, inputs, mask):\n    if not self._is_graph_network:\n        return None\n    inputs = to_list(inputs)\n    if mask is None:\n        masks = [None for _ in range(len(inputs))]\n    else:\n        masks = to_list(mask)\n    cache_key = object_list_uid(inputs)\n    cache_key += '_' + object_list_uid(masks)\n    if cache_key in self._output_mask_cache:\n        return self._output_mask_cache[cache_key]\n    else:\n        (_, output_masks, _) = self.run_internal_graph(inputs, masks)\n        return output_masks",
                            "def compute_output_shape(self, input_shape):\n    if not self._is_graph_network:\n        raise NotImplementedError\n    input_shapes = to_list(input_shape)\n    if len(input_shapes) != len(self._input_layers):\n        raise ValueError('Invalid input_shape argument ' + str(input_shape) + ': model has ' + str(len(self._input_layers)) + ' tensor inputs.')\n    cache_key = ', '.join([str(x) for x in input_shapes])\n    if cache_key in self._output_shape_cache:\n        output_shapes = self._output_shape_cache[cache_key]\n        if isinstance(output_shapes, list):\n            return unpack_singleton(output_shapes)\n        return output_shapes\n    else:\n        layers_to_output_shapes = {}\n        for i in range(len(input_shapes)):\n            layer = self._input_layers[i]\n            input_shape = input_shapes[i]\n            shape_key = layer.name + '_0_0'\n            layers_to_output_shapes[shape_key] = input_shape\n        depth_keys = list(self._nodes_by_depth.keys())\n        depth_keys.sort(reverse=True)\n        if len(depth_keys) > 1:\n            for depth in depth_keys:\n                nodes = self._nodes_by_depth[depth]\n                for node in nodes:\n                    layer = node.outbound_layer\n                    if layer in self._input_layers:\n                        continue\n                    input_shapes = []\n                    for j in range(len(node.inbound_layers)):\n                        inbound_layer = node.inbound_layers[j]\n                        node_index = node.node_indices[j]\n                        tensor_index = node.tensor_indices[j]\n                        shape_key = inbound_layer.name\n                        shape_key += '_%s_%s' % (node_index, tensor_index)\n                        input_shape = layers_to_output_shapes[shape_key]\n                        input_shapes.append(input_shape)\n                    output_shape = layer.compute_output_shape(unpack_singleton(input_shapes))\n                    output_shapes = to_list(output_shape)\n                    node_index = layer._inbound_nodes.index(node)\n                    for j in range(len(output_shapes)):\n                        shape_key = layer.name + '_%s_%s' % (node_index, j)\n                        layers_to_output_shapes[shape_key] = output_shapes[j]\n        output_shapes = []\n        output_shape_keys = []\n        for i in range(len(self._output_layers)):\n            layer = self._output_layers[i]\n            node_index = self._output_coordinates[i][1]\n            tensor_index = self._output_coordinates[i][2]\n            shape_key = layer.name + '_%s_%s' % (node_index, tensor_index)\n            output_shape_keys.append(shape_key)\n        for (i, key) in enumerate(output_shape_keys):\n            assert key in layers_to_output_shapes\n            output_shapes.append(layers_to_output_shapes[key])\n        self._output_shape_cache[cache_key] = output_shapes\n        if isinstance(output_shapes, list):\n            return unpack_singleton(output_shapes)\n        return output_shapes",
                            "def run_internal_graph(self, inputs, masks=None):\n    \"\"\"Computes output tensors for new inputs.\n\n    # Note:\n        - Expects `inputs` to be a list (potentially with 1 element).\n        - Can be run on non-Keras tensors.\n\n    # Arguments\n        inputs: List of tensors\n        masks: List of masks (tensors or None).\n\n    # Returns\n        Three lists: output_tensors, output_masks, output_shapes\n    \"\"\"\n    if masks is None:\n        masks = [None for _ in range(len(inputs))]\n    tensor_map = {}\n    for (x, y, mask) in zip(self.inputs, inputs, masks):\n        tensor_map[str(id(x))] = (y, mask)\n    depth_keys = list(self._nodes_by_depth.keys())\n    depth_keys.sort(reverse=True)\n    for depth in depth_keys:\n        nodes = self._nodes_by_depth[depth]\n        for node in nodes:\n            layer = node.outbound_layer\n            reference_input_tensors = node.input_tensors\n            reference_output_tensors = node.output_tensors\n            computed_data = []\n            for x in reference_input_tensors:\n                if str(id(x)) in tensor_map:\n                    computed_data.append(tensor_map[str(id(x))])\n            if len(computed_data) == len(reference_input_tensors):\n                with K.name_scope(layer.name):\n                    if node.arguments:\n                        kwargs = node.arguments\n                    else:\n                        kwargs = {}\n                    if len(computed_data) == 1:\n                        (computed_tensor, computed_mask) = computed_data[0]\n                        if has_arg(layer.call, 'mask'):\n                            if 'mask' not in kwargs:\n                                kwargs['mask'] = computed_mask\n                        output_tensors = to_list(layer.call(computed_tensor, **kwargs))\n                        output_masks = layer.compute_mask(computed_tensor, computed_mask)\n                        if output_masks is None:\n                            output_masks = [None for _ in output_tensors]\n                        else:\n                            output_masks = to_list(output_masks)\n                        computed_tensors = [computed_tensor]\n                        computed_masks = [computed_mask]\n                    else:\n                        computed_tensors = [x[0] for x in computed_data]\n                        computed_masks = [x[1] for x in computed_data]\n                        if has_arg(layer.call, 'mask'):\n                            if 'mask' not in kwargs:\n                                kwargs['mask'] = computed_masks\n                        output_tensors = to_list(layer.call(computed_tensors, **kwargs))\n                        output_masks = layer.compute_mask(computed_tensors, computed_masks)\n                        if output_masks is None:\n                            output_masks = [None for _ in output_tensors]\n                        else:\n                            output_masks = to_list(output_masks)\n                    if hasattr(layer, 'activity_regularizer') and layer.activity_regularizer is not None:\n                        with K.name_scope('activity_regularizer'):\n                            regularization_losses = [layer.activity_regularizer(x) for x in output_tensors]\n                        layer.add_loss(regularization_losses, inputs=computed_tensors)\n                    if len(output_masks) != len(output_tensors):\n                        raise Exception('Layers should have equal number of output tensors and output masks. Layer ' + str(layer.name) + ' has ' + str(len(output_tensors)) + ' output tensors and ' + str(len(output_masks)) + ' output masks.')\n                self.add_update(layer.get_updates_for(computed_tensors), inputs)\n                self.add_update(layer.get_updates_for(None), None)\n                self.add_loss(layer.get_losses_for(computed_tensors), inputs)\n                self.add_loss(layer.get_losses_for(None), None)\n                if all([hasattr(x, '_keras_shape') for x in computed_tensors]):\n                    input_shapes = unpack_singleton([x._keras_shape for x in computed_tensors])\n                    shapes = to_list(layer.compute_output_shape(input_shapes))\n                    uses_learning_phase = any([x._uses_learning_phase for x in computed_tensors])\n                    for (x, s) in zip(output_tensors, shapes):\n                        x._keras_shape = s\n                        _u = getattr(x, '_uses_learning_phase', False)\n                        x._uses_learning_phase = _u or uses_learning_phase\n                for (x, y, mask) in zip(reference_output_tensors, output_tensors, output_masks):\n                    tensor_map[str(id(x))] = (y, mask)\n    output_tensors = []\n    output_masks = []\n    output_shapes = []\n    for x in self.outputs:\n        assert str(id(x)) in tensor_map, 'Could not compute output ' + str(x)\n        (tensor, mask) = tensor_map[str(id(x))]\n        if hasattr(tensor, '_keras_shape') and output_shapes is not None:\n            shape = tensor._keras_shape\n            output_shapes.append(shape)\n        else:\n            output_shapes = None\n        output_tensors.append(tensor)\n        output_masks.append(mask)\n    cache_key = object_list_uid(inputs)\n    cache_key += '_' + object_list_uid(masks)\n    output_tensors = unpack_singleton(output_tensors)\n    self._output_tensor_cache[cache_key] = output_tensors\n    output_masks = unpack_singleton(output_masks)\n    self._output_mask_cache[cache_key] = output_masks\n    if output_shapes is not None:\n        input_shapes = [x._keras_shape for x in inputs]\n        cache_key = ', '.join([str(x) for x in input_shapes])\n        output_shapes = unpack_singleton(output_shapes)\n        self._output_shape_cache[cache_key] = output_shapes\n    return (output_tensors, output_masks, output_shapes)",
                            "def get_config(self):\n    if not self._is_graph_network:\n        raise NotImplementedError\n    config = {'name': self.name}\n    node_conversion_map = {}\n    for layer in self.layers:\n        if issubclass(layer.__class__, Network):\n            kept_nodes = 1\n        else:\n            kept_nodes = 0\n        for (original_node_index, node) in enumerate(layer._inbound_nodes):\n            node_key = self._node_key(layer, original_node_index)\n            if node_key in self._network_nodes:\n                node_conversion_map[node_key] = kept_nodes\n                kept_nodes += 1\n    layer_configs = []\n    for layer in self.layers:\n        layer_class_name = layer.__class__.__name__\n        layer_config = layer.get_config()\n        filtered_inbound_nodes = []\n        for (original_node_index, node) in enumerate(layer._inbound_nodes):\n            node_key = self._node_key(layer, original_node_index)\n            if node_key in self._network_nodes:\n                if node.arguments:\n                    try:\n                        json.dumps(node.arguments)\n                        kwargs = node.arguments\n                    except TypeError:\n                        warnings.warn('Layer ' + layer.name + ' was passed non-serializable keyword arguments: ' + str(node.arguments) + '. They will not be included in the serialized model (and thus will be missing at deserialization time).')\n                        kwargs = {}\n                else:\n                    kwargs = {}\n                if node.inbound_layers:\n                    node_data = []\n                    for i in range(len(node.inbound_layers)):\n                        inbound_layer = node.inbound_layers[i]\n                        node_index = node.node_indices[i]\n                        tensor_index = node.tensor_indices[i]\n                        new_node_index = node_conversion_map.get(self._node_key(inbound_layer, node_index), 0)\n                        node_data.append([inbound_layer.name, new_node_index, tensor_index, kwargs])\n                    filtered_inbound_nodes.append(node_data)\n        layer_configs.append({'name': layer.name, 'class_name': layer_class_name, 'config': layer_config, 'inbound_nodes': filtered_inbound_nodes})\n    config['layers'] = layer_configs\n    model_inputs = []\n    for i in range(len(self._input_layers)):\n        layer = self._input_layers[i]\n        node_index = self._input_coordinates[i][1]\n        node_key = self._node_key(layer, node_index)\n        if node_key not in self._network_nodes:\n            continue\n        new_node_index = node_conversion_map[node_key]\n        tensor_index = self._input_coordinates[i][2]\n        model_inputs.append([layer.name, new_node_index, tensor_index])\n    config['input_layers'] = model_inputs\n    model_outputs = []\n    for i in range(len(self._output_layers)):\n        layer = self._output_layers[i]\n        node_index = self._output_coordinates[i][1]\n        node_key = self._node_key(layer, node_index)\n        if node_key not in self._network_nodes:\n            continue\n        new_node_index = node_conversion_map[node_key]\n        tensor_index = self._output_coordinates[i][2]\n        model_outputs.append([layer.name, new_node_index, tensor_index])\n    config['output_layers'] = model_outputs\n    return copy.deepcopy(config)",
                            "@classmethod\ndef from_config(cls, config, custom_objects=None):\n    \"\"\"Instantiates a Model from its config (output of `get_config()`).\n\n    # Arguments\n        config: Model config dictionary.\n        custom_objects: Optional dictionary mapping names\n            (strings) to custom classes or functions to be\n            considered during deserialization.\n\n    # Returns\n        A model instance.\n\n    # Raises\n        ValueError: In case of improperly formatted config dict.\n    \"\"\"\n    created_layers = {}\n    unprocessed_nodes = {}\n\n    def add_unprocessed_node(layer, node_data):\n        if layer not in unprocessed_nodes:\n            unprocessed_nodes[layer] = [node_data]\n        else:\n            unprocessed_nodes[layer].append(node_data)\n\n    def process_node(layer, node_data):\n        input_tensors = []\n        for input_data in node_data:\n            inbound_layer_name = input_data[0]\n            inbound_node_index = input_data[1]\n            inbound_tensor_index = input_data[2]\n            if len(input_data) == 3:\n                kwargs = {}\n            elif len(input_data) == 4:\n                kwargs = input_data[3]\n            else:\n                raise ValueError('Improperly formatted model config.')\n            inbound_layer = created_layers[inbound_layer_name]\n            if len(inbound_layer._inbound_nodes) <= inbound_node_index:\n                add_unprocessed_node(layer, node_data)\n                return\n            inbound_node = inbound_layer._inbound_nodes[inbound_node_index]\n            input_tensors.append(inbound_node.output_tensors[inbound_tensor_index])\n        if input_tensors:\n            layer(unpack_singleton(input_tensors), **kwargs)\n\n    def process_layer(layer_data):\n        \"\"\"Deserializes a layer, then call it on appropriate inputs.\n\n        # Arguments\n            layer_data: layer config dict.\n\n        # Raises\n            ValueError: In case of improperly formatted `layer_data` dict.\n        \"\"\"\n        layer_name = layer_data['name']\n        from ..layers import deserialize as deserialize_layer\n        layer = deserialize_layer(layer_data, custom_objects=custom_objects)\n        created_layers[layer_name] = layer\n        inbound_nodes_data = layer_data['inbound_nodes']\n        for node_data in inbound_nodes_data:\n            add_unprocessed_node(layer, node_data)\n    for layer_data in config['layers']:\n        process_layer(layer_data)\n    while unprocessed_nodes:\n        for layer_data in config['layers']:\n            layer = created_layers[layer_data['name']]\n            if layer in unprocessed_nodes:\n                for node_data in unprocessed_nodes.pop(layer):\n                    process_node(layer, node_data)\n    name = config.get('name')\n    input_tensors = []\n    output_tensors = []\n    for layer_data in config['input_layers']:\n        (layer_name, node_index, tensor_index) = layer_data\n        assert layer_name in created_layers\n        layer = created_layers[layer_name]\n        layer_output_tensors = layer._inbound_nodes[node_index].output_tensors\n        input_tensors.append(layer_output_tensors[tensor_index])\n    for layer_data in config['output_layers']:\n        (layer_name, node_index, tensor_index) = layer_data\n        assert layer_name in created_layers\n        layer = created_layers[layer_name]\n        layer_output_tensors = layer._inbound_nodes[node_index].output_tensors\n        output_tensors.append(layer_output_tensors[tensor_index])\n    return cls(inputs=input_tensors, outputs=output_tensors, name=name)",
                            "def save(self, filepath, overwrite=True, include_optimizer=True):\n    \"\"\"Saves the model to a single HDF5 file.\n\n    The savefile includes:\n        - The model architecture, allowing to re-instantiate the model.\n        - The model weights.\n        - The state of the optimizer, allowing to resume training\n            exactly where you left off.\n\n    This allows you to save the entirety of the state of a model\n    in a single file.\n\n    Saved models can be reinstantiated via `keras.models.load_model`.\n    The model returned by `load_model`\n    is a compiled model ready to be used (unless the saved model\n    was never compiled in the first place).\n\n    # Arguments\n        filepath: String, path to the file to save the weights to.\n        overwrite: Whether to silently overwrite any existing file at the\n            target location, or provide the user with a manual prompt.\n        include_optimizer: If True, save optimizer's state together.\n\n    # Example\n\n    ```python\n    from keras.models import load_model\n\n    model.save('my_model.h5')  # creates a HDF5 file 'my_model.h5'\n    del model  # deletes the existing model\n\n    # returns a compiled model\n    # identical to the previous one\n    model = load_model('my_model.h5')\n    ```\n    \"\"\"\n    if not self._is_graph_network:\n        raise NotImplementedError\n    from ..models import save_model\n    save_model(self, filepath, overwrite, include_optimizer)",
                            "@saving.allow_write_to_gcs\ndef save_weights(self, filepath, overwrite=True):\n    \"\"\"Dumps all layer weights to a HDF5 file.\n\n    The weight file has:\n        - `layer_names` (attribute), a list of strings\n            (ordered names of model layers).\n        - For every layer, a `group` named `layer.name`\n            - For every such layer group, a group attribute `weight_names`,\n                a list of strings\n                (ordered names of weights tensor of the layer).\n            - For every weight in the layer, a dataset\n                storing the weight value, named after the weight tensor.\n\n    # Arguments\n        filepath: String, path to the file to save the weights to.\n        overwrite: Whether to silently overwrite any existing file at the\n            target location, or provide the user with a manual prompt.\n\n    # Raises\n        ImportError: If h5py is not available.\n    \"\"\"\n    if h5py is None:\n        raise ImportError('`save_weights` requires h5py.')\n    if not overwrite and os.path.isfile(filepath):\n        proceed = ask_to_proceed_with_overwrite(filepath)\n        if not proceed:\n            return\n    with h5py.File(filepath, 'w') as f:\n        saving.save_weights_to_hdf5_group(f, self.layers)\n        f.flush()",
                            "@saving.allow_read_from_gcs\ndef load_weights(self, filepath, by_name=False, skip_mismatch=False, reshape=False):\n    \"\"\"Loads all layer weights from a HDF5 save file.\n\n    If `by_name` is False (default) weights are loaded\n    based on the network's topology, meaning the architecture\n    should be the same as when the weights were saved.\n    Note that layers that don't have weights are not taken\n    into account in the topological ordering, so adding or\n    removing layers is fine as long as they don't have weights.\n\n    If `by_name` is True, weights are loaded into layers\n    only if they share the same name. This is useful\n    for fine-tuning or transfer-learning models where\n    some of the layers have changed.\n\n    # Arguments\n        filepath: String, path to the weights file to load.\n        by_name: Boolean, whether to load weights by name\n            or by topological order.\n        skip_mismatch: Boolean, whether to skip loading of layers\n            where there is a mismatch in the number of weights,\n            or a mismatch in the shape of the weight\n            (only valid when `by_name`=True).\n        reshape: Reshape weights to fit the layer when the correct number\n            of weight arrays is present but their shape does not match.\n\n\n    # Raises\n        ImportError: If h5py is not available.\n    \"\"\"\n    if h5py is None:\n        raise ImportError('`load_weights` requires h5py.')\n    with h5py.File(filepath, mode='r') as f:\n        if 'layer_names' not in f.attrs and 'model_weights' in f:\n            f = f['model_weights']\n        if by_name:\n            saving.load_weights_from_hdf5_group_by_name(f, self.layers, skip_mismatch=skip_mismatch, reshape=reshape)\n        else:\n            saving.load_weights_from_hdf5_group(f, self.layers, reshape=reshape)",
                            "def _updated_config(self):\n    \"\"\"Util hared between different serialization methods.\n\n    # Returns\n        Model config with Keras version information added.\n    \"\"\"\n    from .. import __version__ as keras_version\n    config = self.get_config()\n    model_config = {'class_name': self.__class__.__name__, 'config': config, 'keras_version': keras_version, 'backend': K.backend()}\n    return model_config",
                            "def to_json(self, **kwargs):\n    \"\"\"Returns a JSON string containing the network configuration.\n\n    To load a network from a JSON save file, use\n    `keras.models.model_from_json(json_string, custom_objects={})`.\n\n    # Arguments\n        **kwargs: Additional keyword arguments\n            to be passed to `json.dumps()`.\n\n    # Returns\n        A JSON string.\n    \"\"\"\n\n    def get_json_type(obj):\n        if type(obj).__module__ == np.__name__:\n            if isinstance(obj, np.ndarray):\n                return obj.tolist()\n            else:\n                return obj.item()\n        if type(obj).__name__ == type.__name__:\n            return obj.__name__\n        raise TypeError('Not JSON Serializable:', obj)\n    model_config = self._updated_config()\n    return json.dumps(model_config, default=get_json_type, **kwargs)",
                            "def to_yaml(self, **kwargs):\n    \"\"\"Returns a yaml string containing the network configuration.\n\n    To load a network from a yaml save file, use\n    `keras.models.model_from_yaml(yaml_string, custom_objects={})`.\n\n    `custom_objects` should be a dictionary mapping\n    the names of custom losses / layers / etc to the corresponding\n    functions / classes.\n\n    # Arguments\n        **kwargs: Additional keyword arguments\n            to be passed to `yaml.dump()`.\n\n    # Returns\n        A YAML string.\n    \"\"\"\n    return yaml.dump(self._updated_config(), **kwargs)",
                            "def summary(self, line_length=None, positions=None, print_fn=None):\n    \"\"\"Prints a string summary of the network.\n\n    # Arguments\n        line_length: Total length of printed lines\n            (e.g. set this to adapt the display to different\n            terminal window sizes).\n        positions: Relative or absolute positions of log elements\n            in each line. If not provided,\n            defaults to `[.33, .55, .67, 1.]`.\n        print_fn: Print function to use.\n            It will be called on each line of the summary.\n            You can set it to a custom function\n            in order to capture the string summary.\n            It defaults to `print` (prints to stdout).\n    \"\"\"\n    if not self.built:\n        raise ValueError('This model has not yet been built. Build the model first by calling build() or calling fit() with some data. Or specify input_shape or batch_input_shape in the first layer for automatic build. ')\n    return print_layer_summary(self, line_length=line_length, positions=positions, print_fn=print_fn)",
                            "def __getstate__(self):\n    return saving.pickle_model(self)",
                            "def __setstate__(self, state):\n    model = saving.unpickle_model(state)\n    self.__dict__.update(model.__dict__)"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, *args, **kwargs)",
                            "_base_init(self, name=None)",
                            "_init_graph_network(self, inputs, outputs, name=None)",
                            "_init_subclassed_network(self, name=None)",
                            "__setattr__(self, name, value)",
                            "layers(self)",
                            "get_layer(self, name=None, index=None)",
                            "updates(self)",
                            "losses(self)",
                            "uses_learning_phase(self)",
                            "stateful(self)",
                            "reset_states(self)",
                            "state_updates(self)",
                            "trainable_weights(self)",
                            "non_trainable_weights(self)",
                            "get_weights(self)",
                            "set_weights(self, weights)",
                            "input_spec(self)",
                            "call(self, inputs, mask=None)",
                            "compute_mask(self, inputs, mask)",
                            "compute_output_shape(self, input_shape)",
                            "run_internal_graph(self, inputs, masks=None)",
                            "get_config(self)",
                            "from_config(cls, config, custom_objects=None)",
                            "save(self, filepath, overwrite=True, include_optimizer=True)",
                            "save_weights(self, filepath, overwrite=True)",
                            "load_weights(self, filepath, by_name=False, skip_mismatch=False, reshape=False)",
                            "_updated_config(self)",
                            "to_json(self, **kwargs)",
                            "to_yaml(self, **kwargs)",
                            "summary(self, line_length=None, positions=None, print_fn=None)",
                            "__getstate__(self)",
                            "__setstate__(self, state)"
                        ],
                        "class_level_variable_names": [],
                        "constructor_variable_names": []
                    },
                    "used_imports": [
                        "from ..utils.generic_utils import unpack_singleton",
                        "from ..layers import deserialize as deserialize_layer"
                    ],
                    "variable_values": [
                        [
                            {
                                "created_layers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unprocessed_nodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_node_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_tensor_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_layer._inbound_nodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "add_unprocessed_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_node.output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "deserialize_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "custom_objects": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inbound_nodes_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": "{'name': 'model_1', 'layers': [{'name': 'input_1', 'class_name': 'InputLayer', 'config': {'batch_input_shape': (None, 1, 12), 'dtype': 'float32', 'sparse': False, 'name': 'input_1'}, 'inbound_nodes': []}, {'name': 'layer_a', 'class_name': 'Dense', 'config': {'name': 'layer_a', 'trainable': True, 'units': 12, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['reshape_1', 0, 0, {}]], [['input_1', 0, 0, {}]], [['reshape_2', 0, 0, {}]]]}, {'name': 'reshape_2', 'class_name': 'Reshape', 'config': {'name': 'reshape_2', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['layer_a', 1, 0, {}]]]}, {'name': 'reshape_1', 'class_name': 'Reshape', 'config': {'name': 'reshape_1', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['input_1', 0, 0, {}]]]}, {'name': 'concatenate_1', 'class_name': 'Concatenate', 'config': {'name': 'concatenate_1', 'trainable': True, 'axis': -1}, 'inbound_nodes': [[['layer_a', 2, 0, {}], ['layer_a', 0, 0, {}]]]}, {'name': 'layer_b', 'class_name': 'Dense', 'config': {'name': 'layer_b', 'trainable': True, 'units': 2, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['concatenate_1', 0, 0, {}]]]}], 'input_layers': [['input_1', 0, 0]], 'output_layers': [['layer_b', 0, 0]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "process_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unprocessed_nodes.pop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "process_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7f8d4bcf9500>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer._inbound_nodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls": {
                                    "variable_value": "<class 'keras.engine.training.Model'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            },
                            {
                                "created_layers": {
                                    "variable_value": "{'input_1': <keras.engine.input_layer.InputLayer object at 0x7f8d4bcfba50>, 'layer_a': <keras.layers.core.Dense object at 0x7f8d4bd6f050>, 'reshape_2': <keras.layers.core.Reshape object at 0x7f8d4bd6f110>, 'reshape_1': <keras.layers.core.Reshape object at 0x7f8d4bd6fa50>, 'concatenate_1': <keras.layers.merge.Concatenate object at 0x7f8d4bd6f850>, 'layer_b': <keras.layers.core.Dense object at 0x7f8d4bd6fa10>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "unprocessed_nodes": {
                                    "variable_value": "{<keras.layers.core.Reshape object at 0x7f8d4bd6f110>: [[['layer_a', 1, 0, {}]]], <keras.layers.core.Reshape object at 0x7f8d4bd6fa50>: [[['input_1', 0, 0, {}]]], <keras.layers.merge.Concatenate object at 0x7f8d4bd6f850>: [[['layer_a', 2, 0, {}], ['layer_a', 0, 0, {}]]], <keras.layers.core.Dense object at 0x7f8d4bd6fa10>: [[['concatenate_1', 0, 0, {}]]], <keras.layers.core.Dense object at 0x7f8d4bd6f050>: [[['reshape_1', 0, 0, {}]]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "5"
                                },
                                "layer": {
                                    "variable_value": "<keras.layers.core.Dense object at 0x7f8d4bd6f050>",
                                    "variable_type": "Dense",
                                    "variable_shape": null
                                },
                                "node_data": {
                                    "variable_value": "[['reshape_1', 0, 0, {}]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "input_data": {
                                    "variable_value": "['reshape_1', 0, 0, {}]",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "inbound_layer_name": {
                                    "variable_value": "'reshape_1'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "inbound_node_index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "inbound_tensor_index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "inbound_layer": {
                                    "variable_value": "<keras.layers.core.Reshape object at 0x7f8d4bd6fa50>",
                                    "variable_type": "Reshape",
                                    "variable_shape": null
                                },
                                "inbound_layer._inbound_nodes": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "add_unprocessed_node": {
                                    "variable_value": "<function Network.from_config.<locals>.add_unprocessed_node at 0x7f8d4bc93050>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "inbound_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors.append": {
                                    "variable_value": "<built-in method append of list object at 0x7f8d4bd45820>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "inbound_node.output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_data": {
                                    "variable_value": "{'name': 'layer_a', 'class_name': 'Dense', 'config': {'name': 'layer_a', 'trainable': True, 'units': 12, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['reshape_1', 0, 0, {}]], [['input_1', 0, 0, {}]], [['reshape_2', 0, 0, {}]]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "deserialize_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "custom_objects": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inbound_nodes_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": "{'name': 'model_1', 'layers': [{'name': 'input_1', 'class_name': 'InputLayer', 'config': {'batch_input_shape': (None, 1, 12), 'dtype': 'float32', 'sparse': False, 'name': 'input_1'}, 'inbound_nodes': []}, {'name': 'layer_a', 'class_name': 'Dense', 'config': {'name': 'layer_a', 'trainable': True, 'units': 12, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['reshape_1', 0, 0, {}]], [['input_1', 0, 0, {}]], [['reshape_2', 0, 0, {}]]]}, {'name': 'reshape_2', 'class_name': 'Reshape', 'config': {'name': 'reshape_2', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['layer_a', 1, 0, {}]]]}, {'name': 'reshape_1', 'class_name': 'Reshape', 'config': {'name': 'reshape_1', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['input_1', 0, 0, {}]]]}, {'name': 'concatenate_1', 'class_name': 'Concatenate', 'config': {'name': 'concatenate_1', 'trainable': True, 'axis': -1}, 'inbound_nodes': [[['layer_a', 2, 0, {}], ['layer_a', 0, 0, {}]]]}, {'name': 'layer_b', 'class_name': 'Dense', 'config': {'name': 'layer_b', 'trainable': True, 'units': 2, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['concatenate_1', 0, 0, {}]]]}], 'input_layers': [['input_1', 0, 0]], 'output_layers': [['layer_b', 0, 0]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "process_layer": {
                                    "variable_value": "<function Network.from_config.<locals>.process_layer at 0x7f8d4bc93170>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "unprocessed_nodes.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x7f8d4bcf1370>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "process_node": {
                                    "variable_value": "<function Network.from_config.<locals>.process_node at 0x7f8d4bc930e0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7f8d4bcf9500>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer._inbound_nodes": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "output_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls": {
                                    "variable_value": "<class 'keras.engine.training.Model'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "created_layers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unprocessed_nodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_node_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_tensor_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_layer._inbound_nodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "add_unprocessed_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_node.output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "deserialize_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "custom_objects": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inbound_nodes_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": "{'name': 'model_1', 'layers': [{'name': 'input_1', 'class_name': 'InputLayer', 'config': {'batch_input_shape': (None, 1, 12), 'dtype': 'float32', 'sparse': False, 'name': 'input_1'}, 'inbound_nodes': []}, {'name': 'layer_a', 'class_name': 'Dense', 'config': {'name': 'layer_a', 'trainable': True, 'units': 12, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['reshape_1', 0, 0, {}]], [['input_1', 0, 0, {}]], [['reshape_2', 0, 0, {}]]]}, {'name': 'reshape_2', 'class_name': 'Reshape', 'config': {'name': 'reshape_2', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['layer_a', 1, 0, {}]]]}, {'name': 'reshape_1', 'class_name': 'Reshape', 'config': {'name': 'reshape_1', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['input_1', 0, 0, {}]]]}, {'name': 'concatenate_1', 'class_name': 'Concatenate', 'config': {'name': 'concatenate_1', 'trainable': True, 'axis': -1}, 'inbound_nodes': [[['layer_a', 2, 0, {}], ['layer_a', 0, 0, {}]]]}, {'name': 'layer_b', 'class_name': 'Dense', 'config': {'name': 'layer_b', 'trainable': True, 'units': 2, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['concatenate_1', 0, 0, {}]]]}], 'input_layers': [['input_1', 0, 0]], 'output_layers': [['layer_b', 0, 0]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "process_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unprocessed_nodes.pop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "process_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7f8d4bcf9500>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer._inbound_nodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls": {
                                    "variable_value": "<class 'keras.engine.training.Model'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            },
                            {
                                "created_layers": {
                                    "variable_value": "{'input_1': <keras.engine.input_layer.InputLayer object at 0x7f8d4bcfba50>, 'layer_a': <keras.layers.core.Dense object at 0x7f8d4bd6f050>, 'reshape_2': <keras.layers.core.Reshape object at 0x7f8d4bd6f110>, 'reshape_1': <keras.layers.core.Reshape object at 0x7f8d4bd6fa50>, 'concatenate_1': <keras.layers.merge.Concatenate object at 0x7f8d4bd6f850>, 'layer_b': <keras.layers.core.Dense object at 0x7f8d4bd6fa10>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "unprocessed_nodes": {
                                    "variable_value": "{<keras.layers.core.Reshape object at 0x7f8d4bd6f110>: [[['layer_a', 1, 0, {}]]], <keras.layers.core.Reshape object at 0x7f8d4bd6fa50>: [[['input_1', 0, 0, {}]]], <keras.layers.merge.Concatenate object at 0x7f8d4bd6f850>: [[['layer_a', 2, 0, {}], ['layer_a', 0, 0, {}]]], <keras.layers.core.Dense object at 0x7f8d4bd6fa10>: [[['concatenate_1', 0, 0, {}]]], <keras.layers.core.Dense object at 0x7f8d4bd6f050>: [[['reshape_1', 0, 0, {}]], [['reshape_2', 0, 0, {}]]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "5"
                                },
                                "layer": {
                                    "variable_value": "<keras.layers.core.Dense object at 0x7f8d4bd6f050>",
                                    "variable_type": "Dense",
                                    "variable_shape": null
                                },
                                "node_data": {
                                    "variable_value": "[['reshape_2', 0, 0, {}]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "input_data": {
                                    "variable_value": "['reshape_2', 0, 0, {}]",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "inbound_layer_name": {
                                    "variable_value": "'reshape_2'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "inbound_node_index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "inbound_tensor_index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "inbound_layer": {
                                    "variable_value": "<keras.layers.core.Reshape object at 0x7f8d4bd6f110>",
                                    "variable_type": "Reshape",
                                    "variable_shape": null
                                },
                                "inbound_layer._inbound_nodes": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "add_unprocessed_node": {
                                    "variable_value": "<function Network.from_config.<locals>.add_unprocessed_node at 0x7f8d4bc93050>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "inbound_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors.append": {
                                    "variable_value": "<built-in method append of list object at 0x7f8d4bd53c30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "inbound_node.output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_data": {
                                    "variable_value": "{'name': 'layer_a', 'class_name': 'Dense', 'config': {'name': 'layer_a', 'trainable': True, 'units': 12, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['reshape_1', 0, 0, {}]], [['input_1', 0, 0, {}]], [['reshape_2', 0, 0, {}]]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "deserialize_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "custom_objects": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inbound_nodes_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": "{'name': 'model_1', 'layers': [{'name': 'input_1', 'class_name': 'InputLayer', 'config': {'batch_input_shape': (None, 1, 12), 'dtype': 'float32', 'sparse': False, 'name': 'input_1'}, 'inbound_nodes': []}, {'name': 'layer_a', 'class_name': 'Dense', 'config': {'name': 'layer_a', 'trainable': True, 'units': 12, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['reshape_1', 0, 0, {}]], [['input_1', 0, 0, {}]], [['reshape_2', 0, 0, {}]]]}, {'name': 'reshape_2', 'class_name': 'Reshape', 'config': {'name': 'reshape_2', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['layer_a', 1, 0, {}]]]}, {'name': 'reshape_1', 'class_name': 'Reshape', 'config': {'name': 'reshape_1', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['input_1', 0, 0, {}]]]}, {'name': 'concatenate_1', 'class_name': 'Concatenate', 'config': {'name': 'concatenate_1', 'trainable': True, 'axis': -1}, 'inbound_nodes': [[['layer_a', 2, 0, {}], ['layer_a', 0, 0, {}]]]}, {'name': 'layer_b', 'class_name': 'Dense', 'config': {'name': 'layer_b', 'trainable': True, 'units': 2, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['concatenate_1', 0, 0, {}]]]}], 'input_layers': [['input_1', 0, 0]], 'output_layers': [['layer_b', 0, 0]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "process_layer": {
                                    "variable_value": "<function Network.from_config.<locals>.process_layer at 0x7f8d4bc93170>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "unprocessed_nodes.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x7f8d4bcf1370>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "process_node": {
                                    "variable_value": "<function Network.from_config.<locals>.process_node at 0x7f8d4bc930e0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7f8d4bcf9500>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer._inbound_nodes": {
                                    "variable_value": "[<keras.engine.base_layer.Node object at 0x7f8d4bd41cd0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "output_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls": {
                                    "variable_value": "<class 'keras.engine.training.Model'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "created_layers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unprocessed_nodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_node_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_tensor_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_layer._inbound_nodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "add_unprocessed_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_node.output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "deserialize_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "custom_objects": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inbound_nodes_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": "{'name': 'model_1', 'layers': [{'name': 'input_1', 'class_name': 'InputLayer', 'config': {'batch_input_shape': (None, 1, 12), 'dtype': 'float32', 'sparse': False, 'name': 'input_1'}, 'inbound_nodes': []}, {'name': 'layer_a', 'class_name': 'Dense', 'config': {'name': 'layer_a', 'trainable': True, 'units': 12, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['reshape_1', 0, 0, {}]], [['input_1', 0, 0, {}]], [['reshape_2', 0, 0, {}]]]}, {'name': 'reshape_2', 'class_name': 'Reshape', 'config': {'name': 'reshape_2', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['layer_a', 1, 0, {}]]]}, {'name': 'reshape_1', 'class_name': 'Reshape', 'config': {'name': 'reshape_1', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['input_1', 0, 0, {}]]]}, {'name': 'concatenate_1', 'class_name': 'Concatenate', 'config': {'name': 'concatenate_1', 'trainable': True, 'axis': -1}, 'inbound_nodes': [[['layer_a', 2, 0, {}], ['layer_a', 0, 0, {}]]]}, {'name': 'layer_b', 'class_name': 'Dense', 'config': {'name': 'layer_b', 'trainable': True, 'units': 2, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['concatenate_1', 0, 0, {}]]]}], 'input_layers': [['input_1', 0, 0]], 'output_layers': [['layer_b', 0, 0]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "process_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unprocessed_nodes.pop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "process_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7f8d4bcf9500>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer._inbound_nodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls": {
                                    "variable_value": "<class 'keras.engine.training.Model'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            },
                            {
                                "created_layers": {
                                    "variable_value": "{'input_1': <keras.engine.input_layer.InputLayer object at 0x7f8d4bcfba50>, 'layer_a': <keras.layers.core.Dense object at 0x7f8d4bd6f050>, 'reshape_2': <keras.layers.core.Reshape object at 0x7f8d4bd6f110>, 'reshape_1': <keras.layers.core.Reshape object at 0x7f8d4bd6fa50>, 'concatenate_1': <keras.layers.merge.Concatenate object at 0x7f8d4bd6f850>, 'layer_b': <keras.layers.core.Dense object at 0x7f8d4bd6fa10>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "unprocessed_nodes": {
                                    "variable_value": "{<keras.layers.core.Reshape object at 0x7f8d4bd6fa50>: [[['input_1', 0, 0, {}]]], <keras.layers.merge.Concatenate object at 0x7f8d4bd6f850>: [[['layer_a', 2, 0, {}], ['layer_a', 0, 0, {}]]], <keras.layers.core.Dense object at 0x7f8d4bd6fa10>: [[['concatenate_1', 0, 0, {}]]], <keras.layers.core.Dense object at 0x7f8d4bd6f050>: [[['reshape_1', 0, 0, {}]], [['reshape_2', 0, 0, {}]]], <keras.layers.core.Reshape object at 0x7f8d4bd6f110>: [[['layer_a', 1, 0, {}]]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "5"
                                },
                                "layer": {
                                    "variable_value": "<keras.layers.core.Reshape object at 0x7f8d4bd6f110>",
                                    "variable_type": "Reshape",
                                    "variable_shape": null
                                },
                                "node_data": {
                                    "variable_value": "[['layer_a', 1, 0, {}]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "input_data": {
                                    "variable_value": "['layer_a', 1, 0, {}]",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "inbound_layer_name": {
                                    "variable_value": "'layer_a'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "inbound_node_index": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "inbound_tensor_index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "inbound_layer": {
                                    "variable_value": "<keras.layers.core.Dense object at 0x7f8d4bd6f050>",
                                    "variable_type": "Dense",
                                    "variable_shape": null
                                },
                                "inbound_layer._inbound_nodes": {
                                    "variable_value": "[<keras.engine.base_layer.Node object at 0x7f8d4bd41cd0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "add_unprocessed_node": {
                                    "variable_value": "<function Network.from_config.<locals>.add_unprocessed_node at 0x7f8d4bc93050>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "inbound_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors.append": {
                                    "variable_value": "<built-in method append of list object at 0x7f8d4bc887d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "inbound_node.output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_data": {
                                    "variable_value": "{'name': 'reshape_2', 'class_name': 'Reshape', 'config': {'name': 'reshape_2', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['layer_a', 1, 0, {}]]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "deserialize_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "custom_objects": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inbound_nodes_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": "{'name': 'model_1', 'layers': [{'name': 'input_1', 'class_name': 'InputLayer', 'config': {'batch_input_shape': (None, 1, 12), 'dtype': 'float32', 'sparse': False, 'name': 'input_1'}, 'inbound_nodes': []}, {'name': 'layer_a', 'class_name': 'Dense', 'config': {'name': 'layer_a', 'trainable': True, 'units': 12, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['reshape_1', 0, 0, {}]], [['input_1', 0, 0, {}]], [['reshape_2', 0, 0, {}]]]}, {'name': 'reshape_2', 'class_name': 'Reshape', 'config': {'name': 'reshape_2', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['layer_a', 1, 0, {}]]]}, {'name': 'reshape_1', 'class_name': 'Reshape', 'config': {'name': 'reshape_1', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['input_1', 0, 0, {}]]]}, {'name': 'concatenate_1', 'class_name': 'Concatenate', 'config': {'name': 'concatenate_1', 'trainable': True, 'axis': -1}, 'inbound_nodes': [[['layer_a', 2, 0, {}], ['layer_a', 0, 0, {}]]]}, {'name': 'layer_b', 'class_name': 'Dense', 'config': {'name': 'layer_b', 'trainable': True, 'units': 2, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['concatenate_1', 0, 0, {}]]]}], 'input_layers': [['input_1', 0, 0]], 'output_layers': [['layer_b', 0, 0]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "process_layer": {
                                    "variable_value": "<function Network.from_config.<locals>.process_layer at 0x7f8d4bc93170>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "unprocessed_nodes.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x7f8d4bcf1370>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "process_node": {
                                    "variable_value": "<function Network.from_config.<locals>.process_node at 0x7f8d4bc930e0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7f8d4bcf9500>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer._inbound_nodes": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "output_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls": {
                                    "variable_value": "<class 'keras.engine.training.Model'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "created_layers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unprocessed_nodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_node_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_tensor_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_layer._inbound_nodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "add_unprocessed_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_node.output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "deserialize_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "custom_objects": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inbound_nodes_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": "{'name': 'model_1', 'layers': [{'name': 'input_1', 'class_name': 'InputLayer', 'config': {'batch_input_shape': (None, 1, 12), 'dtype': 'float32', 'sparse': False, 'name': 'input_1'}, 'inbound_nodes': []}, {'name': 'layer_a', 'class_name': 'Dense', 'config': {'name': 'layer_a', 'trainable': True, 'units': 12, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['reshape_1', 0, 0, {}]], [['input_1', 0, 0, {}]], [['reshape_2', 0, 0, {}]]]}, {'name': 'reshape_2', 'class_name': 'Reshape', 'config': {'name': 'reshape_2', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['layer_a', 1, 0, {}]]]}, {'name': 'reshape_1', 'class_name': 'Reshape', 'config': {'name': 'reshape_1', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['input_1', 0, 0, {}]]]}, {'name': 'concatenate_1', 'class_name': 'Concatenate', 'config': {'name': 'concatenate_1', 'trainable': True, 'axis': -1}, 'inbound_nodes': [[['layer_a', 2, 0, {}], ['layer_a', 0, 0, {}]]]}, {'name': 'layer_b', 'class_name': 'Dense', 'config': {'name': 'layer_b', 'trainable': True, 'units': 2, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['concatenate_1', 0, 0, {}]]]}], 'input_layers': [['input_1', 0, 0]], 'output_layers': [['layer_b', 0, 0]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "process_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unprocessed_nodes.pop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "process_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7f8d4bcf9500>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer._inbound_nodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls": {
                                    "variable_value": "<class 'keras.engine.training.Model'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            },
                            {
                                "created_layers": {
                                    "variable_value": "{'input_1': <keras.engine.input_layer.InputLayer object at 0x7f8d4bcfba50>, 'layer_a': <keras.layers.core.Dense object at 0x7f8d4bd6f050>, 'reshape_2': <keras.layers.core.Reshape object at 0x7f8d4bd6f110>, 'reshape_1': <keras.layers.core.Reshape object at 0x7f8d4bd6fa50>, 'concatenate_1': <keras.layers.merge.Concatenate object at 0x7f8d4bd6f850>, 'layer_b': <keras.layers.core.Dense object at 0x7f8d4bd6fa10>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "unprocessed_nodes": {
                                    "variable_value": "{<keras.layers.core.Dense object at 0x7f8d4bd6fa10>: [[['concatenate_1', 0, 0, {}]]], <keras.layers.core.Dense object at 0x7f8d4bd6f050>: [[['reshape_1', 0, 0, {}]], [['reshape_2', 0, 0, {}]]], <keras.layers.core.Reshape object at 0x7f8d4bd6f110>: [[['layer_a', 1, 0, {}]]], <keras.layers.merge.Concatenate object at 0x7f8d4bd6f850>: [[['layer_a', 2, 0, {}], ['layer_a', 0, 0, {}]]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "layer": {
                                    "variable_value": "<keras.layers.merge.Concatenate object at 0x7f8d4bd6f850>",
                                    "variable_type": "Concatenate",
                                    "variable_shape": null
                                },
                                "node_data": {
                                    "variable_value": "[['layer_a', 2, 0, {}], ['layer_a', 0, 0, {}]]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "input_data": {
                                    "variable_value": "['layer_a', 2, 0, {}]",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "inbound_layer_name": {
                                    "variable_value": "'layer_a'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "inbound_node_index": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "inbound_tensor_index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "inbound_layer": {
                                    "variable_value": "<keras.layers.core.Dense object at 0x7f8d4bd6f050>",
                                    "variable_type": "Dense",
                                    "variable_shape": null
                                },
                                "inbound_layer._inbound_nodes": {
                                    "variable_value": "[<keras.engine.base_layer.Node object at 0x7f8d4bd41cd0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "add_unprocessed_node": {
                                    "variable_value": "<function Network.from_config.<locals>.add_unprocessed_node at 0x7f8d4bc93050>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "inbound_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors.append": {
                                    "variable_value": "<built-in method append of list object at 0x7f8d4bd4c140>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "inbound_node.output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_data": {
                                    "variable_value": "{'name': 'concatenate_1', 'class_name': 'Concatenate', 'config': {'name': 'concatenate_1', 'trainable': True, 'axis': -1}, 'inbound_nodes': [[['layer_a', 2, 0, {}], ['layer_a', 0, 0, {}]]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "deserialize_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "custom_objects": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inbound_nodes_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": "{'name': 'model_1', 'layers': [{'name': 'input_1', 'class_name': 'InputLayer', 'config': {'batch_input_shape': (None, 1, 12), 'dtype': 'float32', 'sparse': False, 'name': 'input_1'}, 'inbound_nodes': []}, {'name': 'layer_a', 'class_name': 'Dense', 'config': {'name': 'layer_a', 'trainable': True, 'units': 12, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['reshape_1', 0, 0, {}]], [['input_1', 0, 0, {}]], [['reshape_2', 0, 0, {}]]]}, {'name': 'reshape_2', 'class_name': 'Reshape', 'config': {'name': 'reshape_2', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['layer_a', 1, 0, {}]]]}, {'name': 'reshape_1', 'class_name': 'Reshape', 'config': {'name': 'reshape_1', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['input_1', 0, 0, {}]]]}, {'name': 'concatenate_1', 'class_name': 'Concatenate', 'config': {'name': 'concatenate_1', 'trainable': True, 'axis': -1}, 'inbound_nodes': [[['layer_a', 2, 0, {}], ['layer_a', 0, 0, {}]]]}, {'name': 'layer_b', 'class_name': 'Dense', 'config': {'name': 'layer_b', 'trainable': True, 'units': 2, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['concatenate_1', 0, 0, {}]]]}], 'input_layers': [['input_1', 0, 0]], 'output_layers': [['layer_b', 0, 0]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "process_layer": {
                                    "variable_value": "<function Network.from_config.<locals>.process_layer at 0x7f8d4bc93170>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "unprocessed_nodes.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x7f8d4bcf1370>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "process_node": {
                                    "variable_value": "<function Network.from_config.<locals>.process_node at 0x7f8d4bc930e0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7f8d4bcf9500>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer._inbound_nodes": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "output_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls": {
                                    "variable_value": "<class 'keras.engine.training.Model'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "created_layers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unprocessed_nodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_node_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_tensor_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_layer._inbound_nodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "add_unprocessed_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_node.output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "deserialize_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "custom_objects": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inbound_nodes_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": "{'name': 'model_1', 'layers': [{'name': 'input_1', 'class_name': 'InputLayer', 'config': {'batch_input_shape': (None, 1, 12), 'dtype': 'float32', 'sparse': False, 'name': 'input_1'}, 'inbound_nodes': []}, {'name': 'layer_a', 'class_name': 'Dense', 'config': {'name': 'layer_a', 'trainable': True, 'units': 12, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['reshape_1', 0, 0, {}]], [['input_1', 0, 0, {}]], [['reshape_2', 0, 0, {}]]]}, {'name': 'reshape_2', 'class_name': 'Reshape', 'config': {'name': 'reshape_2', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['layer_a', 1, 0, {}]]]}, {'name': 'reshape_1', 'class_name': 'Reshape', 'config': {'name': 'reshape_1', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['input_1', 0, 0, {}]]]}, {'name': 'concatenate_1', 'class_name': 'Concatenate', 'config': {'name': 'concatenate_1', 'trainable': True, 'axis': -1}, 'inbound_nodes': [[['layer_a', 2, 0, {}], ['layer_a', 0, 0, {}]]]}, {'name': 'layer_b', 'class_name': 'Dense', 'config': {'name': 'layer_b', 'trainable': True, 'units': 2, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['concatenate_1', 0, 0, {}]]]}], 'input_layers': [['input_1', 0, 0]], 'output_layers': [['layer_b', 0, 0]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "process_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unprocessed_nodes.pop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "process_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7f8d4bcf9500>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer._inbound_nodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls": {
                                    "variable_value": "<class 'keras.engine.training.Model'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            },
                            {
                                "created_layers": {
                                    "variable_value": "{'input_1': <keras.engine.input_layer.InputLayer object at 0x7f8d4bcfba50>, 'layer_a': <keras.layers.core.Dense object at 0x7f8d4bd6f050>, 'reshape_2': <keras.layers.core.Reshape object at 0x7f8d4bd6f110>, 'reshape_1': <keras.layers.core.Reshape object at 0x7f8d4bd6fa50>, 'concatenate_1': <keras.layers.merge.Concatenate object at 0x7f8d4bd6f850>, 'layer_b': <keras.layers.core.Dense object at 0x7f8d4bd6fa10>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "unprocessed_nodes": {
                                    "variable_value": "{<keras.layers.core.Dense object at 0x7f8d4bd6f050>: [[['reshape_1', 0, 0, {}]], [['reshape_2', 0, 0, {}]]], <keras.layers.core.Reshape object at 0x7f8d4bd6f110>: [[['layer_a', 1, 0, {}]]], <keras.layers.merge.Concatenate object at 0x7f8d4bd6f850>: [[['layer_a', 2, 0, {}], ['layer_a', 0, 0, {}]]], <keras.layers.core.Dense object at 0x7f8d4bd6fa10>: [[['concatenate_1', 0, 0, {}]]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "layer": {
                                    "variable_value": "<keras.layers.core.Dense object at 0x7f8d4bd6fa10>",
                                    "variable_type": "Dense",
                                    "variable_shape": null
                                },
                                "node_data": {
                                    "variable_value": "[['concatenate_1', 0, 0, {}]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "input_data": {
                                    "variable_value": "['concatenate_1', 0, 0, {}]",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "inbound_layer_name": {
                                    "variable_value": "'concatenate_1'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "inbound_node_index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "inbound_tensor_index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "inbound_layer": {
                                    "variable_value": "<keras.layers.merge.Concatenate object at 0x7f8d4bd6f850>",
                                    "variable_type": "Concatenate",
                                    "variable_shape": null
                                },
                                "inbound_layer._inbound_nodes": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "add_unprocessed_node": {
                                    "variable_value": "<function Network.from_config.<locals>.add_unprocessed_node at 0x7f8d4bc93050>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "inbound_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors.append": {
                                    "variable_value": "<built-in method append of list object at 0x7f8d4bd57230>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "inbound_node.output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_data": {
                                    "variable_value": "{'name': 'layer_b', 'class_name': 'Dense', 'config': {'name': 'layer_b', 'trainable': True, 'units': 2, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['concatenate_1', 0, 0, {}]]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "deserialize_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "custom_objects": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inbound_nodes_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": "{'name': 'model_1', 'layers': [{'name': 'input_1', 'class_name': 'InputLayer', 'config': {'batch_input_shape': (None, 1, 12), 'dtype': 'float32', 'sparse': False, 'name': 'input_1'}, 'inbound_nodes': []}, {'name': 'layer_a', 'class_name': 'Dense', 'config': {'name': 'layer_a', 'trainable': True, 'units': 12, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['reshape_1', 0, 0, {}]], [['input_1', 0, 0, {}]], [['reshape_2', 0, 0, {}]]]}, {'name': 'reshape_2', 'class_name': 'Reshape', 'config': {'name': 'reshape_2', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['layer_a', 1, 0, {}]]]}, {'name': 'reshape_1', 'class_name': 'Reshape', 'config': {'name': 'reshape_1', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['input_1', 0, 0, {}]]]}, {'name': 'concatenate_1', 'class_name': 'Concatenate', 'config': {'name': 'concatenate_1', 'trainable': True, 'axis': -1}, 'inbound_nodes': [[['layer_a', 2, 0, {}], ['layer_a', 0, 0, {}]]]}, {'name': 'layer_b', 'class_name': 'Dense', 'config': {'name': 'layer_b', 'trainable': True, 'units': 2, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['concatenate_1', 0, 0, {}]]]}], 'input_layers': [['input_1', 0, 0]], 'output_layers': [['layer_b', 0, 0]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "process_layer": {
                                    "variable_value": "<function Network.from_config.<locals>.process_layer at 0x7f8d4bc93170>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "unprocessed_nodes.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x7f8d4bcf1370>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "process_node": {
                                    "variable_value": "<function Network.from_config.<locals>.process_node at 0x7f8d4bc930e0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7f8d4bcf9500>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer._inbound_nodes": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "output_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls": {
                                    "variable_value": "<class 'keras.engine.training.Model'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "created_layers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unprocessed_nodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_node_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_tensor_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_layer._inbound_nodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "add_unprocessed_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_node.output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "deserialize_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "custom_objects": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inbound_nodes_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": "{'name': 'model_1', 'layers': [{'name': 'input_1', 'class_name': 'InputLayer', 'config': {'batch_input_shape': (None, 1, 12), 'dtype': 'float32', 'sparse': False, 'name': 'input_1'}, 'inbound_nodes': []}, {'name': 'layer_a', 'class_name': 'Dense', 'config': {'name': 'layer_a', 'trainable': True, 'units': 12, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['reshape_1', 0, 0, {}]], [['input_1', 0, 0, {}]], [['reshape_2', 0, 0, {}]]]}, {'name': 'reshape_2', 'class_name': 'Reshape', 'config': {'name': 'reshape_2', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['layer_a', 1, 0, {}]]]}, {'name': 'reshape_1', 'class_name': 'Reshape', 'config': {'name': 'reshape_1', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['input_1', 0, 0, {}]]]}, {'name': 'concatenate_1', 'class_name': 'Concatenate', 'config': {'name': 'concatenate_1', 'trainable': True, 'axis': -1}, 'inbound_nodes': [[['layer_a', 2, 0, {}], ['layer_a', 0, 0, {}]]]}, {'name': 'layer_b', 'class_name': 'Dense', 'config': {'name': 'layer_b', 'trainable': True, 'units': 2, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['concatenate_1', 0, 0, {}]]]}], 'input_layers': [['input_1', 0, 0]], 'output_layers': [['layer_b', 0, 0]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "process_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unprocessed_nodes.pop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "process_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7f8d4bcf9500>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer._inbound_nodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls": {
                                    "variable_value": "<class 'keras.engine.training.Model'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            },
                            {
                                "created_layers": {
                                    "variable_value": "{'input_1': <keras.engine.input_layer.InputLayer object at 0x7f8d4bcfba50>, 'layer_a': <keras.layers.core.Dense object at 0x7f8d4bd6f050>, 'reshape_2': <keras.layers.core.Reshape object at 0x7f8d4bd6f110>, 'reshape_1': <keras.layers.core.Reshape object at 0x7f8d4bd6fa50>, 'concatenate_1': <keras.layers.merge.Concatenate object at 0x7f8d4bd6f850>, 'layer_b': <keras.layers.core.Dense object at 0x7f8d4bd6fa10>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "unprocessed_nodes": {
                                    "variable_value": "{<keras.layers.core.Reshape object at 0x7f8d4bd6f110>: [[['layer_a', 1, 0, {}]]], <keras.layers.merge.Concatenate object at 0x7f8d4bd6f850>: [[['layer_a', 2, 0, {}], ['layer_a', 0, 0, {}]]], <keras.layers.core.Dense object at 0x7f8d4bd6fa10>: [[['concatenate_1', 0, 0, {}]]], <keras.layers.core.Dense object at 0x7f8d4bd6f050>: [[['reshape_2', 0, 0, {}]]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "layer": {
                                    "variable_value": "<keras.layers.core.Dense object at 0x7f8d4bd6f050>",
                                    "variable_type": "Dense",
                                    "variable_shape": null
                                },
                                "node_data": {
                                    "variable_value": "[['reshape_2', 0, 0, {}]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "input_data": {
                                    "variable_value": "['reshape_2', 0, 0, {}]",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "inbound_layer_name": {
                                    "variable_value": "'reshape_2'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "inbound_node_index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "inbound_tensor_index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "inbound_layer": {
                                    "variable_value": "<keras.layers.core.Reshape object at 0x7f8d4bd6f110>",
                                    "variable_type": "Reshape",
                                    "variable_shape": null
                                },
                                "inbound_layer._inbound_nodes": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "add_unprocessed_node": {
                                    "variable_value": "<function Network.from_config.<locals>.add_unprocessed_node at 0x7f8d4bc93050>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "inbound_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors.append": {
                                    "variable_value": "<built-in method append of list object at 0x7f8d4bd4ccd0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "inbound_node.output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_data": {
                                    "variable_value": "{'name': 'layer_a', 'class_name': 'Dense', 'config': {'name': 'layer_a', 'trainable': True, 'units': 12, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['reshape_1', 0, 0, {}]], [['input_1', 0, 0, {}]], [['reshape_2', 0, 0, {}]]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "deserialize_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "custom_objects": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inbound_nodes_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": "{'name': 'model_1', 'layers': [{'name': 'input_1', 'class_name': 'InputLayer', 'config': {'batch_input_shape': (None, 1, 12), 'dtype': 'float32', 'sparse': False, 'name': 'input_1'}, 'inbound_nodes': []}, {'name': 'layer_a', 'class_name': 'Dense', 'config': {'name': 'layer_a', 'trainable': True, 'units': 12, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['reshape_1', 0, 0, {}]], [['input_1', 0, 0, {}]], [['reshape_2', 0, 0, {}]]]}, {'name': 'reshape_2', 'class_name': 'Reshape', 'config': {'name': 'reshape_2', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['layer_a', 1, 0, {}]]]}, {'name': 'reshape_1', 'class_name': 'Reshape', 'config': {'name': 'reshape_1', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['input_1', 0, 0, {}]]]}, {'name': 'concatenate_1', 'class_name': 'Concatenate', 'config': {'name': 'concatenate_1', 'trainable': True, 'axis': -1}, 'inbound_nodes': [[['layer_a', 2, 0, {}], ['layer_a', 0, 0, {}]]]}, {'name': 'layer_b', 'class_name': 'Dense', 'config': {'name': 'layer_b', 'trainable': True, 'units': 2, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['concatenate_1', 0, 0, {}]]]}], 'input_layers': [['input_1', 0, 0]], 'output_layers': [['layer_b', 0, 0]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "process_layer": {
                                    "variable_value": "<function Network.from_config.<locals>.process_layer at 0x7f8d4bc93170>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "unprocessed_nodes.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x7f8d4bcf1370>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "process_node": {
                                    "variable_value": "<function Network.from_config.<locals>.process_node at 0x7f8d4bc930e0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7f8d4bcf9500>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer._inbound_nodes": {
                                    "variable_value": "[<keras.engine.base_layer.Node object at 0x7f8d4bd41cd0>, <keras.engine.base_layer.Node object at 0x7f8d4bc9a450>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "output_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls": {
                                    "variable_value": "<class 'keras.engine.training.Model'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "created_layers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unprocessed_nodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_node_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_tensor_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_layer._inbound_nodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "add_unprocessed_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_node.output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "deserialize_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "custom_objects": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inbound_nodes_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": "{'name': 'model_1', 'layers': [{'name': 'input_1', 'class_name': 'InputLayer', 'config': {'batch_input_shape': (None, 1, 12), 'dtype': 'float32', 'sparse': False, 'name': 'input_1'}, 'inbound_nodes': []}, {'name': 'layer_a', 'class_name': 'Dense', 'config': {'name': 'layer_a', 'trainable': True, 'units': 12, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['reshape_1', 0, 0, {}]], [['input_1', 0, 0, {}]], [['reshape_2', 0, 0, {}]]]}, {'name': 'reshape_2', 'class_name': 'Reshape', 'config': {'name': 'reshape_2', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['layer_a', 1, 0, {}]]]}, {'name': 'reshape_1', 'class_name': 'Reshape', 'config': {'name': 'reshape_1', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['input_1', 0, 0, {}]]]}, {'name': 'concatenate_1', 'class_name': 'Concatenate', 'config': {'name': 'concatenate_1', 'trainable': True, 'axis': -1}, 'inbound_nodes': [[['layer_a', 2, 0, {}], ['layer_a', 0, 0, {}]]]}, {'name': 'layer_b', 'class_name': 'Dense', 'config': {'name': 'layer_b', 'trainable': True, 'units': 2, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['concatenate_1', 0, 0, {}]]]}], 'input_layers': [['input_1', 0, 0]], 'output_layers': [['layer_b', 0, 0]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "process_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unprocessed_nodes.pop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "process_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7f8d4bcf9500>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer._inbound_nodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls": {
                                    "variable_value": "<class 'keras.engine.training.Model'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            },
                            {
                                "created_layers": {
                                    "variable_value": "{'input_1': <keras.engine.input_layer.InputLayer object at 0x7f8d4bcfba50>, 'layer_a': <keras.layers.core.Dense object at 0x7f8d4bd6f050>, 'reshape_2': <keras.layers.core.Reshape object at 0x7f8d4bd6f110>, 'reshape_1': <keras.layers.core.Reshape object at 0x7f8d4bd6fa50>, 'concatenate_1': <keras.layers.merge.Concatenate object at 0x7f8d4bd6f850>, 'layer_b': <keras.layers.core.Dense object at 0x7f8d4bd6fa10>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "unprocessed_nodes": {
                                    "variable_value": "{<keras.layers.core.Dense object at 0x7f8d4bd6fa10>: [[['concatenate_1', 0, 0, {}]]], <keras.layers.core.Dense object at 0x7f8d4bd6f050>: [[['reshape_2', 0, 0, {}]]], <keras.layers.merge.Concatenate object at 0x7f8d4bd6f850>: [[['layer_a', 2, 0, {}], ['layer_a', 0, 0, {}]]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "layer": {
                                    "variable_value": "<keras.layers.merge.Concatenate object at 0x7f8d4bd6f850>",
                                    "variable_type": "Concatenate",
                                    "variable_shape": null
                                },
                                "node_data": {
                                    "variable_value": "[['layer_a', 2, 0, {}], ['layer_a', 0, 0, {}]]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "input_data": {
                                    "variable_value": "['layer_a', 2, 0, {}]",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "inbound_layer_name": {
                                    "variable_value": "'layer_a'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "inbound_node_index": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "inbound_tensor_index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "inbound_layer": {
                                    "variable_value": "<keras.layers.core.Dense object at 0x7f8d4bd6f050>",
                                    "variable_type": "Dense",
                                    "variable_shape": null
                                },
                                "inbound_layer._inbound_nodes": {
                                    "variable_value": "[<keras.engine.base_layer.Node object at 0x7f8d4bd41cd0>, <keras.engine.base_layer.Node object at 0x7f8d4bc9a450>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "add_unprocessed_node": {
                                    "variable_value": "<function Network.from_config.<locals>.add_unprocessed_node at 0x7f8d4bc93050>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "inbound_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors.append": {
                                    "variable_value": "<built-in method append of list object at 0x7f8d4bd5d640>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "inbound_node.output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_data": {
                                    "variable_value": "{'name': 'concatenate_1', 'class_name': 'Concatenate', 'config': {'name': 'concatenate_1', 'trainable': True, 'axis': -1}, 'inbound_nodes': [[['layer_a', 2, 0, {}], ['layer_a', 0, 0, {}]]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "deserialize_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "custom_objects": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inbound_nodes_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": "{'name': 'model_1', 'layers': [{'name': 'input_1', 'class_name': 'InputLayer', 'config': {'batch_input_shape': (None, 1, 12), 'dtype': 'float32', 'sparse': False, 'name': 'input_1'}, 'inbound_nodes': []}, {'name': 'layer_a', 'class_name': 'Dense', 'config': {'name': 'layer_a', 'trainable': True, 'units': 12, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['reshape_1', 0, 0, {}]], [['input_1', 0, 0, {}]], [['reshape_2', 0, 0, {}]]]}, {'name': 'reshape_2', 'class_name': 'Reshape', 'config': {'name': 'reshape_2', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['layer_a', 1, 0, {}]]]}, {'name': 'reshape_1', 'class_name': 'Reshape', 'config': {'name': 'reshape_1', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['input_1', 0, 0, {}]]]}, {'name': 'concatenate_1', 'class_name': 'Concatenate', 'config': {'name': 'concatenate_1', 'trainable': True, 'axis': -1}, 'inbound_nodes': [[['layer_a', 2, 0, {}], ['layer_a', 0, 0, {}]]]}, {'name': 'layer_b', 'class_name': 'Dense', 'config': {'name': 'layer_b', 'trainable': True, 'units': 2, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['concatenate_1', 0, 0, {}]]]}], 'input_layers': [['input_1', 0, 0]], 'output_layers': [['layer_b', 0, 0]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "process_layer": {
                                    "variable_value": "<function Network.from_config.<locals>.process_layer at 0x7f8d4bc93170>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "unprocessed_nodes.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x7f8d4bcf1370>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "process_node": {
                                    "variable_value": "<function Network.from_config.<locals>.process_node at 0x7f8d4bc930e0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7f8d4bcf9500>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer._inbound_nodes": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "output_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls": {
                                    "variable_value": "<class 'keras.engine.training.Model'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "created_layers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unprocessed_nodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_node_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_tensor_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_layer._inbound_nodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "add_unprocessed_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_node.output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "deserialize_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "custom_objects": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inbound_nodes_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": "{'name': 'model_1', 'layers': [{'name': 'input_1', 'class_name': 'InputLayer', 'config': {'batch_input_shape': (None, 1, 12), 'dtype': 'float32', 'sparse': False, 'name': 'input_1'}, 'inbound_nodes': []}, {'name': 'layer_a', 'class_name': 'Dense', 'config': {'name': 'layer_a', 'trainable': True, 'units': 12, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['reshape_1', 0, 0, {}]], [['input_1', 0, 0, {}]], [['reshape_2', 0, 0, {}]]]}, {'name': 'reshape_2', 'class_name': 'Reshape', 'config': {'name': 'reshape_2', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['layer_a', 1, 0, {}]]]}, {'name': 'reshape_1', 'class_name': 'Reshape', 'config': {'name': 'reshape_1', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['input_1', 0, 0, {}]]]}, {'name': 'concatenate_1', 'class_name': 'Concatenate', 'config': {'name': 'concatenate_1', 'trainable': True, 'axis': -1}, 'inbound_nodes': [[['layer_a', 2, 0, {}], ['layer_a', 0, 0, {}]]]}, {'name': 'layer_b', 'class_name': 'Dense', 'config': {'name': 'layer_b', 'trainable': True, 'units': 2, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['concatenate_1', 0, 0, {}]]]}], 'input_layers': [['input_1', 0, 0]], 'output_layers': [['layer_b', 0, 0]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "process_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unprocessed_nodes.pop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "process_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7f8d4bcf9500>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer._inbound_nodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls": {
                                    "variable_value": "<class 'keras.engine.training.Model'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            },
                            {
                                "created_layers": {
                                    "variable_value": "{'input_1': <keras.engine.input_layer.InputLayer object at 0x7f8d4bcfba50>, 'layer_a': <keras.layers.core.Dense object at 0x7f8d4bd6f050>, 'reshape_2': <keras.layers.core.Reshape object at 0x7f8d4bd6f110>, 'reshape_1': <keras.layers.core.Reshape object at 0x7f8d4bd6fa50>, 'concatenate_1': <keras.layers.merge.Concatenate object at 0x7f8d4bd6f850>, 'layer_b': <keras.layers.core.Dense object at 0x7f8d4bd6fa10>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "unprocessed_nodes": {
                                    "variable_value": "{<keras.layers.core.Dense object at 0x7f8d4bd6f050>: [[['reshape_2', 0, 0, {}]]], <keras.layers.merge.Concatenate object at 0x7f8d4bd6f850>: [[['layer_a', 2, 0, {}], ['layer_a', 0, 0, {}]]], <keras.layers.core.Dense object at 0x7f8d4bd6fa10>: [[['concatenate_1', 0, 0, {}]]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "layer": {
                                    "variable_value": "<keras.layers.core.Dense object at 0x7f8d4bd6fa10>",
                                    "variable_type": "Dense",
                                    "variable_shape": null
                                },
                                "node_data": {
                                    "variable_value": "[['concatenate_1', 0, 0, {}]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "input_data": {
                                    "variable_value": "['concatenate_1', 0, 0, {}]",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "inbound_layer_name": {
                                    "variable_value": "'concatenate_1'",
                                    "variable_type": "str",
                                    "variable_shape": "13"
                                },
                                "inbound_node_index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "inbound_tensor_index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "inbound_layer": {
                                    "variable_value": "<keras.layers.merge.Concatenate object at 0x7f8d4bd6f850>",
                                    "variable_type": "Concatenate",
                                    "variable_shape": null
                                },
                                "inbound_layer._inbound_nodes": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "add_unprocessed_node": {
                                    "variable_value": "<function Network.from_config.<locals>.add_unprocessed_node at 0x7f8d4bc93050>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "inbound_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors.append": {
                                    "variable_value": "<built-in method append of list object at 0x7f8d4bd45b90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "inbound_node.output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_data": {
                                    "variable_value": "{'name': 'layer_b', 'class_name': 'Dense', 'config': {'name': 'layer_b', 'trainable': True, 'units': 2, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['concatenate_1', 0, 0, {}]]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "deserialize_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "custom_objects": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inbound_nodes_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": "{'name': 'model_1', 'layers': [{'name': 'input_1', 'class_name': 'InputLayer', 'config': {'batch_input_shape': (None, 1, 12), 'dtype': 'float32', 'sparse': False, 'name': 'input_1'}, 'inbound_nodes': []}, {'name': 'layer_a', 'class_name': 'Dense', 'config': {'name': 'layer_a', 'trainable': True, 'units': 12, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['reshape_1', 0, 0, {}]], [['input_1', 0, 0, {}]], [['reshape_2', 0, 0, {}]]]}, {'name': 'reshape_2', 'class_name': 'Reshape', 'config': {'name': 'reshape_2', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['layer_a', 1, 0, {}]]]}, {'name': 'reshape_1', 'class_name': 'Reshape', 'config': {'name': 'reshape_1', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['input_1', 0, 0, {}]]]}, {'name': 'concatenate_1', 'class_name': 'Concatenate', 'config': {'name': 'concatenate_1', 'trainable': True, 'axis': -1}, 'inbound_nodes': [[['layer_a', 2, 0, {}], ['layer_a', 0, 0, {}]]]}, {'name': 'layer_b', 'class_name': 'Dense', 'config': {'name': 'layer_b', 'trainable': True, 'units': 2, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['concatenate_1', 0, 0, {}]]]}], 'input_layers': [['input_1', 0, 0]], 'output_layers': [['layer_b', 0, 0]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "process_layer": {
                                    "variable_value": "<function Network.from_config.<locals>.process_layer at 0x7f8d4bc93170>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "unprocessed_nodes.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x7f8d4bcf1370>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "process_node": {
                                    "variable_value": "<function Network.from_config.<locals>.process_node at 0x7f8d4bc930e0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7f8d4bcf9500>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer._inbound_nodes": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "output_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls": {
                                    "variable_value": "<class 'keras.engine.training.Model'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "created_layers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unprocessed_nodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_node_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_tensor_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_layer._inbound_nodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_node.output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "deserialize_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "custom_objects": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inbound_nodes_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "add_unprocessed_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": "{'name': 'model_1', 'layers': [{'name': 'input_1', 'class_name': 'InputLayer', 'config': {'batch_input_shape': (None, 1, 12), 'dtype': 'float32', 'sparse': False, 'name': 'input_1'}, 'inbound_nodes': []}, {'name': 'layer_a', 'class_name': 'Dense', 'config': {'name': 'layer_a', 'trainable': True, 'units': 12, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['reshape_1', 0, 0, {}]], [['input_1', 0, 0, {}]], [['reshape_2', 0, 0, {}]]]}, {'name': 'reshape_2', 'class_name': 'Reshape', 'config': {'name': 'reshape_2', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['layer_a', 1, 0, {}]]]}, {'name': 'reshape_1', 'class_name': 'Reshape', 'config': {'name': 'reshape_1', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['input_1', 0, 0, {}]]]}, {'name': 'concatenate_1', 'class_name': 'Concatenate', 'config': {'name': 'concatenate_1', 'trainable': True, 'axis': -1}, 'inbound_nodes': [[['layer_a', 2, 0, {}], ['layer_a', 0, 0, {}]]]}, {'name': 'layer_b', 'class_name': 'Dense', 'config': {'name': 'layer_b', 'trainable': True, 'units': 2, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['concatenate_1', 0, 0, {}]]]}], 'input_layers': [['input_1', 0, 0]], 'output_layers': [['layer_b', 0, 0]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "process_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node_data_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "node_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "process_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7f6b37141d70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer._inbound_nodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls": {
                                    "variable_value": "<class 'keras.engine.training.Model'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            },
                            {
                                "created_layers": {
                                    "variable_value": "{'input_1': <keras.engine.input_layer.InputLayer object at 0x7f6b3693fb50>, 'layer_a': <keras.layers.core.Dense object at 0x7f6b3693f5d0>, 'reshape_2': <keras.layers.core.Reshape object at 0x7f6b3693fed0>, 'reshape_1': <keras.layers.core.Reshape object at 0x7f6b3693fe10>, 'concatenate_1': <keras.layers.merge.Concatenate object at 0x7f6b3693fe50>, 'layer_b': <keras.layers.core.Dense object at 0x7f6b3693fdd0>}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "unprocessed_nodes": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer": {
                                    "variable_value": "<keras.layers.core.Dense object at 0x7f6b3693fdd0>",
                                    "variable_type": "Dense",
                                    "variable_shape": null
                                },
                                "node_data": {
                                    "variable_value": "[['concatenate_1', 0, 0, {}]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors": {
                                    "variable_value": "[<tf.Tensor 'input_1_1:0' shape=(?, 1, 12) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "input_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_node_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_tensor_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_layer._inbound_nodes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inbound_node": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "input_tensors.append": {
                                    "variable_value": "<built-in method append of list object at 0x7f6b3714c230>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "inbound_node.output_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer_name": {
                                    "variable_value": "'layer_b'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "layer_data": {
                                    "variable_value": "['layer_b', 0, 0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "deserialize_layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "custom_objects": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inbound_nodes_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "add_unprocessed_node": {
                                    "variable_value": "<function Network.from_config.<locals>.add_unprocessed_node at 0x7f6b37155200>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": "{'name': 'model_1', 'layers': [{'name': 'input_1', 'class_name': 'InputLayer', 'config': {'batch_input_shape': (None, 1, 12), 'dtype': 'float32', 'sparse': False, 'name': 'input_1'}, 'inbound_nodes': []}, {'name': 'layer_a', 'class_name': 'Dense', 'config': {'name': 'layer_a', 'trainable': True, 'units': 12, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['reshape_1', 0, 0, {}]], [['input_1', 0, 0, {}]], [['reshape_2', 0, 0, {}]]]}, {'name': 'reshape_2', 'class_name': 'Reshape', 'config': {'name': 'reshape_2', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['layer_a', 1, 0, {}]]]}, {'name': 'reshape_1', 'class_name': 'Reshape', 'config': {'name': 'reshape_1', 'trainable': True, 'target_shape': (12,)}, 'inbound_nodes': [[['input_1', 0, 0, {}]]]}, {'name': 'concatenate_1', 'class_name': 'Concatenate', 'config': {'name': 'concatenate_1', 'trainable': True, 'axis': -1}, 'inbound_nodes': [[['layer_a', 2, 0, {}], ['layer_a', 0, 0, {}]]]}, {'name': 'layer_b', 'class_name': 'Dense', 'config': {'name': 'layer_b', 'trainable': True, 'units': 2, 'activation': 'linear', 'use_bias': True, 'kernel_initializer': {'class_name': 'VarianceScaling', 'config': {'scale': 1.0, 'mode': 'fan_avg', 'distribution': 'uniform', 'seed': None}}, 'bias_initializer': {'class_name': 'Zeros', 'config': {}}, 'kernel_regularizer': None, 'bias_regularizer': None, 'activity_regularizer': None, 'kernel_constraint': None, 'bias_constraint': None}, 'inbound_nodes': [[['concatenate_1', 0, 0, {}]]]}], 'input_layers': [['input_1', 0, 0]], 'output_layers': [['layer_b', 0, 0]]}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "process_layer": {
                                    "variable_value": "<function Network.from_config.<locals>.process_layer at 0x7f6b37155320>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "node_data_list": {
                                    "variable_value": "[[['concatenate_1', 0, 0, {}]]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "node_index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "process_node": {
                                    "variable_value": "<function Network.from_config.<locals>.process_node at 0x7f6b37155290>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "'model_1'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "config.get": {
                                    "variable_value": "<built-in method get of dict object at 0x7f6b37141d70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "output_tensors": {
                                    "variable_value": "[<tf.Tensor 'layer_b_1/BiasAdd:0' shape=(?, 2) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "tensor_index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "layer_output_tensors": {
                                    "variable_value": "[<tf.Tensor 'layer_b_1/BiasAdd:0' shape=(?, 2) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "layer._inbound_nodes": {
                                    "variable_value": "[<keras.engine.base_layer.Node object at 0x7f6b36924bd0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "output_tensors.append": {
                                    "variable_value": "<built-in method append of list object at 0x7f6b37136d70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "cls": {
                                    "variable_value": "<class 'keras.engine.training.Model'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": {
                "file_scope_functions": [
                    {
                        "code": "def _make_node_key(layer_name, node_index):\n    return layer_name + '_ib-' + str(node_index)",
                        "signature": "_make_node_key(layer_name, node_index)"
                    },
                    {
                        "code": "def _map_graph_network(inputs, outputs):\n    \"\"\"Validates a network's topology and gather its layers and nodes.\n\n    # Arguments\n        inputs: List of input tensors.\n        outputs: List of outputs tensors.\n\n    # Returns\n        A tuple `(nodes, nodes_by_depth, layers, layers_by_depth)`.\n        - nodes: list of Node instances.\n        - nodes_by_depth: dict mapping ints (depth) to lists of node instances.\n        - layers: list of Layer instances.\n        - layers_by_depth: dict mapping ints (depth)\n            to lists of layer instances.\n\n    # Raises\n        ValueError: In case the network is not valid (e.g. disconnected graph).\n    \"\"\"\n    # Network_nodes: set of nodes included in the graph of layers\n    # (not all nodes included in the layers are relevant to the current graph).\n    network_nodes = set()  # ids of all nodes relevant to the Network\n    nodes_depths = {}  # dict {node: depth value}\n    layers_depths = {}  # dict {layer: depth value}\n    layer_indices = {}  # dict {layer: index in traversal}\n    nodes_in_decreasing_depth = []\n\n    def build_map(tensor,\n                  finished_nodes,\n                  nodes_in_progress,\n                  layer,\n                  node_index,\n                  tensor_index):\n        \"\"\"Builds a map of the graph of layers.\n\n        This recursively updates the map `layer_indices`,\n        the list `nodes_in_decreasing_depth` and the set `network_nodes`.\n\n        # Arguments\n            tensor: Some tensor in a graph.\n            finished_nodes: Set of nodes whose subgraphs have been traversed\n                completely. Useful to prevent duplicated work.\n            nodes_in_progress: Set of nodes that are currently active on the\n                recursion stack. Useful to detect cycles.\n            layer: Layer from which `tensor` comes from. If not provided,\n                will be obtained from `tensor._keras_history`.\n            node_index: Node index from which `tensor` comes from.\n            tensor_index: Tensor_index from which `tensor` comes from.\n\n        # Raises\n            ValueError: if a cycle is detected.\n        \"\"\"\n        node = layer._inbound_nodes[node_index]\n\n        # Prevent cycles.\n        if node in nodes_in_progress:\n            raise ValueError('The tensor ' + str(tensor) + ' at layer \"' +\n                             layer.name + '\" is part of a cycle.')\n\n        # Don't repeat work for shared subgraphs\n        if node in finished_nodes:\n            return\n\n        node_key = _make_node_key(layer.name, node_index)\n        # Update network_nodes.\n        network_nodes.add(node_key)\n\n        # Store the traversal order for layer sorting.\n        if layer not in layer_indices:\n            layer_indices[layer] = len(layer_indices)\n\n        nodes_in_progress.add(node)\n\n        # Propagate to all previous tensors connected to this node.\n        for i in range(len(node.inbound_layers)):\n            x = node.input_tensors[i]\n            layer = node.inbound_layers[i]\n            node_index = node.node_indices[i]\n            tensor_index = node.tensor_indices[i]\n            build_map(x, finished_nodes, nodes_in_progress, layer,\n                      node_index, tensor_index)\n\n        finished_nodes.add(node)\n        nodes_in_progress.remove(node)\n        nodes_in_decreasing_depth.append(node)\n\n    finished_nodes = set()\n    nodes_in_progress = set()\n    for x in outputs:\n        layer, node_index, tensor_index = x._keras_history\n        build_map(x, finished_nodes, nodes_in_progress,\n                  layer=layer,\n                  node_index=node_index,\n                  tensor_index=tensor_index)\n\n    for node in reversed(nodes_in_decreasing_depth):\n        # If the depth is not set, the node has no outbound nodes (depth 0).\n        depth = nodes_depths.setdefault(node, 0)\n\n        # Update the depth of the corresponding layer\n        previous_depth = layers_depths.get(node.outbound_layer, 0)\n        # If we've seen this layer before at a higher depth,\n        # we should use that depth instead of the node depth.\n        # This is necessary for shared layers that have inputs at different\n        # depth levels in the graph.\n        depth = max(depth, previous_depth)\n        layers_depths[node.outbound_layer] = depth\n        nodes_depths[node] = depth\n\n        # Update the depth of inbound nodes.\n        # The \"depth\" of a node is the max of the depths\n        # of all layers it is connected to.\n        for i in range(len(node.inbound_layers)):\n            inbound_layer = node.inbound_layers[i]\n            node_index = node.node_indices[i]\n            inbound_node = inbound_layer._inbound_nodes[node_index]\n            previous_depth = nodes_depths.get(inbound_node, 0)\n            nodes_depths[inbound_node] = max(depth + 1, previous_depth)\n\n    # Build a dict {depth: list of nodes with this depth}\n    nodes_by_depth = {}\n    for node, depth in nodes_depths.items():\n        if depth not in nodes_by_depth:\n            nodes_by_depth[depth] = []\n        nodes_by_depth[depth].append(node)\n\n    # Build a dict {depth: list of layers with this depth}\n    layers_by_depth = {}\n    for layer, depth in layers_depths.items():\n        if depth not in layers_by_depth:\n            layers_by_depth[depth] = []\n        layers_by_depth[depth].append(layer)\n\n    # Get sorted list of layer depths.\n    depth_keys = list(layers_by_depth.keys())\n    depth_keys.sort(reverse=True)\n\n    # Set self.layers and self._layers_by_depth.\n    layers = []\n    for depth in depth_keys:\n        layers_for_depth = layers_by_depth[depth]\n        # Network.layers needs to have a deterministic order:\n        # here we order them by traversal order.\n        layers_for_depth.sort(key=lambda x: layer_indices[x])\n        layers.extend(layers_for_depth)\n\n    # Get sorted list of node depths.\n    depth_keys = list(nodes_by_depth.keys())\n    depth_keys.sort(reverse=True)\n\n    # Check that all tensors required are computable.\n    # computable_tensors: all tensors in the graph\n    # that can be computed from the inputs provided.\n    computable_tensors = []\n    for x in inputs:\n        computable_tensors.append(x)\n\n    layers_with_complete_input = []  # To provide a better error msg.\n    for depth in depth_keys:\n        for node in nodes_by_depth[depth]:\n            layer = node.outbound_layer\n            if layer:\n                for x in node.input_tensors:\n                    if x not in computable_tensors:\n                        raise ValueError('Graph disconnected: '\n                                         'cannot obtain value for tensor ' +\n                                         str(x) + ' at layer \"' +\n                                         layer.name + '\". '\n                                         'The following previous layers '\n                                         'were accessed without issue: ' +\n                                         str(layers_with_complete_input))\n                for x in node.output_tensors:\n                    computable_tensors.append(x)\n                layers_with_complete_input.append(layer.name)\n\n    # Ensure name unicity, which will be crucial for serialization\n    # (since serialized nodes refer to layers by their name).\n    all_names = [layer.name for layer in layers]\n    for name in all_names:\n        if all_names.count(name) != 1:\n            raise ValueError('The name \"' + name + '\" is used ' +\n                             str(all_names.count(name)) +\n                             ' times in the model. '\n                             'All layer names should be unique.')\n    return network_nodes, nodes_by_depth, layers, layers_by_depth",
                        "signature": "_map_graph_network(inputs, outputs)"
                    }
                ],
                "file_scope_classes": [
                    {
                        "class_declaration": "class Network:",
                        "functions": [
                            {
                                "code": "@interfaces.legacy_model_constructor_support\ndef __init__(self, *args, **kwargs):\n    # Signature detection\n    if (len(args) == 2 or\n        len(args) == 1 and 'outputs' in kwargs or\n            'inputs' in kwargs and 'outputs' in kwargs):\n        # Graph network\n        self._init_graph_network(*args, **kwargs)\n    else:\n        # Subclassed network\n        self._init_subclassed_network(**kwargs)",
                                "signature": "__init__(self, *args, **kwargs)"
                            },
                            {
                                "code": "def _base_init(self, name=None):\n    # The following are implemented as property functions:\n    # self.trainable_weights\n    # self.non_trainable_weights\n    # self.input_spec\n    # self.losses\n    # self.updates\n\n    # Handle `name` argument.\n    if not name:\n        prefix = self.__class__.__name__.lower()\n        name = prefix + '_' + str(K.get_uid(prefix))\n    self.name = name\n\n    # This acts just like the `trainable` attribute of any layer instance.\n    # It does not affect users of the underlying layers, only users of the\n    # Network instance.\n    self.trainable = True\n    self._is_compiled = False\n    self._expects_training_arg = False\n    self._initial_weights = None\n\n    self.supports_masking = False\n    if not hasattr(self, 'optimizer'):\n        # Don't reset optimizer if already set.\n        self.optimizer = None\n\n    # Private attributes to implement compatibility with Layer.\n    self._updates = []\n    self._losses = []\n    self._per_input_losses = {}\n    self._per_input_updates = {}\n\n    # All layers in order of horizontal graph traversal.\n    # Entries are unique. Includes input and output layers.\n    self._layers = []\n\n    # Used only in conjunction with graph-networks\n    self._outbound_nodes = []\n    self._inbound_nodes = []",
                                "signature": "_base_init(self, name=None)"
                            },
                            {
                                "code": "def _init_graph_network(self, inputs, outputs, name=None):\n    self._uses_inputs_arg = True\n    # Normalize and set self.inputs, self.outputs.\n    self.inputs = to_list(inputs, allow_tuple=True)\n    self.outputs = to_list(outputs, allow_tuple=True)\n\n    # User-provided argument validation.\n    # Check for redundancy in inputs.\n    if len(set(self.inputs)) != len(self.inputs):\n        raise ValueError('The list of inputs passed to the model '\n                         'is redundant. '\n                         'All inputs should only appear once.'\n                         ' Found: ' + str(self.inputs))\n    for x in self.inputs:\n        # Check that x has appropriate `_keras_history` metadata.\n        if not hasattr(x, '_keras_history'):\n            cls_name = self.__class__.__name__\n            raise ValueError('Input tensors to a ' + cls_name + ' ' +\n                             'must come from `keras.layers.Input`. '\n                             'Received: ' + str(x) +\n                             ' (missing previous layer metadata).')\n        # Check that x is an input tensor.\n        layer, node_index, tensor_index = x._keras_history\n        if (len(layer._inbound_nodes) > 1 or\n                (layer._inbound_nodes and\n                 layer._inbound_nodes[0].inbound_layers)):\n            cls_name = self.__class__.__name__\n            warnings.warn(cls_name + ' inputs must come from '\n                          '`keras.layers.Input` '\n                          '(thus holding past layer metadata), '\n                          'they cannot be the output of '\n                          'a previous non-Input layer. '\n                          'Here, a tensor specified as '\n                          'input to your model '\n                          'was not an Input tensor, '\n                          'it was generated by layer ' +\n                          layer.name + '.\\n'\n                          'Note that input tensors are '\n                          'instantiated via '\n                          '`tensor = keras.layers.Input(shape)`.\\n'\n                          'The tensor that caused the issue was: ' +\n                          str(x.name))\n    for x in self.outputs:\n        if not hasattr(x, '_keras_history'):\n            cls_name = self.__class__.__name__\n            raise ValueError('Output tensors to a ' + cls_name +\n                             ' must be '\n                             'the output of a Keras `Layer` '\n                             '(thus holding past layer metadata). '\n                             'Found: ' + str(x))\n    self._base_init(name=name)\n    self._compute_previous_mask = (\n        has_arg(self.call, 'mask') or\n        hasattr(self, 'compute_mask'))\n    # A Network does not create weights of its own,\n    # thus it is already built.\n    self.built = True\n    self._is_graph_network = True\n\n    self._input_layers = []\n    self._output_layers = []\n    self._input_coordinates = []\n    self._output_coordinates = []\n\n    # This is for performance optimization when calling the Network on new\n    # inputs. Every time the Network is called on a set on input tensors,\n    # we compute the output tensors,\n    # output masks and output shapes in one pass,\n    # then cache them here. When any of these outputs is queried later, we\n    # retrieve it from there instead of recomputing it.\n    self._output_mask_cache = {}\n    self._output_tensor_cache = {}\n    self._output_shape_cache = {}\n\n    # Build self._output_layers:\n    for x in self.outputs:\n        layer, node_index, tensor_index = x._keras_history\n        self._output_layers.append(layer)\n        self._output_coordinates.append((layer, node_index, tensor_index))\n\n    # Build self._input_layers:\n    for x in self.inputs:\n        layer, node_index, tensor_index = x._keras_history\n        # It's supposed to be an input layer, so only one node\n        # and one tensor output.\n        assert node_index == 0\n        assert tensor_index == 0\n        self._input_layers.append(layer)\n        self._input_coordinates.append((layer, node_index, tensor_index))\n\n    # Keep track of the network's nodes and layers.\n    nodes, nodes_by_depth, layers, layers_by_depth = _map_graph_network(\n        self.inputs, self.outputs)\n    self._network_nodes = nodes\n    self._nodes_by_depth = nodes_by_depth\n    self._layers = layers\n    self._layers_by_depth = layers_by_depth\n\n    # Create the node linking internal inputs to internal outputs.\n    Node(outbound_layer=self,\n         inbound_layers=[],\n         node_indices=[],\n         tensor_indices=[],\n         input_tensors=self.inputs,\n         output_tensors=self.outputs,\n         # No network-level masking for now.\n         input_masks=[None for _ in self.inputs],\n         output_masks=[None for _ in self.outputs],\n         input_shapes=[x._keras_shape for x in self.inputs],\n         output_shapes=[x._keras_shape for x in self.outputs])\n\n    # Fill in the output mask cache.\n    masks = []\n    for x in self.inputs:\n        layer, node_index, tensor_index = x._keras_history\n        node = layer._inbound_nodes[node_index]\n        mask = node.output_masks[tensor_index]\n        masks.append(mask)\n    mask_cache_key = object_list_uid(inputs)\n    mask_cache_key += '_' + object_list_uid(masks)\n    masks = []\n    for x in self.outputs:\n        layer, node_index, tensor_index = x._keras_history\n        node = layer._inbound_nodes[node_index]\n        mask = node.output_masks[tensor_index]\n        masks.append(mask)\n    mask = unpack_singleton(masks)\n    self._output_mask_cache[mask_cache_key] = mask\n\n    # Build self.input_names and self.output_names.\n    self.input_names = []\n    self.output_names = []\n    self._feed_input_names = []\n    self._feed_inputs = []\n    self._feed_input_shapes = []\n    for i, layer in enumerate(self._input_layers):\n        # Check that layer is an InputLayer.\n        if not isinstance(layer, InputLayer):\n            raise TypeError(\n                'Input layers to a `Model` must be `InputLayer` objects. '\n                'Received inputs: {}. '\n                'Input {} (0-based) originates '\n                'from layer type `{}`.'.format(inputs,\n                                               i,\n                                               layer.__class__.__name__))\n        self.input_names.append(layer.name)\n        if layer.is_placeholder:\n            self._feed_inputs.append(layer.input)\n            self._feed_input_names.append(layer.name)\n            self._feed_input_shapes.append(self.inputs[i]._keras_shape)\n\n    for layer in self._output_layers:\n        self.output_names.append(layer.name)",
                                "signature": "_init_graph_network(self, inputs, outputs, name=None)"
                            },
                            {
                                "code": "def _init_subclassed_network(self, name=None):\n    self._base_init(name=name)\n    self._is_graph_network = False\n    self._expects_training_arg = has_arg(self.call, 'training')\n    self._uses_inputs_arg = has_arg(self.call, 'inputs')\n    self.outputs = None\n    self.inputs = None\n    self.built = False",
                                "signature": "_init_subclassed_network(self, name=None)"
                            },
                            {
                                "code": "def __setattr__(self, name, value):\n    # Automatically track layers set as Model\n    # attributes for subclassed Models.\n    if isinstance(value, (Layer, Network)):\n        try:\n            is_graph_network = self._is_graph_network\n        except AttributeError:\n            raise RuntimeError(\n                'It looks like you are subclassing `Model` and you '\n                'forgot to call `super(YourClass, self).__init__()`.'\n                ' Always start with this line.')\n        if not is_graph_network:\n            if value not in self._layers:\n                self._layers.append(value)\n    super(Network, self).__setattr__(name, value)",
                                "signature": "__setattr__(self, name, value)"
                            },
                            {
                                "code": "@property\ndef layers(self):\n    return self._layers",
                                "signature": "layers(self)"
                            },
                            {
                                "code": "def get_layer(self, name=None, index=None):\n    \"\"\"Retrieves a layer based on either its name (unique) or index.\n\n    If `name` and `index` are both provided, `index` will take precedence.\n\n    Indices are based on order of horizontal graph traversal (bottom-up).\n\n    # Arguments\n        name: String, name of layer.\n        index: Integer, index of layer.\n\n    # Returns\n        A layer instance.\n\n    # Raises\n        ValueError: In case of invalid layer name or index.\n    \"\"\"\n    # It would be unreliable to build a dictionary\n    # based on layer names, because names can potentially\n    # be changed at any point by the user\n    # without the network being notified of it.\n    if index is not None:\n        if len(self.layers) <= index:\n            raise ValueError('Was asked to retrieve layer at index ' +\n                             str(index) + ' but model only has ' +\n                             str(len(self.layers)) + ' layers.')\n        else:\n            return self.layers[index]\n    else:\n        if not name:\n            raise ValueError('Provide either a layer name or layer index.')\n\n    for layer in self.layers:\n        if layer.name == name:\n            return layer\n\n    raise ValueError('No such layer: ' + name)",
                                "signature": "get_layer(self, name=None, index=None)"
                            },
                            {
                                "code": "@property\ndef updates(self):\n    \"\"\"Retrieves the model's updates.\n\n    Will only include updates that are either\n    unconditional, or conditional on inputs to this model\n    (e.g. will not include updates that depend on tensors\n    that aren't inputs to this model).\n\n    # Returns\n        A list of update ops.\n    \"\"\"\n    if not self.trainable and not self.stateful:\n        return []\n    updates = []\n    for layer in self.layers:\n        if hasattr(layer, 'updates'):\n            if self._is_graph_network:\n                # Collect updates that are dependent on inputs\n                # that are part of the model.\n                for node_index, node in enumerate(layer._inbound_nodes):\n                    node_key = self._node_key(layer, node_index)\n                    if node_key in self._network_nodes:\n                        # The model owns this layer node.\n                        inputs = node.input_tensors\n                        updates += layer.get_updates_for(inputs)\n                # Collect unconditional updates.\n                updates += layer.get_updates_for(None)\n            else:\n                updates += layer.updates\n    return updates",
                                "signature": "updates(self)"
                            },
                            {
                                "code": "@property\ndef losses(self):\n    \"\"\"Retrieves the model's losses.\n\n    Will only include losses that are either\n    unconditional, or conditional on inputs to this model\n    (e.g. will not include losses that depend on tensors\n    that aren't inputs to this model).\n\n    # Returns\n        A list of loss tensors.\n    \"\"\"\n    losses = []\n    for layer in self.layers:\n        if hasattr(layer, 'losses'):\n            if self._is_graph_network:\n                # Collect losses that are dependent on inputs\n                # that are part of the model.\n                for node_index, node in enumerate(layer._inbound_nodes):\n                    node_key = self._node_key(layer, node_index)\n                    if node_key in self._network_nodes:\n                        # The model owns this layer node.\n                        inputs = node.input_tensors\n                        losses += layer.get_losses_for(inputs)\n                # Collect unconditional losses.\n                losses += layer.get_losses_for(None)\n            else:\n                losses += layer.losses\n\n    # Add any potential unconditional model-level loss.\n    losses += self.get_losses_for(None)\n\n    unique_tensors = list(\n        set(x for x in losses if not isinstance(x, (float, int))))\n    non_tensors = [x for x in losses if isinstance(x, (float, int))]\n    return unique_tensors + non_tensors",
                                "signature": "losses(self)"
                            },
                            {
                                "code": "@property\ndef uses_learning_phase(self):\n    if not self.outputs:\n        return False\n    return any([x._uses_learning_phase for x in self.outputs])",
                                "signature": "uses_learning_phase(self)"
                            },
                            {
                                "code": "@property\ndef stateful(self):\n    return any([(hasattr(layer, 'stateful') and\n                layer.stateful) for layer in self.layers])",
                                "signature": "stateful(self)"
                            },
                            {
                                "code": "def reset_states(self):\n    for layer in self.layers:\n        if hasattr(layer, 'reset_states') and getattr(layer, 'stateful', False):\n            layer.reset_states()",
                                "signature": "reset_states(self)"
                            },
                            {
                                "code": "@property\ndef state_updates(self):\n    \"\"\"Returns the `updates` from all layers that are stateful.\n\n    This is useful for separating training updates and\n    state updates, e.g. when we need to update a layer's internal state\n    during prediction.\n\n    # Returns\n        A list of update ops.\n    \"\"\"\n    state_updates = []\n    for layer in self.layers:\n        if layer.stateful:\n            state_updates += layer.updates\n    return state_updates",
                                "signature": "state_updates(self)"
                            },
                            {
                                "code": "@property\ndef trainable_weights(self):\n    if not self.trainable:\n        return []\n    weights = []\n    for layer in self.layers:\n        weights += layer.trainable_weights\n    return weights",
                                "signature": "trainable_weights(self)"
                            },
                            {
                                "code": "@property\ndef non_trainable_weights(self):\n    weights = []\n    for layer in self.layers:\n        weights += layer.non_trainable_weights\n    if not self.trainable:\n        trainable_weights = []\n        for layer in self.layers:\n            trainable_weights += layer.trainable_weights\n        return trainable_weights + weights\n    return weights",
                                "signature": "non_trainable_weights(self)"
                            },
                            {
                                "code": "def get_weights(self):\n    \"\"\"Retrieves the weights of the model.\n\n    # Returns\n        A flat list of Numpy arrays.\n    \"\"\"\n    weights = []\n    for layer in self.layers:\n        weights += layer.weights\n    return K.batch_get_value(weights)",
                                "signature": "get_weights(self)"
                            },
                            {
                                "code": "def set_weights(self, weights):\n    \"\"\"Sets the weights of the model.\n\n    # Arguments\n        weights: A list of Numpy arrays with shapes and types matching\n            the output of `model.get_weights()`.\n    \"\"\"\n    tuples = []\n    for layer in self.layers:\n        num_param = len(layer.weights)\n        layer_weights = weights[:num_param]\n        for sw, w in zip(layer.weights, layer_weights):\n            tuples.append((sw, w))\n        weights = weights[num_param:]\n    K.batch_set_value(tuples)",
                                "signature": "set_weights(self, weights)"
                            },
                            {
                                "code": "@property\ndef input_spec(self):\n    \"\"\"Gets the model's input specs.\n\n    # Returns\n        A list of `InputSpec` instances (one per input to the model)\n            or a single instance if the model has only one input.\n    \"\"\"\n    if not self._is_graph_network:\n        # TODO: support it in subclassed networks after inputs are set.\n        return None\n\n    specs = []\n    for layer in getattr(self, '_input_layers', []):\n        if layer.input_spec is None:\n            specs.append(None)\n        else:\n            if not isinstance(layer.input_spec, list):\n                raise TypeError('Layer ' + layer.name +\n                                ' has an input_spec attribute that '\n                                'is not a list. We expect a list. '\n                                'Found input_spec = ' +\n                                str(layer.input_spec))\n            specs += layer.input_spec\n    return unpack_singleton(specs)",
                                "signature": "input_spec(self)"
                            },
                            {
                                "code": "def call(self, inputs, mask=None):\n    \"\"\"Calls the model on new inputs.\n\n    In this case `call` just reapplies\n    all ops in the graph to the new inputs\n    (e.g. build a new computational graph from the provided inputs).\n\n    A model is callable on non-Keras tensors.\n\n    # Arguments\n        inputs: A tensor or list of tensors.\n        mask: A mask or list of masks. A mask can be\n            either a tensor or None (no mask).\n\n    # Returns\n        A tensor if there is a single output, or\n        a list of tensors if there are more than one outputs.\n    \"\"\"\n    inputs = to_list(inputs)\n    if mask is None:\n        masks = [None for _ in range(len(inputs))]\n    else:\n        masks = to_list(mask)\n    cache_key = object_list_uid(inputs)\n    cache_key += '_' + object_list_uid(masks)\n    if cache_key in self._output_tensor_cache:\n        return self._output_tensor_cache[cache_key]\n    else:\n        output_tensors, _, _ = self.run_internal_graph(inputs, masks)\n        return output_tensors",
                                "signature": "call(self, inputs, mask=None)"
                            },
                            {
                                "code": "def compute_mask(self, inputs, mask):\n    if not self._is_graph_network:\n        return None\n\n    inputs = to_list(inputs)\n    if mask is None:\n        masks = [None for _ in range(len(inputs))]\n    else:\n        masks = to_list(mask)\n    cache_key = object_list_uid(inputs)\n    cache_key += '_' + object_list_uid(masks)\n    if cache_key in self._output_mask_cache:\n        return self._output_mask_cache[cache_key]\n    else:\n        _, output_masks, _ = self.run_internal_graph(inputs, masks)\n        return output_masks",
                                "signature": "compute_mask(self, inputs, mask)"
                            },
                            {
                                "code": "def compute_output_shape(self, input_shape):\n    if not self._is_graph_network:\n        # Must be implemented by subclasses.\n        raise NotImplementedError\n\n    input_shapes = to_list(input_shape)\n    if len(input_shapes) != len(self._input_layers):\n        raise ValueError('Invalid input_shape argument ' +\n                         str(input_shape) + ': model has ' +\n                         str(len(self._input_layers)) + ' tensor inputs.')\n\n    cache_key = ', '.join([str(x) for x in input_shapes])\n    if cache_key in self._output_shape_cache:\n        output_shapes = self._output_shape_cache[cache_key]\n        if isinstance(output_shapes, list):\n            return unpack_singleton(output_shapes)\n        return output_shapes\n    else:\n        # Bad luck, we have to run the graph manually.\n        layers_to_output_shapes = {}\n        for i in range(len(input_shapes)):\n            layer = self._input_layers[i]\n            input_shape = input_shapes[i]\n            # It's an input layer: compute_output_shape is identity,\n            # and there is only one node and one tensor output.\n            shape_key = layer.name + '_0_0'\n            layers_to_output_shapes[shape_key] = input_shape\n\n        depth_keys = list(self._nodes_by_depth.keys())\n        depth_keys.sort(reverse=True)\n        # Iterate over nodes, by depth level.\n        if len(depth_keys) > 1:\n            for depth in depth_keys:\n                nodes = self._nodes_by_depth[depth]\n                for node in nodes:\n                    # This is always a single layer, never a list.\n                    layer = node.outbound_layer\n                    if layer in self._input_layers:\n                        # We've already covered the input layers\n                        # a few lines above.\n                        continue\n                    # Potentially redundant list,\n                    # same size of node.input_tensors.\n                    input_shapes = []\n                    for j in range(len(node.inbound_layers)):\n                        inbound_layer = node.inbound_layers[j]\n                        node_index = node.node_indices[j]\n                        tensor_index = node.tensor_indices[j]\n                        shape_key = inbound_layer.name\n                        shape_key += '_%s_%s' % (node_index, tensor_index)\n                        input_shape = layers_to_output_shapes[shape_key]\n                        input_shapes.append(input_shape)\n\n                    output_shape = layer.compute_output_shape(\n                        unpack_singleton(input_shapes))\n\n                    output_shapes = to_list(output_shape)\n                    node_index = layer._inbound_nodes.index(node)\n                    for j in range(len(output_shapes)):\n                        shape_key = layer.name + '_%s_%s' % (node_index, j)\n                        layers_to_output_shapes[shape_key] = output_shapes[j]\n\n        # Read final output shapes from layers_to_output_shapes.\n        output_shapes = []\n        output_shape_keys = []\n        for i in range(len(self._output_layers)):\n            layer = self._output_layers[i]\n            node_index = self._output_coordinates[i][1]\n            tensor_index = self._output_coordinates[i][2]\n            shape_key = layer.name + '_%s_%s' % (node_index, tensor_index)\n            output_shape_keys.append(shape_key)\n\n        for i, key in enumerate(output_shape_keys):\n            assert key in layers_to_output_shapes\n            output_shapes.append(layers_to_output_shapes[key])\n        # Store in cache.\n        self._output_shape_cache[cache_key] = output_shapes\n        if isinstance(output_shapes, list):\n            return unpack_singleton(output_shapes)\n        return output_shapes",
                                "signature": "compute_output_shape(self, input_shape)"
                            },
                            {
                                "code": "def run_internal_graph(self, inputs, masks=None):\n    \"\"\"Computes output tensors for new inputs.\n\n    # Note:\n        - Expects `inputs` to be a list (potentially with 1 element).\n        - Can be run on non-Keras tensors.\n\n    # Arguments\n        inputs: List of tensors\n        masks: List of masks (tensors or None).\n\n    # Returns\n        Three lists: output_tensors, output_masks, output_shapes\n    \"\"\"\n    if masks is None:\n        masks = [None for _ in range(len(inputs))]\n\n    # Dictionary mapping reference tensors to tuples\n    # (computed tensor, compute mask)\n    # we assume a 1:1 mapping from tensor to mask\n    # TODO: raise exception when a `.compute_mask()` call\n    # does not return a list the same size as `call`\n    tensor_map = {}\n    for x, y, mask in zip(self.inputs, inputs, masks):\n        tensor_map[str(id(x))] = (y, mask)\n\n    depth_keys = list(self._nodes_by_depth.keys())\n    depth_keys.sort(reverse=True)\n    for depth in depth_keys:\n        nodes = self._nodes_by_depth[depth]\n        for node in nodes:\n            # This is always a single layer, never a list.\n            layer = node.outbound_layer\n            reference_input_tensors = node.input_tensors\n            reference_output_tensors = node.output_tensors\n\n            # If all previous input tensors are available in tensor_map,\n            # then call node.inbound_layer on them.\n            computed_data = []  # List of tuples (input, mask).\n            for x in reference_input_tensors:\n                if str(id(x)) in tensor_map:\n                    computed_data.append(tensor_map[str(id(x))])\n\n            if len(computed_data) == len(reference_input_tensors):\n                # call layer\n                with K.name_scope(layer.name):\n                    if node.arguments:\n                        kwargs = node.arguments\n                    else:\n                        kwargs = {}\n                    if len(computed_data) == 1:\n                        computed_tensor, computed_mask = computed_data[0]\n                        if has_arg(layer.call, 'mask'):\n                            if 'mask' not in kwargs:\n                                kwargs['mask'] = computed_mask\n                        output_tensors = to_list(\n                            layer.call(computed_tensor, **kwargs))\n                        output_masks = layer.compute_mask(computed_tensor,\n                                                          computed_mask)\n                        if output_masks is None:\n                            output_masks = [None for _ in output_tensors]\n                        else:\n                            output_masks = to_list(output_masks)\n                        computed_tensors = [computed_tensor]\n\n                        # computed_masks might be used in the future.\n                        computed_masks = [computed_mask]\n                    else:\n                        computed_tensors = [x[0] for x in computed_data]\n                        computed_masks = [x[1] for x in computed_data]\n                        if has_arg(layer.call, 'mask'):\n                            if 'mask' not in kwargs:\n                                kwargs['mask'] = computed_masks\n                        output_tensors = to_list(\n                            layer.call(computed_tensors, **kwargs))\n                        output_masks = layer.compute_mask(computed_tensors,\n                                                          computed_masks)\n                        if output_masks is None:\n                            output_masks = [None for _ in output_tensors]\n                        else:\n                            output_masks = to_list(output_masks)\n                    # Apply activity regularizer if any:\n                    if (hasattr(layer, 'activity_regularizer') and\n                            layer.activity_regularizer is not None):\n                        with K.name_scope('activity_regularizer'):\n                            regularization_losses = [\n                                layer.activity_regularizer(x)\n                                for x in output_tensors]\n                        layer.add_loss(regularization_losses,\n                                       inputs=computed_tensors)\n\n                    if len(output_masks) != len(output_tensors):\n                        raise Exception(\n                            'Layers should have equal number of output tensors '\n                            'and output masks. Layer ' + str(layer.name) + ' has'\n                            ' ' + str(len(output_tensors)) + ' output tensors '\n                            'and ' + str(len(output_masks)) + ' output masks.')\n                # Update model updates and losses:\n                # Keep track of updates that depend on the inputs\n                # (e.g. BN updates).\n                self.add_update(layer.get_updates_for(computed_tensors), inputs)\n                # Keep track of unconditional updates (e.g. a counter).\n                self.add_update(layer.get_updates_for(None), None)\n                # Keep track of losses that depend on the inputs\n                # (e.g. activity regularizers).\n                self.add_loss(layer.get_losses_for(computed_tensors), inputs)\n                # Keep track of unconditional losses\n                # (e.g. weight regularizers).\n                self.add_loss(layer.get_losses_for(None), None)\n\n                # Update _keras_shape.\n                if all([hasattr(x, '_keras_shape') for x in computed_tensors]):\n                    input_shapes = unpack_singleton(\n                        [x._keras_shape for x in computed_tensors])\n                    shapes = to_list(layer.compute_output_shape(input_shapes))\n                    uses_learning_phase = any(\n                        [x._uses_learning_phase for x in computed_tensors])\n\n                    for x, s in zip(output_tensors, shapes):\n                        x._keras_shape = s\n                        _u = getattr(x, '_uses_learning_phase', False)\n                        x._uses_learning_phase = _u or uses_learning_phase\n\n                # Update tensor_map.\n                for x, y, mask in zip(reference_output_tensors,\n                                      output_tensors,\n                                      output_masks):\n                    tensor_map[str(id(x))] = (y, mask)\n\n    output_tensors = []\n    output_masks = []\n    output_shapes = []\n    for x in self.outputs:\n        assert str(id(x)) in tensor_map, 'Could not compute output ' + str(x)\n        tensor, mask = tensor_map[str(id(x))]\n        if hasattr(tensor, '_keras_shape') and output_shapes is not None:\n            shape = tensor._keras_shape\n            output_shapes.append(shape)\n        else:\n            output_shapes = None\n        output_tensors.append(tensor)\n        output_masks.append(mask)\n\n    # Update cache;\n    # keys are based on ids on input tensors and inputs masks.\n    cache_key = object_list_uid(inputs)\n    cache_key += '_' + object_list_uid(masks)\n\n    output_tensors = unpack_singleton(output_tensors)\n    self._output_tensor_cache[cache_key] = output_tensors\n\n    output_masks = unpack_singleton(output_masks)\n    self._output_mask_cache[cache_key] = output_masks\n\n    if output_shapes is not None:\n        input_shapes = [x._keras_shape for x in inputs]\n        cache_key = ', '.join([str(x) for x in input_shapes])\n\n        output_shapes = unpack_singleton(output_shapes)\n        self._output_shape_cache[cache_key] = output_shapes\n    return output_tensors, output_masks, output_shapes",
                                "signature": "run_internal_graph(self, inputs, masks=None)"
                            },
                            {
                                "code": "def get_config(self):\n    if not self._is_graph_network:\n        # Subclassed networks are not serializable\n        # (unless serialization is implemented by\n        # the author of the subclassed network).\n        raise NotImplementedError\n\n    config = {\n        'name': self.name,\n    }\n\n    # Build a map from a layer unique name (self._node_key)\n    # to the index of the nodes that are saved in the config.\n    # Only nodes in network_nodes are saved.\n    node_conversion_map = {}\n    for layer in self.layers:\n        if issubclass(layer.__class__, Network):\n            # Networks start with a pre-existing node\n            # linking their input to output.\n            kept_nodes = 1\n        else:\n            kept_nodes = 0\n        for original_node_index, node in enumerate(layer._inbound_nodes):\n            node_key = self._node_key(layer, original_node_index)\n            if node_key in self._network_nodes:\n                # i.e. we mark it to be saved\n                node_conversion_map[node_key] = kept_nodes\n                kept_nodes += 1\n\n    # serialize and save the layers in layer_configs\n    layer_configs = []\n    for layer in self.layers:  # From the earliest layers on.\n        layer_class_name = layer.__class__.__name__\n        layer_config = layer.get_config()\n        filtered_inbound_nodes = []\n        for original_node_index, node in enumerate(layer._inbound_nodes):\n            node_key = self._node_key(layer, original_node_index)\n            if node_key in self._network_nodes:\n                # The node is relevant to the model:\n                # add to filtered_inbound_nodes.\n                if node.arguments:\n                    try:\n                        json.dumps(node.arguments)\n                        kwargs = node.arguments\n                    except TypeError:\n                        warnings.warn(\n                            'Layer ' + layer.name +\n                            ' was passed non-serializable '\n                            'keyword arguments: ' +\n                            str(node.arguments) +\n                            '. They will not be included '\n                            'in the serialized model '\n                            '(and thus will be missing '\n                            'at deserialization time).')\n                        kwargs = {}\n                else:\n                    kwargs = {}\n                if node.inbound_layers:\n                    node_data = []\n                    for i in range(len(node.inbound_layers)):\n                        inbound_layer = node.inbound_layers[i]\n                        node_index = node.node_indices[i]\n                        tensor_index = node.tensor_indices[i]\n\n                        new_node_index = node_conversion_map.get(\n                            self._node_key(inbound_layer, node_index), 0)\n                        node_data.append([inbound_layer.name,\n                                          new_node_index,\n                                          tensor_index,\n                                          kwargs])\n                    filtered_inbound_nodes.append(node_data)\n        layer_configs.append({\n            'name': layer.name,\n            'class_name': layer_class_name,\n            'config': layer_config,\n            'inbound_nodes': filtered_inbound_nodes,\n        })\n    config['layers'] = layer_configs\n\n    # Gather info about inputs and outputs.\n    model_inputs = []\n    for i in range(len(self._input_layers)):\n        layer = self._input_layers[i]\n        node_index = self._input_coordinates[i][1]\n\n        node_key = self._node_key(layer, node_index)\n        if node_key not in self._network_nodes:\n            continue\n        new_node_index = node_conversion_map[node_key]\n        tensor_index = self._input_coordinates[i][2]\n        model_inputs.append([layer.name, new_node_index, tensor_index])\n    config['input_layers'] = model_inputs\n    model_outputs = []\n    for i in range(len(self._output_layers)):\n        layer = self._output_layers[i]\n        node_index = self._output_coordinates[i][1]\n\n        node_key = self._node_key(layer, node_index)\n        if node_key not in self._network_nodes:\n            continue\n        new_node_index = node_conversion_map[node_key]\n        tensor_index = self._output_coordinates[i][2]\n        model_outputs.append([layer.name, new_node_index, tensor_index])\n    config['output_layers'] = model_outputs\n    return copy.deepcopy(config)",
                                "signature": "get_config(self)"
                            },
                            {
                                "code": "@classmethod\ndef from_config(cls, config, custom_objects=None):\n    \"\"\"Instantiates a Model from its config (output of `get_config()`).\n\n    # Arguments\n        config: Model config dictionary.\n        custom_objects: Optional dictionary mapping names\n            (strings) to custom classes or functions to be\n            considered during deserialization.\n\n    # Returns\n        A model instance.\n\n    # Raises\n        ValueError: In case of improperly formatted config dict.\n    \"\"\"\n    # Layer instances created during\n    # the graph reconstruction process\n    created_layers = {}\n\n    # Dictionary mapping layer instances to\n    # node data that specifies a layer call.\n    # It acts as a queue that maintains any unprocessed\n    # layer call until it becomes possible to process it\n    # (i.e. until the input tensors to the call all exist).\n    unprocessed_nodes = {}\n\n    def add_unprocessed_node(layer, node_data):\n        if layer not in unprocessed_nodes:\n            unprocessed_nodes[layer] = [node_data]\n        else:\n            unprocessed_nodes[layer].append(node_data)\n\n    def process_node(layer, node_data):\n        input_tensors = []\n        for input_data in node_data:\n            inbound_layer_name = input_data[0]\n            inbound_node_index = input_data[1]\n            inbound_tensor_index = input_data[2]\n            if len(input_data) == 3:\n                kwargs = {}\n            elif len(input_data) == 4:\n                kwargs = input_data[3]\n            else:\n                raise ValueError('Improperly formatted model config.')\n            inbound_layer = created_layers[inbound_layer_name]\n            if len(inbound_layer._inbound_nodes) <= inbound_node_index:\n                add_unprocessed_node(layer, node_data)\n                return\n            inbound_node = inbound_layer._inbound_nodes[inbound_node_index]\n            input_tensors.append(\n                inbound_node.output_tensors[inbound_tensor_index])\n        # Call layer on its inputs, thus creating the node\n        # and building the layer if needed.\n        if input_tensors:\n            layer(unpack_singleton(input_tensors), **kwargs)\n\n    def process_layer(layer_data):\n        \"\"\"Deserializes a layer, then call it on appropriate inputs.\n\n        # Arguments\n            layer_data: layer config dict.\n\n        # Raises\n            ValueError: In case of improperly formatted `layer_data` dict.\n        \"\"\"\n        layer_name = layer_data['name']\n\n        # Instantiate layer.\n        from ..layers import deserialize as deserialize_layer\n\n        layer = deserialize_layer(layer_data,\n                                  custom_objects=custom_objects)\n        created_layers[layer_name] = layer\n\n        # Gather layer inputs.\n        inbound_nodes_data = layer_data['inbound_nodes']\n        for node_data in inbound_nodes_data:\n            # We don't process nodes (i.e. make layer calls)\n            # on the fly because the inbound node may not yet exist,\n            # in case of layer shared at different topological depths\n            # (e.g. a model such as A(B(A(B(x)))))\n            add_unprocessed_node(layer, node_data)\n\n    # First, we create all layers and enqueue nodes to be processed\n    for layer_data in config['layers']:\n        process_layer(layer_data)\n    # Then we process nodes in order of layer depth.\n    # Nodes that cannot yet be processed (if the inbound node\n    # does not yet exist) are re-enqueued, and the process\n    # is repeated until all nodes are processed.\n    while unprocessed_nodes:\n        for layer_data in config['layers']:\n            layer = created_layers[layer_data['name']]\n            if layer in unprocessed_nodes:\n                for node_data in unprocessed_nodes.pop(layer):\n                    process_node(layer, node_data)\n\n    name = config.get('name')\n    input_tensors = []\n    output_tensors = []\n    for layer_data in config['input_layers']:\n        layer_name, node_index, tensor_index = layer_data\n        assert layer_name in created_layers\n        layer = created_layers[layer_name]\n        layer_output_tensors = layer._inbound_nodes[node_index].output_tensors\n        input_tensors.append(layer_output_tensors[tensor_index])\n    for layer_data in config['output_layers']:\n        layer_name, node_index, tensor_index = layer_data\n        assert layer_name in created_layers\n        layer = created_layers[layer_name]\n        layer_output_tensors = layer._inbound_nodes[node_index].output_tensors\n        output_tensors.append(layer_output_tensors[tensor_index])\n    return cls(inputs=input_tensors, outputs=output_tensors, name=name)",
                                "signature": "from_config(cls, config, custom_objects=None)"
                            },
                            {
                                "code": "def save(self, filepath, overwrite=True, include_optimizer=True):\n    \"\"\"Saves the model to a single HDF5 file.\n\n    The savefile includes:\n        - The model architecture, allowing to re-instantiate the model.\n        - The model weights.\n        - The state of the optimizer, allowing to resume training\n            exactly where you left off.\n\n    This allows you to save the entirety of the state of a model\n    in a single file.\n\n    Saved models can be reinstantiated via `keras.models.load_model`.\n    The model returned by `load_model`\n    is a compiled model ready to be used (unless the saved model\n    was never compiled in the first place).\n\n    # Arguments\n        filepath: String, path to the file to save the weights to.\n        overwrite: Whether to silently overwrite any existing file at the\n            target location, or provide the user with a manual prompt.\n        include_optimizer: If True, save optimizer's state together.\n\n    # Example\n\n    ```python\n    from keras.models import load_model\n\n    model.save('my_model.h5')  # creates a HDF5 file 'my_model.h5'\n    del model  # deletes the existing model\n\n    # returns a compiled model\n    # identical to the previous one\n    model = load_model('my_model.h5')\n    ```\n    \"\"\"\n    if not self._is_graph_network:\n        raise NotImplementedError\n    from ..models import save_model\n    save_model(self, filepath, overwrite, include_optimizer)",
                                "signature": "save(self, filepath, overwrite=True, include_optimizer=True)"
                            },
                            {
                                "code": "@saving.allow_write_to_gcs\ndef save_weights(self, filepath, overwrite=True):\n    \"\"\"Dumps all layer weights to a HDF5 file.\n\n    The weight file has:\n        - `layer_names` (attribute), a list of strings\n            (ordered names of model layers).\n        - For every layer, a `group` named `layer.name`\n            - For every such layer group, a group attribute `weight_names`,\n                a list of strings\n                (ordered names of weights tensor of the layer).\n            - For every weight in the layer, a dataset\n                storing the weight value, named after the weight tensor.\n\n    # Arguments\n        filepath: String, path to the file to save the weights to.\n        overwrite: Whether to silently overwrite any existing file at the\n            target location, or provide the user with a manual prompt.\n\n    # Raises\n        ImportError: If h5py is not available.\n    \"\"\"\n    if h5py is None:\n        raise ImportError('`save_weights` requires h5py.')\n    # If file exists and should not be overwritten:\n    if not overwrite and os.path.isfile(filepath):\n        proceed = ask_to_proceed_with_overwrite(filepath)\n        if not proceed:\n            return\n    with h5py.File(filepath, 'w') as f:\n        saving.save_weights_to_hdf5_group(f, self.layers)\n        f.flush()",
                                "signature": "save_weights(self, filepath, overwrite=True)"
                            },
                            {
                                "code": "@saving.allow_read_from_gcs\ndef load_weights(self, filepath, by_name=False,\n                 skip_mismatch=False, reshape=False):\n    \"\"\"Loads all layer weights from a HDF5 save file.\n\n    If `by_name` is False (default) weights are loaded\n    based on the network's topology, meaning the architecture\n    should be the same as when the weights were saved.\n    Note that layers that don't have weights are not taken\n    into account in the topological ordering, so adding or\n    removing layers is fine as long as they don't have weights.\n\n    If `by_name` is True, weights are loaded into layers\n    only if they share the same name. This is useful\n    for fine-tuning or transfer-learning models where\n    some of the layers have changed.\n\n    # Arguments\n        filepath: String, path to the weights file to load.\n        by_name: Boolean, whether to load weights by name\n            or by topological order.\n        skip_mismatch: Boolean, whether to skip loading of layers\n            where there is a mismatch in the number of weights,\n            or a mismatch in the shape of the weight\n            (only valid when `by_name`=True).\n        reshape: Reshape weights to fit the layer when the correct number\n            of weight arrays is present but their shape does not match.\n\n\n    # Raises\n        ImportError: If h5py is not available.\n    \"\"\"\n    if h5py is None:\n        raise ImportError('`load_weights` requires h5py.')\n    with h5py.File(filepath, mode='r') as f:\n        if 'layer_names' not in f.attrs and 'model_weights' in f:\n            f = f['model_weights']\n        if by_name:\n            saving.load_weights_from_hdf5_group_by_name(\n                f, self.layers, skip_mismatch=skip_mismatch,\n                reshape=reshape)\n        else:\n            saving.load_weights_from_hdf5_group(\n                f, self.layers, reshape=reshape)",
                                "signature": "load_weights(self, filepath, by_name=False, skip_mismatch=False, reshape=False)"
                            },
                            {
                                "code": "def _updated_config(self):\n    \"\"\"Util hared between different serialization methods.\n\n    # Returns\n        Model config with Keras version information added.\n    \"\"\"\n    from .. import __version__ as keras_version\n\n    config = self.get_config()\n    model_config = {\n        'class_name': self.__class__.__name__,\n        'config': config,\n        'keras_version': keras_version,\n        'backend': K.backend()\n    }\n    return model_config",
                                "signature": "_updated_config(self)"
                            },
                            {
                                "code": "def to_json(self, **kwargs):\n    \"\"\"Returns a JSON string containing the network configuration.\n\n    To load a network from a JSON save file, use\n    `keras.models.model_from_json(json_string, custom_objects={})`.\n\n    # Arguments\n        **kwargs: Additional keyword arguments\n            to be passed to `json.dumps()`.\n\n    # Returns\n        A JSON string.\n    \"\"\"\n    def get_json_type(obj):\n        # If obj is any numpy type\n        if type(obj).__module__ == np.__name__:\n            if isinstance(obj, np.ndarray):\n                return obj.tolist()\n            else:\n                return obj.item()\n\n        # If obj is a python 'type'\n        if type(obj).__name__ == type.__name__:\n            return obj.__name__\n\n        raise TypeError('Not JSON Serializable:', obj)\n\n    model_config = self._updated_config()\n    return json.dumps(model_config, default=get_json_type, **kwargs)",
                                "signature": "to_json(self, **kwargs)"
                            },
                            {
                                "code": "def to_yaml(self, **kwargs):\n    \"\"\"Returns a yaml string containing the network configuration.\n\n    To load a network from a yaml save file, use\n    `keras.models.model_from_yaml(yaml_string, custom_objects={})`.\n\n    `custom_objects` should be a dictionary mapping\n    the names of custom losses / layers / etc to the corresponding\n    functions / classes.\n\n    # Arguments\n        **kwargs: Additional keyword arguments\n            to be passed to `yaml.dump()`.\n\n    # Returns\n        A YAML string.\n    \"\"\"\n    return yaml.dump(self._updated_config(), **kwargs)",
                                "signature": "to_yaml(self, **kwargs)"
                            },
                            {
                                "code": "def summary(self, line_length=None, positions=None, print_fn=None):\n    \"\"\"Prints a string summary of the network.\n\n    # Arguments\n        line_length: Total length of printed lines\n            (e.g. set this to adapt the display to different\n            terminal window sizes).\n        positions: Relative or absolute positions of log elements\n            in each line. If not provided,\n            defaults to `[.33, .55, .67, 1.]`.\n        print_fn: Print function to use.\n            It will be called on each line of the summary.\n            You can set it to a custom function\n            in order to capture the string summary.\n            It defaults to `print` (prints to stdout).\n    \"\"\"\n    if not self.built:\n        raise ValueError(\n            'This model has not yet been built. '\n            'Build the model first by calling build() '\n            'or calling fit() with some data. '\n            'Or specify input_shape or batch_input_shape '\n            'in the first layer for automatic build. ')\n    return print_layer_summary(self,\n                               line_length=line_length,\n                               positions=positions,\n                               print_fn=print_fn)",
                                "signature": "summary(self, line_length=None, positions=None, print_fn=None)"
                            },
                            {
                                "code": "def __getstate__(self):\n    return saving.pickle_model(self)",
                                "signature": "__getstate__(self)"
                            },
                            {
                                "code": "def __setstate__(self, state):\n    model = saving.unpickle_model(state)\n    self.__dict__.update(model.__dict__)",
                                "signature": "__setstate__(self, state)"
                            }
                        ]
                    }
                ]
            },
            "variables_in_file": {
                "ImportError": [
                    1112,
                    1155,
                    31
                ],
                "h5py": [
                    32,
                    1154,
                    1156,
                    1111,
                    1118
                ],
                "Layer": [
                    305,
                    35
                ],
                "len": [
                    642,
                    649,
                    908,
                    147,
                    920,
                    162,
                    680,
                    556,
                    573,
                    1341,
                    1346,
                    708,
                    715,
                    972,
                    590,
                    974,
                    593,
                    979,
                    344,
                    89,
                    90,
                    347,
                    604,
                    615,
                    1384,
                    628,
                    756,
                    886,
                    503,
                    760,
                    761
                ],
                "args": [
                    89,
                    90,
                    93
                ],
                "kwargs": [
                    896,
                    1212,
                    712,
                    714,
                    973,
                    718,
                    719,
                    975,
                    721,
                    1231,
                    90,
                    91,
                    988,
                    93,
                    96,
                    736,
                    737,
                    739,
                    870,
                    881,
                    883
                ],
                "self._init_graph_network": [
                    93
                ],
                "self": [
                    518,
                    523,
                    561,
                    562,
                    564,
                    568,
                    1084,
                    1087,
                    578,
                    579,
                    581,
                    585,
                    590,
                    593,
                    596,
                    597,
                    93,
                    605,
                    1119,
                    96,
                    612,
                    617,
                    108,
                    621,
                    110,
                    115,
                    116,
                    117,
                    118,
                    120,
                    121,
                    123,
                    126,
                    127,
                    128,
                    129,
                    133,
                    136,
                    137,
                    649,
                    650,
                    140,
                    651,
                    142,
                    143,
                    652,
                    1161,
                    1165,
                    147,
                    660,
                    151,
                    152,
                    1175,
                    1177,
                    155,
                    165,
                    688,
                    691,
                    181,
                    694,
                    183,
                    1211,
                    189,
                    190,
                    191,
                    192,
                    195,
                    196,
                    198,
                    199,
                    200,
                    201,
                    1231,
                    209,
                    210,
                    211,
                    214,
                    216,
                    217,
                    220,
                    1249,
                    226,
                    227,
                    231,
                    232,
                    233,
                    234,
                    235,
                    1256,
                    238,
                    1262,
                    242,
                    243,
                    1266,
                    245,
                    246,
                    247,
                    248,
                    252,
                    765,
                    767,
                    770,
                    260,
                    773,
                    266,
                    269,
                    270,
                    271,
                    272,
                    273,
                    274,
                    284,
                    797,
                    286,
                    287,
                    288,
                    290,
                    291,
                    294,
                    295,
                    296,
                    297,
                    298,
                    299,
                    300,
                    814,
                    817,
                    307,
                    824,
                    314,
                    315,
                    316,
                    828,
                    320,
                    835,
                    842,
                    850,
                    851,
                    344,
                    858,
                    347,
                    349,
                    863,
                    864,
                    354,
                    372,
                    375,
                    377,
                    892,
                    381,
                    382,
                    908,
                    909,
                    910,
                    912,
                    913,
                    916,
                    405,
                    407,
                    920,
                    921,
                    922,
                    411,
                    412,
                    924,
                    925,
                    928,
                    422,
                    431,
                    433,
                    438,
                    441,
                    457,
                    464,
                    467,
                    474,
                    476,
                    478,
                    490,
                    502
                ],
                "self._init_subclassed_network": [
                    96
                ],
                "interfaces.legacy_model_constructor_support": [
                    86
                ],
                "interfaces": [
                    86
                ],
                "name": [
                    355,
                    294,
                    358,
                    1031,
                    1450,
                    107,
                    1451,
                    109,
                    110,
                    1452,
                    1453,
                    1046,
                    316,
                    189,
                    351
                ],
                "prefix": [
                    108,
                    109
                ],
                "self.__class__.__name__.lower": [
                    108
                ],
                "self.__class__.__name__": [
                    165,
                    108,
                    183,
                    1177,
                    155
                ],
                "self.__class__": [
                    165,
                    108,
                    183,
                    1177,
                    155
                ],
                "str": [
                    532,
                    151,
                    792,
                    798,
                    158,
                    799,
                    1438,
                    1442,
                    1453,
                    1328,
                    689,
                    180,
                    821,
                    188,
                    705,
                    706,
                    592,
                    593,
                    595,
                    346,
                    347,
                    876,
                    109,
                    1270,
                    759,
                    760,
                    761
                ],
                "K.get_uid": [
                    109
                ],
                "K": [
                    710,
                    492,
                    749,
                    109,
                    1180,
                    508
                ],
                "self.name": [
                    835,
                    110
                ],
                "self.trainable": [
                    464,
                    476,
                    115,
                    372
                ],
                "self._is_compiled": [
                    116
                ],
                "self._expects_training_arg": [
                    296,
                    117
                ],
                "self._initial_weights": [
                    118
                ],
                "self.supports_masking": [
                    120
                ],
                "hasattr": [
                    192,
                    800,
                    776,
                    747,
                    442,
                    437,
                    182,
                    406,
                    376,
                    121,
                    154
                ],
                "self.optimizer": [
                    123
                ],
                "self._updates": [
                    126
                ],
                "self._losses": [
                    127
                ],
                "self._per_input_losses": [
                    128
                ],
                "self._per_input_updates": [
                    129
                ],
                "self._layers": [
                    320,
                    133,
                    234,
                    314,
                    315
                ],
                "self._outbound_nodes": [
                    136
                ],
                "self._inbound_nodes": [
                    137
                ],
                "self._uses_inputs_arg": [
                    297,
                    140
                ],
                "self.inputs": [
                    288,
                    231,
                    299,
                    142,
                    688,
                    242,
                    147,
                    252,
                    245,
                    151,
                    152,
                    247,
                    220
                ],
                "to_list": [
                    640,
                    738,
                    745,
                    554,
                    779,
                    589,
                    558,
                    142,
                    143,
                    720,
                    727,
                    571,
                    575
                ],
                "inputs": [
                    384,
                    257,
                    385,
                    770,
                    142,
                    1426,
                    281,
                    414,
                    415,
                    680,
                    554,
                    810,
                    556,
                    559,
                    688,
                    564,
                    820,
                    571,
                    573,
                    576,
                    581,
                    765
                ],
                "self.outputs": [
                    260,
                    231,
                    298,
                    143,
                    431,
                    433,
                    243,
                    181,
                    214,
                    246,
                    248,
                    797
                ],
                "outputs": [
                    1360,
                    143
                ],
                "set": [
                    425,
                    1293,
                    1358,
                    1359,
                    147
                ],
                "ValueError": [
                    352,
                    1250,
                    358,
                    1452,
                    591,
                    1328,
                    977,
                    148,
                    184,
                    345,
                    156,
                    1436
                ],
                "x": [
                    260,
                    261,
                    1415,
                    776,
                    778,
                    781,
                    783,
                    784,
                    785,
                    786,
                    1426,
                    1427,
                    789,
                    152,
                    792,
                    154,
                    1434,
                    1435,
                    797,
                    158,
                    798,
                    799,
                    161,
                    1438,
                    1443,
                    1444,
                    425,
                    426,
                    688,
                    433,
                    689,
                    180,
                    181,
                    182,
                    820,
                    821,
                    188,
                    704,
                    705,
                    706,
                    1347,
                    1351,
                    1360,
                    1361,
                    1362,
                    595,
                    214,
                    215,
                    220,
                    221,
                    733,
                    734,
                    751,
                    752,
                    247,
                    248,
                    252,
                    253
                ],
                "cls_name": [
                    165,
                    166,
                    183,
                    184,
                    155,
                    156
                ],
                "layer": [
                    1026,
                    1027,
                    1028,
                    1029,
                    523,
                    524,
                    1037,
                    1038,
                    527,
                    528,
                    1043,
                    532,
                    533,
                    1044,
                    605,
                    609,
                    620,
                    621,
                    637,
                    641,
                    643,
                    650,
                    653,
                    161,
                    162,
                    163,
                    164,
                    175,
                    697,
                    710,
                    717,
                    721,
                    722,
                    215,
                    216,
                    217,
                    221,
                    735,
                    226,
                    227,
                    739,
                    740,
                    747,
                    748,
                    751,
                    753,
                    759,
                    253,
                    254,
                    765,
                    767,
                    770,
                    261,
                    262,
                    773,
                    779,
                    274,
                    276,
                    283,
                    284,
                    285,
                    286,
                    287,
                    290,
                    291,
                    1324,
                    1329,
                    1335,
                    1340,
                    1341,
                    1348,
                    1351,
                    842,
                    843,
                    849,
                    850,
                    1361,
                    1363,
                    858,
                    859,
                    860,
                    862,
                    863,
                    354,
                    355,
                    356,
                    873,
                    375,
                    376,
                    1400,
                    1403,
                    380,
                    381,
                    385,
                    387,
                    899,
                    389,
                    909,
                    912,
                    405,
                    406,
                    917,
                    1432,
                    921,
                    410,
                    411,
                    924,
                    1433,
                    415,
                    1439,
                    417,
                    929,
                    419,
                    1445,
                    1449,
                    437,
                    438,
                    441,
                    442,
                    443,
                    961,
                    962,
                    964,
                    457,
                    458,
                    459,
                    467,
                    468,
                    980,
                    474,
                    475,
                    988,
                    478,
                    479,
                    490,
                    491,
                    1004,
                    1006,
                    1015,
                    502,
                    503,
                    505
                ],
                "node_index": [
                    641,
                    643,
                    261,
                    262,
                    892,
                    651,
                    1035,
                    653,
                    910,
                    1038,
                    912,
                    1041,
                    1044,
                    410,
                    411,
                    922,
                    924,
                    161,
                    1324,
                    1335,
                    1349,
                    1352,
                    1361,
                    1364,
                    215,
                    217,
                    221,
                    253,
                    224,
                    227,
                    1386,
                    1387,
                    630,
                    1270,
                    888,
                    633,
                    380,
                    381,
                    254
                ],
                "tensor_index": [
                    255,
                    261,
                    263,
                    1035,
                    652,
                    653,
                    1039,
                    1041,
                    916,
                    917,
                    1045,
                    928,
                    161,
                    929,
                    1350,
                    1352,
                    1361,
                    1365,
                    215,
                    217,
                    221,
                    889,
                    225,
                    227,
                    631,
                    633,
                    253,
                    895
                ],
                "x._keras_history": [
                    161,
                    261,
                    1361,
                    215,
                    253,
                    221
                ],
                "layer._inbound_nodes": [
                    641,
                    162,
                    163,
                    164,
                    262,
                    1324,
                    1038,
                    849,
                    862,
                    1044,
                    410,
                    380,
                    254
                ],
                "inbound_layers": [
                    164
                ],
                "warnings.warn": [
                    872,
                    166
                ],
                "warnings": [
                    872,
                    166
                ],
                "layer.name": [
                    643,
                    899,
                    653,
                    528,
                    917,
                    284,
                    1439,
                    287,
                    929,
                    291,
                    1445,
                    1449,
                    175,
                    1329,
                    1335,
                    710,
                    609,
                    355,
                    873,
                    759
                ],
                "x.name": [
                    180
                ],
                "self._base_init": [
                    189,
                    294
                ],
                "self._compute_previous_mask": [
                    190
                ],
                "has_arg": [
                    191,
                    296,
                    297,
                    717,
                    735
                ],
                "self.call": [
                    296,
                    297,
                    191
                ],
                "self.built": [
                    1249,
                    195,
                    300
                ],
                "self._is_graph_network": [
                    196,
                    518,
                    295,
                    585,
                    1084,
                    307,
                    407,
                    568,
                    377,
                    828
                ],
                "self._input_layers": [
                    226,
                    198,
                    908,
                    621,
                    590,
                    909,
                    593,
                    274,
                    605
                ],
                "self._output_layers": [
                    290,
                    199,
                    649,
                    650,
                    920,
                    216,
                    921
                ],
                "self._input_coordinates": [
                    200,
                    227,
                    916,
                    910
                ],
                "self._output_coordinates": [
                    928,
                    201,
                    651,
                    652,
                    217,
                    922
                ],
                "self._output_mask_cache": [
                    578,
                    579,
                    266,
                    209,
                    817
                ],
                "self._output_tensor_cache": [
                    561,
                    210,
                    562,
                    814
                ],
                "self._output_shape_cache": [
                    211,
                    660,
                    596,
                    597,
                    824
                ],
                "self._output_layers.append": [
                    216
                ],
                "self._output_coordinates.append": [
                    217
                ],
                "self._input_layers.append": [
                    226
                ],
                "self._input_coordinates.append": [
                    227
                ],
                "nodes": [
                    230,
                    232,
                    617,
                    618,
                    694,
                    695
                ],
                "nodes_by_depth": [
                    230,
                    233,
                    1419,
                    1392,
                    1456,
                    1394,
                    1395,
                    1396,
                    1431
                ],
                "layers": [
                    1410,
                    230,
                    1416,
                    1449,
                    234,
                    1456
                ],
                "layers_by_depth": [
                    1412,
                    230,
                    235,
                    1456,
                    1399,
                    1401,
                    1402,
                    1403,
                    1406
                ],
                "_map_graph_network": [
                    230
                ],
                "self._network_nodes": [
                    864,
                    232,
                    913,
                    851,
                    412,
                    925,
                    382
                ],
                "self._nodes_by_depth": [
                    612,
                    233,
                    617,
                    691,
                    694
                ],
                "self._layers_by_depth": [
                    235
                ],
                "Node": [
                    238
                ],
                "_": [
                    581,
                    743,
                    680,
                    556,
                    564,
                    245,
                    246,
                    725,
                    573
                ],
                "x._keras_shape": [
                    778,
                    784,
                    820,
                    247,
                    248
                ],
                "masks": [
                    256,
                    577,
                    258,
                    259,
                    581,
                    679,
                    264,
                    265,
                    680,
                    811,
                    556,
                    558,
                    560,
                    688,
                    564,
                    251,
                    573,
                    575
                ],
                "node": [
                    384,
                    641,
                    262,
                    263,
                    1431,
                    1432,
                    410,
                    1434,
                    414,
                    1443,
                    1324,
                    1327,
                    1332,
                    695,
                    697,
                    698,
                    699,
                    1343,
                    1346,
                    1347,
                    1348,
                    1349,
                    1350,
                    711,
                    712,
                    1354,
                    1355,
                    1356,
                    849,
                    1367,
                    1369,
                    1372,
                    862,
                    889,
                    1378,
                    867,
                    1379,
                    869,
                    870,
                    1384,
                    1385,
                    618,
                    1386,
                    620,
                    876,
                    887,
                    1393,
                    628,
                    629,
                    630,
                    631,
                    884,
                    886,
                    888,
                    1396,
                    380,
                    254,
                    255
                ],
                "mask": [
                    256,
                    806,
                    263,
                    264,
                    265,
                    266,
                    555,
                    575,
                    558,
                    688,
                    689,
                    799,
                    789,
                    792,
                    572,
                    255
                ],
                "node.output_masks": [
                    263,
                    255
                ],
                "masks.append": [
                    256,
                    264
                ],
                "mask_cache_key": [
                    257,
                    258,
                    266
                ],
                "object_list_uid": [
                    576,
                    257,
                    258,
                    577,
                    810,
                    811,
                    559,
                    560
                ],
                "unpack_singleton": [
                    599,
                    265,
                    777,
                    813,
                    823,
                    816,
                    662,
                    534,
                    988,
                    638
                ],
                "self.input_names": [
                    284,
                    269
                ],
                "self.output_names": [
                    291,
                    270
                ],
                "self._feed_input_names": [
                    287,
                    271
                ],
                "self._feed_inputs": [
                    272,
                    286
                ],
                "self._feed_input_shapes": [
                    288,
                    273
                ],
                "i": [
                    649,
                    650,
                    651,
                    652,
                    908,
                    909,
                    910,
                    656,
                    274,
                    916,
                    920,
                    921,
                    282,
                    922,
                    288,
                    928,
                    1346,
                    1347,
                    1348,
                    1349,
                    1350,
                    604,
                    605,
                    606,
                    1384,
                    1385,
                    1386,
                    886,
                    887,
                    888,
                    889
                ],
                "enumerate": [
                    656,
                    849,
                    274,
                    410,
                    380,
                    862
                ],
                "isinstance": [
                    425,
                    426,
                    527,
                    1200,
                    305,
                    276,
                    661,
                    598
                ],
                "InputLayer": [
                    276
                ],
                "TypeError": [
                    528,
                    1209,
                    277,
                    871
                ],
                "format": [
                    278
                ],
                "layer.__class__.__name__": [
                    859,
                    283
                ],
                "layer.__class__": [
                    859,
                    843,
                    283
                ],
                "self.input_names.append": [
                    284
                ],
                "layer.is_placeholder": [
                    285
                ],
                "self._feed_inputs.append": [
                    286
                ],
                "layer.input": [
                    286
                ],
                "self._feed_input_names.append": [
                    287
                ],
                "self._feed_input_shapes.append": [
                    288
                ],
                "_keras_shape": [
                    288
                ],
                "self.output_names.append": [
                    291
                ],
                "value": [
                    305,
                    314,
                    315,
                    316
                ],
                "Network": [
                    305,
                    843,
                    316
                ],
                "is_graph_network": [
                    313,
                    307
                ],
                "AttributeError": [
                    308
                ],
                "RuntimeError": [
                    309
                ],
                "self._layers.append": [
                    315
                ],
                "__setattr__": [
                    316
                ],
                "super": [
                    316
                ],
                "property": [
                    510,
                    360,
                    392,
                    429,
                    462,
                    435,
                    471,
                    445,
                    318
                ],
                "index": [
                    344,
                    346,
                    349,
                    343
                ],
                "self.layers": [
                    1161,
                    1165,
                    405,
                    438,
                    441,
                    457,
                    842,
                    467,
                    344,
                    858,
                    474,
                    347,
                    349,
                    478,
                    1119,
                    354,
                    490,
                    502,
                    375
                ],
                "self.stateful": [
                    372
                ],
                "updates": [
                    385,
                    387,
                    389,
                    390,
                    374
                ],
                "node_key": [
                    864,
                    924,
                    925,
                    912,
                    913,
                    850,
                    851,
                    915,
                    853,
                    1335,
                    927,
                    1337,
                    411,
                    412,
                    381,
                    382,
                    863
                ],
                "self._node_key": [
                    924,
                    912,
                    850,
                    411,
                    892,
                    381,
                    863
                ],
                "node.input_tensors": [
                    384,
                    1347,
                    1434,
                    698,
                    414
                ],
                "layer.get_updates_for": [
                    385,
                    387,
                    765,
                    767
                ],
                "layer.updates": [
                    459,
                    389
                ],
                "losses": [
                    417,
                    419,
                    422,
                    425,
                    426,
                    404,
                    415
                ],
                "layer.get_losses_for": [
                    417,
                    770,
                    773,
                    415
                ],
                "layer.losses": [
                    419
                ],
                "self.get_losses_for": [
                    422
                ],
                "unique_tensors": [
                    424,
                    427
                ],
                "list": [
                    612,
                    424,
                    1419,
                    527,
                    691,
                    661,
                    598,
                    1406
                ],
                "float": [
                    425,
                    426
                ],
                "int": [
                    425,
                    426
                ],
                "non_tensors": [
                    426,
                    427
                ],
                "any": [
                    433,
                    780,
                    437
                ],
                "x._uses_learning_phase": [
                    433,
                    786,
                    781
                ],
                "layer.stateful": [
                    458,
                    438
                ],
                "getattr": [
                    785,
                    442,
                    523
                ],
                "layer.reset_states": [
                    443
                ],
                "state_updates": [
                    456,
                    459,
                    460
                ],
                "weights": [
                    480,
                    481,
                    489,
                    491,
                    492,
                    466,
                    468,
                    469,
                    507,
                    504,
                    473,
                    475
                ],
                "layer.trainable_weights": [
                    468,
                    479
                ],
                "layer.non_trainable_weights": [
                    475
                ],
                "trainable_weights": [
                    480,
                    477,
                    479
                ],
                "layer.weights": [
                    505,
                    491,
                    503
                ],
                "K.batch_get_value": [
                    492
                ],
                "tuples": [
                    506,
                    508,
                    501
                ],
                "num_param": [
                    504,
                    507,
                    503
                ],
                "layer_weights": [
                    504,
                    505
                ],
                "sw": [
                    505,
                    506
                ],
                "w": [
                    505,
                    506
                ],
                "zip": [
                    688,
                    505,
                    789,
                    783
                ],
                "tuples.append": [
                    506
                ],
                "K.batch_set_value": [
                    508
                ],
                "specs": [
                    522,
                    533,
                    525,
                    534
                ],
                "layer.input_spec": [
                    533,
                    524,
                    532,
                    527
                ],
                "specs.append": [
                    525
                ],
                "range": [
                    642,
                    1346,
                    680,
                    649,
                    1384,
                    556,
                    908,
                    628,
                    886,
                    920,
                    604,
                    573
                ],
                "cache_key": [
                    576,
                    577,
                    578,
                    579,
                    810,
                    811,
                    814,
                    559,
                    560,
                    561,
                    562,
                    595,
                    596,
                    597,
                    660,
                    817,
                    821,
                    824
                ],
                "output_tensors": [
                    1033,
                    1038,
                    783,
                    1044,
                    1045,
                    790,
                    1046,
                    794,
                    805,
                    813,
                    814,
                    564,
                    565,
                    825,
                    720,
                    725,
                    738,
                    743,
                    752,
                    756,
                    760
                ],
                "self.run_internal_graph": [
                    564,
                    581
                ],
                "output_masks": [
                    740,
                    581,
                    582,
                    742,
                    743,
                    745,
                    806,
                    791,
                    816,
                    817,
                    722,
                    724,
                    725,
                    756,
                    727,
                    825,
                    761,
                    795
                ],
                "NotImplementedError": [
                    832,
                    587,
                    1085
                ],
                "input_shapes": [
                    777,
                    638,
                    779,
                    589,
                    590,
                    595,
                    627,
                    820,
                    821,
                    635,
                    604,
                    606
                ],
                "input_shape": [
                    610,
                    589,
                    592,
                    634,
                    635,
                    606
                ],
                "join": [
                    595,
                    821
                ],
                "output_shapes": [
                    640,
                    642,
                    644,
                    647,
                    658,
                    660,
                    661,
                    662,
                    663,
                    796,
                    800,
                    802,
                    804,
                    819,
                    823,
                    824,
                    825,
                    597,
                    598,
                    599,
                    600
                ],
                "layers_to_output_shapes": [
                    610,
                    644,
                    657,
                    658,
                    634,
                    603
                ],
                "shape_key": [
                    609,
                    610,
                    643,
                    644,
                    653,
                    654,
                    632,
                    633,
                    634
                ],
                "depth_keys": [
                    1411,
                    612,
                    613,
                    615,
                    616,
                    1419,
                    1420,
                    691,
                    692,
                    693,
                    1430,
                    1406,
                    1407
                ],
                "self._nodes_by_depth.keys": [
                    691,
                    612
                ],
                "depth_keys.sort": [
                    1420,
                    692,
                    613,
                    1407
                ],
                "depth": [
                    1411,
                    1412,
                    1430,
                    1431,
                    693,
                    694,
                    1369,
                    1377,
                    1378,
                    1379,
                    616,
                    617,
                    1389,
                    1393,
                    1394,
                    1395,
                    1396,
                    1400,
                    1401,
                    1402,
                    1403
                ],
                "node.outbound_layer": [
                    1378,
                    620,
                    1432,
                    697,
                    1372
                ],
                "j": [
                    642,
                    643,
                    644,
                    628,
                    629,
                    630,
                    631
                ],
                "node.inbound_layers": [
                    1346,
                    1348,
                    1384,
                    1385,
                    887,
                    884,
                    628,
                    629,
                    886
                ],
                "inbound_layer": [
                    1385,
                    1387,
                    978,
                    979,
                    629,
                    982,
                    887,
                    632,
                    892,
                    893
                ],
                "node.node_indices": [
                    888,
                    1386,
                    1349,
                    630
                ],
                "node.tensor_indices": [
                    889,
                    1350,
                    631
                ],
                "inbound_layer.name": [
                    632,
                    893
                ],
                "input_shapes.append": [
                    635
                ],
                "output_shape": [
                    640,
                    637
                ],
                "layer.compute_output_shape": [
                    779,
                    637
                ],
                "layer._inbound_nodes.index": [
                    641
                ],
                "output_shape_keys": [
                    648,
                    656,
                    654
                ],
                "output_shape_keys.append": [
                    654
                ],
                "key": [
                    656,
                    657,
                    658
                ],
                "output_shapes.append": [
                    658,
                    802
                ],
                "tensor_map": [
                    705,
                    706,
                    687,
                    689,
                    792,
                    798,
                    799
                ],
                "y": [
                    688,
                    689,
                    789,
                    792
                ],
                "id": [
                    705,
                    706,
                    689,
                    792,
                    798,
                    799
                ],
                "reference_input_tensors": [
                    704,
                    698,
                    708
                ],
                "reference_output_tensors": [
                    699,
                    789
                ],
                "node.output_tensors": [
                    699,
                    1443
                ],
                "computed_data": [
                    706,
                    708,
                    715,
                    716,
                    733,
                    734,
                    703
                ],
                "computed_data.append": [
                    706
                ],
                "K.name_scope": [
                    749,
                    710
                ],
                "node.arguments": [
                    867,
                    869,
                    870,
                    711,
                    712,
                    876
                ],
                "computed_tensor": [
                    728,
                    721,
                    722,
                    716
                ],
                "computed_mask": [
                    723,
                    716,
                    731,
                    719
                ],
                "layer.call": [
                    721,
                    739,
                    717,
                    735
                ],
                "layer.compute_mask": [
                    722,
                    740
                ],
                "computed_tensors": [
                    770,
                    739,
                    740,
                    776,
                    765,
                    778,
                    781,
                    754,
                    728,
                    733
                ],
                "computed_masks": [
                    737,
                    731,
                    741,
                    734
                ],
                "layer.activity_regularizer": [
                    748,
                    751
                ],
                "regularization_losses": [
                    753,
                    750
                ],
                "layer.add_loss": [
                    753
                ],
                "Exception": [
                    757
                ],
                "self.add_update": [
                    765,
                    767
                ],
                "self.add_loss": [
                    770,
                    773
                ],
                "all": [
                    776
                ],
                "shapes": [
                    779,
                    783
                ],
                "uses_learning_phase": [
                    786,
                    780
                ],
                "s": [
                    784,
                    783
                ],
                "_u": [
                    785,
                    786
                ],
                "tensor": [
                    800,
                    801,
                    805,
                    1328,
                    799
                ],
                "shape": [
                    801,
                    802
                ],
                "tensor._keras_shape": [
                    801
                ],
                "output_tensors.append": [
                    1045,
                    805
                ],
                "output_masks.append": [
                    806
                ],
                "config": [
                    1025,
                    930,
                    834,
                    931,
                    1031,
                    904,
                    1178,
                    1034,
                    1040,
                    918,
                    1175,
                    1018
                ],
                "node_conversion_map": [
                    841,
                    915,
                    853,
                    891,
                    927
                ],
                "issubclass": [
                    843
                ],
                "kept_nodes": [
                    848,
                    854,
                    853,
                    846
                ],
                "original_node_index": [
                    849,
                    850,
                    862,
                    863
                ],
                "layer_configs": [
                    904,
                    857,
                    898
                ],
                "layer_class_name": [
                    859,
                    900
                ],
                "layer_config": [
                    860,
                    901
                ],
                "layer.get_config": [
                    860
                ],
                "filtered_inbound_nodes": [
                    897,
                    861,
                    902
                ],
                "json.dumps": [
                    1212,
                    869
                ],
                "json": [
                    1212,
                    869
                ],
                "node_data": [
                    897,
                    962,
                    964,
                    1028,
                    1029,
                    968,
                    1010,
                    980,
                    885,
                    1015,
                    893
                ],
                "new_node_index": [
                    929,
                    915,
                    917,
                    891,
                    894,
                    927
                ],
                "node_conversion_map.get": [
                    891
                ],
                "node_data.append": [
                    893
                ],
                "filtered_inbound_nodes.append": [
                    897
                ],
                "layer_configs.append": [
                    898
                ],
                "model_inputs": [
                    907,
                    917,
                    918
                ],
                "model_inputs.append": [
                    917
                ],
                "model_outputs": [
                    929,
                    930,
                    919
                ],
                "model_outputs.append": [
                    929
                ],
                "copy.deepcopy": [
                    931
                ],
                "copy": [
                    931
                ],
                "created_layers": [
                    1026,
                    1036,
                    1037,
                    1006,
                    978,
                    1042,
                    1043,
                    951
                ],
                "unprocessed_nodes": [
                    1024,
                    961,
                    962,
                    1027,
                    964,
                    1028,
                    958
                ],
                "append": [
                    1396,
                    1403,
                    964
                ],
                "input_tensors": [
                    967,
                    1032,
                    1039,
                    1046,
                    983,
                    987,
                    988
                ],
                "input_data": [
                    968,
                    969,
                    970,
                    971,
                    972,
                    974,
                    975
                ],
                "inbound_layer_name": [
                    969,
                    978
                ],
                "inbound_node_index": [
                    970,
                    979,
                    982
                ],
                "inbound_tensor_index": [
                    984,
                    971
                ],
                "inbound_layer._inbound_nodes": [
                    1387,
                    979,
                    982
                ],
                "add_unprocessed_node": [
                    980,
                    1015
                ],
                "inbound_node": [
                    1387,
                    1388,
                    1389,
                    982,
                    984
                ],
                "input_tensors.append": [
                    1039,
                    983
                ],
                "inbound_node.output_tensors": [
                    984
                ],
                "layer_name": [
                    999,
                    1035,
                    1036,
                    1037,
                    1006,
                    1041,
                    1042,
                    1043,
                    1270
                ],
                "layer_data": [
                    1025,
                    1026,
                    999,
                    1034,
                    1035,
                    1004,
                    1040,
                    1009,
                    1041,
                    1018,
                    1019
                ],
                "deserialize_layer": [
                    1004
                ],
                "custom_objects": [
                    1005
                ],
                "inbound_nodes_data": [
                    1009,
                    1010
                ],
                "process_layer": [
                    1019
                ],
                "unprocessed_nodes.pop": [
                    1028
                ],
                "process_node": [
                    1029
                ],
                "config.get": [
                    1031
                ],
                "layer_output_tensors": [
                    1044,
                    1045,
                    1038,
                    1039
                ],
                "cls": [
                    1046
                ],
                "classmethod": [
                    933
                ],
                "save_model": [
                    1087
                ],
                "filepath": [
                    1156,
                    1114,
                    1115,
                    1118,
                    1087
                ],
                "overwrite": [
                    1114,
                    1087
                ],
                "include_optimizer": [
                    1087
                ],
                "os.path.isfile": [
                    1114
                ],
                "os.path": [
                    1114
                ],
                "os": [
                    1114
                ],
                "proceed": [
                    1115,
                    1116
                ],
                "ask_to_proceed_with_overwrite": [
                    1115
                ],
                "h5py.File": [
                    1156,
                    1118
                ],
                "f": [
                    1120,
                    1156,
                    1157,
                    1158,
                    1161,
                    1165,
                    1118,
                    1119
                ],
                "saving.save_weights_to_hdf5_group": [
                    1119
                ],
                "saving": [
                    1089,
                    1122,
                    1160,
                    1164,
                    1262,
                    1265,
                    1119
                ],
                "f.flush": [
                    1120
                ],
                "saving.allow_write_to_gcs": [
                    1089
                ],
                "f.attrs": [
                    1157
                ],
                "by_name": [
                    1159
                ],
                "saving.load_weights_from_hdf5_group_by_name": [
                    1160
                ],
                "skip_mismatch": [
                    1161
                ],
                "reshape": [
                    1162,
                    1165
                ],
                "saving.load_weights_from_hdf5_group": [
                    1164
                ],
                "saving.allow_read_from_gcs": [
                    1122
                ],
                "self.get_config": [
                    1175
                ],
                "model_config": [
                    1176,
                    1211,
                    1212,
                    1182
                ],
                "keras_version": [
                    1179
                ],
                "K.backend": [
                    1180
                ],
                "__module__": [
                    1199
                ],
                "type": [
                    1206,
                    1199
                ],
                "obj": [
                    1199,
                    1200,
                    1201,
                    1203,
                    1206,
                    1207,
                    1209
                ],
                "np.__name__": [
                    1199
                ],
                "np": [
                    1200,
                    1199
                ],
                "np.ndarray": [
                    1200
                ],
                "obj.tolist": [
                    1201
                ],
                "obj.item": [
                    1203
                ],
                "__name__": [
                    1206
                ],
                "type.__name__": [
                    1206
                ],
                "obj.__name__": [
                    1207
                ],
                "self._updated_config": [
                    1211,
                    1231
                ],
                "get_json_type": [
                    1212
                ],
                "yaml.dump": [
                    1231
                ],
                "yaml": [
                    1231
                ],
                "print_layer_summary": [
                    1256
                ],
                "line_length": [
                    1257
                ],
                "positions": [
                    1258
                ],
                "print_fn": [
                    1259
                ],
                "saving.pickle_model": [
                    1262
                ],
                "model": [
                    1265,
                    1266
                ],
                "saving.unpickle_model": [
                    1265
                ],
                "state": [
                    1265
                ],
                "self.__dict__.update": [
                    1266
                ],
                "self.__dict__": [
                    1266
                ],
                "model.__dict__": [
                    1266
                ],
                "network_nodes": [
                    1456,
                    1337,
                    1293
                ],
                "nodes_depths": [
                    1379,
                    1388,
                    1389,
                    1294,
                    1393,
                    1369
                ],
                "layers_depths": [
                    1400,
                    1378,
                    1372,
                    1295
                ],
                "layer_indices": [
                    1296,
                    1340,
                    1341,
                    1415
                ],
                "nodes_in_decreasing_depth": [
                    1297,
                    1356,
                    1367
                ],
                "nodes_in_progress": [
                    1351,
                    1355,
                    1359,
                    1327,
                    1362,
                    1343
                ],
                "finished_nodes": [
                    1351,
                    1354,
                    1358,
                    1362,
                    1332
                ],
                "_make_node_key": [
                    1335
                ],
                "network_nodes.add": [
                    1337
                ],
                "nodes_in_progress.add": [
                    1343
                ],
                "build_map": [
                    1362,
                    1351
                ],
                "finished_nodes.add": [
                    1354
                ],
                "nodes_in_progress.remove": [
                    1355
                ],
                "nodes_in_decreasing_depth.append": [
                    1356
                ],
                "reversed": [
                    1367
                ],
                "nodes_depths.setdefault": [
                    1369
                ],
                "previous_depth": [
                    1388,
                    1377,
                    1372,
                    1389
                ],
                "layers_depths.get": [
                    1372
                ],
                "max": [
                    1377,
                    1389
                ],
                "nodes_depths.get": [
                    1388
                ],
                "nodes_depths.items": [
                    1393
                ],
                "layers_depths.items": [
                    1400
                ],
                "layers_by_depth.keys": [
                    1406
                ],
                "layers_for_depth": [
                    1416,
                    1412,
                    1415
                ],
                "layers_for_depth.sort": [
                    1415
                ],
                "layers.extend": [
                    1416
                ],
                "nodes_by_depth.keys": [
                    1419
                ],
                "computable_tensors": [
                    1425,
                    1444,
                    1427,
                    1435
                ],
                "computable_tensors.append": [
                    1427,
                    1444
                ],
                "layers_with_complete_input": [
                    1442,
                    1429,
                    1445
                ],
                "layers_with_complete_input.append": [
                    1445
                ],
                "all_names": [
                    1449,
                    1450,
                    1451,
                    1453
                ],
                "all_names.count": [
                    1451,
                    1453
                ]
            },
            "filtered_variables_in_file": {
                "h5py": [
                    32,
                    1154,
                    1156,
                    1111,
                    1118
                ],
                "Layer": [
                    305,
                    35
                ],
                "args": [
                    89,
                    90,
                    93
                ],
                "kwargs": [
                    896,
                    1212,
                    712,
                    714,
                    973,
                    718,
                    719,
                    975,
                    721,
                    1231,
                    90,
                    91,
                    988,
                    93,
                    96,
                    736,
                    737,
                    739,
                    870,
                    881,
                    883
                ],
                "self._init_graph_network": [
                    93
                ],
                "self": [
                    518,
                    523,
                    561,
                    562,
                    564,
                    568,
                    1084,
                    1087,
                    578,
                    579,
                    581,
                    585,
                    590,
                    593,
                    596,
                    597,
                    93,
                    605,
                    1119,
                    96,
                    612,
                    617,
                    108,
                    621,
                    110,
                    115,
                    116,
                    117,
                    118,
                    120,
                    121,
                    123,
                    126,
                    127,
                    128,
                    129,
                    133,
                    136,
                    137,
                    649,
                    650,
                    140,
                    651,
                    142,
                    143,
                    652,
                    1161,
                    1165,
                    147,
                    660,
                    151,
                    152,
                    1175,
                    1177,
                    155,
                    165,
                    688,
                    691,
                    181,
                    694,
                    183,
                    1211,
                    189,
                    190,
                    191,
                    192,
                    195,
                    196,
                    198,
                    199,
                    200,
                    201,
                    1231,
                    209,
                    210,
                    211,
                    214,
                    216,
                    217,
                    220,
                    1249,
                    226,
                    227,
                    231,
                    232,
                    233,
                    234,
                    235,
                    1256,
                    238,
                    1262,
                    242,
                    243,
                    1266,
                    245,
                    246,
                    247,
                    248,
                    252,
                    765,
                    767,
                    770,
                    260,
                    773,
                    266,
                    269,
                    270,
                    271,
                    272,
                    273,
                    274,
                    284,
                    797,
                    286,
                    287,
                    288,
                    290,
                    291,
                    294,
                    295,
                    296,
                    297,
                    298,
                    299,
                    300,
                    814,
                    817,
                    307,
                    824,
                    314,
                    315,
                    316,
                    828,
                    320,
                    835,
                    842,
                    850,
                    851,
                    344,
                    858,
                    347,
                    349,
                    863,
                    864,
                    354,
                    372,
                    375,
                    377,
                    892,
                    381,
                    382,
                    908,
                    909,
                    910,
                    912,
                    913,
                    916,
                    405,
                    407,
                    920,
                    921,
                    922,
                    411,
                    412,
                    924,
                    925,
                    928,
                    422,
                    431,
                    433,
                    438,
                    441,
                    457,
                    464,
                    467,
                    474,
                    476,
                    478,
                    490,
                    502
                ],
                "self._init_subclassed_network": [
                    96
                ],
                "interfaces.legacy_model_constructor_support": [
                    86
                ],
                "interfaces": [
                    86
                ],
                "name": [
                    355,
                    294,
                    358,
                    1031,
                    1450,
                    107,
                    1451,
                    109,
                    110,
                    1452,
                    1453,
                    1046,
                    316,
                    189,
                    351
                ],
                "prefix": [
                    108,
                    109
                ],
                "self.__class__.__name__.lower": [
                    108
                ],
                "self.__class__.__name__": [
                    165,
                    108,
                    183,
                    1177,
                    155
                ],
                "self.__class__": [
                    165,
                    108,
                    183,
                    1177,
                    155
                ],
                "K.get_uid": [
                    109
                ],
                "K": [
                    710,
                    492,
                    749,
                    109,
                    1180,
                    508
                ],
                "self.name": [
                    835,
                    110
                ],
                "self.trainable": [
                    464,
                    476,
                    115,
                    372
                ],
                "self._is_compiled": [
                    116
                ],
                "self._expects_training_arg": [
                    296,
                    117
                ],
                "self._initial_weights": [
                    118
                ],
                "self.supports_masking": [
                    120
                ],
                "self.optimizer": [
                    123
                ],
                "self._updates": [
                    126
                ],
                "self._losses": [
                    127
                ],
                "self._per_input_losses": [
                    128
                ],
                "self._per_input_updates": [
                    129
                ],
                "self._layers": [
                    320,
                    133,
                    234,
                    314,
                    315
                ],
                "self._outbound_nodes": [
                    136
                ],
                "self._inbound_nodes": [
                    137
                ],
                "self._uses_inputs_arg": [
                    297,
                    140
                ],
                "self.inputs": [
                    288,
                    231,
                    299,
                    142,
                    688,
                    242,
                    147,
                    252,
                    245,
                    151,
                    152,
                    247,
                    220
                ],
                "to_list": [
                    640,
                    738,
                    745,
                    554,
                    779,
                    589,
                    558,
                    142,
                    143,
                    720,
                    727,
                    571,
                    575
                ],
                "inputs": [
                    384,
                    257,
                    385,
                    770,
                    142,
                    1426,
                    281,
                    414,
                    415,
                    680,
                    554,
                    810,
                    556,
                    559,
                    688,
                    564,
                    820,
                    571,
                    573,
                    576,
                    581,
                    765
                ],
                "self.outputs": [
                    260,
                    231,
                    298,
                    143,
                    431,
                    433,
                    243,
                    181,
                    214,
                    246,
                    248,
                    797
                ],
                "outputs": [
                    1360,
                    143
                ],
                "x": [
                    260,
                    261,
                    1415,
                    776,
                    778,
                    781,
                    783,
                    784,
                    785,
                    786,
                    1426,
                    1427,
                    789,
                    152,
                    792,
                    154,
                    1434,
                    1435,
                    797,
                    158,
                    798,
                    799,
                    161,
                    1438,
                    1443,
                    1444,
                    425,
                    426,
                    688,
                    433,
                    689,
                    180,
                    181,
                    182,
                    820,
                    821,
                    188,
                    704,
                    705,
                    706,
                    1347,
                    1351,
                    1360,
                    1361,
                    1362,
                    595,
                    214,
                    215,
                    220,
                    221,
                    733,
                    734,
                    751,
                    752,
                    247,
                    248,
                    252,
                    253
                ],
                "cls_name": [
                    165,
                    166,
                    183,
                    184,
                    155,
                    156
                ],
                "layer": [
                    1026,
                    1027,
                    1028,
                    1029,
                    523,
                    524,
                    1037,
                    1038,
                    527,
                    528,
                    1043,
                    532,
                    533,
                    1044,
                    605,
                    609,
                    620,
                    621,
                    637,
                    641,
                    643,
                    650,
                    653,
                    161,
                    162,
                    163,
                    164,
                    175,
                    697,
                    710,
                    717,
                    721,
                    722,
                    215,
                    216,
                    217,
                    221,
                    735,
                    226,
                    227,
                    739,
                    740,
                    747,
                    748,
                    751,
                    753,
                    759,
                    253,
                    254,
                    765,
                    767,
                    770,
                    261,
                    262,
                    773,
                    779,
                    274,
                    276,
                    283,
                    284,
                    285,
                    286,
                    287,
                    290,
                    291,
                    1324,
                    1329,
                    1335,
                    1340,
                    1341,
                    1348,
                    1351,
                    842,
                    843,
                    849,
                    850,
                    1361,
                    1363,
                    858,
                    859,
                    860,
                    862,
                    863,
                    354,
                    355,
                    356,
                    873,
                    375,
                    376,
                    1400,
                    1403,
                    380,
                    381,
                    385,
                    387,
                    899,
                    389,
                    909,
                    912,
                    405,
                    406,
                    917,
                    1432,
                    921,
                    410,
                    411,
                    924,
                    1433,
                    415,
                    1439,
                    417,
                    929,
                    419,
                    1445,
                    1449,
                    437,
                    438,
                    441,
                    442,
                    443,
                    961,
                    962,
                    964,
                    457,
                    458,
                    459,
                    467,
                    468,
                    980,
                    474,
                    475,
                    988,
                    478,
                    479,
                    490,
                    491,
                    1004,
                    1006,
                    1015,
                    502,
                    503,
                    505
                ],
                "node_index": [
                    641,
                    643,
                    261,
                    262,
                    892,
                    651,
                    1035,
                    653,
                    910,
                    1038,
                    912,
                    1041,
                    1044,
                    410,
                    411,
                    922,
                    924,
                    161,
                    1324,
                    1335,
                    1349,
                    1352,
                    1361,
                    1364,
                    215,
                    217,
                    221,
                    253,
                    224,
                    227,
                    1386,
                    1387,
                    630,
                    1270,
                    888,
                    633,
                    380,
                    381,
                    254
                ],
                "tensor_index": [
                    255,
                    261,
                    263,
                    1035,
                    652,
                    653,
                    1039,
                    1041,
                    916,
                    917,
                    1045,
                    928,
                    161,
                    929,
                    1350,
                    1352,
                    1361,
                    1365,
                    215,
                    217,
                    221,
                    889,
                    225,
                    227,
                    631,
                    633,
                    253,
                    895
                ],
                "x._keras_history": [
                    161,
                    261,
                    1361,
                    215,
                    253,
                    221
                ],
                "layer._inbound_nodes": [
                    641,
                    162,
                    163,
                    164,
                    262,
                    1324,
                    1038,
                    849,
                    862,
                    1044,
                    410,
                    380,
                    254
                ],
                "inbound_layers": [
                    164
                ],
                "warnings.warn": [
                    872,
                    166
                ],
                "warnings": [
                    872,
                    166
                ],
                "layer.name": [
                    643,
                    899,
                    653,
                    528,
                    917,
                    284,
                    1439,
                    287,
                    929,
                    291,
                    1445,
                    1449,
                    175,
                    1329,
                    1335,
                    710,
                    609,
                    355,
                    873,
                    759
                ],
                "x.name": [
                    180
                ],
                "self._base_init": [
                    189,
                    294
                ],
                "self._compute_previous_mask": [
                    190
                ],
                "has_arg": [
                    191,
                    296,
                    297,
                    717,
                    735
                ],
                "self.call": [
                    296,
                    297,
                    191
                ],
                "self.built": [
                    1249,
                    195,
                    300
                ],
                "self._is_graph_network": [
                    196,
                    518,
                    295,
                    585,
                    1084,
                    307,
                    407,
                    568,
                    377,
                    828
                ],
                "self._input_layers": [
                    226,
                    198,
                    908,
                    621,
                    590,
                    909,
                    593,
                    274,
                    605
                ],
                "self._output_layers": [
                    290,
                    199,
                    649,
                    650,
                    920,
                    216,
                    921
                ],
                "self._input_coordinates": [
                    200,
                    227,
                    916,
                    910
                ],
                "self._output_coordinates": [
                    928,
                    201,
                    651,
                    652,
                    217,
                    922
                ],
                "self._output_mask_cache": [
                    578,
                    579,
                    266,
                    209,
                    817
                ],
                "self._output_tensor_cache": [
                    561,
                    210,
                    562,
                    814
                ],
                "self._output_shape_cache": [
                    211,
                    660,
                    596,
                    597,
                    824
                ],
                "self._output_layers.append": [
                    216
                ],
                "self._output_coordinates.append": [
                    217
                ],
                "self._input_layers.append": [
                    226
                ],
                "self._input_coordinates.append": [
                    227
                ],
                "nodes": [
                    230,
                    232,
                    617,
                    618,
                    694,
                    695
                ],
                "nodes_by_depth": [
                    230,
                    233,
                    1419,
                    1392,
                    1456,
                    1394,
                    1395,
                    1396,
                    1431
                ],
                "layers": [
                    1410,
                    230,
                    1416,
                    1449,
                    234,
                    1456
                ],
                "layers_by_depth": [
                    1412,
                    230,
                    235,
                    1456,
                    1399,
                    1401,
                    1402,
                    1403,
                    1406
                ],
                "_map_graph_network": [
                    230
                ],
                "self._network_nodes": [
                    864,
                    232,
                    913,
                    851,
                    412,
                    925,
                    382
                ],
                "self._nodes_by_depth": [
                    612,
                    233,
                    617,
                    691,
                    694
                ],
                "self._layers_by_depth": [
                    235
                ],
                "Node": [
                    238
                ],
                "_": [
                    581,
                    743,
                    680,
                    556,
                    564,
                    245,
                    246,
                    725,
                    573
                ],
                "x._keras_shape": [
                    778,
                    784,
                    820,
                    247,
                    248
                ],
                "masks": [
                    256,
                    577,
                    258,
                    259,
                    581,
                    679,
                    264,
                    265,
                    680,
                    811,
                    556,
                    558,
                    560,
                    688,
                    564,
                    251,
                    573,
                    575
                ],
                "node": [
                    384,
                    641,
                    262,
                    263,
                    1431,
                    1432,
                    410,
                    1434,
                    414,
                    1443,
                    1324,
                    1327,
                    1332,
                    695,
                    697,
                    698,
                    699,
                    1343,
                    1346,
                    1347,
                    1348,
                    1349,
                    1350,
                    711,
                    712,
                    1354,
                    1355,
                    1356,
                    849,
                    1367,
                    1369,
                    1372,
                    862,
                    889,
                    1378,
                    867,
                    1379,
                    869,
                    870,
                    1384,
                    1385,
                    618,
                    1386,
                    620,
                    876,
                    887,
                    1393,
                    628,
                    629,
                    630,
                    631,
                    884,
                    886,
                    888,
                    1396,
                    380,
                    254,
                    255
                ],
                "mask": [
                    256,
                    806,
                    263,
                    264,
                    265,
                    266,
                    555,
                    575,
                    558,
                    688,
                    689,
                    799,
                    789,
                    792,
                    572,
                    255
                ],
                "node.output_masks": [
                    263,
                    255
                ],
                "masks.append": [
                    256,
                    264
                ],
                "mask_cache_key": [
                    257,
                    258,
                    266
                ],
                "object_list_uid": [
                    576,
                    257,
                    258,
                    577,
                    810,
                    811,
                    559,
                    560
                ],
                "unpack_singleton": [
                    599,
                    265,
                    777,
                    813,
                    823,
                    816,
                    662,
                    534,
                    988,
                    638
                ],
                "self.input_names": [
                    284,
                    269
                ],
                "self.output_names": [
                    291,
                    270
                ],
                "self._feed_input_names": [
                    287,
                    271
                ],
                "self._feed_inputs": [
                    272,
                    286
                ],
                "self._feed_input_shapes": [
                    288,
                    273
                ],
                "i": [
                    649,
                    650,
                    651,
                    652,
                    908,
                    909,
                    910,
                    656,
                    274,
                    916,
                    920,
                    921,
                    282,
                    922,
                    288,
                    928,
                    1346,
                    1347,
                    1348,
                    1349,
                    1350,
                    604,
                    605,
                    606,
                    1384,
                    1385,
                    1386,
                    886,
                    887,
                    888,
                    889
                ],
                "InputLayer": [
                    276
                ],
                "layer.__class__.__name__": [
                    859,
                    283
                ],
                "layer.__class__": [
                    859,
                    843,
                    283
                ],
                "self.input_names.append": [
                    284
                ],
                "layer.is_placeholder": [
                    285
                ],
                "self._feed_inputs.append": [
                    286
                ],
                "layer.input": [
                    286
                ],
                "self._feed_input_names.append": [
                    287
                ],
                "self._feed_input_shapes.append": [
                    288
                ],
                "_keras_shape": [
                    288
                ],
                "self.output_names.append": [
                    291
                ],
                "value": [
                    305,
                    314,
                    315,
                    316
                ],
                "Network": [
                    305,
                    843,
                    316
                ],
                "is_graph_network": [
                    313,
                    307
                ],
                "self._layers.append": [
                    315
                ],
                "__setattr__": [
                    316
                ],
                "index": [
                    344,
                    346,
                    349,
                    343
                ],
                "self.layers": [
                    1161,
                    1165,
                    405,
                    438,
                    441,
                    457,
                    842,
                    467,
                    344,
                    858,
                    474,
                    347,
                    349,
                    478,
                    1119,
                    354,
                    490,
                    502,
                    375
                ],
                "self.stateful": [
                    372
                ],
                "updates": [
                    385,
                    387,
                    389,
                    390,
                    374
                ],
                "node_key": [
                    864,
                    924,
                    925,
                    912,
                    913,
                    850,
                    851,
                    915,
                    853,
                    1335,
                    927,
                    1337,
                    411,
                    412,
                    381,
                    382,
                    863
                ],
                "self._node_key": [
                    924,
                    912,
                    850,
                    411,
                    892,
                    381,
                    863
                ],
                "node.input_tensors": [
                    384,
                    1347,
                    1434,
                    698,
                    414
                ],
                "layer.get_updates_for": [
                    385,
                    387,
                    765,
                    767
                ],
                "layer.updates": [
                    459,
                    389
                ],
                "losses": [
                    417,
                    419,
                    422,
                    425,
                    426,
                    404,
                    415
                ],
                "layer.get_losses_for": [
                    417,
                    770,
                    773,
                    415
                ],
                "layer.losses": [
                    419
                ],
                "self.get_losses_for": [
                    422
                ],
                "unique_tensors": [
                    424,
                    427
                ],
                "non_tensors": [
                    426,
                    427
                ],
                "x._uses_learning_phase": [
                    433,
                    786,
                    781
                ],
                "layer.stateful": [
                    458,
                    438
                ],
                "layer.reset_states": [
                    443
                ],
                "state_updates": [
                    456,
                    459,
                    460
                ],
                "weights": [
                    480,
                    481,
                    489,
                    491,
                    492,
                    466,
                    468,
                    469,
                    507,
                    504,
                    473,
                    475
                ],
                "layer.trainable_weights": [
                    468,
                    479
                ],
                "layer.non_trainable_weights": [
                    475
                ],
                "trainable_weights": [
                    480,
                    477,
                    479
                ],
                "layer.weights": [
                    505,
                    491,
                    503
                ],
                "K.batch_get_value": [
                    492
                ],
                "tuples": [
                    506,
                    508,
                    501
                ],
                "num_param": [
                    504,
                    507,
                    503
                ],
                "layer_weights": [
                    504,
                    505
                ],
                "sw": [
                    505,
                    506
                ],
                "w": [
                    505,
                    506
                ],
                "tuples.append": [
                    506
                ],
                "K.batch_set_value": [
                    508
                ],
                "specs": [
                    522,
                    533,
                    525,
                    534
                ],
                "layer.input_spec": [
                    533,
                    524,
                    532,
                    527
                ],
                "specs.append": [
                    525
                ],
                "cache_key": [
                    576,
                    577,
                    578,
                    579,
                    810,
                    811,
                    814,
                    559,
                    560,
                    561,
                    562,
                    595,
                    596,
                    597,
                    660,
                    817,
                    821,
                    824
                ],
                "output_tensors": [
                    1033,
                    1038,
                    783,
                    1044,
                    1045,
                    790,
                    1046,
                    794,
                    805,
                    813,
                    814,
                    564,
                    565,
                    825,
                    720,
                    725,
                    738,
                    743,
                    752,
                    756,
                    760
                ],
                "self.run_internal_graph": [
                    564,
                    581
                ],
                "output_masks": [
                    740,
                    581,
                    582,
                    742,
                    743,
                    745,
                    806,
                    791,
                    816,
                    817,
                    722,
                    724,
                    725,
                    756,
                    727,
                    825,
                    761,
                    795
                ],
                "input_shapes": [
                    777,
                    638,
                    779,
                    589,
                    590,
                    595,
                    627,
                    820,
                    821,
                    635,
                    604,
                    606
                ],
                "input_shape": [
                    610,
                    589,
                    592,
                    634,
                    635,
                    606
                ],
                "join": [
                    595,
                    821
                ],
                "output_shapes": [
                    640,
                    642,
                    644,
                    647,
                    658,
                    660,
                    661,
                    662,
                    663,
                    796,
                    800,
                    802,
                    804,
                    819,
                    823,
                    824,
                    825,
                    597,
                    598,
                    599,
                    600
                ],
                "layers_to_output_shapes": [
                    610,
                    644,
                    657,
                    658,
                    634,
                    603
                ],
                "shape_key": [
                    609,
                    610,
                    643,
                    644,
                    653,
                    654,
                    632,
                    633,
                    634
                ],
                "depth_keys": [
                    1411,
                    612,
                    613,
                    615,
                    616,
                    1419,
                    1420,
                    691,
                    692,
                    693,
                    1430,
                    1406,
                    1407
                ],
                "self._nodes_by_depth.keys": [
                    691,
                    612
                ],
                "depth_keys.sort": [
                    1420,
                    692,
                    613,
                    1407
                ],
                "depth": [
                    1411,
                    1412,
                    1430,
                    1431,
                    693,
                    694,
                    1369,
                    1377,
                    1378,
                    1379,
                    616,
                    617,
                    1389,
                    1393,
                    1394,
                    1395,
                    1396,
                    1400,
                    1401,
                    1402,
                    1403
                ],
                "node.outbound_layer": [
                    1378,
                    620,
                    1432,
                    697,
                    1372
                ],
                "j": [
                    642,
                    643,
                    644,
                    628,
                    629,
                    630,
                    631
                ],
                "node.inbound_layers": [
                    1346,
                    1348,
                    1384,
                    1385,
                    887,
                    884,
                    628,
                    629,
                    886
                ],
                "inbound_layer": [
                    1385,
                    1387,
                    978,
                    979,
                    629,
                    982,
                    887,
                    632,
                    892,
                    893
                ],
                "node.node_indices": [
                    888,
                    1386,
                    1349,
                    630
                ],
                "node.tensor_indices": [
                    889,
                    1350,
                    631
                ],
                "inbound_layer.name": [
                    632,
                    893
                ],
                "input_shapes.append": [
                    635
                ],
                "output_shape": [
                    640,
                    637
                ],
                "layer.compute_output_shape": [
                    779,
                    637
                ],
                "layer._inbound_nodes.index": [
                    641
                ],
                "output_shape_keys": [
                    648,
                    656,
                    654
                ],
                "output_shape_keys.append": [
                    654
                ],
                "key": [
                    656,
                    657,
                    658
                ],
                "output_shapes.append": [
                    658,
                    802
                ],
                "tensor_map": [
                    705,
                    706,
                    687,
                    689,
                    792,
                    798,
                    799
                ],
                "y": [
                    688,
                    689,
                    789,
                    792
                ],
                "reference_input_tensors": [
                    704,
                    698,
                    708
                ],
                "reference_output_tensors": [
                    699,
                    789
                ],
                "node.output_tensors": [
                    699,
                    1443
                ],
                "computed_data": [
                    706,
                    708,
                    715,
                    716,
                    733,
                    734,
                    703
                ],
                "computed_data.append": [
                    706
                ],
                "K.name_scope": [
                    749,
                    710
                ],
                "node.arguments": [
                    867,
                    869,
                    870,
                    711,
                    712,
                    876
                ],
                "computed_tensor": [
                    728,
                    721,
                    722,
                    716
                ],
                "computed_mask": [
                    723,
                    716,
                    731,
                    719
                ],
                "layer.call": [
                    721,
                    739,
                    717,
                    735
                ],
                "layer.compute_mask": [
                    722,
                    740
                ],
                "computed_tensors": [
                    770,
                    739,
                    740,
                    776,
                    765,
                    778,
                    781,
                    754,
                    728,
                    733
                ],
                "computed_masks": [
                    737,
                    731,
                    741,
                    734
                ],
                "layer.activity_regularizer": [
                    748,
                    751
                ],
                "regularization_losses": [
                    753,
                    750
                ],
                "layer.add_loss": [
                    753
                ],
                "self.add_update": [
                    765,
                    767
                ],
                "self.add_loss": [
                    770,
                    773
                ],
                "shapes": [
                    779,
                    783
                ],
                "uses_learning_phase": [
                    786,
                    780
                ],
                "s": [
                    784,
                    783
                ],
                "_u": [
                    785,
                    786
                ],
                "tensor": [
                    800,
                    801,
                    805,
                    1328,
                    799
                ],
                "shape": [
                    801,
                    802
                ],
                "tensor._keras_shape": [
                    801
                ],
                "output_tensors.append": [
                    1045,
                    805
                ],
                "output_masks.append": [
                    806
                ],
                "config": [
                    1025,
                    930,
                    834,
                    931,
                    1031,
                    904,
                    1178,
                    1034,
                    1040,
                    918,
                    1175,
                    1018
                ],
                "node_conversion_map": [
                    841,
                    915,
                    853,
                    891,
                    927
                ],
                "kept_nodes": [
                    848,
                    854,
                    853,
                    846
                ],
                "original_node_index": [
                    849,
                    850,
                    862,
                    863
                ],
                "layer_configs": [
                    904,
                    857,
                    898
                ],
                "layer_class_name": [
                    859,
                    900
                ],
                "layer_config": [
                    860,
                    901
                ],
                "layer.get_config": [
                    860
                ],
                "filtered_inbound_nodes": [
                    897,
                    861,
                    902
                ],
                "json.dumps": [
                    1212,
                    869
                ],
                "json": [
                    1212,
                    869
                ],
                "node_data": [
                    897,
                    962,
                    964,
                    1028,
                    1029,
                    968,
                    1010,
                    980,
                    885,
                    1015,
                    893
                ],
                "new_node_index": [
                    929,
                    915,
                    917,
                    891,
                    894,
                    927
                ],
                "node_conversion_map.get": [
                    891
                ],
                "node_data.append": [
                    893
                ],
                "filtered_inbound_nodes.append": [
                    897
                ],
                "layer_configs.append": [
                    898
                ],
                "model_inputs": [
                    907,
                    917,
                    918
                ],
                "model_inputs.append": [
                    917
                ],
                "model_outputs": [
                    929,
                    930,
                    919
                ],
                "model_outputs.append": [
                    929
                ],
                "copy.deepcopy": [
                    931
                ],
                "copy": [
                    931
                ],
                "created_layers": [
                    1026,
                    1036,
                    1037,
                    1006,
                    978,
                    1042,
                    1043,
                    951
                ],
                "unprocessed_nodes": [
                    1024,
                    961,
                    962,
                    1027,
                    964,
                    1028,
                    958
                ],
                "append": [
                    1396,
                    1403,
                    964
                ],
                "input_tensors": [
                    967,
                    1032,
                    1039,
                    1046,
                    983,
                    987,
                    988
                ],
                "input_data": [
                    968,
                    969,
                    970,
                    971,
                    972,
                    974,
                    975
                ],
                "inbound_layer_name": [
                    969,
                    978
                ],
                "inbound_node_index": [
                    970,
                    979,
                    982
                ],
                "inbound_tensor_index": [
                    984,
                    971
                ],
                "inbound_layer._inbound_nodes": [
                    1387,
                    979,
                    982
                ],
                "add_unprocessed_node": [
                    980,
                    1015
                ],
                "inbound_node": [
                    1387,
                    1388,
                    1389,
                    982,
                    984
                ],
                "input_tensors.append": [
                    1039,
                    983
                ],
                "inbound_node.output_tensors": [
                    984
                ],
                "layer_name": [
                    999,
                    1035,
                    1036,
                    1037,
                    1006,
                    1041,
                    1042,
                    1043,
                    1270
                ],
                "layer_data": [
                    1025,
                    1026,
                    999,
                    1034,
                    1035,
                    1004,
                    1040,
                    1009,
                    1041,
                    1018,
                    1019
                ],
                "deserialize_layer": [
                    1004
                ],
                "custom_objects": [
                    1005
                ],
                "inbound_nodes_data": [
                    1009,
                    1010
                ],
                "process_layer": [
                    1019
                ],
                "unprocessed_nodes.pop": [
                    1028
                ],
                "process_node": [
                    1029
                ],
                "config.get": [
                    1031
                ],
                "layer_output_tensors": [
                    1044,
                    1045,
                    1038,
                    1039
                ],
                "cls": [
                    1046
                ],
                "save_model": [
                    1087
                ],
                "filepath": [
                    1156,
                    1114,
                    1115,
                    1118,
                    1087
                ],
                "overwrite": [
                    1114,
                    1087
                ],
                "include_optimizer": [
                    1087
                ],
                "os.path.isfile": [
                    1114
                ],
                "os.path": [
                    1114
                ],
                "os": [
                    1114
                ],
                "proceed": [
                    1115,
                    1116
                ],
                "ask_to_proceed_with_overwrite": [
                    1115
                ],
                "h5py.File": [
                    1156,
                    1118
                ],
                "f": [
                    1120,
                    1156,
                    1157,
                    1158,
                    1161,
                    1165,
                    1118,
                    1119
                ],
                "saving.save_weights_to_hdf5_group": [
                    1119
                ],
                "saving": [
                    1089,
                    1122,
                    1160,
                    1164,
                    1262,
                    1265,
                    1119
                ],
                "f.flush": [
                    1120
                ],
                "saving.allow_write_to_gcs": [
                    1089
                ],
                "f.attrs": [
                    1157
                ],
                "by_name": [
                    1159
                ],
                "saving.load_weights_from_hdf5_group_by_name": [
                    1160
                ],
                "skip_mismatch": [
                    1161
                ],
                "reshape": [
                    1162,
                    1165
                ],
                "saving.load_weights_from_hdf5_group": [
                    1164
                ],
                "saving.allow_read_from_gcs": [
                    1122
                ],
                "self.get_config": [
                    1175
                ],
                "model_config": [
                    1176,
                    1211,
                    1212,
                    1182
                ],
                "keras_version": [
                    1179
                ],
                "K.backend": [
                    1180
                ],
                "__module__": [
                    1199
                ],
                "obj": [
                    1199,
                    1200,
                    1201,
                    1203,
                    1206,
                    1207,
                    1209
                ],
                "np.__name__": [
                    1199
                ],
                "np": [
                    1200,
                    1199
                ],
                "np.ndarray": [
                    1200
                ],
                "obj.tolist": [
                    1201
                ],
                "obj.item": [
                    1203
                ],
                "type.__name__": [
                    1206
                ],
                "obj.__name__": [
                    1207
                ],
                "self._updated_config": [
                    1211,
                    1231
                ],
                "get_json_type": [
                    1212
                ],
                "yaml.dump": [
                    1231
                ],
                "yaml": [
                    1231
                ],
                "print_layer_summary": [
                    1256
                ],
                "line_length": [
                    1257
                ],
                "positions": [
                    1258
                ],
                "print_fn": [
                    1259
                ],
                "saving.pickle_model": [
                    1262
                ],
                "model": [
                    1265,
                    1266
                ],
                "saving.unpickle_model": [
                    1265
                ],
                "state": [
                    1265
                ],
                "self.__dict__.update": [
                    1266
                ],
                "self.__dict__": [
                    1266
                ],
                "model.__dict__": [
                    1266
                ],
                "network_nodes": [
                    1456,
                    1337,
                    1293
                ],
                "nodes_depths": [
                    1379,
                    1388,
                    1389,
                    1294,
                    1393,
                    1369
                ],
                "layers_depths": [
                    1400,
                    1378,
                    1372,
                    1295
                ],
                "layer_indices": [
                    1296,
                    1340,
                    1341,
                    1415
                ],
                "nodes_in_decreasing_depth": [
                    1297,
                    1356,
                    1367
                ],
                "nodes_in_progress": [
                    1351,
                    1355,
                    1359,
                    1327,
                    1362,
                    1343
                ],
                "finished_nodes": [
                    1351,
                    1354,
                    1358,
                    1362,
                    1332
                ],
                "_make_node_key": [
                    1335
                ],
                "network_nodes.add": [
                    1337
                ],
                "nodes_in_progress.add": [
                    1343
                ],
                "build_map": [
                    1362,
                    1351
                ],
                "finished_nodes.add": [
                    1354
                ],
                "nodes_in_progress.remove": [
                    1355
                ],
                "nodes_in_decreasing_depth.append": [
                    1356
                ],
                "nodes_depths.setdefault": [
                    1369
                ],
                "previous_depth": [
                    1388,
                    1377,
                    1372,
                    1389
                ],
                "layers_depths.get": [
                    1372
                ],
                "nodes_depths.get": [
                    1388
                ],
                "nodes_depths.items": [
                    1393
                ],
                "layers_depths.items": [
                    1400
                ],
                "layers_by_depth.keys": [
                    1406
                ],
                "layers_for_depth": [
                    1416,
                    1412,
                    1415
                ],
                "layers_for_depth.sort": [
                    1415
                ],
                "layers.extend": [
                    1416
                ],
                "nodes_by_depth.keys": [
                    1419
                ],
                "computable_tensors": [
                    1425,
                    1444,
                    1427,
                    1435
                ],
                "computable_tensors.append": [
                    1427,
                    1444
                ],
                "layers_with_complete_input": [
                    1442,
                    1429,
                    1445
                ],
                "layers_with_complete_input.append": [
                    1445
                ],
                "all_names": [
                    1449,
                    1450,
                    1451,
                    1453
                ],
                "all_names.count": [
                    1451,
                    1453
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/keras_8/tests/keras/engine/test_topology.py",
                "test_function": "test_layer_sharing_at_heterogeneous_depth_order",
                "test_function_code": "def test_layer_sharing_at_heterogeneous_depth_order():\n    # This tests for the bug in this issue\n    # https://github.com/keras-team/keras/issues/11159\n    # It occurs with layer sharing at heterogeneous depth when\n    # the layers need to be applied in an order that differs from\n    # the order that occurs in the config.\n\n    input_shape = (1, 12)\n    input_layer = Input(shape=input_shape)\n\n    A = Dense(12, name='layer_a')\n    r1 = layers.Reshape((12,))(input_layer)\n    Aout1 = A(r1)\n\n    r2 = layers.Reshape((12,))(A(input_layer))\n    Aout2 = A(r2)\n\n    # Note: if the order of the layers in the concat is\n    # changed to ([Aout1, Aout2]) the bug doesn't trigger\n    c1 = layers.concatenate([Aout2, Aout1])\n    output = Dense(2, name='layer_b')(c1)\n\n    M = Model(inputs=input_layer, outputs=output)\n\n    x_val = np.random.random((10,) + input_shape)\n    output_val = M.predict(x_val)\n\n    config = M.get_config()\n    weights = M.get_weights()\n\n    M2 = Model.from_config(config)\n    M2.set_weights(weights)\n\n    output_val_2 = M2.predict(x_val)\n    np.testing.assert_allclose(output_val, output_val_2, atol=1e-6)",
                "test_error": "ValueError: A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got inputs shapes: [(None, 12), (None, 1, 12)]",
                "full_test_error": "def test_layer_sharing_at_heterogeneous_depth_order():\n        # This tests for the bug in this issue\n        # https://github.com/keras-team/keras/issues/11159\n        # It occurs with layer sharing at heterogeneous depth when\n        # the layers need to be applied in an order that differs from\n        # the order that occurs in the config.\n    \n        input_shape = (1, 12)\n        input_layer = Input(shape=input_shape)\n    \n        A = Dense(12, name='layer_a')\n        r1 = layers.Reshape((12,))(input_layer)\n        Aout1 = A(r1)\n    \n        r2 = layers.Reshape((12,))(A(input_layer))\n        Aout2 = A(r2)\n    \n        # Note: if the order of the layers in the concat is\n        # changed to ([Aout1, Aout2]) the bug doesn't trigger\n        c1 = layers.concatenate([Aout2, Aout1])\n        output = Dense(2, name='layer_b')(c1)\n    \n        M = Model(inputs=input_layer, outputs=output)\n    \n        x_val = np.random.random((10,) + input_shape)\n        output_val = M.predict(x_val)\n    \n        config = M.get_config()\n        weights = M.get_weights()\n    \n>       M2 = Model.from_config(config)\n\ntests/keras/engine/test_topology.py:793: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nkeras/engine/network.py:1029: in from_config\n    process_node(layer, node_data)\nkeras/engine/network.py:988: in process_node\n    layer(unpack_singleton(input_tensors), **kwargs)\nkeras/engine/base_layer.py:431: in __call__\n    self.build(unpack_singleton(input_shapes))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <keras.layers.merge.Concatenate object at 0x7eff87cff490>\ninput_shape = [(None, 12), (None, 1, 12)]\n\n    def build(self, input_shape):\n        # Used purely for shape validation.\n        if not isinstance(input_shape, list) or len(input_shape) < 2:\n            raise ValueError('A `Concatenate` layer should be called '\n                             'on a list of at least 2 inputs')\n        if all([shape is None for shape in input_shape]):\n            return\n        reduced_inputs_shapes = [list(shape) for shape in input_shape]\n        shape_set = set()\n        for i in range(len(reduced_inputs_shapes)):\n            del reduced_inputs_shapes[i][self.axis]\n            shape_set.add(tuple(reduced_inputs_shapes[i]))\n        if len(shape_set) > 1:\n            raise ValueError('A `Concatenate` layer requires '\n                             'inputs with matching shapes '\n                             'except for the concat axis. '\n>                            'Got inputs shapes: %s' % (input_shape))\nE           ValueError: A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got inputs shapes: [(None, 12), (None, 1, 12)]\n\nkeras/layers/merge.py:362: ValueError",
                "traceback": "keras/engine/network.py:1029: in from_config\n    process_node(layer, node_data)\nkeras/engine/network.py:988: in process_node\n    layer(unpack_singleton(input_tensors), **kwargs)\nkeras/engine/base_layer.py:431: in __call__\n    self.build(unpack_singleton(input_shapes))",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <keras.layers.merge.Concatenate object at 0x7eff87cff490>\ninput_shape = [(None, 12), (None, 1, 12)]\n\n    def build(self, input_shape):\n        # Used purely for shape validation.\n        if not isinstance(input_shape, list) or len(input_shape) < 2:\n            raise ValueError('A `Concatenate` layer should be called '\n                             'on a list of at least 2 inputs')\n        if all([shape is None for shape in input_shape]):\n            return\n        reduced_inputs_shapes = [list(shape) for shape in input_shape]\n        shape_set = set()\n        for i in range(len(reduced_inputs_shapes)):\n            del reduced_inputs_shapes[i][self.axis]\n            shape_set.add(tuple(reduced_inputs_shapes[i]))\n        if len(shape_set) > 1:\n            raise ValueError('A `Concatenate` layer requires '\n                             'inputs with matching shapes '\n                             'except for the concat axis. '\n>                            'Got inputs shapes: %s' % (input_shape))\nE           ValueError: A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got inputs shapes: [(None, 12), (None, 1, 12)]\n\nkeras/layers/merge.py:362: ValueError",
                "test_function_decorators": []
            }
        ]
    }
}