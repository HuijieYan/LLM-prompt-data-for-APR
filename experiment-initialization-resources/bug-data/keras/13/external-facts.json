{
    "keras:13": {
        "github_issue_title": [
            "fit_generator crashes though keras.utils.data_utils.Sequence was used\n"
        ],
        "github_issue_description": [
            "When model.fit_generator is used with workers=0 and subclasses of keras.utils.data_utils.Sequence for both training and validation data, API of Sequence is not recognized inside evaluate_generator, it raises:\n\n  File \".../keras/legacy/interfaces.py\", line 91, in wrapper\n    return func(*args, **kwargs)\n  File \".../keras/engine/training.py\", line 1415, in fit_generator\n    initial_epoch=initial_epoch)\n  File \".../keras/engine/training_generator.py\", line 230, in fit_generator\n    validation_steps,\n  File \".../keras/legacy/interfaces.py\", line 91, in wrapper\n    return func(*args, **kwargs)\n  File \".../keras/engine/training.py\", line 1469, in evaluate_generator\n    verbose=verbose)\n  File \".../keras/engine/training_generator.py\", line 298, in evaluate_generator\n    else:\nValueError: `steps=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps` or use the `keras.utils.Sequence` class.\nExample code:\n\nfrom keras import Sequential\nfrom keras.layers import Dense\nfrom keras.utils.data_utils import Sequence\nimport numpy as np\n\nclass Dataset(Sequence):\n    def __getitem__(self, index):\n        return np.random.uniform(size=(16, 8)), np.random.uniform(size=(16, 1))\n    def __len__(self):\n        return 128\n\nmodel = Sequential([Dense(4, activation='relu', input_shape=(8,)),\n                    Dense(1, activation='sigmoid')])\nmodel.compile(loss='mse', optimizer='adam')\nmodel.fit_generator(generator=Dataset(), validation_data=Dataset(),\n                    workers=0)\nIssue can be fixed here by replacing:\n\nif isinstance(val_data, Sequence):\n    val_enqueuer_gen = iter(val_data)\nwith\n\nif isinstance(val_data, Sequence):\n    val_enqueuer_gen = iter(val_data)\n    validation_steps = len(val_data)\n"
        ]
    }
}