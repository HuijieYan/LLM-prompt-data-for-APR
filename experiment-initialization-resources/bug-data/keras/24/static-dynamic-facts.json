{
    "keras:24": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/keras_24/keras/callbacks.py": {
            "buggy_functions": [
                {
                    "function_name": "set_model",
                    "function_code": "def set_model(self, model):\n    self.model = model\n    if K.backend() == 'tensorflow':\n        self.sess = K.get_session()\n    if self.histogram_freq and self.merged is None:\n        for layer in self.model.layers:\n\n            for weight in layer.weights:\n                mapped_weight_name = weight.name.replace(':', '_')\n                tf.summary.histogram(mapped_weight_name, weight)\n                if self.write_grads:\n                    grads = model.optimizer.get_gradients(model.total_loss,\n                                                          weight)\n\n                    def is_indexed_slices(grad):\n                        return type(grad).__name__ == 'IndexedSlices'\n                    grads = [\n                        grad.values if is_indexed_slices(grad) else grad\n                        for grad in grads]\n                    tf.summary.histogram('{}_grad'.format(mapped_weight_name), grads)\n                if self.write_images:\n                    w_img = tf.squeeze(weight)\n                    shape = K.int_shape(w_img)\n                    if len(shape) == 2:  # dense layer kernel case\n                        if shape[0] > shape[1]:\n                            w_img = tf.transpose(w_img)\n                            shape = K.int_shape(w_img)\n                        w_img = tf.reshape(w_img, [1,\n                                                   shape[0],\n                                                   shape[1],\n                                                   1])\n                    elif len(shape) == 3:  # convnet case\n                        if K.image_data_format() == 'channels_last':\n                            # switch to channels_first to display\n                            # every kernel as a separate image\n                            w_img = tf.transpose(w_img, perm=[2, 0, 1])\n                            shape = K.int_shape(w_img)\n                        w_img = tf.reshape(w_img, [shape[0],\n                                                   shape[1],\n                                                   shape[2],\n                                                   1])\n                    elif len(shape) == 1:  # bias case\n                        w_img = tf.reshape(w_img, [1,\n                                                   shape[0],\n                                                   1,\n                                                   1])\n                    else:\n                        # not possible to handle 3D convnets etc.\n                        continue\n\n                    shape = K.int_shape(w_img)\n                    assert len(shape) == 4 and shape[-1] in [1, 3, 4]\n                    tf.summary.image(mapped_weight_name, w_img)\n\n            if hasattr(layer, 'output'):\n                tf.summary.histogram('{}_out'.format(layer.name),\n                                     layer.output)\n    self.merged = tf.summary.merge_all()\n\n    if self.write_graph:\n        self.writer = tf.summary.FileWriter(self.log_dir,\n                                            self.sess.graph)\n    else:\n        self.writer = tf.summary.FileWriter(self.log_dir)\n\n    if self.embeddings_freq:\n        embeddings_layer_names = self.embeddings_layer_names\n\n        if not embeddings_layer_names:\n            embeddings_layer_names = [layer.name for layer in self.model.layers\n                                      if type(layer).__name__ == 'Embedding']\n\n        embeddings = {layer.name: layer.weights[0]\n                      for layer in self.model.layers\n                      if layer.name in embeddings_layer_names}\n\n        self.saver = tf.train.Saver(list(embeddings.values()))\n\n        embeddings_metadata = {}\n\n        if not isinstance(self.embeddings_metadata, str):\n            embeddings_metadata = self.embeddings_metadata\n        else:\n            embeddings_metadata = {layer_name: self.embeddings_metadata\n                                   for layer_name in embeddings.keys()}\n\n        config = projector.ProjectorConfig()\n        self.embeddings_ckpt_path = os.path.join(self.log_dir,\n                                                 'keras_embedding.ckpt')\n\n        for layer_name, tensor in embeddings.items():\n            embedding = config.embeddings.add()\n            embedding.tensor_name = tensor.name\n\n            if layer_name in embeddings_metadata:\n                embedding.metadata_path = embeddings_metadata[layer_name]\n\n        projector.visualize_embeddings(self.writer, config)\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 734,
                    "end_line": 831,
                    "variables": {
                        "self.model": [
                            803,
                            739,
                            807,
                            735
                        ],
                        "self": [
                            791,
                            793,
                            794,
                            795,
                            797,
                            799,
                            800,
                            803,
                            807,
                            810,
                            814,
                            815,
                            817,
                            821,
                            831,
                            735,
                            737,
                            738,
                            739,
                            744,
                            754
                        ],
                        "model": [
                            745,
                            735
                        ],
                        "K.backend": [
                            736
                        ],
                        "K": [
                            736,
                            737,
                            770,
                            784,
                            756,
                            760,
                            766
                        ],
                        "self.sess": [
                            737,
                            795
                        ],
                        "K.get_session": [
                            737
                        ],
                        "self.histogram_freq": [
                            738
                        ],
                        "self.merged": [
                            738,
                            791
                        ],
                        "layer": [
                            739,
                            803,
                            741,
                            804,
                            806,
                            807,
                            808,
                            788,
                            789,
                            790
                        ],
                        "self.model.layers": [
                            803,
                            739,
                            807
                        ],
                        "weight": [
                            741,
                            742,
                            743,
                            746,
                            755
                        ],
                        "layer.weights": [
                            741,
                            806
                        ],
                        "mapped_weight_name": [
                            753,
                            786,
                            742,
                            743
                        ],
                        "weight.name.replace": [
                            742
                        ],
                        "weight.name": [
                            742
                        ],
                        "tf.summary.histogram": [
                            753,
                            789,
                            743
                        ],
                        "tf.summary": [
                            743,
                            753,
                            786,
                            789,
                            791,
                            794,
                            797
                        ],
                        "tf": [
                            769,
                            771,
                            743,
                            776,
                            810,
                            791,
                            753,
                            786,
                            755,
                            789,
                            759,
                            761,
                            794,
                            797
                        ],
                        "self.write_grads": [
                            744
                        ],
                        "grads": [
                            752,
                            745,
                            753,
                            750
                        ],
                        "model.optimizer.get_gradients": [
                            745
                        ],
                        "model.optimizer": [
                            745
                        ],
                        "model.total_loss": [
                            745
                        ],
                        "__name__": [
                            804,
                            749
                        ],
                        "type": [
                            804,
                            749
                        ],
                        "grad": [
                            752,
                            749,
                            751
                        ],
                        "is_indexed_slices": [
                            751
                        ],
                        "grad.values": [
                            751
                        ],
                        "format": [
                            753,
                            789
                        ],
                        "self.write_images": [
                            754
                        ],
                        "w_img": [
                            769,
                            770,
                            771,
                            776,
                            784,
                            786,
                            755,
                            756,
                            759,
                            760,
                            761
                        ],
                        "tf.squeeze": [
                            755
                        ],
                        "shape": [
                            770,
                            771,
                            772,
                            773,
                            775,
                            777,
                            784,
                            785,
                            756,
                            757,
                            758,
                            760,
                            762,
                            763,
                            765
                        ],
                        "K.int_shape": [
                            760,
                            784,
                            770,
                            756
                        ],
                        "len": [
                            765,
                            757,
                            785,
                            775
                        ],
                        "tf.transpose": [
                            769,
                            759
                        ],
                        "tf.reshape": [
                            776,
                            761,
                            771
                        ],
                        "K.image_data_format": [
                            766
                        ],
                        "tf.summary.image": [
                            786
                        ],
                        "hasattr": [
                            788
                        ],
                        "layer.name": [
                            808,
                            803,
                            789,
                            806
                        ],
                        "layer.output": [
                            790
                        ],
                        "tf.summary.merge_all": [
                            791
                        ],
                        "self.write_graph": [
                            793
                        ],
                        "self.writer": [
                            794,
                            797,
                            831
                        ],
                        "tf.summary.FileWriter": [
                            794,
                            797
                        ],
                        "self.log_dir": [
                            794,
                            821,
                            797
                        ],
                        "self.sess.graph": [
                            795
                        ],
                        "self.embeddings_freq": [
                            799
                        ],
                        "embeddings_layer_names": [
                            800,
                            808,
                            802,
                            803
                        ],
                        "self.embeddings_layer_names": [
                            800
                        ],
                        "embeddings": [
                            824,
                            810,
                            818,
                            806
                        ],
                        "self.saver": [
                            810
                        ],
                        "tf.train.Saver": [
                            810
                        ],
                        "tf.train": [
                            810
                        ],
                        "list": [
                            810
                        ],
                        "embeddings.values": [
                            810
                        ],
                        "embeddings_metadata": [
                            812,
                            815,
                            817,
                            828,
                            829
                        ],
                        "isinstance": [
                            814
                        ],
                        "self.embeddings_metadata": [
                            817,
                            814,
                            815
                        ],
                        "str": [
                            814
                        ],
                        "layer_name": [
                            817,
                            818,
                            824,
                            828,
                            829
                        ],
                        "embeddings.keys": [
                            818
                        ],
                        "config": [
                            825,
                            820,
                            831
                        ],
                        "projector.ProjectorConfig": [
                            820
                        ],
                        "projector": [
                            820,
                            831
                        ],
                        "self.embeddings_ckpt_path": [
                            821
                        ],
                        "os.path.join": [
                            821
                        ],
                        "os.path": [
                            821
                        ],
                        "os": [
                            821
                        ],
                        "tensor": [
                            824,
                            826
                        ],
                        "embeddings.items": [
                            824
                        ],
                        "embedding": [
                            825,
                            826,
                            829
                        ],
                        "config.embeddings.add": [
                            825
                        ],
                        "config.embeddings": [
                            825
                        ],
                        "embedding.tensor_name": [
                            826
                        ],
                        "tensor.name": [
                            826
                        ],
                        "embedding.metadata_path": [
                            829
                        ],
                        "projector.visualize_embeddings": [
                            831
                        ]
                    },
                    "filtered_variables": {
                        "self.model": [
                            803,
                            739,
                            807,
                            735
                        ],
                        "self": [
                            791,
                            793,
                            794,
                            795,
                            797,
                            799,
                            800,
                            803,
                            807,
                            810,
                            814,
                            815,
                            817,
                            821,
                            831,
                            735,
                            737,
                            738,
                            739,
                            744,
                            754
                        ],
                        "model": [
                            745,
                            735
                        ],
                        "K.backend": [
                            736
                        ],
                        "K": [
                            736,
                            737,
                            770,
                            784,
                            756,
                            760,
                            766
                        ],
                        "self.sess": [
                            737,
                            795
                        ],
                        "K.get_session": [
                            737
                        ],
                        "self.histogram_freq": [
                            738
                        ],
                        "self.merged": [
                            738,
                            791
                        ],
                        "layer": [
                            739,
                            803,
                            741,
                            804,
                            806,
                            807,
                            808,
                            788,
                            789,
                            790
                        ],
                        "self.model.layers": [
                            803,
                            739,
                            807
                        ],
                        "weight": [
                            741,
                            742,
                            743,
                            746,
                            755
                        ],
                        "layer.weights": [
                            741,
                            806
                        ],
                        "mapped_weight_name": [
                            753,
                            786,
                            742,
                            743
                        ],
                        "weight.name.replace": [
                            742
                        ],
                        "weight.name": [
                            742
                        ],
                        "tf.summary.histogram": [
                            753,
                            789,
                            743
                        ],
                        "tf.summary": [
                            743,
                            753,
                            786,
                            789,
                            791,
                            794,
                            797
                        ],
                        "tf": [
                            769,
                            771,
                            743,
                            776,
                            810,
                            791,
                            753,
                            786,
                            755,
                            789,
                            759,
                            761,
                            794,
                            797
                        ],
                        "self.write_grads": [
                            744
                        ],
                        "grads": [
                            752,
                            745,
                            753,
                            750
                        ],
                        "model.optimizer.get_gradients": [
                            745
                        ],
                        "model.optimizer": [
                            745
                        ],
                        "model.total_loss": [
                            745
                        ],
                        "grad": [
                            752,
                            749,
                            751
                        ],
                        "is_indexed_slices": [
                            751
                        ],
                        "grad.values": [
                            751
                        ],
                        "self.write_images": [
                            754
                        ],
                        "w_img": [
                            769,
                            770,
                            771,
                            776,
                            784,
                            786,
                            755,
                            756,
                            759,
                            760,
                            761
                        ],
                        "tf.squeeze": [
                            755
                        ],
                        "shape": [
                            770,
                            771,
                            772,
                            773,
                            775,
                            777,
                            784,
                            785,
                            756,
                            757,
                            758,
                            760,
                            762,
                            763,
                            765
                        ],
                        "K.int_shape": [
                            760,
                            784,
                            770,
                            756
                        ],
                        "tf.transpose": [
                            769,
                            759
                        ],
                        "tf.reshape": [
                            776,
                            761,
                            771
                        ],
                        "K.image_data_format": [
                            766
                        ],
                        "tf.summary.image": [
                            786
                        ],
                        "layer.name": [
                            808,
                            803,
                            789,
                            806
                        ],
                        "layer.output": [
                            790
                        ],
                        "tf.summary.merge_all": [
                            791
                        ],
                        "self.write_graph": [
                            793
                        ],
                        "self.writer": [
                            794,
                            797,
                            831
                        ],
                        "tf.summary.FileWriter": [
                            794,
                            797
                        ],
                        "self.log_dir": [
                            794,
                            821,
                            797
                        ],
                        "self.sess.graph": [
                            795
                        ],
                        "self.embeddings_freq": [
                            799
                        ],
                        "embeddings_layer_names": [
                            800,
                            808,
                            802,
                            803
                        ],
                        "self.embeddings_layer_names": [
                            800
                        ],
                        "embeddings": [
                            824,
                            810,
                            818,
                            806
                        ],
                        "self.saver": [
                            810
                        ],
                        "tf.train.Saver": [
                            810
                        ],
                        "tf.train": [
                            810
                        ],
                        "embeddings.values": [
                            810
                        ],
                        "embeddings_metadata": [
                            812,
                            815,
                            817,
                            828,
                            829
                        ],
                        "self.embeddings_metadata": [
                            817,
                            814,
                            815
                        ],
                        "layer_name": [
                            817,
                            818,
                            824,
                            828,
                            829
                        ],
                        "embeddings.keys": [
                            818
                        ],
                        "config": [
                            825,
                            820,
                            831
                        ],
                        "projector.ProjectorConfig": [
                            820
                        ],
                        "projector": [
                            820,
                            831
                        ],
                        "self.embeddings_ckpt_path": [
                            821
                        ],
                        "os.path.join": [
                            821
                        ],
                        "os.path": [
                            821
                        ],
                        "os": [
                            821
                        ],
                        "tensor": [
                            824,
                            826
                        ],
                        "embeddings.items": [
                            824
                        ],
                        "embedding": [
                            825,
                            826,
                            829
                        ],
                        "config.embeddings.add": [
                            825
                        ],
                        "config.embeddings": [
                            825
                        ],
                        "embedding.tensor_name": [
                            826
                        ],
                        "tensor.name": [
                            826
                        ],
                        "embedding.metadata_path": [
                            829
                        ],
                        "projector.visualize_embeddings": [
                            831
                        ]
                    },
                    "diff_line_number": 789,
                    "class_data": {
                        "signature": "class TensorBoard(Callback)",
                        "docstring": "TensorBoard basic visualizations.\n\n[TensorBoard](https://www.tensorflow.org/get_started/summaries_and_tensorboard)\nis a visualization tool provided with TensorFlow.\n\nThis callback writes a log for TensorBoard, which allows\nyou to visualize dynamic graphs of your training and test\nmetrics, as well as activation histograms for the different\nlayers in your model.\n\nIf you have installed TensorFlow with pip, you should be able\nto launch TensorBoard from the command line:\n```sh\ntensorboard --logdir=/full_path_to_your_logs\n```\n\nWhen using a backend other than TensorFlow, TensorBoard will still work\n(if you have TensorFlow installed), but the only feature available will\nbe the display of the losses and metrics plots.\n\n# Arguments\n    log_dir: the path of the directory where to save the log\n        files to be parsed by TensorBoard.\n    histogram_freq: frequency (in epochs) at which to compute activation\n        and weight histograms for the layers of the model. If set to 0,\n        histograms won't be computed. Validation data (or split) must be\n        specified for histogram visualizations.\n    write_graph: whether to visualize the graph in TensorBoard.\n        The log file can become quite large when\n        write_graph is set to True.\n    write_grads: whether to visualize gradient histograms in TensorBoard.\n        `histogram_freq` must be greater than 0.\n    batch_size: size of batch of inputs to feed to the network\n        for histograms computation.\n    write_images: whether to write model weights to visualize as\n        image in TensorBoard.\n    embeddings_freq: frequency (in epochs) at which selected embedding\n        layers will be saved.\n    embeddings_layer_names: a list of names of layers to keep eye on. If\n        None or empty list all the embedding layer will be watched.\n    embeddings_metadata: a dictionary which maps layer name to a file name\n        in which metadata for this embedding layer is saved. See the\n        [details](https://www.tensorflow.org/how_tos/embedding_viz/#metadata_optional)\n        about metadata files format. In case if the same metadata file is\n        used for all embedding layers, string can be passed.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, log_dir='./logs', histogram_freq=0, batch_size=32, write_graph=True, write_grads=False, write_images=False, embeddings_freq=0, embeddings_layer_names=None, embeddings_metadata=None):\n    super(TensorBoard, self).__init__()\n    global tf, projector\n    try:\n        import tensorflow as tf\n        from tensorflow.contrib.tensorboard.plugins import projector\n    except ImportError:\n        raise ImportError('You need the TensorFlow module installed to use TensorBoard.')\n    if K.backend() != 'tensorflow':\n        if histogram_freq != 0:\n            warnings.warn('You are not using the TensorFlow backend. histogram_freq was set to 0')\n            histogram_freq = 0\n        if write_graph:\n            warnings.warn('You are not using the TensorFlow backend. write_graph was set to False')\n            write_graph = False\n        if write_images:\n            warnings.warn('You are not using the TensorFlow backend. write_images was set to False')\n            write_images = False\n        if embeddings_freq != 0:\n            warnings.warn('You are not using the TensorFlow backend. embeddings_freq was set to 0')\n            embeddings_freq = 0\n    self.log_dir = log_dir\n    self.histogram_freq = histogram_freq\n    self.merged = None\n    self.write_graph = write_graph\n    self.write_grads = write_grads\n    self.write_images = write_images\n    self.embeddings_freq = embeddings_freq\n    self.embeddings_layer_names = embeddings_layer_names\n    self.embeddings_metadata = embeddings_metadata or {}\n    self.batch_size = batch_size",
                            "def set_model(self, model):\n    self.model = model\n    if K.backend() == 'tensorflow':\n        self.sess = K.get_session()\n    if self.histogram_freq and self.merged is None:\n        for layer in self.model.layers:\n            for weight in layer.weights:\n                mapped_weight_name = weight.name.replace(':', '_')\n                tf.summary.histogram(mapped_weight_name, weight)\n                if self.write_grads:\n                    grads = model.optimizer.get_gradients(model.total_loss, weight)\n\n                    def is_indexed_slices(grad):\n                        return type(grad).__name__ == 'IndexedSlices'\n                    grads = [grad.values if is_indexed_slices(grad) else grad for grad in grads]\n                    tf.summary.histogram('{}_grad'.format(mapped_weight_name), grads)\n                if self.write_images:\n                    w_img = tf.squeeze(weight)\n                    shape = K.int_shape(w_img)\n                    if len(shape) == 2:\n                        if shape[0] > shape[1]:\n                            w_img = tf.transpose(w_img)\n                            shape = K.int_shape(w_img)\n                        w_img = tf.reshape(w_img, [1, shape[0], shape[1], 1])\n                    elif len(shape) == 3:\n                        if K.image_data_format() == 'channels_last':\n                            w_img = tf.transpose(w_img, perm=[2, 0, 1])\n                            shape = K.int_shape(w_img)\n                        w_img = tf.reshape(w_img, [shape[0], shape[1], shape[2], 1])\n                    elif len(shape) == 1:\n                        w_img = tf.reshape(w_img, [1, shape[0], 1, 1])\n                    else:\n                        continue\n                    shape = K.int_shape(w_img)\n                    assert len(shape) == 4 and shape[-1] in [1, 3, 4]\n                    tf.summary.image(mapped_weight_name, w_img)\n            if hasattr(layer, 'output'):\n                tf.summary.histogram('{}_out'.format(layer.name), layer.output)\n    self.merged = tf.summary.merge_all()\n    if self.write_graph:\n        self.writer = tf.summary.FileWriter(self.log_dir, self.sess.graph)\n    else:\n        self.writer = tf.summary.FileWriter(self.log_dir)\n    if self.embeddings_freq:\n        embeddings_layer_names = self.embeddings_layer_names\n        if not embeddings_layer_names:\n            embeddings_layer_names = [layer.name for layer in self.model.layers if type(layer).__name__ == 'Embedding']\n        embeddings = {layer.name: layer.weights[0] for layer in self.model.layers if layer.name in embeddings_layer_names}\n        self.saver = tf.train.Saver(list(embeddings.values()))\n        embeddings_metadata = {}\n        if not isinstance(self.embeddings_metadata, str):\n            embeddings_metadata = self.embeddings_metadata\n        else:\n            embeddings_metadata = {layer_name: self.embeddings_metadata for layer_name in embeddings.keys()}\n        config = projector.ProjectorConfig()\n        self.embeddings_ckpt_path = os.path.join(self.log_dir, 'keras_embedding.ckpt')\n        for (layer_name, tensor) in embeddings.items():\n            embedding = config.embeddings.add()\n            embedding.tensor_name = tensor.name\n            if layer_name in embeddings_metadata:\n                embedding.metadata_path = embeddings_metadata[layer_name]\n        projector.visualize_embeddings(self.writer, config)",
                            "def on_epoch_end(self, epoch, logs=None):\n    logs = logs or {}\n    if not self.validation_data and self.histogram_freq:\n        raise ValueError('If printing histograms, validation_data must be provided, and cannot be a generator.')\n    if self.validation_data and self.histogram_freq:\n        if epoch % self.histogram_freq == 0:\n            val_data = self.validation_data\n            tensors = self.model.inputs + self.model.targets + self.model.sample_weights\n            if self.model.uses_learning_phase:\n                tensors += [K.learning_phase()]\n            assert len(val_data) == len(tensors)\n            val_size = val_data[0].shape[0]\n            i = 0\n            while i < val_size:\n                step = min(self.batch_size, val_size - i)\n                if self.model.uses_learning_phase:\n                    batch_val = [x[i:i + step] for x in val_data[:-1]]\n                    batch_val.append(val_data[-1])\n                else:\n                    batch_val = [x[i:i + step] for x in val_data]\n                assert len(batch_val) == len(tensors)\n                feed_dict = dict(zip(tensors, batch_val))\n                result = self.sess.run([self.merged], feed_dict=feed_dict)\n                summary_str = result[0]\n                self.writer.add_summary(summary_str, epoch)\n                i += self.batch_size\n    if self.embeddings_freq and self.embeddings_ckpt_path:\n        if epoch % self.embeddings_freq == 0:\n            self.saver.save(self.sess, self.embeddings_ckpt_path, epoch)\n    for (name, value) in logs.items():\n        if name in ['batch', 'size']:\n            continue\n        summary = tf.Summary()\n        summary_value = summary.value.add()\n        summary_value.simple_value = value.item()\n        summary_value.tag = name\n        self.writer.add_summary(summary, epoch)\n    self.writer.flush()",
                            "def on_train_end(self, _):\n    self.writer.close()",
                            "def is_indexed_slices(grad):\n    return type(grad).__name__ == 'IndexedSlices'"
                        ],
                        "constructor_variables": [
                            "self.log_dir = log_dir",
                            "self.histogram_freq = histogram_freq",
                            "self.merged = None",
                            "self.write_graph = write_graph",
                            "self.write_grads = write_grads",
                            "self.write_images = write_images",
                            "self.embeddings_freq = embeddings_freq",
                            "self.embeddings_layer_names = embeddings_layer_names",
                            "self.embeddings_metadata = embeddings_metadata or {}",
                            "self.batch_size = batch_size"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, log_dir='./logs', histogram_freq=0, batch_size=32, write_graph=True, write_grads=False, write_images=False, embeddings_freq=0, embeddings_layer_names=None, embeddings_metadata=None)",
                            "set_model(self, model)",
                            "on_epoch_end(self, epoch, logs=None)",
                            "on_train_end(self, _)",
                            "is_indexed_slices(grad)"
                        ],
                        "class_level_variable_names": [],
                        "constructor_variable_names": [
                            "embeddings_layer_names",
                            "write_grads",
                            "log_dir",
                            "write_graph",
                            "merged",
                            "embeddings_freq",
                            "write_images",
                            "batch_size",
                            "embeddings_metadata",
                            "histogram_freq"
                        ]
                    },
                    "used_imports": [
                        "import os",
                        "from . import backend as K",
                        "import tensorflow as tf",
                        "from tensorflow.contrib.tensorboard.plugins import projector"
                    ],
                    "variable_values": [
                        [
                            {
                                "self.model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7f92ce0fc290>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7f92ce0fc750>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mapped_weight_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name.replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7f92ce15c150>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_indexed_slices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75149/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.saver": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.metadata_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7f92ce0fc750>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7f92ce0fc290>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7f92ce0fc750>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "<tensorflow.python.client.session.Session object at 0x7f92cad06490>",
                                    "variable_type": "Session",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mapped_weight_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name.replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7f92ce15c150>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_indexed_slices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "<tensorflow.python.summary.writer.writer.FileWriter object at 0x7f92ce10f250>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75149/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": "{'dense_1': <tf.Variable 'dense_1/kernel:0' shape=(2, 4) dtype=float32_ref>}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "self.saver": {
                                    "variable_value": "<tensorflow.python.training.saver.Saver object at 0x7f92cad06410>",
                                    "variable_type": "Saver",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": "<built-in method values of dict object at 0x7f92cad7af00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": "'dense_1'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "embeddings.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x7f92cad7af00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": "embeddings {\n  tensor_name: \"dense_1/kernel:0\"\n}\n",
                                    "variable_type": "ProjectorConfig",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75149/popen-gw0/test_TensorBoard_multi_input_o0/logs/keras_embedding.ckpt'",
                                    "variable_type": "str",
                                    "variable_shape": "102"
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": "<tf.Variable 'dense_1/kernel:0' shape=(2, 4) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(4)])"
                                },
                                "embeddings.items": {
                                    "variable_value": "<built-in method items of dict object at 0x7f92cad7af00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": "tensor_name: \"dense_1/kernel:0\"\n",
                                    "variable_type": "EmbeddingInfo",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": "[tensor_name: \"dense_1/kernel:0\"\n]",
                                    "variable_type": "RepeatedCompositeContainer",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": "'dense_1/kernel:0'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "tensor.name": {
                                    "variable_value": "'dense_1/kernel:0'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "embedding.metadata_path": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "self.model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7ff22e0e8490>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mapped_weight_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name.replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7ff22e0fa450>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_indexed_slices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.saver": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.metadata_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7ff22e0e8490>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "<tensorflow.python.client.session.Session object at 0x7ff22ad87450>",
                                    "variable_type": "Session",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mapped_weight_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name.replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7ff22e0fa450>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_indexed_slices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "<tensorflow.python.summary.writer.writer.FileWriter object at 0x7ff22e14a510>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": "{'dense_1': <tf.Variable 'dense_1/kernel:0' shape=(2, 4) dtype=float32_ref>}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "self.saver": {
                                    "variable_value": "<tensorflow.python.training.saver.Saver object at 0x7ff22ad87d90>",
                                    "variable_type": "Saver",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": "<built-in method values of dict object at 0x7ff22adfef00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": "'dense_1'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "embeddings.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x7ff22adfef00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": "embeddings {\n  tensor_name: \"dense_1/kernel:0\"\n}\n",
                                    "variable_type": "ProjectorConfig",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs/keras_embedding.ckpt'",
                                    "variable_type": "str",
                                    "variable_shape": "102"
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": "<tf.Variable 'dense_1/kernel:0' shape=(2, 4) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(4)])"
                                },
                                "embeddings.items": {
                                    "variable_value": "<built-in method items of dict object at 0x7ff22adfef00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": "tensor_name: \"dense_1/kernel:0\"\n",
                                    "variable_type": "EmbeddingInfo",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": "[tensor_name: \"dense_1/kernel:0\"\n]",
                                    "variable_type": "RepeatedCompositeContainer",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": "'dense_1/kernel:0'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "tensor.name": {
                                    "variable_value": "'dense_1/kernel:0'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "embedding.metadata_path": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7ff22e14a510>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mapped_weight_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name.replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7ff22e0fa450>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_indexed_slices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.saver": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.metadata_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7ff22e14a510>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "<tensorflow.python.client.session.Session object at 0x7ff22ad87450>",
                                    "variable_type": "Session",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": "<keras.layers.core.Dense object at 0x7ff22e504590>",
                                    "variable_type": "Dense",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": "<tf.Variable 'dense_1/kernel:0' shape=(2, 4) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(4)])"
                                },
                                "layer.weights": {
                                    "variable_value": "[<tf.Variable 'dense_1/kernel:0' shape=(2, 4) dtype=float32_ref>, <tf.Variable 'dense_1/bias:0' shape=(4,) dtype=float32_ref>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "mapped_weight_name": {
                                    "variable_value": "'dense_1/kernel_0'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "weight.name.replace": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": "'dense_1/kernel:0'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": "[<tf.Tensor 'gradients/dense_1/MatMul_grad/MatMul_1:0' shape=(2, 4) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7ff22e0fa450>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": "<tf.Tensor 'gradients/dense_1/MatMul_grad/MatMul_1:0' shape=(2, 4) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(4)])"
                                },
                                "is_indexed_slices": {
                                    "variable_value": "<function TensorBoard.set_model.<locals>.is_indexed_slices at 0x7ff22dda6f80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": "<tf.Tensor 'dense_1/Relu:0' shape=(?, 4) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(4)])"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": "<tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(2)])"
                                },
                                "layer.name": {
                                    "variable_value": "'dense_1'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.saver": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.metadata_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7ff22e14a510>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mapped_weight_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name.replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7ff22e0fa450>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_indexed_slices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.saver": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.metadata_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7ff22e14a510>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "<tensorflow.python.client.session.Session object at 0x7ff22ad87450>",
                                    "variable_type": "Session",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": "<keras.layers.core.Dense object at 0x7ff22e504590>",
                                    "variable_type": "Dense",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": "<tf.Variable 'dense_1/bias:0' shape=(4,) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(4)])"
                                },
                                "layer.weights": {
                                    "variable_value": "[<tf.Variable 'dense_1/kernel:0' shape=(2, 4) dtype=float32_ref>, <tf.Variable 'dense_1/bias:0' shape=(4,) dtype=float32_ref>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "mapped_weight_name": {
                                    "variable_value": "'dense_1/bias_0'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "weight.name.replace": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": "'dense_1/bias:0'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": "[<tf.Tensor 'gradients_1/dense_1/BiasAdd_grad/BiasAddGrad:0' shape=(4,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7ff22e0fa450>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": "<tf.Tensor 'gradients_1/dense_1/BiasAdd_grad/BiasAddGrad:0' shape=(4,) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(4)])"
                                },
                                "is_indexed_slices": {
                                    "variable_value": "<function TensorBoard.set_model.<locals>.is_indexed_slices at 0x7ff22bc5df80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": "<tf.Tensor 'Reshape:0' shape=(1, 2, 4, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(2), Dimension(4), Dimension(1)])"
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": "(1, 2, 4, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": "<tf.Tensor 'dense_1/Relu:0' shape=(?, 4) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(4)])"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": "<tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(2)])"
                                },
                                "layer.name": {
                                    "variable_value": "'dense_1'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.saver": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.metadata_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7ff22e14a510>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mapped_weight_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name.replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7ff22e0fa450>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_indexed_slices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.saver": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.metadata_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7ff22e14a510>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "<tensorflow.python.client.session.Session object at 0x7ff22ad87450>",
                                    "variable_type": "Session",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": "<keras.layers.core.Dense object at 0x7ff22e1f49d0>",
                                    "variable_type": "Dense",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": "<tf.Variable 'dense_2/kernel:0' shape=(4, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(4), Dimension(2)])"
                                },
                                "layer.weights": {
                                    "variable_value": "[<tf.Variable 'dense_2/kernel:0' shape=(4, 2) dtype=float32_ref>, <tf.Variable 'dense_2/bias:0' shape=(2,) dtype=float32_ref>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "mapped_weight_name": {
                                    "variable_value": "'dense_2/kernel_0'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "weight.name.replace": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": "'dense_2/kernel:0'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": "[<tf.Tensor 'gradients_2/dense_2/MatMul_grad/MatMul_1:0' shape=(4, 2) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7ff22e0fa450>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": "<tf.Tensor 'gradients_2/dense_2/MatMul_grad/MatMul_1:0' shape=(4, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(4), Dimension(2)])"
                                },
                                "is_indexed_slices": {
                                    "variable_value": "<function TensorBoard.set_model.<locals>.is_indexed_slices at 0x7ff22dda6f80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": "<tf.Tensor 'Reshape_1:0' shape=(1, 4, 1, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(4), Dimension(1), Dimension(1)])"
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": "(1, 4, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": "<tf.Tensor 'dense_2/Softmax:0' shape=(?, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(2)])"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": "<tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(2)])"
                                },
                                "layer.name": {
                                    "variable_value": "'dense_2'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.saver": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.metadata_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7ff22e14a510>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mapped_weight_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name.replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7ff22e0fa450>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_indexed_slices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.saver": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.metadata_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7ff22e14a510>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "<tensorflow.python.client.session.Session object at 0x7ff22ad87450>",
                                    "variable_type": "Session",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": "<keras.layers.core.Dense object at 0x7ff22e1f49d0>",
                                    "variable_type": "Dense",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": "<tf.Variable 'dense_2/bias:0' shape=(2,) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(2)])"
                                },
                                "layer.weights": {
                                    "variable_value": "[<tf.Variable 'dense_2/kernel:0' shape=(4, 2) dtype=float32_ref>, <tf.Variable 'dense_2/bias:0' shape=(2,) dtype=float32_ref>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "mapped_weight_name": {
                                    "variable_value": "'dense_2/bias_0'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "weight.name.replace": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": "'dense_2/bias:0'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": "[<tf.Tensor 'gradients_3/dense_2/BiasAdd_grad/BiasAddGrad:0' shape=(2,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7ff22e0fa450>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": "<tf.Tensor 'gradients_3/dense_2/BiasAdd_grad/BiasAddGrad:0' shape=(2,) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2)])"
                                },
                                "is_indexed_slices": {
                                    "variable_value": "<function TensorBoard.set_model.<locals>.is_indexed_slices at 0x7ff22b8a6cb0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": "<tf.Tensor 'Reshape_2:0' shape=(1, 2, 4, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(2), Dimension(4), Dimension(1)])"
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": "(1, 2, 4, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": "<tf.Tensor 'dense_2/Softmax:0' shape=(?, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(2)])"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": "<tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(2)])"
                                },
                                "layer.name": {
                                    "variable_value": "'dense_2'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.saver": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.metadata_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7ff22e14a510>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mapped_weight_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name.replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7ff22e0fa450>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_indexed_slices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.saver": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.metadata_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7ff22e14a510>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "<tensorflow.python.client.session.Session object at 0x7ff22ad87450>",
                                    "variable_type": "Session",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": "<keras.layers.core.Dense object at 0x7ff22e1ad1d0>",
                                    "variable_type": "Dense",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": "<tf.Variable 'dense_3/kernel:0' shape=(4, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(4), Dimension(2)])"
                                },
                                "layer.weights": {
                                    "variable_value": "[<tf.Variable 'dense_3/kernel:0' shape=(4, 2) dtype=float32_ref>, <tf.Variable 'dense_3/bias:0' shape=(2,) dtype=float32_ref>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "mapped_weight_name": {
                                    "variable_value": "'dense_3/kernel_0'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "weight.name.replace": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": "'dense_3/kernel:0'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": "[<tf.Tensor 'gradients_4/dense_3/MatMul_grad/MatMul_1:0' shape=(4, 2) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7ff22e0fa450>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": "<tf.Tensor 'gradients_4/dense_3/MatMul_grad/MatMul_1:0' shape=(4, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(4), Dimension(2)])"
                                },
                                "is_indexed_slices": {
                                    "variable_value": "<function TensorBoard.set_model.<locals>.is_indexed_slices at 0x7ff22dda6f80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": "<tf.Tensor 'Reshape_3:0' shape=(1, 2, 1, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(2), Dimension(1), Dimension(1)])"
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": "(1, 2, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": "<tf.Tensor 'dense_3/Softmax:0' shape=(?, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(2)])"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": "<tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(2)])"
                                },
                                "layer.name": {
                                    "variable_value": "'dense_3'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.saver": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.metadata_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7ff22e14a510>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mapped_weight_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name.replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7ff22e0fa450>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_indexed_slices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.saver": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.metadata_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7ff22e14a510>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "<tensorflow.python.client.session.Session object at 0x7ff22ad87450>",
                                    "variable_type": "Session",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": "<keras.layers.core.Dense object at 0x7ff22e1ad1d0>",
                                    "variable_type": "Dense",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": "<tf.Variable 'dense_3/bias:0' shape=(2,) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(2)])"
                                },
                                "layer.weights": {
                                    "variable_value": "[<tf.Variable 'dense_3/kernel:0' shape=(4, 2) dtype=float32_ref>, <tf.Variable 'dense_3/bias:0' shape=(2,) dtype=float32_ref>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "mapped_weight_name": {
                                    "variable_value": "'dense_3/bias_0'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "weight.name.replace": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": "'dense_3/bias:0'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": "[<tf.Tensor 'gradients_5/dense_3/BiasAdd_grad/BiasAddGrad:0' shape=(2,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7ff22e0fa450>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": "<tf.Tensor 'gradients_5/dense_3/BiasAdd_grad/BiasAddGrad:0' shape=(2,) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2)])"
                                },
                                "is_indexed_slices": {
                                    "variable_value": "<function TensorBoard.set_model.<locals>.is_indexed_slices at 0x7ff22b8a6cb0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": "<tf.Tensor 'Reshape_4:0' shape=(1, 2, 4, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(2), Dimension(4), Dimension(1)])"
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": "(1, 2, 4, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": "<tf.Tensor 'dense_3/Softmax:0' shape=(?, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(2)])"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": "<tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(2)])"
                                },
                                "layer.name": {
                                    "variable_value": "'dense_3'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.saver": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.metadata_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7ff22e14a510>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mapped_weight_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name.replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7ff22e0fa450>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_indexed_slices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.saver": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.metadata_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7ff22e14a510>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "<tensorflow.python.client.session.Session object at 0x7ff22ad87450>",
                                    "variable_type": "Session",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "<tf.Tensor 'Merge/MergeSummary:0' shape=() dtype=string>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "layer": {
                                    "variable_value": "<keras.layers.core.Dense object at 0x7ff22e1ad1d0>",
                                    "variable_type": "Dense",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": "<tf.Variable 'dense_3/bias:0' shape=(2,) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(2)])"
                                },
                                "layer.weights": {
                                    "variable_value": "[<tf.Variable 'dense_3/kernel:0' shape=(4, 2) dtype=float32_ref>, <tf.Variable 'dense_3/bias:0' shape=(2,) dtype=float32_ref>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "mapped_weight_name": {
                                    "variable_value": "'dense_3/bias_0'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "weight.name.replace": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": "'dense_3/bias:0'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": "[<tf.Tensor 'gradients_5/dense_3/BiasAdd_grad/BiasAddGrad:0' shape=(2,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7ff22e0fa450>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_indexed_slices": {
                                    "variable_value": "<function TensorBoard.set_model.<locals>.is_indexed_slices at 0x7ff22b8a6cb0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": "<tf.Tensor 'Reshape_5:0' shape=(1, 2, 1, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(2), Dimension(1), Dimension(1)])"
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": "(1, 2, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": "<tf.Tensor 'dense_3/Softmax:0' shape=(?, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(2)])"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": "<tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(2)])"
                                },
                                "layer.name": {
                                    "variable_value": "'dense_3'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "<tensorflow.python.summary.writer.writer.FileWriter object at 0x7ff22dda4e90>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": "{'dense_1': <tf.Variable 'dense_1/kernel:0' shape=(2, 4) dtype=float32_ref>}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "self.saver": {
                                    "variable_value": "<tensorflow.python.training.saver.Saver object at 0x7ff21b1c7a90>",
                                    "variable_type": "Saver",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": "<built-in method values of dict object at 0x7ff21b451d20>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": "'dense_1'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "embeddings.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x7ff21b451d20>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": "embeddings {\n  tensor_name: \"dense_1/kernel:0\"\n}\n",
                                    "variable_type": "ProjectorConfig",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs/keras_embedding.ckpt'",
                                    "variable_type": "str",
                                    "variable_shape": "102"
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": "<tf.Variable 'dense_1/kernel:0' shape=(2, 4) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(4)])"
                                },
                                "embeddings.items": {
                                    "variable_value": "<built-in method items of dict object at 0x7ff21b451d20>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": "tensor_name: \"dense_1/kernel:0\"\n",
                                    "variable_type": "EmbeddingInfo",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": "[tensor_name: \"dense_1/kernel:0\"\n]",
                                    "variable_type": "RepeatedCompositeContainer",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": "'dense_1/kernel:0'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "tensor.name": {
                                    "variable_value": "'dense_1/kernel:0'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "embedding.metadata_path": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7ff22b0abe10>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mapped_weight_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name.replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7ff22e0fa450>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_indexed_slices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.saver": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.metadata_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7ff22b0abe10>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "<tensorflow.python.client.session.Session object at 0x7ff22ad87450>",
                                    "variable_type": "Session",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "<tf.Tensor 'Merge_1/MergeSummary:0' shape=() dtype=string>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mapped_weight_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name.replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7ff22e0fa450>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_indexed_slices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "<tensorflow.python.summary.writer.writer.FileWriter object at 0x7ff22ac236d0>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": "{'dense_1': <tf.Variable 'dense_1/kernel:0' shape=(2, 4) dtype=float32_ref>}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "self.saver": {
                                    "variable_value": "<tensorflow.python.training.saver.Saver object at 0x7ff22b044490>",
                                    "variable_type": "Saver",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": "<built-in method values of dict object at 0x7ff21b173910>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": "'dense_1'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "embeddings.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x7ff21b173910>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": "embeddings {\n  tensor_name: \"dense_1/kernel:0\"\n}\n",
                                    "variable_type": "ProjectorConfig",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs/keras_embedding.ckpt'",
                                    "variable_type": "str",
                                    "variable_shape": "102"
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": "<tf.Variable 'dense_1/kernel:0' shape=(2, 4) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(4)])"
                                },
                                "embeddings.items": {
                                    "variable_value": "<built-in method items of dict object at 0x7ff21b173910>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": "tensor_name: \"dense_1/kernel:0\"\n",
                                    "variable_type": "EmbeddingInfo",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": "[tensor_name: \"dense_1/kernel:0\"\n]",
                                    "variable_type": "RepeatedCompositeContainer",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": "'dense_1/kernel:0'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "tensor.name": {
                                    "variable_value": "'dense_1/kernel:0'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "embedding.metadata_path": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7ff22b0abe10>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mapped_weight_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name.replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7ff22e0fa450>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_indexed_slices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.saver": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.metadata_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7ff22b0abe10>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "<tensorflow.python.client.session.Session object at 0x7ff22ad87450>",
                                    "variable_type": "Session",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": "<keras.layers.core.Dense object at 0x7ff22e504590>",
                                    "variable_type": "Dense",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": "<tf.Variable 'dense_1/kernel:0' shape=(2, 4) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(4)])"
                                },
                                "layer.weights": {
                                    "variable_value": "[<tf.Variable 'dense_1/kernel:0' shape=(2, 4) dtype=float32_ref>, <tf.Variable 'dense_1/bias:0' shape=(4,) dtype=float32_ref>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "mapped_weight_name": {
                                    "variable_value": "'dense_1/kernel_0'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "weight.name.replace": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": "'dense_1/kernel:0'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": "[<tf.Tensor 'gradients_6/dense_1/MatMul_grad/MatMul_1:0' shape=(2, 4) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7ff22e0fa450>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": "<tf.Tensor 'gradients_6/dense_1/MatMul_grad/MatMul_1:0' shape=(2, 4) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(4)])"
                                },
                                "is_indexed_slices": {
                                    "variable_value": "<function TensorBoard.set_model.<locals>.is_indexed_slices at 0x7ff22dda6f80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": "<tf.Tensor 'dense_1/Relu:0' shape=(?, 4) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(4)])"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": "<tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(2)])"
                                },
                                "layer.name": {
                                    "variable_value": "'dense_1'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.saver": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.metadata_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7ff22b0abe10>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mapped_weight_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name.replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7ff22e0fa450>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_indexed_slices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.saver": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.metadata_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7ff22b0abe10>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "<tensorflow.python.client.session.Session object at 0x7ff22ad87450>",
                                    "variable_type": "Session",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": "<keras.layers.core.Dense object at 0x7ff22e504590>",
                                    "variable_type": "Dense",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": "<tf.Variable 'dense_1/bias:0' shape=(4,) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(4)])"
                                },
                                "layer.weights": {
                                    "variable_value": "[<tf.Variable 'dense_1/kernel:0' shape=(2, 4) dtype=float32_ref>, <tf.Variable 'dense_1/bias:0' shape=(4,) dtype=float32_ref>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "mapped_weight_name": {
                                    "variable_value": "'dense_1/bias_0'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "weight.name.replace": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": "'dense_1/bias:0'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": "[<tf.Tensor 'gradients_7/dense_1/BiasAdd_grad/BiasAddGrad:0' shape=(4,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7ff22e0fa450>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": "<tf.Tensor 'gradients_7/dense_1/BiasAdd_grad/BiasAddGrad:0' shape=(4,) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(4)])"
                                },
                                "is_indexed_slices": {
                                    "variable_value": "<function TensorBoard.set_model.<locals>.is_indexed_slices at 0x7ff21b126050>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": "<tf.Tensor 'Reshape_6:0' shape=(1, 2, 4, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(2), Dimension(4), Dimension(1)])"
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": "(1, 2, 4, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": "<tf.Tensor 'dense_1/Relu:0' shape=(?, 4) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(4)])"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": "<tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(2)])"
                                },
                                "layer.name": {
                                    "variable_value": "'dense_1'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.saver": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.metadata_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7ff22b0abe10>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mapped_weight_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name.replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7ff22e0fa450>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_indexed_slices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.saver": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.metadata_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7ff22b0abe10>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "<tensorflow.python.client.session.Session object at 0x7ff22ad87450>",
                                    "variable_type": "Session",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": "<keras.layers.core.Dense object at 0x7ff22e1f49d0>",
                                    "variable_type": "Dense",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": "<tf.Variable 'dense_2/kernel:0' shape=(4, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(4), Dimension(2)])"
                                },
                                "layer.weights": {
                                    "variable_value": "[<tf.Variable 'dense_2/kernel:0' shape=(4, 2) dtype=float32_ref>, <tf.Variable 'dense_2/bias:0' shape=(2,) dtype=float32_ref>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "mapped_weight_name": {
                                    "variable_value": "'dense_2/kernel_0'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "weight.name.replace": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": "'dense_2/kernel:0'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": "[<tf.Tensor 'gradients_8/dense_2/MatMul_grad/MatMul_1:0' shape=(4, 2) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7ff22e0fa450>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": "<tf.Tensor 'gradients_8/dense_2/MatMul_grad/MatMul_1:0' shape=(4, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(4), Dimension(2)])"
                                },
                                "is_indexed_slices": {
                                    "variable_value": "<function TensorBoard.set_model.<locals>.is_indexed_slices at 0x7ff22dda6f80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": "<tf.Tensor 'Reshape_7:0' shape=(1, 4, 1, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(4), Dimension(1), Dimension(1)])"
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": "(1, 4, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": "<tf.Tensor 'dense_2/Softmax:0' shape=(?, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(2)])"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": "<tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(2)])"
                                },
                                "layer.name": {
                                    "variable_value": "'dense_2'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.saver": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.metadata_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7ff22b0abe10>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mapped_weight_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name.replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7ff22e0fa450>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_indexed_slices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.saver": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.metadata_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7ff22b0abe10>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "<tensorflow.python.client.session.Session object at 0x7ff22ad87450>",
                                    "variable_type": "Session",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": "<keras.layers.core.Dense object at 0x7ff22e1f49d0>",
                                    "variable_type": "Dense",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": "<tf.Variable 'dense_2/bias:0' shape=(2,) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(2)])"
                                },
                                "layer.weights": {
                                    "variable_value": "[<tf.Variable 'dense_2/kernel:0' shape=(4, 2) dtype=float32_ref>, <tf.Variable 'dense_2/bias:0' shape=(2,) dtype=float32_ref>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "mapped_weight_name": {
                                    "variable_value": "'dense_2/bias_0'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "weight.name.replace": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": "'dense_2/bias:0'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": "[<tf.Tensor 'gradients_9/dense_2/BiasAdd_grad/BiasAddGrad:0' shape=(2,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7ff22e0fa450>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": "<tf.Tensor 'gradients_9/dense_2/BiasAdd_grad/BiasAddGrad:0' shape=(2,) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2)])"
                                },
                                "is_indexed_slices": {
                                    "variable_value": "<function TensorBoard.set_model.<locals>.is_indexed_slices at 0x7ff22b8a6cb0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": "<tf.Tensor 'Reshape_8:0' shape=(1, 2, 4, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(2), Dimension(4), Dimension(1)])"
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": "(1, 2, 4, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": "<tf.Tensor 'dense_2/Softmax:0' shape=(?, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(2)])"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": "<tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(2)])"
                                },
                                "layer.name": {
                                    "variable_value": "'dense_2'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.saver": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.metadata_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7ff22b0abe10>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mapped_weight_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name.replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7ff22e0fa450>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_indexed_slices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.saver": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.metadata_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7ff22b0abe10>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "<tensorflow.python.client.session.Session object at 0x7ff22ad87450>",
                                    "variable_type": "Session",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": "<keras.layers.core.Dense object at 0x7ff22e1ad1d0>",
                                    "variable_type": "Dense",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": "<tf.Variable 'dense_3/kernel:0' shape=(4, 2) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(4), Dimension(2)])"
                                },
                                "layer.weights": {
                                    "variable_value": "[<tf.Variable 'dense_3/kernel:0' shape=(4, 2) dtype=float32_ref>, <tf.Variable 'dense_3/bias:0' shape=(2,) dtype=float32_ref>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "mapped_weight_name": {
                                    "variable_value": "'dense_3/kernel_0'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "weight.name.replace": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": "'dense_3/kernel:0'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": "[<tf.Tensor 'gradients_10/dense_3/MatMul_grad/MatMul_1:0' shape=(4, 2) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7ff22e0fa450>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": "<tf.Tensor 'gradients_10/dense_3/MatMul_grad/MatMul_1:0' shape=(4, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(4), Dimension(2)])"
                                },
                                "is_indexed_slices": {
                                    "variable_value": "<function TensorBoard.set_model.<locals>.is_indexed_slices at 0x7ff22dda6f80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": "<tf.Tensor 'Reshape_9:0' shape=(1, 2, 1, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(2), Dimension(1), Dimension(1)])"
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": "(1, 2, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": "<tf.Tensor 'dense_3/Softmax:0' shape=(?, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(2)])"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": "<tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(2)])"
                                },
                                "layer.name": {
                                    "variable_value": "'dense_3'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.saver": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.metadata_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7ff22b0abe10>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mapped_weight_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name.replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7ff22e0fa450>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_indexed_slices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.saver": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.metadata_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7ff22b0abe10>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "<tensorflow.python.client.session.Session object at 0x7ff22ad87450>",
                                    "variable_type": "Session",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": "<keras.layers.core.Dense object at 0x7ff22e1ad1d0>",
                                    "variable_type": "Dense",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": "<tf.Variable 'dense_3/bias:0' shape=(2,) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(2)])"
                                },
                                "layer.weights": {
                                    "variable_value": "[<tf.Variable 'dense_3/kernel:0' shape=(4, 2) dtype=float32_ref>, <tf.Variable 'dense_3/bias:0' shape=(2,) dtype=float32_ref>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "mapped_weight_name": {
                                    "variable_value": "'dense_3/bias_0'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "weight.name.replace": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": "'dense_3/bias:0'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": "[<tf.Tensor 'gradients_11/dense_3/BiasAdd_grad/BiasAddGrad:0' shape=(2,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7ff22e0fa450>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": "<tf.Tensor 'gradients_11/dense_3/BiasAdd_grad/BiasAddGrad:0' shape=(2,) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(2)])"
                                },
                                "is_indexed_slices": {
                                    "variable_value": "<function TensorBoard.set_model.<locals>.is_indexed_slices at 0x7ff21b126050>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": "<tf.Tensor 'Reshape_10:0' shape=(1, 2, 4, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(2), Dimension(4), Dimension(1)])"
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": "(1, 2, 4, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": "<tf.Tensor 'dense_3/Softmax:0' shape=(?, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(2)])"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": "<tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(2)])"
                                },
                                "layer.name": {
                                    "variable_value": "'dense_3'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.saver": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.metadata_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7ff22b0abe10>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mapped_weight_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name.replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7ff22e0fa450>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_indexed_slices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.saver": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embedding.metadata_path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.callbacks.TensorBoard object at 0x7ff22b0abe10>",
                                    "variable_type": "TensorBoard",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x7ff22e139e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "K.backend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sess": {
                                    "variable_value": "<tensorflow.python.client.session.Session object at 0x7ff22ad87450>",
                                    "variable_type": "Session",
                                    "variable_shape": null
                                },
                                "K.get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.histogram_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.merged": {
                                    "variable_value": "<tf.Tensor 'Merge_2/MergeSummary:0' shape=() dtype=string>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "layer": {
                                    "variable_value": "<keras.layers.core.Dense object at 0x7ff22e1ad1d0>",
                                    "variable_type": "Dense",
                                    "variable_shape": null
                                },
                                "self.model.layers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": "<tf.Variable 'dense_3/bias:0' shape=(2,) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(2)])"
                                },
                                "layer.weights": {
                                    "variable_value": "[<tf.Variable 'dense_3/kernel:0' shape=(4, 2) dtype=float32_ref>, <tf.Variable 'dense_3/bias:0' shape=(2,) dtype=float32_ref>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "mapped_weight_name": {
                                    "variable_value": "'dense_3/bias_0'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "weight.name.replace": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weight.name": {
                                    "variable_value": "'dense_3/bias:0'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "tf.summary.histogram": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_grads": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "grads": {
                                    "variable_value": "[<tf.Tensor 'gradients_11/dense_3/BiasAdd_grad/BiasAddGrad:0' shape=(2,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "model.optimizer.get_gradients": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "model.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x7ff22e0fa450>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "model.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/add:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "grad": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_indexed_slices": {
                                    "variable_value": "<function TensorBoard.set_model.<locals>.is_indexed_slices at 0x7ff21b126050>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "grad.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_images": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "w_img": {
                                    "variable_value": "<tf.Tensor 'Reshape_11:0' shape=(1, 2, 1, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(1), Dimension(2), Dimension(1), Dimension(1)])"
                                },
                                "tf.squeeze": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": "(1, 2, 1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "K.int_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.image_data_format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.summary.image": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "layer.output": {
                                    "variable_value": "<tf.Tensor 'dense_3/Softmax:0' shape=(?, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(2)])"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output": {
                                    "variable_value": "<tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(2)])"
                                },
                                "layer.name": {
                                    "variable_value": "'dense_3'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "tf.summary.merge_all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.write_graph": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.writer": {
                                    "variable_value": "<tensorflow.python.summary.writer.writer.FileWriter object at 0x7ff22ac234d0>",
                                    "variable_type": "FileWriter",
                                    "variable_shape": null
                                },
                                "tf.summary.FileWriter": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.log_dir": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs'",
                                    "variable_type": "str",
                                    "variable_shape": "81"
                                },
                                "self.sess.graph": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.embeddings_freq": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.embeddings_layer_names": {
                                    "variable_value": "['dense_1']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "embeddings": {
                                    "variable_value": "{'dense_1': <tf.Variable 'dense_1/kernel:0' shape=(2, 4) dtype=float32_ref>}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "self.saver": {
                                    "variable_value": "<tensorflow.python.training.saver.Saver object at 0x7ff1fd374e10>",
                                    "variable_type": "Saver",
                                    "variable_shape": null
                                },
                                "tf.train.Saver": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.train": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embeddings.values": {
                                    "variable_value": "<built-in method values of dict object at 0x7ff1fd36f140>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self.embeddings_metadata": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "layer_name": {
                                    "variable_value": "'dense_1'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "embeddings.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x7ff1fd36f140>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "config": {
                                    "variable_value": "embeddings {\n  tensor_name: \"dense_1/kernel:0\"\n}\n",
                                    "variable_type": "ProjectorConfig",
                                    "variable_shape": null
                                },
                                "projector.ProjectorConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "projector": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.embeddings_ckpt_path": {
                                    "variable_value": "'/tmp/pytest-of-ubuntu/pytest-75150/popen-gw0/test_TensorBoard_multi_input_o0/logs/keras_embedding.ckpt'",
                                    "variable_type": "str",
                                    "variable_shape": "102"
                                },
                                "os.path.join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": "<tf.Variable 'dense_1/kernel:0' shape=(2, 4) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(2), Dimension(4)])"
                                },
                                "embeddings.items": {
                                    "variable_value": "<built-in method items of dict object at 0x7ff1fd36f140>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "embedding": {
                                    "variable_value": "tensor_name: \"dense_1/kernel:0\"\n",
                                    "variable_type": "EmbeddingInfo",
                                    "variable_shape": null
                                },
                                "config.embeddings.add": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "config.embeddings": {
                                    "variable_value": "[tensor_name: \"dense_1/kernel:0\"\n]",
                                    "variable_type": "RepeatedCompositeContainer",
                                    "variable_shape": null
                                },
                                "embedding.tensor_name": {
                                    "variable_value": "'dense_1/kernel:0'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "tensor.name": {
                                    "variable_value": "'dense_1/kernel:0'",
                                    "variable_type": "str",
                                    "variable_shape": "16"
                                },
                                "embedding.metadata_path": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "projector.visualize_embeddings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": {
                "file_scope_functions": [
                    {
                        "code": "def is_indexed_slices(grad):\n    return type(grad).__name__ == 'IndexedSlices'",
                        "signature": "is_indexed_slices(grad)"
                    }
                ],
                "file_scope_classes": [
                    {
                        "class_declaration": "class CallbackList:",
                        "functions": [
                            {
                                "code": "def __init__(self, callbacks=None, queue_length=10):\n    callbacks = callbacks or []\n    self.callbacks = [c for c in callbacks]\n    self.queue_length = queue_length",
                                "signature": "__init__(self, callbacks=None, queue_length=10)"
                            },
                            {
                                "code": "def append(self, callback):\n    self.callbacks.append(callback)",
                                "signature": "append(self, callback)"
                            },
                            {
                                "code": "def set_params(self, params):\n    for callback in self.callbacks:\n        callback.set_params(params)",
                                "signature": "set_params(self, params)"
                            },
                            {
                                "code": "def set_model(self, model):\n    for callback in self.callbacks:\n        callback.set_model(model)",
                                "signature": "set_model(self, model)"
                            },
                            {
                                "code": "def on_epoch_begin(self, epoch, logs=None):\n    \"\"\"Called at the start of an epoch.\n\n    # Arguments\n        epoch: integer, index of epoch.\n        logs: dictionary of logs.\n    \"\"\"\n    logs = logs or {}\n    for callback in self.callbacks:\n        callback.on_epoch_begin(epoch, logs)\n    self._delta_t_batch = 0.\n    self._delta_ts_batch_begin = deque([], maxlen=self.queue_length)\n    self._delta_ts_batch_end = deque([], maxlen=self.queue_length)",
                                "signature": "on_epoch_begin(self, epoch, logs=None)"
                            },
                            {
                                "code": "def on_epoch_end(self, epoch, logs=None):\n    \"\"\"Called at the end of an epoch.\n\n    # Arguments\n        epoch: integer, index of epoch.\n        logs: dictionary of logs.\n    \"\"\"\n    logs = logs or {}\n    for callback in self.callbacks:\n        callback.on_epoch_end(epoch, logs)",
                                "signature": "on_epoch_end(self, epoch, logs=None)"
                            },
                            {
                                "code": "def on_batch_begin(self, batch, logs=None):\n    \"\"\"Called right before processing a batch.\n\n    # Arguments\n        batch: integer, index of batch within the current epoch.\n        logs: dictionary of logs.\n    \"\"\"\n    logs = logs or {}\n    t_before_callbacks = time.time()\n    for callback in self.callbacks:\n        callback.on_batch_begin(batch, logs)\n    self._delta_ts_batch_begin.append(time.time() - t_before_callbacks)\n    delta_t_median = np.median(self._delta_ts_batch_begin)\n    if (self._delta_t_batch > 0. and\n       delta_t_median > 0.95 * self._delta_t_batch and\n       delta_t_median > 0.1):\n        warnings.warn('Method on_batch_begin() is slow compared '\n                      'to the batch update (%f). Check your callbacks.'\n                      % delta_t_median)\n    self._t_enter_batch = time.time()",
                                "signature": "on_batch_begin(self, batch, logs=None)"
                            },
                            {
                                "code": "def on_batch_end(self, batch, logs=None):\n    \"\"\"Called at the end of a batch.\n\n    # Arguments\n        batch: integer, index of batch within the current epoch.\n        logs: dictionary of logs.\n    \"\"\"\n    logs = logs or {}\n    if not hasattr(self, '_t_enter_batch'):\n        self._t_enter_batch = time.time()\n    self._delta_t_batch = time.time() - self._t_enter_batch\n    t_before_callbacks = time.time()\n    for callback in self.callbacks:\n        callback.on_batch_end(batch, logs)\n    self._delta_ts_batch_end.append(time.time() - t_before_callbacks)\n    delta_t_median = np.median(self._delta_ts_batch_end)\n    if (self._delta_t_batch > 0. and\n       (delta_t_median > 0.95 * self._delta_t_batch and delta_t_median > 0.1)):\n        warnings.warn('Method on_batch_end() is slow compared '\n                      'to the batch update (%f). Check your callbacks.'\n                      % delta_t_median)",
                                "signature": "on_batch_end(self, batch, logs=None)"
                            },
                            {
                                "code": "def on_train_begin(self, logs=None):\n    \"\"\"Called at the beginning of training.\n\n    # Arguments\n        logs: dictionary of logs.\n    \"\"\"\n    logs = logs or {}\n    for callback in self.callbacks:\n        callback.on_train_begin(logs)",
                                "signature": "on_train_begin(self, logs=None)"
                            },
                            {
                                "code": "def on_train_end(self, logs=None):\n    \"\"\"Called at the end of training.\n\n    # Arguments\n        logs: dictionary of logs.\n    \"\"\"\n    logs = logs or {}\n    for callback in self.callbacks:\n        callback.on_train_end(logs)",
                                "signature": "on_train_end(self, logs=None)"
                            },
                            {
                                "code": "def __iter__(self):\n    return iter(self.callbacks)",
                                "signature": "__iter__(self)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class Callback:",
                        "functions": [
                            {
                                "code": "def __init__(self):\n    self.validation_data = None\n    self.model = None",
                                "signature": "__init__(self)"
                            },
                            {
                                "code": "def set_params(self, params):\n    self.params = params",
                                "signature": "set_params(self, params)"
                            },
                            {
                                "code": "def set_model(self, model):\n    self.model = model",
                                "signature": "set_model(self, model)"
                            },
                            {
                                "code": "def on_epoch_begin(self, epoch, logs=None):\n    pass",
                                "signature": "on_epoch_begin(self, epoch, logs=None)"
                            },
                            {
                                "code": "def on_epoch_end(self, epoch, logs=None):\n    pass",
                                "signature": "on_epoch_end(self, epoch, logs=None)"
                            },
                            {
                                "code": "def on_batch_begin(self, batch, logs=None):\n    pass",
                                "signature": "on_batch_begin(self, batch, logs=None)"
                            },
                            {
                                "code": "def on_batch_end(self, batch, logs=None):\n    pass",
                                "signature": "on_batch_end(self, batch, logs=None)"
                            },
                            {
                                "code": "def on_train_begin(self, logs=None):\n    pass",
                                "signature": "on_train_begin(self, logs=None)"
                            },
                            {
                                "code": "def on_train_end(self, logs=None):\n    pass",
                                "signature": "on_train_end(self, logs=None)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class BaseLogger:",
                        "functions": [
                            {
                                "code": "def __init__(self, stateful_metrics=None):\n    if stateful_metrics:\n        self.stateful_metrics = set(stateful_metrics)\n    else:\n        self.stateful_metrics = set()",
                                "signature": "__init__(self, stateful_metrics=None)"
                            },
                            {
                                "code": "def on_epoch_begin(self, epoch, logs=None):\n    self.seen = 0\n    self.totals = {}",
                                "signature": "on_epoch_begin(self, epoch, logs=None)"
                            },
                            {
                                "code": "def on_batch_end(self, batch, logs=None):\n    logs = logs or {}\n    batch_size = logs.get('size', 0)\n    self.seen += batch_size\n\n    for k, v in logs.items():\n        if k in self.stateful_metrics:\n            self.totals[k] = v\n        else:\n            if k in self.totals:\n                self.totals[k] += v * batch_size\n            else:\n                self.totals[k] = v * batch_size",
                                "signature": "on_batch_end(self, batch, logs=None)"
                            },
                            {
                                "code": "def on_epoch_end(self, epoch, logs=None):\n    if logs is not None:\n        for k in self.params['metrics']:\n            if k in self.totals:\n                # Make value available to next callbacks.\n                if k in self.stateful_metrics:\n                    logs[k] = self.totals[k]\n                else:\n                    logs[k] = self.totals[k] / self.seen",
                                "signature": "on_epoch_end(self, epoch, logs=None)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class TerminateOnNaN:",
                        "functions": [
                            {
                                "code": "def on_batch_end(self, batch, logs=None):\n    logs = logs or {}\n    loss = logs.get('loss')\n    if loss is not None:\n        if np.isnan(loss) or np.isinf(loss):\n            print('Batch %d: Invalid loss, terminating training' % (batch))\n            self.model.stop_training = True",
                                "signature": "on_batch_end(self, batch, logs=None)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class ProgbarLogger:",
                        "functions": [
                            {
                                "code": "def __init__(self, count_mode='samples',\n             stateful_metrics=None):\n    super(ProgbarLogger, self).__init__()\n    if count_mode == 'samples':\n        self.use_steps = False\n    elif count_mode == 'steps':\n        self.use_steps = True\n    else:\n        raise ValueError('Unknown `count_mode`: ' + str(count_mode))\n    if stateful_metrics:\n        self.stateful_metrics = set(stateful_metrics)\n    else:\n        self.stateful_metrics = set()",
                                "signature": "__init__(self, count_mode='samples', stateful_metrics=None)"
                            },
                            {
                                "code": "def on_train_begin(self, logs=None):\n    self.verbose = self.params['verbose']\n    self.epochs = self.params['epochs']",
                                "signature": "on_train_begin(self, logs=None)"
                            },
                            {
                                "code": "def on_epoch_begin(self, epoch, logs=None):\n    if self.verbose:\n        print('Epoch %d/%d' % (epoch + 1, self.epochs))\n        if self.use_steps:\n            target = self.params['steps']\n        else:\n            target = self.params['samples']\n        self.target = target\n        self.progbar = Progbar(target=self.target,\n                               verbose=self.verbose,\n                               stateful_metrics=self.stateful_metrics)\n    self.seen = 0",
                                "signature": "on_epoch_begin(self, epoch, logs=None)"
                            },
                            {
                                "code": "def on_batch_begin(self, batch, logs=None):\n    if self.seen < self.target:\n        self.log_values = []",
                                "signature": "on_batch_begin(self, batch, logs=None)"
                            },
                            {
                                "code": "def on_batch_end(self, batch, logs=None):\n    logs = logs or {}\n    batch_size = logs.get('size', 0)\n    if self.use_steps:\n        self.seen += 1\n    else:\n        self.seen += batch_size\n\n    for k in self.params['metrics']:\n        if k in logs:\n            self.log_values.append((k, logs[k]))\n\n    # Skip progbar update for the last batch;\n    # will be handled by on_epoch_end.\n    if self.verbose and self.seen < self.target:\n        self.progbar.update(self.seen, self.log_values)",
                                "signature": "on_batch_end(self, batch, logs=None)"
                            },
                            {
                                "code": "def on_epoch_end(self, epoch, logs=None):\n    logs = logs or {}\n    for k in self.params['metrics']:\n        if k in logs:\n            self.log_values.append((k, logs[k]))\n    if self.verbose:\n        self.progbar.update(self.seen, self.log_values)",
                                "signature": "on_epoch_end(self, epoch, logs=None)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class History:",
                        "functions": [
                            {
                                "code": "def on_train_begin(self, logs=None):\n    self.epoch = []\n    self.history = {}",
                                "signature": "on_train_begin(self, logs=None)"
                            },
                            {
                                "code": "def on_epoch_end(self, epoch, logs=None):\n    logs = logs or {}\n    self.epoch.append(epoch)\n    for k, v in logs.items():\n        self.history.setdefault(k, []).append(v)",
                                "signature": "on_epoch_end(self, epoch, logs=None)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class ModelCheckpoint:",
                        "functions": [
                            {
                                "code": "def __init__(self, filepath, monitor='val_loss', verbose=0,\n             save_best_only=False, save_weights_only=False,\n             mode='auto', period=1):\n    super(ModelCheckpoint, self).__init__()\n    self.monitor = monitor\n    self.verbose = verbose\n    self.filepath = filepath\n    self.save_best_only = save_best_only\n    self.save_weights_only = save_weights_only\n    self.period = period\n    self.epochs_since_last_save = 0\n\n    if mode not in ['auto', 'min', 'max']:\n        warnings.warn('ModelCheckpoint mode %s is unknown, '\n                      'fallback to auto mode.' % (mode),\n                      RuntimeWarning)\n        mode = 'auto'\n\n    if mode == 'min':\n        self.monitor_op = np.less\n        self.best = np.Inf\n    elif mode == 'max':\n        self.monitor_op = np.greater\n        self.best = -np.Inf\n    else:\n        if 'acc' in self.monitor or self.monitor.startswith('fmeasure'):\n            self.monitor_op = np.greater\n            self.best = -np.Inf\n        else:\n            self.monitor_op = np.less\n            self.best = np.Inf",
                                "signature": "__init__(self, filepath, monitor='val_loss', verbose=0, save_best_only=False, save_weights_only=False, mode='auto', period=1)"
                            },
                            {
                                "code": "def on_epoch_end(self, epoch, logs=None):\n    logs = logs or {}\n    self.epochs_since_last_save += 1\n    if self.epochs_since_last_save >= self.period:\n        self.epochs_since_last_save = 0\n        filepath = self.filepath.format(epoch=epoch + 1, **logs)\n        if self.save_best_only:\n            current = logs.get(self.monitor)\n            if current is None:\n                warnings.warn('Can save best model only with %s available, '\n                              'skipping.' % (self.monitor), RuntimeWarning)\n            else:\n                if self.monitor_op(current, self.best):\n                    if self.verbose > 0:\n                        print('\\nEpoch %05d: %s improved from %0.5f to %0.5f,'\n                              ' saving model to %s'\n                              % (epoch + 1, self.monitor, self.best,\n                                 current, filepath))\n                    self.best = current\n                    if self.save_weights_only:\n                        self.model.save_weights(filepath, overwrite=True)\n                    else:\n                        self.model.save(filepath, overwrite=True)\n                else:\n                    if self.verbose > 0:\n                        print('\\nEpoch %05d: %s did not improve from %0.5f' %\n                              (epoch + 1, self.monitor, self.best))\n        else:\n            if self.verbose > 0:\n                print('\\nEpoch %05d: saving model to %s' % (epoch + 1, filepath))\n            if self.save_weights_only:\n                self.model.save_weights(filepath, overwrite=True)\n            else:\n                self.model.save(filepath, overwrite=True)",
                                "signature": "on_epoch_end(self, epoch, logs=None)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class EarlyStopping:",
                        "functions": [
                            {
                                "code": "def __init__(self,\n             monitor='val_loss',\n             min_delta=0,\n             patience=0,\n             verbose=0,\n             mode='auto',\n             baseline=None):\n    super(EarlyStopping, self).__init__()\n\n    self.monitor = monitor\n    self.baseline = baseline\n    self.patience = patience\n    self.verbose = verbose\n    self.min_delta = min_delta\n    self.wait = 0\n    self.stopped_epoch = 0\n\n    if mode not in ['auto', 'min', 'max']:\n        warnings.warn('EarlyStopping mode %s is unknown, '\n                      'fallback to auto mode.' % mode,\n                      RuntimeWarning)\n        mode = 'auto'\n\n    if mode == 'min':\n        self.monitor_op = np.less\n    elif mode == 'max':\n        self.monitor_op = np.greater\n    else:\n        if 'acc' in self.monitor:\n            self.monitor_op = np.greater\n        else:\n            self.monitor_op = np.less\n\n    if self.monitor_op == np.greater:\n        self.min_delta *= 1\n    else:\n        self.min_delta *= -1",
                                "signature": "__init__(self, monitor='val_loss', min_delta=0, patience=0, verbose=0, mode='auto', baseline=None)"
                            },
                            {
                                "code": "def on_train_begin(self, logs=None):\n    # Allow instances to be re-used\n    self.wait = 0\n    self.stopped_epoch = 0\n    if self.baseline is not None:\n        self.best = self.baseline\n    else:\n        self.best = np.Inf if self.monitor_op == np.less else -np.Inf",
                                "signature": "on_train_begin(self, logs=None)"
                            },
                            {
                                "code": "def on_epoch_end(self, epoch, logs=None):\n    current = logs.get(self.monitor)\n    if current is None:\n        warnings.warn(\n            'Early stopping conditioned on metric `%s` '\n            'which is not available. Available metrics are: %s' %\n            (self.monitor, ','.join(list(logs.keys()))), RuntimeWarning\n        )\n        return\n    if self.monitor_op(current - self.min_delta, self.best):\n        self.best = current\n        self.wait = 0\n    else:\n        self.wait += 1\n        if self.wait >= self.patience:\n            self.stopped_epoch = epoch\n            self.model.stop_training = True",
                                "signature": "on_epoch_end(self, epoch, logs=None)"
                            },
                            {
                                "code": "def on_train_end(self, logs=None):\n    if self.stopped_epoch > 0 and self.verbose > 0:\n        print('Epoch %05d: early stopping' % (self.stopped_epoch + 1))",
                                "signature": "on_train_end(self, logs=None)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class RemoteMonitor:",
                        "functions": [
                            {
                                "code": "def __init__(self,\n             root='http://localhost:9000',\n             path='/publish/epoch/end/',\n             field='data',\n             headers=None,\n             send_as_json=False):\n    super(RemoteMonitor, self).__init__()\n\n    self.root = root\n    self.path = path\n    self.field = field\n    self.headers = headers\n    self.send_as_json = send_as_json",
                                "signature": "__init__(self, root='http://localhost:9000', path='/publish/epoch/end/', field='data', headers=None, send_as_json=False)"
                            },
                            {
                                "code": "def on_epoch_end(self, epoch, logs=None):\n    if requests is None:\n        raise ImportError('RemoteMonitor requires '\n                          'the `requests` library.')\n    logs = logs or {}\n    send = {}\n    send['epoch'] = epoch\n    for k, v in logs.items():\n        if isinstance(v, (np.ndarray, np.generic)):\n            send[k] = v.item()\n        else:\n            send[k] = v\n    try:\n        if self.send_as_json:\n            requests.post(self.root + self.path, json=send, headers=self.headers)\n        else:\n            requests.post(self.root + self.path,\n                          {self.field: json.dumps(send)},\n                          headers=self.headers)\n    except requests.exceptions.RequestException:\n        warnings.warn('Warning: could not reach RemoteMonitor '\n                      'root server at ' + str(self.root))",
                                "signature": "on_epoch_end(self, epoch, logs=None)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class LearningRateScheduler:",
                        "functions": [
                            {
                                "code": "def __init__(self, schedule, verbose=0):\n    super(LearningRateScheduler, self).__init__()\n    self.schedule = schedule\n    self.verbose = verbose",
                                "signature": "__init__(self, schedule, verbose=0)"
                            },
                            {
                                "code": "def on_epoch_begin(self, epoch, logs=None):\n    if not hasattr(self.model.optimizer, 'lr'):\n        raise ValueError('Optimizer must have a \"lr\" attribute.')\n    lr = float(K.get_value(self.model.optimizer.lr))\n    try:  # new API\n        lr = self.schedule(epoch, lr)\n    except TypeError:  # old API for backward compatibility\n        lr = self.schedule(epoch)\n    if not isinstance(lr, (float, np.float32, np.float64)):\n        raise ValueError('The output of the \"schedule\" function '\n                         'should be float.')\n    K.set_value(self.model.optimizer.lr, lr)\n    if self.verbose > 0:\n        print('\\nEpoch %05d: LearningRateScheduler reducing learning '\n              'rate to %s.' % (epoch + 1, lr))",
                                "signature": "on_epoch_begin(self, epoch, logs=None)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class TensorBoard:",
                        "functions": [
                            {
                                "code": "def __init__(self, log_dir='./logs',\n             histogram_freq=0,\n             batch_size=32,\n             write_graph=True,\n             write_grads=False,\n             write_images=False,\n             embeddings_freq=0,\n             embeddings_layer_names=None,\n             embeddings_metadata=None):\n    super(TensorBoard, self).__init__()\n    global tf, projector\n    try:\n        import tensorflow as tf\n        from tensorflow.contrib.tensorboard.plugins import projector\n    except ImportError:\n        raise ImportError('You need the TensorFlow module installed to use TensorBoard.')\n\n    if K.backend() != 'tensorflow':\n        if histogram_freq != 0:\n            warnings.warn('You are not using the TensorFlow backend. '\n                          'histogram_freq was set to 0')\n            histogram_freq = 0\n        if write_graph:\n            warnings.warn('You are not using the TensorFlow backend. '\n                          'write_graph was set to False')\n            write_graph = False\n        if write_images:\n            warnings.warn('You are not using the TensorFlow backend. '\n                          'write_images was set to False')\n            write_images = False\n        if embeddings_freq != 0:\n            warnings.warn('You are not using the TensorFlow backend. '\n                          'embeddings_freq was set to 0')\n            embeddings_freq = 0\n\n    self.log_dir = log_dir\n    self.histogram_freq = histogram_freq\n    self.merged = None\n    self.write_graph = write_graph\n    self.write_grads = write_grads\n    self.write_images = write_images\n    self.embeddings_freq = embeddings_freq\n    self.embeddings_layer_names = embeddings_layer_names\n    self.embeddings_metadata = embeddings_metadata or {}\n    self.batch_size = batch_size",
                                "signature": "__init__(self, log_dir='./logs', histogram_freq=0, batch_size=32, write_graph=True, write_grads=False, write_images=False, embeddings_freq=0, embeddings_layer_names=None, embeddings_metadata=None)"
                            },
                            {
                                "code": "def set_model(self, model):\n    self.model = model\n    if K.backend() == 'tensorflow':\n        self.sess = K.get_session()\n    if self.histogram_freq and self.merged is None:\n        for layer in self.model.layers:\n\n            for weight in layer.weights:\n                mapped_weight_name = weight.name.replace(':', '_')\n                tf.summary.histogram(mapped_weight_name, weight)\n                if self.write_grads:\n                    grads = model.optimizer.get_gradients(model.total_loss,\n                                                          weight)\n\n                    def is_indexed_slices(grad):\n                        return type(grad).__name__ == 'IndexedSlices'\n                    grads = [\n                        grad.values if is_indexed_slices(grad) else grad\n                        for grad in grads]\n                    tf.summary.histogram('{}_grad'.format(mapped_weight_name), grads)\n                if self.write_images:\n                    w_img = tf.squeeze(weight)\n                    shape = K.int_shape(w_img)\n                    if len(shape) == 2:  # dense layer kernel case\n                        if shape[0] > shape[1]:\n                            w_img = tf.transpose(w_img)\n                            shape = K.int_shape(w_img)\n                        w_img = tf.reshape(w_img, [1,\n                                                   shape[0],\n                                                   shape[1],\n                                                   1])\n                    elif len(shape) == 3:  # convnet case\n                        if K.image_data_format() == 'channels_last':\n                            # switch to channels_first to display\n                            # every kernel as a separate image\n                            w_img = tf.transpose(w_img, perm=[2, 0, 1])\n                            shape = K.int_shape(w_img)\n                        w_img = tf.reshape(w_img, [shape[0],\n                                                   shape[1],\n                                                   shape[2],\n                                                   1])\n                    elif len(shape) == 1:  # bias case\n                        w_img = tf.reshape(w_img, [1,\n                                                   shape[0],\n                                                   1,\n                                                   1])\n                    else:\n                        # not possible to handle 3D convnets etc.\n                        continue\n\n                    shape = K.int_shape(w_img)\n                    assert len(shape) == 4 and shape[-1] in [1, 3, 4]\n                    tf.summary.image(mapped_weight_name, w_img)\n\n            if hasattr(layer, 'output'):\n                tf.summary.histogram('{}_out'.format(layer.name),\n                                     layer.output)\n    self.merged = tf.summary.merge_all()\n\n    if self.write_graph:\n        self.writer = tf.summary.FileWriter(self.log_dir,\n                                            self.sess.graph)\n    else:\n        self.writer = tf.summary.FileWriter(self.log_dir)\n\n    if self.embeddings_freq:\n        embeddings_layer_names = self.embeddings_layer_names\n\n        if not embeddings_layer_names:\n            embeddings_layer_names = [layer.name for layer in self.model.layers\n                                      if type(layer).__name__ == 'Embedding']\n\n        embeddings = {layer.name: layer.weights[0]\n                      for layer in self.model.layers\n                      if layer.name in embeddings_layer_names}\n\n        self.saver = tf.train.Saver(list(embeddings.values()))\n\n        embeddings_metadata = {}\n\n        if not isinstance(self.embeddings_metadata, str):\n            embeddings_metadata = self.embeddings_metadata\n        else:\n            embeddings_metadata = {layer_name: self.embeddings_metadata\n                                   for layer_name in embeddings.keys()}\n\n        config = projector.ProjectorConfig()\n        self.embeddings_ckpt_path = os.path.join(self.log_dir,\n                                                 'keras_embedding.ckpt')\n\n        for layer_name, tensor in embeddings.items():\n            embedding = config.embeddings.add()\n            embedding.tensor_name = tensor.name\n\n            if layer_name in embeddings_metadata:\n                embedding.metadata_path = embeddings_metadata[layer_name]\n\n        projector.visualize_embeddings(self.writer, config)",
                                "signature": "set_model(self, model)"
                            },
                            {
                                "code": "def on_epoch_end(self, epoch, logs=None):\n    logs = logs or {}\n\n    if not self.validation_data and self.histogram_freq:\n        raise ValueError('If printing histograms, validation_data must be '\n                         'provided, and cannot be a generator.')\n    if self.validation_data and self.histogram_freq:\n        if epoch % self.histogram_freq == 0:\n\n            val_data = self.validation_data\n            tensors = (self.model.inputs +\n                       self.model.targets +\n                       self.model.sample_weights)\n\n            if self.model.uses_learning_phase:\n                tensors += [K.learning_phase()]\n\n            assert len(val_data) == len(tensors)\n            val_size = val_data[0].shape[0]\n            i = 0\n            while i < val_size:\n                step = min(self.batch_size, val_size - i)\n                if self.model.uses_learning_phase:\n                    # do not slice the learning phase\n                    batch_val = [x[i:i + step] for x in val_data[:-1]]\n                    batch_val.append(val_data[-1])\n                else:\n                    batch_val = [x[i:i + step] for x in val_data]\n                assert len(batch_val) == len(tensors)\n                feed_dict = dict(zip(tensors, batch_val))\n                result = self.sess.run([self.merged], feed_dict=feed_dict)\n                summary_str = result[0]\n                self.writer.add_summary(summary_str, epoch)\n                i += self.batch_size\n\n    if self.embeddings_freq and self.embeddings_ckpt_path:\n        if epoch % self.embeddings_freq == 0:\n            self.saver.save(self.sess,\n                            self.embeddings_ckpt_path,\n                            epoch)\n\n    for name, value in logs.items():\n        if name in ['batch', 'size']:\n            continue\n        summary = tf.Summary()\n        summary_value = summary.value.add()\n        summary_value.simple_value = value.item()\n        summary_value.tag = name\n        self.writer.add_summary(summary, epoch)\n    self.writer.flush()",
                                "signature": "on_epoch_end(self, epoch, logs=None)"
                            },
                            {
                                "code": "def on_train_end(self, _):\n    self.writer.close()",
                                "signature": "on_train_end(self, _)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class ReduceLROnPlateau:",
                        "functions": [
                            {
                                "code": "def __init__(self, monitor='val_loss', factor=0.1, patience=10,\n             verbose=0, mode='auto', min_delta=1e-4, cooldown=0, min_lr=0,\n             **kwargs):\n    super(ReduceLROnPlateau, self).__init__()\n\n    self.monitor = monitor\n    if factor >= 1.0:\n        raise ValueError('ReduceLROnPlateau '\n                         'does not support a factor >= 1.0.')\n    if 'epsilon' in kwargs:\n        min_delta = kwargs.pop('epsilon')\n        warnings.warn('`epsilon` argument is deprecated and '\n                      'will be removed, use `min_delta` insted.')\n    self.factor = factor\n    self.min_lr = min_lr\n    self.min_delta = min_delta\n    self.patience = patience\n    self.verbose = verbose\n    self.cooldown = cooldown\n    self.cooldown_counter = 0  # Cooldown counter.\n    self.wait = 0\n    self.best = 0\n    self.mode = mode\n    self.monitor_op = None\n    self._reset()",
                                "signature": "__init__(self, monitor='val_loss', factor=0.1, patience=10, verbose=0, mode='auto', min_delta=0.0001, cooldown=0, min_lr=0, **kwargs)"
                            },
                            {
                                "code": "def _reset(self):\n    \"\"\"Resets wait counter and cooldown counter.\n    \"\"\"\n    if self.mode not in ['auto', 'min', 'max']:\n        warnings.warn('Learning Rate Plateau Reducing mode %s is unknown, '\n                      'fallback to auto mode.' % (self.mode),\n                      RuntimeWarning)\n        self.mode = 'auto'\n    if (self.mode == 'min' or\n       (self.mode == 'auto' and 'acc' not in self.monitor)):\n        self.monitor_op = lambda a, b: np.less(a, b - self.min_delta)\n        self.best = np.Inf\n    else:\n        self.monitor_op = lambda a, b: np.greater(a, b + self.min_delta)\n        self.best = -np.Inf\n    self.cooldown_counter = 0\n    self.wait = 0",
                                "signature": "_reset(self)"
                            },
                            {
                                "code": "def on_train_begin(self, logs=None):\n    self._reset()",
                                "signature": "on_train_begin(self, logs=None)"
                            },
                            {
                                "code": "def on_epoch_end(self, epoch, logs=None):\n    logs = logs or {}\n    logs['lr'] = K.get_value(self.model.optimizer.lr)\n    current = logs.get(self.monitor)\n    if current is None:\n        warnings.warn(\n            'Reduce LR on plateau conditioned on metric `%s` '\n            'which is not available. Available metrics are: %s' %\n            (self.monitor, ','.join(list(logs.keys()))), RuntimeWarning\n        )\n\n    else:\n        if self.in_cooldown():\n            self.cooldown_counter -= 1\n            self.wait = 0\n\n        if self.monitor_op(current, self.best):\n            self.best = current\n            self.wait = 0\n        elif not self.in_cooldown():\n            self.wait += 1\n            if self.wait >= self.patience:\n                old_lr = float(K.get_value(self.model.optimizer.lr))\n                if old_lr > self.min_lr:\n                    new_lr = old_lr * self.factor\n                    new_lr = max(new_lr, self.min_lr)\n                    K.set_value(self.model.optimizer.lr, new_lr)\n                    if self.verbose > 0:\n                        print('\\nEpoch %05d: ReduceLROnPlateau reducing learning '\n                              'rate to %s.' % (epoch + 1, new_lr))\n                    self.cooldown_counter = self.cooldown\n                    self.wait = 0",
                                "signature": "on_epoch_end(self, epoch, logs=None)"
                            },
                            {
                                "code": "def in_cooldown(self):\n    return self.cooldown_counter > 0",
                                "signature": "in_cooldown(self)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class CSVLogger:",
                        "functions": [
                            {
                                "code": "def __init__(self, filename, separator=',', append=False):\n    self.sep = separator\n    self.filename = filename\n    self.append = append\n    self.writer = None\n    self.keys = None\n    self.append_header = True\n    self.file_flags = 'b' if six.PY2 and os.name == 'nt' else ''\n    super(CSVLogger, self).__init__()",
                                "signature": "__init__(self, filename, separator=',', append=False)"
                            },
                            {
                                "code": "def on_train_begin(self, logs=None):\n    if self.append:\n        if os.path.exists(self.filename):\n            with open(self.filename, 'r' + self.file_flags) as f:\n                self.append_header = not bool(len(f.readline()))\n        self.csv_file = open(self.filename, 'a' + self.file_flags)\n    else:\n        self.csv_file = open(self.filename, 'w' + self.file_flags)",
                                "signature": "on_train_begin(self, logs=None)"
                            },
                            {
                                "code": "def on_epoch_end(self, epoch, logs=None):\n    logs = logs or {}\n\n    def handle_value(k):\n        is_zero_dim_ndarray = isinstance(k, np.ndarray) and k.ndim == 0\n        if isinstance(k, six.string_types):\n            return k\n        elif isinstance(k, Iterable) and not is_zero_dim_ndarray:\n            return '\"[%s]\"' % (', '.join(map(str, k)))\n        else:\n            return k\n\n    if self.keys is None:\n        self.keys = sorted(logs.keys())\n\n    if self.model.stop_training:\n        # We set NA so that csv parsers do not fail for this last epoch.\n        logs = dict([(k, logs[k]) if k in logs else (k, 'NA') for k in self.keys])\n\n    if not self.writer:\n        class CustomDialect(csv.excel):\n            delimiter = self.sep\n\n        self.writer = csv.DictWriter(self.csv_file,\n                                     fieldnames=['epoch'] + self.keys, dialect=CustomDialect)\n        if self.append_header:\n            self.writer.writeheader()\n\n    row_dict = OrderedDict({'epoch': epoch})\n    row_dict.update((key, handle_value(logs[key])) for key in self.keys)\n    self.writer.writerow(row_dict)\n    self.csv_file.flush()",
                                "signature": "on_epoch_end(self, epoch, logs=None)"
                            },
                            {
                                "code": "def on_train_end(self, logs=None):\n    self.csv_file.close()\n    self.writer = None",
                                "signature": "on_train_end(self, logs=None)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class LambdaCallback:",
                        "functions": [
                            {
                                "code": "def __init__(self,\n             on_epoch_begin=None,\n             on_epoch_end=None,\n             on_batch_begin=None,\n             on_batch_end=None,\n             on_train_begin=None,\n             on_train_end=None,\n             **kwargs):\n    super(LambdaCallback, self).__init__()\n    self.__dict__.update(kwargs)\n    if on_epoch_begin is not None:\n        self.on_epoch_begin = on_epoch_begin\n    else:\n        self.on_epoch_begin = lambda epoch, logs: None\n    if on_epoch_end is not None:\n        self.on_epoch_end = on_epoch_end\n    else:\n        self.on_epoch_end = lambda epoch, logs: None\n    if on_batch_begin is not None:\n        self.on_batch_begin = on_batch_begin\n    else:\n        self.on_batch_begin = lambda batch, logs: None\n    if on_batch_end is not None:\n        self.on_batch_end = on_batch_end\n    else:\n        self.on_batch_end = lambda batch, logs: None\n    if on_train_begin is not None:\n        self.on_train_begin = on_train_begin\n    else:\n        self.on_train_begin = lambda logs: None\n    if on_train_end is not None:\n        self.on_train_end = on_train_end\n    else:\n        self.on_train_end = lambda logs: None",
                                "signature": "__init__(self, on_epoch_begin=None, on_epoch_end=None, on_batch_begin=None, on_batch_end=None, on_train_begin=None, on_train_end=None, **kwargs)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class CustomDialect:",
                        "functions": []
                    }
                ]
            },
            "variables_in_file": {
                "ImportError": [
                    24,
                    586,
                    702,
                    703
                ],
                "requests": [
                    585,
                    598,
                    600,
                    25,
                    603
                ],
                "object": [
                    145,
                    28
                ],
                "callbacks": [
                    38,
                    39
                ],
                "self.callbacks": [
                    128,
                    39,
                    138,
                    43,
                    75,
                    46,
                    111,
                    142,
                    50,
                    87,
                    61
                ],
                "self": [
                    39,
                    40,
                    43,
                    46,
                    50,
                    61,
                    63,
                    64,
                    65,
                    75,
                    87,
                    89,
                    90,
                    91,
                    92,
                    97,
                    107,
                    108,
                    109,
                    111,
                    113,
                    114,
                    115,
                    116,
                    128,
                    138,
                    142,
                    173,
                    174,
                    177,
                    180,
                    215,
                    217,
                    220,
                    221,
                    226,
                    229,
                    230,
                    232,
                    233,
                    235,
                    239,
                    240,
                    242,
                    243,
                    245,
                    258,
                    279,
                    281,
                    283,
                    287,
                    289,
                    292,
                    293,
                    296,
                    297,
                    298,
                    299,
                    301,
                    302,
                    303,
                    304,
                    305,
                    306,
                    309,
                    310,
                    315,
                    316,
                    318,
                    320,
                    322,
                    326,
                    327,
                    331,
                    333,
                    334,
                    335,
                    347,
                    348,
                    352,
                    354,
                    392,
                    393,
                    394,
                    395,
                    396,
                    397,
                    398,
                    399,
                    408,
                    409,
                    411,
                    412,
                    414,
                    415,
                    416,
                    418,
                    419,
                    423,
                    424,
                    425,
                    426,
                    427,
                    428,
                    431,
                    433,
                    434,
                    437,
                    439,
                    440,
                    441,
                    443,
                    445,
                    447,
                    449,
                    451,
                    452,
                    454,
                    488,
                    490,
                    491,
                    492,
                    493,
                    494,
                    495,
                    496,
                    505,
                    507,
                    509,
                    510,
                    512,
                    514,
                    515,
                    517,
                    521,
                    522,
                    523,
                    524,
                    526,
                    529,
                    534,
                    537,
                    538,
                    539,
                    541,
                    542,
                    543,
                    544,
                    547,
                    548,
                    576,
                    578,
                    579,
                    580,
                    581,
                    582,
                    597,
                    598,
                    600,
                    601,
                    602,
                    605,
                    619,
                    620,
                    621,
                    624,
                    626,
                    628,
                    630,
                    634,
                    635,
                    697,
                    723,
                    724,
                    725,
                    726,
                    727,
                    728,
                    729,
                    730,
                    731,
                    732,
                    735,
                    737,
                    738,
                    739,
                    744,
                    754,
                    791,
                    793,
                    794,
                    795,
                    797,
                    799,
                    800,
                    803,
                    807,
                    810,
                    814,
                    815,
                    817,
                    821,
                    831,
                    836,
                    839,
                    840,
                    842,
                    843,
                    844,
                    845,
                    847,
                    854,
                    855,
                    863,
                    865,
                    866,
                    868,
                    869,
                    870,
                    871,
                    881,
                    882,
                    885,
                    928,
                    930,
                    938,
                    939,
                    940,
                    941,
                    942,
                    943,
                    944,
                    945,
                    946,
                    947,
                    948,
                    949,
                    954,
                    956,
                    958,
                    959,
                    960,
                    961,
                    962,
                    964,
                    965,
                    966,
                    967,
                    970,
                    974,
                    975,
                    980,
                    984,
                    985,
                    986,
                    988,
                    989,
                    990,
                    991,
                    992,
                    993,
                    994,
                    995,
                    996,
                    997,
                    998,
                    999,
                    1002,
                    1003,
                    1006,
                    1030,
                    1031,
                    1032,
                    1033,
                    1034,
                    1035,
                    1036,
                    1037,
                    1040,
                    1041,
                    1042,
                    1043,
                    1044,
                    1046,
                    1060,
                    1061,
                    1063,
                    1065,
                    1067,
                    1069,
                    1071,
                    1072,
                    1073,
                    1074,
                    1077,
                    1078,
                    1079,
                    1082,
                    1083,
                    1146,
                    1147,
                    1149,
                    1151,
                    1153,
                    1155,
                    1157,
                    1159,
                    1161,
                    1163,
                    1165,
                    1167,
                    1169,
                    1171
                ],
                "c": [
                    39
                ],
                "self.queue_length": [
                    40,
                    65,
                    64
                ],
                "queue_length": [
                    40
                ],
                "self.callbacks.append": [
                    43
                ],
                "callback": [
                    128,
                    129,
                    138,
                    43,
                    75,
                    76,
                    46,
                    47,
                    111,
                    112,
                    50,
                    51,
                    139,
                    87,
                    88,
                    61,
                    62
                ],
                "callback.set_params": [
                    47
                ],
                "params": [
                    177,
                    47
                ],
                "callback.set_model": [
                    51
                ],
                "model": [
                    745,
                    51,
                    180,
                    735
                ],
                "logs": [
                    129,
                    137,
                    139,
                    529,
                    534,
                    1049,
                    1061,
                    422,
                    1065,
                    426,
                    428,
                    1077,
                    313,
                    314,
                    60,
                    62,
                    321,
                    322,
                    834,
                    74,
                    330,
                    76,
                    332,
                    333,
                    588,
                    591,
                    973,
                    974,
                    975,
                    980,
                    85,
                    88,
                    351,
                    224,
                    225,
                    353,
                    228,
                    106,
                    874,
                    238,
                    112,
                    243,
                    245,
                    253,
                    254,
                    127
                ],
                "callback.on_epoch_begin": [
                    62
                ],
                "epoch": [
                    543,
                    297,
                    426,
                    1076,
                    437,
                    62,
                    447,
                    450,
                    840,
                    76,
                    590,
                    352,
                    865,
                    869,
                    872,
                    1001,
                    881,
                    628,
                    630,
                    637
                ],
                "self._delta_t_batch": [
                    109,
                    115,
                    116,
                    91,
                    92,
                    63
                ],
                "self._delta_ts_batch_begin": [
                    64,
                    89,
                    90
                ],
                "deque": [
                    64,
                    65
                ],
                "self._delta_ts_batch_end": [
                    65,
                    114,
                    113
                ],
                "callback.on_epoch_end": [
                    76
                ],
                "t_before_callbacks": [
                    89,
                    110,
                    86,
                    113
                ],
                "time.time": [
                    97,
                    108,
                    109,
                    110,
                    113,
                    86,
                    89
                ],
                "time": [
                    97,
                    108,
                    109,
                    110,
                    113,
                    86,
                    89
                ],
                "callback.on_batch_begin": [
                    88
                ],
                "batch": [
                    88,
                    257,
                    112
                ],
                "self._delta_ts_batch_begin.append": [
                    89
                ],
                "delta_t_median": [
                    96,
                    114,
                    116,
                    119,
                    90,
                    92,
                    93
                ],
                "np.median": [
                    90,
                    114
                ],
                "np": [
                    256,
                    512,
                    514,
                    526,
                    408,
                    409,
                    411,
                    412,
                    1052,
                    415,
                    416,
                    418,
                    419,
                    961,
                    962,
                    964,
                    965,
                    592,
                    90,
                    114,
                    631,
                    505,
                    507,
                    510
                ],
                "warnings.warn": [
                    707,
                    711,
                    936,
                    715,
                    430,
                    719,
                    977,
                    402,
                    499,
                    531,
                    117,
                    955,
                    604,
                    94
                ],
                "warnings": [
                    707,
                    711,
                    936,
                    715,
                    430,
                    719,
                    977,
                    402,
                    499,
                    531,
                    117,
                    955,
                    604,
                    94
                ],
                "self._t_enter_batch": [
                    97,
                    108,
                    109
                ],
                "hasattr": [
                    624,
                    107,
                    788
                ],
                "callback.on_batch_end": [
                    112
                ],
                "self._delta_ts_batch_end.append": [
                    113
                ],
                "callback.on_train_begin": [
                    129
                ],
                "callback.on_train_end": [
                    139
                ],
                "iter": [
                    142
                ],
                "self.validation_data": [
                    842,
                    836,
                    173,
                    839
                ],
                "self.model": [
                    258,
                    544,
                    803,
                    807,
                    1063,
                    174,
                    180,
                    441,
                    443,
                    452,
                    454,
                    843,
                    844,
                    845,
                    974,
                    847,
                    855,
                    735,
                    994,
                    739,
                    998,
                    624,
                    626,
                    634
                ],
                "self.params": [
                    320,
                    292,
                    293,
                    299,
                    331,
                    301,
                    239,
                    177
                ],
                "Callback": [
                    608,
                    640,
                    357,
                    261,
                    551,
                    201,
                    457,
                    1009,
                    338,
                    888,
                    248,
                    1086
                ],
                "stateful_metrics": [
                    286,
                    287,
                    214,
                    215
                ],
                "self.stateful_metrics": [
                    289,
                    229,
                    305,
                    242,
                    215,
                    217,
                    287
                ],
                "set": [
                    217,
                    287,
                    289,
                    215
                ],
                "self.seen": [
                    226,
                    326,
                    327,
                    335,
                    306,
                    309,
                    245,
                    316,
                    220,
                    318
                ],
                "self.totals": [
                    230,
                    232,
                    233,
                    235,
                    240,
                    243,
                    245,
                    221
                ],
                "batch_size": [
                    225,
                    226,
                    233,
                    235,
                    314,
                    732,
                    318
                ],
                "logs.get": [
                    225,
                    428,
                    975,
                    529,
                    314,
                    254
                ],
                "k": [
                    1052,
                    1053,
                    1054,
                    1055,
                    1056,
                    1058,
                    1065,
                    320,
                    321,
                    322,
                    331,
                    332,
                    333,
                    591,
                    593,
                    595,
                    353,
                    354,
                    228,
                    229,
                    230,
                    232,
                    233,
                    235,
                    239,
                    240,
                    242,
                    243,
                    245
                ],
                "v": [
                    353,
                    354,
                    228,
                    230,
                    233,
                    235,
                    591,
                    592,
                    593,
                    595
                ],
                "logs.items": [
                    353,
                    874,
                    228,
                    591
                ],
                "loss": [
                    256,
                    254,
                    255
                ],
                "np.isnan": [
                    256
                ],
                "np.isinf": [
                    256
                ],
                "print": [
                    257,
                    450,
                    548,
                    1000,
                    297,
                    435,
                    636,
                    446
                ],
                "self.model.stop_training": [
                    544,
                    258,
                    1063
                ],
                "__init__": [
                    576,
                    928,
                    392,
                    488,
                    619,
                    1037,
                    279,
                    697,
                    1146
                ],
                "super": [
                    576,
                    928,
                    392,
                    488,
                    619,
                    1037,
                    279,
                    697,
                    1146
                ],
                "ProgbarLogger": [
                    279
                ],
                "count_mode": [
                    280,
                    282,
                    285
                ],
                "self.use_steps": [
                    281,
                    298,
                    283,
                    315
                ],
                "ValueError": [
                    932,
                    837,
                    625,
                    632,
                    285
                ],
                "str": [
                    1056,
                    605,
                    285,
                    814
                ],
                "self.verbose": [
                    449,
                    547,
                    292,
                    326,
                    999,
                    296,
                    394,
                    493,
                    334,
                    621,
                    304,
                    942,
                    434,
                    635,
                    445
                ],
                "self.epochs": [
                    297,
                    293
                ],
                "target": [
                    299,
                    301,
                    302
                ],
                "self.target": [
                    326,
                    309,
                    302,
                    303
                ],
                "self.progbar": [
                    335,
                    327,
                    303
                ],
                "Progbar": [
                    303
                ],
                "self.log_values": [
                    322,
                    327,
                    333,
                    335,
                    310
                ],
                "self.log_values.append": [
                    322,
                    333
                ],
                "self.progbar.update": [
                    335,
                    327
                ],
                "self.epoch": [
                    352,
                    347
                ],
                "self.history": [
                    354,
                    348
                ],
                "self.epoch.append": [
                    352
                ],
                "append": [
                    1032,
                    354
                ],
                "self.history.setdefault": [
                    354
                ],
                "ModelCheckpoint": [
                    392
                ],
                "self.monitor": [
                    960,
                    930,
                    393,
                    490,
                    428,
                    431,
                    975,
                    529,
                    980,
                    437,
                    534,
                    509,
                    414,
                    447
                ],
                "monitor": [
                    930,
                    393,
                    490
                ],
                "verbose": [
                    394,
                    621,
                    493,
                    942
                ],
                "self.filepath": [
                    426,
                    395
                ],
                "filepath": [
                    450,
                    452,
                    454,
                    426,
                    395,
                    438,
                    441,
                    443
                ],
                "self.save_best_only": [
                    427,
                    396
                ],
                "save_best_only": [
                    396
                ],
                "self.save_weights_only": [
                    440,
                    451,
                    397
                ],
                "save_weights_only": [
                    397
                ],
                "self.period": [
                    424,
                    398
                ],
                "period": [
                    398
                ],
                "self.epochs_since_last_save": [
                    424,
                    423,
                    425,
                    399
                ],
                "mode": [
                    401,
                    498,
                    403,
                    500,
                    405,
                    502,
                    407,
                    504,
                    506,
                    410,
                    947
                ],
                "RuntimeWarning": [
                    431,
                    404,
                    501,
                    534,
                    980,
                    957
                ],
                "self.monitor_op": [
                    512,
                    961,
                    418,
                    514,
                    964,
                    526,
                    537,
                    433,
                    948,
                    507,
                    408,
                    505,
                    411,
                    988,
                    510,
                    415
                ],
                "np.less": [
                    512,
                    961,
                    418,
                    526,
                    408,
                    505
                ],
                "self.best": [
                    416,
                    962,
                    419,
                    965,
                    988,
                    524,
                    526,
                    537,
                    433,
                    946,
                    437,
                    439,
                    409,
                    538,
                    412,
                    989,
                    447
                ],
                "np.Inf": [
                    416,
                    962,
                    419,
                    965,
                    526,
                    409,
                    412
                ],
                "np.greater": [
                    514,
                    964,
                    507,
                    411,
                    510,
                    415
                ],
                "self.monitor.startswith": [
                    414
                ],
                "self.filepath.format": [
                    426
                ],
                "current": [
                    428,
                    429,
                    975,
                    976,
                    433,
                    529,
                    530,
                    438,
                    439,
                    537,
                    538,
                    988,
                    989
                ],
                "self.model.save_weights": [
                    441,
                    452
                ],
                "self.model.save": [
                    443,
                    454
                ],
                "EarlyStopping": [
                    488
                ],
                "self.baseline": [
                    523,
                    491,
                    524
                ],
                "baseline": [
                    491
                ],
                "self.patience": [
                    993,
                    492,
                    941,
                    542
                ],
                "patience": [
                    492,
                    941
                ],
                "self.min_delta": [
                    961,
                    515,
                    964,
                    517,
                    940,
                    494,
                    537
                ],
                "min_delta": [
                    940,
                    494,
                    935
                ],
                "self.wait": [
                    992,
                    993,
                    967,
                    521,
                    1003,
                    495,
                    945,
                    990,
                    986,
                    539,
                    541,
                    542
                ],
                "self.stopped_epoch": [
                    547,
                    548,
                    522,
                    496,
                    543
                ],
                "join": [
                    1056,
                    980,
                    534
                ],
                "list": [
                    810,
                    980,
                    534
                ],
                "logs.keys": [
                    980,
                    1061,
                    534
                ],
                "RemoteMonitor": [
                    576
                ],
                "self.root": [
                    600,
                    578,
                    605,
                    598
                ],
                "root": [
                    578
                ],
                "self.path": [
                    600,
                    579,
                    598
                ],
                "path": [
                    579
                ],
                "self.field": [
                    601,
                    580
                ],
                "field": [
                    580
                ],
                "self.headers": [
                    602,
                    581,
                    598
                ],
                "headers": [
                    581
                ],
                "self.send_as_json": [
                    597,
                    582
                ],
                "send_as_json": [
                    582
                ],
                "send": [
                    589,
                    590,
                    593,
                    595,
                    598,
                    601
                ],
                "isinstance": [
                    814,
                    592,
                    631,
                    1052,
                    1053,
                    1055
                ],
                "np.ndarray": [
                    592,
                    1052
                ],
                "np.generic": [
                    592
                ],
                "v.item": [
                    593
                ],
                "requests.post": [
                    600,
                    598
                ],
                "json.dumps": [
                    601
                ],
                "json": [
                    601
                ],
                "requests.exceptions.RequestException": [
                    603
                ],
                "requests.exceptions": [
                    603
                ],
                "LearningRateScheduler": [
                    619
                ],
                "self.schedule": [
                    628,
                    620,
                    630
                ],
                "schedule": [
                    620
                ],
                "self.model.optimizer": [
                    994,
                    998,
                    974,
                    624,
                    626,
                    634
                ],
                "lr": [
                    626,
                    628,
                    630,
                    631,
                    634,
                    637
                ],
                "float": [
                    626,
                    994,
                    631
                ],
                "K.get_value": [
                    626,
                    994,
                    974
                ],
                "K": [
                    736,
                    705,
                    737,
                    770,
                    994,
                    998,
                    974,
                    784,
                    848,
                    626,
                    756,
                    760,
                    634,
                    766
                ],
                "self.model.optimizer.lr": [
                    994,
                    998,
                    974,
                    626,
                    634
                ],
                "TypeError": [
                    629
                ],
                "np.float32": [
                    631
                ],
                "np.float64": [
                    631
                ],
                "K.set_value": [
                    634,
                    998
                ],
                "TensorBoard": [
                    697
                ],
                "K.backend": [
                    736,
                    705
                ],
                "histogram_freq": [
                    706,
                    724,
                    709
                ],
                "write_graph": [
                    713,
                    726,
                    710
                ],
                "write_images": [
                    728,
                    714,
                    717
                ],
                "embeddings_freq": [
                    721,
                    729,
                    718
                ],
                "self.log_dir": [
                    821,
                    794,
                    723,
                    797
                ],
                "log_dir": [
                    723
                ],
                "self.histogram_freq": [
                    738,
                    836,
                    839,
                    840,
                    724
                ],
                "self.merged": [
                    738,
                    725,
                    863,
                    791
                ],
                "self.write_graph": [
                    793,
                    726
                ],
                "self.write_grads": [
                    744,
                    727
                ],
                "write_grads": [
                    727
                ],
                "self.write_images": [
                    728,
                    754
                ],
                "self.embeddings_freq": [
                    729,
                    868,
                    869,
                    799
                ],
                "self.embeddings_layer_names": [
                    800,
                    730
                ],
                "embeddings_layer_names": [
                    800,
                    802,
                    803,
                    808,
                    730
                ],
                "self.embeddings_metadata": [
                    817,
                    731,
                    814,
                    815
                ],
                "embeddings_metadata": [
                    812,
                    815,
                    817,
                    731,
                    828,
                    829
                ],
                "self.batch_size": [
                    866,
                    732,
                    854
                ],
                "self.sess": [
                    737,
                    795,
                    870,
                    863
                ],
                "K.get_session": [
                    737
                ],
                "layer": [
                    739,
                    803,
                    741,
                    804,
                    806,
                    807,
                    808,
                    788,
                    789,
                    790
                ],
                "self.model.layers": [
                    803,
                    739,
                    807
                ],
                "weight": [
                    741,
                    742,
                    743,
                    746,
                    755
                ],
                "layer.weights": [
                    741,
                    806
                ],
                "mapped_weight_name": [
                    753,
                    786,
                    742,
                    743
                ],
                "weight.name.replace": [
                    742
                ],
                "weight.name": [
                    742
                ],
                "tf.summary.histogram": [
                    753,
                    789,
                    743
                ],
                "tf.summary": [
                    743,
                    753,
                    786,
                    789,
                    791,
                    794,
                    797
                ],
                "tf": [
                    769,
                    771,
                    743,
                    776,
                    810,
                    791,
                    877,
                    753,
                    786,
                    755,
                    789,
                    759,
                    761,
                    794,
                    797
                ],
                "grads": [
                    752,
                    745,
                    753,
                    750
                ],
                "model.optimizer.get_gradients": [
                    745
                ],
                "model.optimizer": [
                    745
                ],
                "model.total_loss": [
                    745
                ],
                "__name__": [
                    804,
                    749
                ],
                "type": [
                    804,
                    749
                ],
                "grad": [
                    752,
                    749,
                    751
                ],
                "is_indexed_slices": [
                    751
                ],
                "grad.values": [
                    751
                ],
                "format": [
                    753,
                    789
                ],
                "w_img": [
                    769,
                    770,
                    771,
                    776,
                    784,
                    786,
                    755,
                    756,
                    759,
                    760,
                    761
                ],
                "tf.squeeze": [
                    755
                ],
                "shape": [
                    770,
                    771,
                    772,
                    773,
                    775,
                    777,
                    784,
                    785,
                    851,
                    756,
                    757,
                    758,
                    760,
                    762,
                    763,
                    765
                ],
                "K.int_shape": [
                    760,
                    784,
                    770,
                    756
                ],
                "len": [
                    775,
                    861,
                    785,
                    850,
                    1043,
                    757,
                    765
                ],
                "tf.transpose": [
                    769,
                    759
                ],
                "tf.reshape": [
                    776,
                    761,
                    771
                ],
                "K.image_data_format": [
                    766
                ],
                "tf.summary.image": [
                    786
                ],
                "layer.name": [
                    808,
                    803,
                    789,
                    806
                ],
                "layer.output": [
                    790
                ],
                "tf.summary.merge_all": [
                    791
                ],
                "self.writer": [
                    865,
                    1033,
                    1067,
                    1071,
                    881,
                    882,
                    1074,
                    885,
                    1078,
                    794,
                    1083,
                    797,
                    831
                ],
                "tf.summary.FileWriter": [
                    794,
                    797
                ],
                "self.sess.graph": [
                    795
                ],
                "embeddings": [
                    824,
                    810,
                    818,
                    806
                ],
                "self.saver": [
                    810,
                    870
                ],
                "tf.train.Saver": [
                    810
                ],
                "tf.train": [
                    810
                ],
                "embeddings.values": [
                    810
                ],
                "layer_name": [
                    817,
                    818,
                    824,
                    828,
                    829
                ],
                "embeddings.keys": [
                    818
                ],
                "config": [
                    825,
                    820,
                    831
                ],
                "projector.ProjectorConfig": [
                    820
                ],
                "projector": [
                    820,
                    831
                ],
                "self.embeddings_ckpt_path": [
                    868,
                    821,
                    871
                ],
                "os.path.join": [
                    821
                ],
                "os.path": [
                    1041,
                    821
                ],
                "os": [
                    1041,
                    1036,
                    821
                ],
                "tensor": [
                    824,
                    826
                ],
                "embeddings.items": [
                    824
                ],
                "embedding": [
                    825,
                    826,
                    829
                ],
                "config.embeddings.add": [
                    825
                ],
                "config.embeddings": [
                    825
                ],
                "embedding.tensor_name": [
                    826
                ],
                "tensor.name": [
                    826
                ],
                "embedding.metadata_path": [
                    829
                ],
                "projector.visualize_embeddings": [
                    831
                ],
                "val_data": [
                    842,
                    850,
                    851,
                    857,
                    858,
                    860
                ],
                "tensors": [
                    843,
                    848,
                    850,
                    861,
                    862
                ],
                "self.model.inputs": [
                    843
                ],
                "self.model.targets": [
                    844
                ],
                "self.model.sample_weights": [
                    845
                ],
                "self.model.uses_learning_phase": [
                    855,
                    847
                ],
                "K.learning_phase": [
                    848
                ],
                "val_size": [
                    851,
                    853,
                    854
                ],
                "i": [
                    866,
                    852,
                    853,
                    854,
                    857,
                    860
                ],
                "step": [
                    857,
                    860,
                    854
                ],
                "min": [
                    854
                ],
                "batch_val": [
                    857,
                    858,
                    860,
                    861,
                    862
                ],
                "x": [
                    857,
                    860
                ],
                "batch_val.append": [
                    858
                ],
                "feed_dict": [
                    862,
                    863
                ],
                "dict": [
                    1065,
                    862
                ],
                "zip": [
                    862
                ],
                "result": [
                    864,
                    863
                ],
                "self.sess.run": [
                    863
                ],
                "summary_str": [
                    864,
                    865
                ],
                "self.writer.add_summary": [
                    865,
                    881
                ],
                "self.saver.save": [
                    870
                ],
                "name": [
                    880,
                    874,
                    875
                ],
                "value": [
                    874,
                    879
                ],
                "summary": [
                    881,
                    877,
                    878
                ],
                "tf.Summary": [
                    877
                ],
                "summary_value": [
                    880,
                    878,
                    879
                ],
                "summary.value.add": [
                    878
                ],
                "summary.value": [
                    878
                ],
                "summary_value.simple_value": [
                    879
                ],
                "value.item": [
                    879
                ],
                "summary_value.tag": [
                    880
                ],
                "self.writer.flush": [
                    882
                ],
                "self.writer.close": [
                    885
                ],
                "ReduceLROnPlateau": [
                    928
                ],
                "factor": [
                    938,
                    931
                ],
                "kwargs": [
                    1147,
                    934,
                    935
                ],
                "kwargs.pop": [
                    935
                ],
                "self.factor": [
                    938,
                    996
                ],
                "self.min_lr": [
                    939,
                    997,
                    995
                ],
                "min_lr": [
                    939
                ],
                "self.cooldown": [
                    1002,
                    943
                ],
                "cooldown": [
                    943
                ],
                "self.cooldown_counter": [
                    966,
                    1002,
                    1006,
                    944,
                    985
                ],
                "self.mode": [
                    960,
                    947,
                    954,
                    956,
                    958,
                    959
                ],
                "self._reset": [
                    970,
                    949
                ],
                "a": [
                    961,
                    964
                ],
                "b": [
                    961,
                    964
                ],
                "self.in_cooldown": [
                    984,
                    991
                ],
                "old_lr": [
                    994,
                    995,
                    996
                ],
                "new_lr": [
                    1001,
                    996,
                    997,
                    998
                ],
                "max": [
                    997
                ],
                "self.sep": [
                    1069,
                    1030
                ],
                "separator": [
                    1030
                ],
                "self.filename": [
                    1031,
                    1041,
                    1042,
                    1044,
                    1046
                ],
                "filename": [
                    1031
                ],
                "self.append": [
                    1032,
                    1040
                ],
                "self.keys": [
                    1060,
                    1061,
                    1065,
                    1034,
                    1072,
                    1077
                ],
                "self.append_header": [
                    1043,
                    1073,
                    1035
                ],
                "self.file_flags": [
                    1042,
                    1036,
                    1044,
                    1046
                ],
                "six.PY2": [
                    1036
                ],
                "six": [
                    1036,
                    1053
                ],
                "os.name": [
                    1036
                ],
                "CSVLogger": [
                    1037
                ],
                "os.path.exists": [
                    1041
                ],
                "open": [
                    1042,
                    1044,
                    1046
                ],
                "f": [
                    1042,
                    1043
                ],
                "bool": [
                    1043
                ],
                "f.readline": [
                    1043
                ],
                "self.csv_file": [
                    1071,
                    1044,
                    1046,
                    1079,
                    1082
                ],
                "is_zero_dim_ndarray": [
                    1052,
                    1055
                ],
                "k.ndim": [
                    1052
                ],
                "six.string_types": [
                    1053
                ],
                "Iterable": [
                    1055
                ],
                "map": [
                    1056
                ],
                "sorted": [
                    1061
                ],
                "csv.excel": [
                    1068
                ],
                "csv": [
                    1068,
                    1071
                ],
                "delimiter": [
                    1069
                ],
                "csv.DictWriter": [
                    1071
                ],
                "CustomDialect": [
                    1072
                ],
                "self.writer.writeheader": [
                    1074
                ],
                "row_dict": [
                    1076,
                    1077,
                    1078
                ],
                "OrderedDict": [
                    1076
                ],
                "row_dict.update": [
                    1077
                ],
                "key": [
                    1077
                ],
                "handle_value": [
                    1077
                ],
                "self.writer.writerow": [
                    1078
                ],
                "self.csv_file.flush": [
                    1079
                ],
                "self.csv_file.close": [
                    1082
                ],
                "LambdaCallback": [
                    1146
                ],
                "self.__dict__.update": [
                    1147
                ],
                "self.__dict__": [
                    1147
                ],
                "on_epoch_begin": [
                    1148,
                    1149
                ],
                "self.on_epoch_begin": [
                    1149,
                    1151
                ],
                "on_epoch_end": [
                    1152,
                    1153
                ],
                "self.on_epoch_end": [
                    1153,
                    1155
                ],
                "on_batch_begin": [
                    1156,
                    1157
                ],
                "self.on_batch_begin": [
                    1157,
                    1159
                ],
                "on_batch_end": [
                    1160,
                    1161
                ],
                "self.on_batch_end": [
                    1161,
                    1163
                ],
                "on_train_begin": [
                    1164,
                    1165
                ],
                "self.on_train_begin": [
                    1165,
                    1167
                ],
                "on_train_end": [
                    1168,
                    1169
                ],
                "self.on_train_end": [
                    1169,
                    1171
                ]
            },
            "filtered_variables_in_file": {
                "requests": [
                    585,
                    598,
                    600,
                    25,
                    603
                ],
                "callbacks": [
                    38,
                    39
                ],
                "self.callbacks": [
                    128,
                    39,
                    138,
                    43,
                    75,
                    46,
                    111,
                    142,
                    50,
                    87,
                    61
                ],
                "self": [
                    39,
                    40,
                    43,
                    46,
                    50,
                    61,
                    63,
                    64,
                    65,
                    75,
                    87,
                    89,
                    90,
                    91,
                    92,
                    97,
                    107,
                    108,
                    109,
                    111,
                    113,
                    114,
                    115,
                    116,
                    128,
                    138,
                    142,
                    173,
                    174,
                    177,
                    180,
                    215,
                    217,
                    220,
                    221,
                    226,
                    229,
                    230,
                    232,
                    233,
                    235,
                    239,
                    240,
                    242,
                    243,
                    245,
                    258,
                    279,
                    281,
                    283,
                    287,
                    289,
                    292,
                    293,
                    296,
                    297,
                    298,
                    299,
                    301,
                    302,
                    303,
                    304,
                    305,
                    306,
                    309,
                    310,
                    315,
                    316,
                    318,
                    320,
                    322,
                    326,
                    327,
                    331,
                    333,
                    334,
                    335,
                    347,
                    348,
                    352,
                    354,
                    392,
                    393,
                    394,
                    395,
                    396,
                    397,
                    398,
                    399,
                    408,
                    409,
                    411,
                    412,
                    414,
                    415,
                    416,
                    418,
                    419,
                    423,
                    424,
                    425,
                    426,
                    427,
                    428,
                    431,
                    433,
                    434,
                    437,
                    439,
                    440,
                    441,
                    443,
                    445,
                    447,
                    449,
                    451,
                    452,
                    454,
                    488,
                    490,
                    491,
                    492,
                    493,
                    494,
                    495,
                    496,
                    505,
                    507,
                    509,
                    510,
                    512,
                    514,
                    515,
                    517,
                    521,
                    522,
                    523,
                    524,
                    526,
                    529,
                    534,
                    537,
                    538,
                    539,
                    541,
                    542,
                    543,
                    544,
                    547,
                    548,
                    576,
                    578,
                    579,
                    580,
                    581,
                    582,
                    597,
                    598,
                    600,
                    601,
                    602,
                    605,
                    619,
                    620,
                    621,
                    624,
                    626,
                    628,
                    630,
                    634,
                    635,
                    697,
                    723,
                    724,
                    725,
                    726,
                    727,
                    728,
                    729,
                    730,
                    731,
                    732,
                    735,
                    737,
                    738,
                    739,
                    744,
                    754,
                    791,
                    793,
                    794,
                    795,
                    797,
                    799,
                    800,
                    803,
                    807,
                    810,
                    814,
                    815,
                    817,
                    821,
                    831,
                    836,
                    839,
                    840,
                    842,
                    843,
                    844,
                    845,
                    847,
                    854,
                    855,
                    863,
                    865,
                    866,
                    868,
                    869,
                    870,
                    871,
                    881,
                    882,
                    885,
                    928,
                    930,
                    938,
                    939,
                    940,
                    941,
                    942,
                    943,
                    944,
                    945,
                    946,
                    947,
                    948,
                    949,
                    954,
                    956,
                    958,
                    959,
                    960,
                    961,
                    962,
                    964,
                    965,
                    966,
                    967,
                    970,
                    974,
                    975,
                    980,
                    984,
                    985,
                    986,
                    988,
                    989,
                    990,
                    991,
                    992,
                    993,
                    994,
                    995,
                    996,
                    997,
                    998,
                    999,
                    1002,
                    1003,
                    1006,
                    1030,
                    1031,
                    1032,
                    1033,
                    1034,
                    1035,
                    1036,
                    1037,
                    1040,
                    1041,
                    1042,
                    1043,
                    1044,
                    1046,
                    1060,
                    1061,
                    1063,
                    1065,
                    1067,
                    1069,
                    1071,
                    1072,
                    1073,
                    1074,
                    1077,
                    1078,
                    1079,
                    1082,
                    1083,
                    1146,
                    1147,
                    1149,
                    1151,
                    1153,
                    1155,
                    1157,
                    1159,
                    1161,
                    1163,
                    1165,
                    1167,
                    1169,
                    1171
                ],
                "c": [
                    39
                ],
                "self.queue_length": [
                    40,
                    65,
                    64
                ],
                "queue_length": [
                    40
                ],
                "self.callbacks.append": [
                    43
                ],
                "callback": [
                    128,
                    129,
                    138,
                    43,
                    75,
                    76,
                    46,
                    47,
                    111,
                    112,
                    50,
                    51,
                    139,
                    87,
                    88,
                    61,
                    62
                ],
                "callback.set_params": [
                    47
                ],
                "params": [
                    177,
                    47
                ],
                "callback.set_model": [
                    51
                ],
                "model": [
                    745,
                    51,
                    180,
                    735
                ],
                "logs": [
                    129,
                    137,
                    139,
                    529,
                    534,
                    1049,
                    1061,
                    422,
                    1065,
                    426,
                    428,
                    1077,
                    313,
                    314,
                    60,
                    62,
                    321,
                    322,
                    834,
                    74,
                    330,
                    76,
                    332,
                    333,
                    588,
                    591,
                    973,
                    974,
                    975,
                    980,
                    85,
                    88,
                    351,
                    224,
                    225,
                    353,
                    228,
                    106,
                    874,
                    238,
                    112,
                    243,
                    245,
                    253,
                    254,
                    127
                ],
                "callback.on_epoch_begin": [
                    62
                ],
                "epoch": [
                    543,
                    297,
                    426,
                    1076,
                    437,
                    62,
                    447,
                    450,
                    840,
                    76,
                    590,
                    352,
                    865,
                    869,
                    872,
                    1001,
                    881,
                    628,
                    630,
                    637
                ],
                "self._delta_t_batch": [
                    109,
                    115,
                    116,
                    91,
                    92,
                    63
                ],
                "self._delta_ts_batch_begin": [
                    64,
                    89,
                    90
                ],
                "deque": [
                    64,
                    65
                ],
                "self._delta_ts_batch_end": [
                    65,
                    114,
                    113
                ],
                "callback.on_epoch_end": [
                    76
                ],
                "t_before_callbacks": [
                    89,
                    110,
                    86,
                    113
                ],
                "time.time": [
                    97,
                    108,
                    109,
                    110,
                    113,
                    86,
                    89
                ],
                "time": [
                    97,
                    108,
                    109,
                    110,
                    113,
                    86,
                    89
                ],
                "callback.on_batch_begin": [
                    88
                ],
                "batch": [
                    88,
                    257,
                    112
                ],
                "self._delta_ts_batch_begin.append": [
                    89
                ],
                "delta_t_median": [
                    96,
                    114,
                    116,
                    119,
                    90,
                    92,
                    93
                ],
                "np.median": [
                    90,
                    114
                ],
                "np": [
                    256,
                    512,
                    514,
                    526,
                    408,
                    409,
                    411,
                    412,
                    1052,
                    415,
                    416,
                    418,
                    419,
                    961,
                    962,
                    964,
                    965,
                    592,
                    90,
                    114,
                    631,
                    505,
                    507,
                    510
                ],
                "warnings.warn": [
                    707,
                    711,
                    936,
                    715,
                    430,
                    719,
                    977,
                    402,
                    499,
                    531,
                    117,
                    955,
                    604,
                    94
                ],
                "warnings": [
                    707,
                    711,
                    936,
                    715,
                    430,
                    719,
                    977,
                    402,
                    499,
                    531,
                    117,
                    955,
                    604,
                    94
                ],
                "self._t_enter_batch": [
                    97,
                    108,
                    109
                ],
                "callback.on_batch_end": [
                    112
                ],
                "self._delta_ts_batch_end.append": [
                    113
                ],
                "callback.on_train_begin": [
                    129
                ],
                "callback.on_train_end": [
                    139
                ],
                "self.validation_data": [
                    842,
                    836,
                    173,
                    839
                ],
                "self.model": [
                    258,
                    544,
                    803,
                    807,
                    1063,
                    174,
                    180,
                    441,
                    443,
                    452,
                    454,
                    843,
                    844,
                    845,
                    974,
                    847,
                    855,
                    735,
                    994,
                    739,
                    998,
                    624,
                    626,
                    634
                ],
                "self.params": [
                    320,
                    292,
                    293,
                    299,
                    331,
                    301,
                    239,
                    177
                ],
                "Callback": [
                    608,
                    640,
                    357,
                    261,
                    551,
                    201,
                    457,
                    1009,
                    338,
                    888,
                    248,
                    1086
                ],
                "stateful_metrics": [
                    286,
                    287,
                    214,
                    215
                ],
                "self.stateful_metrics": [
                    289,
                    229,
                    305,
                    242,
                    215,
                    217,
                    287
                ],
                "self.seen": [
                    226,
                    326,
                    327,
                    335,
                    306,
                    309,
                    245,
                    316,
                    220,
                    318
                ],
                "self.totals": [
                    230,
                    232,
                    233,
                    235,
                    240,
                    243,
                    245,
                    221
                ],
                "batch_size": [
                    225,
                    226,
                    233,
                    235,
                    314,
                    732,
                    318
                ],
                "logs.get": [
                    225,
                    428,
                    975,
                    529,
                    314,
                    254
                ],
                "k": [
                    1052,
                    1053,
                    1054,
                    1055,
                    1056,
                    1058,
                    1065,
                    320,
                    321,
                    322,
                    331,
                    332,
                    333,
                    591,
                    593,
                    595,
                    353,
                    354,
                    228,
                    229,
                    230,
                    232,
                    233,
                    235,
                    239,
                    240,
                    242,
                    243,
                    245
                ],
                "v": [
                    353,
                    354,
                    228,
                    230,
                    233,
                    235,
                    591,
                    592,
                    593,
                    595
                ],
                "logs.items": [
                    353,
                    874,
                    228,
                    591
                ],
                "loss": [
                    256,
                    254,
                    255
                ],
                "np.isnan": [
                    256
                ],
                "np.isinf": [
                    256
                ],
                "self.model.stop_training": [
                    544,
                    258,
                    1063
                ],
                "__init__": [
                    576,
                    928,
                    392,
                    488,
                    619,
                    1037,
                    279,
                    697,
                    1146
                ],
                "ProgbarLogger": [
                    279
                ],
                "count_mode": [
                    280,
                    282,
                    285
                ],
                "self.use_steps": [
                    281,
                    298,
                    283,
                    315
                ],
                "self.verbose": [
                    449,
                    547,
                    292,
                    326,
                    999,
                    296,
                    394,
                    493,
                    334,
                    621,
                    304,
                    942,
                    434,
                    635,
                    445
                ],
                "self.epochs": [
                    297,
                    293
                ],
                "target": [
                    299,
                    301,
                    302
                ],
                "self.target": [
                    326,
                    309,
                    302,
                    303
                ],
                "self.progbar": [
                    335,
                    327,
                    303
                ],
                "Progbar": [
                    303
                ],
                "self.log_values": [
                    322,
                    327,
                    333,
                    335,
                    310
                ],
                "self.log_values.append": [
                    322,
                    333
                ],
                "self.progbar.update": [
                    335,
                    327
                ],
                "self.epoch": [
                    352,
                    347
                ],
                "self.history": [
                    354,
                    348
                ],
                "self.epoch.append": [
                    352
                ],
                "append": [
                    1032,
                    354
                ],
                "self.history.setdefault": [
                    354
                ],
                "ModelCheckpoint": [
                    392
                ],
                "self.monitor": [
                    960,
                    930,
                    393,
                    490,
                    428,
                    431,
                    975,
                    529,
                    980,
                    437,
                    534,
                    509,
                    414,
                    447
                ],
                "monitor": [
                    930,
                    393,
                    490
                ],
                "verbose": [
                    394,
                    621,
                    493,
                    942
                ],
                "self.filepath": [
                    426,
                    395
                ],
                "filepath": [
                    450,
                    452,
                    454,
                    426,
                    395,
                    438,
                    441,
                    443
                ],
                "self.save_best_only": [
                    427,
                    396
                ],
                "save_best_only": [
                    396
                ],
                "self.save_weights_only": [
                    440,
                    451,
                    397
                ],
                "save_weights_only": [
                    397
                ],
                "self.period": [
                    424,
                    398
                ],
                "period": [
                    398
                ],
                "self.epochs_since_last_save": [
                    424,
                    423,
                    425,
                    399
                ],
                "mode": [
                    401,
                    498,
                    403,
                    500,
                    405,
                    502,
                    407,
                    504,
                    506,
                    410,
                    947
                ],
                "self.monitor_op": [
                    512,
                    961,
                    418,
                    514,
                    964,
                    526,
                    537,
                    433,
                    948,
                    507,
                    408,
                    505,
                    411,
                    988,
                    510,
                    415
                ],
                "np.less": [
                    512,
                    961,
                    418,
                    526,
                    408,
                    505
                ],
                "self.best": [
                    416,
                    962,
                    419,
                    965,
                    988,
                    524,
                    526,
                    537,
                    433,
                    946,
                    437,
                    439,
                    409,
                    538,
                    412,
                    989,
                    447
                ],
                "np.Inf": [
                    416,
                    962,
                    419,
                    965,
                    526,
                    409,
                    412
                ],
                "np.greater": [
                    514,
                    964,
                    507,
                    411,
                    510,
                    415
                ],
                "self.monitor.startswith": [
                    414
                ],
                "self.filepath.format": [
                    426
                ],
                "current": [
                    428,
                    429,
                    975,
                    976,
                    433,
                    529,
                    530,
                    438,
                    439,
                    537,
                    538,
                    988,
                    989
                ],
                "self.model.save_weights": [
                    441,
                    452
                ],
                "self.model.save": [
                    443,
                    454
                ],
                "EarlyStopping": [
                    488
                ],
                "self.baseline": [
                    523,
                    491,
                    524
                ],
                "baseline": [
                    491
                ],
                "self.patience": [
                    993,
                    492,
                    941,
                    542
                ],
                "patience": [
                    492,
                    941
                ],
                "self.min_delta": [
                    961,
                    515,
                    964,
                    517,
                    940,
                    494,
                    537
                ],
                "min_delta": [
                    940,
                    494,
                    935
                ],
                "self.wait": [
                    992,
                    993,
                    967,
                    521,
                    1003,
                    495,
                    945,
                    990,
                    986,
                    539,
                    541,
                    542
                ],
                "self.stopped_epoch": [
                    547,
                    548,
                    522,
                    496,
                    543
                ],
                "join": [
                    1056,
                    980,
                    534
                ],
                "logs.keys": [
                    980,
                    1061,
                    534
                ],
                "RemoteMonitor": [
                    576
                ],
                "self.root": [
                    600,
                    578,
                    605,
                    598
                ],
                "root": [
                    578
                ],
                "self.path": [
                    600,
                    579,
                    598
                ],
                "path": [
                    579
                ],
                "self.field": [
                    601,
                    580
                ],
                "field": [
                    580
                ],
                "self.headers": [
                    602,
                    581,
                    598
                ],
                "headers": [
                    581
                ],
                "self.send_as_json": [
                    597,
                    582
                ],
                "send_as_json": [
                    582
                ],
                "send": [
                    589,
                    590,
                    593,
                    595,
                    598,
                    601
                ],
                "np.ndarray": [
                    592,
                    1052
                ],
                "np.generic": [
                    592
                ],
                "v.item": [
                    593
                ],
                "requests.post": [
                    600,
                    598
                ],
                "json.dumps": [
                    601
                ],
                "json": [
                    601
                ],
                "requests.exceptions.RequestException": [
                    603
                ],
                "requests.exceptions": [
                    603
                ],
                "LearningRateScheduler": [
                    619
                ],
                "self.schedule": [
                    628,
                    620,
                    630
                ],
                "schedule": [
                    620
                ],
                "self.model.optimizer": [
                    994,
                    998,
                    974,
                    624,
                    626,
                    634
                ],
                "lr": [
                    626,
                    628,
                    630,
                    631,
                    634,
                    637
                ],
                "K.get_value": [
                    626,
                    994,
                    974
                ],
                "K": [
                    736,
                    705,
                    737,
                    770,
                    994,
                    998,
                    974,
                    784,
                    848,
                    626,
                    756,
                    760,
                    634,
                    766
                ],
                "self.model.optimizer.lr": [
                    994,
                    998,
                    974,
                    626,
                    634
                ],
                "np.float32": [
                    631
                ],
                "np.float64": [
                    631
                ],
                "K.set_value": [
                    634,
                    998
                ],
                "TensorBoard": [
                    697
                ],
                "K.backend": [
                    736,
                    705
                ],
                "histogram_freq": [
                    706,
                    724,
                    709
                ],
                "write_graph": [
                    713,
                    726,
                    710
                ],
                "write_images": [
                    728,
                    714,
                    717
                ],
                "embeddings_freq": [
                    721,
                    729,
                    718
                ],
                "self.log_dir": [
                    821,
                    794,
                    723,
                    797
                ],
                "log_dir": [
                    723
                ],
                "self.histogram_freq": [
                    738,
                    836,
                    839,
                    840,
                    724
                ],
                "self.merged": [
                    738,
                    725,
                    863,
                    791
                ],
                "self.write_graph": [
                    793,
                    726
                ],
                "self.write_grads": [
                    744,
                    727
                ],
                "write_grads": [
                    727
                ],
                "self.write_images": [
                    728,
                    754
                ],
                "self.embeddings_freq": [
                    729,
                    868,
                    869,
                    799
                ],
                "self.embeddings_layer_names": [
                    800,
                    730
                ],
                "embeddings_layer_names": [
                    800,
                    802,
                    803,
                    808,
                    730
                ],
                "self.embeddings_metadata": [
                    817,
                    731,
                    814,
                    815
                ],
                "embeddings_metadata": [
                    812,
                    815,
                    817,
                    731,
                    828,
                    829
                ],
                "self.batch_size": [
                    866,
                    732,
                    854
                ],
                "self.sess": [
                    737,
                    795,
                    870,
                    863
                ],
                "K.get_session": [
                    737
                ],
                "layer": [
                    739,
                    803,
                    741,
                    804,
                    806,
                    807,
                    808,
                    788,
                    789,
                    790
                ],
                "self.model.layers": [
                    803,
                    739,
                    807
                ],
                "weight": [
                    741,
                    742,
                    743,
                    746,
                    755
                ],
                "layer.weights": [
                    741,
                    806
                ],
                "mapped_weight_name": [
                    753,
                    786,
                    742,
                    743
                ],
                "weight.name.replace": [
                    742
                ],
                "weight.name": [
                    742
                ],
                "tf.summary.histogram": [
                    753,
                    789,
                    743
                ],
                "tf.summary": [
                    743,
                    753,
                    786,
                    789,
                    791,
                    794,
                    797
                ],
                "tf": [
                    769,
                    771,
                    743,
                    776,
                    810,
                    791,
                    877,
                    753,
                    786,
                    755,
                    789,
                    759,
                    761,
                    794,
                    797
                ],
                "grads": [
                    752,
                    745,
                    753,
                    750
                ],
                "model.optimizer.get_gradients": [
                    745
                ],
                "model.optimizer": [
                    745
                ],
                "model.total_loss": [
                    745
                ],
                "grad": [
                    752,
                    749,
                    751
                ],
                "is_indexed_slices": [
                    751
                ],
                "grad.values": [
                    751
                ],
                "w_img": [
                    769,
                    770,
                    771,
                    776,
                    784,
                    786,
                    755,
                    756,
                    759,
                    760,
                    761
                ],
                "tf.squeeze": [
                    755
                ],
                "shape": [
                    770,
                    771,
                    772,
                    773,
                    775,
                    777,
                    784,
                    785,
                    851,
                    756,
                    757,
                    758,
                    760,
                    762,
                    763,
                    765
                ],
                "K.int_shape": [
                    760,
                    784,
                    770,
                    756
                ],
                "tf.transpose": [
                    769,
                    759
                ],
                "tf.reshape": [
                    776,
                    761,
                    771
                ],
                "K.image_data_format": [
                    766
                ],
                "tf.summary.image": [
                    786
                ],
                "layer.name": [
                    808,
                    803,
                    789,
                    806
                ],
                "layer.output": [
                    790
                ],
                "tf.summary.merge_all": [
                    791
                ],
                "self.writer": [
                    865,
                    1033,
                    1067,
                    1071,
                    881,
                    882,
                    1074,
                    885,
                    1078,
                    794,
                    1083,
                    797,
                    831
                ],
                "tf.summary.FileWriter": [
                    794,
                    797
                ],
                "self.sess.graph": [
                    795
                ],
                "embeddings": [
                    824,
                    810,
                    818,
                    806
                ],
                "self.saver": [
                    810,
                    870
                ],
                "tf.train.Saver": [
                    810
                ],
                "tf.train": [
                    810
                ],
                "embeddings.values": [
                    810
                ],
                "layer_name": [
                    817,
                    818,
                    824,
                    828,
                    829
                ],
                "embeddings.keys": [
                    818
                ],
                "config": [
                    825,
                    820,
                    831
                ],
                "projector.ProjectorConfig": [
                    820
                ],
                "projector": [
                    820,
                    831
                ],
                "self.embeddings_ckpt_path": [
                    868,
                    821,
                    871
                ],
                "os.path.join": [
                    821
                ],
                "os.path": [
                    1041,
                    821
                ],
                "os": [
                    1041,
                    1036,
                    821
                ],
                "tensor": [
                    824,
                    826
                ],
                "embeddings.items": [
                    824
                ],
                "embedding": [
                    825,
                    826,
                    829
                ],
                "config.embeddings.add": [
                    825
                ],
                "config.embeddings": [
                    825
                ],
                "embedding.tensor_name": [
                    826
                ],
                "tensor.name": [
                    826
                ],
                "embedding.metadata_path": [
                    829
                ],
                "projector.visualize_embeddings": [
                    831
                ],
                "val_data": [
                    842,
                    850,
                    851,
                    857,
                    858,
                    860
                ],
                "tensors": [
                    843,
                    848,
                    850,
                    861,
                    862
                ],
                "self.model.inputs": [
                    843
                ],
                "self.model.targets": [
                    844
                ],
                "self.model.sample_weights": [
                    845
                ],
                "self.model.uses_learning_phase": [
                    855,
                    847
                ],
                "K.learning_phase": [
                    848
                ],
                "val_size": [
                    851,
                    853,
                    854
                ],
                "i": [
                    866,
                    852,
                    853,
                    854,
                    857,
                    860
                ],
                "step": [
                    857,
                    860,
                    854
                ],
                "batch_val": [
                    857,
                    858,
                    860,
                    861,
                    862
                ],
                "x": [
                    857,
                    860
                ],
                "batch_val.append": [
                    858
                ],
                "feed_dict": [
                    862,
                    863
                ],
                "result": [
                    864,
                    863
                ],
                "self.sess.run": [
                    863
                ],
                "summary_str": [
                    864,
                    865
                ],
                "self.writer.add_summary": [
                    865,
                    881
                ],
                "self.saver.save": [
                    870
                ],
                "name": [
                    880,
                    874,
                    875
                ],
                "value": [
                    874,
                    879
                ],
                "summary": [
                    881,
                    877,
                    878
                ],
                "tf.Summary": [
                    877
                ],
                "summary_value": [
                    880,
                    878,
                    879
                ],
                "summary.value.add": [
                    878
                ],
                "summary.value": [
                    878
                ],
                "summary_value.simple_value": [
                    879
                ],
                "value.item": [
                    879
                ],
                "summary_value.tag": [
                    880
                ],
                "self.writer.flush": [
                    882
                ],
                "self.writer.close": [
                    885
                ],
                "ReduceLROnPlateau": [
                    928
                ],
                "factor": [
                    938,
                    931
                ],
                "kwargs": [
                    1147,
                    934,
                    935
                ],
                "kwargs.pop": [
                    935
                ],
                "self.factor": [
                    938,
                    996
                ],
                "self.min_lr": [
                    939,
                    997,
                    995
                ],
                "min_lr": [
                    939
                ],
                "self.cooldown": [
                    1002,
                    943
                ],
                "cooldown": [
                    943
                ],
                "self.cooldown_counter": [
                    966,
                    1002,
                    1006,
                    944,
                    985
                ],
                "self.mode": [
                    960,
                    947,
                    954,
                    956,
                    958,
                    959
                ],
                "self._reset": [
                    970,
                    949
                ],
                "a": [
                    961,
                    964
                ],
                "b": [
                    961,
                    964
                ],
                "self.in_cooldown": [
                    984,
                    991
                ],
                "old_lr": [
                    994,
                    995,
                    996
                ],
                "new_lr": [
                    1001,
                    996,
                    997,
                    998
                ],
                "self.sep": [
                    1069,
                    1030
                ],
                "separator": [
                    1030
                ],
                "self.filename": [
                    1031,
                    1041,
                    1042,
                    1044,
                    1046
                ],
                "filename": [
                    1031
                ],
                "self.append": [
                    1032,
                    1040
                ],
                "self.keys": [
                    1060,
                    1061,
                    1065,
                    1034,
                    1072,
                    1077
                ],
                "self.append_header": [
                    1043,
                    1073,
                    1035
                ],
                "self.file_flags": [
                    1042,
                    1036,
                    1044,
                    1046
                ],
                "six.PY2": [
                    1036
                ],
                "six": [
                    1036,
                    1053
                ],
                "os.name": [
                    1036
                ],
                "CSVLogger": [
                    1037
                ],
                "os.path.exists": [
                    1041
                ],
                "f": [
                    1042,
                    1043
                ],
                "f.readline": [
                    1043
                ],
                "self.csv_file": [
                    1071,
                    1044,
                    1046,
                    1079,
                    1082
                ],
                "is_zero_dim_ndarray": [
                    1052,
                    1055
                ],
                "k.ndim": [
                    1052
                ],
                "six.string_types": [
                    1053
                ],
                "Iterable": [
                    1055
                ],
                "csv.excel": [
                    1068
                ],
                "csv": [
                    1068,
                    1071
                ],
                "delimiter": [
                    1069
                ],
                "csv.DictWriter": [
                    1071
                ],
                "CustomDialect": [
                    1072
                ],
                "self.writer.writeheader": [
                    1074
                ],
                "row_dict": [
                    1076,
                    1077,
                    1078
                ],
                "OrderedDict": [
                    1076
                ],
                "row_dict.update": [
                    1077
                ],
                "key": [
                    1077
                ],
                "handle_value": [
                    1077
                ],
                "self.writer.writerow": [
                    1078
                ],
                "self.csv_file.flush": [
                    1079
                ],
                "self.csv_file.close": [
                    1082
                ],
                "LambdaCallback": [
                    1146
                ],
                "self.__dict__.update": [
                    1147
                ],
                "self.__dict__": [
                    1147
                ],
                "on_epoch_begin": [
                    1148,
                    1149
                ],
                "self.on_epoch_begin": [
                    1149,
                    1151
                ],
                "on_epoch_end": [
                    1152,
                    1153
                ],
                "self.on_epoch_end": [
                    1153,
                    1155
                ],
                "on_batch_begin": [
                    1156,
                    1157
                ],
                "self.on_batch_begin": [
                    1157,
                    1159
                ],
                "on_batch_end": [
                    1160,
                    1161
                ],
                "self.on_batch_end": [
                    1161,
                    1163
                ],
                "on_train_begin": [
                    1164,
                    1165
                ],
                "self.on_train_begin": [
                    1165,
                    1167
                ],
                "on_train_end": [
                    1168,
                    1169
                ],
                "self.on_train_end": [
                    1169,
                    1171
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/keras_24/tests/keras/test_callbacks.py",
                "test_function": "test_TensorBoard_multi_input_output",
                "test_function_code": "@keras_test\ndef test_TensorBoard_multi_input_output(tmpdir):\n    np.random.seed(np.random.randint(1, 1e7))\n    filepath = str(tmpdir / 'logs')\n\n    (X_train, y_train), (X_test, y_test) = get_test_data(\n        num_train=train_samples,\n        num_test=test_samples,\n        input_shape=(input_dim, input_dim),\n        classification=True,\n        num_classes=num_classes)\n    y_test = np_utils.to_categorical(y_test)\n    y_train = np_utils.to_categorical(y_train)\n\n    def data_generator(train):\n        if train:\n            max_batch_index = len(X_train) // batch_size\n        else:\n            max_batch_index = len(X_test) // batch_size\n        i = 0\n        while 1:\n            if train:\n                # simulate multi-input/output models\n                yield ([X_train[i * batch_size: (i + 1) * batch_size]] * 2,\n                       [y_train[i * batch_size: (i + 1) * batch_size]] * 2)\n            else:\n                yield ([X_test[i * batch_size: (i + 1) * batch_size]] * 2,\n                       [y_test[i * batch_size: (i + 1) * batch_size]] * 2)\n            i += 1\n            i = i % max_batch_index\n\n    inp1 = Input((input_dim, input_dim))\n    inp2 = Input((input_dim, input_dim))\n    inp_3d = add([inp1, inp2])\n    inp_2d = GlobalAveragePooling1D()(inp_3d)\n    inp_pair = Lambda(lambda x: x)([inp_3d, inp_2d])  # test a layer with a list of output tensors\n    hidden = dot(inp_pair, axes=-1)\n    hidden = Dense(num_hidden, activation='relu')(hidden)\n    hidden = Dropout(0.1)(hidden)\n    output1 = Dense(num_classes, activation='softmax')(hidden)\n    output2 = Dense(num_classes, activation='softmax')(hidden)\n    model = Model(inputs=[inp1, inp2], outputs=[output1, output2])\n    model.compile(loss='categorical_crossentropy',\n                  optimizer='sgd',\n                  metrics=['accuracy'])\n\n    # we must generate new callbacks for each test, as they aren't stateless\n    def callbacks_factory(histogram_freq):\n        return [callbacks.TensorBoard(log_dir=filepath,\n                                      histogram_freq=histogram_freq,\n                                      write_images=True, write_grads=True,\n                                      embeddings_freq=1,\n                                      embeddings_layer_names=['dense_1'],\n                                      batch_size=5)]\n\n    # fit without validation data\n    model.fit([X_train] * 2, [y_train] * 2, batch_size=batch_size,\n              callbacks=callbacks_factory(histogram_freq=0), epochs=3)\n\n    # fit with validation data and accuracy\n    model.fit([X_train] * 2, [y_train] * 2, batch_size=batch_size,\n              validation_data=([X_test] * 2, [y_test] * 2),\n              callbacks=callbacks_factory(histogram_freq=1), epochs=2)\n\n    # fit generator without validation data\n    model.fit_generator(data_generator(True), len(X_train), epochs=2,\n                        callbacks=callbacks_factory(histogram_freq=0))\n\n    # fit generator with validation data and accuracy\n    model.fit_generator(data_generator(True), len(X_train), epochs=2,\n                        validation_data=([X_test] * 2, [y_test] * 2),\n                        callbacks=callbacks_factory(histogram_freq=1))\n\n    assert os.path.isdir(filepath)\n    shutil.rmtree(filepath)\n    assert not tmpdir.listdir()",
                "test_error": "ValueError: Tried to convert 'values' to a tensor and failed. Error: Shapes must be equal rank, but are 3 and 2  From merging shape 0 with other shapes. for 'lambda_1_out/packed' (op: 'Pack') with input shapes: [?,2,2], [?,2].",
                "full_test_error": "graph = <tensorflow.python.framework.ops.Graph object at 0x7f68465e4ed0>\nnode_def = name: \"lambda_1_out/values_1\"\nop: \"Pack\"\nattr {\n  key: \"N\"\n  value {\n    i: 2\n  }\n}\nattr {\n  key: \"T\"\n  value {\n    type: DT_FLOAT\n  }\n}\nattr {\n  key: \"axis\"\n  value {\n    i: 0\n  }\n}\n\ninputs = [[<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>]]\ncontrol_inputs = []\n\n    def _create_c_op(graph, node_def, inputs, control_inputs):\n      \"\"\"Creates a TF_Operation.\n    \n      Args:\n        graph: a `Graph`.\n        node_def: `node_def_pb2.NodeDef` for the operation to create.\n        inputs: A list of `Tensor`s (corresponding to scalar inputs) and lists of\n          `Tensor`s (corresponding to sequence inputs, e.g. \"int64 * N\",\n          \"list(int64)\"). The length of the list should be equal to the number of\n          inputs specified by this operation's op def.\n        control_inputs: A list of `Operation`s to set as control dependencies.\n    \n      Returns:\n        A wrapped TF_Operation*.\n      \"\"\"\n      # pylint: disable=protected-access\n      op_desc = c_api.TF_NewOperation(graph._c_graph, compat.as_str(node_def.op),\n                                      compat.as_str(node_def.name))\n      if node_def.device:\n        c_api.TF_SetDevice(op_desc, compat.as_str(node_def.device))\n      # Add inputs\n      for op_input in inputs:\n        if isinstance(op_input, (list, tuple)):\n          c_api.TF_AddInputList(op_desc, [t._as_tf_output() for t in op_input])\n        else:\n          c_api.TF_AddInput(op_desc, op_input._as_tf_output())\n    \n      # Add control inputs\n      for control_input in control_inputs:\n        c_api.TF_AddControlInput(op_desc, control_input._c_op)\n      # pylint: enable=protected-access\n    \n      # Add attrs\n      for name, attr_value in node_def.attr.items():\n        serialized = attr_value.SerializeToString()\n        # TODO(skyewm): this creates and deletes a new TF_Status for every attr.\n        # It might be worth creating a convenient way to re-use the same status.\n        c_api.TF_SetAttrValueProto(op_desc, compat.as_str(name), serialized)\n    \n      try:\n>       c_op = c_api.TF_FinishOperation(op_desc)\nE       tensorflow.python.framework.errors_impl.InvalidArgumentError: Shapes must be equal rank, but are 3 and 2\nE       \tFrom merging shape 0 with other shapes. for 'lambda_1_out/values_1' (op: 'Pack') with input shapes: [?,2,2], [?,2].\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/framework/ops.py:1864: InvalidArgumentError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tensorflow.python.framework.op_def_library.OpDefLibrary object at 0x7f684bdfde50>\nop_type_name = 'HistogramSummary', name = 'lambda_1_out/', keywords = {}\nop_info = <tensorflow.python.framework.op_def_library._OpInfo object at 0x7f684bd873d0>\nop_def = name: \"HistogramSummary\"\ninput_arg {\n  name: \"tag\"\n  type: DT_STRING\n}\ninput_arg {\n  name: \"values\"\n  type_attr: \"T\"\n}...   type: DT_BFLOAT16\n      type: DT_UINT16\n      type: DT_HALF\n      type: DT_UINT32\n      type: DT_UINT64\n    }\n  }\n}\n\ng = <tensorflow.python.framework.ops.Graph object at 0x7f68465e4ed0>\ndeprecation_version = 0, default_type_attr_map = {'T': tf.float32}\n\n    def _apply_op_helper(self, op_type_name, name=None, **keywords):\n      \"\"\"Implementation of apply_op that returns output_structure, op.\"\"\"\n      op_info = self._ops.get(op_type_name, None)\n      if op_info is None:\n        raise RuntimeError(\"Unrecognized Op name \" + op_type_name)\n      op_def = op_info.op_def\n    \n      # Determine the graph context.\n      try:\n        # Need to flatten all the arguments into a list.\n        # pylint: disable=protected-access\n        g = ops._get_graph_from_inputs(_Flatten(keywords.values()))\n        # pylint: enable=protected-access\n      except AssertionError as e:\n        raise RuntimeError(\n            \"Cannot determine graph for Op '%s' due to: %s\"\n            % (op_type_name, e.message))\n    \n      # Default name if not specified.\n      if name is None:\n        name = op_type_name\n    \n      # Check for deprecation\n      deprecation_version = op_def.deprecation.version\n      if deprecation_version:\n        producer = g.graph_def_versions.producer\n        if producer >= deprecation_version:\n          raise NotImplementedError(\n              (\"Op %s is not available in GraphDef version %d. \"\n               \"It has been removed in version %d. %s.\") %\n              (op_type_name, producer, deprecation_version,\n               op_def.deprecation.explanation))\n    \n      # Fill in the list of default types for all \"type\" attrs.  This\n      # will be used to choose a preferred dtype to convert to in the\n      # absence of input type information.\n      #\n      # TODO(b/31302892): Currently the defaults don't work in the right\n      # way if you have two inputs, one of whose type resolution depends\n      # on the other.  Handling this will require restructuring this code\n      # significantly.\n      default_type_attr_map = {}\n      for attr_def in op_def.attr:\n        if attr_def.type != \"type\":\n          continue\n        key = attr_def.name\n        if attr_def.HasField(\"default_value\"):\n          default_type_attr_map[key] = dtypes.as_dtype(\n              attr_def.default_value.type)\n    \n      # Requires that op_def has passed validation (using the C++\n      # ValidateOpDef() from ../framework/op_def_util.h).\n      attrs = {}\n      inputs = []\n      input_types = []\n      with g.as_default(), ops.name_scope(name) as scope:\n    \n        # Perform input type inference\n        inferred_from = {}\n        for input_arg in op_def.input_arg:\n          input_name = input_arg.name\n          if input_name in keywords:\n            values = keywords.pop(input_name)\n          elif input_name + \"_\" in keywords:\n            # Handle the case where the name is a keyword or built-in\n            # for Python so we use the name + _ instead.\n            input_name += \"_\"\n            values = keywords.pop(input_name)\n          else:\n            raise TypeError(\"No argument for input \" + input_name)\n    \n          # Goals:\n          # * Convert values to Tensors if it contains constants.\n          # * Verify that values is a list if that matches the input_arg's\n          #   type.\n          # * If the input_arg's type is determined by attrs, either set\n          #   those attrs and validate those attr values are legal (if\n          #   they have not yet been set) or validate the input matches\n          #   the type indicated by the attrs (if they have already been\n          #   inferred via an earlier input).\n          # * If the input_arg has an explicit type, make sure the input\n          #   conforms.\n    \n          if _IsListParameter(input_arg):\n            if not _IsListValue(values):\n              raise TypeError(\n                  \"Expected list for '%s' argument to '%s' Op, not %s.\" %\n                  (input_name, op_type_name, values))\n            # In cases where we expect all elements of the list to have the\n            # same dtype, try to cast non-Tensor elements to that type.\n            dtype = None\n            default_dtype = None\n            if input_arg.type != types_pb2.DT_INVALID:\n              dtype = input_arg.type\n            elif input_arg.number_attr:\n              if input_arg.type_attr in attrs:\n                dtype = attrs[input_arg.type_attr]\n              else:\n                for t in values:\n                  if isinstance(t, ops.Tensor):\n                    dtype = t.dtype\n                    break\n    \n              # dtype still not found, prefer using the default dtype\n              # from the attr.\n              if dtype is None and input_arg.type_attr in default_type_attr_map:\n                default_dtype = default_type_attr_map[input_arg.type_attr]\n    \n            try:\n              if not input_arg.is_ref and dtype:\n                dtype = dtypes.as_dtype(dtype).base_dtype\n              values = ops.internal_convert_n_to_tensor(\n                  values,\n                  name=input_arg.name,\n                  dtype=dtype if dtype else None,\n                  preferred_dtype=default_dtype,\n                  as_ref=input_arg.is_ref)\n              if input_arg.number_attr and len(\n                  set(v.dtype.base_dtype for v in values)) > 1:\n                raise TypeError()  # All types should match.\n            except (TypeError, ValueError):\n              # What types does the conversion function think values have?\n              observed_types = []\n              for value in values:\n                try:\n                  converted_value = ops.internal_convert_to_tensor(\n                      value, as_ref=input_arg.is_ref)\n                  observed_types.append(converted_value.dtype.base_dtype.name)\n                except (TypeError, ValueError):\n                  observed_types.append(\"<NOT CONVERTIBLE TO TENSOR>\")\n              observed = \", \".join(observed_types)\n    \n              prefix = (\n                  \"Tensors in list passed to '%s' of '%s' Op have types [%s]\" %\n                  (input_name, op_type_name, observed))\n              if input_arg.number_attr:\n                if input_arg.type != types_pb2.DT_INVALID:\n                  raise TypeError(\"%s that do not match expected type %s.\" %\n                                  (prefix, dtype.name))\n                elif input_arg.type_attr in attrs:\n                  raise TypeError(\"%s that do not match type %s inferred from \"\n                                  \"earlier arguments.\" %\n                                  (prefix, dtype.name))\n                else:\n                  raise TypeError(\"%s that don't all match.\" % prefix)\n              else:\n                raise TypeError(\n                    \"%s that are invalid. Tensors: %s\" % (prefix, values))\n    \n            types = [x.dtype for x in values]\n            inputs.extend(values)\n          else:\n            # In cases where we have an expected type, try to convert non-Tensor\n            # arguments to that type.\n            dtype = None\n            default_dtype = None\n            if input_arg.type != types_pb2.DT_INVALID:\n              dtype = input_arg.type\n            elif input_arg.type_attr in attrs:\n              dtype = attrs[input_arg.type_attr]\n            elif input_arg.type_attr in default_type_attr_map:\n              # The dtype could not be inferred solely from the inputs,\n              # so we prefer the attr's default, so code that adds a new attr\n              # with a default is backwards compatible.\n              default_dtype = default_type_attr_map[input_arg.type_attr]\n    \n            try:\n              values = ops.internal_convert_to_tensor(\n                  values,\n                  name=input_arg.name,\n                  dtype=dtype,\n                  as_ref=input_arg.is_ref,\n>                 preferred_dtype=default_dtype)\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/framework/op_def_library.py:527: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalue = [<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>]\ndtype = None, name = 'values', as_ref = False, preferred_dtype = tf.float32\nctx = <tensorflow.python.eager.context.Context object at 0x7f6845c7bfd0>\naccept_symbolic_tensors = True, accept_composite_tensors = False\n\n    def internal_convert_to_tensor(value,\n                                   dtype=None,\n                                   name=None,\n                                   as_ref=False,\n                                   preferred_dtype=None,\n                                   ctx=None,\n                                   accept_symbolic_tensors=True,\n                                   accept_composite_tensors=False):\n      \"\"\"Implementation of the public convert_to_tensor.\"\"\"\n      if ctx is None:\n        ctx = context.context()\n      if isinstance(value, EagerTensor):\n        if ctx.executing_eagerly():\n          if dtype is not None:\n            dtype = dtypes.as_dtype(dtype)\n            value = _TensorTensorConversionFunction(value, dtype=dtype)\n          return value\n        else:\n          graph = get_default_graph()\n          if not graph.building_function:\n            raise RuntimeError(\"Attempting to capture an EagerTensor without \"\n                               \"building a function.\")\n          return graph.capture(value, name=name)\n      elif ((not accept_symbolic_tensors) and isinstance(value, Tensor) and\n            ctx.executing_eagerly()):\n        # Found a symbolic tensor in an eager context.\n        # This happens when we use the Keras functional API (i.e. calling layers\n        # on the output of `keras.Input()`, which is symbolic) while eager\n        # execution is enabled.\n        if _is_keras_symbolic_tensor(value):\n          # If the graph of the tensor isn't the Keras graph, we should still\n          # fail, for the time being. TODO(fchollet): consider allowing\n          # all symbolic tensors to raise this exception in this case.\n          raise core._SymbolicException(  # pylint: disable=protected-access\n              \"Using the symbolic output of a Keras layer during eager execution.\")\n    \n      if dtype is not None:\n        dtype = dtypes.as_dtype(dtype)\n      unwrapped_type = type(value)\n      conversion_func_list = _tensor_conversion_func_cache.get(unwrapped_type, None)\n      if conversion_func_list is None:\n        with _tensor_conversion_func_lock:\n          conversion_func_list = []\n          for _, funcs_at_priority in sorted(\n              _tensor_conversion_func_registry.items()):\n            for base_type, conversion_func in funcs_at_priority:\n              if isinstance(value, base_type):\n                conversion_func_list.append((base_type, conversion_func))\n          _tensor_conversion_func_cache[unwrapped_type] = conversion_func_list\n    \n      for base_type, conversion_func in conversion_func_list:\n        # If dtype is None but preferred_dtype is not None, we try to\n        # cast to preferred_dtype first.\n        ret = None\n        if dtype is None and preferred_dtype is not None:\n          try:\n            ret = conversion_func(\n                value, dtype=preferred_dtype, name=name, as_ref=as_ref)\n          except (TypeError, ValueError, errors.UnimplementedError,\n                  errors.InvalidArgumentError):\n            # Could not coerce the conversion to use the preferred dtype.\n            ret = None\n    \n          if ret is not None and ret is not NotImplemented:\n            if (ret.dtype.base_dtype !=\n                dtypes.as_dtype(preferred_dtype).base_dtype):\n              raise TypeError(\"convert_to_tensor did not convert to \"\n                              \"the preferred dtype: %s vs %s \" %\n                              (ret.dtype.base_dtype,\n                               dtypes.as_dtype(preferred_dtype).base_dtype))\n    \n        if ret is None:\n>         ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/framework/ops.py:1224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nv = [<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>]\ndtype = tf.float32, name = 'values', as_ref = False\n\n    def _autopacking_conversion_function(v, dtype=None, name=None, as_ref=False):\n      \"\"\"Tensor conversion function that automatically packs arguments.\"\"\"\n      if as_ref:\n        return NotImplemented\n      inferred_dtype = _get_dtype_from_nested_lists(v)\n      if inferred_dtype is None:\n        # We did not find any tensor-like objects in the nested lists, so defer to\n        # other conversion functions.\n        return NotImplemented\n      if dtype is None:\n        dtype = inferred_dtype\n      elif dtype != inferred_dtype:\n        v = nest.map_structure(_cast_nested_seqs_to_dtype(dtype), v)\n>     return _autopacking_helper(v, dtype, name or \"packed\")\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/ops/array_ops.py:1145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlist_or_tuple = [<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>]\ndtype = tf.float32, name = 'values'\n\n    def _autopacking_helper(list_or_tuple, dtype, name):\n      \"\"\"Converts the given list or tuple to a tensor by packing.\n    \n      Args:\n        list_or_tuple: A (possibly nested) list or tuple containing a tensor.\n        dtype: The element type of the returned tensor.\n        name: A name for the returned tensor.\n    \n      Returns:\n        A `tf.Tensor` with value equivalent to `list_or_tuple`.\n      \"\"\"\n      if context.executing_eagerly():\n        # NOTE: Fast path when all the items are tensors, this doesn't do any type\n        # checking.\n        if all(ops.is_dense_tensor_like(elem) for elem in list_or_tuple):\n          return gen_array_ops.pack(list_or_tuple, name=name)\n      must_pack = False\n      converted_elems = []\n      with ops.name_scope(name) as scope:\n        for i, elem in enumerate(list_or_tuple):\n          if ops.is_dense_tensor_like(elem):\n            if dtype is not None and elem.dtype.base_dtype != dtype:\n              raise TypeError(\"Cannot convert a list containing a tensor of dtype \"\n                              \"%s to %s (Tensor is: %r)\" %\n                              (elem.dtype, dtype, elem))\n            converted_elems.append(elem)\n            must_pack = True\n          elif isinstance(elem, (list, tuple)):\n            converted_elem = _autopacking_helper(elem, dtype, str(i))\n            if ops.is_dense_tensor_like(converted_elem):\n              must_pack = True\n            converted_elems.append(converted_elem)\n          else:\n            converted_elems.append(elem)\n        if must_pack:\n          elems_as_tensors = []\n          for i, elem in enumerate(converted_elems):\n            if ops.is_dense_tensor_like(elem):\n              elems_as_tensors.append(elem)\n            else:\n              # NOTE(mrry): This is inefficient, but it enables us to\n              # handle the case where the list arguments are other\n              # convertible-to-tensor types, such as numpy arrays.\n              elems_as_tensors.append(\n                  constant_op.constant(elem, dtype=dtype, name=str(i)))\n>         return gen_array_ops.pack(elems_as_tensors, name=scope)\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/ops/array_ops.py:1095: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalues = [<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>]\naxis = 0, name = 'lambda_1_out/values_1/'\n\n    def pack(values, axis=0, name=None):\n      r\"\"\"Packs a list of `N` rank-`R` tensors into one rank-`(R+1)` tensor.\n    \n      Packs the `N` tensors in `values` into a tensor with rank one higher than each\n      tensor in `values`, by packing them along the `axis` dimension.\n      Given a list of tensors of shape `(A, B, C)`;\n    \n      if `axis == 0` then the `output` tensor will have the shape `(N, A, B, C)`.\n      if `axis == 1` then the `output` tensor will have the shape `(A, N, B, C)`.\n      Etc.\n    \n      For example:\n    \n      ```\n      # 'x' is [1, 4]\n      # 'y' is [2, 5]\n      # 'z' is [3, 6]\n      pack([x, y, z]) => [[1, 4], [2, 5], [3, 6]]  # Pack along first dim.\n      pack([x, y, z], axis=1) => [[1, 2, 3], [4, 5, 6]]\n      ```\n    \n      This is the opposite of `unpack`.\n    \n      Args:\n        values: A list of at least 1 `Tensor` objects with the same type.\n          Must be of same shape and type.\n        axis: An optional `int`. Defaults to `0`.\n          Dimension along which to pack.  Negative values wrap around, so the\n          valid range is `[-(R+1), R+1)`.\n        name: A name for the operation (optional).\n    \n      Returns:\n        A `Tensor`. Has the same type as `values`.\n      \"\"\"\n      _ctx = _context._context or _context.context()\n      if _ctx is not None and _ctx._thread_local_data.is_eager:\n        try:\n          _result = _pywrap_tensorflow.TFE_Py_FastPathExecute(\n            _ctx._context_handle, _ctx._thread_local_data.device_name, \"Pack\",\n            name, _ctx._post_execution_callbacks, values, \"axis\", axis)\n          return _result\n        except _core._FallbackException:\n          try:\n            return pack_eager_fallback(\n                values, axis=axis, name=name, ctx=_ctx)\n          except _core._SymbolicException:\n            pass  # Add nodes to the TensorFlow graph.\n        except _core._NotOkStatusException as e:\n          if name is not None:\n            message = e.message + \" name: \" + name\n          else:\n            message = e.message\n          _six.raise_from(_core._status_to_exception(e.code, message), None)\n      # Add nodes to the TensorFlow graph.\n      if not isinstance(values, (list, tuple)):\n        raise TypeError(\n            \"Expected list for 'values' argument to \"\n            \"'pack' Op, not %r.\" % values)\n      _attr_N = len(values)\n      if axis is None:\n        axis = 0\n      axis = _execute.make_int(axis, \"axis\")\n      _, _, _op = _op_def_lib._apply_op_helper(\n>           \"Pack\", values=values, axis=axis, name=name)\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/ops/gen_array_ops.py:5897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tensorflow.python.framework.op_def_library.OpDefLibrary object at 0x7f684c8880d0>\nop_type_name = 'Pack', name = 'lambda_1_out/values_1/', keywords = {}\nop_info = <tensorflow.python.framework.op_def_library._OpInfo object at 0x7f684c88ee90>\nop_def = name: \"Pack\"\ninput_arg {\n  name: \"values\"\n  type_attr: \"T\"\n  number_attr: \"N\"\n}\noutput_arg {\n  name: \"output\"\n  type_a... minimum: 1\n}\nattr {\n  name: \"T\"\n  type: \"type\"\n}\nattr {\n  name: \"axis\"\n  type: \"int\"\n  default_value {\n    i: 0\n  }\n}\n\ng = <tensorflow.python.framework.ops.Graph object at 0x7f68465e4ed0>\ndeprecation_version = 0, default_type_attr_map = {}\n\n    def _apply_op_helper(self, op_type_name, name=None, **keywords):\n      \"\"\"Implementation of apply_op that returns output_structure, op.\"\"\"\n      op_info = self._ops.get(op_type_name, None)\n      if op_info is None:\n        raise RuntimeError(\"Unrecognized Op name \" + op_type_name)\n      op_def = op_info.op_def\n    \n      # Determine the graph context.\n      try:\n        # Need to flatten all the arguments into a list.\n        # pylint: disable=protected-access\n        g = ops._get_graph_from_inputs(_Flatten(keywords.values()))\n        # pylint: enable=protected-access\n      except AssertionError as e:\n        raise RuntimeError(\n            \"Cannot determine graph for Op '%s' due to: %s\"\n            % (op_type_name, e.message))\n    \n      # Default name if not specified.\n      if name is None:\n        name = op_type_name\n    \n      # Check for deprecation\n      deprecation_version = op_def.deprecation.version\n      if deprecation_version:\n        producer = g.graph_def_versions.producer\n        if producer >= deprecation_version:\n          raise NotImplementedError(\n              (\"Op %s is not available in GraphDef version %d. \"\n               \"It has been removed in version %d. %s.\") %\n              (op_type_name, producer, deprecation_version,\n               op_def.deprecation.explanation))\n    \n      # Fill in the list of default types for all \"type\" attrs.  This\n      # will be used to choose a preferred dtype to convert to in the\n      # absence of input type information.\n      #\n      # TODO(b/31302892): Currently the defaults don't work in the right\n      # way if you have two inputs, one of whose type resolution depends\n      # on the other.  Handling this will require restructuring this code\n      # significantly.\n      default_type_attr_map = {}\n      for attr_def in op_def.attr:\n        if attr_def.type != \"type\":\n          continue\n        key = attr_def.name\n        if attr_def.HasField(\"default_value\"):\n          default_type_attr_map[key] = dtypes.as_dtype(\n              attr_def.default_value.type)\n    \n      # Requires that op_def has passed validation (using the C++\n      # ValidateOpDef() from ../framework/op_def_util.h).\n      attrs = {}\n      inputs = []\n      input_types = []\n      with g.as_default(), ops.name_scope(name) as scope:\n    \n        # Perform input type inference\n        inferred_from = {}\n        for input_arg in op_def.input_arg:\n          input_name = input_arg.name\n          if input_name in keywords:\n            values = keywords.pop(input_name)\n          elif input_name + \"_\" in keywords:\n            # Handle the case where the name is a keyword or built-in\n            # for Python so we use the name + _ instead.\n            input_name += \"_\"\n            values = keywords.pop(input_name)\n          else:\n            raise TypeError(\"No argument for input \" + input_name)\n    \n          # Goals:\n          # * Convert values to Tensors if it contains constants.\n          # * Verify that values is a list if that matches the input_arg's\n          #   type.\n          # * If the input_arg's type is determined by attrs, either set\n          #   those attrs and validate those attr values are legal (if\n          #   they have not yet been set) or validate the input matches\n          #   the type indicated by the attrs (if they have already been\n          #   inferred via an earlier input).\n          # * If the input_arg has an explicit type, make sure the input\n          #   conforms.\n    \n          if _IsListParameter(input_arg):\n            if not _IsListValue(values):\n              raise TypeError(\n                  \"Expected list for '%s' argument to '%s' Op, not %s.\" %\n                  (input_name, op_type_name, values))\n            # In cases where we expect all elements of the list to have the\n            # same dtype, try to cast non-Tensor elements to that type.\n            dtype = None\n            default_dtype = None\n            if input_arg.type != types_pb2.DT_INVALID:\n              dtype = input_arg.type\n            elif input_arg.number_attr:\n              if input_arg.type_attr in attrs:\n                dtype = attrs[input_arg.type_attr]\n              else:\n                for t in values:\n                  if isinstance(t, ops.Tensor):\n                    dtype = t.dtype\n                    break\n    \n              # dtype still not found, prefer using the default dtype\n              # from the attr.\n              if dtype is None and input_arg.type_attr in default_type_attr_map:\n                default_dtype = default_type_attr_map[input_arg.type_attr]\n    \n            try:\n              if not input_arg.is_ref and dtype:\n                dtype = dtypes.as_dtype(dtype).base_dtype\n              values = ops.internal_convert_n_to_tensor(\n                  values,\n                  name=input_arg.name,\n                  dtype=dtype if dtype else None,\n                  preferred_dtype=default_dtype,\n                  as_ref=input_arg.is_ref)\n              if input_arg.number_attr and len(\n                  set(v.dtype.base_dtype for v in values)) > 1:\n                raise TypeError()  # All types should match.\n            except (TypeError, ValueError):\n              # What types does the conversion function think values have?\n              observed_types = []\n              for value in values:\n                try:\n                  converted_value = ops.internal_convert_to_tensor(\n                      value, as_ref=input_arg.is_ref)\n                  observed_types.append(converted_value.dtype.base_dtype.name)\n                except (TypeError, ValueError):\n                  observed_types.append(\"<NOT CONVERTIBLE TO TENSOR>\")\n              observed = \", \".join(observed_types)\n    \n              prefix = (\n                  \"Tensors in list passed to '%s' of '%s' Op have types [%s]\" %\n                  (input_name, op_type_name, observed))\n              if input_arg.number_attr:\n                if input_arg.type != types_pb2.DT_INVALID:\n                  raise TypeError(\"%s that do not match expected type %s.\" %\n                                  (prefix, dtype.name))\n                elif input_arg.type_attr in attrs:\n                  raise TypeError(\"%s that do not match type %s inferred from \"\n                                  \"earlier arguments.\" %\n                                  (prefix, dtype.name))\n                else:\n                  raise TypeError(\"%s that don't all match.\" % prefix)\n              else:\n                raise TypeError(\n                    \"%s that are invalid. Tensors: %s\" % (prefix, values))\n    \n            types = [x.dtype for x in values]\n            inputs.extend(values)\n          else:\n            # In cases where we have an expected type, try to convert non-Tensor\n            # arguments to that type.\n            dtype = None\n            default_dtype = None\n            if input_arg.type != types_pb2.DT_INVALID:\n              dtype = input_arg.type\n            elif input_arg.type_attr in attrs:\n              dtype = attrs[input_arg.type_attr]\n            elif input_arg.type_attr in default_type_attr_map:\n              # The dtype could not be inferred solely from the inputs,\n              # so we prefer the attr's default, so code that adds a new attr\n              # with a default is backwards compatible.\n              default_dtype = default_type_attr_map[input_arg.type_attr]\n    \n            try:\n              values = ops.internal_convert_to_tensor(\n                  values,\n                  name=input_arg.name,\n                  dtype=dtype,\n                  as_ref=input_arg.is_ref,\n                  preferred_dtype=default_dtype)\n            except TypeError as err:\n              if dtype is None:\n                raise err\n              else:\n                raise TypeError(\n                    \"Expected %s passed to parameter '%s' of op '%s', got %s of \"\n                    \"type '%s' instead. Error: %s\" %\n                    (dtypes.as_dtype(dtype).name, input_arg.name, op_type_name,\n                     repr(values), type(values).__name__, err))\n            except ValueError:\n              # What type does convert_to_tensor think it has?\n              try:\n                observed = ops.internal_convert_to_tensor(\n                    values, as_ref=input_arg.is_ref).dtype.name\n              except ValueError as err:\n                raise ValueError(\n                    \"Tried to convert '%s' to a tensor and failed. Error: %s\" %\n                    (input_name, err))\n              prefix = (\"Input '%s' of '%s' Op has type %s that does not match\" %\n                        (input_name, op_type_name, observed))\n              if input_arg.type != types_pb2.DT_INVALID:\n                raise TypeError(\"%s expected type of %s.\" %\n                                (prefix, dtypes.as_dtype(input_arg.type).name))\n              else:\n                # Update the maps with the default, if needed.\n                k = input_arg.type_attr\n                if k in default_type_attr_map:\n                  if k not in attrs:\n                    attrs[k] = default_type_attr_map[k]\n                    if k not in inferred_from:\n                      inferred_from[k] = \"Default in OpDef\"\n    \n                raise TypeError(\n                    \"%s type %s of argument '%s'.\" %\n                    (prefix, dtypes.as_dtype(attrs[input_arg.type_attr]).name,\n                     inferred_from[input_arg.type_attr]))\n    \n            types = [values.dtype]\n            inputs.append(values)\n          base_types = [x.base_dtype for x in types]\n    \n          if input_arg.number_attr:\n            # <number-attr> * <type> or <number-attr> * <type-attr>\n            if input_arg.number_attr in attrs:\n              if len(values) != attrs[input_arg.number_attr]:\n                raise ValueError(\n                    \"List argument '%s' to '%s' Op with length %d must match \"\n                    \"length %d of argument '%s'.\" %\n                    (input_name, op_type_name, len(values),\n                     attrs[input_arg.number_attr],\n                     inferred_from[input_arg.number_attr]))\n            else:\n              attrs[input_arg.number_attr] = len(values)\n              inferred_from[input_arg.number_attr] = input_name\n              num_attr = _Attr(op_def, input_arg.number_attr)\n              if num_attr.has_minimum and len(values) < num_attr.minimum:\n                raise ValueError(\n                    \"List argument '%s' to '%s' Op with length %d shorter \"\n                    \"than minimum length %d.\" %\n                    (input_name, op_type_name, len(values), num_attr.minimum))\n            # All tensors must have the same base type.\n            if any(bt != base_types[0] for bt in base_types):\n              raise TypeError(\n                  \"All tensors passed to '%s' of '%s' Op \"\n                  \"must have the same type.\" %\n                  (input_name, op_type_name))\n            if input_arg.type != types_pb2.DT_INVALID:\n              # <number-attr> * <type> case\n              if base_types and base_types[0] != input_arg.type:\n                assert False, \"Unreachable\"\n            elif input_arg.type_attr in attrs:\n              # <number-attr> * <type-attr> case, where <type-attr> already\n              # has an inferred value.\n              if base_types and base_types[0] != attrs[input_arg.type_attr]:\n                assert False, \"Unreachable\"\n            else:\n              # <number-attr> * <type-attr> case, where we are now setting\n              # the <type-attr> based on this input\n              if not base_types:\n                raise TypeError(\n                    \"Don't know how to infer type variable from empty input \"\n                    \"list passed to input '%s' of '%s' Op.\" %\n                    (input_name, op_type_name))\n              attrs[input_arg.type_attr] = base_types[0]\n              inferred_from[input_arg.type_attr] = input_name\n              type_attr = _Attr(op_def, input_arg.type_attr)\n              _SatisfiesTypeConstraint(base_types[0], type_attr,\n                                       param_name=input_name)\n          elif input_arg.type_attr:\n            # <type-attr>\n            attr_value = base_types[0]\n            if input_arg.type_attr in attrs:\n              if attrs[input_arg.type_attr] != attr_value:\n                assert False, \"Unreachable\"\n            else:\n              for base_type in base_types:\n                _SatisfiesTypeConstraint(base_type,\n                                         _Attr(op_def, input_arg.type_attr),\n                                         param_name=input_name)\n              attrs[input_arg.type_attr] = attr_value\n              inferred_from[input_arg.type_attr] = input_name\n          elif input_arg.type_list_attr:\n            # <type-list-attr>\n            attr_value = base_types\n            if input_arg.type_list_attr in attrs:\n              if attrs[input_arg.type_list_attr] != attr_value:\n                raise TypeError(\n                    \"Input '%s' of '%s' Op has type list of %s that does not \"\n                    \"match type list %s of argument '%s'.\" %\n                    (input_name, op_type_name,\n                     \", \".join(dtypes.as_dtype(x).name for x in attr_value),\n                     \", \".join(dtypes.as_dtype(x).name\n                               for x in attrs[input_arg.type_list_attr]),\n                     inferred_from[input_arg.type_list_attr]))\n            else:\n              for base_type in base_types:\n                _SatisfiesTypeConstraint(base_type,\n                                         _Attr(op_def, input_arg.type_list_attr),\n                                         param_name=input_name)\n              attrs[input_arg.type_list_attr] = attr_value\n              inferred_from[input_arg.type_list_attr] = input_name\n          else:\n            # single Tensor with specified type\n            if base_types[0] != input_arg.type:\n              assert False, \"Unreachable\"\n    \n          if input_arg.is_ref:\n            if not all(x._is_ref_dtype for x in types):  # pylint: disable=protected-access\n              raise TypeError(\n                  (\"'%s' Op requires that input '%s' be a mutable tensor \"\n                   \"(e.g.: a tf.Variable)\") % (op_type_name, input_name))\n            input_types.extend(types)\n          else:\n            input_types.extend(base_types)\n    \n        # Process remaining attrs\n        for attr in op_def.attr:\n          # Skip attrs that have already had their values inferred\n          if attr.name in attrs:\n            if attr.name in keywords:\n              raise TypeError(\n                  \"Should not specify value for inferred attr '%s'.\" % attr.name)\n            continue\n          if attr.name in keywords:\n            attrs[attr.name] = keywords.pop(attr.name)\n          elif attr.name + \"_\" in keywords:\n            # Attrs whose names match Python keywords have an extra '_'\n            # appended, so we must check for that as well.\n            attrs[attr.name] = keywords.pop(attr.name + \"_\")\n          else:\n            raise TypeError(\"No argument for attr \" + attr.name)\n    \n        # Convert attr values to AttrValue protos.\n        attr_protos = {}\n        for attr_def in op_def.attr:\n          key = attr_def.name\n          value = attrs[key]\n          attr_value = attr_value_pb2.AttrValue()\n          if attr_def.HasField(\"default_value\") and value is None:\n            attr_value.CopyFrom(attr_def.default_value)\n            attr_protos[key] = attr_value\n            continue\n          if attr_def.type.startswith(\"list(\"):\n            if not _IsListValue(value):\n              raise TypeError(\"Expected list for attr \" + key)\n            if attr_def.has_minimum:\n              if len(value) < attr_def.minimum:\n                raise ValueError(\"Attr '%s' of '%s' Op passed list of length %d \"\n                                 \"less than minimum %d.\" %\n                                 (key, op_type_name, len(value),\n                                  attr_def.minimum))\n            attr_value.list.SetInParent()\n          if attr_def.type == \"string\":\n            attr_value.s = _MakeStr(value, key)\n            if attr_def.HasField(\"allowed_values\"):\n              if attr_value.s not in attr_def.allowed_values.list.s:\n                raise ValueError(\n                    \"Attr '%s' of '%s' Op passed string '%s' not in: \\\"%s\\\".\" %\n                    (key, op_type_name, compat.as_text(attr_value.s),\n                     '\", \"'.join(map(compat.as_text,\n                                     attr_def.allowed_values.list.s))))\n          elif attr_def.type == \"list(string)\":\n            attr_value.list.s.extend([_MakeStr(x, key) for x in value])\n            if attr_def.HasField(\"allowed_values\"):\n              for x in attr_value.list.s:\n                if x not in attr_def.allowed_values.list.s:\n                  raise ValueError(\n                      \"Attr '%s' of '%s' Op passed string '%s' not in: \\\"%s\\\".\" %\n                      (key, op_type_name, compat.as_text(x),\n                       '\", \"'.join(map(compat.as_text,\n                                       attr_def.allowed_values.list.s))))\n          elif attr_def.type == \"int\":\n            attr_value.i = _MakeInt(value, key)\n            if attr_def.has_minimum:\n              if attr_value.i < attr_def.minimum:\n                raise ValueError(\n                    \"Attr '%s' of '%s' Op passed %d less than minimum %d.\" %\n                    (key, op_type_name, attr_value.i, attr_def.minimum))\n          elif attr_def.type == \"list(int)\":\n            attr_value.list.i.extend([_MakeInt(x, key) for x in value])\n          elif attr_def.type == \"float\":\n            attr_value.f = _MakeFloat(value, key)\n          elif attr_def.type == \"list(float)\":\n            attr_value.list.f.extend([_MakeFloat(x, key) for x in value])\n          elif attr_def.type == \"bool\":\n            attr_value.b = _MakeBool(value, key)\n          elif attr_def.type == \"list(bool)\":\n            attr_value.list.b.extend([_MakeBool(x, key) for x in value])\n          elif attr_def.type == \"type\":\n            attr_value.type = _MakeType(value, attr_def)\n          elif attr_def.type == \"list(type)\":\n            attr_value.list.type.extend(\n                [_MakeType(x, attr_def) for x in value])\n          elif attr_def.type == \"shape\":\n            attr_value.shape.CopyFrom(_MakeShape(value, key))\n          elif attr_def.type == \"list(shape)\":\n            attr_value.list.shape.extend(\n                [_MakeShape(x, key) for x in value])\n          elif attr_def.type == \"tensor\":\n            attr_value.tensor.CopyFrom(_MakeTensor(value, key))\n          elif attr_def.type == \"list(tensor)\":\n            attr_value.list.tensor.extend(\n                [_MakeTensor(x, key) for x in value])\n          elif attr_def.type == \"func\":\n            attr_value.func.CopyFrom(_MakeFunc(value, key))\n          elif attr_def.type == \"list(func)\":\n            attr_value.list.func.extend([_MakeFunc(x, key) for x in value])\n          else:\n            raise TypeError(\"Unrecognized Attr type \" + attr_def.type)\n    \n          attr_protos[key] = attr_value\n        del attrs  # attrs is no longer authoritative, use attr_protos instead\n    \n        # Determine output types (possibly using attrs)\n        output_structure = []\n        for arg in op_def.output_arg:\n          if arg.number_attr:\n            n = _AttrValue(attr_protos, arg.number_attr).i\n            output_structure.append(n)\n          elif arg.type_attr:\n            t = _AttrValue(attr_protos, arg.type_attr)\n            output_structure.append(None)\n          elif arg.type_list_attr:\n            t = _AttrValue(attr_protos, arg.type_list_attr)\n            output_structure.append(len(t.list.type))\n          else:\n            output_structure.append(None)\n    \n        if keywords:\n          raise TypeError(\"apply_op() got unexpected keyword arguments: \" +\n                          \", \".join(sorted(keywords.keys())))\n    \n        # NOTE(mrry): We add an explicit colocation constraint between\n        # the newly created op and any of its reference-typed inputs.\n        must_colocate_inputs = [val for arg, val in zip(op_def.input_arg, inputs)\n                                if arg.is_ref]\n        with _MaybeColocateWith(must_colocate_inputs):\n          # Add Op to graph\n          op = g.create_op(op_type_name, inputs, dtypes=None, name=scope,\n                           input_types=input_types, attrs=attr_protos,\n>                          op_def=op_def)\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/framework/op_def_library.py:788: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (<tensorflow.python.framework.ops.Graph object at 0x7f68465e4ed0>, 'Pack', [<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>])\nkwargs = {'attrs': {'N': i: 2\n, 'T': type: DT_FLOAT\n, 'axis': i: 0\n}, 'dtypes': None, 'input_types': [tf.float32, tf.float32], 'name': 'lambda_1_out/values_1/', ...}\ninvalid_args = []\nnamed_args = {'attrs': {'N': i: 2\n, 'T': type: DT_FLOAT\n, 'axis': i: 0\n}, 'compute_device': True, 'compute_shapes': True, 'dtypes': None, ...}\narg_name = 'compute_shapes'\nspec = DeprecatedArgSpec(position=8, has_ok_value=False, ok_value=None)\n\n    @functools.wraps(func)\n    def new_func(*args, **kwargs):\n      \"\"\"Deprecation wrapper.\"\"\"\n      # TODO(apassos) figure out a way to have reasonable performance with\n      # deprecation warnings and eager mode.\n      if is_in_graph_mode.IS_IN_GRAPH_MODE() and _PRINT_DEPRECATION_WARNINGS:\n        invalid_args = []\n        named_args = tf_inspect.getcallargs(func, *args, **kwargs)\n        for arg_name, spec in iter(deprecated_positions.items()):\n          if (spec.position < len(args) and\n              not (spec.has_ok_value and\n                   _same_value(named_args[arg_name], spec.ok_value))):\n            invalid_args.append(arg_name)\n        if is_varargs_deprecated and len(args) > len(arg_spec.args):\n          invalid_args.append(arg_spec.varargs)\n        if is_kwargs_deprecated and kwargs:\n          invalid_args.append(arg_spec.varkw)\n        for arg_name in deprecated_arg_names:\n          if (arg_name in kwargs and\n              not (deprecated_positions[arg_name].has_ok_value and\n                   _same_value(named_args[arg_name],\n                               deprecated_positions[arg_name].ok_value))):\n            invalid_args.append(arg_name)\n        for arg_name in invalid_args:\n          if (func, arg_name) not in _PRINTED_WARNING:\n            if warn_once:\n              _PRINTED_WARNING[(func, arg_name)] = True\n            logging.warning(\n                'From %s: calling %s (from %s) with %s is deprecated and will '\n                'be removed %s.\\nInstructions for updating:\\n%s',\n                _call_location(), decorator_utils.get_qualified_name(func),\n                func.__module__, arg_name,\n                'in a future version' if date is None else ('after %s' % date),\n                instructions)\n>     return func(*args, **kwargs)\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/util/deprecation.py:507: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tensorflow.python.framework.ops.Graph object at 0x7f68465e4ed0>\nop_type = 'Pack'\ninputs = [<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>]\ndtypes = None, input_types = [tf.float32, tf.float32]\nname = 'lambda_1_out/values_1'\nattrs = {'N': i: 2\n, 'T': type: DT_FLOAT\n, 'axis': i: 0\n}\nop_def = name: \"Pack\"\ninput_arg {\n  name: \"values\"\n  type_attr: \"T\"\n  number_attr: \"N\"\n}\noutput_arg {\n  name: \"output\"\n  type_a... minimum: 1\n}\nattr {\n  name: \"T\"\n  type: \"type\"\n}\nattr {\n  name: \"axis\"\n  type: \"int\"\n  default_value {\n    i: 0\n  }\n}\n\ncompute_device = True\n\n    @deprecated_args(None,\n                     \"Shapes are always computed; don't use the compute_shapes \"\n                     \"as it has no effect.\", \"compute_shapes\")\n    def create_op(\n        self,\n        op_type,\n        inputs,\n        dtypes=None,  # pylint: disable=redefined-outer-name\n        input_types=None,\n        name=None,\n        attrs=None,\n        op_def=None,\n        compute_shapes=True,\n        compute_device=True):\n      \"\"\"Creates an `Operation` in this graph.\n    \n      This is a low-level interface for creating an `Operation`. Most\n      programs will not call this method directly, and instead use the\n      Python op constructors, such as `tf.constant()`, which add ops to\n      the default graph.\n    \n      Args:\n        op_type: The `Operation` type to create. This corresponds to the\n          `OpDef.name` field for the proto that defines the operation.\n        inputs: A list of `Tensor` objects that will be inputs to the `Operation`.\n        dtypes: (Optional) A list of `DType` objects that will be the types of the\n          tensors that the operation produces.\n        input_types: (Optional.) A list of `DType`s that will be the types of the\n          tensors that the operation consumes. By default, uses the base `DType`\n          of each input in `inputs`. Operations that expect reference-typed inputs\n          must specify `input_types` explicitly.\n        name: (Optional.) A string name for the operation. If not specified, a\n          name is generated based on `op_type`.\n        attrs: (Optional.) A dictionary where the key is the attribute name (a\n          string) and the value is the respective `attr` attribute of the\n          `NodeDef` proto that will represent the operation (an `AttrValue`\n          proto).\n        op_def: (Optional.) The `OpDef` proto that describes the `op_type` that\n          the operation will have.\n        compute_shapes: (Optional.) Deprecated. Has no effect (shapes are always\n          computed).\n        compute_device: (Optional.) If True, device functions will be executed to\n          compute the device property of the Operation.\n    \n      Raises:\n        TypeError: if any of the inputs is not a `Tensor`.\n        ValueError: if colocation conflicts with existing device assignment.\n    \n      Returns:\n        An `Operation` object.\n      \"\"\"\n      del compute_shapes\n    \n      self._check_not_finalized()\n      for idx, a in enumerate(inputs):\n        if not isinstance(a, Tensor):\n          raise TypeError(\"Input #%d is not a tensor: %s\" % (idx, a))\n      if name is None:\n        name = op_type\n      # If a names ends with a '/' it is a \"name scope\" and we use it as-is,\n      # after removing the trailing '/'.\n      if name and name[-1] == \"/\":\n        name = name_from_scope_name(name)\n      else:\n        name = self.unique_name(name)\n    \n      node_def = _NodeDef(op_type, name, device=None, attrs=attrs)\n    \n      input_ops = set([t.op for t in inputs])\n      control_inputs = self._control_dependencies_for_inputs(input_ops)\n      # _create_op_helper mutates the new Operation. `_mutation_lock` ensures a\n      # Session.run call cannot occur between creating and mutating the op.\n      with self._mutation_lock():\n        ret = Operation(\n            node_def,\n            self,\n            inputs=inputs,\n            output_types=dtypes,\n            control_inputs=control_inputs,\n            input_types=input_types,\n            original_op=self._default_original_op,\n>           op_def=op_def)\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/framework/ops.py:3616: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'Operation' object has no attribute '_c_op'\") raised in repr()] Operation object at 0x7f6834fe4cd0>\nnode_def = name: \"lambda_1_out/values_1\"\nop: \"Pack\"\nattr {\n  key: \"N\"\n  value {\n    i: 2\n  }\n}\nattr {\n  key: \"T\"\n  value {\n    type: DT_FLOAT\n  }\n}\nattr {\n  key: \"axis\"\n  value {\n    i: 0\n  }\n}\n\ng = <tensorflow.python.framework.ops.Graph object at 0x7f68465e4ed0>\ninputs = [<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>]\noutput_types = None, control_inputs = [], input_types = [tf.float32, tf.float32]\noriginal_op = None\nop_def = name: \"Pack\"\ninput_arg {\n  name: \"values\"\n  type_attr: \"T\"\n  number_attr: \"N\"\n}\noutput_arg {\n  name: \"output\"\n  type_a... minimum: 1\n}\nattr {\n  name: \"T\"\n  type: \"type\"\n}\nattr {\n  name: \"axis\"\n  type: \"int\"\n  default_value {\n    i: 0\n  }\n}\n\n\n    def __init__(self,\n                 node_def,\n                 g,\n                 inputs=None,\n                 output_types=None,\n                 control_inputs=None,\n                 input_types=None,\n                 original_op=None,\n                 op_def=None):\n      r\"\"\"Creates an `Operation`.\n    \n      NOTE: This constructor validates the name of the `Operation` (passed\n      as `node_def.name`). Valid `Operation` names match the following\n      regular expression:\n    \n          [A-Za-z0-9.][A-Za-z0-9_.\\\\-/]*\n    \n      Args:\n        node_def: `node_def_pb2.NodeDef`.  `NodeDef` for the `Operation`. Used for\n          attributes of `node_def_pb2.NodeDef`, typically `name`, `op`, and\n          `device`.  The `input` attribute is irrelevant here as it will be\n          computed when generating the model.\n        g: `Graph`. The parent graph.\n        inputs: list of `Tensor` objects. The inputs to this `Operation`.\n        output_types: list of `DType` objects.  List of the types of the `Tensors`\n          computed by this operation.  The length of this list indicates the\n          number of output endpoints of the `Operation`.\n        control_inputs: list of operations or tensors from which to have a control\n          dependency.\n        input_types: List of `DType` objects representing the types of the tensors\n          accepted by the `Operation`.  By default uses `[x.dtype.base_dtype for x\n          in inputs]`.  Operations that expect reference-typed inputs must specify\n          these explicitly.\n        original_op: Optional. Used to associate the new `Operation` with an\n          existing `Operation` (for example, a replica with the op that was\n          replicated).\n        op_def: Optional. The `op_def_pb2.OpDef` proto that describes the op type\n          that this `Operation` represents.\n    \n      Raises:\n        TypeError: if control inputs are not Operations or Tensors,\n          or if `node_def` is not a `NodeDef`,\n          or if `g` is not a `Graph`,\n          or if `inputs` are not tensors,\n          or if `inputs` and `input_types` are incompatible.\n        ValueError: if the `node_def` name is not valid.\n      \"\"\"\n      # For internal use only: `node_def` can be set to a TF_Operation to create\n      # an Operation for that op. This is useful for creating Operations for ops\n      # indirectly created by C API methods, e.g. the ops created by\n      # TF_ImportGraphDef. When `node_def` is a TF_Operation, all optional fields\n      # should be None.\n    \n      if isinstance(node_def, node_def_pb2.NodeDef):\n        if node_def.ByteSize() >= (1 << 31) or node_def.ByteSize() < 0:\n          raise ValueError(\n              \"Cannot create a tensor proto whose content is larger than 2GB.\")\n        if not _VALID_OP_NAME_REGEX.match(node_def.name):\n          raise ValueError(\"'%s' is not a valid node name\" % node_def.name)\n        c_op = None\n      elif type(node_def).__name__ == \"SwigPyObject\":\n        assert inputs is None\n        assert output_types is None\n        assert control_inputs is None\n        assert input_types is None\n        assert original_op is None\n        assert op_def is None\n        c_op = node_def\n      else:\n        raise TypeError(\"node_def needs to be a NodeDef: %s\" % node_def)\n    \n      if not isinstance(g, Graph):\n        raise TypeError(\"g needs to be a Graph: %s\" % g)\n      self._graph = g\n    \n      if inputs is None:\n        inputs = []\n      elif not isinstance(inputs, list):\n        raise TypeError(\"inputs needs to be a list of Tensors: %s\" % inputs)\n      for a in inputs:\n        if not isinstance(a, Tensor):\n          raise TypeError(\"input needs to be a Tensor: %s\" % a)\n      if input_types is None:\n        input_types = [i.dtype.base_dtype for i in inputs]\n      else:\n        if not all(\n            x.is_compatible_with(i.dtype) for i, x in zip(inputs, input_types)):\n          raise TypeError(\"In op '%s', input types (%s) are not compatible \"\n                          \"with expected types (%s)\" %\n                          (node_def.name, [i.dtype for i in inputs], input_types))\n    \n      # Build the list of control inputs.\n      control_input_ops = []\n      if control_inputs:\n        for c in control_inputs:\n          control_op = None\n          if isinstance(c, Operation):\n            control_op = c\n          elif isinstance(c, (Tensor, IndexedSlices)):\n            control_op = c.op\n          else:\n            raise TypeError(\"Control input must be an Operation, \"\n                            \"a Tensor, or IndexedSlices: %s\" % c)\n          control_input_ops.append(control_op)\n    \n      # This will be set by self.inputs.\n      self._inputs_val = None\n    \n      # pylint: disable=protected-access\n      self._id_value = self._graph._next_id()\n      self._original_op = original_op\n      self._traceback = tf_stack.extract_stack()\n    \n      # List of _UserDevSpecs holding code location of device context manager\n      # invocations and the users original argument to them.\n      self._device_code_locations = None\n      # Dict mapping op name to file and line information for op colocation\n      # context managers.\n      self._colocation_code_locations = None\n      self._control_flow_context = self.graph._get_control_flow_context()\n      # pylint: enable=protected-access\n    \n      # Initialize self._c_op.\n      if c_op:\n        self._c_op = c_op\n      else:\n        if op_def is None:\n          op_def = self._graph._get_op_def(node_def.op)\n        # TODO(skyewm): op_def_library.apply_op() flattens the incoming inputs.\n        # Refactor so we don't have to do this here.\n        grouped_inputs = self._reconstruct_sequence_inputs(\n            op_def, inputs, node_def.attr)\n        self._c_op = _create_c_op(self._graph, node_def, grouped_inputs,\n>                                 control_input_ops)\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/framework/ops.py:2027: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = <tensorflow.python.framework.ops.Graph object at 0x7f68465e4ed0>\nnode_def = name: \"lambda_1_out/values_1\"\nop: \"Pack\"\nattr {\n  key: \"N\"\n  value {\n    i: 2\n  }\n}\nattr {\n  key: \"T\"\n  value {\n    type: DT_FLOAT\n  }\n}\nattr {\n  key: \"axis\"\n  value {\n    i: 0\n  }\n}\n\ninputs = [[<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>]]\ncontrol_inputs = []\n\n    def _create_c_op(graph, node_def, inputs, control_inputs):\n      \"\"\"Creates a TF_Operation.\n    \n      Args:\n        graph: a `Graph`.\n        node_def: `node_def_pb2.NodeDef` for the operation to create.\n        inputs: A list of `Tensor`s (corresponding to scalar inputs) and lists of\n          `Tensor`s (corresponding to sequence inputs, e.g. \"int64 * N\",\n          \"list(int64)\"). The length of the list should be equal to the number of\n          inputs specified by this operation's op def.\n        control_inputs: A list of `Operation`s to set as control dependencies.\n    \n      Returns:\n        A wrapped TF_Operation*.\n      \"\"\"\n      # pylint: disable=protected-access\n      op_desc = c_api.TF_NewOperation(graph._c_graph, compat.as_str(node_def.op),\n                                      compat.as_str(node_def.name))\n      if node_def.device:\n        c_api.TF_SetDevice(op_desc, compat.as_str(node_def.device))\n      # Add inputs\n      for op_input in inputs:\n        if isinstance(op_input, (list, tuple)):\n          c_api.TF_AddInputList(op_desc, [t._as_tf_output() for t in op_input])\n        else:\n          c_api.TF_AddInput(op_desc, op_input._as_tf_output())\n    \n      # Add control inputs\n      for control_input in control_inputs:\n        c_api.TF_AddControlInput(op_desc, control_input._c_op)\n      # pylint: enable=protected-access\n    \n      # Add attrs\n      for name, attr_value in node_def.attr.items():\n        serialized = attr_value.SerializeToString()\n        # TODO(skyewm): this creates and deletes a new TF_Status for every attr.\n        # It might be worth creating a convenient way to re-use the same status.\n        c_api.TF_SetAttrValueProto(op_desc, compat.as_str(name), serialized)\n    \n      try:\n        c_op = c_api.TF_FinishOperation(op_desc)\n      except errors.InvalidArgumentError as e:\n        # Convert to ValueError for backwards compatibility.\n>       raise ValueError(str(e))\nE       ValueError: Shapes must be equal rank, but are 3 and 2\nE       \tFrom merging shape 0 with other shapes. for 'lambda_1_out/values_1' (op: 'Pack') with input shapes: [?,2,2], [?,2].\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/framework/ops.py:1867: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\ngraph = <tensorflow.python.framework.ops.Graph object at 0x7f68465e4ed0>\nnode_def = name: \"lambda_1_out/packed\"\nop: \"Pack\"\nattr {\n  key: \"N\"\n  value {\n    i: 2\n  }\n}\nattr {\n  key: \"T\"\n  value {\n    type: DT_FLOAT\n  }\n}\nattr {\n  key: \"axis\"\n  value {\n    i: 0\n  }\n}\n\ninputs = [[<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>]]\ncontrol_inputs = []\n\n    def _create_c_op(graph, node_def, inputs, control_inputs):\n      \"\"\"Creates a TF_Operation.\n    \n      Args:\n        graph: a `Graph`.\n        node_def: `node_def_pb2.NodeDef` for the operation to create.\n        inputs: A list of `Tensor`s (corresponding to scalar inputs) and lists of\n          `Tensor`s (corresponding to sequence inputs, e.g. \"int64 * N\",\n          \"list(int64)\"). The length of the list should be equal to the number of\n          inputs specified by this operation's op def.\n        control_inputs: A list of `Operation`s to set as control dependencies.\n    \n      Returns:\n        A wrapped TF_Operation*.\n      \"\"\"\n      # pylint: disable=protected-access\n      op_desc = c_api.TF_NewOperation(graph._c_graph, compat.as_str(node_def.op),\n                                      compat.as_str(node_def.name))\n      if node_def.device:\n        c_api.TF_SetDevice(op_desc, compat.as_str(node_def.device))\n      # Add inputs\n      for op_input in inputs:\n        if isinstance(op_input, (list, tuple)):\n          c_api.TF_AddInputList(op_desc, [t._as_tf_output() for t in op_input])\n        else:\n          c_api.TF_AddInput(op_desc, op_input._as_tf_output())\n    \n      # Add control inputs\n      for control_input in control_inputs:\n        c_api.TF_AddControlInput(op_desc, control_input._c_op)\n      # pylint: enable=protected-access\n    \n      # Add attrs\n      for name, attr_value in node_def.attr.items():\n        serialized = attr_value.SerializeToString()\n        # TODO(skyewm): this creates and deletes a new TF_Status for every attr.\n        # It might be worth creating a convenient way to re-use the same status.\n        c_api.TF_SetAttrValueProto(op_desc, compat.as_str(name), serialized)\n    \n      try:\n>       c_op = c_api.TF_FinishOperation(op_desc)\nE       tensorflow.python.framework.errors_impl.InvalidArgumentError: Shapes must be equal rank, but are 3 and 2\nE       \tFrom merging shape 0 with other shapes. for 'lambda_1_out/packed' (op: 'Pack') with input shapes: [?,2,2], [?,2].\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/framework/ops.py:1864: InvalidArgumentError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tensorflow.python.framework.op_def_library.OpDefLibrary object at 0x7f684bdfde50>\nop_type_name = 'HistogramSummary', name = 'lambda_1_out/', keywords = {}\nop_info = <tensorflow.python.framework.op_def_library._OpInfo object at 0x7f684bd873d0>\nop_def = name: \"HistogramSummary\"\ninput_arg {\n  name: \"tag\"\n  type: DT_STRING\n}\ninput_arg {\n  name: \"values\"\n  type_attr: \"T\"\n}...   type: DT_BFLOAT16\n      type: DT_UINT16\n      type: DT_HALF\n      type: DT_UINT32\n      type: DT_UINT64\n    }\n  }\n}\n\ng = <tensorflow.python.framework.ops.Graph object at 0x7f68465e4ed0>\ndeprecation_version = 0, default_type_attr_map = {'T': tf.float32}\n\n    def _apply_op_helper(self, op_type_name, name=None, **keywords):\n      \"\"\"Implementation of apply_op that returns output_structure, op.\"\"\"\n      op_info = self._ops.get(op_type_name, None)\n      if op_info is None:\n        raise RuntimeError(\"Unrecognized Op name \" + op_type_name)\n      op_def = op_info.op_def\n    \n      # Determine the graph context.\n      try:\n        # Need to flatten all the arguments into a list.\n        # pylint: disable=protected-access\n        g = ops._get_graph_from_inputs(_Flatten(keywords.values()))\n        # pylint: enable=protected-access\n      except AssertionError as e:\n        raise RuntimeError(\n            \"Cannot determine graph for Op '%s' due to: %s\"\n            % (op_type_name, e.message))\n    \n      # Default name if not specified.\n      if name is None:\n        name = op_type_name\n    \n      # Check for deprecation\n      deprecation_version = op_def.deprecation.version\n      if deprecation_version:\n        producer = g.graph_def_versions.producer\n        if producer >= deprecation_version:\n          raise NotImplementedError(\n              (\"Op %s is not available in GraphDef version %d. \"\n               \"It has been removed in version %d. %s.\") %\n              (op_type_name, producer, deprecation_version,\n               op_def.deprecation.explanation))\n    \n      # Fill in the list of default types for all \"type\" attrs.  This\n      # will be used to choose a preferred dtype to convert to in the\n      # absence of input type information.\n      #\n      # TODO(b/31302892): Currently the defaults don't work in the right\n      # way if you have two inputs, one of whose type resolution depends\n      # on the other.  Handling this will require restructuring this code\n      # significantly.\n      default_type_attr_map = {}\n      for attr_def in op_def.attr:\n        if attr_def.type != \"type\":\n          continue\n        key = attr_def.name\n        if attr_def.HasField(\"default_value\"):\n          default_type_attr_map[key] = dtypes.as_dtype(\n              attr_def.default_value.type)\n    \n      # Requires that op_def has passed validation (using the C++\n      # ValidateOpDef() from ../framework/op_def_util.h).\n      attrs = {}\n      inputs = []\n      input_types = []\n      with g.as_default(), ops.name_scope(name) as scope:\n    \n        # Perform input type inference\n        inferred_from = {}\n        for input_arg in op_def.input_arg:\n          input_name = input_arg.name\n          if input_name in keywords:\n            values = keywords.pop(input_name)\n          elif input_name + \"_\" in keywords:\n            # Handle the case where the name is a keyword or built-in\n            # for Python so we use the name + _ instead.\n            input_name += \"_\"\n            values = keywords.pop(input_name)\n          else:\n            raise TypeError(\"No argument for input \" + input_name)\n    \n          # Goals:\n          # * Convert values to Tensors if it contains constants.\n          # * Verify that values is a list if that matches the input_arg's\n          #   type.\n          # * If the input_arg's type is determined by attrs, either set\n          #   those attrs and validate those attr values are legal (if\n          #   they have not yet been set) or validate the input matches\n          #   the type indicated by the attrs (if they have already been\n          #   inferred via an earlier input).\n          # * If the input_arg has an explicit type, make sure the input\n          #   conforms.\n    \n          if _IsListParameter(input_arg):\n            if not _IsListValue(values):\n              raise TypeError(\n                  \"Expected list for '%s' argument to '%s' Op, not %s.\" %\n                  (input_name, op_type_name, values))\n            # In cases where we expect all elements of the list to have the\n            # same dtype, try to cast non-Tensor elements to that type.\n            dtype = None\n            default_dtype = None\n            if input_arg.type != types_pb2.DT_INVALID:\n              dtype = input_arg.type\n            elif input_arg.number_attr:\n              if input_arg.type_attr in attrs:\n                dtype = attrs[input_arg.type_attr]\n              else:\n                for t in values:\n                  if isinstance(t, ops.Tensor):\n                    dtype = t.dtype\n                    break\n    \n              # dtype still not found, prefer using the default dtype\n              # from the attr.\n              if dtype is None and input_arg.type_attr in default_type_attr_map:\n                default_dtype = default_type_attr_map[input_arg.type_attr]\n    \n            try:\n              if not input_arg.is_ref and dtype:\n                dtype = dtypes.as_dtype(dtype).base_dtype\n              values = ops.internal_convert_n_to_tensor(\n                  values,\n                  name=input_arg.name,\n                  dtype=dtype if dtype else None,\n                  preferred_dtype=default_dtype,\n                  as_ref=input_arg.is_ref)\n              if input_arg.number_attr and len(\n                  set(v.dtype.base_dtype for v in values)) > 1:\n                raise TypeError()  # All types should match.\n            except (TypeError, ValueError):\n              # What types does the conversion function think values have?\n              observed_types = []\n              for value in values:\n                try:\n                  converted_value = ops.internal_convert_to_tensor(\n                      value, as_ref=input_arg.is_ref)\n                  observed_types.append(converted_value.dtype.base_dtype.name)\n                except (TypeError, ValueError):\n                  observed_types.append(\"<NOT CONVERTIBLE TO TENSOR>\")\n              observed = \", \".join(observed_types)\n    \n              prefix = (\n                  \"Tensors in list passed to '%s' of '%s' Op have types [%s]\" %\n                  (input_name, op_type_name, observed))\n              if input_arg.number_attr:\n                if input_arg.type != types_pb2.DT_INVALID:\n                  raise TypeError(\"%s that do not match expected type %s.\" %\n                                  (prefix, dtype.name))\n                elif input_arg.type_attr in attrs:\n                  raise TypeError(\"%s that do not match type %s inferred from \"\n                                  \"earlier arguments.\" %\n                                  (prefix, dtype.name))\n                else:\n                  raise TypeError(\"%s that don't all match.\" % prefix)\n              else:\n                raise TypeError(\n                    \"%s that are invalid. Tensors: %s\" % (prefix, values))\n    \n            types = [x.dtype for x in values]\n            inputs.extend(values)\n          else:\n            # In cases where we have an expected type, try to convert non-Tensor\n            # arguments to that type.\n            dtype = None\n            default_dtype = None\n            if input_arg.type != types_pb2.DT_INVALID:\n              dtype = input_arg.type\n            elif input_arg.type_attr in attrs:\n              dtype = attrs[input_arg.type_attr]\n            elif input_arg.type_attr in default_type_attr_map:\n              # The dtype could not be inferred solely from the inputs,\n              # so we prefer the attr's default, so code that adds a new attr\n              # with a default is backwards compatible.\n              default_dtype = default_type_attr_map[input_arg.type_attr]\n    \n            try:\n              values = ops.internal_convert_to_tensor(\n                  values,\n                  name=input_arg.name,\n                  dtype=dtype,\n                  as_ref=input_arg.is_ref,\n                  preferred_dtype=default_dtype)\n            except TypeError as err:\n              if dtype is None:\n                raise err\n              else:\n                raise TypeError(\n                    \"Expected %s passed to parameter '%s' of op '%s', got %s of \"\n                    \"type '%s' instead. Error: %s\" %\n                    (dtypes.as_dtype(dtype).name, input_arg.name, op_type_name,\n                     repr(values), type(values).__name__, err))\n            except ValueError:\n              # What type does convert_to_tensor think it has?\n              try:\n                observed = ops.internal_convert_to_tensor(\n>                   values, as_ref=input_arg.is_ref).dtype.name\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/framework/op_def_library.py:541: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalue = [<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>]\ndtype = None, name = None, as_ref = False, preferred_dtype = None\nctx = <tensorflow.python.eager.context.Context object at 0x7f6845c7bfd0>\naccept_symbolic_tensors = True, accept_composite_tensors = False\n\n    def internal_convert_to_tensor(value,\n                                   dtype=None,\n                                   name=None,\n                                   as_ref=False,\n                                   preferred_dtype=None,\n                                   ctx=None,\n                                   accept_symbolic_tensors=True,\n                                   accept_composite_tensors=False):\n      \"\"\"Implementation of the public convert_to_tensor.\"\"\"\n      if ctx is None:\n        ctx = context.context()\n      if isinstance(value, EagerTensor):\n        if ctx.executing_eagerly():\n          if dtype is not None:\n            dtype = dtypes.as_dtype(dtype)\n            value = _TensorTensorConversionFunction(value, dtype=dtype)\n          return value\n        else:\n          graph = get_default_graph()\n          if not graph.building_function:\n            raise RuntimeError(\"Attempting to capture an EagerTensor without \"\n                               \"building a function.\")\n          return graph.capture(value, name=name)\n      elif ((not accept_symbolic_tensors) and isinstance(value, Tensor) and\n            ctx.executing_eagerly()):\n        # Found a symbolic tensor in an eager context.\n        # This happens when we use the Keras functional API (i.e. calling layers\n        # on the output of `keras.Input()`, which is symbolic) while eager\n        # execution is enabled.\n        if _is_keras_symbolic_tensor(value):\n          # If the graph of the tensor isn't the Keras graph, we should still\n          # fail, for the time being. TODO(fchollet): consider allowing\n          # all symbolic tensors to raise this exception in this case.\n          raise core._SymbolicException(  # pylint: disable=protected-access\n              \"Using the symbolic output of a Keras layer during eager execution.\")\n    \n      if dtype is not None:\n        dtype = dtypes.as_dtype(dtype)\n      unwrapped_type = type(value)\n      conversion_func_list = _tensor_conversion_func_cache.get(unwrapped_type, None)\n      if conversion_func_list is None:\n        with _tensor_conversion_func_lock:\n          conversion_func_list = []\n          for _, funcs_at_priority in sorted(\n              _tensor_conversion_func_registry.items()):\n            for base_type, conversion_func in funcs_at_priority:\n              if isinstance(value, base_type):\n                conversion_func_list.append((base_type, conversion_func))\n          _tensor_conversion_func_cache[unwrapped_type] = conversion_func_list\n    \n      for base_type, conversion_func in conversion_func_list:\n        # If dtype is None but preferred_dtype is not None, we try to\n        # cast to preferred_dtype first.\n        ret = None\n        if dtype is None and preferred_dtype is not None:\n          try:\n            ret = conversion_func(\n                value, dtype=preferred_dtype, name=name, as_ref=as_ref)\n          except (TypeError, ValueError, errors.UnimplementedError,\n                  errors.InvalidArgumentError):\n            # Could not coerce the conversion to use the preferred dtype.\n            ret = None\n    \n          if ret is not None and ret is not NotImplemented:\n            if (ret.dtype.base_dtype !=\n                dtypes.as_dtype(preferred_dtype).base_dtype):\n              raise TypeError(\"convert_to_tensor did not convert to \"\n                              \"the preferred dtype: %s vs %s \" %\n                              (ret.dtype.base_dtype,\n                               dtypes.as_dtype(preferred_dtype).base_dtype))\n    \n        if ret is None:\n>         ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/framework/ops.py:1224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nv = [<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>]\ndtype = tf.float32, name = None, as_ref = False\n\n    def _autopacking_conversion_function(v, dtype=None, name=None, as_ref=False):\n      \"\"\"Tensor conversion function that automatically packs arguments.\"\"\"\n      if as_ref:\n        return NotImplemented\n      inferred_dtype = _get_dtype_from_nested_lists(v)\n      if inferred_dtype is None:\n        # We did not find any tensor-like objects in the nested lists, so defer to\n        # other conversion functions.\n        return NotImplemented\n      if dtype is None:\n        dtype = inferred_dtype\n      elif dtype != inferred_dtype:\n        v = nest.map_structure(_cast_nested_seqs_to_dtype(dtype), v)\n>     return _autopacking_helper(v, dtype, name or \"packed\")\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/ops/array_ops.py:1145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlist_or_tuple = [<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>]\ndtype = tf.float32, name = 'packed'\n\n    def _autopacking_helper(list_or_tuple, dtype, name):\n      \"\"\"Converts the given list or tuple to a tensor by packing.\n    \n      Args:\n        list_or_tuple: A (possibly nested) list or tuple containing a tensor.\n        dtype: The element type of the returned tensor.\n        name: A name for the returned tensor.\n    \n      Returns:\n        A `tf.Tensor` with value equivalent to `list_or_tuple`.\n      \"\"\"\n      if context.executing_eagerly():\n        # NOTE: Fast path when all the items are tensors, this doesn't do any type\n        # checking.\n        if all(ops.is_dense_tensor_like(elem) for elem in list_or_tuple):\n          return gen_array_ops.pack(list_or_tuple, name=name)\n      must_pack = False\n      converted_elems = []\n      with ops.name_scope(name) as scope:\n        for i, elem in enumerate(list_or_tuple):\n          if ops.is_dense_tensor_like(elem):\n            if dtype is not None and elem.dtype.base_dtype != dtype:\n              raise TypeError(\"Cannot convert a list containing a tensor of dtype \"\n                              \"%s to %s (Tensor is: %r)\" %\n                              (elem.dtype, dtype, elem))\n            converted_elems.append(elem)\n            must_pack = True\n          elif isinstance(elem, (list, tuple)):\n            converted_elem = _autopacking_helper(elem, dtype, str(i))\n            if ops.is_dense_tensor_like(converted_elem):\n              must_pack = True\n            converted_elems.append(converted_elem)\n          else:\n            converted_elems.append(elem)\n        if must_pack:\n          elems_as_tensors = []\n          for i, elem in enumerate(converted_elems):\n            if ops.is_dense_tensor_like(elem):\n              elems_as_tensors.append(elem)\n            else:\n              # NOTE(mrry): This is inefficient, but it enables us to\n              # handle the case where the list arguments are other\n              # convertible-to-tensor types, such as numpy arrays.\n              elems_as_tensors.append(\n                  constant_op.constant(elem, dtype=dtype, name=str(i)))\n>         return gen_array_ops.pack(elems_as_tensors, name=scope)\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/ops/array_ops.py:1095: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalues = [<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>]\naxis = 0, name = 'lambda_1_out/packed/'\n\n    def pack(values, axis=0, name=None):\n      r\"\"\"Packs a list of `N` rank-`R` tensors into one rank-`(R+1)` tensor.\n    \n      Packs the `N` tensors in `values` into a tensor with rank one higher than each\n      tensor in `values`, by packing them along the `axis` dimension.\n      Given a list of tensors of shape `(A, B, C)`;\n    \n      if `axis == 0` then the `output` tensor will have the shape `(N, A, B, C)`.\n      if `axis == 1` then the `output` tensor will have the shape `(A, N, B, C)`.\n      Etc.\n    \n      For example:\n    \n      ```\n      # 'x' is [1, 4]\n      # 'y' is [2, 5]\n      # 'z' is [3, 6]\n      pack([x, y, z]) => [[1, 4], [2, 5], [3, 6]]  # Pack along first dim.\n      pack([x, y, z], axis=1) => [[1, 2, 3], [4, 5, 6]]\n      ```\n    \n      This is the opposite of `unpack`.\n    \n      Args:\n        values: A list of at least 1 `Tensor` objects with the same type.\n          Must be of same shape and type.\n        axis: An optional `int`. Defaults to `0`.\n          Dimension along which to pack.  Negative values wrap around, so the\n          valid range is `[-(R+1), R+1)`.\n        name: A name for the operation (optional).\n    \n      Returns:\n        A `Tensor`. Has the same type as `values`.\n      \"\"\"\n      _ctx = _context._context or _context.context()\n      if _ctx is not None and _ctx._thread_local_data.is_eager:\n        try:\n          _result = _pywrap_tensorflow.TFE_Py_FastPathExecute(\n            _ctx._context_handle, _ctx._thread_local_data.device_name, \"Pack\",\n            name, _ctx._post_execution_callbacks, values, \"axis\", axis)\n          return _result\n        except _core._FallbackException:\n          try:\n            return pack_eager_fallback(\n                values, axis=axis, name=name, ctx=_ctx)\n          except _core._SymbolicException:\n            pass  # Add nodes to the TensorFlow graph.\n        except _core._NotOkStatusException as e:\n          if name is not None:\n            message = e.message + \" name: \" + name\n          else:\n            message = e.message\n          _six.raise_from(_core._status_to_exception(e.code, message), None)\n      # Add nodes to the TensorFlow graph.\n      if not isinstance(values, (list, tuple)):\n        raise TypeError(\n            \"Expected list for 'values' argument to \"\n            \"'pack' Op, not %r.\" % values)\n      _attr_N = len(values)\n      if axis is None:\n        axis = 0\n      axis = _execute.make_int(axis, \"axis\")\n      _, _, _op = _op_def_lib._apply_op_helper(\n>           \"Pack\", values=values, axis=axis, name=name)\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/ops/gen_array_ops.py:5897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tensorflow.python.framework.op_def_library.OpDefLibrary object at 0x7f684c8880d0>\nop_type_name = 'Pack', name = 'lambda_1_out/packed/', keywords = {}\nop_info = <tensorflow.python.framework.op_def_library._OpInfo object at 0x7f684c88ee90>\nop_def = name: \"Pack\"\ninput_arg {\n  name: \"values\"\n  type_attr: \"T\"\n  number_attr: \"N\"\n}\noutput_arg {\n  name: \"output\"\n  type_a... minimum: 1\n}\nattr {\n  name: \"T\"\n  type: \"type\"\n}\nattr {\n  name: \"axis\"\n  type: \"int\"\n  default_value {\n    i: 0\n  }\n}\n\ng = <tensorflow.python.framework.ops.Graph object at 0x7f68465e4ed0>\ndeprecation_version = 0, default_type_attr_map = {}\n\n    def _apply_op_helper(self, op_type_name, name=None, **keywords):\n      \"\"\"Implementation of apply_op that returns output_structure, op.\"\"\"\n      op_info = self._ops.get(op_type_name, None)\n      if op_info is None:\n        raise RuntimeError(\"Unrecognized Op name \" + op_type_name)\n      op_def = op_info.op_def\n    \n      # Determine the graph context.\n      try:\n        # Need to flatten all the arguments into a list.\n        # pylint: disable=protected-access\n        g = ops._get_graph_from_inputs(_Flatten(keywords.values()))\n        # pylint: enable=protected-access\n      except AssertionError as e:\n        raise RuntimeError(\n            \"Cannot determine graph for Op '%s' due to: %s\"\n            % (op_type_name, e.message))\n    \n      # Default name if not specified.\n      if name is None:\n        name = op_type_name\n    \n      # Check for deprecation\n      deprecation_version = op_def.deprecation.version\n      if deprecation_version:\n        producer = g.graph_def_versions.producer\n        if producer >= deprecation_version:\n          raise NotImplementedError(\n              (\"Op %s is not available in GraphDef version %d. \"\n               \"It has been removed in version %d. %s.\") %\n              (op_type_name, producer, deprecation_version,\n               op_def.deprecation.explanation))\n    \n      # Fill in the list of default types for all \"type\" attrs.  This\n      # will be used to choose a preferred dtype to convert to in the\n      # absence of input type information.\n      #\n      # TODO(b/31302892): Currently the defaults don't work in the right\n      # way if you have two inputs, one of whose type resolution depends\n      # on the other.  Handling this will require restructuring this code\n      # significantly.\n      default_type_attr_map = {}\n      for attr_def in op_def.attr:\n        if attr_def.type != \"type\":\n          continue\n        key = attr_def.name\n        if attr_def.HasField(\"default_value\"):\n          default_type_attr_map[key] = dtypes.as_dtype(\n              attr_def.default_value.type)\n    \n      # Requires that op_def has passed validation (using the C++\n      # ValidateOpDef() from ../framework/op_def_util.h).\n      attrs = {}\n      inputs = []\n      input_types = []\n      with g.as_default(), ops.name_scope(name) as scope:\n    \n        # Perform input type inference\n        inferred_from = {}\n        for input_arg in op_def.input_arg:\n          input_name = input_arg.name\n          if input_name in keywords:\n            values = keywords.pop(input_name)\n          elif input_name + \"_\" in keywords:\n            # Handle the case where the name is a keyword or built-in\n            # for Python so we use the name + _ instead.\n            input_name += \"_\"\n            values = keywords.pop(input_name)\n          else:\n            raise TypeError(\"No argument for input \" + input_name)\n    \n          # Goals:\n          # * Convert values to Tensors if it contains constants.\n          # * Verify that values is a list if that matches the input_arg's\n          #   type.\n          # * If the input_arg's type is determined by attrs, either set\n          #   those attrs and validate those attr values are legal (if\n          #   they have not yet been set) or validate the input matches\n          #   the type indicated by the attrs (if they have already been\n          #   inferred via an earlier input).\n          # * If the input_arg has an explicit type, make sure the input\n          #   conforms.\n    \n          if _IsListParameter(input_arg):\n            if not _IsListValue(values):\n              raise TypeError(\n                  \"Expected list for '%s' argument to '%s' Op, not %s.\" %\n                  (input_name, op_type_name, values))\n            # In cases where we expect all elements of the list to have the\n            # same dtype, try to cast non-Tensor elements to that type.\n            dtype = None\n            default_dtype = None\n            if input_arg.type != types_pb2.DT_INVALID:\n              dtype = input_arg.type\n            elif input_arg.number_attr:\n              if input_arg.type_attr in attrs:\n                dtype = attrs[input_arg.type_attr]\n              else:\n                for t in values:\n                  if isinstance(t, ops.Tensor):\n                    dtype = t.dtype\n                    break\n    \n              # dtype still not found, prefer using the default dtype\n              # from the attr.\n              if dtype is None and input_arg.type_attr in default_type_attr_map:\n                default_dtype = default_type_attr_map[input_arg.type_attr]\n    \n            try:\n              if not input_arg.is_ref and dtype:\n                dtype = dtypes.as_dtype(dtype).base_dtype\n              values = ops.internal_convert_n_to_tensor(\n                  values,\n                  name=input_arg.name,\n                  dtype=dtype if dtype else None,\n                  preferred_dtype=default_dtype,\n                  as_ref=input_arg.is_ref)\n              if input_arg.number_attr and len(\n                  set(v.dtype.base_dtype for v in values)) > 1:\n                raise TypeError()  # All types should match.\n            except (TypeError, ValueError):\n              # What types does the conversion function think values have?\n              observed_types = []\n              for value in values:\n                try:\n                  converted_value = ops.internal_convert_to_tensor(\n                      value, as_ref=input_arg.is_ref)\n                  observed_types.append(converted_value.dtype.base_dtype.name)\n                except (TypeError, ValueError):\n                  observed_types.append(\"<NOT CONVERTIBLE TO TENSOR>\")\n              observed = \", \".join(observed_types)\n    \n              prefix = (\n                  \"Tensors in list passed to '%s' of '%s' Op have types [%s]\" %\n                  (input_name, op_type_name, observed))\n              if input_arg.number_attr:\n                if input_arg.type != types_pb2.DT_INVALID:\n                  raise TypeError(\"%s that do not match expected type %s.\" %\n                                  (prefix, dtype.name))\n                elif input_arg.type_attr in attrs:\n                  raise TypeError(\"%s that do not match type %s inferred from \"\n                                  \"earlier arguments.\" %\n                                  (prefix, dtype.name))\n                else:\n                  raise TypeError(\"%s that don't all match.\" % prefix)\n              else:\n                raise TypeError(\n                    \"%s that are invalid. Tensors: %s\" % (prefix, values))\n    \n            types = [x.dtype for x in values]\n            inputs.extend(values)\n          else:\n            # In cases where we have an expected type, try to convert non-Tensor\n            # arguments to that type.\n            dtype = None\n            default_dtype = None\n            if input_arg.type != types_pb2.DT_INVALID:\n              dtype = input_arg.type\n            elif input_arg.type_attr in attrs:\n              dtype = attrs[input_arg.type_attr]\n            elif input_arg.type_attr in default_type_attr_map:\n              # The dtype could not be inferred solely from the inputs,\n              # so we prefer the attr's default, so code that adds a new attr\n              # with a default is backwards compatible.\n              default_dtype = default_type_attr_map[input_arg.type_attr]\n    \n            try:\n              values = ops.internal_convert_to_tensor(\n                  values,\n                  name=input_arg.name,\n                  dtype=dtype,\n                  as_ref=input_arg.is_ref,\n                  preferred_dtype=default_dtype)\n            except TypeError as err:\n              if dtype is None:\n                raise err\n              else:\n                raise TypeError(\n                    \"Expected %s passed to parameter '%s' of op '%s', got %s of \"\n                    \"type '%s' instead. Error: %s\" %\n                    (dtypes.as_dtype(dtype).name, input_arg.name, op_type_name,\n                     repr(values), type(values).__name__, err))\n            except ValueError:\n              # What type does convert_to_tensor think it has?\n              try:\n                observed = ops.internal_convert_to_tensor(\n                    values, as_ref=input_arg.is_ref).dtype.name\n              except ValueError as err:\n                raise ValueError(\n                    \"Tried to convert '%s' to a tensor and failed. Error: %s\" %\n                    (input_name, err))\n              prefix = (\"Input '%s' of '%s' Op has type %s that does not match\" %\n                        (input_name, op_type_name, observed))\n              if input_arg.type != types_pb2.DT_INVALID:\n                raise TypeError(\"%s expected type of %s.\" %\n                                (prefix, dtypes.as_dtype(input_arg.type).name))\n              else:\n                # Update the maps with the default, if needed.\n                k = input_arg.type_attr\n                if k in default_type_attr_map:\n                  if k not in attrs:\n                    attrs[k] = default_type_attr_map[k]\n                    if k not in inferred_from:\n                      inferred_from[k] = \"Default in OpDef\"\n    \n                raise TypeError(\n                    \"%s type %s of argument '%s'.\" %\n                    (prefix, dtypes.as_dtype(attrs[input_arg.type_attr]).name,\n                     inferred_from[input_arg.type_attr]))\n    \n            types = [values.dtype]\n            inputs.append(values)\n          base_types = [x.base_dtype for x in types]\n    \n          if input_arg.number_attr:\n            # <number-attr> * <type> or <number-attr> * <type-attr>\n            if input_arg.number_attr in attrs:\n              if len(values) != attrs[input_arg.number_attr]:\n                raise ValueError(\n                    \"List argument '%s' to '%s' Op with length %d must match \"\n                    \"length %d of argument '%s'.\" %\n                    (input_name, op_type_name, len(values),\n                     attrs[input_arg.number_attr],\n                     inferred_from[input_arg.number_attr]))\n            else:\n              attrs[input_arg.number_attr] = len(values)\n              inferred_from[input_arg.number_attr] = input_name\n              num_attr = _Attr(op_def, input_arg.number_attr)\n              if num_attr.has_minimum and len(values) < num_attr.minimum:\n                raise ValueError(\n                    \"List argument '%s' to '%s' Op with length %d shorter \"\n                    \"than minimum length %d.\" %\n                    (input_name, op_type_name, len(values), num_attr.minimum))\n            # All tensors must have the same base type.\n            if any(bt != base_types[0] for bt in base_types):\n              raise TypeError(\n                  \"All tensors passed to '%s' of '%s' Op \"\n                  \"must have the same type.\" %\n                  (input_name, op_type_name))\n            if input_arg.type != types_pb2.DT_INVALID:\n              # <number-attr> * <type> case\n              if base_types and base_types[0] != input_arg.type:\n                assert False, \"Unreachable\"\n            elif input_arg.type_attr in attrs:\n              # <number-attr> * <type-attr> case, where <type-attr> already\n              # has an inferred value.\n              if base_types and base_types[0] != attrs[input_arg.type_attr]:\n                assert False, \"Unreachable\"\n            else:\n              # <number-attr> * <type-attr> case, where we are now setting\n              # the <type-attr> based on this input\n              if not base_types:\n                raise TypeError(\n                    \"Don't know how to infer type variable from empty input \"\n                    \"list passed to input '%s' of '%s' Op.\" %\n                    (input_name, op_type_name))\n              attrs[input_arg.type_attr] = base_types[0]\n              inferred_from[input_arg.type_attr] = input_name\n              type_attr = _Attr(op_def, input_arg.type_attr)\n              _SatisfiesTypeConstraint(base_types[0], type_attr,\n                                       param_name=input_name)\n          elif input_arg.type_attr:\n            # <type-attr>\n            attr_value = base_types[0]\n            if input_arg.type_attr in attrs:\n              if attrs[input_arg.type_attr] != attr_value:\n                assert False, \"Unreachable\"\n            else:\n              for base_type in base_types:\n                _SatisfiesTypeConstraint(base_type,\n                                         _Attr(op_def, input_arg.type_attr),\n                                         param_name=input_name)\n              attrs[input_arg.type_attr] = attr_value\n              inferred_from[input_arg.type_attr] = input_name\n          elif input_arg.type_list_attr:\n            # <type-list-attr>\n            attr_value = base_types\n            if input_arg.type_list_attr in attrs:\n              if attrs[input_arg.type_list_attr] != attr_value:\n                raise TypeError(\n                    \"Input '%s' of '%s' Op has type list of %s that does not \"\n                    \"match type list %s of argument '%s'.\" %\n                    (input_name, op_type_name,\n                     \", \".join(dtypes.as_dtype(x).name for x in attr_value),\n                     \", \".join(dtypes.as_dtype(x).name\n                               for x in attrs[input_arg.type_list_attr]),\n                     inferred_from[input_arg.type_list_attr]))\n            else:\n              for base_type in base_types:\n                _SatisfiesTypeConstraint(base_type,\n                                         _Attr(op_def, input_arg.type_list_attr),\n                                         param_name=input_name)\n              attrs[input_arg.type_list_attr] = attr_value\n              inferred_from[input_arg.type_list_attr] = input_name\n          else:\n            # single Tensor with specified type\n            if base_types[0] != input_arg.type:\n              assert False, \"Unreachable\"\n    \n          if input_arg.is_ref:\n            if not all(x._is_ref_dtype for x in types):  # pylint: disable=protected-access\n              raise TypeError(\n                  (\"'%s' Op requires that input '%s' be a mutable tensor \"\n                   \"(e.g.: a tf.Variable)\") % (op_type_name, input_name))\n            input_types.extend(types)\n          else:\n            input_types.extend(base_types)\n    \n        # Process remaining attrs\n        for attr in op_def.attr:\n          # Skip attrs that have already had their values inferred\n          if attr.name in attrs:\n            if attr.name in keywords:\n              raise TypeError(\n                  \"Should not specify value for inferred attr '%s'.\" % attr.name)\n            continue\n          if attr.name in keywords:\n            attrs[attr.name] = keywords.pop(attr.name)\n          elif attr.name + \"_\" in keywords:\n            # Attrs whose names match Python keywords have an extra '_'\n            # appended, so we must check for that as well.\n            attrs[attr.name] = keywords.pop(attr.name + \"_\")\n          else:\n            raise TypeError(\"No argument for attr \" + attr.name)\n    \n        # Convert attr values to AttrValue protos.\n        attr_protos = {}\n        for attr_def in op_def.attr:\n          key = attr_def.name\n          value = attrs[key]\n          attr_value = attr_value_pb2.AttrValue()\n          if attr_def.HasField(\"default_value\") and value is None:\n            attr_value.CopyFrom(attr_def.default_value)\n            attr_protos[key] = attr_value\n            continue\n          if attr_def.type.startswith(\"list(\"):\n            if not _IsListValue(value):\n              raise TypeError(\"Expected list for attr \" + key)\n            if attr_def.has_minimum:\n              if len(value) < attr_def.minimum:\n                raise ValueError(\"Attr '%s' of '%s' Op passed list of length %d \"\n                                 \"less than minimum %d.\" %\n                                 (key, op_type_name, len(value),\n                                  attr_def.minimum))\n            attr_value.list.SetInParent()\n          if attr_def.type == \"string\":\n            attr_value.s = _MakeStr(value, key)\n            if attr_def.HasField(\"allowed_values\"):\n              if attr_value.s not in attr_def.allowed_values.list.s:\n                raise ValueError(\n                    \"Attr '%s' of '%s' Op passed string '%s' not in: \\\"%s\\\".\" %\n                    (key, op_type_name, compat.as_text(attr_value.s),\n                     '\", \"'.join(map(compat.as_text,\n                                     attr_def.allowed_values.list.s))))\n          elif attr_def.type == \"list(string)\":\n            attr_value.list.s.extend([_MakeStr(x, key) for x in value])\n            if attr_def.HasField(\"allowed_values\"):\n              for x in attr_value.list.s:\n                if x not in attr_def.allowed_values.list.s:\n                  raise ValueError(\n                      \"Attr '%s' of '%s' Op passed string '%s' not in: \\\"%s\\\".\" %\n                      (key, op_type_name, compat.as_text(x),\n                       '\", \"'.join(map(compat.as_text,\n                                       attr_def.allowed_values.list.s))))\n          elif attr_def.type == \"int\":\n            attr_value.i = _MakeInt(value, key)\n            if attr_def.has_minimum:\n              if attr_value.i < attr_def.minimum:\n                raise ValueError(\n                    \"Attr '%s' of '%s' Op passed %d less than minimum %d.\" %\n                    (key, op_type_name, attr_value.i, attr_def.minimum))\n          elif attr_def.type == \"list(int)\":\n            attr_value.list.i.extend([_MakeInt(x, key) for x in value])\n          elif attr_def.type == \"float\":\n            attr_value.f = _MakeFloat(value, key)\n          elif attr_def.type == \"list(float)\":\n            attr_value.list.f.extend([_MakeFloat(x, key) for x in value])\n          elif attr_def.type == \"bool\":\n            attr_value.b = _MakeBool(value, key)\n          elif attr_def.type == \"list(bool)\":\n            attr_value.list.b.extend([_MakeBool(x, key) for x in value])\n          elif attr_def.type == \"type\":\n            attr_value.type = _MakeType(value, attr_def)\n          elif attr_def.type == \"list(type)\":\n            attr_value.list.type.extend(\n                [_MakeType(x, attr_def) for x in value])\n          elif attr_def.type == \"shape\":\n            attr_value.shape.CopyFrom(_MakeShape(value, key))\n          elif attr_def.type == \"list(shape)\":\n            attr_value.list.shape.extend(\n                [_MakeShape(x, key) for x in value])\n          elif attr_def.type == \"tensor\":\n            attr_value.tensor.CopyFrom(_MakeTensor(value, key))\n          elif attr_def.type == \"list(tensor)\":\n            attr_value.list.tensor.extend(\n                [_MakeTensor(x, key) for x in value])\n          elif attr_def.type == \"func\":\n            attr_value.func.CopyFrom(_MakeFunc(value, key))\n          elif attr_def.type == \"list(func)\":\n            attr_value.list.func.extend([_MakeFunc(x, key) for x in value])\n          else:\n            raise TypeError(\"Unrecognized Attr type \" + attr_def.type)\n    \n          attr_protos[key] = attr_value\n        del attrs  # attrs is no longer authoritative, use attr_protos instead\n    \n        # Determine output types (possibly using attrs)\n        output_structure = []\n        for arg in op_def.output_arg:\n          if arg.number_attr:\n            n = _AttrValue(attr_protos, arg.number_attr).i\n            output_structure.append(n)\n          elif arg.type_attr:\n            t = _AttrValue(attr_protos, arg.type_attr)\n            output_structure.append(None)\n          elif arg.type_list_attr:\n            t = _AttrValue(attr_protos, arg.type_list_attr)\n            output_structure.append(len(t.list.type))\n          else:\n            output_structure.append(None)\n    \n        if keywords:\n          raise TypeError(\"apply_op() got unexpected keyword arguments: \" +\n                          \", \".join(sorted(keywords.keys())))\n    \n        # NOTE(mrry): We add an explicit colocation constraint between\n        # the newly created op and any of its reference-typed inputs.\n        must_colocate_inputs = [val for arg, val in zip(op_def.input_arg, inputs)\n                                if arg.is_ref]\n        with _MaybeColocateWith(must_colocate_inputs):\n          # Add Op to graph\n          op = g.create_op(op_type_name, inputs, dtypes=None, name=scope,\n                           input_types=input_types, attrs=attr_protos,\n>                          op_def=op_def)\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/framework/op_def_library.py:788: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (<tensorflow.python.framework.ops.Graph object at 0x7f68465e4ed0>, 'Pack', [<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>])\nkwargs = {'attrs': {'N': i: 2\n, 'T': type: DT_FLOAT\n, 'axis': i: 0\n}, 'dtypes': None, 'input_types': [tf.float32, tf.float32], 'name': 'lambda_1_out/packed/', ...}\ninvalid_args = []\nnamed_args = {'attrs': {'N': i: 2\n, 'T': type: DT_FLOAT\n, 'axis': i: 0\n}, 'compute_device': True, 'compute_shapes': True, 'dtypes': None, ...}\narg_name = 'compute_shapes'\nspec = DeprecatedArgSpec(position=8, has_ok_value=False, ok_value=None)\n\n    @functools.wraps(func)\n    def new_func(*args, **kwargs):\n      \"\"\"Deprecation wrapper.\"\"\"\n      # TODO(apassos) figure out a way to have reasonable performance with\n      # deprecation warnings and eager mode.\n      if is_in_graph_mode.IS_IN_GRAPH_MODE() and _PRINT_DEPRECATION_WARNINGS:\n        invalid_args = []\n        named_args = tf_inspect.getcallargs(func, *args, **kwargs)\n        for arg_name, spec in iter(deprecated_positions.items()):\n          if (spec.position < len(args) and\n              not (spec.has_ok_value and\n                   _same_value(named_args[arg_name], spec.ok_value))):\n            invalid_args.append(arg_name)\n        if is_varargs_deprecated and len(args) > len(arg_spec.args):\n          invalid_args.append(arg_spec.varargs)\n        if is_kwargs_deprecated and kwargs:\n          invalid_args.append(arg_spec.varkw)\n        for arg_name in deprecated_arg_names:\n          if (arg_name in kwargs and\n              not (deprecated_positions[arg_name].has_ok_value and\n                   _same_value(named_args[arg_name],\n                               deprecated_positions[arg_name].ok_value))):\n            invalid_args.append(arg_name)\n        for arg_name in invalid_args:\n          if (func, arg_name) not in _PRINTED_WARNING:\n            if warn_once:\n              _PRINTED_WARNING[(func, arg_name)] = True\n            logging.warning(\n                'From %s: calling %s (from %s) with %s is deprecated and will '\n                'be removed %s.\\nInstructions for updating:\\n%s',\n                _call_location(), decorator_utils.get_qualified_name(func),\n                func.__module__, arg_name,\n                'in a future version' if date is None else ('after %s' % date),\n                instructions)\n>     return func(*args, **kwargs)\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/util/deprecation.py:507: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tensorflow.python.framework.ops.Graph object at 0x7f68465e4ed0>\nop_type = 'Pack'\ninputs = [<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>]\ndtypes = None, input_types = [tf.float32, tf.float32]\nname = 'lambda_1_out/packed'\nattrs = {'N': i: 2\n, 'T': type: DT_FLOAT\n, 'axis': i: 0\n}\nop_def = name: \"Pack\"\ninput_arg {\n  name: \"values\"\n  type_attr: \"T\"\n  number_attr: \"N\"\n}\noutput_arg {\n  name: \"output\"\n  type_a... minimum: 1\n}\nattr {\n  name: \"T\"\n  type: \"type\"\n}\nattr {\n  name: \"axis\"\n  type: \"int\"\n  default_value {\n    i: 0\n  }\n}\n\ncompute_device = True\n\n    @deprecated_args(None,\n                     \"Shapes are always computed; don't use the compute_shapes \"\n                     \"as it has no effect.\", \"compute_shapes\")\n    def create_op(\n        self,\n        op_type,\n        inputs,\n        dtypes=None,  # pylint: disable=redefined-outer-name\n        input_types=None,\n        name=None,\n        attrs=None,\n        op_def=None,\n        compute_shapes=True,\n        compute_device=True):\n      \"\"\"Creates an `Operation` in this graph.\n    \n      This is a low-level interface for creating an `Operation`. Most\n      programs will not call this method directly, and instead use the\n      Python op constructors, such as `tf.constant()`, which add ops to\n      the default graph.\n    \n      Args:\n        op_type: The `Operation` type to create. This corresponds to the\n          `OpDef.name` field for the proto that defines the operation.\n        inputs: A list of `Tensor` objects that will be inputs to the `Operation`.\n        dtypes: (Optional) A list of `DType` objects that will be the types of the\n          tensors that the operation produces.\n        input_types: (Optional.) A list of `DType`s that will be the types of the\n          tensors that the operation consumes. By default, uses the base `DType`\n          of each input in `inputs`. Operations that expect reference-typed inputs\n          must specify `input_types` explicitly.\n        name: (Optional.) A string name for the operation. If not specified, a\n          name is generated based on `op_type`.\n        attrs: (Optional.) A dictionary where the key is the attribute name (a\n          string) and the value is the respective `attr` attribute of the\n          `NodeDef` proto that will represent the operation (an `AttrValue`\n          proto).\n        op_def: (Optional.) The `OpDef` proto that describes the `op_type` that\n          the operation will have.\n        compute_shapes: (Optional.) Deprecated. Has no effect (shapes are always\n          computed).\n        compute_device: (Optional.) If True, device functions will be executed to\n          compute the device property of the Operation.\n    \n      Raises:\n        TypeError: if any of the inputs is not a `Tensor`.\n        ValueError: if colocation conflicts with existing device assignment.\n    \n      Returns:\n        An `Operation` object.\n      \"\"\"\n      del compute_shapes\n    \n      self._check_not_finalized()\n      for idx, a in enumerate(inputs):\n        if not isinstance(a, Tensor):\n          raise TypeError(\"Input #%d is not a tensor: %s\" % (idx, a))\n      if name is None:\n        name = op_type\n      # If a names ends with a '/' it is a \"name scope\" and we use it as-is,\n      # after removing the trailing '/'.\n      if name and name[-1] == \"/\":\n        name = name_from_scope_name(name)\n      else:\n        name = self.unique_name(name)\n    \n      node_def = _NodeDef(op_type, name, device=None, attrs=attrs)\n    \n      input_ops = set([t.op for t in inputs])\n      control_inputs = self._control_dependencies_for_inputs(input_ops)\n      # _create_op_helper mutates the new Operation. `_mutation_lock` ensures a\n      # Session.run call cannot occur between creating and mutating the op.\n      with self._mutation_lock():\n        ret = Operation(\n            node_def,\n            self,\n            inputs=inputs,\n            output_types=dtypes,\n            control_inputs=control_inputs,\n            input_types=input_types,\n            original_op=self._default_original_op,\n>           op_def=op_def)\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/framework/ops.py:3616: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'Operation' object has no attribute '_c_op'\") raised in repr()] Operation object at 0x7f6834ff9090>\nnode_def = name: \"lambda_1_out/packed\"\nop: \"Pack\"\nattr {\n  key: \"N\"\n  value {\n    i: 2\n  }\n}\nattr {\n  key: \"T\"\n  value {\n    type: DT_FLOAT\n  }\n}\nattr {\n  key: \"axis\"\n  value {\n    i: 0\n  }\n}\n\ng = <tensorflow.python.framework.ops.Graph object at 0x7f68465e4ed0>\ninputs = [<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>]\noutput_types = None, control_inputs = [], input_types = [tf.float32, tf.float32]\noriginal_op = None\nop_def = name: \"Pack\"\ninput_arg {\n  name: \"values\"\n  type_attr: \"T\"\n  number_attr: \"N\"\n}\noutput_arg {\n  name: \"output\"\n  type_a... minimum: 1\n}\nattr {\n  name: \"T\"\n  type: \"type\"\n}\nattr {\n  name: \"axis\"\n  type: \"int\"\n  default_value {\n    i: 0\n  }\n}\n\n\n    def __init__(self,\n                 node_def,\n                 g,\n                 inputs=None,\n                 output_types=None,\n                 control_inputs=None,\n                 input_types=None,\n                 original_op=None,\n                 op_def=None):\n      r\"\"\"Creates an `Operation`.\n    \n      NOTE: This constructor validates the name of the `Operation` (passed\n      as `node_def.name`). Valid `Operation` names match the following\n      regular expression:\n    \n          [A-Za-z0-9.][A-Za-z0-9_.\\\\-/]*\n    \n      Args:\n        node_def: `node_def_pb2.NodeDef`.  `NodeDef` for the `Operation`. Used for\n          attributes of `node_def_pb2.NodeDef`, typically `name`, `op`, and\n          `device`.  The `input` attribute is irrelevant here as it will be\n          computed when generating the model.\n        g: `Graph`. The parent graph.\n        inputs: list of `Tensor` objects. The inputs to this `Operation`.\n        output_types: list of `DType` objects.  List of the types of the `Tensors`\n          computed by this operation.  The length of this list indicates the\n          number of output endpoints of the `Operation`.\n        control_inputs: list of operations or tensors from which to have a control\n          dependency.\n        input_types: List of `DType` objects representing the types of the tensors\n          accepted by the `Operation`.  By default uses `[x.dtype.base_dtype for x\n          in inputs]`.  Operations that expect reference-typed inputs must specify\n          these explicitly.\n        original_op: Optional. Used to associate the new `Operation` with an\n          existing `Operation` (for example, a replica with the op that was\n          replicated).\n        op_def: Optional. The `op_def_pb2.OpDef` proto that describes the op type\n          that this `Operation` represents.\n    \n      Raises:\n        TypeError: if control inputs are not Operations or Tensors,\n          or if `node_def` is not a `NodeDef`,\n          or if `g` is not a `Graph`,\n          or if `inputs` are not tensors,\n          or if `inputs` and `input_types` are incompatible.\n        ValueError: if the `node_def` name is not valid.\n      \"\"\"\n      # For internal use only: `node_def` can be set to a TF_Operation to create\n      # an Operation for that op. This is useful for creating Operations for ops\n      # indirectly created by C API methods, e.g. the ops created by\n      # TF_ImportGraphDef. When `node_def` is a TF_Operation, all optional fields\n      # should be None.\n    \n      if isinstance(node_def, node_def_pb2.NodeDef):\n        if node_def.ByteSize() >= (1 << 31) or node_def.ByteSize() < 0:\n          raise ValueError(\n              \"Cannot create a tensor proto whose content is larger than 2GB.\")\n        if not _VALID_OP_NAME_REGEX.match(node_def.name):\n          raise ValueError(\"'%s' is not a valid node name\" % node_def.name)\n        c_op = None\n      elif type(node_def).__name__ == \"SwigPyObject\":\n        assert inputs is None\n        assert output_types is None\n        assert control_inputs is None\n        assert input_types is None\n        assert original_op is None\n        assert op_def is None\n        c_op = node_def\n      else:\n        raise TypeError(\"node_def needs to be a NodeDef: %s\" % node_def)\n    \n      if not isinstance(g, Graph):\n        raise TypeError(\"g needs to be a Graph: %s\" % g)\n      self._graph = g\n    \n      if inputs is None:\n        inputs = []\n      elif not isinstance(inputs, list):\n        raise TypeError(\"inputs needs to be a list of Tensors: %s\" % inputs)\n      for a in inputs:\n        if not isinstance(a, Tensor):\n          raise TypeError(\"input needs to be a Tensor: %s\" % a)\n      if input_types is None:\n        input_types = [i.dtype.base_dtype for i in inputs]\n      else:\n        if not all(\n            x.is_compatible_with(i.dtype) for i, x in zip(inputs, input_types)):\n          raise TypeError(\"In op '%s', input types (%s) are not compatible \"\n                          \"with expected types (%s)\" %\n                          (node_def.name, [i.dtype for i in inputs], input_types))\n    \n      # Build the list of control inputs.\n      control_input_ops = []\n      if control_inputs:\n        for c in control_inputs:\n          control_op = None\n          if isinstance(c, Operation):\n            control_op = c\n          elif isinstance(c, (Tensor, IndexedSlices)):\n            control_op = c.op\n          else:\n            raise TypeError(\"Control input must be an Operation, \"\n                            \"a Tensor, or IndexedSlices: %s\" % c)\n          control_input_ops.append(control_op)\n    \n      # This will be set by self.inputs.\n      self._inputs_val = None\n    \n      # pylint: disable=protected-access\n      self._id_value = self._graph._next_id()\n      self._original_op = original_op\n      self._traceback = tf_stack.extract_stack()\n    \n      # List of _UserDevSpecs holding code location of device context manager\n      # invocations and the users original argument to them.\n      self._device_code_locations = None\n      # Dict mapping op name to file and line information for op colocation\n      # context managers.\n      self._colocation_code_locations = None\n      self._control_flow_context = self.graph._get_control_flow_context()\n      # pylint: enable=protected-access\n    \n      # Initialize self._c_op.\n      if c_op:\n        self._c_op = c_op\n      else:\n        if op_def is None:\n          op_def = self._graph._get_op_def(node_def.op)\n        # TODO(skyewm): op_def_library.apply_op() flattens the incoming inputs.\n        # Refactor so we don't have to do this here.\n        grouped_inputs = self._reconstruct_sequence_inputs(\n            op_def, inputs, node_def.attr)\n        self._c_op = _create_c_op(self._graph, node_def, grouped_inputs,\n>                                 control_input_ops)\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/framework/ops.py:2027: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = <tensorflow.python.framework.ops.Graph object at 0x7f68465e4ed0>\nnode_def = name: \"lambda_1_out/packed\"\nop: \"Pack\"\nattr {\n  key: \"N\"\n  value {\n    i: 2\n  }\n}\nattr {\n  key: \"T\"\n  value {\n    type: DT_FLOAT\n  }\n}\nattr {\n  key: \"axis\"\n  value {\n    i: 0\n  }\n}\n\ninputs = [[<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>]]\ncontrol_inputs = []\n\n    def _create_c_op(graph, node_def, inputs, control_inputs):\n      \"\"\"Creates a TF_Operation.\n    \n      Args:\n        graph: a `Graph`.\n        node_def: `node_def_pb2.NodeDef` for the operation to create.\n        inputs: A list of `Tensor`s (corresponding to scalar inputs) and lists of\n          `Tensor`s (corresponding to sequence inputs, e.g. \"int64 * N\",\n          \"list(int64)\"). The length of the list should be equal to the number of\n          inputs specified by this operation's op def.\n        control_inputs: A list of `Operation`s to set as control dependencies.\n    \n      Returns:\n        A wrapped TF_Operation*.\n      \"\"\"\n      # pylint: disable=protected-access\n      op_desc = c_api.TF_NewOperation(graph._c_graph, compat.as_str(node_def.op),\n                                      compat.as_str(node_def.name))\n      if node_def.device:\n        c_api.TF_SetDevice(op_desc, compat.as_str(node_def.device))\n      # Add inputs\n      for op_input in inputs:\n        if isinstance(op_input, (list, tuple)):\n          c_api.TF_AddInputList(op_desc, [t._as_tf_output() for t in op_input])\n        else:\n          c_api.TF_AddInput(op_desc, op_input._as_tf_output())\n    \n      # Add control inputs\n      for control_input in control_inputs:\n        c_api.TF_AddControlInput(op_desc, control_input._c_op)\n      # pylint: enable=protected-access\n    \n      # Add attrs\n      for name, attr_value in node_def.attr.items():\n        serialized = attr_value.SerializeToString()\n        # TODO(skyewm): this creates and deletes a new TF_Status for every attr.\n        # It might be worth creating a convenient way to re-use the same status.\n        c_api.TF_SetAttrValueProto(op_desc, compat.as_str(name), serialized)\n    \n      try:\n        c_op = c_api.TF_FinishOperation(op_desc)\n      except errors.InvalidArgumentError as e:\n        # Convert to ValueError for backwards compatibility.\n>       raise ValueError(str(e))\nE       ValueError: Shapes must be equal rank, but are 3 and 2\nE       \tFrom merging shape 0 with other shapes. for 'lambda_1_out/packed' (op: 'Pack') with input shapes: [?,2,2], [?,2].\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/framework/ops.py:1867: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\ntmpdir = local('/tmp/pytest-of-ubuntu/pytest-75148/popen-gw0/test_TensorBoard_multi_input_o0')\n\n    @keras_test\n    def test_TensorBoard_multi_input_output(tmpdir):\n        np.random.seed(np.random.randint(1, 1e7))\n        filepath = str(tmpdir / 'logs')\n    \n        (X_train, y_train), (X_test, y_test) = get_test_data(\n            num_train=train_samples,\n            num_test=test_samples,\n            input_shape=(input_dim, input_dim),\n            classification=True,\n            num_classes=num_classes)\n        y_test = np_utils.to_categorical(y_test)\n        y_train = np_utils.to_categorical(y_train)\n    \n        def data_generator(train):\n            if train:\n                max_batch_index = len(X_train) // batch_size\n            else:\n                max_batch_index = len(X_test) // batch_size\n            i = 0\n            while 1:\n                if train:\n                    # simulate multi-input/output models\n                    yield ([X_train[i * batch_size: (i + 1) * batch_size]] * 2,\n                           [y_train[i * batch_size: (i + 1) * batch_size]] * 2)\n                else:\n                    yield ([X_test[i * batch_size: (i + 1) * batch_size]] * 2,\n                           [y_test[i * batch_size: (i + 1) * batch_size]] * 2)\n                i += 1\n                i = i % max_batch_index\n    \n        inp1 = Input((input_dim, input_dim))\n        inp2 = Input((input_dim, input_dim))\n        inp_3d = add([inp1, inp2])\n        inp_2d = GlobalAveragePooling1D()(inp_3d)\n        inp_pair = Lambda(lambda x: x)([inp_3d, inp_2d])  # test a layer with a list of output tensors\n        hidden = dot(inp_pair, axes=-1)\n        hidden = Dense(num_hidden, activation='relu')(hidden)\n        hidden = Dropout(0.1)(hidden)\n        output1 = Dense(num_classes, activation='softmax')(hidden)\n        output2 = Dense(num_classes, activation='softmax')(hidden)\n        model = Model(inputs=[inp1, inp2], outputs=[output1, output2])\n        model.compile(loss='categorical_crossentropy',\n                      optimizer='sgd',\n                      metrics=['accuracy'])\n    \n        # we must generate new callbacks for each test, as they aren't stateless\n        def callbacks_factory(histogram_freq):\n            return [callbacks.TensorBoard(log_dir=filepath,\n                                          histogram_freq=histogram_freq,\n                                          write_images=True, write_grads=True,\n                                          embeddings_freq=1,\n                                          embeddings_layer_names=['dense_1'],\n                                          batch_size=5)]\n    \n        # fit without validation data\n        model.fit([X_train] * 2, [y_train] * 2, batch_size=batch_size,\n                  callbacks=callbacks_factory(histogram_freq=0), epochs=3)\n    \n        # fit with validation data and accuracy\n        model.fit([X_train] * 2, [y_train] * 2, batch_size=batch_size,\n                  validation_data=([X_test] * 2, [y_test] * 2),\n>                 callbacks=callbacks_factory(histogram_freq=1), epochs=2)\n\ntests/keras/test_callbacks.py:680: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nkeras/engine/training.py:1037: in fit\n    validation_steps=validation_steps)\nkeras/engine/training_arrays.py:115: in fit_loop\n    callbacks.set_model(callback_model)\nkeras/callbacks.py:51: in set_model\n    callback.set_model(model)\nkeras/callbacks.py:790: in set_model\n    layer.output)\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/summary/summary.py:179: in histogram\n    tag=tag, values=values, name=scope)\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/ops/gen_logging_ops.py:329: in histogram_summary\n    \"HistogramSummary\", tag=tag, values=values, name=name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tensorflow.python.framework.op_def_library.OpDefLibrary object at 0x7f684bdfde50>\nop_type_name = 'HistogramSummary', name = 'lambda_1_out/', keywords = {}\nop_info = <tensorflow.python.framework.op_def_library._OpInfo object at 0x7f684bd873d0>\nop_def = name: \"HistogramSummary\"\ninput_arg {\n  name: \"tag\"\n  type: DT_STRING\n}\ninput_arg {\n  name: \"values\"\n  type_attr: \"T\"\n}...   type: DT_BFLOAT16\n      type: DT_UINT16\n      type: DT_HALF\n      type: DT_UINT32\n      type: DT_UINT64\n    }\n  }\n}\n\ng = <tensorflow.python.framework.ops.Graph object at 0x7f68465e4ed0>\ndeprecation_version = 0, default_type_attr_map = {'T': tf.float32}\n\n    def _apply_op_helper(self, op_type_name, name=None, **keywords):\n      \"\"\"Implementation of apply_op that returns output_structure, op.\"\"\"\n      op_info = self._ops.get(op_type_name, None)\n      if op_info is None:\n        raise RuntimeError(\"Unrecognized Op name \" + op_type_name)\n      op_def = op_info.op_def\n    \n      # Determine the graph context.\n      try:\n        # Need to flatten all the arguments into a list.\n        # pylint: disable=protected-access\n        g = ops._get_graph_from_inputs(_Flatten(keywords.values()))\n        # pylint: enable=protected-access\n      except AssertionError as e:\n        raise RuntimeError(\n            \"Cannot determine graph for Op '%s' due to: %s\"\n            % (op_type_name, e.message))\n    \n      # Default name if not specified.\n      if name is None:\n        name = op_type_name\n    \n      # Check for deprecation\n      deprecation_version = op_def.deprecation.version\n      if deprecation_version:\n        producer = g.graph_def_versions.producer\n        if producer >= deprecation_version:\n          raise NotImplementedError(\n              (\"Op %s is not available in GraphDef version %d. \"\n               \"It has been removed in version %d. %s.\") %\n              (op_type_name, producer, deprecation_version,\n               op_def.deprecation.explanation))\n    \n      # Fill in the list of default types for all \"type\" attrs.  This\n      # will be used to choose a preferred dtype to convert to in the\n      # absence of input type information.\n      #\n      # TODO(b/31302892): Currently the defaults don't work in the right\n      # way if you have two inputs, one of whose type resolution depends\n      # on the other.  Handling this will require restructuring this code\n      # significantly.\n      default_type_attr_map = {}\n      for attr_def in op_def.attr:\n        if attr_def.type != \"type\":\n          continue\n        key = attr_def.name\n        if attr_def.HasField(\"default_value\"):\n          default_type_attr_map[key] = dtypes.as_dtype(\n              attr_def.default_value.type)\n    \n      # Requires that op_def has passed validation (using the C++\n      # ValidateOpDef() from ../framework/op_def_util.h).\n      attrs = {}\n      inputs = []\n      input_types = []\n      with g.as_default(), ops.name_scope(name) as scope:\n    \n        # Perform input type inference\n        inferred_from = {}\n        for input_arg in op_def.input_arg:\n          input_name = input_arg.name\n          if input_name in keywords:\n            values = keywords.pop(input_name)\n          elif input_name + \"_\" in keywords:\n            # Handle the case where the name is a keyword or built-in\n            # for Python so we use the name + _ instead.\n            input_name += \"_\"\n            values = keywords.pop(input_name)\n          else:\n            raise TypeError(\"No argument for input \" + input_name)\n    \n          # Goals:\n          # * Convert values to Tensors if it contains constants.\n          # * Verify that values is a list if that matches the input_arg's\n          #   type.\n          # * If the input_arg's type is determined by attrs, either set\n          #   those attrs and validate those attr values are legal (if\n          #   they have not yet been set) or validate the input matches\n          #   the type indicated by the attrs (if they have already been\n          #   inferred via an earlier input).\n          # * If the input_arg has an explicit type, make sure the input\n          #   conforms.\n    \n          if _IsListParameter(input_arg):\n            if not _IsListValue(values):\n              raise TypeError(\n                  \"Expected list for '%s' argument to '%s' Op, not %s.\" %\n                  (input_name, op_type_name, values))\n            # In cases where we expect all elements of the list to have the\n            # same dtype, try to cast non-Tensor elements to that type.\n            dtype = None\n            default_dtype = None\n            if input_arg.type != types_pb2.DT_INVALID:\n              dtype = input_arg.type\n            elif input_arg.number_attr:\n              if input_arg.type_attr in attrs:\n                dtype = attrs[input_arg.type_attr]\n              else:\n                for t in values:\n                  if isinstance(t, ops.Tensor):\n                    dtype = t.dtype\n                    break\n    \n              # dtype still not found, prefer using the default dtype\n              # from the attr.\n              if dtype is None and input_arg.type_attr in default_type_attr_map:\n                default_dtype = default_type_attr_map[input_arg.type_attr]\n    \n            try:\n              if not input_arg.is_ref and dtype:\n                dtype = dtypes.as_dtype(dtype).base_dtype\n              values = ops.internal_convert_n_to_tensor(\n                  values,\n                  name=input_arg.name,\n                  dtype=dtype if dtype else None,\n                  preferred_dtype=default_dtype,\n                  as_ref=input_arg.is_ref)\n              if input_arg.number_attr and len(\n                  set(v.dtype.base_dtype for v in values)) > 1:\n                raise TypeError()  # All types should match.\n            except (TypeError, ValueError):\n              # What types does the conversion function think values have?\n              observed_types = []\n              for value in values:\n                try:\n                  converted_value = ops.internal_convert_to_tensor(\n                      value, as_ref=input_arg.is_ref)\n                  observed_types.append(converted_value.dtype.base_dtype.name)\n                except (TypeError, ValueError):\n                  observed_types.append(\"<NOT CONVERTIBLE TO TENSOR>\")\n              observed = \", \".join(observed_types)\n    \n              prefix = (\n                  \"Tensors in list passed to '%s' of '%s' Op have types [%s]\" %\n                  (input_name, op_type_name, observed))\n              if input_arg.number_attr:\n                if input_arg.type != types_pb2.DT_INVALID:\n                  raise TypeError(\"%s that do not match expected type %s.\" %\n                                  (prefix, dtype.name))\n                elif input_arg.type_attr in attrs:\n                  raise TypeError(\"%s that do not match type %s inferred from \"\n                                  \"earlier arguments.\" %\n                                  (prefix, dtype.name))\n                else:\n                  raise TypeError(\"%s that don't all match.\" % prefix)\n              else:\n                raise TypeError(\n                    \"%s that are invalid. Tensors: %s\" % (prefix, values))\n    \n            types = [x.dtype for x in values]\n            inputs.extend(values)\n          else:\n            # In cases where we have an expected type, try to convert non-Tensor\n            # arguments to that type.\n            dtype = None\n            default_dtype = None\n            if input_arg.type != types_pb2.DT_INVALID:\n              dtype = input_arg.type\n            elif input_arg.type_attr in attrs:\n              dtype = attrs[input_arg.type_attr]\n            elif input_arg.type_attr in default_type_attr_map:\n              # The dtype could not be inferred solely from the inputs,\n              # so we prefer the attr's default, so code that adds a new attr\n              # with a default is backwards compatible.\n              default_dtype = default_type_attr_map[input_arg.type_attr]\n    \n            try:\n              values = ops.internal_convert_to_tensor(\n                  values,\n                  name=input_arg.name,\n                  dtype=dtype,\n                  as_ref=input_arg.is_ref,\n                  preferred_dtype=default_dtype)\n            except TypeError as err:\n              if dtype is None:\n                raise err\n              else:\n                raise TypeError(\n                    \"Expected %s passed to parameter '%s' of op '%s', got %s of \"\n                    \"type '%s' instead. Error: %s\" %\n                    (dtypes.as_dtype(dtype).name, input_arg.name, op_type_name,\n                     repr(values), type(values).__name__, err))\n            except ValueError:\n              # What type does convert_to_tensor think it has?\n              try:\n                observed = ops.internal_convert_to_tensor(\n                    values, as_ref=input_arg.is_ref).dtype.name\n              except ValueError as err:\n                raise ValueError(\n                    \"Tried to convert '%s' to a tensor and failed. Error: %s\" %\n>                   (input_name, err))\nE               ValueError: Tried to convert 'values' to a tensor and failed. Error: Shapes must be equal rank, but are 3 and 2\nE               \tFrom merging shape 0 with other shapes. for 'lambda_1_out/packed' (op: 'Pack') with input shapes: [?,2,2], [?,2].\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/framework/op_def_library.py:545: ValueError",
                "traceback": "value = [<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>]\ndtype = None, name = 'values', as_ref = False, preferred_dtype = tf.float32\nctx = <tensorflow.python.eager.context.Context object at 0x7f6845c7bfd0>\naccept_symbolic_tensors = True, accept_composite_tensors = False\n\n    def internal_convert_to_tensor(value,\n                                   dtype=None,\n                                   name=None,\n                                   as_ref=False,\n                                   preferred_dtype=None,\n                                   ctx=None,\n                                   accept_symbolic_tensors=True,\n                                   accept_composite_tensors=False):\n      \"\"\"Implementation of the public convert_to_tensor.\"\"\"\n      if ctx is None:\n        ctx = context.context()\n      if isinstance(value, EagerTensor):\n        if ctx.executing_eagerly():\n          if dtype is not None:\n            dtype = dtypes.as_dtype(dtype)\n            value = _TensorTensorConversionFunction(value, dtype=dtype)\n          return value\n        else:\n          graph = get_default_graph()\n          if not graph.building_function:\n            raise RuntimeError(\"Attempting to capture an EagerTensor without \"\n                               \"building a function.\")\n          return graph.capture(value, name=name)\n      elif ((not accept_symbolic_tensors) and isinstance(value, Tensor) and\n            ctx.executing_eagerly()):\n        # Found a symbolic tensor in an eager context.\n        # This happens when we use the Keras functional API (i.e. calling layers\n        # on the output of `keras.Input()`, which is symbolic) while eager\n        # execution is enabled.\n        if _is_keras_symbolic_tensor(value):\n          # If the graph of the tensor isn't the Keras graph, we should still\n          # fail, for the time being. TODO(fchollet): consider allowing\n          # all symbolic tensors to raise this exception in this case.\n          raise core._SymbolicException(  # pylint: disable=protected-access\n              \"Using the symbolic output of a Keras layer during eager execution.\")\n    \n      if dtype is not None:\n        dtype = dtypes.as_dtype(dtype)\n      unwrapped_type = type(value)\n      conversion_func_list = _tensor_conversion_func_cache.get(unwrapped_type, None)\n      if conversion_func_list is None:\n        with _tensor_conversion_func_lock:\n          conversion_func_list = []\n          for _, funcs_at_priority in sorted(\n              _tensor_conversion_func_registry.items()):\n            for base_type, conversion_func in funcs_at_priority:\n              if isinstance(value, base_type):\n                conversion_func_list.append((base_type, conversion_func))\n          _tensor_conversion_func_cache[unwrapped_type] = conversion_func_list\n    \n      for base_type, conversion_func in conversion_func_list:\n        # If dtype is None but preferred_dtype is not None, we try to\n        # cast to preferred_dtype first.\n        ret = None\n        if dtype is None and preferred_dtype is not None:\n          try:\n            ret = conversion_func(\n                value, dtype=preferred_dtype, name=name, as_ref=as_ref)\n          except (TypeError, ValueError, errors.UnimplementedError,\n                  errors.InvalidArgumentError):\n            # Could not coerce the conversion to use the preferred dtype.\n            ret = None\n    \n          if ret is not None and ret is not NotImplemented:\n            if (ret.dtype.base_dtype !=\n                dtypes.as_dtype(preferred_dtype).base_dtype):\n              raise TypeError(\"convert_to_tensor did not convert to \"\n                              \"the preferred dtype: %s vs %s \" %\n                              (ret.dtype.base_dtype,\n                               dtypes.as_dtype(preferred_dtype).base_dtype))\n    \n        if ret is None:\n>         ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/framework/ops.py:1224:",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nv = [<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>]\ndtype = tf.float32, name = 'values', as_ref = False\n\n    def _autopacking_conversion_function(v, dtype=None, name=None, as_ref=False):\n      \"\"\"Tensor conversion function that automatically packs arguments.\"\"\"\n      if as_ref:\n        return NotImplemented\n      inferred_dtype = _get_dtype_from_nested_lists(v)\n      if inferred_dtype is None:\n        # We did not find any tensor-like objects in the nested lists, so defer to\n        # other conversion functions.\n        return NotImplemented\n      if dtype is None:\n        dtype = inferred_dtype\n      elif dtype != inferred_dtype:\n        v = nest.map_structure(_cast_nested_seqs_to_dtype(dtype), v)\n>     return _autopacking_helper(v, dtype, name or \"packed\")\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/ops/array_ops.py:1145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlist_or_tuple = [<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>]\ndtype = tf.float32, name = 'values'\n\n    def _autopacking_helper(list_or_tuple, dtype, name):\n      \"\"\"Converts the given list or tuple to a tensor by packing.\n    \n      Args:\n        list_or_tuple: A (possibly nested) list or tuple containing a tensor.\n        dtype: The element type of the returned tensor.\n        name: A name for the returned tensor.\n    \n      Returns:\n        A `tf.Tensor` with value equivalent to `list_or_tuple`.\n      \"\"\"\n      if context.executing_eagerly():\n        # NOTE: Fast path when all the items are tensors, this doesn't do any type\n        # checking.\n        if all(ops.is_dense_tensor_like(elem) for elem in list_or_tuple):\n          return gen_array_ops.pack(list_or_tuple, name=name)\n      must_pack = False\n      converted_elems = []\n      with ops.name_scope(name) as scope:\n        for i, elem in enumerate(list_or_tuple):\n          if ops.is_dense_tensor_like(elem):\n            if dtype is not None and elem.dtype.base_dtype != dtype:\n              raise TypeError(\"Cannot convert a list containing a tensor of dtype \"\n                              \"%s to %s (Tensor is: %r)\" %\n                              (elem.dtype, dtype, elem))\n            converted_elems.append(elem)\n            must_pack = True\n          elif isinstance(elem, (list, tuple)):\n            converted_elem = _autopacking_helper(elem, dtype, str(i))\n            if ops.is_dense_tensor_like(converted_elem):\n              must_pack = True\n            converted_elems.append(converted_elem)\n          else:\n            converted_elems.append(elem)\n        if must_pack:\n          elems_as_tensors = []\n          for i, elem in enumerate(converted_elems):\n            if ops.is_dense_tensor_like(elem):\n              elems_as_tensors.append(elem)\n            else:\n              # NOTE(mrry): This is inefficient, but it enables us to\n              # handle the case where the list arguments are other\n              # convertible-to-tensor types, such as numpy arrays.\n              elems_as_tensors.append(\n                  constant_op.constant(elem, dtype=dtype, name=str(i)))\n>         return gen_array_ops.pack(elems_as_tensors, name=scope)\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/ops/array_ops.py:1095: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalues = [<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>]\naxis = 0, name = 'lambda_1_out/values_1/'\n\n    def pack(values, axis=0, name=None):\n      r\"\"\"Packs a list of `N` rank-`R` tensors into one rank-`(R+1)` tensor.\n    \n      Packs the `N` tensors in `values` into a tensor with rank one higher than each\n      tensor in `values`, by packing them along the `axis` dimension.\n      Given a list of tensors of shape `(A, B, C)`;\n    \n      if `axis == 0` then the `output` tensor will have the shape `(N, A, B, C)`.\n      if `axis == 1` then the `output` tensor will have the shape `(A, N, B, C)`.\n      Etc.\n    \n      For example:\n    \n      ```\n      # 'x' is [1, 4]\n      # 'y' is [2, 5]\n      # 'z' is [3, 6]\n      pack([x, y, z]) => [[1, 4], [2, 5], [3, 6]]  # Pack along first dim.\n      pack([x, y, z], axis=1) => [[1, 2, 3], [4, 5, 6]]\n      ```\n    \n      This is the opposite of `unpack`.\n    \n      Args:\n        values: A list of at least 1 `Tensor` objects with the same type.\n          Must be of same shape and type.\n        axis: An optional `int`. Defaults to `0`.\n          Dimension along which to pack.  Negative values wrap around, so the\n          valid range is `[-(R+1), R+1)`.\n        name: A name for the operation (optional).\n    \n      Returns:\n        A `Tensor`. Has the same type as `values`.\n      \"\"\"\n      _ctx = _context._context or _context.context()\n      if _ctx is not None and _ctx._thread_local_data.is_eager:\n        try:\n          _result = _pywrap_tensorflow.TFE_Py_FastPathExecute(\n            _ctx._context_handle, _ctx._thread_local_data.device_name, \"Pack\",\n            name, _ctx._post_execution_callbacks, values, \"axis\", axis)\n          return _result\n        except _core._FallbackException:\n          try:\n            return pack_eager_fallback(\n                values, axis=axis, name=name, ctx=_ctx)\n          except _core._SymbolicException:\n            pass  # Add nodes to the TensorFlow graph.\n        except _core._NotOkStatusException as e:\n          if name is not None:\n            message = e.message + \" name: \" + name\n          else:\n            message = e.message\n          _six.raise_from(_core._status_to_exception(e.code, message), None)\n      # Add nodes to the TensorFlow graph.\n      if not isinstance(values, (list, tuple)):\n        raise TypeError(\n            \"Expected list for 'values' argument to \"\n            \"'pack' Op, not %r.\" % values)\n      _attr_N = len(values)\n      if axis is None:\n        axis = 0\n      axis = _execute.make_int(axis, \"axis\")\n      _, _, _op = _op_def_lib._apply_op_helper(\n>           \"Pack\", values=values, axis=axis, name=name)\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/ops/gen_array_ops.py:5897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tensorflow.python.framework.op_def_library.OpDefLibrary object at 0x7f684c8880d0>\nop_type_name = 'Pack', name = 'lambda_1_out/values_1/', keywords = {}\nop_info = <tensorflow.python.framework.op_def_library._OpInfo object at 0x7f684c88ee90>\nop_def = name: \"Pack\"\ninput_arg {\n  name: \"values\"\n  type_attr: \"T\"\n  number_attr: \"N\"\n}\noutput_arg {\n  name: \"output\"\n  type_a... minimum: 1\n}\nattr {\n  name: \"T\"\n  type: \"type\"\n}\nattr {\n  name: \"axis\"\n  type: \"int\"\n  default_value {\n    i: 0\n  }\n}\n\ng = <tensorflow.python.framework.ops.Graph object at 0x7f68465e4ed0>\ndeprecation_version = 0, default_type_attr_map = {}\n\n    def _apply_op_helper(self, op_type_name, name=None, **keywords):\n      \"\"\"Implementation of apply_op that returns output_structure, op.\"\"\"\n      op_info = self._ops.get(op_type_name, None)\n      if op_info is None:\n        raise RuntimeError(\"Unrecognized Op name \" + op_type_name)\n      op_def = op_info.op_def\n    \n      # Determine the graph context.\n      try:\n        # Need to flatten all the arguments into a list.\n        # pylint: disable=protected-access\n        g = ops._get_graph_from_inputs(_Flatten(keywords.values()))\n        # pylint: enable=protected-access\n      except AssertionError as e:\n        raise RuntimeError(\n            \"Cannot determine graph for Op '%s' due to: %s\"\n            % (op_type_name, e.message))\n    \n      # Default name if not specified.\n      if name is None:\n        name = op_type_name\n    \n      # Check for deprecation\n      deprecation_version = op_def.deprecation.version\n      if deprecation_version:\n        producer = g.graph_def_versions.producer\n        if producer >= deprecation_version:\n          raise NotImplementedError(\n              (\"Op %s is not available in GraphDef version %d. \"\n               \"It has been removed in version %d. %s.\") %\n              (op_type_name, producer, deprecation_version,\n               op_def.deprecation.explanation))\n    \n      # Fill in the list of default types for all \"type\" attrs.  This\n      # will be used to choose a preferred dtype to convert to in the\n      # absence of input type information.\n      #\n      # TODO(b/31302892): Currently the defaults don't work in the right\n      # way if you have two inputs, one of whose type resolution depends\n      # on the other.  Handling this will require restructuring this code\n      # significantly.\n      default_type_attr_map = {}\n      for attr_def in op_def.attr:\n        if attr_def.type != \"type\":\n          continue\n        key = attr_def.name\n        if attr_def.HasField(\"default_value\"):\n          default_type_attr_map[key] = dtypes.as_dtype(\n              attr_def.default_value.type)\n    \n      # Requires that op_def has passed validation (using the C++\n      # ValidateOpDef() from ../framework/op_def_util.h).\n      attrs = {}\n      inputs = []\n      input_types = []\n      with g.as_default(), ops.name_scope(name) as scope:\n    \n        # Perform input type inference\n        inferred_from = {}\n        for input_arg in op_def.input_arg:\n          input_name = input_arg.name\n          if input_name in keywords:\n            values = keywords.pop(input_name)\n          elif input_name + \"_\" in keywords:\n            # Handle the case where the name is a keyword or built-in\n            # for Python so we use the name + _ instead.\n            input_name += \"_\"\n            values = keywords.pop(input_name)\n          else:\n            raise TypeError(\"No argument for input \" + input_name)\n    \n          # Goals:\n          # * Convert values to Tensors if it contains constants.\n          # * Verify that values is a list if that matches the input_arg's\n          #   type.\n          # * If the input_arg's type is determined by attrs, either set\n          #   those attrs and validate those attr values are legal (if\n          #   they have not yet been set) or validate the input matches\n          #   the type indicated by the attrs (if they have already been\n          #   inferred via an earlier input).\n          # * If the input_arg has an explicit type, make sure the input\n          #   conforms.\n    \n          if _IsListParameter(input_arg):\n            if not _IsListValue(values):\n              raise TypeError(\n                  \"Expected list for '%s' argument to '%s' Op, not %s.\" %\n                  (input_name, op_type_name, values))\n            # In cases where we expect all elements of the list to have the\n            # same dtype, try to cast non-Tensor elements to that type.\n            dtype = None\n            default_dtype = None\n            if input_arg.type != types_pb2.DT_INVALID:\n              dtype = input_arg.type\n            elif input_arg.number_attr:\n              if input_arg.type_attr in attrs:\n                dtype = attrs[input_arg.type_attr]\n              else:\n                for t in values:\n                  if isinstance(t, ops.Tensor):\n                    dtype = t.dtype\n                    break\n    \n              # dtype still not found, prefer using the default dtype\n              # from the attr.\n              if dtype is None and input_arg.type_attr in default_type_attr_map:\n                default_dtype = default_type_attr_map[input_arg.type_attr]\n    \n            try:\n              if not input_arg.is_ref and dtype:\n                dtype = dtypes.as_dtype(dtype).base_dtype\n              values = ops.internal_convert_n_to_tensor(\n                  values,\n                  name=input_arg.name,\n                  dtype=dtype if dtype else None,\n                  preferred_dtype=default_dtype,\n                  as_ref=input_arg.is_ref)\n              if input_arg.number_attr and len(\n                  set(v.dtype.base_dtype for v in values)) > 1:\n                raise TypeError()  # All types should match.\n            except (TypeError, ValueError):\n              # What types does the conversion function think values have?\n              observed_types = []\n              for value in values:\n                try:\n                  converted_value = ops.internal_convert_to_tensor(\n                      value, as_ref=input_arg.is_ref)\n                  observed_types.append(converted_value.dtype.base_dtype.name)\n                except (TypeError, ValueError):\n                  observed_types.append(\"<NOT CONVERTIBLE TO TENSOR>\")\n              observed = \", \".join(observed_types)\n    \n              prefix = (\n                  \"Tensors in list passed to '%s' of '%s' Op have types [%s]\" %\n                  (input_name, op_type_name, observed))\n              if input_arg.number_attr:\n                if input_arg.type != types_pb2.DT_INVALID:\n                  raise TypeError(\"%s that do not match expected type %s.\" %\n                                  (prefix, dtype.name))\n                elif input_arg.type_attr in attrs:\n                  raise TypeError(\"%s that do not match type %s inferred from \"\n                                  \"earlier arguments.\" %\n                                  (prefix, dtype.name))\n                else:\n                  raise TypeError(\"%s that don't all match.\" % prefix)\n              else:\n                raise TypeError(\n                    \"%s that are invalid. Tensors: %s\" % (prefix, values))\n    \n            types = [x.dtype for x in values]\n            inputs.extend(values)\n          else:\n            # In cases where we have an expected type, try to convert non-Tensor\n            # arguments to that type.\n            dtype = None\n            default_dtype = None\n            if input_arg.type != types_pb2.DT_INVALID:\n              dtype = input_arg.type\n            elif input_arg.type_attr in attrs:\n              dtype = attrs[input_arg.type_attr]\n            elif input_arg.type_attr in default_type_attr_map:\n              # The dtype could not be inferred solely from the inputs,\n              # so we prefer the attr's default, so code that adds a new attr\n              # with a default is backwards compatible.\n              default_dtype = default_type_attr_map[input_arg.type_attr]\n    \n            try:\n              values = ops.internal_convert_to_tensor(\n                  values,\n                  name=input_arg.name,\n                  dtype=dtype,\n                  as_ref=input_arg.is_ref,\n                  preferred_dtype=default_dtype)\n            except TypeError as err:\n              if dtype is None:\n                raise err\n              else:\n                raise TypeError(\n                    \"Expected %s passed to parameter '%s' of op '%s', got %s of \"\n                    \"type '%s' instead. Error: %s\" %\n                    (dtypes.as_dtype(dtype).name, input_arg.name, op_type_name,\n                     repr(values), type(values).__name__, err))\n            except ValueError:\n              # What type does convert_to_tensor think it has?\n              try:\n                observed = ops.internal_convert_to_tensor(\n                    values, as_ref=input_arg.is_ref).dtype.name\n              except ValueError as err:\n                raise ValueError(\n                    \"Tried to convert '%s' to a tensor and failed. Error: %s\" %\n                    (input_name, err))\n              prefix = (\"Input '%s' of '%s' Op has type %s that does not match\" %\n                        (input_name, op_type_name, observed))\n              if input_arg.type != types_pb2.DT_INVALID:\n                raise TypeError(\"%s expected type of %s.\" %\n                                (prefix, dtypes.as_dtype(input_arg.type).name))\n              else:\n                # Update the maps with the default, if needed.\n                k = input_arg.type_attr\n                if k in default_type_attr_map:\n                  if k not in attrs:\n                    attrs[k] = default_type_attr_map[k]\n                    if k not in inferred_from:\n                      inferred_from[k] = \"Default in OpDef\"\n    \n                raise TypeError(\n                    \"%s type %s of argument '%s'.\" %\n                    (prefix, dtypes.as_dtype(attrs[input_arg.type_attr]).name,\n                     inferred_from[input_arg.type_attr]))\n    \n            types = [values.dtype]\n            inputs.append(values)\n          base_types = [x.base_dtype for x in types]\n    \n          if input_arg.number_attr:\n            # <number-attr> * <type> or <number-attr> * <type-attr>\n            if input_arg.number_attr in attrs:\n              if len(values) != attrs[input_arg.number_attr]:\n                raise ValueError(\n                    \"List argument '%s' to '%s' Op with length %d must match \"\n                    \"length %d of argument '%s'.\" %\n                    (input_name, op_type_name, len(values),\n                     attrs[input_arg.number_attr],\n                     inferred_from[input_arg.number_attr]))\n            else:\n              attrs[input_arg.number_attr] = len(values)\n              inferred_from[input_arg.number_attr] = input_name\n              num_attr = _Attr(op_def, input_arg.number_attr)\n              if num_attr.has_minimum and len(values) < num_attr.minimum:\n                raise ValueError(\n                    \"List argument '%s' to '%s' Op with length %d shorter \"\n                    \"than minimum length %d.\" %\n                    (input_name, op_type_name, len(values), num_attr.minimum))\n            # All tensors must have the same base type.\n            if any(bt != base_types[0] for bt in base_types):\n              raise TypeError(\n                  \"All tensors passed to '%s' of '%s' Op \"\n                  \"must have the same type.\" %\n                  (input_name, op_type_name))\n            if input_arg.type != types_pb2.DT_INVALID:\n              # <number-attr> * <type> case\n              if base_types and base_types[0] != input_arg.type:\n                assert False, \"Unreachable\"\n            elif input_arg.type_attr in attrs:\n              # <number-attr> * <type-attr> case, where <type-attr> already\n              # has an inferred value.\n              if base_types and base_types[0] != attrs[input_arg.type_attr]:\n                assert False, \"Unreachable\"\n            else:\n              # <number-attr> * <type-attr> case, where we are now setting\n              # the <type-attr> based on this input\n              if not base_types:\n                raise TypeError(\n                    \"Don't know how to infer type variable from empty input \"\n                    \"list passed to input '%s' of '%s' Op.\" %\n                    (input_name, op_type_name))\n              attrs[input_arg.type_attr] = base_types[0]\n              inferred_from[input_arg.type_attr] = input_name\n              type_attr = _Attr(op_def, input_arg.type_attr)\n              _SatisfiesTypeConstraint(base_types[0], type_attr,\n                                       param_name=input_name)\n          elif input_arg.type_attr:\n            # <type-attr>\n            attr_value = base_types[0]\n            if input_arg.type_attr in attrs:\n              if attrs[input_arg.type_attr] != attr_value:\n                assert False, \"Unreachable\"\n            else:\n              for base_type in base_types:\n                _SatisfiesTypeConstraint(base_type,\n                                         _Attr(op_def, input_arg.type_attr),\n                                         param_name=input_name)\n              attrs[input_arg.type_attr] = attr_value\n              inferred_from[input_arg.type_attr] = input_name\n          elif input_arg.type_list_attr:\n            # <type-list-attr>\n            attr_value = base_types\n            if input_arg.type_list_attr in attrs:\n              if attrs[input_arg.type_list_attr] != attr_value:\n                raise TypeError(\n                    \"Input '%s' of '%s' Op has type list of %s that does not \"\n                    \"match type list %s of argument '%s'.\" %\n                    (input_name, op_type_name,\n                     \", \".join(dtypes.as_dtype(x).name for x in attr_value),\n                     \", \".join(dtypes.as_dtype(x).name\n                               for x in attrs[input_arg.type_list_attr]),\n                     inferred_from[input_arg.type_list_attr]))\n            else:\n              for base_type in base_types:\n                _SatisfiesTypeConstraint(base_type,\n                                         _Attr(op_def, input_arg.type_list_attr),\n                                         param_name=input_name)\n              attrs[input_arg.type_list_attr] = attr_value\n              inferred_from[input_arg.type_list_attr] = input_name\n          else:\n            # single Tensor with specified type\n            if base_types[0] != input_arg.type:\n              assert False, \"Unreachable\"\n    \n          if input_arg.is_ref:\n            if not all(x._is_ref_dtype for x in types):  # pylint: disable=protected-access\n              raise TypeError(\n                  (\"'%s' Op requires that input '%s' be a mutable tensor \"\n                   \"(e.g.: a tf.Variable)\") % (op_type_name, input_name))\n            input_types.extend(types)\n          else:\n            input_types.extend(base_types)\n    \n        # Process remaining attrs\n        for attr in op_def.attr:\n          # Skip attrs that have already had their values inferred\n          if attr.name in attrs:\n            if attr.name in keywords:\n              raise TypeError(\n                  \"Should not specify value for inferred attr '%s'.\" % attr.name)\n            continue\n          if attr.name in keywords:\n            attrs[attr.name] = keywords.pop(attr.name)\n          elif attr.name + \"_\" in keywords:\n            # Attrs whose names match Python keywords have an extra '_'\n            # appended, so we must check for that as well.\n            attrs[attr.name] = keywords.pop(attr.name + \"_\")\n          else:\n            raise TypeError(\"No argument for attr \" + attr.name)\n    \n        # Convert attr values to AttrValue protos.\n        attr_protos = {}\n        for attr_def in op_def.attr:\n          key = attr_def.name\n          value = attrs[key]\n          attr_value = attr_value_pb2.AttrValue()\n          if attr_def.HasField(\"default_value\") and value is None:\n            attr_value.CopyFrom(attr_def.default_value)\n            attr_protos[key] = attr_value\n            continue\n          if attr_def.type.startswith(\"list(\"):\n            if not _IsListValue(value):\n              raise TypeError(\"Expected list for attr \" + key)\n            if attr_def.has_minimum:\n              if len(value) < attr_def.minimum:\n                raise ValueError(\"Attr '%s' of '%s' Op passed list of length %d \"\n                                 \"less than minimum %d.\" %\n                                 (key, op_type_name, len(value),\n                                  attr_def.minimum))\n            attr_value.list.SetInParent()\n          if attr_def.type == \"string\":\n            attr_value.s = _MakeStr(value, key)\n            if attr_def.HasField(\"allowed_values\"):\n              if attr_value.s not in attr_def.allowed_values.list.s:\n                raise ValueError(\n                    \"Attr '%s' of '%s' Op passed string '%s' not in: \\\"%s\\\".\" %\n                    (key, op_type_name, compat.as_text(attr_value.s),\n                     '\", \"'.join(map(compat.as_text,\n                                     attr_def.allowed_values.list.s))))\n          elif attr_def.type == \"list(string)\":\n            attr_value.list.s.extend([_MakeStr(x, key) for x in value])\n            if attr_def.HasField(\"allowed_values\"):\n              for x in attr_value.list.s:\n                if x not in attr_def.allowed_values.list.s:\n                  raise ValueError(\n                      \"Attr '%s' of '%s' Op passed string '%s' not in: \\\"%s\\\".\" %\n                      (key, op_type_name, compat.as_text(x),\n                       '\", \"'.join(map(compat.as_text,\n                                       attr_def.allowed_values.list.s))))\n          elif attr_def.type == \"int\":\n            attr_value.i = _MakeInt(value, key)\n            if attr_def.has_minimum:\n              if attr_value.i < attr_def.minimum:\n                raise ValueError(\n                    \"Attr '%s' of '%s' Op passed %d less than minimum %d.\" %\n                    (key, op_type_name, attr_value.i, attr_def.minimum))\n          elif attr_def.type == \"list(int)\":\n            attr_value.list.i.extend([_MakeInt(x, key) for x in value])\n          elif attr_def.type == \"float\":\n            attr_value.f = _MakeFloat(value, key)\n          elif attr_def.type == \"list(float)\":\n            attr_value.list.f.extend([_MakeFloat(x, key) for x in value])\n          elif attr_def.type == \"bool\":\n            attr_value.b = _MakeBool(value, key)\n          elif attr_def.type == \"list(bool)\":\n            attr_value.list.b.extend([_MakeBool(x, key) for x in value])\n          elif attr_def.type == \"type\":\n            attr_value.type = _MakeType(value, attr_def)\n          elif attr_def.type == \"list(type)\":\n            attr_value.list.type.extend(\n                [_MakeType(x, attr_def) for x in value])\n          elif attr_def.type == \"shape\":\n            attr_value.shape.CopyFrom(_MakeShape(value, key))\n          elif attr_def.type == \"list(shape)\":\n            attr_value.list.shape.extend(\n                [_MakeShape(x, key) for x in value])\n          elif attr_def.type == \"tensor\":\n            attr_value.tensor.CopyFrom(_MakeTensor(value, key))\n          elif attr_def.type == \"list(tensor)\":\n            attr_value.list.tensor.extend(\n                [_MakeTensor(x, key) for x in value])\n          elif attr_def.type == \"func\":\n            attr_value.func.CopyFrom(_MakeFunc(value, key))\n          elif attr_def.type == \"list(func)\":\n            attr_value.list.func.extend([_MakeFunc(x, key) for x in value])\n          else:\n            raise TypeError(\"Unrecognized Attr type \" + attr_def.type)\n    \n          attr_protos[key] = attr_value\n        del attrs  # attrs is no longer authoritative, use attr_protos instead\n    \n        # Determine output types (possibly using attrs)\n        output_structure = []\n        for arg in op_def.output_arg:\n          if arg.number_attr:\n            n = _AttrValue(attr_protos, arg.number_attr).i\n            output_structure.append(n)\n          elif arg.type_attr:\n            t = _AttrValue(attr_protos, arg.type_attr)\n            output_structure.append(None)\n          elif arg.type_list_attr:\n            t = _AttrValue(attr_protos, arg.type_list_attr)\n            output_structure.append(len(t.list.type))\n          else:\n            output_structure.append(None)\n    \n        if keywords:\n          raise TypeError(\"apply_op() got unexpected keyword arguments: \" +\n                          \", \".join(sorted(keywords.keys())))\n    \n        # NOTE(mrry): We add an explicit colocation constraint between\n        # the newly created op and any of its reference-typed inputs.\n        must_colocate_inputs = [val for arg, val in zip(op_def.input_arg, inputs)\n                                if arg.is_ref]\n        with _MaybeColocateWith(must_colocate_inputs):\n          # Add Op to graph\n          op = g.create_op(op_type_name, inputs, dtypes=None, name=scope,\n                           input_types=input_types, attrs=attr_protos,\n>                          op_def=op_def)\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/framework/op_def_library.py:788: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (<tensorflow.python.framework.ops.Graph object at 0x7f68465e4ed0>, 'Pack', [<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>])\nkwargs = {'attrs': {'N': i: 2\n, 'T': type: DT_FLOAT\n, 'axis': i: 0\n}, 'dtypes': None, 'input_types': [tf.float32, tf.float32], 'name': 'lambda_1_out/values_1/', ...}\ninvalid_args = []\nnamed_args = {'attrs': {'N': i: 2\n, 'T': type: DT_FLOAT\n, 'axis': i: 0\n}, 'compute_device': True, 'compute_shapes': True, 'dtypes': None, ...}\narg_name = 'compute_shapes'\nspec = DeprecatedArgSpec(position=8, has_ok_value=False, ok_value=None)\n\n    @functools.wraps(func)\n    def new_func(*args, **kwargs):\n      \"\"\"Deprecation wrapper.\"\"\"\n      # TODO(apassos) figure out a way to have reasonable performance with\n      # deprecation warnings and eager mode.\n      if is_in_graph_mode.IS_IN_GRAPH_MODE() and _PRINT_DEPRECATION_WARNINGS:\n        invalid_args = []\n        named_args = tf_inspect.getcallargs(func, *args, **kwargs)\n        for arg_name, spec in iter(deprecated_positions.items()):\n          if (spec.position < len(args) and\n              not (spec.has_ok_value and\n                   _same_value(named_args[arg_name], spec.ok_value))):\n            invalid_args.append(arg_name)\n        if is_varargs_deprecated and len(args) > len(arg_spec.args):\n          invalid_args.append(arg_spec.varargs)\n        if is_kwargs_deprecated and kwargs:\n          invalid_args.append(arg_spec.varkw)\n        for arg_name in deprecated_arg_names:\n          if (arg_name in kwargs and\n              not (deprecated_positions[arg_name].has_ok_value and\n                   _same_value(named_args[arg_name],\n                               deprecated_positions[arg_name].ok_value))):\n            invalid_args.append(arg_name)\n        for arg_name in invalid_args:\n          if (func, arg_name) not in _PRINTED_WARNING:\n            if warn_once:\n              _PRINTED_WARNING[(func, arg_name)] = True\n            logging.warning(\n                'From %s: calling %s (from %s) with %s is deprecated and will '\n                'be removed %s.\\nInstructions for updating:\\n%s',\n                _call_location(), decorator_utils.get_qualified_name(func),\n                func.__module__, arg_name,\n                'in a future version' if date is None else ('after %s' % date),\n                instructions)\n>     return func(*args, **kwargs)\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/util/deprecation.py:507: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tensorflow.python.framework.ops.Graph object at 0x7f68465e4ed0>\nop_type = 'Pack'\ninputs = [<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>]\ndtypes = None, input_types = [tf.float32, tf.float32]\nname = 'lambda_1_out/values_1'\nattrs = {'N': i: 2\n, 'T': type: DT_FLOAT\n, 'axis': i: 0\n}\nop_def = name: \"Pack\"\ninput_arg {\n  name: \"values\"\n  type_attr: \"T\"\n  number_attr: \"N\"\n}\noutput_arg {\n  name: \"output\"\n  type_a... minimum: 1\n}\nattr {\n  name: \"T\"\n  type: \"type\"\n}\nattr {\n  name: \"axis\"\n  type: \"int\"\n  default_value {\n    i: 0\n  }\n}\n\ncompute_device = True\n\n    @deprecated_args(None,\n                     \"Shapes are always computed; don't use the compute_shapes \"\n                     \"as it has no effect.\", \"compute_shapes\")\n    def create_op(\n        self,\n        op_type,\n        inputs,\n        dtypes=None,  # pylint: disable=redefined-outer-name\n        input_types=None,\n        name=None,\n        attrs=None,\n        op_def=None,\n        compute_shapes=True,\n        compute_device=True):\n      \"\"\"Creates an `Operation` in this graph.\n    \n      This is a low-level interface for creating an `Operation`. Most\n      programs will not call this method directly, and instead use the\n      Python op constructors, such as `tf.constant()`, which add ops to\n      the default graph.\n    \n      Args:\n        op_type: The `Operation` type to create. This corresponds to the\n          `OpDef.name` field for the proto that defines the operation.\n        inputs: A list of `Tensor` objects that will be inputs to the `Operation`.\n        dtypes: (Optional) A list of `DType` objects that will be the types of the\n          tensors that the operation produces.\n        input_types: (Optional.) A list of `DType`s that will be the types of the\n          tensors that the operation consumes. By default, uses the base `DType`\n          of each input in `inputs`. Operations that expect reference-typed inputs\n          must specify `input_types` explicitly.\n        name: (Optional.) A string name for the operation. If not specified, a\n          name is generated based on `op_type`.\n        attrs: (Optional.) A dictionary where the key is the attribute name (a\n          string) and the value is the respective `attr` attribute of the\n          `NodeDef` proto that will represent the operation (an `AttrValue`\n          proto).\n        op_def: (Optional.) The `OpDef` proto that describes the `op_type` that\n          the operation will have.\n        compute_shapes: (Optional.) Deprecated. Has no effect (shapes are always\n          computed).\n        compute_device: (Optional.) If True, device functions will be executed to\n          compute the device property of the Operation.\n    \n      Raises:\n        TypeError: if any of the inputs is not a `Tensor`.\n        ValueError: if colocation conflicts with existing device assignment.\n    \n      Returns:\n        An `Operation` object.\n      \"\"\"\n      del compute_shapes\n    \n      self._check_not_finalized()\n      for idx, a in enumerate(inputs):\n        if not isinstance(a, Tensor):\n          raise TypeError(\"Input #%d is not a tensor: %s\" % (idx, a))\n      if name is None:\n        name = op_type\n      # If a names ends with a '/' it is a \"name scope\" and we use it as-is,\n      # after removing the trailing '/'.\n      if name and name[-1] == \"/\":\n        name = name_from_scope_name(name)\n      else:\n        name = self.unique_name(name)\n    \n      node_def = _NodeDef(op_type, name, device=None, attrs=attrs)\n    \n      input_ops = set([t.op for t in inputs])\n      control_inputs = self._control_dependencies_for_inputs(input_ops)\n      # _create_op_helper mutates the new Operation. `_mutation_lock` ensures a\n      # Session.run call cannot occur between creating and mutating the op.\n      with self._mutation_lock():\n        ret = Operation(\n            node_def,\n            self,\n            inputs=inputs,\n            output_types=dtypes,\n            control_inputs=control_inputs,\n            input_types=input_types,\n            original_op=self._default_original_op,\n>           op_def=op_def)\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/framework/ops.py:3616: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'Operation' object has no attribute '_c_op'\") raised in repr()] Operation object at 0x7f6834fe4cd0>\nnode_def = name: \"lambda_1_out/values_1\"\nop: \"Pack\"\nattr {\n  key: \"N\"\n  value {\n    i: 2\n  }\n}\nattr {\n  key: \"T\"\n  value {\n    type: DT_FLOAT\n  }\n}\nattr {\n  key: \"axis\"\n  value {\n    i: 0\n  }\n}\n\ng = <tensorflow.python.framework.ops.Graph object at 0x7f68465e4ed0>\ninputs = [<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>]\noutput_types = None, control_inputs = [], input_types = [tf.float32, tf.float32]\noriginal_op = None\nop_def = name: \"Pack\"\ninput_arg {\n  name: \"values\"\n  type_attr: \"T\"\n  number_attr: \"N\"\n}\noutput_arg {\n  name: \"output\"\n  type_a... minimum: 1\n}\nattr {\n  name: \"T\"\n  type: \"type\"\n}\nattr {\n  name: \"axis\"\n  type: \"int\"\n  default_value {\n    i: 0\n  }\n}\n\n\n    def __init__(self,\n                 node_def,\n                 g,\n                 inputs=None,\n                 output_types=None,\n                 control_inputs=None,\n                 input_types=None,\n                 original_op=None,\n                 op_def=None):\n      r\"\"\"Creates an `Operation`.\n    \n      NOTE: This constructor validates the name of the `Operation` (passed\n      as `node_def.name`). Valid `Operation` names match the following\n      regular expression:\n    \n          [A-Za-z0-9.][A-Za-z0-9_.\\\\-/]*\n    \n      Args:\n        node_def: `node_def_pb2.NodeDef`.  `NodeDef` for the `Operation`. Used for\n          attributes of `node_def_pb2.NodeDef`, typically `name`, `op`, and\n          `device`.  The `input` attribute is irrelevant here as it will be\n          computed when generating the model.\n        g: `Graph`. The parent graph.\n        inputs: list of `Tensor` objects. The inputs to this `Operation`.\n        output_types: list of `DType` objects.  List of the types of the `Tensors`\n          computed by this operation.  The length of this list indicates the\n          number of output endpoints of the `Operation`.\n        control_inputs: list of operations or tensors from which to have a control\n          dependency.\n        input_types: List of `DType` objects representing the types of the tensors\n          accepted by the `Operation`.  By default uses `[x.dtype.base_dtype for x\n          in inputs]`.  Operations that expect reference-typed inputs must specify\n          these explicitly.\n        original_op: Optional. Used to associate the new `Operation` with an\n          existing `Operation` (for example, a replica with the op that was\n          replicated).\n        op_def: Optional. The `op_def_pb2.OpDef` proto that describes the op type\n          that this `Operation` represents.\n    \n      Raises:\n        TypeError: if control inputs are not Operations or Tensors,\n          or if `node_def` is not a `NodeDef`,\n          or if `g` is not a `Graph`,\n          or if `inputs` are not tensors,\n          or if `inputs` and `input_types` are incompatible.\n        ValueError: if the `node_def` name is not valid.\n      \"\"\"\n      # For internal use only: `node_def` can be set to a TF_Operation to create\n      # an Operation for that op. This is useful for creating Operations for ops\n      # indirectly created by C API methods, e.g. the ops created by\n      # TF_ImportGraphDef. When `node_def` is a TF_Operation, all optional fields\n      # should be None.\n    \n      if isinstance(node_def, node_def_pb2.NodeDef):\n        if node_def.ByteSize() >= (1 << 31) or node_def.ByteSize() < 0:\n          raise ValueError(\n              \"Cannot create a tensor proto whose content is larger than 2GB.\")\n        if not _VALID_OP_NAME_REGEX.match(node_def.name):\n          raise ValueError(\"'%s' is not a valid node name\" % node_def.name)\n        c_op = None\n      elif type(node_def).__name__ == \"SwigPyObject\":\n        assert inputs is None\n        assert output_types is None\n        assert control_inputs is None\n        assert input_types is None\n        assert original_op is None\n        assert op_def is None\n        c_op = node_def\n      else:\n        raise TypeError(\"node_def needs to be a NodeDef: %s\" % node_def)\n    \n      if not isinstance(g, Graph):\n        raise TypeError(\"g needs to be a Graph: %s\" % g)\n      self._graph = g\n    \n      if inputs is None:\n        inputs = []\n      elif not isinstance(inputs, list):\n        raise TypeError(\"inputs needs to be a list of Tensors: %s\" % inputs)\n      for a in inputs:\n        if not isinstance(a, Tensor):\n          raise TypeError(\"input needs to be a Tensor: %s\" % a)\n      if input_types is None:\n        input_types = [i.dtype.base_dtype for i in inputs]\n      else:\n        if not all(\n            x.is_compatible_with(i.dtype) for i, x in zip(inputs, input_types)):\n          raise TypeError(\"In op '%s', input types (%s) are not compatible \"\n                          \"with expected types (%s)\" %\n                          (node_def.name, [i.dtype for i in inputs], input_types))\n    \n      # Build the list of control inputs.\n      control_input_ops = []\n      if control_inputs:\n        for c in control_inputs:\n          control_op = None\n          if isinstance(c, Operation):\n            control_op = c\n          elif isinstance(c, (Tensor, IndexedSlices)):\n            control_op = c.op\n          else:\n            raise TypeError(\"Control input must be an Operation, \"\n                            \"a Tensor, or IndexedSlices: %s\" % c)\n          control_input_ops.append(control_op)\n    \n      # This will be set by self.inputs.\n      self._inputs_val = None\n    \n      # pylint: disable=protected-access\n      self._id_value = self._graph._next_id()\n      self._original_op = original_op\n      self._traceback = tf_stack.extract_stack()\n    \n      # List of _UserDevSpecs holding code location of device context manager\n      # invocations and the users original argument to them.\n      self._device_code_locations = None\n      # Dict mapping op name to file and line information for op colocation\n      # context managers.\n      self._colocation_code_locations = None\n      self._control_flow_context = self.graph._get_control_flow_context()\n      # pylint: enable=protected-access\n    \n      # Initialize self._c_op.\n      if c_op:\n        self._c_op = c_op\n      else:\n        if op_def is None:\n          op_def = self._graph._get_op_def(node_def.op)\n        # TODO(skyewm): op_def_library.apply_op() flattens the incoming inputs.\n        # Refactor so we don't have to do this here.\n        grouped_inputs = self._reconstruct_sequence_inputs(\n            op_def, inputs, node_def.attr)\n        self._c_op = _create_c_op(self._graph, node_def, grouped_inputs,\n>                                 control_input_ops)\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/framework/ops.py:2027: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = <tensorflow.python.framework.ops.Graph object at 0x7f68465e4ed0>\nnode_def = name: \"lambda_1_out/values_1\"\nop: \"Pack\"\nattr {\n  key: \"N\"\n  value {\n    i: 2\n  }\n}\nattr {\n  key: \"T\"\n  value {\n    type: DT_FLOAT\n  }\n}\nattr {\n  key: \"axis\"\n  value {\n    i: 0\n  }\n}\n\ninputs = [[<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>]]\ncontrol_inputs = []\n\n    def _create_c_op(graph, node_def, inputs, control_inputs):\n      \"\"\"Creates a TF_Operation.\n    \n      Args:\n        graph: a `Graph`.\n        node_def: `node_def_pb2.NodeDef` for the operation to create.\n        inputs: A list of `Tensor`s (corresponding to scalar inputs) and lists of\n          `Tensor`s (corresponding to sequence inputs, e.g. \"int64 * N\",\n          \"list(int64)\"). The length of the list should be equal to the number of\n          inputs specified by this operation's op def.\n        control_inputs: A list of `Operation`s to set as control dependencies.\n    \n      Returns:\n        A wrapped TF_Operation*.\n      \"\"\"\n      # pylint: disable=protected-access\n      op_desc = c_api.TF_NewOperation(graph._c_graph, compat.as_str(node_def.op),\n                                      compat.as_str(node_def.name))\n      if node_def.device:\n        c_api.TF_SetDevice(op_desc, compat.as_str(node_def.device))\n      # Add inputs\n      for op_input in inputs:\n        if isinstance(op_input, (list, tuple)):\n          c_api.TF_AddInputList(op_desc, [t._as_tf_output() for t in op_input])\n        else:\n          c_api.TF_AddInput(op_desc, op_input._as_tf_output())\n    \n      # Add control inputs\n      for control_input in control_inputs:\n        c_api.TF_AddControlInput(op_desc, control_input._c_op)\n      # pylint: enable=protected-access\n    \n      # Add attrs\n      for name, attr_value in node_def.attr.items():\n        serialized = attr_value.SerializeToString()\n        # TODO(skyewm): this creates and deletes a new TF_Status for every attr.\n        # It might be worth creating a convenient way to re-use the same status.\n        c_api.TF_SetAttrValueProto(op_desc, compat.as_str(name), serialized)\n    \n      try:\n        c_op = c_api.TF_FinishOperation(op_desc)\n      except errors.InvalidArgumentError as e:\n        # Convert to ValueError for backwards compatibility.\n>       raise ValueError(str(e))\nE       ValueError: Shapes must be equal rank, but are 3 and 2\nE       \tFrom merging shape 0 with other shapes. for 'lambda_1_out/values_1' (op: 'Pack') with input shapes: [?,2,2], [?,2].\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/framework/ops.py:1867: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\ngraph = <tensorflow.python.framework.ops.Graph object at 0x7f68465e4ed0>\nnode_def = name: \"lambda_1_out/packed\"\nop: \"Pack\"\nattr {\n  key: \"N\"\n  value {\n    i: 2\n  }\n}\nattr {\n  key: \"T\"\n  value {\n    type: DT_FLOAT\n  }\n}\nattr {\n  key: \"axis\"\n  value {\n    i: 0\n  }\n}\n\ninputs = [[<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>]]\ncontrol_inputs = []\n\n    def _create_c_op(graph, node_def, inputs, control_inputs):\n      \"\"\"Creates a TF_Operation.\n    \n      Args:\n        graph: a `Graph`.\n        node_def: `node_def_pb2.NodeDef` for the operation to create.\n        inputs: A list of `Tensor`s (corresponding to scalar inputs) and lists of\n          `Tensor`s (corresponding to sequence inputs, e.g. \"int64 * N\",\n          \"list(int64)\"). The length of the list should be equal to the number of\n          inputs specified by this operation's op def.\n        control_inputs: A list of `Operation`s to set as control dependencies.\n    \n      Returns:\n        A wrapped TF_Operation*.\n      \"\"\"\n      # pylint: disable=protected-access\n      op_desc = c_api.TF_NewOperation(graph._c_graph, compat.as_str(node_def.op),\n                                      compat.as_str(node_def.name))\n      if node_def.device:\n        c_api.TF_SetDevice(op_desc, compat.as_str(node_def.device))\n      # Add inputs\n      for op_input in inputs:\n        if isinstance(op_input, (list, tuple)):\n          c_api.TF_AddInputList(op_desc, [t._as_tf_output() for t in op_input])\n        else:\n          c_api.TF_AddInput(op_desc, op_input._as_tf_output())\n    \n      # Add control inputs\n      for control_input in control_inputs:\n        c_api.TF_AddControlInput(op_desc, control_input._c_op)\n      # pylint: enable=protected-access\n    \n      # Add attrs\n      for name, attr_value in node_def.attr.items():\n        serialized = attr_value.SerializeToString()\n        # TODO(skyewm): this creates and deletes a new TF_Status for every attr.\n        # It might be worth creating a convenient way to re-use the same status.\n        c_api.TF_SetAttrValueProto(op_desc, compat.as_str(name), serialized)\n    \n      try:\n>       c_op = c_api.TF_FinishOperation(op_desc)\nE       tensorflow.python.framework.errors_impl.InvalidArgumentError: Shapes must be equal rank, but are 3 and 2\nE       \tFrom merging shape 0 with other shapes. for 'lambda_1_out/packed' (op: 'Pack') with input shapes: [?,2,2], [?,2].\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/framework/ops.py:1864: InvalidArgumentError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tensorflow.python.framework.op_def_library.OpDefLibrary object at 0x7f684bdfde50>\nop_type_name = 'HistogramSummary', name = 'lambda_1_out/', keywords = {}\nop_info = <tensorflow.python.framework.op_def_library._OpInfo object at 0x7f684bd873d0>\nop_def = name: \"HistogramSummary\"\ninput_arg {\n  name: \"tag\"\n  type: DT_STRING\n}\ninput_arg {\n  name: \"values\"\n  type_attr: \"T\"\n}...   type: DT_BFLOAT16\n      type: DT_UINT16\n      type: DT_HALF\n      type: DT_UINT32\n      type: DT_UINT64\n    }\n  }\n}\n\ng = <tensorflow.python.framework.ops.Graph object at 0x7f68465e4ed0>\ndeprecation_version = 0, default_type_attr_map = {'T': tf.float32}\n\n    def _apply_op_helper(self, op_type_name, name=None, **keywords):\n      \"\"\"Implementation of apply_op that returns output_structure, op.\"\"\"\n      op_info = self._ops.get(op_type_name, None)\n      if op_info is None:\n        raise RuntimeError(\"Unrecognized Op name \" + op_type_name)\n      op_def = op_info.op_def\n    \n      # Determine the graph context.\n      try:\n        # Need to flatten all the arguments into a list.\n        # pylint: disable=protected-access\n        g = ops._get_graph_from_inputs(_Flatten(keywords.values()))\n        # pylint: enable=protected-access\n      except AssertionError as e:\n        raise RuntimeError(\n            \"Cannot determine graph for Op '%s' due to: %s\"\n            % (op_type_name, e.message))\n    \n      # Default name if not specified.\n      if name is None:\n        name = op_type_name\n    \n      # Check for deprecation\n      deprecation_version = op_def.deprecation.version\n      if deprecation_version:\n        producer = g.graph_def_versions.producer\n        if producer >= deprecation_version:\n          raise NotImplementedError(\n              (\"Op %s is not available in GraphDef version %d. \"\n               \"It has been removed in version %d. %s.\") %\n              (op_type_name, producer, deprecation_version,\n               op_def.deprecation.explanation))\n    \n      # Fill in the list of default types for all \"type\" attrs.  This\n      # will be used to choose a preferred dtype to convert to in the\n      # absence of input type information.\n      #\n      # TODO(b/31302892): Currently the defaults don't work in the right\n      # way if you have two inputs, one of whose type resolution depends\n      # on the other.  Handling this will require restructuring this code\n      # significantly.\n      default_type_attr_map = {}\n      for attr_def in op_def.attr:\n        if attr_def.type != \"type\":\n          continue\n        key = attr_def.name\n        if attr_def.HasField(\"default_value\"):\n          default_type_attr_map[key] = dtypes.as_dtype(\n              attr_def.default_value.type)\n    \n      # Requires that op_def has passed validation (using the C++\n      # ValidateOpDef() from ../framework/op_def_util.h).\n      attrs = {}\n      inputs = []\n      input_types = []\n      with g.as_default(), ops.name_scope(name) as scope:\n    \n        # Perform input type inference\n        inferred_from = {}\n        for input_arg in op_def.input_arg:\n          input_name = input_arg.name\n          if input_name in keywords:\n            values = keywords.pop(input_name)\n          elif input_name + \"_\" in keywords:\n            # Handle the case where the name is a keyword or built-in\n            # for Python so we use the name + _ instead.\n            input_name += \"_\"\n            values = keywords.pop(input_name)\n          else:\n            raise TypeError(\"No argument for input \" + input_name)\n    \n          # Goals:\n          # * Convert values to Tensors if it contains constants.\n          # * Verify that values is a list if that matches the input_arg's\n          #   type.\n          # * If the input_arg's type is determined by attrs, either set\n          #   those attrs and validate those attr values are legal (if\n          #   they have not yet been set) or validate the input matches\n          #   the type indicated by the attrs (if they have already been\n          #   inferred via an earlier input).\n          # * If the input_arg has an explicit type, make sure the input\n          #   conforms.\n    \n          if _IsListParameter(input_arg):\n            if not _IsListValue(values):\n              raise TypeError(\n                  \"Expected list for '%s' argument to '%s' Op, not %s.\" %\n                  (input_name, op_type_name, values))\n            # In cases where we expect all elements of the list to have the\n            # same dtype, try to cast non-Tensor elements to that type.\n            dtype = None\n            default_dtype = None\n            if input_arg.type != types_pb2.DT_INVALID:\n              dtype = input_arg.type\n            elif input_arg.number_attr:\n              if input_arg.type_attr in attrs:\n                dtype = attrs[input_arg.type_attr]\n              else:\n                for t in values:\n                  if isinstance(t, ops.Tensor):\n                    dtype = t.dtype\n                    break\n    \n              # dtype still not found, prefer using the default dtype\n              # from the attr.\n              if dtype is None and input_arg.type_attr in default_type_attr_map:\n                default_dtype = default_type_attr_map[input_arg.type_attr]\n    \n            try:\n              if not input_arg.is_ref and dtype:\n                dtype = dtypes.as_dtype(dtype).base_dtype\n              values = ops.internal_convert_n_to_tensor(\n                  values,\n                  name=input_arg.name,\n                  dtype=dtype if dtype else None,\n                  preferred_dtype=default_dtype,\n                  as_ref=input_arg.is_ref)\n              if input_arg.number_attr and len(\n                  set(v.dtype.base_dtype for v in values)) > 1:\n                raise TypeError()  # All types should match.\n            except (TypeError, ValueError):\n              # What types does the conversion function think values have?\n              observed_types = []\n              for value in values:\n                try:\n                  converted_value = ops.internal_convert_to_tensor(\n                      value, as_ref=input_arg.is_ref)\n                  observed_types.append(converted_value.dtype.base_dtype.name)\n                except (TypeError, ValueError):\n                  observed_types.append(\"<NOT CONVERTIBLE TO TENSOR>\")\n              observed = \", \".join(observed_types)\n    \n              prefix = (\n                  \"Tensors in list passed to '%s' of '%s' Op have types [%s]\" %\n                  (input_name, op_type_name, observed))\n              if input_arg.number_attr:\n                if input_arg.type != types_pb2.DT_INVALID:\n                  raise TypeError(\"%s that do not match expected type %s.\" %\n                                  (prefix, dtype.name))\n                elif input_arg.type_attr in attrs:\n                  raise TypeError(\"%s that do not match type %s inferred from \"\n                                  \"earlier arguments.\" %\n                                  (prefix, dtype.name))\n                else:\n                  raise TypeError(\"%s that don't all match.\" % prefix)\n              else:\n                raise TypeError(\n                    \"%s that are invalid. Tensors: %s\" % (prefix, values))\n    \n            types = [x.dtype for x in values]\n            inputs.extend(values)\n          else:\n            # In cases where we have an expected type, try to convert non-Tensor\n            # arguments to that type.\n            dtype = None\n            default_dtype = None\n            if input_arg.type != types_pb2.DT_INVALID:\n              dtype = input_arg.type\n            elif input_arg.type_attr in attrs:\n              dtype = attrs[input_arg.type_attr]\n            elif input_arg.type_attr in default_type_attr_map:\n              # The dtype could not be inferred solely from the inputs,\n              # so we prefer the attr's default, so code that adds a new attr\n              # with a default is backwards compatible.\n              default_dtype = default_type_attr_map[input_arg.type_attr]\n    \n            try:\n              values = ops.internal_convert_to_tensor(\n                  values,\n                  name=input_arg.name,\n                  dtype=dtype,\n                  as_ref=input_arg.is_ref,\n                  preferred_dtype=default_dtype)\n            except TypeError as err:\n              if dtype is None:\n                raise err\n              else:\n                raise TypeError(\n                    \"Expected %s passed to parameter '%s' of op '%s', got %s of \"\n                    \"type '%s' instead. Error: %s\" %\n                    (dtypes.as_dtype(dtype).name, input_arg.name, op_type_name,\n                     repr(values), type(values).__name__, err))\n            except ValueError:\n              # What type does convert_to_tensor think it has?\n              try:\n                observed = ops.internal_convert_to_tensor(\n>                   values, as_ref=input_arg.is_ref).dtype.name\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/framework/op_def_library.py:541: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalue = [<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>]\ndtype = None, name = None, as_ref = False, preferred_dtype = None\nctx = <tensorflow.python.eager.context.Context object at 0x7f6845c7bfd0>\naccept_symbolic_tensors = True, accept_composite_tensors = False\n\n    def internal_convert_to_tensor(value,\n                                   dtype=None,\n                                   name=None,\n                                   as_ref=False,\n                                   preferred_dtype=None,\n                                   ctx=None,\n                                   accept_symbolic_tensors=True,\n                                   accept_composite_tensors=False):\n      \"\"\"Implementation of the public convert_to_tensor.\"\"\"\n      if ctx is None:\n        ctx = context.context()\n      if isinstance(value, EagerTensor):\n        if ctx.executing_eagerly():\n          if dtype is not None:\n            dtype = dtypes.as_dtype(dtype)\n            value = _TensorTensorConversionFunction(value, dtype=dtype)\n          return value\n        else:\n          graph = get_default_graph()\n          if not graph.building_function:\n            raise RuntimeError(\"Attempting to capture an EagerTensor without \"\n                               \"building a function.\")\n          return graph.capture(value, name=name)\n      elif ((not accept_symbolic_tensors) and isinstance(value, Tensor) and\n            ctx.executing_eagerly()):\n        # Found a symbolic tensor in an eager context.\n        # This happens when we use the Keras functional API (i.e. calling layers\n        # on the output of `keras.Input()`, which is symbolic) while eager\n        # execution is enabled.\n        if _is_keras_symbolic_tensor(value):\n          # If the graph of the tensor isn't the Keras graph, we should still\n          # fail, for the time being. TODO(fchollet): consider allowing\n          # all symbolic tensors to raise this exception in this case.\n          raise core._SymbolicException(  # pylint: disable=protected-access\n              \"Using the symbolic output of a Keras layer during eager execution.\")\n    \n      if dtype is not None:\n        dtype = dtypes.as_dtype(dtype)\n      unwrapped_type = type(value)\n      conversion_func_list = _tensor_conversion_func_cache.get(unwrapped_type, None)\n      if conversion_func_list is None:\n        with _tensor_conversion_func_lock:\n          conversion_func_list = []\n          for _, funcs_at_priority in sorted(\n              _tensor_conversion_func_registry.items()):\n            for base_type, conversion_func in funcs_at_priority:\n              if isinstance(value, base_type):\n                conversion_func_list.append((base_type, conversion_func))\n          _tensor_conversion_func_cache[unwrapped_type] = conversion_func_list\n    \n      for base_type, conversion_func in conversion_func_list:\n        # If dtype is None but preferred_dtype is not None, we try to\n        # cast to preferred_dtype first.\n        ret = None\n        if dtype is None and preferred_dtype is not None:\n          try:\n            ret = conversion_func(\n                value, dtype=preferred_dtype, name=name, as_ref=as_ref)\n          except (TypeError, ValueError, errors.UnimplementedError,\n                  errors.InvalidArgumentError):\n            # Could not coerce the conversion to use the preferred dtype.\n            ret = None\n    \n          if ret is not None and ret is not NotImplemented:\n            if (ret.dtype.base_dtype !=\n                dtypes.as_dtype(preferred_dtype).base_dtype):\n              raise TypeError(\"convert_to_tensor did not convert to \"\n                              \"the preferred dtype: %s vs %s \" %\n                              (ret.dtype.base_dtype,\n                               dtypes.as_dtype(preferred_dtype).base_dtype))\n    \n        if ret is None:\n>         ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/framework/ops.py:1224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nv = [<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>]\ndtype = tf.float32, name = None, as_ref = False\n\n    def _autopacking_conversion_function(v, dtype=None, name=None, as_ref=False):\n      \"\"\"Tensor conversion function that automatically packs arguments.\"\"\"\n      if as_ref:\n        return NotImplemented\n      inferred_dtype = _get_dtype_from_nested_lists(v)\n      if inferred_dtype is None:\n        # We did not find any tensor-like objects in the nested lists, so defer to\n        # other conversion functions.\n        return NotImplemented\n      if dtype is None:\n        dtype = inferred_dtype\n      elif dtype != inferred_dtype:\n        v = nest.map_structure(_cast_nested_seqs_to_dtype(dtype), v)\n>     return _autopacking_helper(v, dtype, name or \"packed\")\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/ops/array_ops.py:1145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlist_or_tuple = [<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>]\ndtype = tf.float32, name = 'packed'\n\n    def _autopacking_helper(list_or_tuple, dtype, name):\n      \"\"\"Converts the given list or tuple to a tensor by packing.\n    \n      Args:\n        list_or_tuple: A (possibly nested) list or tuple containing a tensor.\n        dtype: The element type of the returned tensor.\n        name: A name for the returned tensor.\n    \n      Returns:\n        A `tf.Tensor` with value equivalent to `list_or_tuple`.\n      \"\"\"\n      if context.executing_eagerly():\n        # NOTE: Fast path when all the items are tensors, this doesn't do any type\n        # checking.\n        if all(ops.is_dense_tensor_like(elem) for elem in list_or_tuple):\n          return gen_array_ops.pack(list_or_tuple, name=name)\n      must_pack = False\n      converted_elems = []\n      with ops.name_scope(name) as scope:\n        for i, elem in enumerate(list_or_tuple):\n          if ops.is_dense_tensor_like(elem):\n            if dtype is not None and elem.dtype.base_dtype != dtype:\n              raise TypeError(\"Cannot convert a list containing a tensor of dtype \"\n                              \"%s to %s (Tensor is: %r)\" %\n                              (elem.dtype, dtype, elem))\n            converted_elems.append(elem)\n            must_pack = True\n          elif isinstance(elem, (list, tuple)):\n            converted_elem = _autopacking_helper(elem, dtype, str(i))\n            if ops.is_dense_tensor_like(converted_elem):\n              must_pack = True\n            converted_elems.append(converted_elem)\n          else:\n            converted_elems.append(elem)\n        if must_pack:\n          elems_as_tensors = []\n          for i, elem in enumerate(converted_elems):\n            if ops.is_dense_tensor_like(elem):\n              elems_as_tensors.append(elem)\n            else:\n              # NOTE(mrry): This is inefficient, but it enables us to\n              # handle the case where the list arguments are other\n              # convertible-to-tensor types, such as numpy arrays.\n              elems_as_tensors.append(\n                  constant_op.constant(elem, dtype=dtype, name=str(i)))\n>         return gen_array_ops.pack(elems_as_tensors, name=scope)\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/ops/array_ops.py:1095: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalues = [<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>]\naxis = 0, name = 'lambda_1_out/packed/'\n\n    def pack(values, axis=0, name=None):\n      r\"\"\"Packs a list of `N` rank-`R` tensors into one rank-`(R+1)` tensor.\n    \n      Packs the `N` tensors in `values` into a tensor with rank one higher than each\n      tensor in `values`, by packing them along the `axis` dimension.\n      Given a list of tensors of shape `(A, B, C)`;\n    \n      if `axis == 0` then the `output` tensor will have the shape `(N, A, B, C)`.\n      if `axis == 1` then the `output` tensor will have the shape `(A, N, B, C)`.\n      Etc.\n    \n      For example:\n    \n      ```\n      # 'x' is [1, 4]\n      # 'y' is [2, 5]\n      # 'z' is [3, 6]\n      pack([x, y, z]) => [[1, 4], [2, 5], [3, 6]]  # Pack along first dim.\n      pack([x, y, z], axis=1) => [[1, 2, 3], [4, 5, 6]]\n      ```\n    \n      This is the opposite of `unpack`.\n    \n      Args:\n        values: A list of at least 1 `Tensor` objects with the same type.\n          Must be of same shape and type.\n        axis: An optional `int`. Defaults to `0`.\n          Dimension along which to pack.  Negative values wrap around, so the\n          valid range is `[-(R+1), R+1)`.\n        name: A name for the operation (optional).\n    \n      Returns:\n        A `Tensor`. Has the same type as `values`.\n      \"\"\"\n      _ctx = _context._context or _context.context()\n      if _ctx is not None and _ctx._thread_local_data.is_eager:\n        try:\n          _result = _pywrap_tensorflow.TFE_Py_FastPathExecute(\n            _ctx._context_handle, _ctx._thread_local_data.device_name, \"Pack\",\n            name, _ctx._post_execution_callbacks, values, \"axis\", axis)\n          return _result\n        except _core._FallbackException:\n          try:\n            return pack_eager_fallback(\n                values, axis=axis, name=name, ctx=_ctx)\n          except _core._SymbolicException:\n            pass  # Add nodes to the TensorFlow graph.\n        except _core._NotOkStatusException as e:\n          if name is not None:\n            message = e.message + \" name: \" + name\n          else:\n            message = e.message\n          _six.raise_from(_core._status_to_exception(e.code, message), None)\n      # Add nodes to the TensorFlow graph.\n      if not isinstance(values, (list, tuple)):\n        raise TypeError(\n            \"Expected list for 'values' argument to \"\n            \"'pack' Op, not %r.\" % values)\n      _attr_N = len(values)\n      if axis is None:\n        axis = 0\n      axis = _execute.make_int(axis, \"axis\")\n      _, _, _op = _op_def_lib._apply_op_helper(\n>           \"Pack\", values=values, axis=axis, name=name)\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/ops/gen_array_ops.py:5897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tensorflow.python.framework.op_def_library.OpDefLibrary object at 0x7f684c8880d0>\nop_type_name = 'Pack', name = 'lambda_1_out/packed/', keywords = {}\nop_info = <tensorflow.python.framework.op_def_library._OpInfo object at 0x7f684c88ee90>\nop_def = name: \"Pack\"\ninput_arg {\n  name: \"values\"\n  type_attr: \"T\"\n  number_attr: \"N\"\n}\noutput_arg {\n  name: \"output\"\n  type_a... minimum: 1\n}\nattr {\n  name: \"T\"\n  type: \"type\"\n}\nattr {\n  name: \"axis\"\n  type: \"int\"\n  default_value {\n    i: 0\n  }\n}\n\ng = <tensorflow.python.framework.ops.Graph object at 0x7f68465e4ed0>\ndeprecation_version = 0, default_type_attr_map = {}\n\n    def _apply_op_helper(self, op_type_name, name=None, **keywords):\n      \"\"\"Implementation of apply_op that returns output_structure, op.\"\"\"\n      op_info = self._ops.get(op_type_name, None)\n      if op_info is None:\n        raise RuntimeError(\"Unrecognized Op name \" + op_type_name)\n      op_def = op_info.op_def\n    \n      # Determine the graph context.\n      try:\n        # Need to flatten all the arguments into a list.\n        # pylint: disable=protected-access\n        g = ops._get_graph_from_inputs(_Flatten(keywords.values()))\n        # pylint: enable=protected-access\n      except AssertionError as e:\n        raise RuntimeError(\n            \"Cannot determine graph for Op '%s' due to: %s\"\n            % (op_type_name, e.message))\n    \n      # Default name if not specified.\n      if name is None:\n        name = op_type_name\n    \n      # Check for deprecation\n      deprecation_version = op_def.deprecation.version\n      if deprecation_version:\n        producer = g.graph_def_versions.producer\n        if producer >= deprecation_version:\n          raise NotImplementedError(\n              (\"Op %s is not available in GraphDef version %d. \"\n               \"It has been removed in version %d. %s.\") %\n              (op_type_name, producer, deprecation_version,\n               op_def.deprecation.explanation))\n    \n      # Fill in the list of default types for all \"type\" attrs.  This\n      # will be used to choose a preferred dtype to convert to in the\n      # absence of input type information.\n      #\n      # TODO(b/31302892): Currently the defaults don't work in the right\n      # way if you have two inputs, one of whose type resolution depends\n      # on the other.  Handling this will require restructuring this code\n      # significantly.\n      default_type_attr_map = {}\n      for attr_def in op_def.attr:\n        if attr_def.type != \"type\":\n          continue\n        key = attr_def.name\n        if attr_def.HasField(\"default_value\"):\n          default_type_attr_map[key] = dtypes.as_dtype(\n              attr_def.default_value.type)\n    \n      # Requires that op_def has passed validation (using the C++\n      # ValidateOpDef() from ../framework/op_def_util.h).\n      attrs = {}\n      inputs = []\n      input_types = []\n      with g.as_default(), ops.name_scope(name) as scope:\n    \n        # Perform input type inference\n        inferred_from = {}\n        for input_arg in op_def.input_arg:\n          input_name = input_arg.name\n          if input_name in keywords:\n            values = keywords.pop(input_name)\n          elif input_name + \"_\" in keywords:\n            # Handle the case where the name is a keyword or built-in\n            # for Python so we use the name + _ instead.\n            input_name += \"_\"\n            values = keywords.pop(input_name)\n          else:\n            raise TypeError(\"No argument for input \" + input_name)\n    \n          # Goals:\n          # * Convert values to Tensors if it contains constants.\n          # * Verify that values is a list if that matches the input_arg's\n          #   type.\n          # * If the input_arg's type is determined by attrs, either set\n          #   those attrs and validate those attr values are legal (if\n          #   they have not yet been set) or validate the input matches\n          #   the type indicated by the attrs (if they have already been\n          #   inferred via an earlier input).\n          # * If the input_arg has an explicit type, make sure the input\n          #   conforms.\n    \n          if _IsListParameter(input_arg):\n            if not _IsListValue(values):\n              raise TypeError(\n                  \"Expected list for '%s' argument to '%s' Op, not %s.\" %\n                  (input_name, op_type_name, values))\n            # In cases where we expect all elements of the list to have the\n            # same dtype, try to cast non-Tensor elements to that type.\n            dtype = None\n            default_dtype = None\n            if input_arg.type != types_pb2.DT_INVALID:\n              dtype = input_arg.type\n            elif input_arg.number_attr:\n              if input_arg.type_attr in attrs:\n                dtype = attrs[input_arg.type_attr]\n              else:\n                for t in values:\n                  if isinstance(t, ops.Tensor):\n                    dtype = t.dtype\n                    break\n    \n              # dtype still not found, prefer using the default dtype\n              # from the attr.\n              if dtype is None and input_arg.type_attr in default_type_attr_map:\n                default_dtype = default_type_attr_map[input_arg.type_attr]\n    \n            try:\n              if not input_arg.is_ref and dtype:\n                dtype = dtypes.as_dtype(dtype).base_dtype\n              values = ops.internal_convert_n_to_tensor(\n                  values,\n                  name=input_arg.name,\n                  dtype=dtype if dtype else None,\n                  preferred_dtype=default_dtype,\n                  as_ref=input_arg.is_ref)\n              if input_arg.number_attr and len(\n                  set(v.dtype.base_dtype for v in values)) > 1:\n                raise TypeError()  # All types should match.\n            except (TypeError, ValueError):\n              # What types does the conversion function think values have?\n              observed_types = []\n              for value in values:\n                try:\n                  converted_value = ops.internal_convert_to_tensor(\n                      value, as_ref=input_arg.is_ref)\n                  observed_types.append(converted_value.dtype.base_dtype.name)\n                except (TypeError, ValueError):\n                  observed_types.append(\"<NOT CONVERTIBLE TO TENSOR>\")\n              observed = \", \".join(observed_types)\n    \n              prefix = (\n                  \"Tensors in list passed to '%s' of '%s' Op have types [%s]\" %\n                  (input_name, op_type_name, observed))\n              if input_arg.number_attr:\n                if input_arg.type != types_pb2.DT_INVALID:\n                  raise TypeError(\"%s that do not match expected type %s.\" %\n                                  (prefix, dtype.name))\n                elif input_arg.type_attr in attrs:\n                  raise TypeError(\"%s that do not match type %s inferred from \"\n                                  \"earlier arguments.\" %\n                                  (prefix, dtype.name))\n                else:\n                  raise TypeError(\"%s that don't all match.\" % prefix)\n              else:\n                raise TypeError(\n                    \"%s that are invalid. Tensors: %s\" % (prefix, values))\n    \n            types = [x.dtype for x in values]\n            inputs.extend(values)\n          else:\n            # In cases where we have an expected type, try to convert non-Tensor\n            # arguments to that type.\n            dtype = None\n            default_dtype = None\n            if input_arg.type != types_pb2.DT_INVALID:\n              dtype = input_arg.type\n            elif input_arg.type_attr in attrs:\n              dtype = attrs[input_arg.type_attr]\n            elif input_arg.type_attr in default_type_attr_map:\n              # The dtype could not be inferred solely from the inputs,\n              # so we prefer the attr's default, so code that adds a new attr\n              # with a default is backwards compatible.\n              default_dtype = default_type_attr_map[input_arg.type_attr]\n    \n            try:\n              values = ops.internal_convert_to_tensor(\n                  values,\n                  name=input_arg.name,\n                  dtype=dtype,\n                  as_ref=input_arg.is_ref,\n                  preferred_dtype=default_dtype)\n            except TypeError as err:\n              if dtype is None:\n                raise err\n              else:\n                raise TypeError(\n                    \"Expected %s passed to parameter '%s' of op '%s', got %s of \"\n                    \"type '%s' instead. Error: %s\" %\n                    (dtypes.as_dtype(dtype).name, input_arg.name, op_type_name,\n                     repr(values), type(values).__name__, err))\n            except ValueError:\n              # What type does convert_to_tensor think it has?\n              try:\n                observed = ops.internal_convert_to_tensor(\n                    values, as_ref=input_arg.is_ref).dtype.name\n              except ValueError as err:\n                raise ValueError(\n                    \"Tried to convert '%s' to a tensor and failed. Error: %s\" %\n                    (input_name, err))\n              prefix = (\"Input '%s' of '%s' Op has type %s that does not match\" %\n                        (input_name, op_type_name, observed))\n              if input_arg.type != types_pb2.DT_INVALID:\n                raise TypeError(\"%s expected type of %s.\" %\n                                (prefix, dtypes.as_dtype(input_arg.type).name))\n              else:\n                # Update the maps with the default, if needed.\n                k = input_arg.type_attr\n                if k in default_type_attr_map:\n                  if k not in attrs:\n                    attrs[k] = default_type_attr_map[k]\n                    if k not in inferred_from:\n                      inferred_from[k] = \"Default in OpDef\"\n    \n                raise TypeError(\n                    \"%s type %s of argument '%s'.\" %\n                    (prefix, dtypes.as_dtype(attrs[input_arg.type_attr]).name,\n                     inferred_from[input_arg.type_attr]))\n    \n            types = [values.dtype]\n            inputs.append(values)\n          base_types = [x.base_dtype for x in types]\n    \n          if input_arg.number_attr:\n            # <number-attr> * <type> or <number-attr> * <type-attr>\n            if input_arg.number_attr in attrs:\n              if len(values) != attrs[input_arg.number_attr]:\n                raise ValueError(\n                    \"List argument '%s' to '%s' Op with length %d must match \"\n                    \"length %d of argument '%s'.\" %\n                    (input_name, op_type_name, len(values),\n                     attrs[input_arg.number_attr],\n                     inferred_from[input_arg.number_attr]))\n            else:\n              attrs[input_arg.number_attr] = len(values)\n              inferred_from[input_arg.number_attr] = input_name\n              num_attr = _Attr(op_def, input_arg.number_attr)\n              if num_attr.has_minimum and len(values) < num_attr.minimum:\n                raise ValueError(\n                    \"List argument '%s' to '%s' Op with length %d shorter \"\n                    \"than minimum length %d.\" %\n                    (input_name, op_type_name, len(values), num_attr.minimum))\n            # All tensors must have the same base type.\n            if any(bt != base_types[0] for bt in base_types):\n              raise TypeError(\n                  \"All tensors passed to '%s' of '%s' Op \"\n                  \"must have the same type.\" %\n                  (input_name, op_type_name))\n            if input_arg.type != types_pb2.DT_INVALID:\n              # <number-attr> * <type> case\n              if base_types and base_types[0] != input_arg.type:\n                assert False, \"Unreachable\"\n            elif input_arg.type_attr in attrs:\n              # <number-attr> * <type-attr> case, where <type-attr> already\n              # has an inferred value.\n              if base_types and base_types[0] != attrs[input_arg.type_attr]:\n                assert False, \"Unreachable\"\n            else:\n              # <number-attr> * <type-attr> case, where we are now setting\n              # the <type-attr> based on this input\n              if not base_types:\n                raise TypeError(\n                    \"Don't know how to infer type variable from empty input \"\n                    \"list passed to input '%s' of '%s' Op.\" %\n                    (input_name, op_type_name))\n              attrs[input_arg.type_attr] = base_types[0]\n              inferred_from[input_arg.type_attr] = input_name\n              type_attr = _Attr(op_def, input_arg.type_attr)\n              _SatisfiesTypeConstraint(base_types[0], type_attr,\n                                       param_name=input_name)\n          elif input_arg.type_attr:\n            # <type-attr>\n            attr_value = base_types[0]\n            if input_arg.type_attr in attrs:\n              if attrs[input_arg.type_attr] != attr_value:\n                assert False, \"Unreachable\"\n            else:\n              for base_type in base_types:\n                _SatisfiesTypeConstraint(base_type,\n                                         _Attr(op_def, input_arg.type_attr),\n                                         param_name=input_name)\n              attrs[input_arg.type_attr] = attr_value\n              inferred_from[input_arg.type_attr] = input_name\n          elif input_arg.type_list_attr:\n            # <type-list-attr>\n            attr_value = base_types\n            if input_arg.type_list_attr in attrs:\n              if attrs[input_arg.type_list_attr] != attr_value:\n                raise TypeError(\n                    \"Input '%s' of '%s' Op has type list of %s that does not \"\n                    \"match type list %s of argument '%s'.\" %\n                    (input_name, op_type_name,\n                     \", \".join(dtypes.as_dtype(x).name for x in attr_value),\n                     \", \".join(dtypes.as_dtype(x).name\n                               for x in attrs[input_arg.type_list_attr]),\n                     inferred_from[input_arg.type_list_attr]))\n            else:\n              for base_type in base_types:\n                _SatisfiesTypeConstraint(base_type,\n                                         _Attr(op_def, input_arg.type_list_attr),\n                                         param_name=input_name)\n              attrs[input_arg.type_list_attr] = attr_value\n              inferred_from[input_arg.type_list_attr] = input_name\n          else:\n            # single Tensor with specified type\n            if base_types[0] != input_arg.type:\n              assert False, \"Unreachable\"\n    \n          if input_arg.is_ref:\n            if not all(x._is_ref_dtype for x in types):  # pylint: disable=protected-access\n              raise TypeError(\n                  (\"'%s' Op requires that input '%s' be a mutable tensor \"\n                   \"(e.g.: a tf.Variable)\") % (op_type_name, input_name))\n            input_types.extend(types)\n          else:\n            input_types.extend(base_types)\n    \n        # Process remaining attrs\n        for attr in op_def.attr:\n          # Skip attrs that have already had their values inferred\n          if attr.name in attrs:\n            if attr.name in keywords:\n              raise TypeError(\n                  \"Should not specify value for inferred attr '%s'.\" % attr.name)\n            continue\n          if attr.name in keywords:\n            attrs[attr.name] = keywords.pop(attr.name)\n          elif attr.name + \"_\" in keywords:\n            # Attrs whose names match Python keywords have an extra '_'\n            # appended, so we must check for that as well.\n            attrs[attr.name] = keywords.pop(attr.name + \"_\")\n          else:\n            raise TypeError(\"No argument for attr \" + attr.name)\n    \n        # Convert attr values to AttrValue protos.\n        attr_protos = {}\n        for attr_def in op_def.attr:\n          key = attr_def.name\n          value = attrs[key]\n          attr_value = attr_value_pb2.AttrValue()\n          if attr_def.HasField(\"default_value\") and value is None:\n            attr_value.CopyFrom(attr_def.default_value)\n            attr_protos[key] = attr_value\n            continue\n          if attr_def.type.startswith(\"list(\"):\n            if not _IsListValue(value):\n              raise TypeError(\"Expected list for attr \" + key)\n            if attr_def.has_minimum:\n              if len(value) < attr_def.minimum:\n                raise ValueError(\"Attr '%s' of '%s' Op passed list of length %d \"\n                                 \"less than minimum %d.\" %\n                                 (key, op_type_name, len(value),\n                                  attr_def.minimum))\n            attr_value.list.SetInParent()\n          if attr_def.type == \"string\":\n            attr_value.s = _MakeStr(value, key)\n            if attr_def.HasField(\"allowed_values\"):\n              if attr_value.s not in attr_def.allowed_values.list.s:\n                raise ValueError(\n                    \"Attr '%s' of '%s' Op passed string '%s' not in: \\\"%s\\\".\" %\n                    (key, op_type_name, compat.as_text(attr_value.s),\n                     '\", \"'.join(map(compat.as_text,\n                                     attr_def.allowed_values.list.s))))\n          elif attr_def.type == \"list(string)\":\n            attr_value.list.s.extend([_MakeStr(x, key) for x in value])\n            if attr_def.HasField(\"allowed_values\"):\n              for x in attr_value.list.s:\n                if x not in attr_def.allowed_values.list.s:\n                  raise ValueError(\n                      \"Attr '%s' of '%s' Op passed string '%s' not in: \\\"%s\\\".\" %\n                      (key, op_type_name, compat.as_text(x),\n                       '\", \"'.join(map(compat.as_text,\n                                       attr_def.allowed_values.list.s))))\n          elif attr_def.type == \"int\":\n            attr_value.i = _MakeInt(value, key)\n            if attr_def.has_minimum:\n              if attr_value.i < attr_def.minimum:\n                raise ValueError(\n                    \"Attr '%s' of '%s' Op passed %d less than minimum %d.\" %\n                    (key, op_type_name, attr_value.i, attr_def.minimum))\n          elif attr_def.type == \"list(int)\":\n            attr_value.list.i.extend([_MakeInt(x, key) for x in value])\n          elif attr_def.type == \"float\":\n            attr_value.f = _MakeFloat(value, key)\n          elif attr_def.type == \"list(float)\":\n            attr_value.list.f.extend([_MakeFloat(x, key) for x in value])\n          elif attr_def.type == \"bool\":\n            attr_value.b = _MakeBool(value, key)\n          elif attr_def.type == \"list(bool)\":\n            attr_value.list.b.extend([_MakeBool(x, key) for x in value])\n          elif attr_def.type == \"type\":\n            attr_value.type = _MakeType(value, attr_def)\n          elif attr_def.type == \"list(type)\":\n            attr_value.list.type.extend(\n                [_MakeType(x, attr_def) for x in value])\n          elif attr_def.type == \"shape\":\n            attr_value.shape.CopyFrom(_MakeShape(value, key))\n          elif attr_def.type == \"list(shape)\":\n            attr_value.list.shape.extend(\n                [_MakeShape(x, key) for x in value])\n          elif attr_def.type == \"tensor\":\n            attr_value.tensor.CopyFrom(_MakeTensor(value, key))\n          elif attr_def.type == \"list(tensor)\":\n            attr_value.list.tensor.extend(\n                [_MakeTensor(x, key) for x in value])\n          elif attr_def.type == \"func\":\n            attr_value.func.CopyFrom(_MakeFunc(value, key))\n          elif attr_def.type == \"list(func)\":\n            attr_value.list.func.extend([_MakeFunc(x, key) for x in value])\n          else:\n            raise TypeError(\"Unrecognized Attr type \" + attr_def.type)\n    \n          attr_protos[key] = attr_value\n        del attrs  # attrs is no longer authoritative, use attr_protos instead\n    \n        # Determine output types (possibly using attrs)\n        output_structure = []\n        for arg in op_def.output_arg:\n          if arg.number_attr:\n            n = _AttrValue(attr_protos, arg.number_attr).i\n            output_structure.append(n)\n          elif arg.type_attr:\n            t = _AttrValue(attr_protos, arg.type_attr)\n            output_structure.append(None)\n          elif arg.type_list_attr:\n            t = _AttrValue(attr_protos, arg.type_list_attr)\n            output_structure.append(len(t.list.type))\n          else:\n            output_structure.append(None)\n    \n        if keywords:\n          raise TypeError(\"apply_op() got unexpected keyword arguments: \" +\n                          \", \".join(sorted(keywords.keys())))\n    \n        # NOTE(mrry): We add an explicit colocation constraint between\n        # the newly created op and any of its reference-typed inputs.\n        must_colocate_inputs = [val for arg, val in zip(op_def.input_arg, inputs)\n                                if arg.is_ref]\n        with _MaybeColocateWith(must_colocate_inputs):\n          # Add Op to graph\n          op = g.create_op(op_type_name, inputs, dtypes=None, name=scope,\n                           input_types=input_types, attrs=attr_protos,\n>                          op_def=op_def)\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/framework/op_def_library.py:788: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (<tensorflow.python.framework.ops.Graph object at 0x7f68465e4ed0>, 'Pack', [<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>])\nkwargs = {'attrs': {'N': i: 2\n, 'T': type: DT_FLOAT\n, 'axis': i: 0\n}, 'dtypes': None, 'input_types': [tf.float32, tf.float32], 'name': 'lambda_1_out/packed/', ...}\ninvalid_args = []\nnamed_args = {'attrs': {'N': i: 2\n, 'T': type: DT_FLOAT\n, 'axis': i: 0\n}, 'compute_device': True, 'compute_shapes': True, 'dtypes': None, ...}\narg_name = 'compute_shapes'\nspec = DeprecatedArgSpec(position=8, has_ok_value=False, ok_value=None)\n\n    @functools.wraps(func)\n    def new_func(*args, **kwargs):\n      \"\"\"Deprecation wrapper.\"\"\"\n      # TODO(apassos) figure out a way to have reasonable performance with\n      # deprecation warnings and eager mode.\n      if is_in_graph_mode.IS_IN_GRAPH_MODE() and _PRINT_DEPRECATION_WARNINGS:\n        invalid_args = []\n        named_args = tf_inspect.getcallargs(func, *args, **kwargs)\n        for arg_name, spec in iter(deprecated_positions.items()):\n          if (spec.position < len(args) and\n              not (spec.has_ok_value and\n                   _same_value(named_args[arg_name], spec.ok_value))):\n            invalid_args.append(arg_name)\n        if is_varargs_deprecated and len(args) > len(arg_spec.args):\n          invalid_args.append(arg_spec.varargs)\n        if is_kwargs_deprecated and kwargs:\n          invalid_args.append(arg_spec.varkw)\n        for arg_name in deprecated_arg_names:\n          if (arg_name in kwargs and\n              not (deprecated_positions[arg_name].has_ok_value and\n                   _same_value(named_args[arg_name],\n                               deprecated_positions[arg_name].ok_value))):\n            invalid_args.append(arg_name)\n        for arg_name in invalid_args:\n          if (func, arg_name) not in _PRINTED_WARNING:\n            if warn_once:\n              _PRINTED_WARNING[(func, arg_name)] = True\n            logging.warning(\n                'From %s: calling %s (from %s) with %s is deprecated and will '\n                'be removed %s.\\nInstructions for updating:\\n%s',\n                _call_location(), decorator_utils.get_qualified_name(func),\n                func.__module__, arg_name,\n                'in a future version' if date is None else ('after %s' % date),\n                instructions)\n>     return func(*args, **kwargs)\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/util/deprecation.py:507: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tensorflow.python.framework.ops.Graph object at 0x7f68465e4ed0>\nop_type = 'Pack'\ninputs = [<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>]\ndtypes = None, input_types = [tf.float32, tf.float32]\nname = 'lambda_1_out/packed'\nattrs = {'N': i: 2\n, 'T': type: DT_FLOAT\n, 'axis': i: 0\n}\nop_def = name: \"Pack\"\ninput_arg {\n  name: \"values\"\n  type_attr: \"T\"\n  number_attr: \"N\"\n}\noutput_arg {\n  name: \"output\"\n  type_a... minimum: 1\n}\nattr {\n  name: \"T\"\n  type: \"type\"\n}\nattr {\n  name: \"axis\"\n  type: \"int\"\n  default_value {\n    i: 0\n  }\n}\n\ncompute_device = True\n\n    @deprecated_args(None,\n                     \"Shapes are always computed; don't use the compute_shapes \"\n                     \"as it has no effect.\", \"compute_shapes\")\n    def create_op(\n        self,\n        op_type,\n        inputs,\n        dtypes=None,  # pylint: disable=redefined-outer-name\n        input_types=None,\n        name=None,\n        attrs=None,\n        op_def=None,\n        compute_shapes=True,\n        compute_device=True):\n      \"\"\"Creates an `Operation` in this graph.\n    \n      This is a low-level interface for creating an `Operation`. Most\n      programs will not call this method directly, and instead use the\n      Python op constructors, such as `tf.constant()`, which add ops to\n      the default graph.\n    \n      Args:\n        op_type: The `Operation` type to create. This corresponds to the\n          `OpDef.name` field for the proto that defines the operation.\n        inputs: A list of `Tensor` objects that will be inputs to the `Operation`.\n        dtypes: (Optional) A list of `DType` objects that will be the types of the\n          tensors that the operation produces.\n        input_types: (Optional.) A list of `DType`s that will be the types of the\n          tensors that the operation consumes. By default, uses the base `DType`\n          of each input in `inputs`. Operations that expect reference-typed inputs\n          must specify `input_types` explicitly.\n        name: (Optional.) A string name for the operation. If not specified, a\n          name is generated based on `op_type`.\n        attrs: (Optional.) A dictionary where the key is the attribute name (a\n          string) and the value is the respective `attr` attribute of the\n          `NodeDef` proto that will represent the operation (an `AttrValue`\n          proto).\n        op_def: (Optional.) The `OpDef` proto that describes the `op_type` that\n          the operation will have.\n        compute_shapes: (Optional.) Deprecated. Has no effect (shapes are always\n          computed).\n        compute_device: (Optional.) If True, device functions will be executed to\n          compute the device property of the Operation.\n    \n      Raises:\n        TypeError: if any of the inputs is not a `Tensor`.\n        ValueError: if colocation conflicts with existing device assignment.\n    \n      Returns:\n        An `Operation` object.\n      \"\"\"\n      del compute_shapes\n    \n      self._check_not_finalized()\n      for idx, a in enumerate(inputs):\n        if not isinstance(a, Tensor):\n          raise TypeError(\"Input #%d is not a tensor: %s\" % (idx, a))\n      if name is None:\n        name = op_type\n      # If a names ends with a '/' it is a \"name scope\" and we use it as-is,\n      # after removing the trailing '/'.\n      if name and name[-1] == \"/\":\n        name = name_from_scope_name(name)\n      else:\n        name = self.unique_name(name)\n    \n      node_def = _NodeDef(op_type, name, device=None, attrs=attrs)\n    \n      input_ops = set([t.op for t in inputs])\n      control_inputs = self._control_dependencies_for_inputs(input_ops)\n      # _create_op_helper mutates the new Operation. `_mutation_lock` ensures a\n      # Session.run call cannot occur between creating and mutating the op.\n      with self._mutation_lock():\n        ret = Operation(\n            node_def,\n            self,\n            inputs=inputs,\n            output_types=dtypes,\n            control_inputs=control_inputs,\n            input_types=input_types,\n            original_op=self._default_original_op,\n>           op_def=op_def)\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/framework/ops.py:3616: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'Operation' object has no attribute '_c_op'\") raised in repr()] Operation object at 0x7f6834ff9090>\nnode_def = name: \"lambda_1_out/packed\"\nop: \"Pack\"\nattr {\n  key: \"N\"\n  value {\n    i: 2\n  }\n}\nattr {\n  key: \"T\"\n  value {\n    type: DT_FLOAT\n  }\n}\nattr {\n  key: \"axis\"\n  value {\n    i: 0\n  }\n}\n\ng = <tensorflow.python.framework.ops.Graph object at 0x7f68465e4ed0>\ninputs = [<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>]\noutput_types = None, control_inputs = [], input_types = [tf.float32, tf.float32]\noriginal_op = None\nop_def = name: \"Pack\"\ninput_arg {\n  name: \"values\"\n  type_attr: \"T\"\n  number_attr: \"N\"\n}\noutput_arg {\n  name: \"output\"\n  type_a... minimum: 1\n}\nattr {\n  name: \"T\"\n  type: \"type\"\n}\nattr {\n  name: \"axis\"\n  type: \"int\"\n  default_value {\n    i: 0\n  }\n}\n\n\n    def __init__(self,\n                 node_def,\n                 g,\n                 inputs=None,\n                 output_types=None,\n                 control_inputs=None,\n                 input_types=None,\n                 original_op=None,\n                 op_def=None):\n      r\"\"\"Creates an `Operation`.\n    \n      NOTE: This constructor validates the name of the `Operation` (passed\n      as `node_def.name`). Valid `Operation` names match the following\n      regular expression:\n    \n          [A-Za-z0-9.][A-Za-z0-9_.\\\\-/]*\n    \n      Args:\n        node_def: `node_def_pb2.NodeDef`.  `NodeDef` for the `Operation`. Used for\n          attributes of `node_def_pb2.NodeDef`, typically `name`, `op`, and\n          `device`.  The `input` attribute is irrelevant here as it will be\n          computed when generating the model.\n        g: `Graph`. The parent graph.\n        inputs: list of `Tensor` objects. The inputs to this `Operation`.\n        output_types: list of `DType` objects.  List of the types of the `Tensors`\n          computed by this operation.  The length of this list indicates the\n          number of output endpoints of the `Operation`.\n        control_inputs: list of operations or tensors from which to have a control\n          dependency.\n        input_types: List of `DType` objects representing the types of the tensors\n          accepted by the `Operation`.  By default uses `[x.dtype.base_dtype for x\n          in inputs]`.  Operations that expect reference-typed inputs must specify\n          these explicitly.\n        original_op: Optional. Used to associate the new `Operation` with an\n          existing `Operation` (for example, a replica with the op that was\n          replicated).\n        op_def: Optional. The `op_def_pb2.OpDef` proto that describes the op type\n          that this `Operation` represents.\n    \n      Raises:\n        TypeError: if control inputs are not Operations or Tensors,\n          or if `node_def` is not a `NodeDef`,\n          or if `g` is not a `Graph`,\n          or if `inputs` are not tensors,\n          or if `inputs` and `input_types` are incompatible.\n        ValueError: if the `node_def` name is not valid.\n      \"\"\"\n      # For internal use only: `node_def` can be set to a TF_Operation to create\n      # an Operation for that op. This is useful for creating Operations for ops\n      # indirectly created by C API methods, e.g. the ops created by\n      # TF_ImportGraphDef. When `node_def` is a TF_Operation, all optional fields\n      # should be None.\n    \n      if isinstance(node_def, node_def_pb2.NodeDef):\n        if node_def.ByteSize() >= (1 << 31) or node_def.ByteSize() < 0:\n          raise ValueError(\n              \"Cannot create a tensor proto whose content is larger than 2GB.\")\n        if not _VALID_OP_NAME_REGEX.match(node_def.name):\n          raise ValueError(\"'%s' is not a valid node name\" % node_def.name)\n        c_op = None\n      elif type(node_def).__name__ == \"SwigPyObject\":\n        assert inputs is None\n        assert output_types is None\n        assert control_inputs is None\n        assert input_types is None\n        assert original_op is None\n        assert op_def is None\n        c_op = node_def\n      else:\n        raise TypeError(\"node_def needs to be a NodeDef: %s\" % node_def)\n    \n      if not isinstance(g, Graph):\n        raise TypeError(\"g needs to be a Graph: %s\" % g)\n      self._graph = g\n    \n      if inputs is None:\n        inputs = []\n      elif not isinstance(inputs, list):\n        raise TypeError(\"inputs needs to be a list of Tensors: %s\" % inputs)\n      for a in inputs:\n        if not isinstance(a, Tensor):\n          raise TypeError(\"input needs to be a Tensor: %s\" % a)\n      if input_types is None:\n        input_types = [i.dtype.base_dtype for i in inputs]\n      else:\n        if not all(\n            x.is_compatible_with(i.dtype) for i, x in zip(inputs, input_types)):\n          raise TypeError(\"In op '%s', input types (%s) are not compatible \"\n                          \"with expected types (%s)\" %\n                          (node_def.name, [i.dtype for i in inputs], input_types))\n    \n      # Build the list of control inputs.\n      control_input_ops = []\n      if control_inputs:\n        for c in control_inputs:\n          control_op = None\n          if isinstance(c, Operation):\n            control_op = c\n          elif isinstance(c, (Tensor, IndexedSlices)):\n            control_op = c.op\n          else:\n            raise TypeError(\"Control input must be an Operation, \"\n                            \"a Tensor, or IndexedSlices: %s\" % c)\n          control_input_ops.append(control_op)\n    \n      # This will be set by self.inputs.\n      self._inputs_val = None\n    \n      # pylint: disable=protected-access\n      self._id_value = self._graph._next_id()\n      self._original_op = original_op\n      self._traceback = tf_stack.extract_stack()\n    \n      # List of _UserDevSpecs holding code location of device context manager\n      # invocations and the users original argument to them.\n      self._device_code_locations = None\n      # Dict mapping op name to file and line information for op colocation\n      # context managers.\n      self._colocation_code_locations = None\n      self._control_flow_context = self.graph._get_control_flow_context()\n      # pylint: enable=protected-access\n    \n      # Initialize self._c_op.\n      if c_op:\n        self._c_op = c_op\n      else:\n        if op_def is None:\n          op_def = self._graph._get_op_def(node_def.op)\n        # TODO(skyewm): op_def_library.apply_op() flattens the incoming inputs.\n        # Refactor so we don't have to do this here.\n        grouped_inputs = self._reconstruct_sequence_inputs(\n            op_def, inputs, node_def.attr)\n        self._c_op = _create_c_op(self._graph, node_def, grouped_inputs,\n>                                 control_input_ops)\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/framework/ops.py:2027: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngraph = <tensorflow.python.framework.ops.Graph object at 0x7f68465e4ed0>\nnode_def = name: \"lambda_1_out/packed\"\nop: \"Pack\"\nattr {\n  key: \"N\"\n  value {\n    i: 2\n  }\n}\nattr {\n  key: \"T\"\n  value {\n    type: DT_FLOAT\n  }\n}\nattr {\n  key: \"axis\"\n  value {\n    i: 0\n  }\n}\n\ninputs = [[<tf.Tensor 'lambda_1/Identity:0' shape=(?, 2, 2) dtype=float32>, <tf.Tensor 'lambda_1/Identity_1:0' shape=(?, 2) dtype=float32>]]\ncontrol_inputs = []\n\n    def _create_c_op(graph, node_def, inputs, control_inputs):\n      \"\"\"Creates a TF_Operation.\n    \n      Args:\n        graph: a `Graph`.\n        node_def: `node_def_pb2.NodeDef` for the operation to create.\n        inputs: A list of `Tensor`s (corresponding to scalar inputs) and lists of\n          `Tensor`s (corresponding to sequence inputs, e.g. \"int64 * N\",\n          \"list(int64)\"). The length of the list should be equal to the number of\n          inputs specified by this operation's op def.\n        control_inputs: A list of `Operation`s to set as control dependencies.\n    \n      Returns:\n        A wrapped TF_Operation*.\n      \"\"\"\n      # pylint: disable=protected-access\n      op_desc = c_api.TF_NewOperation(graph._c_graph, compat.as_str(node_def.op),\n                                      compat.as_str(node_def.name))\n      if node_def.device:\n        c_api.TF_SetDevice(op_desc, compat.as_str(node_def.device))\n      # Add inputs\n      for op_input in inputs:\n        if isinstance(op_input, (list, tuple)):\n          c_api.TF_AddInputList(op_desc, [t._as_tf_output() for t in op_input])\n        else:\n          c_api.TF_AddInput(op_desc, op_input._as_tf_output())\n    \n      # Add control inputs\n      for control_input in control_inputs:\n        c_api.TF_AddControlInput(op_desc, control_input._c_op)\n      # pylint: enable=protected-access\n    \n      # Add attrs\n      for name, attr_value in node_def.attr.items():\n        serialized = attr_value.SerializeToString()\n        # TODO(skyewm): this creates and deletes a new TF_Status for every attr.\n        # It might be worth creating a convenient way to re-use the same status.\n        c_api.TF_SetAttrValueProto(op_desc, compat.as_str(name), serialized)\n    \n      try:\n        c_op = c_api.TF_FinishOperation(op_desc)\n      except errors.InvalidArgumentError as e:\n        # Convert to ValueError for backwards compatibility.\n>       raise ValueError(str(e))\nE       ValueError: Shapes must be equal rank, but are 3 and 2\nE       \tFrom merging shape 0 with other shapes. for 'lambda_1_out/packed' (op: 'Pack') with input shapes: [?,2,2], [?,2].\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/framework/ops.py:1867: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\ntmpdir = local('/tmp/pytest-of-ubuntu/pytest-75148/popen-gw0/test_TensorBoard_multi_input_o0')\n\n    @keras_test\n    def test_TensorBoard_multi_input_output(tmpdir):\n        np.random.seed(np.random.randint(1, 1e7))\n        filepath = str(tmpdir / 'logs')\n    \n        (X_train, y_train), (X_test, y_test) = get_test_data(\n            num_train=train_samples,\n            num_test=test_samples,\n            input_shape=(input_dim, input_dim),\n            classification=True,\n            num_classes=num_classes)\n        y_test = np_utils.to_categorical(y_test)\n        y_train = np_utils.to_categorical(y_train)\n    \n        def data_generator(train):\n            if train:\n                max_batch_index = len(X_train) // batch_size\n            else:\n                max_batch_index = len(X_test) // batch_size\n            i = 0\n            while 1:\n                if train:\n                    # simulate multi-input/output models\n                    yield ([X_train[i * batch_size: (i + 1) * batch_size]] * 2,\n                           [y_train[i * batch_size: (i + 1) * batch_size]] * 2)\n                else:\n                    yield ([X_test[i * batch_size: (i + 1) * batch_size]] * 2,\n                           [y_test[i * batch_size: (i + 1) * batch_size]] * 2)\n                i += 1\n                i = i % max_batch_index\n    \n        inp1 = Input((input_dim, input_dim))\n        inp2 = Input((input_dim, input_dim))\n        inp_3d = add([inp1, inp2])\n        inp_2d = GlobalAveragePooling1D()(inp_3d)\n        inp_pair = Lambda(lambda x: x)([inp_3d, inp_2d])  # test a layer with a list of output tensors\n        hidden = dot(inp_pair, axes=-1)\n        hidden = Dense(num_hidden, activation='relu')(hidden)\n        hidden = Dropout(0.1)(hidden)\n        output1 = Dense(num_classes, activation='softmax')(hidden)\n        output2 = Dense(num_classes, activation='softmax')(hidden)\n        model = Model(inputs=[inp1, inp2], outputs=[output1, output2])\n        model.compile(loss='categorical_crossentropy',\n                      optimizer='sgd',\n                      metrics=['accuracy'])\n    \n        # we must generate new callbacks for each test, as they aren't stateless\n        def callbacks_factory(histogram_freq):\n            return [callbacks.TensorBoard(log_dir=filepath,\n                                          histogram_freq=histogram_freq,\n                                          write_images=True, write_grads=True,\n                                          embeddings_freq=1,\n                                          embeddings_layer_names=['dense_1'],\n                                          batch_size=5)]\n    \n        # fit without validation data\n        model.fit([X_train] * 2, [y_train] * 2, batch_size=batch_size,\n                  callbacks=callbacks_factory(histogram_freq=0), epochs=3)\n    \n        # fit with validation data and accuracy\n        model.fit([X_train] * 2, [y_train] * 2, batch_size=batch_size,\n                  validation_data=([X_test] * 2, [y_test] * 2),\n>                 callbacks=callbacks_factory(histogram_freq=1), epochs=2)\n\ntests/keras/test_callbacks.py:680: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nkeras/engine/training.py:1037: in fit\n    validation_steps=validation_steps)\nkeras/engine/training_arrays.py:115: in fit_loop\n    callbacks.set_model(callback_model)\nkeras/callbacks.py:51: in set_model\n    callback.set_model(model)\nkeras/callbacks.py:790: in set_model\n    layer.output)\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/summary/summary.py:179: in histogram\n    tag=tag, values=values, name=scope)\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/ops/gen_logging_ops.py:329: in histogram_summary\n    \"HistogramSummary\", tag=tag, values=values, name=name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tensorflow.python.framework.op_def_library.OpDefLibrary object at 0x7f684bdfde50>\nop_type_name = 'HistogramSummary', name = 'lambda_1_out/', keywords = {}\nop_info = <tensorflow.python.framework.op_def_library._OpInfo object at 0x7f684bd873d0>\nop_def = name: \"HistogramSummary\"\ninput_arg {\n  name: \"tag\"\n  type: DT_STRING\n}\ninput_arg {\n  name: \"values\"\n  type_attr: \"T\"\n}...   type: DT_BFLOAT16\n      type: DT_UINT16\n      type: DT_HALF\n      type: DT_UINT32\n      type: DT_UINT64\n    }\n  }\n}\n\ng = <tensorflow.python.framework.ops.Graph object at 0x7f68465e4ed0>\ndeprecation_version = 0, default_type_attr_map = {'T': tf.float32}\n\n    def _apply_op_helper(self, op_type_name, name=None, **keywords):\n      \"\"\"Implementation of apply_op that returns output_structure, op.\"\"\"\n      op_info = self._ops.get(op_type_name, None)\n      if op_info is None:\n        raise RuntimeError(\"Unrecognized Op name \" + op_type_name)\n      op_def = op_info.op_def\n    \n      # Determine the graph context.\n      try:\n        # Need to flatten all the arguments into a list.\n        # pylint: disable=protected-access\n        g = ops._get_graph_from_inputs(_Flatten(keywords.values()))\n        # pylint: enable=protected-access\n      except AssertionError as e:\n        raise RuntimeError(\n            \"Cannot determine graph for Op '%s' due to: %s\"\n            % (op_type_name, e.message))\n    \n      # Default name if not specified.\n      if name is None:\n        name = op_type_name\n    \n      # Check for deprecation\n      deprecation_version = op_def.deprecation.version\n      if deprecation_version:\n        producer = g.graph_def_versions.producer\n        if producer >= deprecation_version:\n          raise NotImplementedError(\n              (\"Op %s is not available in GraphDef version %d. \"\n               \"It has been removed in version %d. %s.\") %\n              (op_type_name, producer, deprecation_version,\n               op_def.deprecation.explanation))\n    \n      # Fill in the list of default types for all \"type\" attrs.  This\n      # will be used to choose a preferred dtype to convert to in the\n      # absence of input type information.\n      #\n      # TODO(b/31302892): Currently the defaults don't work in the right\n      # way if you have two inputs, one of whose type resolution depends\n      # on the other.  Handling this will require restructuring this code\n      # significantly.\n      default_type_attr_map = {}\n      for attr_def in op_def.attr:\n        if attr_def.type != \"type\":\n          continue\n        key = attr_def.name\n        if attr_def.HasField(\"default_value\"):\n          default_type_attr_map[key] = dtypes.as_dtype(\n              attr_def.default_value.type)\n    \n      # Requires that op_def has passed validation (using the C++\n      # ValidateOpDef() from ../framework/op_def_util.h).\n      attrs = {}\n      inputs = []\n      input_types = []\n      with g.as_default(), ops.name_scope(name) as scope:\n    \n        # Perform input type inference\n        inferred_from = {}\n        for input_arg in op_def.input_arg:\n          input_name = input_arg.name\n          if input_name in keywords:\n            values = keywords.pop(input_name)\n          elif input_name + \"_\" in keywords:\n            # Handle the case where the name is a keyword or built-in\n            # for Python so we use the name + _ instead.\n            input_name += \"_\"\n            values = keywords.pop(input_name)\n          else:\n            raise TypeError(\"No argument for input \" + input_name)\n    \n          # Goals:\n          # * Convert values to Tensors if it contains constants.\n          # * Verify that values is a list if that matches the input_arg's\n          #   type.\n          # * If the input_arg's type is determined by attrs, either set\n          #   those attrs and validate those attr values are legal (if\n          #   they have not yet been set) or validate the input matches\n          #   the type indicated by the attrs (if they have already been\n          #   inferred via an earlier input).\n          # * If the input_arg has an explicit type, make sure the input\n          #   conforms.\n    \n          if _IsListParameter(input_arg):\n            if not _IsListValue(values):\n              raise TypeError(\n                  \"Expected list for '%s' argument to '%s' Op, not %s.\" %\n                  (input_name, op_type_name, values))\n            # In cases where we expect all elements of the list to have the\n            # same dtype, try to cast non-Tensor elements to that type.\n            dtype = None\n            default_dtype = None\n            if input_arg.type != types_pb2.DT_INVALID:\n              dtype = input_arg.type\n            elif input_arg.number_attr:\n              if input_arg.type_attr in attrs:\n                dtype = attrs[input_arg.type_attr]\n              else:\n                for t in values:\n                  if isinstance(t, ops.Tensor):\n                    dtype = t.dtype\n                    break\n    \n              # dtype still not found, prefer using the default dtype\n              # from the attr.\n              if dtype is None and input_arg.type_attr in default_type_attr_map:\n                default_dtype = default_type_attr_map[input_arg.type_attr]\n    \n            try:\n              if not input_arg.is_ref and dtype:\n                dtype = dtypes.as_dtype(dtype).base_dtype\n              values = ops.internal_convert_n_to_tensor(\n                  values,\n                  name=input_arg.name,\n                  dtype=dtype if dtype else None,\n                  preferred_dtype=default_dtype,\n                  as_ref=input_arg.is_ref)\n              if input_arg.number_attr and len(\n                  set(v.dtype.base_dtype for v in values)) > 1:\n                raise TypeError()  # All types should match.\n            except (TypeError, ValueError):\n              # What types does the conversion function think values have?\n              observed_types = []\n              for value in values:\n                try:\n                  converted_value = ops.internal_convert_to_tensor(\n                      value, as_ref=input_arg.is_ref)\n                  observed_types.append(converted_value.dtype.base_dtype.name)\n                except (TypeError, ValueError):\n                  observed_types.append(\"<NOT CONVERTIBLE TO TENSOR>\")\n              observed = \", \".join(observed_types)\n    \n              prefix = (\n                  \"Tensors in list passed to '%s' of '%s' Op have types [%s]\" %\n                  (input_name, op_type_name, observed))\n              if input_arg.number_attr:\n                if input_arg.type != types_pb2.DT_INVALID:\n                  raise TypeError(\"%s that do not match expected type %s.\" %\n                                  (prefix, dtype.name))\n                elif input_arg.type_attr in attrs:\n                  raise TypeError(\"%s that do not match type %s inferred from \"\n                                  \"earlier arguments.\" %\n                                  (prefix, dtype.name))\n                else:\n                  raise TypeError(\"%s that don't all match.\" % prefix)\n              else:\n                raise TypeError(\n                    \"%s that are invalid. Tensors: %s\" % (prefix, values))\n    \n            types = [x.dtype for x in values]\n            inputs.extend(values)\n          else:\n            # In cases where we have an expected type, try to convert non-Tensor\n            # arguments to that type.\n            dtype = None\n            default_dtype = None\n            if input_arg.type != types_pb2.DT_INVALID:\n              dtype = input_arg.type\n            elif input_arg.type_attr in attrs:\n              dtype = attrs[input_arg.type_attr]\n            elif input_arg.type_attr in default_type_attr_map:\n              # The dtype could not be inferred solely from the inputs,\n              # so we prefer the attr's default, so code that adds a new attr\n              # with a default is backwards compatible.\n              default_dtype = default_type_attr_map[input_arg.type_attr]\n    \n            try:\n              values = ops.internal_convert_to_tensor(\n                  values,\n                  name=input_arg.name,\n                  dtype=dtype,\n                  as_ref=input_arg.is_ref,\n                  preferred_dtype=default_dtype)\n            except TypeError as err:\n              if dtype is None:\n                raise err\n              else:\n                raise TypeError(\n                    \"Expected %s passed to parameter '%s' of op '%s', got %s of \"\n                    \"type '%s' instead. Error: %s\" %\n                    (dtypes.as_dtype(dtype).name, input_arg.name, op_type_name,\n                     repr(values), type(values).__name__, err))\n            except ValueError:\n              # What type does convert_to_tensor think it has?\n              try:\n                observed = ops.internal_convert_to_tensor(\n                    values, as_ref=input_arg.is_ref).dtype.name\n              except ValueError as err:\n                raise ValueError(\n                    \"Tried to convert '%s' to a tensor and failed. Error: %s\" %\n>                   (input_name, err))\nE               ValueError: Tried to convert 'values' to a tensor and failed. Error: Shapes must be equal rank, but are 3 and 2\nE               \tFrom merging shape 0 with other shapes. for 'lambda_1_out/packed' (op: 'Pack') with input shapes: [?,2,2], [?,2].\n\n../../envs/keras_24/lib/python3.7/site-packages/tensorflow/python/framework/op_def_library.py:545: ValueError",
                "test_function_decorators": [
                    "keras_test"
                ]
            }
        ]
    }
}