{
    "keras:17": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/keras_17/keras/metrics.py": {
            "buggy_functions": [
                {
                    "function_name": "sparse_categorical_accuracy",
                    "function_code": "def sparse_categorical_accuracy(y_true, y_pred):\n    return K.cast(K.equal(K.max(y_true, axis=-1),\n                          K.cast(K.argmax(y_pred, axis=-1), K.floatx())),\n                  K.floatx())\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 36,
                    "end_line": 39,
                    "variables": {
                        "K.cast": [
                            37,
                            38
                        ],
                        "K": [
                            37,
                            38,
                            39
                        ],
                        "K.equal": [
                            37
                        ],
                        "K.max": [
                            37
                        ],
                        "y_true": [
                            37
                        ],
                        "K.argmax": [
                            38
                        ],
                        "y_pred": [
                            38
                        ],
                        "K.floatx": [
                            38,
                            39
                        ]
                    },
                    "filtered_variables": {
                        "K.cast": [
                            37,
                            38
                        ],
                        "K": [
                            37,
                            38,
                            39
                        ],
                        "K.equal": [
                            37
                        ],
                        "K.max": [
                            37
                        ],
                        "y_true": [
                            37
                        ],
                        "K.argmax": [
                            38
                        ],
                        "y_pred": [
                            38
                        ],
                        "K.floatx": [
                            38,
                            39
                        ]
                    },
                    "diff_line_number": 37,
                    "class_data": null,
                    "used_imports": [
                        "from . import backend as K"
                    ],
                    "variable_values": [
                        [
                            {
                                "K.cast": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.max": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y_true": {
                                    "variable_value": "<tf.Variable 'Variable:0' shape=(6,) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(6)])"
                                },
                                "K.argmax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y_pred": {
                                    "variable_value": "<tf.Variable 'Variable_1:0' shape=(6, 7) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(6), Dimension(7)])"
                                },
                                "K.floatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "K.cast": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.max": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y_true": {
                                    "variable_value": "<tf.Variable 'Variable:0' shape=(6,) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(6)])"
                                },
                                "K.argmax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y_pred": {
                                    "variable_value": "<tf.Variable 'Variable_1:0' shape=(6, 7) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(6), Dimension(7)])"
                                },
                                "K.floatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "K.cast": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y_true": {
                                    "variable_value": "<tf.Variable 'Variable:0' shape=(6,) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(6)])"
                                },
                                "K.argmax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y_pred": {
                                    "variable_value": "<tf.Variable 'Variable_1:0' shape=(6, 7) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(6), Dimension(7)])"
                                },
                                "K.floatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "K.cast": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.equal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.flatten": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y_true": {
                                    "variable_value": "<tf.Variable 'Variable:0' shape=(6,) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(6)])"
                                },
                                "K.argmax": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y_pred": {
                                    "variable_value": "<tf.Variable 'Variable_1:0' shape=(6, 7) dtype=float32_ref>",
                                    "variable_type": "RefVariable",
                                    "variable_shape": "TensorShape([Dimension(6), Dimension(7)])"
                                },
                                "K.floatx": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def binary_accuracy(y_true, y_pred):\n    return K.mean(K.equal(y_true, K.round(y_pred)), axis=-1)",
                "def categorical_accuracy(y_true, y_pred):\n    return K.cast(K.equal(K.argmax(y_true, axis=-1),\n                          K.argmax(y_pred, axis=-1)),\n                  K.floatx())",
                "def sparse_categorical_accuracy(y_true, y_pred):\n    return K.cast(K.equal(K.max(y_true, axis=-1),\n                          K.cast(K.argmax(y_pred, axis=-1), K.floatx())),\n                  K.floatx())",
                "def top_k_categorical_accuracy(y_true, y_pred, k=5):\n    return K.mean(K.in_top_k(y_pred, K.argmax(y_true, axis=-1), k), axis=-1)",
                "def sparse_top_k_categorical_accuracy(y_true, y_pred, k=5):\n    return K.mean(K.in_top_k(y_pred, K.cast(K.max(y_true, axis=-1), 'int32'), k), axis=-1)",
                "def serialize(metric):\n    return serialize_keras_object(metric)",
                "def deserialize(config, custom_objects=None):\n    return deserialize_keras_object(config,\n                                    module_objects=globals(),\n                                    custom_objects=custom_objects,\n                                    printable_module_name='metric function')",
                "def get(identifier):\n    if isinstance(identifier, dict):\n        config = {'class_name': str(identifier), 'config': {}}\n        return deserialize(config)\n    elif isinstance(identifier, six.string_types):\n        return deserialize(str(identifier))\n    elif callable(identifier):\n        return identifier\n    else:\n        raise ValueError('Could not interpret '\n                         'metric function identifier:', identifier)"
            ],
            "inscope_function_signatures": [
                "binary_accuracy(y_true, y_pred)",
                "categorical_accuracy(y_true, y_pred)",
                "sparse_categorical_accuracy(y_true, y_pred)",
                "top_k_categorical_accuracy(y_true, y_pred, k=5)",
                "sparse_top_k_categorical_accuracy(y_true, y_pred, k=5)",
                "serialize(metric)",
                "deserialize(config, custom_objects=None)",
                "get(identifier)"
            ],
            "variables_in_file": {
                "K.mean": [
                    43,
                    27,
                    47
                ],
                "K": [
                    32,
                    33,
                    37,
                    38,
                    39,
                    43,
                    47,
                    27,
                    31
                ],
                "K.equal": [
                    27,
                    37,
                    31
                ],
                "y_true": [
                    37,
                    43,
                    47,
                    27,
                    31
                ],
                "K.round": [
                    27
                ],
                "y_pred": [
                    32,
                    38,
                    43,
                    47,
                    27
                ],
                "K.cast": [
                    47,
                    37,
                    38,
                    31
                ],
                "K.argmax": [
                    32,
                    43,
                    38,
                    31
                ],
                "K.floatx": [
                    33,
                    38,
                    39
                ],
                "K.max": [
                    37,
                    47
                ],
                "K.in_top_k": [
                    43,
                    47
                ],
                "k": [
                    43,
                    47
                ],
                "mse": [
                    52
                ],
                "MSE": [
                    52
                ],
                "mean_squared_error": [
                    52
                ],
                "mae": [
                    53
                ],
                "MAE": [
                    53
                ],
                "mean_absolute_error": [
                    53
                ],
                "mape": [
                    54
                ],
                "MAPE": [
                    54
                ],
                "mean_absolute_percentage_error": [
                    54
                ],
                "msle": [
                    55
                ],
                "MSLE": [
                    55
                ],
                "mean_squared_logarithmic_error": [
                    55
                ],
                "cosine": [
                    56
                ],
                "cosine_proximity": [
                    56
                ],
                "serialize_keras_object": [
                    60
                ],
                "metric": [
                    60
                ],
                "deserialize_keras_object": [
                    64
                ],
                "config": [
                    64,
                    73,
                    72
                ],
                "globals": [
                    65
                ],
                "custom_objects": [
                    66
                ],
                "isinstance": [
                    74,
                    71
                ],
                "identifier": [
                    71,
                    72,
                    74,
                    75,
                    76,
                    77,
                    80
                ],
                "dict": [
                    71
                ],
                "str": [
                    72,
                    75
                ],
                "deserialize": [
                    73,
                    75
                ],
                "six.string_types": [
                    74
                ],
                "six": [
                    74
                ],
                "callable": [
                    76
                ],
                "ValueError": [
                    79
                ]
            },
            "filtered_variables_in_file": {
                "K.mean": [
                    43,
                    27,
                    47
                ],
                "K": [
                    32,
                    33,
                    37,
                    38,
                    39,
                    43,
                    47,
                    27,
                    31
                ],
                "K.equal": [
                    27,
                    37,
                    31
                ],
                "y_true": [
                    37,
                    43,
                    47,
                    27,
                    31
                ],
                "K.round": [
                    27
                ],
                "y_pred": [
                    32,
                    38,
                    43,
                    47,
                    27
                ],
                "K.cast": [
                    47,
                    37,
                    38,
                    31
                ],
                "K.argmax": [
                    32,
                    43,
                    38,
                    31
                ],
                "K.floatx": [
                    33,
                    38,
                    39
                ],
                "K.max": [
                    37,
                    47
                ],
                "K.in_top_k": [
                    43,
                    47
                ],
                "k": [
                    43,
                    47
                ],
                "mse": [
                    52
                ],
                "MSE": [
                    52
                ],
                "mean_squared_error": [
                    52
                ],
                "mae": [
                    53
                ],
                "MAE": [
                    53
                ],
                "mean_absolute_error": [
                    53
                ],
                "mape": [
                    54
                ],
                "MAPE": [
                    54
                ],
                "mean_absolute_percentage_error": [
                    54
                ],
                "msle": [
                    55
                ],
                "MSLE": [
                    55
                ],
                "mean_squared_logarithmic_error": [
                    55
                ],
                "cosine": [
                    56
                ],
                "cosine_proximity": [
                    56
                ],
                "serialize_keras_object": [
                    60
                ],
                "metric": [
                    60
                ],
                "deserialize_keras_object": [
                    64
                ],
                "config": [
                    64,
                    73,
                    72
                ],
                "custom_objects": [
                    66
                ],
                "identifier": [
                    71,
                    72,
                    74,
                    75,
                    76,
                    77,
                    80
                ],
                "deserialize": [
                    73,
                    75
                ],
                "six.string_types": [
                    74
                ],
                "six": [
                    74
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/keras_17/tests/keras/metrics_test.py",
                "test_function": "test_sparse_categorical_accuracy_correctness",
                "test_function_code": "@keras_test\ndef test_sparse_categorical_accuracy_correctness():\n    y_a = K.variable(np.random.randint(0, 7, (6,)), dtype=K.floatx())\n    y_b = K.variable(np.random.random((6, 7)), dtype=K.floatx())\n    # use one_hot embedding to convert sparse labels to equivalent dense labels\n    y_a_dense_labels = K.cast(K.one_hot(K.cast(y_a, dtype='int32'), num_classes=7),\n                              dtype=K.floatx())\n    sparse_categorical_acc = metrics.sparse_categorical_accuracy(y_a, y_b)\n    categorical_acc = metrics.categorical_accuracy(y_a_dense_labels, y_b)\n    assert np.allclose(K.eval(sparse_categorical_acc), K.eval(categorical_acc))",
                "test_error": "AssertionError: assert False  +  where False = <function allclose at 0x7f66454c5710>(array([0., 0., 1., 0., 0., 0.], dtype=float32), array([0., 0., 0., 1., 1., 0.], dtype=float32))  +    where <function allclose at 0x7f66454c5710> = np.allclose  +    and   array([0., 0., 1., 0., 0., 0.], dtype=float32) = <function eval at 0x7f661b0c80e0>(<tf.Tensor 'Cast_2:0' shape=(6,) dtype=float32>)  +      where <function eval at 0x7f661b0c80e0> = K.eval  +    and   array([0., 0., 0., 1., 1., 0.], dtype=float32) = <function eval at 0x7f661b0c80e0>(<tf.Tensor 'Cast_3:0' shape=(6,) dtype=float32>)  +      where <function eval at 0x7f661b0c80e0> = K.eval",
                "full_test_error": "@keras_test\n    def test_sparse_categorical_accuracy_correctness():\n        y_a = K.variable(np.random.randint(0, 7, (6,)), dtype=K.floatx())\n        y_b = K.variable(np.random.random((6, 7)), dtype=K.floatx())\n        # use one_hot embedding to convert sparse labels to equivalent dense labels\n        y_a_dense_labels = K.cast(K.one_hot(K.cast(y_a, dtype='int32'), num_classes=7),\n                                  dtype=K.floatx())\n        sparse_categorical_acc = metrics.sparse_categorical_accuracy(y_a, y_b)\n        categorical_acc = metrics.categorical_accuracy(y_a_dense_labels, y_b)\n>       assert np.allclose(K.eval(sparse_categorical_acc), K.eval(categorical_acc))\nE       AssertionError: assert False\nE        +  where False = <function allclose at 0x7f66454c5710>(array([0., 0., 1., 0., 0., 0.], dtype=float32), array([0., 0., 0., 1., 1., 0.], dtype=float32))\nE        +    where <function allclose at 0x7f66454c5710> = np.allclose\nE        +    and   array([0., 0., 1., 0., 0., 0.], dtype=float32) = <function eval at 0x7f661b0c80e0>(<tf.Tensor 'Cast_2:0' shape=(6,) dtype=float32>)\nE        +      where <function eval at 0x7f661b0c80e0> = K.eval\nE        +    and   array([0., 0., 0., 1., 1., 0.], dtype=float32) = <function eval at 0x7f661b0c80e0>(<tf.Tensor 'Cast_3:0' shape=(6,) dtype=float32>)\nE        +      where <function eval at 0x7f661b0c80e0> = K.eval\n\ntests/keras/metrics_test.py:59: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "keras_test"
                ]
            }
        ]
    }
}