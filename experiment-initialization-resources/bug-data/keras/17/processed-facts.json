{
    "1.1.1": "def sparse_categorical_accuracy(y_true, y_pred):\n    return K.cast(K.equal(K.max(y_true, axis=-1),\n                          K.cast(K.argmax(y_pred, axis=-1), K.floatx())),\n                  K.floatx())\n",
    "1.1.2": null,
    "1.2.1": "keras/metrics.py",
    "1.2.2": "from . import backend as K",
    "1.3.1": null,
    "1.3.2": null,
    "1.4.1": null,
    "1.4.2": null,
    "1.5.1": [
        "@keras_test\ndef test_sparse_categorical_accuracy_correctness():\n    y_a = K.variable(np.random.randint(0, 7, (6,)), dtype=K.floatx())\n    y_b = K.variable(np.random.random((6, 7)), dtype=K.floatx())\n    # use one_hot embedding to convert sparse labels to equivalent dense labels\n    y_a_dense_labels = K.cast(K.one_hot(K.cast(y_a, dtype='int32'), num_classes=7),\n                              dtype=K.floatx())\n    sparse_categorical_acc = metrics.sparse_categorical_accuracy(y_a, y_b)\n    categorical_acc = metrics.categorical_accuracy(y_a_dense_labels, y_b)\n    assert np.allclose(K.eval(sparse_categorical_acc), K.eval(categorical_acc))"
    ],
    "1.5.2": [
        "tests/keras/metrics_test.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: assert False\nE        +  where False = <function allclose at 0x7f8be57bf950>(array([1., 0., 0., 0., 0., 0.], dtype=float32), array([0., 0., 1., 0., 0., 0.], dtype=float32))\nE        +    where <function allclose at 0x7f8be57bf950> = np.allclose\nE        +    and   array([1., 0., 0., 0., 0., 0.], dtype=float32) = <function eval at 0x7f8bbb467b00>(<tf.Tensor 'Cast_2:0' shape=(6,) dtype=float32>)\nE        +      where <function eval at 0x7f8bbb467b00> = K.eval\nE        +    and   array([0., 0., 1., 0., 0., 0.], dtype=float32) = <function eval at 0x7f8bbb467b00>(<tf.Tensor 'Cast_3:0' shape=(6,) dtype=float32>)\nE        +      where <function eval at 0x7f8bbb467b00> = K.eval"
        ]
    ],
    "2.1.2": [
        [
            "@keras_test\n    def test_sparse_categorical_accuracy_correctness():\n        y_a = K.variable(np.random.randint(0, 7, (6,)), dtype=K.floatx())\n        y_b = K.variable(np.random.random((6, 7)), dtype=K.floatx())\n        # use one_hot embedding to convert sparse labels to equivalent dense labels\n        y_a_dense_labels = K.cast(K.one_hot(K.cast(y_a, dtype='int32'), num_classes=7),\n                                  dtype=K.floatx())\n        sparse_categorical_acc = metrics.sparse_categorical_accuracy(y_a, y_b)\n        categorical_acc = metrics.categorical_accuracy(y_a_dense_labels, y_b)\n>       assert np.allclose(K.eval(sparse_categorical_acc), K.eval(categorical_acc))",
            "\ntests/keras/metrics_test.py:59: AssertionError"
        ]
    ],
    "2.2.1": [
        [
            {
                "y_true": {
                    "value": "<tf.Variable 'Variable:0' shape=(6,) dtype=float32_ref>",
                    "shape": "TensorShape([Dimension(6)])",
                    "omitted": false
                },
                "y_pred": {
                    "value": "<tf.Variable 'Variable_1:0' shape=(6, 7) dtype=float32_ref>",
                    "shape": "TensorShape([Dimension(6), Dimension(7)])",
                    "omitted": false
                }
            },
            {}
        ]
    ],
    "2.2.2": [
        [
            {
                "y_true": "RefVariable",
                "y_pred": "RefVariable"
            },
            {}
        ]
    ],
    "2.3.1": [
        [
            {
                "y_true": {
                    "value": "<tf.Variable 'Variable:0' shape=(6,) dtype=float32_ref>",
                    "shape": "TensorShape([Dimension(6)])",
                    "omitted": false
                },
                "y_pred": {
                    "value": "<tf.Variable 'Variable_1:0' shape=(6, 7) dtype=float32_ref>",
                    "shape": "TensorShape([Dimension(6), Dimension(7)])",
                    "omitted": false
                }
            },
            {}
        ]
    ],
    "2.3.2": [
        [
            {
                "y_true": "RefVariable",
                "y_pred": "RefVariable"
            },
            {}
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}