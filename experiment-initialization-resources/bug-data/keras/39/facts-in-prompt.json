{
    "1": "Assume that the following list of imports are available in the current environment, so you don't need to import them when generating a fix.\n```python\nimport numpy as np\nimport time\nimport sys\n```\n\n## The source code of the buggy function\n```python\n# The relative path of the buggy file: keras/utils/generic_utils.py\n\n\n\n    # this is the buggy function you need to fix\n    def update(self, current, values=None, force=False):\n        \"\"\"Updates the progress bar.\n    \n        # Arguments\n            current: Index of current step.\n            values: List of tuples (name, value_for_last_step).\n                The progress bar will display averages for these values.\n            force: Whether to force visual progress update.\n        \"\"\"\n        values = values or []\n        for k, v in values:\n            if k not in self.sum_values:\n                self.sum_values[k] = [v * (current - self.seen_so_far),\n                                      current - self.seen_so_far]\n                self.unique_values.append(k)\n            else:\n                self.sum_values[k][0] += v * (current - self.seen_so_far)\n                self.sum_values[k][1] += (current - self.seen_so_far)\n        self.seen_so_far = current\n    \n        now = time.time()\n        info = ' - %.0fs' % (now - self.start)\n        if self.verbose == 1:\n            if (not force and (now - self.last_update) < self.interval and\n                    current < self.target):\n                return\n    \n            prev_total_width = self.total_width\n            if self._dynamic_display:\n                sys.stdout.write('\\b' * prev_total_width)\n                sys.stdout.write('\\r')\n            else:\n                sys.stdout.write('\\n')\n    \n            if self.target is not None:\n                numdigits = int(np.floor(np.log10(self.target))) + 1\n                barstr = '%%%dd/%d [' % (numdigits, self.target)\n                bar = barstr % current\n                prog = float(current) / self.target\n                prog_width = int(self.width * prog)\n                if prog_width > 0:\n                    bar += ('=' * (prog_width - 1))\n                    if current < self.target:\n                        bar += '>'\n                    else:\n                        bar += '='\n                bar += ('.' * (self.width - prog_width))\n                bar += ']'\n            else:\n                bar = '%7d/Unknown' % current\n    \n            self.total_width = len(bar)\n            sys.stdout.write(bar)\n    \n            if current:\n                time_per_unit = (now - self.start) / current\n            else:\n                time_per_unit = 0\n            if self.target is not None and current < self.target:\n                eta = time_per_unit * (self.target - current)\n                if eta > 3600:\n                    eta_format = '%d:%02d:%02d' % (eta // 3600, (eta % 3600) // 60, eta % 60)\n                elif eta > 60:\n                    eta_format = '%d:%02d' % (eta // 60, eta % 60)\n                else:\n                    eta_format = '%ds' % eta\n    \n                info = ' - ETA: %s' % eta_format\n            else:\n                if time_per_unit >= 1:\n                    info += ' %.0fs/step' % time_per_unit\n                elif time_per_unit >= 1e-3:\n                    info += ' %.0fms/step' % (time_per_unit * 1e3)\n                else:\n                    info += ' %.0fus/step' % (time_per_unit * 1e6)\n    \n            for k in self.unique_values:\n                info += ' - %s:' % k\n                if isinstance(self.sum_values[k], list):\n                    avg = np.mean(\n                        self.sum_values[k][0] / max(1, self.sum_values[k][1]))\n                    if abs(avg) > 1e-3:\n                        info += ' %.4f' % avg\n                    else:\n                        info += ' %.4e' % avg\n                else:\n                    info += ' %s' % self.sum_values[k]\n    \n            self.total_width += len(info)\n            if prev_total_width > self.total_width:\n                info += (' ' * (prev_total_width - self.total_width))\n    \n            if self.target is not None and current >= self.target:\n                info += '\\n'\n    \n            sys.stdout.write(info)\n            sys.stdout.flush()\n    \n        elif self.verbose == 2:\n            if self.target is None or current >= self.target:\n                for k in self.unique_values:\n                    info += ' - %s:' % k\n                    avg = np.mean(\n                        self.sum_values[k][0] / max(1, self.sum_values[k][1]))\n                    if avg > 1e-3:\n                        info += ' %.4f' % avg\n                    else:\n                        info += ' %.4e' % avg\n                info += '\\n'\n    \n                sys.stdout.write(info)\n                sys.stdout.flush()\n    \n        self.last_update = now\n    \n```",
    "2": "# The declaration of the class containing the buggy function\nclass Progbar(object):\n    \"\"\"\n    Displays a progress bar.\n    \n    # Arguments\n        target: Total number of steps expected, None if unknown.\n        interval: Minimum visual progress update interval (in seconds).\n    \"\"\"\n\n\n",
    "3": "",
    "4": "## A test function that the buggy function fails\n```python\n# The relative path of the failing test file: tests/keras/utils/generic_utils_test.py\n\n@keras_test\ndef test_progbar():\n    n = 2\n    input_arr = np.random.random((n, n, n))\n\n    bar = Progbar(n)\n    for i, arr in enumerate(input_arr):\n        bar.update(i, list(arr))\n\n    bar = Progbar(None)\n    for i, arr in enumerate(input_arr):\n        bar.update(i, list(arr))\n```\n\n\n",
    "5": "### The error message from the failing test\n```text\n@keras_test\n    def test_progbar():\n        n = 2\n        input_arr = np.random.random((n, n, n))\n    \n        bar = Progbar(n)\n        for i, arr in enumerate(input_arr):\n            bar.update(i, list(arr))\n    \n        bar = Progbar(None)\n        for i, arr in enumerate(input_arr):\n>           bar.update(i, list(arr))\n\ntests/keras/utils/generic_utils_test.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <keras.utils.generic_utils.Progbar object at 0x7f926b44ad50>, current = 1\nvalues = [array([0.63705921, 0.47014731]), array([0.74275286, 0.93248616])]\nforce = False\n\n    def update(self, current, values=None, force=False):\n        \"\"\"Updates the progress bar.\n    \n        # Arguments\n            current: Index of current step.\n            values: List of tuples (name, value_for_last_step).\n                The progress bar will display averages for these values.\n            force: Whether to force visual progress update.\n        \"\"\"\n        values = values or []\n        for k, v in values:\n            if k not in self.sum_values:\n                self.sum_values[k] = [v * (current - self.seen_so_far),\n                                      current - self.seen_so_far]\n                self.unique_values.append(k)\n            else:\n                self.sum_values[k][0] += v * (current - self.seen_so_far)\n                self.sum_values[k][1] += (current - self.seen_so_far)\n        self.seen_so_far = current\n    \n        now = time.time()\n        info = ' - %.0fs' % (now - self.start)\n        if self.verbose == 1:\n            if (not force and (now - self.last_update) < self.interval and\n>                   current < self.target):\nE                   TypeError: '<' not supported between instances of 'int' and 'NoneType'\n\nkeras/utils/generic_utils.py:330: TypeError\n\n```\n",
    "6": "## Runtime values and types of variables inside the buggy function\nEach case below includes input parameter values and types, and the values and types of relevant variables at the function's return, derived from executing failing tests. If an input parameter is not reflected in the output, it is assumed to remain unchanged. Note that some of these values at the function's return might be incorrect. Analyze these cases to identify why the tests are failing to effectively fix the bug.\n\n### Case 1\n#### Runtime values and types of the input parameters of the buggy function\nvalues, value: `[array([0.1075106 , 0.73803222]), array([0.27134425, 0.82295024])]`, type: `list`\n\nself.sum_values, value: `{}`, type: `dict`\n\ncurrent, value: `0`, type: `int`\n\nself.seen_so_far, value: `0`, type: `int`\n\nself.unique_values, value: `[]`, type: `list`\n\nself.start, value: `1706547903.7234848`, type: `float`\n\nself.verbose, value: `1`, type: `int`\n\nforce, value: `False`, type: `bool`\n\nself.last_update, value: `0`, type: `int`\n\nself.interval, value: `0.05`, type: `float`\n\nself.target, value: `2`, type: `int`\n\nself.total_width, value: `0`, type: `int`\n\nself._dynamic_display, value: `False`, type: `bool`\n\nself.width, value: `30`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nk, value: `0.2713442468364289`, type: `float64`\n\nv, value: `0.8229502365592092`, type: `float64`\n\nself.sum_values, value: `{0.10751060220644382: [0.0, 0], 0.2713442468364289: [0.0, 0]}`, type: `dict`\n\nself.unique_values, value: `[0.10751060220644382, 0.2713442468364289]`, type: `list`\n\nnow, value: `1706547903.7241695`, type: `float`\n\ninfo, value: `' - ETA: 0s - 0.10751060220644382: 0.0000e+00 - 0.2713442468364289: 0.0000e+00'`, type: `str`\n\nself.last_update, value: `1706547903.7241695`, type: `float`\n\nprev_total_width, value: `0`, type: `int`\n\nself.total_width, value: `113`, type: `int`\n\nnumdigits, value: `1`, type: `int`\n\nbarstr, value: `'%1d/2 ['`, type: `str`\n\nbar, value: `'0/2 [..............................]'`, type: `str`\n\nprog, value: `0.0`, type: `float`\n\nprog_width, value: `0`, type: `int`\n\ntime_per_unit, value: `0`, type: `int`\n\neta, value: `0`, type: `int`\n\neta_format, value: `'0s'`, type: `str`\n\navg, value: `0.0`, type: `float64`\n\n### Case 2\n#### Runtime values and types of the input parameters of the buggy function\nvalues, value: `[array([0.23368531, 0.07625796]), array([0.19046361, 0.14077135])]`, type: `list`\n\nself.sum_values, value: `{0.10751060220644382: [0.0, 0], 0.2713442468364289: [0.0, 0]}`, type: `dict`\n\ncurrent, value: `1`, type: `int`\n\nself.seen_so_far, value: `0`, type: `int`\n\nself.unique_values, value: `[0.10751060220644382, 0.2713442468364289]`, type: `list`\n\nself.start, value: `1706547903.7234848`, type: `float`\n\nself.verbose, value: `1`, type: `int`\n\nforce, value: `False`, type: `bool`\n\nself.last_update, value: `1706547903.7241695`, type: `float`\n\nself.interval, value: `0.05`, type: `float`\n\nself.target, value: `2`, type: `int`\n\nself.total_width, value: `113`, type: `int`\n\nself._dynamic_display, value: `False`, type: `bool`\n\nself.width, value: `30`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nk, value: `0.1904636104006634`, type: `float64`\n\nv, value: `0.1407713513015837`, type: `float64`\n\nself.sum_values, value: `{0.10751060220644382: [0.0, 0], 0.2713442468364289: [0.0, 0], 0.23368530566859747: [0.07625796291315312, 1], 0.1904636104006634: [0.1407713513015837, 1]}`, type: `dict`\n\nself.seen_so_far, value: `1`, type: `int`\n\nself.unique_values, value: `[0.10751060220644382, 0.2713442468364289, 0.23368530566859747, 0.1904636104006634]`, type: `list`\n\nnow, value: `1706547903.7255592`, type: `float`\n\ninfo, value: `' - 0s'`, type: `str`\n\n### Case 3\n#### Runtime values and types of the input parameters of the buggy function\nvalues, value: `[array([0.1075106 , 0.73803222]), array([0.27134425, 0.82295024])]`, type: `list`\n\nself.sum_values, value: `{}`, type: `dict`\n\ncurrent, value: `0`, type: `int`\n\nself.seen_so_far, value: `0`, type: `int`\n\nself.unique_values, value: `[]`, type: `list`\n\nself.start, value: `1706547903.7262952`, type: `float`\n\nself.verbose, value: `1`, type: `int`\n\nforce, value: `False`, type: `bool`\n\nself.last_update, value: `0`, type: `int`\n\nself.interval, value: `0.05`, type: `float`\n\nself.total_width, value: `0`, type: `int`\n\nself._dynamic_display, value: `False`, type: `bool`\n\nself.width, value: `30`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nk, value: `0.2713442468364289`, type: `float64`\n\nv, value: `0.8229502365592092`, type: `float64`\n\nself.sum_values, value: `{0.10751060220644382: [0.0, 0], 0.2713442468364289: [0.0, 0]}`, type: `dict`\n\nself.unique_values, value: `[0.10751060220644382, 0.2713442468364289]`, type: `list`\n\nnow, value: `1706547903.72695`, type: `float`\n\ninfo, value: `' - 0s 0us/step - 0.10751060220644382: 0.0000e+00 - 0.2713442468364289: 0.0000e+00'`, type: `str`\n\nself.last_update, value: `1706547903.72695`, type: `float`\n\nprev_total_width, value: `0`, type: `int`\n\nself.total_width, value: `96`, type: `int`\n\nbar, value: `'      0/Unknown'`, type: `str`\n\ntime_per_unit, value: `0`, type: `int`\n\navg, value: `0.0`, type: `float64`\n\n### Case 4\n#### Runtime values and types of the input parameters of the buggy function\nvalues, value: `[array([0.23368531, 0.07625796]), array([0.19046361, 0.14077135])]`, type: `list`\n\nself.sum_values, value: `{0.10751060220644382: [0.0, 0], 0.2713442468364289: [0.0, 0]}`, type: `dict`\n\ncurrent, value: `1`, type: `int`\n\nself.seen_so_far, value: `0`, type: `int`\n\nself.unique_values, value: `[0.10751060220644382, 0.2713442468364289]`, type: `list`\n\nself.start, value: `1706547903.7262952`, type: `float`\n\nself.verbose, value: `1`, type: `int`\n\nforce, value: `False`, type: `bool`\n\nself.last_update, value: `1706547903.72695`, type: `float`\n\nself.interval, value: `0.05`, type: `float`\n\nself.total_width, value: `96`, type: `int`\n\nself._dynamic_display, value: `False`, type: `bool`\n\nself.width, value: `30`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nk, value: `0.1904636104006634`, type: `float64`\n\nv, value: `0.1407713513015837`, type: `float64`\n\nself.sum_values, value: `{0.10751060220644382: [0.0, 0], 0.2713442468364289: [0.0, 0], 0.23368530566859747: [0.07625796291315312, 1], 0.1904636104006634: [0.1407713513015837, 1]}`, type: `dict`\n\nself.seen_so_far, value: `1`, type: `int`\n\nself.unique_values, value: `[0.10751060220644382, 0.2713442468364289, 0.23368530566859747, 0.1904636104006634]`, type: `list`\n\nnow, value: `1706547903.7287524`, type: `float`\n\ninfo, value: `' - 0s 2ms/step - 0.10751060220644382: 0.0000e+00 - 0.2713442468364289: 0.0000e+00 - 0.23368530566859747: 0.0763 - 0.1904636104006634: 0.1408'`, type: `str`\n\nself.last_update, value: `1706547903.7287524`, type: `float`\n\nprev_total_width, value: `96`, type: `int`\n\nself.total_width, value: `155`, type: `int`\n\nbar, value: `'      1/Unknown'`, type: `str`\n\ntime_per_unit, value: `0.002457141876220703`, type: `float`\n\navg, value: `0.1407713513015837`, type: `float64`\n\n",
    "7": "## Expected values and types of variables during the failing test execution\nEach case below includes input parameter values and types, and the expected values and types of relevant variables at the function's return. If an input parameter is not reflected in the output, it is assumed to remain unchanged. A corrected function must satisfy all these cases.\n\n### Expected case 1\n#### The values and types of buggy function's parameters\nvalues, value: `[array([0.72986777, 0.04606687]), array([0.40486629, 0.35801981])]`, type: `list`\n\nself.sum_values, value: `{}`, type: `dict`\n\ncurrent, value: `0`, type: `int`\n\nself.seen_so_far, value: `0`, type: `int`\n\nself.unique_values, value: `[]`, type: `list`\n\nself.start, value: `1706547900.8166926`, type: `float`\n\nself.verbose, value: `1`, type: `int`\n\nforce, value: `False`, type: `bool`\n\nself.last_update, value: `0`, type: `int`\n\nself.interval, value: `0.05`, type: `float`\n\nself.target, value: `2`, type: `int`\n\nself.total_width, value: `0`, type: `int`\n\nself._dynamic_display, value: `False`, type: `bool`\n\nself.width, value: `30`, type: `int`\n\n#### Expected values and types of variables right before the buggy function's return\nk, expected value: `0.4048662885228965`, type: `float64`\n\nv, expected value: `0.3580198087186912`, type: `float64`\n\nself.sum_values, expected value: `{0.7298677676867007: [0.0, 0], 0.4048662885228965: [0.0, 0]}`, type: `dict`\n\nself.unique_values, expected value: `[0.7298677676867007, 0.4048662885228965]`, type: `list`\n\nnow, expected value: `1706547900.8173509`, type: `float`\n\ninfo, expected value: `' - ETA: 0s - 0.7298677676867007: 0.0000e+00 - 0.4048662885228965: 0.0000e+00'`, type: `str`\n\nself.last_update, expected value: `1706547900.8173509`, type: `float`\n\nprev_total_width, expected value: `0`, type: `int`\n\nself.total_width, expected value: `112`, type: `int`\n\nnumdigits, expected value: `1`, type: `int`\n\nbarstr, expected value: `'%1d/2 ['`, type: `str`\n\nbar, expected value: `'0/2 [..............................]'`, type: `str`\n\nprog, expected value: `0.0`, type: `float`\n\nprog_width, expected value: `0`, type: `int`\n\ntime_per_unit, expected value: `0`, type: `int`\n\neta, expected value: `0`, type: `int`\n\neta_format, expected value: `'0s'`, type: `str`\n\navg, expected value: `0.0`, type: `float64`\n\n### Expected case 2\n#### The values and types of buggy function's parameters\nvalues, value: `[array([0.35345862, 0.22507527]), array([0.67937033, 0.09372196])]`, type: `list`\n\nself.sum_values, value: `{0.7298677676867007: [0.0, 0], 0.4048662885228965: [0.0, 0]}`, type: `dict`\n\ncurrent, value: `1`, type: `int`\n\nself.seen_so_far, value: `0`, type: `int`\n\nself.unique_values, value: `[0.7298677676867007, 0.4048662885228965]`, type: `list`\n\nself.start, value: `1706547900.8166926`, type: `float`\n\nself.verbose, value: `1`, type: `int`\n\nforce, value: `False`, type: `bool`\n\nself.last_update, value: `1706547900.8173509`, type: `float`\n\nself.interval, value: `0.05`, type: `float`\n\nself.target, value: `2`, type: `int`\n\nself.total_width, value: `112`, type: `int`\n\nself._dynamic_display, value: `False`, type: `bool`\n\nself.width, value: `30`, type: `int`\n\n#### Expected values and types of variables right before the buggy function's return\nk, expected value: `0.6793703287163503`, type: `float64`\n\nv, expected value: `0.09372196124656751`, type: `float64`\n\nself.sum_values, expected value: `{0.7298677676867007: [0.0, 0], 0.4048662885228965: [0.0, 0], 0.3534586166739022: [0.22507526569898628, 1], 0.6793703287163503: [0.09372196124656751, 1]}`, type: `dict`\n\nself.seen_so_far, expected value: `1`, type: `int`\n\nself.unique_values, expected value: `[0.7298677676867007, 0.4048662885228965, 0.3534586166739022, 0.6793703287163503]`, type: `list`\n\nnow, expected value: `1706547900.8187566`, type: `float`\n\ninfo, expected value: `' - 0s'`, type: `str`\n\n### Expected case 3\n#### The values and types of buggy function's parameters\nvalues, value: `[array([0.72986777, 0.04606687]), array([0.40486629, 0.35801981])]`, type: `list`\n\nself.sum_values, value: `{}`, type: `dict`\n\ncurrent, value: `0`, type: `int`\n\nself.seen_so_far, value: `0`, type: `int`\n\nself.unique_values, value: `[]`, type: `list`\n\nself.start, value: `1706547900.819484`, type: `float`\n\nself.verbose, value: `1`, type: `int`\n\nforce, value: `False`, type: `bool`\n\nself.last_update, value: `0`, type: `int`\n\nself.interval, value: `0.05`, type: `float`\n\nself.total_width, value: `0`, type: `int`\n\nself._dynamic_display, value: `False`, type: `bool`\n\nself.width, value: `30`, type: `int`\n\n#### Expected values and types of variables right before the buggy function's return\nk, expected value: `0.4048662885228965`, type: `float64`\n\nv, expected value: `0.3580198087186912`, type: `float64`\n\nself.sum_values, expected value: `{0.7298677676867007: [0.0, 0], 0.4048662885228965: [0.0, 0]}`, type: `dict`\n\nself.unique_values, expected value: `[0.7298677676867007, 0.4048662885228965]`, type: `list`\n\nnow, expected value: `1706547900.820131`, type: `float`\n\ninfo, expected value: `' - 0s 0us/step - 0.7298677676867007: 0.0000e+00 - 0.4048662885228965: 0.0000e+00'`, type: `str`\n\nself.last_update, expected value: `1706547900.820131`, type: `float`\n\nprev_total_width, expected value: `0`, type: `int`\n\nself.total_width, expected value: `95`, type: `int`\n\nbar, expected value: `'      0/Unknown'`, type: `str`\n\ntime_per_unit, expected value: `0`, type: `int`\n\navg, expected value: `0.0`, type: `float64`\n\n",
    "8": "",
    "9": "Following these steps:\n1. Analyze the buggy function and its relationship with buggy class, test code, corresponding error message, the runtime input/output values, the expected input/output values.\n2. Identify potential error locations within the buggy function.\n3. Explain the cause of the bug using the buggy function, the buggy class docs, the failing test, the corresponding error message, the actual input/output variable values, the expected input/output variable values.\n4. Suggest a strategy for fixing the bug.\n5. Given the buggy function below, provide a corrected version. The corrected version should pass the failing test, satisfy the expected input/output values.\n",
    "1.3.3": "Assume that the following list of imports are available in the current environment, so you don't need to import them when generating a fix.\n```python\nimport numpy as np\nimport time\nimport sys\n```\n\n",
    "source_code_body": "# The declaration of the class containing the buggy function\nclass Progbar(object):\n    \"\"\"\n    Displays a progress bar.\n    \n    # Arguments\n        target: Total number of steps expected, None if unknown.\n        interval: Minimum visual progress update interval (in seconds).\n    \"\"\"\n\n\n\n\n    # this is the buggy function you need to fix\n    def update(self, current, values=None, force=False):\n        \"\"\"Updates the progress bar.\n    \n        # Arguments\n            current: Index of current step.\n            values: List of tuples (name, value_for_last_step).\n                The progress bar will display averages for these values.\n            force: Whether to force visual progress update.\n        \"\"\"\n        values = values or []\n        for k, v in values:\n            if k not in self.sum_values:\n                self.sum_values[k] = [v * (current - self.seen_so_far),\n                                      current - self.seen_so_far]\n                self.unique_values.append(k)\n            else:\n                self.sum_values[k][0] += v * (current - self.seen_so_far)\n                self.sum_values[k][1] += (current - self.seen_so_far)\n        self.seen_so_far = current\n    \n        now = time.time()\n        info = ' - %.0fs' % (now - self.start)\n        if self.verbose == 1:\n            if (not force and (now - self.last_update) < self.interval and\n                    current < self.target):\n                return\n    \n            prev_total_width = self.total_width\n            if self._dynamic_display:\n                sys.stdout.write('\\b' * prev_total_width)\n                sys.stdout.write('\\r')\n            else:\n                sys.stdout.write('\\n')\n    \n            if self.target is not None:\n                numdigits = int(np.floor(np.log10(self.target))) + 1\n                barstr = '%%%dd/%d [' % (numdigits, self.target)\n                bar = barstr % current\n                prog = float(current) / self.target\n                prog_width = int(self.width * prog)\n                if prog_width > 0:\n                    bar += ('=' * (prog_width - 1))\n                    if current < self.target:\n                        bar += '>'\n                    else:\n                        bar += '='\n                bar += ('.' * (self.width - prog_width))\n                bar += ']'\n            else:\n                bar = '%7d/Unknown' % current\n    \n            self.total_width = len(bar)\n            sys.stdout.write(bar)\n    \n            if current:\n                time_per_unit = (now - self.start) / current\n            else:\n                time_per_unit = 0\n            if self.target is not None and current < self.target:\n                eta = time_per_unit * (self.target - current)\n                if eta > 3600:\n                    eta_format = '%d:%02d:%02d' % (eta // 3600, (eta % 3600) // 60, eta % 60)\n                elif eta > 60:\n                    eta_format = '%d:%02d' % (eta // 60, eta % 60)\n                else:\n                    eta_format = '%ds' % eta\n    \n                info = ' - ETA: %s' % eta_format\n            else:\n                if time_per_unit >= 1:\n                    info += ' %.0fs/step' % time_per_unit\n                elif time_per_unit >= 1e-3:\n                    info += ' %.0fms/step' % (time_per_unit * 1e3)\n                else:\n                    info += ' %.0fus/step' % (time_per_unit * 1e6)\n    \n            for k in self.unique_values:\n                info += ' - %s:' % k\n                if isinstance(self.sum_values[k], list):\n                    avg = np.mean(\n                        self.sum_values[k][0] / max(1, self.sum_values[k][1]))\n                    if abs(avg) > 1e-3:\n                        info += ' %.4f' % avg\n                    else:\n                        info += ' %.4e' % avg\n                else:\n                    info += ' %s' % self.sum_values[k]\n    \n            self.total_width += len(info)\n            if prev_total_width > self.total_width:\n                info += (' ' * (prev_total_width - self.total_width))\n    \n            if self.target is not None and current >= self.target:\n                info += '\\n'\n    \n            sys.stdout.write(info)\n            sys.stdout.flush()\n    \n        elif self.verbose == 2:\n            if self.target is None or current >= self.target:\n                for k in self.unique_values:\n                    info += ' - %s:' % k\n                    avg = np.mean(\n                        self.sum_values[k][0] / max(1, self.sum_values[k][1]))\n                    if avg > 1e-3:\n                        info += ' %.4f' % avg\n                    else:\n                        info += ' %.4e' % avg\n                info += '\\n'\n    \n                sys.stdout.write(info)\n                sys.stdout.flush()\n    \n        self.last_update = now\n    \n"
}