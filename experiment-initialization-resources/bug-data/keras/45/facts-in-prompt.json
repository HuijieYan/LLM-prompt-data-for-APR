{
    "1": "Assume that the following list of imports are available in the current environment, so you don't need to import them when generating a fix.\n```python\nfrom .. import backend as K\n```\n\n## The source code of the buggy function\n```python\n# The relative path of the buggy file: keras/layers/recurrent.py\n\n\n\n    # this is the buggy function you need to fix\n    def call(self, inputs, states, training=None):\n        # dropout matrices for input units\n        dp_mask = self._dropout_mask\n        # dropout matrices for recurrent units\n        rec_dp_mask = self._recurrent_dropout_mask\n    \n        h_tm1 = states[0]  # previous memory state\n        c_tm1 = states[1]  # previous carry state\n    \n        if self.implementation == 1:\n            if 0 < self.dropout < 1.:\n                inputs_i = inputs * dp_mask[0]\n                inputs_f = inputs * dp_mask[1]\n                inputs_c = inputs * dp_mask[2]\n                inputs_o = inputs * dp_mask[3]\n            else:\n                inputs_i = inputs\n                inputs_f = inputs\n                inputs_c = inputs\n                inputs_o = inputs\n            x_i = K.dot(inputs_i, self.kernel_i) + self.bias_i\n            x_f = K.dot(inputs_f, self.kernel_f) + self.bias_f\n            x_c = K.dot(inputs_c, self.kernel_c) + self.bias_c\n            x_o = K.dot(inputs_o, self.kernel_o) + self.bias_o\n    \n            if 0 < self.recurrent_dropout < 1.:\n                h_tm1_i = h_tm1 * rec_dp_mask[0]\n                h_tm1_f = h_tm1 * rec_dp_mask[1]\n                h_tm1_c = h_tm1 * rec_dp_mask[2]\n                h_tm1_o = h_tm1 * rec_dp_mask[3]\n            else:\n                h_tm1_i = h_tm1\n                h_tm1_f = h_tm1\n                h_tm1_c = h_tm1\n                h_tm1_o = h_tm1\n            i = self.recurrent_activation(x_i + K.dot(h_tm1_i,\n                                                      self.recurrent_kernel_i))\n            f = self.recurrent_activation(x_f + K.dot(h_tm1_f,\n                                                      self.recurrent_kernel_f))\n            c = f * c_tm1 + i * self.activation(x_c + K.dot(h_tm1_c,\n                                                            self.recurrent_kernel_c))\n            o = self.recurrent_activation(x_o + K.dot(h_tm1_o,\n                                                      self.recurrent_kernel_o))\n        else:\n            if 0. < self.dropout < 1.:\n                inputs *= dp_mask[0]\n            z = K.dot(inputs, self.kernel)\n            if 0. < self.recurrent_dropout < 1.:\n                h_tm1 *= rec_dp_mask[0]\n            z += K.dot(h_tm1, self.recurrent_kernel)\n            if self.use_bias:\n                z = K.bias_add(z, self.bias)\n    \n            z0 = z[:, :self.units]\n            z1 = z[:, self.units: 2 * self.units]\n            z2 = z[:, 2 * self.units: 3 * self.units]\n            z3 = z[:, 3 * self.units:]\n    \n            i = self.recurrent_activation(z0)\n            f = self.recurrent_activation(z1)\n            c = f * c_tm1 + i * self.activation(z2)\n            o = self.recurrent_activation(z3)\n    \n        h = o * self.activation(c)\n        if 0 < self.dropout + self.recurrent_dropout:\n            if training is None:\n                h._uses_learning_phase = True\n        return h, [h, c]\n    \n```",
    "2": "# The declaration of the class containing the buggy function\nclass LSTMCell(Layer):\n    \"\"\"\n    Cell class for the LSTM layer.\n    \n    # Arguments\n        units: Positive integer, dimensionality of the output space.\n        activation: Activation function to use\n            (see [activations](../activations.md)).\n            If you pass None, no activation is applied\n            (ie. \"linear\" activation: `a(x) = x`).\n        recurrent_activation: Activation function to use\n            for the recurrent step\n            (see [activations](../activations.md)).\n        use_bias: Boolean, whether the layer uses a bias vector.\n        kernel_initializer: Initializer for the `kernel` weights matrix,\n            used for the linear transformation of the inputs.\n            (see [initializers](../initializers.md)).\n        recurrent_initializer: Initializer for the `recurrent_kernel`\n            weights matrix,\n            used for the linear transformation of the recurrent state.\n            (see [initializers](../initializers.md)).\n        bias_initializer: Initializer for the bias vector\n            (see [initializers](../initializers.md)).\n        unit_forget_bias: Boolean.\n            If True, add 1 to the bias of the forget gate at initialization.\n            Setting it to true will also force `bias_initializer=\"zeros\"`.\n            This is recommended in [Jozefowicz et al.](http://www.jmlr.org/proceedings/papers/v37/jozefowicz15.pdf)\n        kernel_regularizer: Regularizer function applied to\n            the `kernel` weights matrix\n            (see [regularizer](../regularizers.md)).\n        recurrent_regularizer: Regularizer function applied to\n            the `recurrent_kernel` weights matrix\n            (see [regularizer](../regularizers.md)).\n        bias_regularizer: Regularizer function applied to the bias vector\n            (see [regularizer](../regularizers.md)).\n        activity_regularizer: Regularizer function applied to\n            the output of the layer (its \"activation\").\n            (see [regularizer](../regularizers.md)).\n        kernel_constraint: Constraint function applied to\n            the `kernel` weights matrix\n            (see [constraints](../constraints.md)).\n        recurrent_constraint: Constraint function applied to\n            the `recurrent_kernel` weights matrix\n            (see [constraints](../constraints.md)).\n        bias_constraint: Constraint function applied to the bias vector\n            (see [constraints](../constraints.md)).\n        dropout: Float between 0 and 1.\n            Fraction of the units to drop for\n            the linear transformation of the inputs.\n        recurrent_dropout: Float between 0 and 1.\n            Fraction of the units to drop for\n            the linear transformation of the recurrent state.\n        implementation: Implementation mode, either 1 or 2.\n    \"\"\"\n\n\n",
    "3": "# This function from the same file, but not the same class, is called by the buggy function\ndef states(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef states(self, states):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef units(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef activation(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef use_bias(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef dropout(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef recurrent_dropout(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef units(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef activation(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef recurrent_activation(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef use_bias(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef dropout(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef recurrent_dropout(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef implementation(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef units(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef activation(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef recurrent_activation(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef use_bias(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef dropout(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef recurrent_dropout(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef implementation(self):\n    # Please ignore the body of this function\n\n",
    "4": "## A failing test function for the buggy function\n```python\n# The relative path of the failing test file: tests/keras/layers/recurrent_test.py\n\n@rnn_test\ndef test_implementation_mode(layer_class):\n    for mode in [1, 2]:\n        # Without dropout\n        layer_test(layer_class,\n                   kwargs={'units': units,\n                           'implementation': mode},\n                   input_shape=(num_samples, timesteps, embedding_dim))\n        # With dropout\n        layer_test(layer_class,\n                   kwargs={'units': units,\n                           'implementation': mode,\n                           'dropout': 0.1,\n                           'recurrent_dropout': 0.1},\n                   input_shape=(num_samples, timesteps, embedding_dim))\n        # Without bias\n        layer_test(layer_class,\n                   kwargs={'units': units,\n                           'implementation': mode,\n                           'use_bias': False},\n                   input_shape=(num_samples, timesteps, embedding_dim))\n```\n\n\n",
    "5": "### The error message from the failing test\n```text\nlayer_class = <class 'keras.layers.recurrent.LSTM'>\n\n    @rnn_test\n    def test_implementation_mode(layer_class):\n        for mode in [1, 2]:\n            # Without dropout\n            layer_test(layer_class,\n                       kwargs={'units': units,\n                               'implementation': mode},\n                       input_shape=(num_samples, timesteps, embedding_dim))\n            # With dropout\n            layer_test(layer_class,\n                       kwargs={'units': units,\n                               'implementation': mode,\n                               'dropout': 0.1,\n                               'recurrent_dropout': 0.1},\n                       input_shape=(num_samples, timesteps, embedding_dim))\n            # Without bias\n            layer_test(layer_class,\n                       kwargs={'units': units,\n                               'implementation': mode,\n                               'use_bias': False},\n>                      input_shape=(num_samples, timesteps, embedding_dim))\n\ntests/keras/layers/recurrent_test.py:191: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nkeras/utils/test_utils.py:85: in layer_test\n    y = layer(x)\nkeras/layers/recurrent.py:483: in __call__\n    return super(RNN, self).__call__(inputs, **kwargs)\nkeras/engine/topology.py:603: in __call__\n    output = self.call(inputs, **kwargs)\nkeras/layers/recurrent.py:2004: in call\n    initial_state=initial_state)\nkeras/layers/recurrent.py:590: in call\n    input_length=timesteps)\nkeras/backend/tensorflow_backend.py:2533: in rnn\n    outputs, _ = step_function(inputs[0], initial_states + constants)\nkeras/layers/recurrent.py:581: in step\n    return self.cell.call(inputs, states, **kwargs)\nkeras/layers/recurrent.py:1806: in call\n    x_i = K.dot(inputs_i, self.kernel_i) + self.bias_i\n../../envs/keras_45/lib/python3.7/site-packages/tensorflow_core/python/ops/math_ops.py:903: in binary_op_wrapper\n    y, dtype_hint=x.dtype.base_dtype, name=\"y\")\n../../envs/keras_45/lib/python3.7/site-packages/tensorflow_core/python/framework/ops.py:1242: in convert_to_tensor_v2\n    as_ref=False)\n../../envs/keras_45/lib/python3.7/site-packages/tensorflow_core/python/framework/ops.py:1297: in internal_convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n../../envs/keras_45/lib/python3.7/site-packages/tensorflow_core/python/framework/constant_op.py:286: in _constant_tensor_conversion_function\n    return constant(v, dtype=dtype, name=name)\n../../envs/keras_45/lib/python3.7/site-packages/tensorflow_core/python/framework/constant_op.py:227: in constant\n    allow_broadcast=True)\n../../envs/keras_45/lib/python3.7/site-packages/tensorflow_core/python/framework/constant_op.py:265: in _constant_impl\n    allow_broadcast=allow_broadcast))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalues = None, dtype = None, shape = None, verify_shape = False\nallow_broadcast = True\n\n    @tf_export(\"make_tensor_proto\")\n    def make_tensor_proto(values, dtype=None, shape=None, verify_shape=False,\n                          allow_broadcast=False):\n      \"\"\"Create a TensorProto.\n    \n      In TensorFlow 2.0, representing tensors as protos should no longer be a\n      common workflow. That said, this utility function is still useful for\n      generating TF Serving request protos:\n    \n        request = tensorflow_serving.apis.predict_pb2.PredictRequest()\n        request.model_spec.name = \"my_model\"\n        request.model_spec.signature_name = \"serving_default\"\n        request.inputs[\"images\"].CopyFrom(tf.make_tensor_proto(X_new))\n    \n      make_tensor_proto accepts \"values\" of a python scalar, a python list, a\n      numpy ndarray, or a numpy scalar.\n    \n      If \"values\" is a python scalar or a python list, make_tensor_proto\n      first convert it to numpy ndarray. If dtype is None, the\n      conversion tries its best to infer the right numpy data\n      type. Otherwise, the resulting numpy array has a compatible data\n      type with the given dtype.\n    \n      In either case above, the numpy ndarray (either the caller provided\n      or the auto converted) must have the compatible type with dtype.\n    \n      make_tensor_proto then converts the numpy array to a tensor proto.\n    \n      If \"shape\" is None, the resulting tensor proto represents the numpy\n      array precisely.\n    \n      Otherwise, \"shape\" specifies the tensor's shape and the numpy array\n      can not have more elements than what \"shape\" specifies.\n    \n      Args:\n        values:         Values to put in the TensorProto.\n        dtype:          Optional tensor_pb2 DataType value.\n        shape:          List of integers representing the dimensions of tensor.\n        verify_shape:   Boolean that enables verification of a shape of values.\n        allow_broadcast:  Boolean that enables allowing scalars and 1 length vector\n            broadcasting. Cannot be true when verify_shape is true.\n    \n      Returns:\n        A `TensorProto`. Depending on the type, it may contain data in the\n        \"tensor_content\" attribute, which is not directly useful to Python programs.\n        To access the values you should convert the proto back to a numpy ndarray\n        with `tf.make_ndarray(proto)`.\n    \n        If `values` is a `TensorProto`, it is immediately returned; `dtype` and\n        `shape` are ignored.\n    \n      Raises:\n        TypeError:  if unsupported types are provided.\n        ValueError: if arguments have inappropriate values or if verify_shape is\n         True and shape of values is not equals to a shape from the argument.\n    \n      \"\"\"\n      if allow_broadcast and verify_shape:\n        raise ValueError(\"allow_broadcast and verify_shape are not both allowed.\")\n      if isinstance(values, tensor_pb2.TensorProto):\n        return values\n    \n      if dtype:\n        dtype = dtypes.as_dtype(dtype)\n    \n      is_quantized = (\n          dtype in [\n              dtypes.qint8, dtypes.quint8, dtypes.qint16, dtypes.quint16,\n              dtypes.qint32\n          ])\n    \n      if _is_array_like(values):\n        values = np.asarray(values)\n    \n      # We first convert value to a numpy array or scalar.\n      if isinstance(values, (np.ndarray, np.generic)):\n        if dtype and dtype.is_numpy_compatible:\n          nparray = values.astype(dtype.as_numpy_dtype)\n        else:\n          nparray = values\n      else:\n        if values is None:\n>         raise ValueError(\"None values not supported.\")\nE         ValueError: None values not supported.\n\n../../envs/keras_45/lib/python3.7/site-packages/tensorflow_core/python/framework/tensor_util.py:437: ValueError\n\n```\n",
    "6": "## Runtime values and types of variables inside the buggy function\nEach case below includes input parameter values and types, and the values and types of relevant variables at the function's return, derived from executing failing tests. If an input parameter is not reflected in the output, it is assumed to remain unchanged. Note that some of these values at the function's return might be incorrect. Analyze these cases to identify why the tests are failing to effectively fix the bug.\n\n### Case 1\n#### Runtime values and types of the input parameters of the buggy function\nstates, value: `[<tf.Tensor 'lstm_1/Tile:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_1/Tile_1:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_1/strided_slice_13:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_1/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_1/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_1/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_1/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias_i, value: `<tf.Tensor 'lstm_1/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_1/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_1/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_1/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_1/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_1/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_1/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_1/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_1/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_1/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.bias, value: `<tf.Variable 'lstm_1/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nh_tm1, value: `<tf.Tensor 'lstm_1/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_1/Tile_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, value: `<tf.Tensor 'lstm_1/strided_slice_13:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, value: `<tf.Tensor 'lstm_1/strided_slice_13:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, value: `<tf.Tensor 'lstm_1/strided_slice_13:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, value: `<tf.Tensor 'lstm_1/strided_slice_13:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nx_i, value: `<tf.Tensor 'lstm_1/BiasAdd:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_f, value: `<tf.Tensor 'lstm_1/BiasAdd_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_c, value: `<tf.Tensor 'lstm_1/BiasAdd_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_o, value: `<tf.Tensor 'lstm_1/BiasAdd_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, value: `<tf.Tensor 'lstm_1/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, value: `<tf.Tensor 'lstm_1/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, value: `<tf.Tensor 'lstm_1/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, value: `<tf.Tensor 'lstm_1/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_1/clip_by_value:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_1/clip_by_value_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_1/add_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_1/clip_by_value_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_1/mul_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\n### Case 2\n#### Runtime values and types of the input parameters of the buggy function\nstates, value: `(<tf.Tensor 'lstm_1/while/Identity_2:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_1/while/Identity_3:0' shape=(?, 3) dtype=float32>)`, type: `tuple`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_1/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_1/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_1/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_1/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_1/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias_i, value: `<tf.Tensor 'lstm_1/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_1/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_1/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_1/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_1/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_1/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_1/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_1/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_1/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_1/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.bias, value: `<tf.Variable 'lstm_1/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nh_tm1, value: `<tf.Tensor 'lstm_1/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_1/while/Identity_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, value: `<tf.Tensor 'lstm_1/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, value: `<tf.Tensor 'lstm_1/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, value: `<tf.Tensor 'lstm_1/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, value: `<tf.Tensor 'lstm_1/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nx_i, value: `<tf.Tensor 'lstm_1/while/BiasAdd:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_f, value: `<tf.Tensor 'lstm_1/while/BiasAdd_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_c, value: `<tf.Tensor 'lstm_1/while/BiasAdd_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_o, value: `<tf.Tensor 'lstm_1/while/BiasAdd_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, value: `<tf.Tensor 'lstm_1/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, value: `<tf.Tensor 'lstm_1/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, value: `<tf.Tensor 'lstm_1/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, value: `<tf.Tensor 'lstm_1/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_1/while/clip_by_value:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_1/while/clip_by_value_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_1/while/add_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_1/while/clip_by_value_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_1/while/mul_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\n### Case 3\n#### Runtime values and types of the input parameters of the buggy function\nstates, value: `[<tf.Tensor 'lstm_1_1/Tile:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_1_1/Tile_1:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_1_1/strided_slice_13:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_1_1/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_1_1/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_1_1/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_1_1/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias_i, value: `<tf.Tensor 'lstm_1_1/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_1_1/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_1_1/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_1_1/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_1_1/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_1_1/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_1_1/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_1_1/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_1_1/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_1_1/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.bias, value: `<tf.Variable 'lstm_1_1/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nh_tm1, value: `<tf.Tensor 'lstm_1_1/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_1_1/Tile_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, value: `<tf.Tensor 'lstm_1_1/strided_slice_13:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, value: `<tf.Tensor 'lstm_1_1/strided_slice_13:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, value: `<tf.Tensor 'lstm_1_1/strided_slice_13:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, value: `<tf.Tensor 'lstm_1_1/strided_slice_13:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nx_i, value: `<tf.Tensor 'lstm_1_1/BiasAdd:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_f, value: `<tf.Tensor 'lstm_1_1/BiasAdd_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_c, value: `<tf.Tensor 'lstm_1_1/BiasAdd_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_o, value: `<tf.Tensor 'lstm_1_1/BiasAdd_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, value: `<tf.Tensor 'lstm_1_1/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, value: `<tf.Tensor 'lstm_1_1/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, value: `<tf.Tensor 'lstm_1_1/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, value: `<tf.Tensor 'lstm_1_1/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_1_1/clip_by_value:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_1_1/clip_by_value_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_1_1/add_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_1_1/clip_by_value_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_1_1/mul_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\n### Case 4\n#### Runtime values and types of the input parameters of the buggy function\nstates, value: `(<tf.Tensor 'lstm_1_1/while/Identity_2:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_1_1/while/Identity_3:0' shape=(?, 3) dtype=float32>)`, type: `tuple`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_1_1/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_1_1/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_1_1/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_1_1/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_1_1/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias_i, value: `<tf.Tensor 'lstm_1_1/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_1_1/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_1_1/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_1_1/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_1_1/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_1_1/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_1_1/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_1_1/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_1_1/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_1_1/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.bias, value: `<tf.Variable 'lstm_1_1/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nh_tm1, value: `<tf.Tensor 'lstm_1_1/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_1_1/while/Identity_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, value: `<tf.Tensor 'lstm_1_1/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, value: `<tf.Tensor 'lstm_1_1/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, value: `<tf.Tensor 'lstm_1_1/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, value: `<tf.Tensor 'lstm_1_1/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nx_i, value: `<tf.Tensor 'lstm_1_1/while/BiasAdd:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_f, value: `<tf.Tensor 'lstm_1_1/while/BiasAdd_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_c, value: `<tf.Tensor 'lstm_1_1/while/BiasAdd_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_o, value: `<tf.Tensor 'lstm_1_1/while/BiasAdd_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, value: `<tf.Tensor 'lstm_1_1/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, value: `<tf.Tensor 'lstm_1_1/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, value: `<tf.Tensor 'lstm_1_1/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, value: `<tf.Tensor 'lstm_1_1/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_1_1/while/clip_by_value:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_1_1/while/clip_by_value_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_1_1/while/add_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_1_1/while/clip_by_value_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_1_1/while/mul_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\n### Case 5\n#### Runtime values and types of the input parameters of the buggy function\nstates, value: `[<tf.Tensor 'lstm_1_2/Tile:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_1_2/Tile_1:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_1_2/strided_slice_13:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_1_2/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_1_2/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_1_2/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_1_2/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias_i, value: `<tf.Tensor 'lstm_1_2/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_1_2/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_1_2/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_1_2/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_1_2/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_1_2/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_1_2/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_1_2/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_1_2/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_1_2/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.bias, value: `<tf.Variable 'lstm_1_2/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nh_tm1, value: `<tf.Tensor 'lstm_1_2/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_1_2/Tile_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, value: `<tf.Tensor 'lstm_1_2/strided_slice_13:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, value: `<tf.Tensor 'lstm_1_2/strided_slice_13:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, value: `<tf.Tensor 'lstm_1_2/strided_slice_13:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, value: `<tf.Tensor 'lstm_1_2/strided_slice_13:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nx_i, value: `<tf.Tensor 'lstm_1_2/BiasAdd:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_f, value: `<tf.Tensor 'lstm_1_2/BiasAdd_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_c, value: `<tf.Tensor 'lstm_1_2/BiasAdd_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_o, value: `<tf.Tensor 'lstm_1_2/BiasAdd_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, value: `<tf.Tensor 'lstm_1_2/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, value: `<tf.Tensor 'lstm_1_2/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, value: `<tf.Tensor 'lstm_1_2/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, value: `<tf.Tensor 'lstm_1_2/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_1_2/clip_by_value:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_1_2/clip_by_value_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_1_2/add_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_1_2/clip_by_value_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_1_2/mul_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\n### Case 6\n#### Runtime values and types of the input parameters of the buggy function\nstates, value: `(<tf.Tensor 'lstm_1_2/while/Identity_2:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_1_2/while/Identity_3:0' shape=(2, 3) dtype=float32>)`, type: `tuple`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_1_2/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_1_2/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_1_2/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_1_2/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_1_2/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias_i, value: `<tf.Tensor 'lstm_1_2/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_1_2/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_1_2/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_1_2/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_1_2/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_1_2/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_1_2/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_1_2/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_1_2/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_1_2/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.bias, value: `<tf.Variable 'lstm_1_2/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nh_tm1, value: `<tf.Tensor 'lstm_1_2/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_1_2/while/Identity_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, value: `<tf.Tensor 'lstm_1_2/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, value: `<tf.Tensor 'lstm_1_2/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, value: `<tf.Tensor 'lstm_1_2/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, value: `<tf.Tensor 'lstm_1_2/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nx_i, value: `<tf.Tensor 'lstm_1_2/while/BiasAdd:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_f, value: `<tf.Tensor 'lstm_1_2/while/BiasAdd_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_c, value: `<tf.Tensor 'lstm_1_2/while/BiasAdd_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_o, value: `<tf.Tensor 'lstm_1_2/while/BiasAdd_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, value: `<tf.Tensor 'lstm_1_2/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, value: `<tf.Tensor 'lstm_1_2/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, value: `<tf.Tensor 'lstm_1_2/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, value: `<tf.Tensor 'lstm_1_2/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_1_2/while/clip_by_value:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_1_2/while/clip_by_value_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_1_2/while/add_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_1_2/while/clip_by_value_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_1_2/while/mul_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\n### Case 7\n#### Runtime values and types of the input parameters of the buggy function\nstates, value: `[<tf.Tensor 'lstm_1_3/Tile:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_1_3/Tile_1:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_1_3/strided_slice_13:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_1_3/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_1_3/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_1_3/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_1_3/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias_i, value: `<tf.Tensor 'lstm_1_3/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_1_3/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_1_3/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_1_3/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_1_3/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_1_3/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_1_3/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_1_3/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_1_3/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_1_3/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.bias, value: `<tf.Variable 'lstm_1_3/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nh_tm1, value: `<tf.Tensor 'lstm_1_3/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_1_3/Tile_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, value: `<tf.Tensor 'lstm_1_3/strided_slice_13:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, value: `<tf.Tensor 'lstm_1_3/strided_slice_13:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, value: `<tf.Tensor 'lstm_1_3/strided_slice_13:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, value: `<tf.Tensor 'lstm_1_3/strided_slice_13:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nx_i, value: `<tf.Tensor 'lstm_1_3/BiasAdd:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_f, value: `<tf.Tensor 'lstm_1_3/BiasAdd_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_c, value: `<tf.Tensor 'lstm_1_3/BiasAdd_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_o, value: `<tf.Tensor 'lstm_1_3/BiasAdd_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, value: `<tf.Tensor 'lstm_1_3/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, value: `<tf.Tensor 'lstm_1_3/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, value: `<tf.Tensor 'lstm_1_3/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, value: `<tf.Tensor 'lstm_1_3/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_1_3/clip_by_value:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_1_3/clip_by_value_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_1_3/add_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_1_3/clip_by_value_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_1_3/mul_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\n### Case 8\n#### Runtime values and types of the input parameters of the buggy function\nstates, value: `(<tf.Tensor 'lstm_1_3/while/Identity_2:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_1_3/while/Identity_3:0' shape=(2, 3) dtype=float32>)`, type: `tuple`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_1_3/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_1_3/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_1_3/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_1_3/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_1_3/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias_i, value: `<tf.Tensor 'lstm_1_3/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_1_3/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_1_3/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_1_3/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_1_3/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_1_3/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_1_3/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_1_3/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_1_3/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_1_3/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.bias, value: `<tf.Variable 'lstm_1_3/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nh_tm1, value: `<tf.Tensor 'lstm_1_3/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_1_3/while/Identity_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, value: `<tf.Tensor 'lstm_1_3/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, value: `<tf.Tensor 'lstm_1_3/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, value: `<tf.Tensor 'lstm_1_3/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, value: `<tf.Tensor 'lstm_1_3/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nx_i, value: `<tf.Tensor 'lstm_1_3/while/BiasAdd:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_f, value: `<tf.Tensor 'lstm_1_3/while/BiasAdd_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_c, value: `<tf.Tensor 'lstm_1_3/while/BiasAdd_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_o, value: `<tf.Tensor 'lstm_1_3/while/BiasAdd_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, value: `<tf.Tensor 'lstm_1_3/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, value: `<tf.Tensor 'lstm_1_3/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, value: `<tf.Tensor 'lstm_1_3/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, value: `<tf.Tensor 'lstm_1_3/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_1_3/while/clip_by_value:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_1_3/while/clip_by_value_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_1_3/while/add_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_1_3/while/clip_by_value_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_1_3/while/mul_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\n### Case 9\n#### Runtime values and types of the input parameters of the buggy function\nself._dropout_mask, value: `[<tf.Tensor 'lstm_2/cond/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2/cond_1/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2/cond_2/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2/cond_3/Merge:0' shape=(?, 4) dtype=float32>]`, type: `list`\n\nself._recurrent_dropout_mask, value: `[<tf.Tensor 'lstm_2/cond_4/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2/cond_5/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2/cond_6/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2/cond_7/Merge:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nstates, value: `[<tf.Tensor 'lstm_2/Tile_1:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2/Tile_2:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.1`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_2/strided_slice_15:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_2/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_2/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_2/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_2/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias_i, value: `<tf.Tensor 'lstm_2/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_2/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_2/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_2/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.1`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_2/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_2/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_2/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_2/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_2/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_2/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.bias, value: `<tf.Variable 'lstm_2/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\ndp_mask, value: `[<tf.Tensor 'lstm_2/cond/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2/cond_1/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2/cond_2/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2/cond_3/Merge:0' shape=(?, 4) dtype=float32>]`, type: `list`\n\nrec_dp_mask, value: `[<tf.Tensor 'lstm_2/cond_4/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2/cond_5/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2/cond_6/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2/cond_7/Merge:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nh_tm1, value: `<tf.Tensor 'lstm_2/Tile_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_2/Tile_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, value: `<tf.Tensor 'lstm_2/mul:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, value: `<tf.Tensor 'lstm_2/mul_1:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, value: `<tf.Tensor 'lstm_2/mul_2:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, value: `<tf.Tensor 'lstm_2/mul_3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nx_i, value: `<tf.Tensor 'lstm_2/BiasAdd:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_f, value: `<tf.Tensor 'lstm_2/BiasAdd_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_c, value: `<tf.Tensor 'lstm_2/BiasAdd_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_o, value: `<tf.Tensor 'lstm_2/BiasAdd_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, value: `<tf.Tensor 'lstm_2/mul_4:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, value: `<tf.Tensor 'lstm_2/mul_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, value: `<tf.Tensor 'lstm_2/mul_6:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, value: `<tf.Tensor 'lstm_2/mul_7:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_2/clip_by_value:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_2/clip_by_value_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_2/add_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_2/clip_by_value_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_2/mul_13:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh._uses_learning_phase, value: `True`, type: `bool`\n\n### Case 10\n#### Runtime values and types of the input parameters of the buggy function\nself._dropout_mask, value: `[<tf.Tensor 'lstm_2/cond/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2/cond_1/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2/cond_2/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2/cond_3/Merge:0' shape=(?, 4) dtype=float32>]`, type: `list`\n\nself._recurrent_dropout_mask, value: `[<tf.Tensor 'lstm_2/cond_4/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2/cond_5/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2/cond_6/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2/cond_7/Merge:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nstates, value: `(<tf.Tensor 'lstm_2/while/Identity_2:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2/while/Identity_3:0' shape=(?, 3) dtype=float32>)`, type: `tuple`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.1`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_2/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_2/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_2/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_2/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_2/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias_i, value: `<tf.Tensor 'lstm_2/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_2/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_2/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_2/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.1`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_2/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_2/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_2/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_2/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_2/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_2/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.bias, value: `<tf.Variable 'lstm_2/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\ndp_mask, value: `[<tf.Tensor 'lstm_2/cond/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2/cond_1/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2/cond_2/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2/cond_3/Merge:0' shape=(?, 4) dtype=float32>]`, type: `list`\n\nrec_dp_mask, value: `[<tf.Tensor 'lstm_2/cond_4/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2/cond_5/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2/cond_6/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2/cond_7/Merge:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nh_tm1, value: `<tf.Tensor 'lstm_2/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_2/while/Identity_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, value: `<tf.Tensor 'lstm_2/while/mul:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, value: `<tf.Tensor 'lstm_2/while/mul_1:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, value: `<tf.Tensor 'lstm_2/while/mul_2:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, value: `<tf.Tensor 'lstm_2/while/mul_3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nx_i, value: `<tf.Tensor 'lstm_2/while/BiasAdd:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_f, value: `<tf.Tensor 'lstm_2/while/BiasAdd_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_c, value: `<tf.Tensor 'lstm_2/while/BiasAdd_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_o, value: `<tf.Tensor 'lstm_2/while/BiasAdd_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, value: `<tf.Tensor 'lstm_2/while/mul_4:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, value: `<tf.Tensor 'lstm_2/while/mul_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, value: `<tf.Tensor 'lstm_2/while/mul_6:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, value: `<tf.Tensor 'lstm_2/while/mul_7:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_2/while/clip_by_value:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_2/while/clip_by_value_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_2/while/add_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_2/while/clip_by_value_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_2/while/mul_13:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh._uses_learning_phase, value: `True`, type: `bool`\n\n### Case 11\n#### Runtime values and types of the input parameters of the buggy function\nself._dropout_mask, value: `[<tf.Tensor 'lstm_2_1/cond/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_1/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_2/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_3/Merge:0' shape=(?, 4) dtype=float32>]`, type: `list`\n\nself._recurrent_dropout_mask, value: `[<tf.Tensor 'lstm_2_1/cond_4/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_5/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_6/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_7/Merge:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nstates, value: `[<tf.Tensor 'lstm_2_1/Tile_1:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2_1/Tile_2:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.1`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_2_1/strided_slice_15:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_2_1/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_2_1/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_2_1/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_2_1/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias_i, value: `<tf.Tensor 'lstm_2_1/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_2_1/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_2_1/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_2_1/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.1`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_2_1/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_2_1/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_2_1/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_2_1/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_2_1/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_2_1/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.bias, value: `<tf.Variable 'lstm_2_1/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\ndp_mask, value: `[<tf.Tensor 'lstm_2_1/cond/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_1/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_2/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_3/Merge:0' shape=(?, 4) dtype=float32>]`, type: `list`\n\nrec_dp_mask, value: `[<tf.Tensor 'lstm_2_1/cond_4/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_5/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_6/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_7/Merge:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nh_tm1, value: `<tf.Tensor 'lstm_2_1/Tile_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_2_1/Tile_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, value: `<tf.Tensor 'lstm_2_1/mul:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, value: `<tf.Tensor 'lstm_2_1/mul_1:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, value: `<tf.Tensor 'lstm_2_1/mul_2:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, value: `<tf.Tensor 'lstm_2_1/mul_3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nx_i, value: `<tf.Tensor 'lstm_2_1/BiasAdd:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_f, value: `<tf.Tensor 'lstm_2_1/BiasAdd_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_c, value: `<tf.Tensor 'lstm_2_1/BiasAdd_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_o, value: `<tf.Tensor 'lstm_2_1/BiasAdd_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, value: `<tf.Tensor 'lstm_2_1/mul_4:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, value: `<tf.Tensor 'lstm_2_1/mul_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, value: `<tf.Tensor 'lstm_2_1/mul_6:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, value: `<tf.Tensor 'lstm_2_1/mul_7:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_2_1/clip_by_value:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_2_1/clip_by_value_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_2_1/add_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_2_1/clip_by_value_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_2_1/mul_13:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh._uses_learning_phase, value: `True`, type: `bool`\n\n### Case 12\n#### Runtime values and types of the input parameters of the buggy function\nself._dropout_mask, value: `[<tf.Tensor 'lstm_2_1/cond/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_1/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_2/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_3/Merge:0' shape=(?, 4) dtype=float32>]`, type: `list`\n\nself._recurrent_dropout_mask, value: `[<tf.Tensor 'lstm_2_1/cond_4/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_5/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_6/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_7/Merge:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nstates, value: `(<tf.Tensor 'lstm_2_1/while/Identity_2:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2_1/while/Identity_3:0' shape=(?, 3) dtype=float32>)`, type: `tuple`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.1`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_2_1/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_2_1/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_2_1/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_2_1/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_2_1/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias_i, value: `<tf.Tensor 'lstm_2_1/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_2_1/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_2_1/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_2_1/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.1`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_2_1/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_2_1/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_2_1/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_2_1/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_2_1/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_2_1/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.bias, value: `<tf.Variable 'lstm_2_1/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\ndp_mask, value: `[<tf.Tensor 'lstm_2_1/cond/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_1/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_2/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_3/Merge:0' shape=(?, 4) dtype=float32>]`, type: `list`\n\nrec_dp_mask, value: `[<tf.Tensor 'lstm_2_1/cond_4/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_5/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_6/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_7/Merge:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nh_tm1, value: `<tf.Tensor 'lstm_2_1/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_2_1/while/Identity_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, value: `<tf.Tensor 'lstm_2_1/while/mul:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, value: `<tf.Tensor 'lstm_2_1/while/mul_1:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, value: `<tf.Tensor 'lstm_2_1/while/mul_2:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, value: `<tf.Tensor 'lstm_2_1/while/mul_3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nx_i, value: `<tf.Tensor 'lstm_2_1/while/BiasAdd:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_f, value: `<tf.Tensor 'lstm_2_1/while/BiasAdd_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_c, value: `<tf.Tensor 'lstm_2_1/while/BiasAdd_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_o, value: `<tf.Tensor 'lstm_2_1/while/BiasAdd_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, value: `<tf.Tensor 'lstm_2_1/while/mul_4:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, value: `<tf.Tensor 'lstm_2_1/while/mul_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, value: `<tf.Tensor 'lstm_2_1/while/mul_6:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, value: `<tf.Tensor 'lstm_2_1/while/mul_7:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_2_1/while/clip_by_value:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_2_1/while/clip_by_value_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_2_1/while/add_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_2_1/while/clip_by_value_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_2_1/while/mul_13:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh._uses_learning_phase, value: `True`, type: `bool`\n\n### Case 13\n#### Runtime values and types of the input parameters of the buggy function\nself._dropout_mask, value: `[<tf.Tensor 'lstm_2_2/cond/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_1/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_2/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_3/Merge:0' shape=(2, 4) dtype=float32>]`, type: `list`\n\nself._recurrent_dropout_mask, value: `[<tf.Tensor 'lstm_2_2/cond_4/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_5/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_6/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_7/Merge:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nstates, value: `[<tf.Tensor 'lstm_2_2/Tile_1:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_2/Tile_2:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.1`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_2_2/strided_slice_15:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_2_2/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_2_2/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_2_2/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_2_2/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias_i, value: `<tf.Tensor 'lstm_2_2/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_2_2/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_2_2/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_2_2/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.1`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_2_2/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_2_2/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_2_2/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_2_2/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_2_2/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_2_2/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.bias, value: `<tf.Variable 'lstm_2_2/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\ndp_mask, value: `[<tf.Tensor 'lstm_2_2/cond/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_1/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_2/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_3/Merge:0' shape=(2, 4) dtype=float32>]`, type: `list`\n\nrec_dp_mask, value: `[<tf.Tensor 'lstm_2_2/cond_4/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_5/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_6/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_7/Merge:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nh_tm1, value: `<tf.Tensor 'lstm_2_2/Tile_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_2_2/Tile_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, value: `<tf.Tensor 'lstm_2_2/mul:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, value: `<tf.Tensor 'lstm_2_2/mul_1:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, value: `<tf.Tensor 'lstm_2_2/mul_2:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, value: `<tf.Tensor 'lstm_2_2/mul_3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nx_i, value: `<tf.Tensor 'lstm_2_2/BiasAdd:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_f, value: `<tf.Tensor 'lstm_2_2/BiasAdd_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_c, value: `<tf.Tensor 'lstm_2_2/BiasAdd_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_o, value: `<tf.Tensor 'lstm_2_2/BiasAdd_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, value: `<tf.Tensor 'lstm_2_2/mul_4:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, value: `<tf.Tensor 'lstm_2_2/mul_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, value: `<tf.Tensor 'lstm_2_2/mul_6:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, value: `<tf.Tensor 'lstm_2_2/mul_7:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_2_2/clip_by_value:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_2_2/clip_by_value_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_2_2/add_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_2_2/clip_by_value_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_2_2/mul_13:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh._uses_learning_phase, value: `True`, type: `bool`\n\n### Case 14\n#### Runtime values and types of the input parameters of the buggy function\nself._dropout_mask, value: `[<tf.Tensor 'lstm_2_2/cond/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_1/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_2/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_3/Merge:0' shape=(2, 4) dtype=float32>]`, type: `list`\n\nself._recurrent_dropout_mask, value: `[<tf.Tensor 'lstm_2_2/cond_4/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_5/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_6/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_7/Merge:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nstates, value: `(<tf.Tensor 'lstm_2_2/while/Identity_2:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_2/while/Identity_3:0' shape=(2, 3) dtype=float32>)`, type: `tuple`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.1`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_2_2/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_2_2/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_2_2/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_2_2/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_2_2/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias_i, value: `<tf.Tensor 'lstm_2_2/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_2_2/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_2_2/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_2_2/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.1`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_2_2/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_2_2/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_2_2/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_2_2/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_2_2/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_2_2/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.bias, value: `<tf.Variable 'lstm_2_2/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\ndp_mask, value: `[<tf.Tensor 'lstm_2_2/cond/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_1/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_2/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_3/Merge:0' shape=(2, 4) dtype=float32>]`, type: `list`\n\nrec_dp_mask, value: `[<tf.Tensor 'lstm_2_2/cond_4/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_5/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_6/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_7/Merge:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nh_tm1, value: `<tf.Tensor 'lstm_2_2/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_2_2/while/Identity_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, value: `<tf.Tensor 'lstm_2_2/while/mul:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, value: `<tf.Tensor 'lstm_2_2/while/mul_1:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, value: `<tf.Tensor 'lstm_2_2/while/mul_2:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, value: `<tf.Tensor 'lstm_2_2/while/mul_3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nx_i, value: `<tf.Tensor 'lstm_2_2/while/BiasAdd:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_f, value: `<tf.Tensor 'lstm_2_2/while/BiasAdd_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_c, value: `<tf.Tensor 'lstm_2_2/while/BiasAdd_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_o, value: `<tf.Tensor 'lstm_2_2/while/BiasAdd_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, value: `<tf.Tensor 'lstm_2_2/while/mul_4:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, value: `<tf.Tensor 'lstm_2_2/while/mul_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, value: `<tf.Tensor 'lstm_2_2/while/mul_6:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, value: `<tf.Tensor 'lstm_2_2/while/mul_7:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_2_2/while/clip_by_value:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_2_2/while/clip_by_value_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_2_2/while/add_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_2_2/while/clip_by_value_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_2_2/while/mul_13:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh._uses_learning_phase, value: `True`, type: `bool`\n\n### Case 15\n#### Runtime values and types of the input parameters of the buggy function\nself._dropout_mask, value: `[<tf.Tensor 'lstm_2_3/cond/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_1/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_2/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_3/Merge:0' shape=(2, 4) dtype=float32>]`, type: `list`\n\nself._recurrent_dropout_mask, value: `[<tf.Tensor 'lstm_2_3/cond_4/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_5/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_6/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_7/Merge:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nstates, value: `[<tf.Tensor 'lstm_2_3/Tile_1:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_3/Tile_2:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.1`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_2_3/strided_slice_15:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_2_3/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_2_3/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_2_3/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_2_3/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias_i, value: `<tf.Tensor 'lstm_2_3/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_2_3/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_2_3/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_2_3/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.1`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_2_3/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_2_3/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_2_3/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_2_3/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_2_3/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_2_3/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.bias, value: `<tf.Variable 'lstm_2_3/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\ndp_mask, value: `[<tf.Tensor 'lstm_2_3/cond/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_1/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_2/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_3/Merge:0' shape=(2, 4) dtype=float32>]`, type: `list`\n\nrec_dp_mask, value: `[<tf.Tensor 'lstm_2_3/cond_4/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_5/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_6/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_7/Merge:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nh_tm1, value: `<tf.Tensor 'lstm_2_3/Tile_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_2_3/Tile_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, value: `<tf.Tensor 'lstm_2_3/mul:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, value: `<tf.Tensor 'lstm_2_3/mul_1:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, value: `<tf.Tensor 'lstm_2_3/mul_2:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, value: `<tf.Tensor 'lstm_2_3/mul_3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nx_i, value: `<tf.Tensor 'lstm_2_3/BiasAdd:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_f, value: `<tf.Tensor 'lstm_2_3/BiasAdd_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_c, value: `<tf.Tensor 'lstm_2_3/BiasAdd_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_o, value: `<tf.Tensor 'lstm_2_3/BiasAdd_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, value: `<tf.Tensor 'lstm_2_3/mul_4:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, value: `<tf.Tensor 'lstm_2_3/mul_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, value: `<tf.Tensor 'lstm_2_3/mul_6:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, value: `<tf.Tensor 'lstm_2_3/mul_7:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_2_3/clip_by_value:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_2_3/clip_by_value_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_2_3/add_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_2_3/clip_by_value_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_2_3/mul_13:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh._uses_learning_phase, value: `True`, type: `bool`\n\n### Case 16\n#### Runtime values and types of the input parameters of the buggy function\nself._dropout_mask, value: `[<tf.Tensor 'lstm_2_3/cond/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_1/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_2/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_3/Merge:0' shape=(2, 4) dtype=float32>]`, type: `list`\n\nself._recurrent_dropout_mask, value: `[<tf.Tensor 'lstm_2_3/cond_4/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_5/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_6/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_7/Merge:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nstates, value: `(<tf.Tensor 'lstm_2_3/while/Identity_2:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_3/while/Identity_3:0' shape=(2, 3) dtype=float32>)`, type: `tuple`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.1`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_2_3/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_2_3/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_2_3/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_2_3/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_2_3/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias_i, value: `<tf.Tensor 'lstm_2_3/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_2_3/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_2_3/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_2_3/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.1`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_2_3/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_2_3/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_2_3/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_2_3/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_2_3/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_2_3/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.bias, value: `<tf.Variable 'lstm_2_3/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\ndp_mask, value: `[<tf.Tensor 'lstm_2_3/cond/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_1/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_2/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_3/Merge:0' shape=(2, 4) dtype=float32>]`, type: `list`\n\nrec_dp_mask, value: `[<tf.Tensor 'lstm_2_3/cond_4/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_5/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_6/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_7/Merge:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nh_tm1, value: `<tf.Tensor 'lstm_2_3/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_2_3/while/Identity_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, value: `<tf.Tensor 'lstm_2_3/while/mul:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, value: `<tf.Tensor 'lstm_2_3/while/mul_1:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, value: `<tf.Tensor 'lstm_2_3/while/mul_2:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, value: `<tf.Tensor 'lstm_2_3/while/mul_3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nx_i, value: `<tf.Tensor 'lstm_2_3/while/BiasAdd:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_f, value: `<tf.Tensor 'lstm_2_3/while/BiasAdd_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_c, value: `<tf.Tensor 'lstm_2_3/while/BiasAdd_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_o, value: `<tf.Tensor 'lstm_2_3/while/BiasAdd_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, value: `<tf.Tensor 'lstm_2_3/while/mul_4:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, value: `<tf.Tensor 'lstm_2_3/while/mul_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, value: `<tf.Tensor 'lstm_2_3/while/mul_6:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, value: `<tf.Tensor 'lstm_2_3/while/mul_7:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_2_3/while/clip_by_value:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_2_3/while/clip_by_value_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_2_3/while/add_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_2_3/while/clip_by_value_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_2_3/while/mul_13:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh._uses_learning_phase, value: `True`, type: `bool`\n\n### Case 17\n#### Runtime values and types of the input parameters of the buggy function\nstates, value: `[<tf.Tensor 'lstm_3/Tile:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_3/Tile_1:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_3/strided_slice_9:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_3/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_3/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_3/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_3/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `False`, type: `bool`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_3/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_3/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_3/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_3/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_3/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_3/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nh_tm1, value: `<tf.Tensor 'lstm_3/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_3/Tile_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, value: `<tf.Tensor 'lstm_3/strided_slice_9:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, value: `<tf.Tensor 'lstm_3/strided_slice_9:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, value: `<tf.Tensor 'lstm_3/strided_slice_9:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, value: `<tf.Tensor 'lstm_3/strided_slice_9:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nx_i, value: `<tf.Tensor 'lstm_3/MatMul:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_f, value: `<tf.Tensor 'lstm_3/MatMul_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_c, value: `<tf.Tensor 'lstm_3/MatMul_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_o, value: `<tf.Tensor 'lstm_3/MatMul_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, value: `<tf.Tensor 'lstm_3/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, value: `<tf.Tensor 'lstm_3/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, value: `<tf.Tensor 'lstm_3/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, value: `<tf.Tensor 'lstm_3/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_3/clip_by_value:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_3/clip_by_value_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_3/add_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_3/clip_by_value_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_3/mul_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\n### Case 18\n#### Runtime values and types of the input parameters of the buggy function\nstates, value: `(<tf.Tensor 'lstm_3/while/Identity_2:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_3/while/Identity_3:0' shape=(?, 3) dtype=float32>)`, type: `tuple`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_3/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_3/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_3/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_3/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_3/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `False`, type: `bool`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_3/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_3/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_3/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_3/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_3/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_3/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nh_tm1, value: `<tf.Tensor 'lstm_3/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_3/while/Identity_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, value: `<tf.Tensor 'lstm_3/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, value: `<tf.Tensor 'lstm_3/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, value: `<tf.Tensor 'lstm_3/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, value: `<tf.Tensor 'lstm_3/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nx_i, value: `<tf.Tensor 'lstm_3/while/MatMul:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_f, value: `<tf.Tensor 'lstm_3/while/MatMul_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_c, value: `<tf.Tensor 'lstm_3/while/MatMul_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_o, value: `<tf.Tensor 'lstm_3/while/MatMul_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, value: `<tf.Tensor 'lstm_3/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, value: `<tf.Tensor 'lstm_3/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, value: `<tf.Tensor 'lstm_3/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, value: `<tf.Tensor 'lstm_3/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_3/while/clip_by_value:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_3/while/clip_by_value_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_3/while/add_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_3/while/clip_by_value_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_3/while/mul_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\n### Case 19\n#### Runtime values and types of the input parameters of the buggy function\nstates, value: `[<tf.Tensor 'lstm_3_1/Tile:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_3_1/Tile_1:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_3_1/strided_slice_9:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_3_1/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_3_1/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_3_1/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_3_1/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `False`, type: `bool`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_3_1/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_3_1/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_3_1/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_3_1/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_3_1/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_3_1/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nh_tm1, value: `<tf.Tensor 'lstm_3_1/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_3_1/Tile_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, value: `<tf.Tensor 'lstm_3_1/strided_slice_9:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, value: `<tf.Tensor 'lstm_3_1/strided_slice_9:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, value: `<tf.Tensor 'lstm_3_1/strided_slice_9:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, value: `<tf.Tensor 'lstm_3_1/strided_slice_9:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nx_i, value: `<tf.Tensor 'lstm_3_1/MatMul:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_f, value: `<tf.Tensor 'lstm_3_1/MatMul_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_c, value: `<tf.Tensor 'lstm_3_1/MatMul_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_o, value: `<tf.Tensor 'lstm_3_1/MatMul_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, value: `<tf.Tensor 'lstm_3_1/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, value: `<tf.Tensor 'lstm_3_1/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, value: `<tf.Tensor 'lstm_3_1/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, value: `<tf.Tensor 'lstm_3_1/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_3_1/clip_by_value:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_3_1/clip_by_value_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_3_1/add_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_3_1/clip_by_value_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_3_1/mul_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\n### Case 20\n#### Runtime values and types of the input parameters of the buggy function\nstates, value: `(<tf.Tensor 'lstm_3_1/while/Identity_2:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_3_1/while/Identity_3:0' shape=(?, 3) dtype=float32>)`, type: `tuple`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_3_1/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_3_1/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_3_1/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_3_1/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_3_1/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `False`, type: `bool`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_3_1/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_3_1/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_3_1/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_3_1/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_3_1/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_3_1/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nh_tm1, value: `<tf.Tensor 'lstm_3_1/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_3_1/while/Identity_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, value: `<tf.Tensor 'lstm_3_1/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, value: `<tf.Tensor 'lstm_3_1/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, value: `<tf.Tensor 'lstm_3_1/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, value: `<tf.Tensor 'lstm_3_1/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nx_i, value: `<tf.Tensor 'lstm_3_1/while/MatMul:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_f, value: `<tf.Tensor 'lstm_3_1/while/MatMul_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_c, value: `<tf.Tensor 'lstm_3_1/while/MatMul_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_o, value: `<tf.Tensor 'lstm_3_1/while/MatMul_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, value: `<tf.Tensor 'lstm_3_1/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, value: `<tf.Tensor 'lstm_3_1/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, value: `<tf.Tensor 'lstm_3_1/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, value: `<tf.Tensor 'lstm_3_1/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_3_1/while/clip_by_value:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_3_1/while/clip_by_value_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_3_1/while/add_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_3_1/while/clip_by_value_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_3_1/while/mul_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\n### Case 21\n#### Runtime values and types of the input parameters of the buggy function\nstates, value: `[<tf.Tensor 'lstm_3_2/Tile:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_3_2/Tile_1:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_3_2/strided_slice_9:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_3_2/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_3_2/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_3_2/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_3_2/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `False`, type: `bool`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_3_2/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_3_2/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_3_2/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_3_2/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_3_2/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_3_2/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nh_tm1, value: `<tf.Tensor 'lstm_3_2/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_3_2/Tile_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, value: `<tf.Tensor 'lstm_3_2/strided_slice_9:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, value: `<tf.Tensor 'lstm_3_2/strided_slice_9:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, value: `<tf.Tensor 'lstm_3_2/strided_slice_9:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, value: `<tf.Tensor 'lstm_3_2/strided_slice_9:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nx_i, value: `<tf.Tensor 'lstm_3_2/MatMul:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_f, value: `<tf.Tensor 'lstm_3_2/MatMul_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_c, value: `<tf.Tensor 'lstm_3_2/MatMul_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_o, value: `<tf.Tensor 'lstm_3_2/MatMul_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, value: `<tf.Tensor 'lstm_3_2/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, value: `<tf.Tensor 'lstm_3_2/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, value: `<tf.Tensor 'lstm_3_2/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, value: `<tf.Tensor 'lstm_3_2/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_3_2/clip_by_value:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_3_2/clip_by_value_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_3_2/add_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_3_2/clip_by_value_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_3_2/mul_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\n### Case 22\n#### Runtime values and types of the input parameters of the buggy function\nstates, value: `(<tf.Tensor 'lstm_3_2/while/Identity_2:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_3_2/while/Identity_3:0' shape=(2, 3) dtype=float32>)`, type: `tuple`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_3_2/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_3_2/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_3_2/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_3_2/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_3_2/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `False`, type: `bool`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_3_2/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_3_2/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_3_2/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_3_2/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_3_2/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_3_2/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nh_tm1, value: `<tf.Tensor 'lstm_3_2/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_3_2/while/Identity_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, value: `<tf.Tensor 'lstm_3_2/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, value: `<tf.Tensor 'lstm_3_2/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, value: `<tf.Tensor 'lstm_3_2/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, value: `<tf.Tensor 'lstm_3_2/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nx_i, value: `<tf.Tensor 'lstm_3_2/while/MatMul:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_f, value: `<tf.Tensor 'lstm_3_2/while/MatMul_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_c, value: `<tf.Tensor 'lstm_3_2/while/MatMul_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_o, value: `<tf.Tensor 'lstm_3_2/while/MatMul_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, value: `<tf.Tensor 'lstm_3_2/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, value: `<tf.Tensor 'lstm_3_2/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, value: `<tf.Tensor 'lstm_3_2/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, value: `<tf.Tensor 'lstm_3_2/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_3_2/while/clip_by_value:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_3_2/while/clip_by_value_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_3_2/while/add_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_3_2/while/clip_by_value_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_3_2/while/mul_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\n### Case 23\n#### Runtime values and types of the input parameters of the buggy function\nstates, value: `[<tf.Tensor 'lstm_3_3/Tile:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_3_3/Tile_1:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_3_3/strided_slice_9:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_3_3/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_3_3/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_3_3/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_3_3/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `False`, type: `bool`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_3_3/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_3_3/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_3_3/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_3_3/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_3_3/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_3_3/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nh_tm1, value: `<tf.Tensor 'lstm_3_3/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_3_3/Tile_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, value: `<tf.Tensor 'lstm_3_3/strided_slice_9:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, value: `<tf.Tensor 'lstm_3_3/strided_slice_9:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, value: `<tf.Tensor 'lstm_3_3/strided_slice_9:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, value: `<tf.Tensor 'lstm_3_3/strided_slice_9:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nx_i, value: `<tf.Tensor 'lstm_3_3/MatMul:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_f, value: `<tf.Tensor 'lstm_3_3/MatMul_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_c, value: `<tf.Tensor 'lstm_3_3/MatMul_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_o, value: `<tf.Tensor 'lstm_3_3/MatMul_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, value: `<tf.Tensor 'lstm_3_3/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, value: `<tf.Tensor 'lstm_3_3/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, value: `<tf.Tensor 'lstm_3_3/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, value: `<tf.Tensor 'lstm_3_3/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_3_3/clip_by_value:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_3_3/clip_by_value_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_3_3/add_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_3_3/clip_by_value_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_3_3/mul_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\n### Case 24\n#### Runtime values and types of the input parameters of the buggy function\nstates, value: `(<tf.Tensor 'lstm_3_3/while/Identity_2:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_3_3/while/Identity_3:0' shape=(2, 3) dtype=float32>)`, type: `tuple`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_3_3/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_3_3/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_3_3/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_3_3/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_3_3/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `False`, type: `bool`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_3_3/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_3_3/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_3_3/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_3_3/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_3_3/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_3_3/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nh_tm1, value: `<tf.Tensor 'lstm_3_3/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_3_3/while/Identity_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, value: `<tf.Tensor 'lstm_3_3/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, value: `<tf.Tensor 'lstm_3_3/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, value: `<tf.Tensor 'lstm_3_3/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, value: `<tf.Tensor 'lstm_3_3/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nx_i, value: `<tf.Tensor 'lstm_3_3/while/MatMul:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_f, value: `<tf.Tensor 'lstm_3_3/while/MatMul_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_c, value: `<tf.Tensor 'lstm_3_3/while/MatMul_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_o, value: `<tf.Tensor 'lstm_3_3/while/MatMul_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, value: `<tf.Tensor 'lstm_3_3/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, value: `<tf.Tensor 'lstm_3_3/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, value: `<tf.Tensor 'lstm_3_3/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, value: `<tf.Tensor 'lstm_3_3/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_3_3/while/clip_by_value:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_3_3/while/clip_by_value_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_3_3/while/add_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_3_3/while/clip_by_value_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_3_3/while/mul_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\n### Case 25\n#### Runtime values and types of the input parameters of the buggy function\nstates, value: `[<tf.Tensor 'lstm_4/Tile:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_4/Tile_1:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nself.implementation, value: `2`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_4/strided_slice_13:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_4/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_4/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_4/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_4/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias_i, value: `<tf.Tensor 'lstm_4/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_4/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_4/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_4/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_4/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_4/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_4/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_4/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_4/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_4/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.bias, value: `<tf.Variable 'lstm_4/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nh_tm1, value: `<tf.Tensor 'lstm_4/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_4/Tile_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_4/clip_by_value:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_4/clip_by_value_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_4/add_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_4/clip_by_value_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz, value: `<tf.Tensor 'lstm_4/BiasAdd:0' shape=(?, 12) dtype=float32>`, type: `Tensor`\n\nz0, value: `<tf.Tensor 'lstm_4/strided_slice_14:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz1, value: `<tf.Tensor 'lstm_4/strided_slice_15:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz2, value: `<tf.Tensor 'lstm_4/strided_slice_16:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz3, value: `<tf.Tensor 'lstm_4/strided_slice_17:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_4/mul_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\n### Case 26\n#### Runtime values and types of the input parameters of the buggy function\nstates, value: `(<tf.Tensor 'lstm_4/while/Identity_2:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_4/while/Identity_3:0' shape=(?, 3) dtype=float32>)`, type: `tuple`\n\nself.implementation, value: `2`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_4/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_4/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_4/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_4/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_4/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias_i, value: `<tf.Tensor 'lstm_4/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_4/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_4/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_4/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_4/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_4/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_4/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_4/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_4/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_4/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.bias, value: `<tf.Variable 'lstm_4/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nh_tm1, value: `<tf.Tensor 'lstm_4/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_4/while/Identity_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_4/while/clip_by_value:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_4/while/clip_by_value_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_4/while/add_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_4/while/clip_by_value_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz, value: `<tf.Tensor 'lstm_4/while/BiasAdd:0' shape=(?, 12) dtype=float32>`, type: `Tensor`\n\nz0, value: `<tf.Tensor 'lstm_4/while/strided_slice:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz1, value: `<tf.Tensor 'lstm_4/while/strided_slice_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz2, value: `<tf.Tensor 'lstm_4/while/strided_slice_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz3, value: `<tf.Tensor 'lstm_4/while/strided_slice_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_4/while/mul_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\n### Case 27\n#### Runtime values and types of the input parameters of the buggy function\nstates, value: `[<tf.Tensor 'lstm_4_1/Tile:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_4_1/Tile_1:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nself.implementation, value: `2`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_4_1/strided_slice_13:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_4_1/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_4_1/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_4_1/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_4_1/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias_i, value: `<tf.Tensor 'lstm_4_1/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_4_1/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_4_1/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_4_1/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_4_1/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_4_1/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_4_1/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_4_1/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_4_1/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_4_1/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.bias, value: `<tf.Variable 'lstm_4_1/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nh_tm1, value: `<tf.Tensor 'lstm_4_1/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_4_1/Tile_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_4_1/clip_by_value:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_4_1/clip_by_value_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_4_1/add_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_4_1/clip_by_value_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz, value: `<tf.Tensor 'lstm_4_1/BiasAdd:0' shape=(?, 12) dtype=float32>`, type: `Tensor`\n\nz0, value: `<tf.Tensor 'lstm_4_1/strided_slice_14:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz1, value: `<tf.Tensor 'lstm_4_1/strided_slice_15:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz2, value: `<tf.Tensor 'lstm_4_1/strided_slice_16:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz3, value: `<tf.Tensor 'lstm_4_1/strided_slice_17:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_4_1/mul_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\n### Case 28\n#### Runtime values and types of the input parameters of the buggy function\nstates, value: `(<tf.Tensor 'lstm_4_1/while/Identity_2:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_4_1/while/Identity_3:0' shape=(?, 3) dtype=float32>)`, type: `tuple`\n\nself.implementation, value: `2`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_4_1/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_4_1/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_4_1/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_4_1/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_4_1/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias_i, value: `<tf.Tensor 'lstm_4_1/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_4_1/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_4_1/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_4_1/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_4_1/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_4_1/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_4_1/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_4_1/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_4_1/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_4_1/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.bias, value: `<tf.Variable 'lstm_4_1/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nh_tm1, value: `<tf.Tensor 'lstm_4_1/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_4_1/while/Identity_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_4_1/while/clip_by_value:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_4_1/while/clip_by_value_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_4_1/while/add_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_4_1/while/clip_by_value_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz, value: `<tf.Tensor 'lstm_4_1/while/BiasAdd:0' shape=(?, 12) dtype=float32>`, type: `Tensor`\n\nz0, value: `<tf.Tensor 'lstm_4_1/while/strided_slice:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz1, value: `<tf.Tensor 'lstm_4_1/while/strided_slice_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz2, value: `<tf.Tensor 'lstm_4_1/while/strided_slice_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz3, value: `<tf.Tensor 'lstm_4_1/while/strided_slice_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_4_1/while/mul_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\n### Case 29\n#### Runtime values and types of the input parameters of the buggy function\nstates, value: `[<tf.Tensor 'lstm_4_2/Tile:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_4_2/Tile_1:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nself.implementation, value: `2`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_4_2/strided_slice_13:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_4_2/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_4_2/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_4_2/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_4_2/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias_i, value: `<tf.Tensor 'lstm_4_2/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_4_2/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_4_2/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_4_2/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_4_2/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_4_2/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_4_2/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_4_2/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_4_2/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_4_2/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.bias, value: `<tf.Variable 'lstm_4_2/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nh_tm1, value: `<tf.Tensor 'lstm_4_2/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_4_2/Tile_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_4_2/clip_by_value:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_4_2/clip_by_value_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_4_2/add_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_4_2/clip_by_value_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz, value: `<tf.Tensor 'lstm_4_2/BiasAdd:0' shape=(2, 12) dtype=float32>`, type: `Tensor`\n\nz0, value: `<tf.Tensor 'lstm_4_2/strided_slice_14:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz1, value: `<tf.Tensor 'lstm_4_2/strided_slice_15:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz2, value: `<tf.Tensor 'lstm_4_2/strided_slice_16:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz3, value: `<tf.Tensor 'lstm_4_2/strided_slice_17:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_4_2/mul_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\n### Case 30\n#### Runtime values and types of the input parameters of the buggy function\nstates, value: `(<tf.Tensor 'lstm_4_2/while/Identity_2:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_4_2/while/Identity_3:0' shape=(2, 3) dtype=float32>)`, type: `tuple`\n\nself.implementation, value: `2`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_4_2/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_4_2/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_4_2/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_4_2/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_4_2/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias_i, value: `<tf.Tensor 'lstm_4_2/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_4_2/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_4_2/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_4_2/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_4_2/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_4_2/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_4_2/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_4_2/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_4_2/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_4_2/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.bias, value: `<tf.Variable 'lstm_4_2/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nh_tm1, value: `<tf.Tensor 'lstm_4_2/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_4_2/while/Identity_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_4_2/while/clip_by_value:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_4_2/while/clip_by_value_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_4_2/while/add_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_4_2/while/clip_by_value_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz, value: `<tf.Tensor 'lstm_4_2/while/BiasAdd:0' shape=(2, 12) dtype=float32>`, type: `Tensor`\n\nz0, value: `<tf.Tensor 'lstm_4_2/while/strided_slice:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz1, value: `<tf.Tensor 'lstm_4_2/while/strided_slice_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz2, value: `<tf.Tensor 'lstm_4_2/while/strided_slice_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz3, value: `<tf.Tensor 'lstm_4_2/while/strided_slice_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_4_2/while/mul_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\n### Case 31\n#### Runtime values and types of the input parameters of the buggy function\nstates, value: `[<tf.Tensor 'lstm_4_3/Tile:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_4_3/Tile_1:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nself.implementation, value: `2`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_4_3/strided_slice_13:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_4_3/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_4_3/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_4_3/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_4_3/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias_i, value: `<tf.Tensor 'lstm_4_3/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_4_3/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_4_3/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_4_3/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_4_3/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_4_3/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_4_3/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_4_3/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_4_3/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_4_3/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.bias, value: `<tf.Variable 'lstm_4_3/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nh_tm1, value: `<tf.Tensor 'lstm_4_3/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_4_3/Tile_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_4_3/clip_by_value:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_4_3/clip_by_value_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_4_3/add_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_4_3/clip_by_value_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz, value: `<tf.Tensor 'lstm_4_3/BiasAdd:0' shape=(2, 12) dtype=float32>`, type: `Tensor`\n\nz0, value: `<tf.Tensor 'lstm_4_3/strided_slice_14:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz1, value: `<tf.Tensor 'lstm_4_3/strided_slice_15:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz2, value: `<tf.Tensor 'lstm_4_3/strided_slice_16:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz3, value: `<tf.Tensor 'lstm_4_3/strided_slice_17:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_4_3/mul_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\n### Case 32\n#### Runtime values and types of the input parameters of the buggy function\nstates, value: `(<tf.Tensor 'lstm_4_3/while/Identity_2:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_4_3/while/Identity_3:0' shape=(2, 3) dtype=float32>)`, type: `tuple`\n\nself.implementation, value: `2`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_4_3/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_4_3/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_4_3/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_4_3/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_4_3/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias_i, value: `<tf.Tensor 'lstm_4_3/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_4_3/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_4_3/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_4_3/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_4_3/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_4_3/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_4_3/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_4_3/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_4_3/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_4_3/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.bias, value: `<tf.Variable 'lstm_4_3/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nh_tm1, value: `<tf.Tensor 'lstm_4_3/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_4_3/while/Identity_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_4_3/while/clip_by_value:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_4_3/while/clip_by_value_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_4_3/while/add_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_4_3/while/clip_by_value_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz, value: `<tf.Tensor 'lstm_4_3/while/BiasAdd:0' shape=(2, 12) dtype=float32>`, type: `Tensor`\n\nz0, value: `<tf.Tensor 'lstm_4_3/while/strided_slice:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz1, value: `<tf.Tensor 'lstm_4_3/while/strided_slice_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz2, value: `<tf.Tensor 'lstm_4_3/while/strided_slice_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz3, value: `<tf.Tensor 'lstm_4_3/while/strided_slice_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_4_3/while/mul_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\n### Case 33\n#### Runtime values and types of the input parameters of the buggy function\nself._dropout_mask, value: `[<tf.Tensor 'lstm_5/cond/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_5/cond_1/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_5/cond_2/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_5/cond_3/Merge:0' shape=(?, 4) dtype=float32>]`, type: `list`\n\nself._recurrent_dropout_mask, value: `[<tf.Tensor 'lstm_5/cond_4/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_5/cond_5/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_5/cond_6/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_5/cond_7/Merge:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nstates, value: `[<tf.Tensor 'lstm_5/Tile_1:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_5/Tile_2:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nself.implementation, value: `2`, type: `int`\n\nself.dropout, value: `0.1`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_5/strided_slice_15:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_5/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_5/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_5/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_5/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias_i, value: `<tf.Tensor 'lstm_5/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_5/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_5/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_5/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.1`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_5/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_5/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_5/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_5/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_5/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_5/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.bias, value: `<tf.Variable 'lstm_5/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\ndp_mask, value: `[<tf.Tensor 'lstm_5/cond/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_5/cond_1/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_5/cond_2/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_5/cond_3/Merge:0' shape=(?, 4) dtype=float32>]`, type: `list`\n\nrec_dp_mask, value: `[<tf.Tensor 'lstm_5/cond_4/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_5/cond_5/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_5/cond_6/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_5/cond_7/Merge:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nh_tm1, value: `<tf.Tensor 'lstm_5/mul_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_5/Tile_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ninputs, value: `<tf.Tensor 'lstm_5/mul:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_5/clip_by_value:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_5/clip_by_value_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_5/add_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_5/clip_by_value_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz, value: `<tf.Tensor 'lstm_5/BiasAdd:0' shape=(?, 12) dtype=float32>`, type: `Tensor`\n\nz0, value: `<tf.Tensor 'lstm_5/strided_slice_16:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz1, value: `<tf.Tensor 'lstm_5/strided_slice_17:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz2, value: `<tf.Tensor 'lstm_5/strided_slice_18:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz3, value: `<tf.Tensor 'lstm_5/strided_slice_19:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_5/mul_7:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh._uses_learning_phase, value: `True`, type: `bool`\n\n### Case 34\n#### Runtime values and types of the input parameters of the buggy function\nself._dropout_mask, value: `[<tf.Tensor 'lstm_5/cond/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_5/cond_1/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_5/cond_2/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_5/cond_3/Merge:0' shape=(?, 4) dtype=float32>]`, type: `list`\n\nself._recurrent_dropout_mask, value: `[<tf.Tensor 'lstm_5/cond_4/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_5/cond_5/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_5/cond_6/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_5/cond_7/Merge:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nstates, value: `(<tf.Tensor 'lstm_5/while/Identity_2:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_5/while/Identity_3:0' shape=(?, 3) dtype=float32>)`, type: `tuple`\n\nself.implementation, value: `2`, type: `int`\n\nself.dropout, value: `0.1`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_5/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_5/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_5/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_5/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_5/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias_i, value: `<tf.Tensor 'lstm_5/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_5/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_5/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_5/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.1`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_5/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_5/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_5/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_5/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_5/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_5/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.bias, value: `<tf.Variable 'lstm_5/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\ndp_mask, value: `[<tf.Tensor 'lstm_5/cond/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_5/cond_1/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_5/cond_2/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_5/cond_3/Merge:0' shape=(?, 4) dtype=float32>]`, type: `list`\n\nrec_dp_mask, value: `[<tf.Tensor 'lstm_5/cond_4/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_5/cond_5/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_5/cond_6/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_5/cond_7/Merge:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nh_tm1, value: `<tf.Tensor 'lstm_5/while/mul_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_5/while/Identity_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ninputs, value: `<tf.Tensor 'lstm_5/while/mul:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_5/while/clip_by_value:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_5/while/clip_by_value_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_5/while/add_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_5/while/clip_by_value_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz, value: `<tf.Tensor 'lstm_5/while/BiasAdd:0' shape=(?, 12) dtype=float32>`, type: `Tensor`\n\nz0, value: `<tf.Tensor 'lstm_5/while/strided_slice:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz1, value: `<tf.Tensor 'lstm_5/while/strided_slice_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz2, value: `<tf.Tensor 'lstm_5/while/strided_slice_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz3, value: `<tf.Tensor 'lstm_5/while/strided_slice_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_5/while/mul_7:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh._uses_learning_phase, value: `True`, type: `bool`\n\n### Case 35\n#### Runtime values and types of the input parameters of the buggy function\nself._dropout_mask, value: `[<tf.Tensor 'lstm_5_1/cond/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_5_1/cond_1/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_5_1/cond_2/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_5_1/cond_3/Merge:0' shape=(?, 4) dtype=float32>]`, type: `list`\n\nself._recurrent_dropout_mask, value: `[<tf.Tensor 'lstm_5_1/cond_4/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_5_1/cond_5/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_5_1/cond_6/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_5_1/cond_7/Merge:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nstates, value: `[<tf.Tensor 'lstm_5_1/Tile_1:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_5_1/Tile_2:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nself.implementation, value: `2`, type: `int`\n\nself.dropout, value: `0.1`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_5_1/strided_slice_15:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_5_1/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_5_1/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_5_1/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_5_1/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias_i, value: `<tf.Tensor 'lstm_5_1/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_5_1/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_5_1/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_5_1/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.1`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_5_1/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_5_1/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_5_1/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_5_1/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_5_1/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_5_1/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.bias, value: `<tf.Variable 'lstm_5_1/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\ndp_mask, value: `[<tf.Tensor 'lstm_5_1/cond/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_5_1/cond_1/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_5_1/cond_2/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_5_1/cond_3/Merge:0' shape=(?, 4) dtype=float32>]`, type: `list`\n\nrec_dp_mask, value: `[<tf.Tensor 'lstm_5_1/cond_4/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_5_1/cond_5/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_5_1/cond_6/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_5_1/cond_7/Merge:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nh_tm1, value: `<tf.Tensor 'lstm_5_1/mul_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_5_1/Tile_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ninputs, value: `<tf.Tensor 'lstm_5_1/mul:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_5_1/clip_by_value:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_5_1/clip_by_value_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_5_1/add_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_5_1/clip_by_value_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz, value: `<tf.Tensor 'lstm_5_1/BiasAdd:0' shape=(?, 12) dtype=float32>`, type: `Tensor`\n\nz0, value: `<tf.Tensor 'lstm_5_1/strided_slice_16:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz1, value: `<tf.Tensor 'lstm_5_1/strided_slice_17:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz2, value: `<tf.Tensor 'lstm_5_1/strided_slice_18:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz3, value: `<tf.Tensor 'lstm_5_1/strided_slice_19:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_5_1/mul_7:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh._uses_learning_phase, value: `True`, type: `bool`\n\n### Case 36\n#### Runtime values and types of the input parameters of the buggy function\nself._dropout_mask, value: `[<tf.Tensor 'lstm_5_1/cond/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_5_1/cond_1/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_5_1/cond_2/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_5_1/cond_3/Merge:0' shape=(?, 4) dtype=float32>]`, type: `list`\n\nself._recurrent_dropout_mask, value: `[<tf.Tensor 'lstm_5_1/cond_4/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_5_1/cond_5/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_5_1/cond_6/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_5_1/cond_7/Merge:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nstates, value: `(<tf.Tensor 'lstm_5_1/while/Identity_2:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_5_1/while/Identity_3:0' shape=(?, 3) dtype=float32>)`, type: `tuple`\n\nself.implementation, value: `2`, type: `int`\n\nself.dropout, value: `0.1`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_5_1/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_5_1/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_5_1/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_5_1/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_5_1/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias_i, value: `<tf.Tensor 'lstm_5_1/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_5_1/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_5_1/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_5_1/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.1`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_5_1/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_5_1/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_5_1/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_5_1/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_5_1/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_5_1/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.bias, value: `<tf.Variable 'lstm_5_1/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\ndp_mask, value: `[<tf.Tensor 'lstm_5_1/cond/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_5_1/cond_1/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_5_1/cond_2/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_5_1/cond_3/Merge:0' shape=(?, 4) dtype=float32>]`, type: `list`\n\nrec_dp_mask, value: `[<tf.Tensor 'lstm_5_1/cond_4/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_5_1/cond_5/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_5_1/cond_6/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_5_1/cond_7/Merge:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nh_tm1, value: `<tf.Tensor 'lstm_5_1/while/mul_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_5_1/while/Identity_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ninputs, value: `<tf.Tensor 'lstm_5_1/while/mul:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_5_1/while/clip_by_value:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_5_1/while/clip_by_value_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_5_1/while/add_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_5_1/while/clip_by_value_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz, value: `<tf.Tensor 'lstm_5_1/while/BiasAdd:0' shape=(?, 12) dtype=float32>`, type: `Tensor`\n\nz0, value: `<tf.Tensor 'lstm_5_1/while/strided_slice:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz1, value: `<tf.Tensor 'lstm_5_1/while/strided_slice_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz2, value: `<tf.Tensor 'lstm_5_1/while/strided_slice_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz3, value: `<tf.Tensor 'lstm_5_1/while/strided_slice_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_5_1/while/mul_7:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh._uses_learning_phase, value: `True`, type: `bool`\n\n### Case 37\n#### Runtime values and types of the input parameters of the buggy function\nself._dropout_mask, value: `[<tf.Tensor 'lstm_5_2/cond/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_5_2/cond_1/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_5_2/cond_2/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_5_2/cond_3/Merge:0' shape=(2, 4) dtype=float32>]`, type: `list`\n\nself._recurrent_dropout_mask, value: `[<tf.Tensor 'lstm_5_2/cond_4/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_5_2/cond_5/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_5_2/cond_6/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_5_2/cond_7/Merge:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nstates, value: `[<tf.Tensor 'lstm_5_2/Tile_1:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_5_2/Tile_2:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nself.implementation, value: `2`, type: `int`\n\nself.dropout, value: `0.1`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_5_2/strided_slice_15:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_5_2/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_5_2/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_5_2/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_5_2/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias_i, value: `<tf.Tensor 'lstm_5_2/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_5_2/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_5_2/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_5_2/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.1`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_5_2/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_5_2/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_5_2/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_5_2/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_5_2/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_5_2/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.bias, value: `<tf.Variable 'lstm_5_2/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\ndp_mask, value: `[<tf.Tensor 'lstm_5_2/cond/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_5_2/cond_1/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_5_2/cond_2/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_5_2/cond_3/Merge:0' shape=(2, 4) dtype=float32>]`, type: `list`\n\nrec_dp_mask, value: `[<tf.Tensor 'lstm_5_2/cond_4/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_5_2/cond_5/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_5_2/cond_6/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_5_2/cond_7/Merge:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nh_tm1, value: `<tf.Tensor 'lstm_5_2/mul_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_5_2/Tile_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ninputs, value: `<tf.Tensor 'lstm_5_2/mul:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_5_2/clip_by_value:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_5_2/clip_by_value_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_5_2/add_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_5_2/clip_by_value_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz, value: `<tf.Tensor 'lstm_5_2/BiasAdd:0' shape=(2, 12) dtype=float32>`, type: `Tensor`\n\nz0, value: `<tf.Tensor 'lstm_5_2/strided_slice_16:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz1, value: `<tf.Tensor 'lstm_5_2/strided_slice_17:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz2, value: `<tf.Tensor 'lstm_5_2/strided_slice_18:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz3, value: `<tf.Tensor 'lstm_5_2/strided_slice_19:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_5_2/mul_7:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh._uses_learning_phase, value: `True`, type: `bool`\n\n### Case 38\n#### Runtime values and types of the input parameters of the buggy function\nself._dropout_mask, value: `[<tf.Tensor 'lstm_5_2/cond/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_5_2/cond_1/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_5_2/cond_2/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_5_2/cond_3/Merge:0' shape=(2, 4) dtype=float32>]`, type: `list`\n\nself._recurrent_dropout_mask, value: `[<tf.Tensor 'lstm_5_2/cond_4/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_5_2/cond_5/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_5_2/cond_6/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_5_2/cond_7/Merge:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nstates, value: `(<tf.Tensor 'lstm_5_2/while/Identity_2:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_5_2/while/Identity_3:0' shape=(2, 3) dtype=float32>)`, type: `tuple`\n\nself.implementation, value: `2`, type: `int`\n\nself.dropout, value: `0.1`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_5_2/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_5_2/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_5_2/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_5_2/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_5_2/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias_i, value: `<tf.Tensor 'lstm_5_2/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_5_2/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_5_2/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_5_2/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.1`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_5_2/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_5_2/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_5_2/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_5_2/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_5_2/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_5_2/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.bias, value: `<tf.Variable 'lstm_5_2/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\ndp_mask, value: `[<tf.Tensor 'lstm_5_2/cond/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_5_2/cond_1/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_5_2/cond_2/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_5_2/cond_3/Merge:0' shape=(2, 4) dtype=float32>]`, type: `list`\n\nrec_dp_mask, value: `[<tf.Tensor 'lstm_5_2/cond_4/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_5_2/cond_5/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_5_2/cond_6/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_5_2/cond_7/Merge:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nh_tm1, value: `<tf.Tensor 'lstm_5_2/while/mul_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_5_2/while/Identity_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ninputs, value: `<tf.Tensor 'lstm_5_2/while/mul:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_5_2/while/clip_by_value:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_5_2/while/clip_by_value_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_5_2/while/add_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_5_2/while/clip_by_value_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz, value: `<tf.Tensor 'lstm_5_2/while/BiasAdd:0' shape=(2, 12) dtype=float32>`, type: `Tensor`\n\nz0, value: `<tf.Tensor 'lstm_5_2/while/strided_slice:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz1, value: `<tf.Tensor 'lstm_5_2/while/strided_slice_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz2, value: `<tf.Tensor 'lstm_5_2/while/strided_slice_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz3, value: `<tf.Tensor 'lstm_5_2/while/strided_slice_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_5_2/while/mul_7:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh._uses_learning_phase, value: `True`, type: `bool`\n\n### Case 39\n#### Runtime values and types of the input parameters of the buggy function\nself._dropout_mask, value: `[<tf.Tensor 'lstm_5_3/cond/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_5_3/cond_1/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_5_3/cond_2/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_5_3/cond_3/Merge:0' shape=(2, 4) dtype=float32>]`, type: `list`\n\nself._recurrent_dropout_mask, value: `[<tf.Tensor 'lstm_5_3/cond_4/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_5_3/cond_5/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_5_3/cond_6/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_5_3/cond_7/Merge:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nstates, value: `[<tf.Tensor 'lstm_5_3/Tile_1:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_5_3/Tile_2:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nself.implementation, value: `2`, type: `int`\n\nself.dropout, value: `0.1`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_5_3/strided_slice_15:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_5_3/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_5_3/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_5_3/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_5_3/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias_i, value: `<tf.Tensor 'lstm_5_3/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_5_3/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_5_3/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_5_3/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.1`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_5_3/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_5_3/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_5_3/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_5_3/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_5_3/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_5_3/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.bias, value: `<tf.Variable 'lstm_5_3/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\ndp_mask, value: `[<tf.Tensor 'lstm_5_3/cond/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_5_3/cond_1/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_5_3/cond_2/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_5_3/cond_3/Merge:0' shape=(2, 4) dtype=float32>]`, type: `list`\n\nrec_dp_mask, value: `[<tf.Tensor 'lstm_5_3/cond_4/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_5_3/cond_5/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_5_3/cond_6/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_5_3/cond_7/Merge:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nh_tm1, value: `<tf.Tensor 'lstm_5_3/mul_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_5_3/Tile_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ninputs, value: `<tf.Tensor 'lstm_5_3/mul:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_5_3/clip_by_value:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_5_3/clip_by_value_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_5_3/add_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_5_3/clip_by_value_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz, value: `<tf.Tensor 'lstm_5_3/BiasAdd:0' shape=(2, 12) dtype=float32>`, type: `Tensor`\n\nz0, value: `<tf.Tensor 'lstm_5_3/strided_slice_16:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz1, value: `<tf.Tensor 'lstm_5_3/strided_slice_17:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz2, value: `<tf.Tensor 'lstm_5_3/strided_slice_18:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz3, value: `<tf.Tensor 'lstm_5_3/strided_slice_19:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_5_3/mul_7:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh._uses_learning_phase, value: `True`, type: `bool`\n\n### Case 40\n#### Runtime values and types of the input parameters of the buggy function\nself._dropout_mask, value: `[<tf.Tensor 'lstm_5_3/cond/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_5_3/cond_1/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_5_3/cond_2/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_5_3/cond_3/Merge:0' shape=(2, 4) dtype=float32>]`, type: `list`\n\nself._recurrent_dropout_mask, value: `[<tf.Tensor 'lstm_5_3/cond_4/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_5_3/cond_5/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_5_3/cond_6/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_5_3/cond_7/Merge:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nstates, value: `(<tf.Tensor 'lstm_5_3/while/Identity_2:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_5_3/while/Identity_3:0' shape=(2, 3) dtype=float32>)`, type: `tuple`\n\nself.implementation, value: `2`, type: `int`\n\nself.dropout, value: `0.1`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_5_3/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_5_3/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_5_3/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_5_3/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_5_3/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias_i, value: `<tf.Tensor 'lstm_5_3/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_5_3/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_5_3/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_5_3/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.1`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_5_3/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_5_3/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_5_3/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_5_3/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_5_3/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_5_3/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.bias, value: `<tf.Variable 'lstm_5_3/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\ndp_mask, value: `[<tf.Tensor 'lstm_5_3/cond/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_5_3/cond_1/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_5_3/cond_2/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_5_3/cond_3/Merge:0' shape=(2, 4) dtype=float32>]`, type: `list`\n\nrec_dp_mask, value: `[<tf.Tensor 'lstm_5_3/cond_4/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_5_3/cond_5/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_5_3/cond_6/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_5_3/cond_7/Merge:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nh_tm1, value: `<tf.Tensor 'lstm_5_3/while/mul_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_5_3/while/Identity_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ninputs, value: `<tf.Tensor 'lstm_5_3/while/mul:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_5_3/while/clip_by_value:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_5_3/while/clip_by_value_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_5_3/while/add_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_5_3/while/clip_by_value_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz, value: `<tf.Tensor 'lstm_5_3/while/BiasAdd:0' shape=(2, 12) dtype=float32>`, type: `Tensor`\n\nz0, value: `<tf.Tensor 'lstm_5_3/while/strided_slice:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz1, value: `<tf.Tensor 'lstm_5_3/while/strided_slice_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz2, value: `<tf.Tensor 'lstm_5_3/while/strided_slice_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz3, value: `<tf.Tensor 'lstm_5_3/while/strided_slice_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_5_3/while/mul_7:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh._uses_learning_phase, value: `True`, type: `bool`\n\n### Case 41\n#### Runtime values and types of the input parameters of the buggy function\nstates, value: `[<tf.Tensor 'lstm_6/Tile:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_6/Tile_1:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nself.implementation, value: `2`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_6/strided_slice_9:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_6/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_6/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_6/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_6/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `False`, type: `bool`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_6/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_6/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_6/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_6/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_6/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_6/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nh_tm1, value: `<tf.Tensor 'lstm_6/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_6/Tile_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_6/clip_by_value:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_6/clip_by_value_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_6/add_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_6/clip_by_value_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz, value: `<tf.Tensor 'lstm_6/add:0' shape=(?, 12) dtype=float32>`, type: `Tensor`\n\nz0, value: `<tf.Tensor 'lstm_6/strided_slice_10:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz1, value: `<tf.Tensor 'lstm_6/strided_slice_11:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz2, value: `<tf.Tensor 'lstm_6/strided_slice_12:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz3, value: `<tf.Tensor 'lstm_6/strided_slice_13:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_6/mul_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\n### Case 42\n#### Runtime values and types of the input parameters of the buggy function\nstates, value: `(<tf.Tensor 'lstm_6/while/Identity_2:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_6/while/Identity_3:0' shape=(?, 3) dtype=float32>)`, type: `tuple`\n\nself.implementation, value: `2`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_6/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_6/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_6/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_6/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_6/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `False`, type: `bool`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_6/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_6/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_6/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_6/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_6/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_6/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nh_tm1, value: `<tf.Tensor 'lstm_6/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_6/while/Identity_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_6/while/clip_by_value:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_6/while/clip_by_value_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_6/while/add_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_6/while/clip_by_value_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz, value: `<tf.Tensor 'lstm_6/while/add:0' shape=(?, 12) dtype=float32>`, type: `Tensor`\n\nz0, value: `<tf.Tensor 'lstm_6/while/strided_slice:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz1, value: `<tf.Tensor 'lstm_6/while/strided_slice_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz2, value: `<tf.Tensor 'lstm_6/while/strided_slice_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz3, value: `<tf.Tensor 'lstm_6/while/strided_slice_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_6/while/mul_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\n### Case 43\n#### Runtime values and types of the input parameters of the buggy function\nstates, value: `[<tf.Tensor 'lstm_6_1/Tile:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_6_1/Tile_1:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nself.implementation, value: `2`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_6_1/strided_slice_9:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_6_1/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_6_1/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_6_1/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_6_1/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `False`, type: `bool`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_6_1/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_6_1/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_6_1/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_6_1/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_6_1/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_6_1/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nh_tm1, value: `<tf.Tensor 'lstm_6_1/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_6_1/Tile_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_6_1/clip_by_value:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_6_1/clip_by_value_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_6_1/add_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_6_1/clip_by_value_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz, value: `<tf.Tensor 'lstm_6_1/add:0' shape=(?, 12) dtype=float32>`, type: `Tensor`\n\nz0, value: `<tf.Tensor 'lstm_6_1/strided_slice_10:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz1, value: `<tf.Tensor 'lstm_6_1/strided_slice_11:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz2, value: `<tf.Tensor 'lstm_6_1/strided_slice_12:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz3, value: `<tf.Tensor 'lstm_6_1/strided_slice_13:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_6_1/mul_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\n### Case 44\n#### Runtime values and types of the input parameters of the buggy function\nstates, value: `(<tf.Tensor 'lstm_6_1/while/Identity_2:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_6_1/while/Identity_3:0' shape=(?, 3) dtype=float32>)`, type: `tuple`\n\nself.implementation, value: `2`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_6_1/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_6_1/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_6_1/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_6_1/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_6_1/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `False`, type: `bool`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_6_1/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_6_1/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_6_1/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_6_1/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_6_1/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_6_1/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nh_tm1, value: `<tf.Tensor 'lstm_6_1/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_6_1/while/Identity_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_6_1/while/clip_by_value:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_6_1/while/clip_by_value_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_6_1/while/add_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_6_1/while/clip_by_value_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz, value: `<tf.Tensor 'lstm_6_1/while/add:0' shape=(?, 12) dtype=float32>`, type: `Tensor`\n\nz0, value: `<tf.Tensor 'lstm_6_1/while/strided_slice:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz1, value: `<tf.Tensor 'lstm_6_1/while/strided_slice_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz2, value: `<tf.Tensor 'lstm_6_1/while/strided_slice_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nz3, value: `<tf.Tensor 'lstm_6_1/while/strided_slice_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_6_1/while/mul_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\n### Case 45\n#### Runtime values and types of the input parameters of the buggy function\nstates, value: `[<tf.Tensor 'lstm_6_2/Tile:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_6_2/Tile_1:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nself.implementation, value: `2`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_6_2/strided_slice_9:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_6_2/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_6_2/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_6_2/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_6_2/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `False`, type: `bool`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_6_2/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_6_2/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_6_2/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_6_2/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_6_2/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_6_2/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nh_tm1, value: `<tf.Tensor 'lstm_6_2/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_6_2/Tile_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_6_2/clip_by_value:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_6_2/clip_by_value_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_6_2/add_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_6_2/clip_by_value_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz, value: `<tf.Tensor 'lstm_6_2/add:0' shape=(2, 12) dtype=float32>`, type: `Tensor`\n\nz0, value: `<tf.Tensor 'lstm_6_2/strided_slice_10:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz1, value: `<tf.Tensor 'lstm_6_2/strided_slice_11:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz2, value: `<tf.Tensor 'lstm_6_2/strided_slice_12:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz3, value: `<tf.Tensor 'lstm_6_2/strided_slice_13:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_6_2/mul_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\n### Case 46\n#### Runtime values and types of the input parameters of the buggy function\nstates, value: `(<tf.Tensor 'lstm_6_2/while/Identity_2:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_6_2/while/Identity_3:0' shape=(2, 3) dtype=float32>)`, type: `tuple`\n\nself.implementation, value: `2`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_6_2/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_6_2/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_6_2/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_6_2/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_6_2/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `False`, type: `bool`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_6_2/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_6_2/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_6_2/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_6_2/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_6_2/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_6_2/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nh_tm1, value: `<tf.Tensor 'lstm_6_2/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_6_2/while/Identity_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_6_2/while/clip_by_value:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_6_2/while/clip_by_value_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_6_2/while/add_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_6_2/while/clip_by_value_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz, value: `<tf.Tensor 'lstm_6_2/while/add:0' shape=(2, 12) dtype=float32>`, type: `Tensor`\n\nz0, value: `<tf.Tensor 'lstm_6_2/while/strided_slice:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz1, value: `<tf.Tensor 'lstm_6_2/while/strided_slice_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz2, value: `<tf.Tensor 'lstm_6_2/while/strided_slice_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz3, value: `<tf.Tensor 'lstm_6_2/while/strided_slice_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_6_2/while/mul_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\n### Case 47\n#### Runtime values and types of the input parameters of the buggy function\nstates, value: `[<tf.Tensor 'lstm_6_3/Tile:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_6_3/Tile_1:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nself.implementation, value: `2`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_6_3/strided_slice_9:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_6_3/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_6_3/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_6_3/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_6_3/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `False`, type: `bool`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_6_3/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_6_3/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_6_3/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_6_3/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_6_3/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_6_3/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nh_tm1, value: `<tf.Tensor 'lstm_6_3/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_6_3/Tile_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_6_3/clip_by_value:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_6_3/clip_by_value_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_6_3/add_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_6_3/clip_by_value_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz, value: `<tf.Tensor 'lstm_6_3/add:0' shape=(2, 12) dtype=float32>`, type: `Tensor`\n\nz0, value: `<tf.Tensor 'lstm_6_3/strided_slice_10:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz1, value: `<tf.Tensor 'lstm_6_3/strided_slice_11:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz2, value: `<tf.Tensor 'lstm_6_3/strided_slice_12:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz3, value: `<tf.Tensor 'lstm_6_3/strided_slice_13:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_6_3/mul_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\n### Case 48\n#### Runtime values and types of the input parameters of the buggy function\nstates, value: `(<tf.Tensor 'lstm_6_3/while/Identity_2:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_6_3/while/Identity_3:0' shape=(2, 3) dtype=float32>)`, type: `tuple`\n\nself.implementation, value: `2`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_6_3/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_6_3/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_6_3/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_6_3/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_6_3/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.use_bias, value: `False`, type: `bool`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_6_3/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_6_3/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_6_3/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_6_3/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_6_3/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_6_3/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Runtime values and types of variables right before the buggy function's return\nh_tm1, value: `<tf.Tensor 'lstm_6_3/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, value: `<tf.Tensor 'lstm_6_3/while/Identity_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ni, value: `<tf.Tensor 'lstm_6_3/while/clip_by_value:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nf, value: `<tf.Tensor 'lstm_6_3/while/clip_by_value_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc, value: `<tf.Tensor 'lstm_6_3/while/add_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\no, value: `<tf.Tensor 'lstm_6_3/while/clip_by_value_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz, value: `<tf.Tensor 'lstm_6_3/while/add:0' shape=(2, 12) dtype=float32>`, type: `Tensor`\n\nz0, value: `<tf.Tensor 'lstm_6_3/while/strided_slice:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz1, value: `<tf.Tensor 'lstm_6_3/while/strided_slice_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz2, value: `<tf.Tensor 'lstm_6_3/while/strided_slice_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nz3, value: `<tf.Tensor 'lstm_6_3/while/strided_slice_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh, value: `<tf.Tensor 'lstm_6_3/while/mul_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\n",
    "7": "## Expected values and types of variables during the failing test execution\nEach case below includes input parameter values and types, and the expected values and types of relevant variables at the function's return. If an input parameter is not reflected in the output, it is assumed to remain unchanged. A corrected function must satisfy all these cases.\n\n### Expected case 1\n#### The values and types of buggy function's parameters\nstates, value: `[<tf.Tensor 'lstm_1/Tile:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_1/Tile_1:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_1/strided_slice_13:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_1/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_i, value: `<tf.Tensor 'lstm_1/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_1/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_1/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_1/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_1/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_1/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_1/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_1/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_1/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_1/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_1/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_1/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_1/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias, value: `<tf.Variable 'lstm_1/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Expected values and types of variables right before the buggy function's return\nh_tm1, expected value: `<tf.Tensor 'lstm_1/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, expected value: `<tf.Tensor 'lstm_1/Tile_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, expected value: `<tf.Tensor 'lstm_1/strided_slice_13:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, expected value: `<tf.Tensor 'lstm_1/strided_slice_13:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, expected value: `<tf.Tensor 'lstm_1/strided_slice_13:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, expected value: `<tf.Tensor 'lstm_1/strided_slice_13:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nx_i, expected value: `<tf.Tensor 'lstm_1/add:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_f, expected value: `<tf.Tensor 'lstm_1/add_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_c, expected value: `<tf.Tensor 'lstm_1/add_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_o, expected value: `<tf.Tensor 'lstm_1/add_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, expected value: `<tf.Tensor 'lstm_1/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, expected value: `<tf.Tensor 'lstm_1/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, expected value: `<tf.Tensor 'lstm_1/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, expected value: `<tf.Tensor 'lstm_1/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ni, expected value: `<tf.Tensor 'lstm_1/clip_by_value:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nf, expected value: `<tf.Tensor 'lstm_1/clip_by_value_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc, expected value: `<tf.Tensor 'lstm_1/add_9:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\no, expected value: `<tf.Tensor 'lstm_1/clip_by_value_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh, expected value: `<tf.Tensor 'lstm_1/mul_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\n### Expected case 2\n#### The values and types of buggy function's parameters\nstates, value: `(<tf.Tensor 'lstm_1/while/Identity_2:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_1/while/Identity_3:0' shape=(?, 3) dtype=float32>)`, type: `tuple`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_1/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_1/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_i, value: `<tf.Tensor 'lstm_1/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_1/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_1/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_1/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_1/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_1/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_1/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_1/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_1/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_1/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_1/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_1/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_1/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias, value: `<tf.Variable 'lstm_1/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Expected values and types of variables right before the buggy function's return\nh_tm1, expected value: `<tf.Tensor 'lstm_1/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, expected value: `<tf.Tensor 'lstm_1/while/Identity_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, expected value: `<tf.Tensor 'lstm_1/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, expected value: `<tf.Tensor 'lstm_1/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, expected value: `<tf.Tensor 'lstm_1/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, expected value: `<tf.Tensor 'lstm_1/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nx_i, expected value: `<tf.Tensor 'lstm_1/while/add:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_f, expected value: `<tf.Tensor 'lstm_1/while/add_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_c, expected value: `<tf.Tensor 'lstm_1/while/add_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_o, expected value: `<tf.Tensor 'lstm_1/while/add_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, expected value: `<tf.Tensor 'lstm_1/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, expected value: `<tf.Tensor 'lstm_1/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, expected value: `<tf.Tensor 'lstm_1/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, expected value: `<tf.Tensor 'lstm_1/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ni, expected value: `<tf.Tensor 'lstm_1/while/clip_by_value:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nf, expected value: `<tf.Tensor 'lstm_1/while/clip_by_value_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc, expected value: `<tf.Tensor 'lstm_1/while/add_9:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\no, expected value: `<tf.Tensor 'lstm_1/while/clip_by_value_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh, expected value: `<tf.Tensor 'lstm_1/while/mul_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\n### Expected case 3\n#### The values and types of buggy function's parameters\nstates, value: `[<tf.Tensor 'lstm_1_1/Tile:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_1_1/Tile_1:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_1_1/strided_slice_13:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_1_1/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_i, value: `<tf.Tensor 'lstm_1_1/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_1_1/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_1_1/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_1_1/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_1_1/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_1_1/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_1_1/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_1_1/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_1_1/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_1_1/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_1_1/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_1_1/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_1_1/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias, value: `<tf.Variable 'lstm_1_1/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Expected values and types of variables right before the buggy function's return\nh_tm1, expected value: `<tf.Tensor 'lstm_1_1/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, expected value: `<tf.Tensor 'lstm_1_1/Tile_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, expected value: `<tf.Tensor 'lstm_1_1/strided_slice_13:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, expected value: `<tf.Tensor 'lstm_1_1/strided_slice_13:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, expected value: `<tf.Tensor 'lstm_1_1/strided_slice_13:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, expected value: `<tf.Tensor 'lstm_1_1/strided_slice_13:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nx_i, expected value: `<tf.Tensor 'lstm_1_1/add:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_f, expected value: `<tf.Tensor 'lstm_1_1/add_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_c, expected value: `<tf.Tensor 'lstm_1_1/add_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_o, expected value: `<tf.Tensor 'lstm_1_1/add_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, expected value: `<tf.Tensor 'lstm_1_1/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, expected value: `<tf.Tensor 'lstm_1_1/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, expected value: `<tf.Tensor 'lstm_1_1/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, expected value: `<tf.Tensor 'lstm_1_1/Tile:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ni, expected value: `<tf.Tensor 'lstm_1_1/clip_by_value:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nf, expected value: `<tf.Tensor 'lstm_1_1/clip_by_value_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc, expected value: `<tf.Tensor 'lstm_1_1/add_9:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\no, expected value: `<tf.Tensor 'lstm_1_1/clip_by_value_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh, expected value: `<tf.Tensor 'lstm_1_1/mul_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\n### Expected case 4\n#### The values and types of buggy function's parameters\nstates, value: `(<tf.Tensor 'lstm_1_1/while/Identity_2:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_1_1/while/Identity_3:0' shape=(?, 3) dtype=float32>)`, type: `tuple`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_1_1/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_1_1/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_i, value: `<tf.Tensor 'lstm_1_1/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_1_1/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_1_1/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_1_1/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_1_1/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_1_1/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_1_1/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_1_1/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_1_1/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_1_1/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_1_1/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_1_1/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_1_1/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias, value: `<tf.Variable 'lstm_1_1/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Expected values and types of variables right before the buggy function's return\nh_tm1, expected value: `<tf.Tensor 'lstm_1_1/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, expected value: `<tf.Tensor 'lstm_1_1/while/Identity_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, expected value: `<tf.Tensor 'lstm_1_1/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, expected value: `<tf.Tensor 'lstm_1_1/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, expected value: `<tf.Tensor 'lstm_1_1/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, expected value: `<tf.Tensor 'lstm_1_1/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nx_i, expected value: `<tf.Tensor 'lstm_1_1/while/add:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_f, expected value: `<tf.Tensor 'lstm_1_1/while/add_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_c, expected value: `<tf.Tensor 'lstm_1_1/while/add_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_o, expected value: `<tf.Tensor 'lstm_1_1/while/add_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, expected value: `<tf.Tensor 'lstm_1_1/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, expected value: `<tf.Tensor 'lstm_1_1/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, expected value: `<tf.Tensor 'lstm_1_1/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, expected value: `<tf.Tensor 'lstm_1_1/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ni, expected value: `<tf.Tensor 'lstm_1_1/while/clip_by_value:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nf, expected value: `<tf.Tensor 'lstm_1_1/while/clip_by_value_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc, expected value: `<tf.Tensor 'lstm_1_1/while/add_9:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\no, expected value: `<tf.Tensor 'lstm_1_1/while/clip_by_value_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh, expected value: `<tf.Tensor 'lstm_1_1/while/mul_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\n### Expected case 5\n#### The values and types of buggy function's parameters\nstates, value: `[<tf.Tensor 'lstm_1_2/Tile:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_1_2/Tile_1:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_1_2/strided_slice_13:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_1_2/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_i, value: `<tf.Tensor 'lstm_1_2/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_1_2/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_1_2/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_1_2/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_1_2/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_1_2/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_1_2/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_1_2/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_1_2/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_1_2/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_1_2/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_1_2/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_1_2/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias, value: `<tf.Variable 'lstm_1_2/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Expected values and types of variables right before the buggy function's return\nh_tm1, expected value: `<tf.Tensor 'lstm_1_2/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, expected value: `<tf.Tensor 'lstm_1_2/Tile_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, expected value: `<tf.Tensor 'lstm_1_2/strided_slice_13:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, expected value: `<tf.Tensor 'lstm_1_2/strided_slice_13:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, expected value: `<tf.Tensor 'lstm_1_2/strided_slice_13:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, expected value: `<tf.Tensor 'lstm_1_2/strided_slice_13:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nx_i, expected value: `<tf.Tensor 'lstm_1_2/add:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_f, expected value: `<tf.Tensor 'lstm_1_2/add_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_c, expected value: `<tf.Tensor 'lstm_1_2/add_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_o, expected value: `<tf.Tensor 'lstm_1_2/add_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, expected value: `<tf.Tensor 'lstm_1_2/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, expected value: `<tf.Tensor 'lstm_1_2/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, expected value: `<tf.Tensor 'lstm_1_2/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, expected value: `<tf.Tensor 'lstm_1_2/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ni, expected value: `<tf.Tensor 'lstm_1_2/clip_by_value:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nf, expected value: `<tf.Tensor 'lstm_1_2/clip_by_value_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc, expected value: `<tf.Tensor 'lstm_1_2/add_9:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\no, expected value: `<tf.Tensor 'lstm_1_2/clip_by_value_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh, expected value: `<tf.Tensor 'lstm_1_2/mul_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\n### Expected case 6\n#### The values and types of buggy function's parameters\nstates, value: `(<tf.Tensor 'lstm_1_2/while/Identity_2:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_1_2/while/Identity_3:0' shape=(2, 3) dtype=float32>)`, type: `tuple`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_1_2/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_1_2/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_i, value: `<tf.Tensor 'lstm_1_2/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_1_2/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_1_2/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_1_2/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_1_2/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_1_2/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_1_2/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_1_2/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_1_2/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_1_2/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_1_2/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_1_2/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_1_2/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias, value: `<tf.Variable 'lstm_1_2/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Expected values and types of variables right before the buggy function's return\nh_tm1, expected value: `<tf.Tensor 'lstm_1_2/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, expected value: `<tf.Tensor 'lstm_1_2/while/Identity_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, expected value: `<tf.Tensor 'lstm_1_2/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, expected value: `<tf.Tensor 'lstm_1_2/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, expected value: `<tf.Tensor 'lstm_1_2/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, expected value: `<tf.Tensor 'lstm_1_2/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nx_i, expected value: `<tf.Tensor 'lstm_1_2/while/add:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_f, expected value: `<tf.Tensor 'lstm_1_2/while/add_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_c, expected value: `<tf.Tensor 'lstm_1_2/while/add_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_o, expected value: `<tf.Tensor 'lstm_1_2/while/add_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, expected value: `<tf.Tensor 'lstm_1_2/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, expected value: `<tf.Tensor 'lstm_1_2/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, expected value: `<tf.Tensor 'lstm_1_2/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, expected value: `<tf.Tensor 'lstm_1_2/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ni, expected value: `<tf.Tensor 'lstm_1_2/while/clip_by_value:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nf, expected value: `<tf.Tensor 'lstm_1_2/while/clip_by_value_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc, expected value: `<tf.Tensor 'lstm_1_2/while/add_9:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\no, expected value: `<tf.Tensor 'lstm_1_2/while/clip_by_value_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh, expected value: `<tf.Tensor 'lstm_1_2/while/mul_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\n### Expected case 7\n#### The values and types of buggy function's parameters\nstates, value: `[<tf.Tensor 'lstm_1_3/Tile:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_1_3/Tile_1:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_1_3/strided_slice_13:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_1_3/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_i, value: `<tf.Tensor 'lstm_1_3/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_1_3/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_1_3/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_1_3/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_1_3/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_1_3/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_1_3/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_1_3/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_1_3/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_1_3/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_1_3/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_1_3/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_1_3/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias, value: `<tf.Variable 'lstm_1_3/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Expected values and types of variables right before the buggy function's return\nh_tm1, expected value: `<tf.Tensor 'lstm_1_3/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, expected value: `<tf.Tensor 'lstm_1_3/Tile_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, expected value: `<tf.Tensor 'lstm_1_3/strided_slice_13:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, expected value: `<tf.Tensor 'lstm_1_3/strided_slice_13:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, expected value: `<tf.Tensor 'lstm_1_3/strided_slice_13:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, expected value: `<tf.Tensor 'lstm_1_3/strided_slice_13:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nx_i, expected value: `<tf.Tensor 'lstm_1_3/add:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_f, expected value: `<tf.Tensor 'lstm_1_3/add_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_c, expected value: `<tf.Tensor 'lstm_1_3/add_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_o, expected value: `<tf.Tensor 'lstm_1_3/add_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, expected value: `<tf.Tensor 'lstm_1_3/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, expected value: `<tf.Tensor 'lstm_1_3/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, expected value: `<tf.Tensor 'lstm_1_3/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, expected value: `<tf.Tensor 'lstm_1_3/Tile:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ni, expected value: `<tf.Tensor 'lstm_1_3/clip_by_value:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nf, expected value: `<tf.Tensor 'lstm_1_3/clip_by_value_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc, expected value: `<tf.Tensor 'lstm_1_3/add_9:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\no, expected value: `<tf.Tensor 'lstm_1_3/clip_by_value_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh, expected value: `<tf.Tensor 'lstm_1_3/mul_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\n### Expected case 8\n#### The values and types of buggy function's parameters\nstates, value: `(<tf.Tensor 'lstm_1_3/while/Identity_2:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_1_3/while/Identity_3:0' shape=(2, 3) dtype=float32>)`, type: `tuple`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.0`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_1_3/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_1_3/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_i, value: `<tf.Tensor 'lstm_1_3/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_1_3/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_1_3/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_1_3/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_1_3/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_1_3/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_1_3/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.0`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_1_3/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_1_3/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_1_3/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_1_3/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_1_3/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_1_3/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias, value: `<tf.Variable 'lstm_1_3/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Expected values and types of variables right before the buggy function's return\nh_tm1, expected value: `<tf.Tensor 'lstm_1_3/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, expected value: `<tf.Tensor 'lstm_1_3/while/Identity_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, expected value: `<tf.Tensor 'lstm_1_3/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, expected value: `<tf.Tensor 'lstm_1_3/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, expected value: `<tf.Tensor 'lstm_1_3/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, expected value: `<tf.Tensor 'lstm_1_3/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nx_i, expected value: `<tf.Tensor 'lstm_1_3/while/add:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_f, expected value: `<tf.Tensor 'lstm_1_3/while/add_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_c, expected value: `<tf.Tensor 'lstm_1_3/while/add_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_o, expected value: `<tf.Tensor 'lstm_1_3/while/add_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, expected value: `<tf.Tensor 'lstm_1_3/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, expected value: `<tf.Tensor 'lstm_1_3/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, expected value: `<tf.Tensor 'lstm_1_3/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, expected value: `<tf.Tensor 'lstm_1_3/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ni, expected value: `<tf.Tensor 'lstm_1_3/while/clip_by_value:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nf, expected value: `<tf.Tensor 'lstm_1_3/while/clip_by_value_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc, expected value: `<tf.Tensor 'lstm_1_3/while/add_9:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\no, expected value: `<tf.Tensor 'lstm_1_3/while/clip_by_value_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh, expected value: `<tf.Tensor 'lstm_1_3/while/mul_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\n### Expected case 9\n#### The values and types of buggy function's parameters\nself._dropout_mask, value: `[<tf.Tensor 'lstm_2/cond/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2/cond_1/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2/cond_2/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2/cond_3/Merge:0' shape=(?, 4) dtype=float32>]`, type: `list`\n\nself._recurrent_dropout_mask, value: `[<tf.Tensor 'lstm_2/cond_4/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2/cond_5/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2/cond_6/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2/cond_7/Merge:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nstates, value: `[<tf.Tensor 'lstm_2/Tile_1:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2/Tile_2:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.1`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_2/strided_slice_15:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_2/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_i, value: `<tf.Tensor 'lstm_2/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_2/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_2/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_2/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_2/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_2/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_2/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.1`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_2/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_2/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_2/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_2/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_2/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_2/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias, value: `<tf.Variable 'lstm_2/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Expected values and types of variables right before the buggy function's return\ndp_mask, expected value: `[<tf.Tensor 'lstm_2/cond/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2/cond_1/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2/cond_2/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2/cond_3/Merge:0' shape=(?, 4) dtype=float32>]`, type: `list`\n\nrec_dp_mask, expected value: `[<tf.Tensor 'lstm_2/cond_4/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2/cond_5/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2/cond_6/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2/cond_7/Merge:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nh_tm1, expected value: `<tf.Tensor 'lstm_2/Tile_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, expected value: `<tf.Tensor 'lstm_2/Tile_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, expected value: `<tf.Tensor 'lstm_2/mul:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, expected value: `<tf.Tensor 'lstm_2/mul_1:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, expected value: `<tf.Tensor 'lstm_2/mul_2:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, expected value: `<tf.Tensor 'lstm_2/mul_3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nx_i, expected value: `<tf.Tensor 'lstm_2/add:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_f, expected value: `<tf.Tensor 'lstm_2/add_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_c, expected value: `<tf.Tensor 'lstm_2/add_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_o, expected value: `<tf.Tensor 'lstm_2/add_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, expected value: `<tf.Tensor 'lstm_2/mul_4:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, expected value: `<tf.Tensor 'lstm_2/mul_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, expected value: `<tf.Tensor 'lstm_2/mul_6:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, expected value: `<tf.Tensor 'lstm_2/mul_7:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ni, expected value: `<tf.Tensor 'lstm_2/clip_by_value:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nf, expected value: `<tf.Tensor 'lstm_2/clip_by_value_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc, expected value: `<tf.Tensor 'lstm_2/add_9:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\no, expected value: `<tf.Tensor 'lstm_2/clip_by_value_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh, expected value: `<tf.Tensor 'lstm_2/mul_13:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh._uses_learning_phase, expected value: `True`, type: `bool`\n\n### Expected case 10\n#### The values and types of buggy function's parameters\nself._dropout_mask, value: `[<tf.Tensor 'lstm_2/cond/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2/cond_1/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2/cond_2/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2/cond_3/Merge:0' shape=(?, 4) dtype=float32>]`, type: `list`\n\nself._recurrent_dropout_mask, value: `[<tf.Tensor 'lstm_2/cond_4/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2/cond_5/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2/cond_6/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2/cond_7/Merge:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nstates, value: `(<tf.Tensor 'lstm_2/while/Identity_2:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2/while/Identity_3:0' shape=(?, 3) dtype=float32>)`, type: `tuple`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.1`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_2/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_2/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_i, value: `<tf.Tensor 'lstm_2/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_2/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_2/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_2/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_2/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_2/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_2/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.1`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_2/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_2/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_2/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_2/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_2/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_2/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias, value: `<tf.Variable 'lstm_2/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Expected values and types of variables right before the buggy function's return\ndp_mask, expected value: `[<tf.Tensor 'lstm_2/cond/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2/cond_1/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2/cond_2/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2/cond_3/Merge:0' shape=(?, 4) dtype=float32>]`, type: `list`\n\nrec_dp_mask, expected value: `[<tf.Tensor 'lstm_2/cond_4/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2/cond_5/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2/cond_6/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2/cond_7/Merge:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nh_tm1, expected value: `<tf.Tensor 'lstm_2/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, expected value: `<tf.Tensor 'lstm_2/while/Identity_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, expected value: `<tf.Tensor 'lstm_2/while/mul:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, expected value: `<tf.Tensor 'lstm_2/while/mul_1:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, expected value: `<tf.Tensor 'lstm_2/while/mul_2:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, expected value: `<tf.Tensor 'lstm_2/while/mul_3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nx_i, expected value: `<tf.Tensor 'lstm_2/while/add:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_f, expected value: `<tf.Tensor 'lstm_2/while/add_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_c, expected value: `<tf.Tensor 'lstm_2/while/add_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_o, expected value: `<tf.Tensor 'lstm_2/while/add_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, expected value: `<tf.Tensor 'lstm_2/while/mul_4:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, expected value: `<tf.Tensor 'lstm_2/while/mul_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, expected value: `<tf.Tensor 'lstm_2/while/mul_6:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, expected value: `<tf.Tensor 'lstm_2/while/mul_7:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ni, expected value: `<tf.Tensor 'lstm_2/while/clip_by_value:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nf, expected value: `<tf.Tensor 'lstm_2/while/clip_by_value_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc, expected value: `<tf.Tensor 'lstm_2/while/add_9:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\no, expected value: `<tf.Tensor 'lstm_2/while/clip_by_value_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh, expected value: `<tf.Tensor 'lstm_2/while/mul_13:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh._uses_learning_phase, expected value: `True`, type: `bool`\n\n### Expected case 11\n#### The values and types of buggy function's parameters\nself._dropout_mask, value: `[<tf.Tensor 'lstm_2_1/cond/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_1/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_2/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_3/Merge:0' shape=(?, 4) dtype=float32>]`, type: `list`\n\nself._recurrent_dropout_mask, value: `[<tf.Tensor 'lstm_2_1/cond_4/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_5/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_6/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_7/Merge:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nstates, value: `[<tf.Tensor 'lstm_2_1/Tile_1:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2_1/Tile_2:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.1`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_2_1/strided_slice_15:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_2_1/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_i, value: `<tf.Tensor 'lstm_2_1/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_2_1/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_2_1/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_2_1/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_2_1/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_2_1/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_2_1/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.1`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_2_1/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_2_1/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_2_1/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_2_1/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_2_1/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_2_1/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias, value: `<tf.Variable 'lstm_2_1/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Expected values and types of variables right before the buggy function's return\ndp_mask, expected value: `[<tf.Tensor 'lstm_2_1/cond/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_1/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_2/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_3/Merge:0' shape=(?, 4) dtype=float32>]`, type: `list`\n\nrec_dp_mask, expected value: `[<tf.Tensor 'lstm_2_1/cond_4/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_5/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_6/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_7/Merge:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nh_tm1, expected value: `<tf.Tensor 'lstm_2_1/Tile_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, expected value: `<tf.Tensor 'lstm_2_1/Tile_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, expected value: `<tf.Tensor 'lstm_2_1/mul:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, expected value: `<tf.Tensor 'lstm_2_1/mul_1:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, expected value: `<tf.Tensor 'lstm_2_1/mul_2:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, expected value: `<tf.Tensor 'lstm_2_1/mul_3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nx_i, expected value: `<tf.Tensor 'lstm_2_1/add:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_f, expected value: `<tf.Tensor 'lstm_2_1/add_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_c, expected value: `<tf.Tensor 'lstm_2_1/add_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_o, expected value: `<tf.Tensor 'lstm_2_1/add_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, expected value: `<tf.Tensor 'lstm_2_1/mul_4:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, expected value: `<tf.Tensor 'lstm_2_1/mul_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, expected value: `<tf.Tensor 'lstm_2_1/mul_6:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, expected value: `<tf.Tensor 'lstm_2_1/mul_7:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ni, expected value: `<tf.Tensor 'lstm_2_1/clip_by_value:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nf, expected value: `<tf.Tensor 'lstm_2_1/clip_by_value_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc, expected value: `<tf.Tensor 'lstm_2_1/add_9:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\no, expected value: `<tf.Tensor 'lstm_2_1/clip_by_value_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh, expected value: `<tf.Tensor 'lstm_2_1/mul_13:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh._uses_learning_phase, expected value: `True`, type: `bool`\n\n### Expected case 12\n#### The values and types of buggy function's parameters\nself._dropout_mask, value: `[<tf.Tensor 'lstm_2_1/cond/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_1/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_2/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_3/Merge:0' shape=(?, 4) dtype=float32>]`, type: `list`\n\nself._recurrent_dropout_mask, value: `[<tf.Tensor 'lstm_2_1/cond_4/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_5/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_6/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_7/Merge:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nstates, value: `(<tf.Tensor 'lstm_2_1/while/Identity_2:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2_1/while/Identity_3:0' shape=(?, 3) dtype=float32>)`, type: `tuple`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.1`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_2_1/while/TensorArrayReadV3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_2_1/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_i, value: `<tf.Tensor 'lstm_2_1/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_2_1/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_2_1/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_2_1/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_2_1/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_2_1/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_2_1/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.1`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_2_1/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_2_1/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_2_1/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_2_1/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_2_1/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_2_1/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias, value: `<tf.Variable 'lstm_2_1/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Expected values and types of variables right before the buggy function's return\ndp_mask, expected value: `[<tf.Tensor 'lstm_2_1/cond/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_1/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_2/Merge:0' shape=(?, 4) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_3/Merge:0' shape=(?, 4) dtype=float32>]`, type: `list`\n\nrec_dp_mask, expected value: `[<tf.Tensor 'lstm_2_1/cond_4/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_5/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_6/Merge:0' shape=(?, 3) dtype=float32>, <tf.Tensor 'lstm_2_1/cond_7/Merge:0' shape=(?, 3) dtype=float32>]`, type: `list`\n\nh_tm1, expected value: `<tf.Tensor 'lstm_2_1/while/Identity_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, expected value: `<tf.Tensor 'lstm_2_1/while/Identity_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, expected value: `<tf.Tensor 'lstm_2_1/while/mul:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, expected value: `<tf.Tensor 'lstm_2_1/while/mul_1:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, expected value: `<tf.Tensor 'lstm_2_1/while/mul_2:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, expected value: `<tf.Tensor 'lstm_2_1/while/mul_3:0' shape=(?, 4) dtype=float32>`, type: `Tensor`\n\nx_i, expected value: `<tf.Tensor 'lstm_2_1/while/add:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_f, expected value: `<tf.Tensor 'lstm_2_1/while/add_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_c, expected value: `<tf.Tensor 'lstm_2_1/while/add_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nx_o, expected value: `<tf.Tensor 'lstm_2_1/while/add_3:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, expected value: `<tf.Tensor 'lstm_2_1/while/mul_4:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, expected value: `<tf.Tensor 'lstm_2_1/while/mul_5:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, expected value: `<tf.Tensor 'lstm_2_1/while/mul_6:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, expected value: `<tf.Tensor 'lstm_2_1/while/mul_7:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\ni, expected value: `<tf.Tensor 'lstm_2_1/while/clip_by_value:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nf, expected value: `<tf.Tensor 'lstm_2_1/while/clip_by_value_1:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nc, expected value: `<tf.Tensor 'lstm_2_1/while/add_9:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\no, expected value: `<tf.Tensor 'lstm_2_1/while/clip_by_value_2:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh, expected value: `<tf.Tensor 'lstm_2_1/while/mul_13:0' shape=(?, 3) dtype=float32>`, type: `Tensor`\n\nh._uses_learning_phase, expected value: `True`, type: `bool`\n\n### Expected case 13\n#### The values and types of buggy function's parameters\nself._dropout_mask, value: `[<tf.Tensor 'lstm_2_2/cond/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_1/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_2/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_3/Merge:0' shape=(2, 4) dtype=float32>]`, type: `list`\n\nself._recurrent_dropout_mask, value: `[<tf.Tensor 'lstm_2_2/cond_4/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_5/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_6/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_7/Merge:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nstates, value: `[<tf.Tensor 'lstm_2_2/Tile_1:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_2/Tile_2:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.1`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_2_2/strided_slice_15:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_2_2/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_i, value: `<tf.Tensor 'lstm_2_2/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_2_2/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_2_2/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_2_2/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_2_2/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_2_2/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_2_2/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.1`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_2_2/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_2_2/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_2_2/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_2_2/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_2_2/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_2_2/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias, value: `<tf.Variable 'lstm_2_2/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Expected values and types of variables right before the buggy function's return\ndp_mask, expected value: `[<tf.Tensor 'lstm_2_2/cond/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_1/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_2/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_3/Merge:0' shape=(2, 4) dtype=float32>]`, type: `list`\n\nrec_dp_mask, expected value: `[<tf.Tensor 'lstm_2_2/cond_4/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_5/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_6/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_7/Merge:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nh_tm1, expected value: `<tf.Tensor 'lstm_2_2/Tile_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, expected value: `<tf.Tensor 'lstm_2_2/Tile_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, expected value: `<tf.Tensor 'lstm_2_2/mul:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, expected value: `<tf.Tensor 'lstm_2_2/mul_1:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, expected value: `<tf.Tensor 'lstm_2_2/mul_2:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, expected value: `<tf.Tensor 'lstm_2_2/mul_3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nx_i, expected value: `<tf.Tensor 'lstm_2_2/add:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_f, expected value: `<tf.Tensor 'lstm_2_2/add_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_c, expected value: `<tf.Tensor 'lstm_2_2/add_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_o, expected value: `<tf.Tensor 'lstm_2_2/add_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, expected value: `<tf.Tensor 'lstm_2_2/mul_4:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, expected value: `<tf.Tensor 'lstm_2_2/mul_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, expected value: `<tf.Tensor 'lstm_2_2/mul_6:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, expected value: `<tf.Tensor 'lstm_2_2/mul_7:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ni, expected value: `<tf.Tensor 'lstm_2_2/clip_by_value:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nf, expected value: `<tf.Tensor 'lstm_2_2/clip_by_value_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc, expected value: `<tf.Tensor 'lstm_2_2/add_9:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\no, expected value: `<tf.Tensor 'lstm_2_2/clip_by_value_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh, expected value: `<tf.Tensor 'lstm_2_2/mul_13:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh._uses_learning_phase, expected value: `True`, type: `bool`\n\n### Expected case 14\n#### The values and types of buggy function's parameters\nself._dropout_mask, value: `[<tf.Tensor 'lstm_2_2/cond/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_1/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_2/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_3/Merge:0' shape=(2, 4) dtype=float32>]`, type: `list`\n\nself._recurrent_dropout_mask, value: `[<tf.Tensor 'lstm_2_2/cond_4/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_5/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_6/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_7/Merge:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nstates, value: `(<tf.Tensor 'lstm_2_2/while/Identity_2:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_2/while/Identity_3:0' shape=(2, 3) dtype=float32>)`, type: `tuple`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.1`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_2_2/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_2_2/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_i, value: `<tf.Tensor 'lstm_2_2/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_2_2/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_2_2/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_2_2/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_2_2/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_2_2/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_2_2/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.1`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_2_2/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_2_2/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_2_2/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_2_2/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_2_2/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_2_2/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias, value: `<tf.Variable 'lstm_2_2/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Expected values and types of variables right before the buggy function's return\ndp_mask, expected value: `[<tf.Tensor 'lstm_2_2/cond/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_1/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_2/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_3/Merge:0' shape=(2, 4) dtype=float32>]`, type: `list`\n\nrec_dp_mask, expected value: `[<tf.Tensor 'lstm_2_2/cond_4/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_5/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_6/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_2/cond_7/Merge:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nh_tm1, expected value: `<tf.Tensor 'lstm_2_2/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, expected value: `<tf.Tensor 'lstm_2_2/while/Identity_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, expected value: `<tf.Tensor 'lstm_2_2/while/mul:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, expected value: `<tf.Tensor 'lstm_2_2/while/mul_1:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, expected value: `<tf.Tensor 'lstm_2_2/while/mul_2:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, expected value: `<tf.Tensor 'lstm_2_2/while/mul_3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nx_i, expected value: `<tf.Tensor 'lstm_2_2/while/add:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_f, expected value: `<tf.Tensor 'lstm_2_2/while/add_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_c, expected value: `<tf.Tensor 'lstm_2_2/while/add_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_o, expected value: `<tf.Tensor 'lstm_2_2/while/add_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, expected value: `<tf.Tensor 'lstm_2_2/while/mul_4:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, expected value: `<tf.Tensor 'lstm_2_2/while/mul_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, expected value: `<tf.Tensor 'lstm_2_2/while/mul_6:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, expected value: `<tf.Tensor 'lstm_2_2/while/mul_7:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ni, expected value: `<tf.Tensor 'lstm_2_2/while/clip_by_value:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nf, expected value: `<tf.Tensor 'lstm_2_2/while/clip_by_value_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc, expected value: `<tf.Tensor 'lstm_2_2/while/add_9:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\no, expected value: `<tf.Tensor 'lstm_2_2/while/clip_by_value_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh, expected value: `<tf.Tensor 'lstm_2_2/while/mul_13:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh._uses_learning_phase, expected value: `True`, type: `bool`\n\n### Expected case 15\n#### The values and types of buggy function's parameters\nself._dropout_mask, value: `[<tf.Tensor 'lstm_2_3/cond/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_1/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_2/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_3/Merge:0' shape=(2, 4) dtype=float32>]`, type: `list`\n\nself._recurrent_dropout_mask, value: `[<tf.Tensor 'lstm_2_3/cond_4/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_5/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_6/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_7/Merge:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nstates, value: `[<tf.Tensor 'lstm_2_3/Tile_1:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_3/Tile_2:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.1`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_2_3/strided_slice_15:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_2_3/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_i, value: `<tf.Tensor 'lstm_2_3/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_2_3/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_2_3/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_2_3/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_2_3/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_2_3/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_2_3/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.1`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_2_3/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_2_3/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_2_3/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_2_3/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_2_3/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_2_3/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias, value: `<tf.Variable 'lstm_2_3/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Expected values and types of variables right before the buggy function's return\ndp_mask, expected value: `[<tf.Tensor 'lstm_2_3/cond/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_1/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_2/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_3/Merge:0' shape=(2, 4) dtype=float32>]`, type: `list`\n\nrec_dp_mask, expected value: `[<tf.Tensor 'lstm_2_3/cond_4/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_5/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_6/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_7/Merge:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nh_tm1, expected value: `<tf.Tensor 'lstm_2_3/Tile_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, expected value: `<tf.Tensor 'lstm_2_3/Tile_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, expected value: `<tf.Tensor 'lstm_2_3/mul:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, expected value: `<tf.Tensor 'lstm_2_3/mul_1:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, expected value: `<tf.Tensor 'lstm_2_3/mul_2:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, expected value: `<tf.Tensor 'lstm_2_3/mul_3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nx_i, expected value: `<tf.Tensor 'lstm_2_3/add:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_f, expected value: `<tf.Tensor 'lstm_2_3/add_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_c, expected value: `<tf.Tensor 'lstm_2_3/add_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_o, expected value: `<tf.Tensor 'lstm_2_3/add_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, expected value: `<tf.Tensor 'lstm_2_3/mul_4:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, expected value: `<tf.Tensor 'lstm_2_3/mul_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, expected value: `<tf.Tensor 'lstm_2_3/mul_6:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, expected value: `<tf.Tensor 'lstm_2_3/mul_7:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ni, expected value: `<tf.Tensor 'lstm_2_3/clip_by_value:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nf, expected value: `<tf.Tensor 'lstm_2_3/clip_by_value_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc, expected value: `<tf.Tensor 'lstm_2_3/add_9:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\no, expected value: `<tf.Tensor 'lstm_2_3/clip_by_value_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh, expected value: `<tf.Tensor 'lstm_2_3/mul_13:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh._uses_learning_phase, expected value: `True`, type: `bool`\n\n### Expected case 16\n#### The values and types of buggy function's parameters\nself._dropout_mask, value: `[<tf.Tensor 'lstm_2_3/cond/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_1/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_2/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_3/Merge:0' shape=(2, 4) dtype=float32>]`, type: `list`\n\nself._recurrent_dropout_mask, value: `[<tf.Tensor 'lstm_2_3/cond_4/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_5/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_6/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_7/Merge:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nstates, value: `(<tf.Tensor 'lstm_2_3/while/Identity_2:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_3/while/Identity_3:0' shape=(2, 3) dtype=float32>)`, type: `tuple`\n\nself.implementation, value: `1`, type: `int`\n\nself.dropout, value: `0.1`, type: `float`\n\ninputs, value: `<tf.Tensor 'lstm_2_3/while/TensorArrayReadV3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nself.kernel_i, value: `<tf.Tensor 'lstm_2_3/strided_slice:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_i, value: `<tf.Tensor 'lstm_2_3/strided_slice_8:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_f, value: `<tf.Tensor 'lstm_2_3/strided_slice_1:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_f, value: `<tf.Tensor 'lstm_2_3/strided_slice_9:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_c, value: `<tf.Tensor 'lstm_2_3/strided_slice_2:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_c, value: `<tf.Tensor 'lstm_2_3/strided_slice_10:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.kernel_o, value: `<tf.Tensor 'lstm_2_3/strided_slice_3:0' shape=(4, 3) dtype=float32>`, type: `Tensor`\n\nself.bias_o, value: `<tf.Tensor 'lstm_2_3/strided_slice_11:0' shape=(3,) dtype=float32>`, type: `Tensor`\n\nself.recurrent_dropout, value: `0.1`, type: `float`\n\nself.recurrent_kernel_i, value: `<tf.Tensor 'lstm_2_3/strided_slice_4:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_f, value: `<tf.Tensor 'lstm_2_3/strided_slice_5:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_c, value: `<tf.Tensor 'lstm_2_3/strided_slice_6:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.recurrent_kernel_o, value: `<tf.Tensor 'lstm_2_3/strided_slice_7:0' shape=(3, 3) dtype=float32>`, type: `Tensor`\n\nself.kernel, value: `<tf.Variable 'lstm_2_3/kernel:0' shape=(4, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.recurrent_kernel, value: `<tf.Variable 'lstm_2_3/recurrent_kernel:0' shape=(3, 12) dtype=float32_ref>`, type: `RefVariable`\n\nself.use_bias, value: `True`, type: `bool`\n\nself.bias, value: `<tf.Variable 'lstm_2_3/bias:0' shape=(12,) dtype=float32_ref>`, type: `RefVariable`\n\nself.units, value: `3`, type: `int`\n\n#### Expected values and types of variables right before the buggy function's return\ndp_mask, expected value: `[<tf.Tensor 'lstm_2_3/cond/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_1/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_2/Merge:0' shape=(2, 4) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_3/Merge:0' shape=(2, 4) dtype=float32>]`, type: `list`\n\nrec_dp_mask, expected value: `[<tf.Tensor 'lstm_2_3/cond_4/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_5/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_6/Merge:0' shape=(2, 3) dtype=float32>, <tf.Tensor 'lstm_2_3/cond_7/Merge:0' shape=(2, 3) dtype=float32>]`, type: `list`\n\nh_tm1, expected value: `<tf.Tensor 'lstm_2_3/while/Identity_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc_tm1, expected value: `<tf.Tensor 'lstm_2_3/while/Identity_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ninputs_i, expected value: `<tf.Tensor 'lstm_2_3/while/mul:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_f, expected value: `<tf.Tensor 'lstm_2_3/while/mul_1:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_c, expected value: `<tf.Tensor 'lstm_2_3/while/mul_2:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\ninputs_o, expected value: `<tf.Tensor 'lstm_2_3/while/mul_3:0' shape=(2, 4) dtype=float32>`, type: `Tensor`\n\nx_i, expected value: `<tf.Tensor 'lstm_2_3/while/add:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_f, expected value: `<tf.Tensor 'lstm_2_3/while/add_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_c, expected value: `<tf.Tensor 'lstm_2_3/while/add_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nx_o, expected value: `<tf.Tensor 'lstm_2_3/while/add_3:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_i, expected value: `<tf.Tensor 'lstm_2_3/while/mul_4:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_f, expected value: `<tf.Tensor 'lstm_2_3/while/mul_5:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_c, expected value: `<tf.Tensor 'lstm_2_3/while/mul_6:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh_tm1_o, expected value: `<tf.Tensor 'lstm_2_3/while/mul_7:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\ni, expected value: `<tf.Tensor 'lstm_2_3/while/clip_by_value:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nf, expected value: `<tf.Tensor 'lstm_2_3/while/clip_by_value_1:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nc, expected value: `<tf.Tensor 'lstm_2_3/while/add_9:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\no, expected value: `<tf.Tensor 'lstm_2_3/while/clip_by_value_2:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh, expected value: `<tf.Tensor 'lstm_2_3/while/mul_13:0' shape=(2, 3) dtype=float32>`, type: `Tensor`\n\nh._uses_learning_phase, expected value: `True`, type: `bool`\n\n",
    "8": "",
    "9": "Your output should follow these steps:\n1. Analyze the buggy function and its relationship with the buggy class, related functions, test code, corresponding error message, the actual input/output variable information, the expected input/output variable information.\n2. Identify a potential error location within the buggy function.\n3. Elucidate the bug's cause using:\n   (a) The buggy function, \n   (b) The buggy class docs, \n   (c) The related functions, \n   (d) The failing test, \n   (e) The corresponding error message, \n   (f) The actual input/output variable values, \n   (g) The expected input/output variable values\n\n4. Suggest approaches for fixing the bug.\n5. Present the corrected code for the buggy function such that it satisfied the following:\n   (a) the program passes the failing test, \n   (b) the function satisfies the expected input/output variable information provided\n\n",
    "1.3.3": "Assume that the following list of imports are available in the current environment, so you don't need to import them when generating a fix.\n```python\nfrom .. import backend as K\n```\n\n",
    "source_code_body": "# This function from the same file, but not the same class, is called by the buggy function\ndef states(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef states(self, states):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef units(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef activation(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef use_bias(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef dropout(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef recurrent_dropout(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef units(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef activation(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef recurrent_activation(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef use_bias(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef dropout(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef recurrent_dropout(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef implementation(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef units(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef activation(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef recurrent_activation(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef use_bias(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef dropout(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef recurrent_dropout(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef implementation(self):\n    # Please ignore the body of this function\n\n# The declaration of the class containing the buggy function\nclass LSTMCell(Layer):\n    \"\"\"\n    Cell class for the LSTM layer.\n    \n    # Arguments\n        units: Positive integer, dimensionality of the output space.\n        activation: Activation function to use\n            (see [activations](../activations.md)).\n            If you pass None, no activation is applied\n            (ie. \"linear\" activation: `a(x) = x`).\n        recurrent_activation: Activation function to use\n            for the recurrent step\n            (see [activations](../activations.md)).\n        use_bias: Boolean, whether the layer uses a bias vector.\n        kernel_initializer: Initializer for the `kernel` weights matrix,\n            used for the linear transformation of the inputs.\n            (see [initializers](../initializers.md)).\n        recurrent_initializer: Initializer for the `recurrent_kernel`\n            weights matrix,\n            used for the linear transformation of the recurrent state.\n            (see [initializers](../initializers.md)).\n        bias_initializer: Initializer for the bias vector\n            (see [initializers](../initializers.md)).\n        unit_forget_bias: Boolean.\n            If True, add 1 to the bias of the forget gate at initialization.\n            Setting it to true will also force `bias_initializer=\"zeros\"`.\n            This is recommended in [Jozefowicz et al.](http://www.jmlr.org/proceedings/papers/v37/jozefowicz15.pdf)\n        kernel_regularizer: Regularizer function applied to\n            the `kernel` weights matrix\n            (see [regularizer](../regularizers.md)).\n        recurrent_regularizer: Regularizer function applied to\n            the `recurrent_kernel` weights matrix\n            (see [regularizer](../regularizers.md)).\n        bias_regularizer: Regularizer function applied to the bias vector\n            (see [regularizer](../regularizers.md)).\n        activity_regularizer: Regularizer function applied to\n            the output of the layer (its \"activation\").\n            (see [regularizer](../regularizers.md)).\n        kernel_constraint: Constraint function applied to\n            the `kernel` weights matrix\n            (see [constraints](../constraints.md)).\n        recurrent_constraint: Constraint function applied to\n            the `recurrent_kernel` weights matrix\n            (see [constraints](../constraints.md)).\n        bias_constraint: Constraint function applied to the bias vector\n            (see [constraints](../constraints.md)).\n        dropout: Float between 0 and 1.\n            Fraction of the units to drop for\n            the linear transformation of the inputs.\n        recurrent_dropout: Float between 0 and 1.\n            Fraction of the units to drop for\n            the linear transformation of the recurrent state.\n        implementation: Implementation mode, either 1 or 2.\n    \"\"\"\n\n\n\n\n    # this is the buggy function you need to fix\n    def call(self, inputs, states, training=None):\n        # dropout matrices for input units\n        dp_mask = self._dropout_mask\n        # dropout matrices for recurrent units\n        rec_dp_mask = self._recurrent_dropout_mask\n    \n        h_tm1 = states[0]  # previous memory state\n        c_tm1 = states[1]  # previous carry state\n    \n        if self.implementation == 1:\n            if 0 < self.dropout < 1.:\n                inputs_i = inputs * dp_mask[0]\n                inputs_f = inputs * dp_mask[1]\n                inputs_c = inputs * dp_mask[2]\n                inputs_o = inputs * dp_mask[3]\n            else:\n                inputs_i = inputs\n                inputs_f = inputs\n                inputs_c = inputs\n                inputs_o = inputs\n            x_i = K.dot(inputs_i, self.kernel_i) + self.bias_i\n            x_f = K.dot(inputs_f, self.kernel_f) + self.bias_f\n            x_c = K.dot(inputs_c, self.kernel_c) + self.bias_c\n            x_o = K.dot(inputs_o, self.kernel_o) + self.bias_o\n    \n            if 0 < self.recurrent_dropout < 1.:\n                h_tm1_i = h_tm1 * rec_dp_mask[0]\n                h_tm1_f = h_tm1 * rec_dp_mask[1]\n                h_tm1_c = h_tm1 * rec_dp_mask[2]\n                h_tm1_o = h_tm1 * rec_dp_mask[3]\n            else:\n                h_tm1_i = h_tm1\n                h_tm1_f = h_tm1\n                h_tm1_c = h_tm1\n                h_tm1_o = h_tm1\n            i = self.recurrent_activation(x_i + K.dot(h_tm1_i,\n                                                      self.recurrent_kernel_i))\n            f = self.recurrent_activation(x_f + K.dot(h_tm1_f,\n                                                      self.recurrent_kernel_f))\n            c = f * c_tm1 + i * self.activation(x_c + K.dot(h_tm1_c,\n                                                            self.recurrent_kernel_c))\n            o = self.recurrent_activation(x_o + K.dot(h_tm1_o,\n                                                      self.recurrent_kernel_o))\n        else:\n            if 0. < self.dropout < 1.:\n                inputs *= dp_mask[0]\n            z = K.dot(inputs, self.kernel)\n            if 0. < self.recurrent_dropout < 1.:\n                h_tm1 *= rec_dp_mask[0]\n            z += K.dot(h_tm1, self.recurrent_kernel)\n            if self.use_bias:\n                z = K.bias_add(z, self.bias)\n    \n            z0 = z[:, :self.units]\n            z1 = z[:, self.units: 2 * self.units]\n            z2 = z[:, 2 * self.units: 3 * self.units]\n            z3 = z[:, 3 * self.units:]\n    \n            i = self.recurrent_activation(z0)\n            f = self.recurrent_activation(z1)\n            c = f * c_tm1 + i * self.activation(z2)\n            o = self.recurrent_activation(z3)\n    \n        h = o * self.activation(c)\n        if 0 < self.dropout + self.recurrent_dropout:\n            if training is None:\n                h._uses_learning_phase = True\n        return h, [h, c]\n    \n"
}