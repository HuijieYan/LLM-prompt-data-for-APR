{
    "1.1.1": "def _preprocess_numpy_input(x, data_format, mode):\n    \n    if mode == 'tf':\n        x /= 127.5\n        x -= 1.\n        return x\n\n    if mode == 'torch':\n        x /= 255.\n        mean = [0.485, 0.456, 0.406]\n        std = [0.229, 0.224, 0.225]\n    else:\n        if data_format == 'channels_first':\n            # 'RGB'->'BGR'\n            if x.ndim == 3:\n                x = x[::-1, ...]\n            else:\n                x = x[:, ::-1, ...]\n        else:\n            # 'RGB'->'BGR'\n            x = x[..., ::-1]\n        mean = [103.939, 116.779, 123.68]\n        std = None\n\n    # Zero-center by mean pixel\n    if data_format == 'channels_first':\n        if x.ndim == 3:\n            x[0, :, :] -= mean[0]\n            x[1, :, :] -= mean[1]\n            x[2, :, :] -= mean[2]\n            if std is not None:\n                x[0, :, :] /= std[0]\n                x[1, :, :] /= std[1]\n                x[2, :, :] /= std[2]\n        else:\n            x[:, 0, :, :] -= mean[0]\n            x[:, 1, :, :] -= mean[1]\n            x[:, 2, :, :] -= mean[2]\n            if std is not None:\n                x[:, 0, :, :] /= std[0]\n                x[:, 1, :, :] /= std[1]\n                x[:, 2, :, :] /= std[2]\n    else:\n        x[..., 0] -= mean[0]\n        x[..., 1] -= mean[1]\n        x[..., 2] -= mean[2]\n        if std is not None:\n            x[..., 0] /= std[0]\n            x[..., 1] /= std[1]\n            x[..., 2] /= std[2]\n    return x\n",
    "1.1.2": "Preprocesses a Numpy array encoding a batch of images.\n\n# Arguments\n    x: Input array, 3D or 4D.\n    data_format: Data format of the image array.\n    mode: One of \"caffe\", \"tf\" or \"torch\".\n        - caffe: will convert the images from RGB to BGR,\n            then will zero-center each color channel with\n            respect to the ImageNet dataset,\n            without scaling.\n        - tf: will scale pixels between -1 and 1,\n            sample-wise.\n        - torch: will scale pixels between 0 and 1 and then\n            will normalize each channel with respect to the\n            ImageNet dataset.\n\n# Returns\n    Preprocessed Numpy array.",
    "1.2.1": "keras/applications/imagenet_utils.py",
    "1.2.2": null,
    "1.3.1": null,
    "1.3.2": null,
    "1.4.1": null,
    "1.4.2": null,
    "1.5.1": [
        "def test_preprocess_input():\n    # Test image batch with float and int image input\n    x = np.random.uniform(0, 255, (2, 10, 10, 3))\n    xint = x.astype('int32')\n    assert utils.preprocess_input(x).shape == x.shape\n    assert utils.preprocess_input(xint).shape == xint.shape\n\n    out1 = utils.preprocess_input(x, 'channels_last')\n    out1int = utils.preprocess_input(xint, 'channels_last')\n    out2 = utils.preprocess_input(np.transpose(x, (0, 3, 1, 2)),\n                                  'channels_first')\n    out2int = utils.preprocess_input(np.transpose(xint, (0, 3, 1, 2)),\n                                     'channels_first')\n    assert_allclose(out1, out2.transpose(0, 2, 3, 1))\n    assert_allclose(out1int, out2int.transpose(0, 2, 3, 1))\n\n    # Test single image\n    x = np.random.uniform(0, 255, (10, 10, 3))\n    xint = x.astype('int32')\n    assert utils.preprocess_input(x).shape == x.shape\n    assert utils.preprocess_input(xint).shape == xint.shape\n\n    out1 = utils.preprocess_input(x, 'channels_last')\n    out1int = utils.preprocess_input(xint, 'channels_last')\n    out2 = utils.preprocess_input(np.transpose(x, (2, 0, 1)),\n                                  'channels_first')\n    out2int = utils.preprocess_input(np.transpose(xint, (2, 0, 1)),\n                                     'channels_first')\n    assert_allclose(out1, out2.transpose(1, 2, 0))\n    assert_allclose(out1int, out2int.transpose(1, 2, 0))"
    ],
    "1.5.2": [
        "tests/keras/applications/imagenet_utils_test.py"
    ],
    "2.1.1": [
        [
            "E           numpy.core._exceptions.UFuncTypeError: Cannot cast ufunc 'subtract' output from dtype('float64') to dtype('int32') with casting rule 'same_kind'"
        ]
    ],
    "2.1.2": [
        [
            "def test_preprocess_input():\n        # Test image batch with float and int image input\n        x = np.random.uniform(0, 255, (2, 10, 10, 3))\n        xint = x.astype('int32')\n        assert utils.preprocess_input(x).shape == x.shape\n>       assert utils.preprocess_input(xint).shape == xint.shape\n\ntests/keras/applications/imagenet_utils_test.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nkeras/applications/imagenet_utils.py:178: in preprocess_input\n    return _preprocess_numpy_input(x, data_format=data_format, mode=mode)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nx = array([[[[136,  12,   8],\n         [226, 173,  28],\n         [ 76, 175, 143],\n         [ 76, 251,  52],\n         [ 86,...         [151,  91, 128],\n         [  1, 226, 220],\n         [214,  61, 186],\n         [ 55, 243,   0]]]], dtype=int32)\ndata_format = 'channels_last', mode = 'caffe'\n\n    def _preprocess_numpy_input(x, data_format, mode):\n        \"\"\"Preprocesses a Numpy array encoding a batch of images.\n    \n        # Arguments\n            x: Input array, 3D or 4D.\n            data_format: Data format of the image array.\n            mode: One of \"caffe\", \"tf\" or \"torch\".\n                - caffe: will convert the images from RGB to BGR,\n                    then will zero-center each color channel with\n                    respect to the ImageNet dataset,\n                    without scaling.\n                - tf: will scale pixels between -1 and 1,\n                    sample-wise.\n                - torch: will scale pixels between 0 and 1 and then\n                    will normalize each channel with respect to the\n                    ImageNet dataset.\n    \n        # Returns\n            Preprocessed Numpy array.\n        \"\"\"\n        if mode == 'tf':\n            x /= 127.5\n            x -= 1.\n            return x\n    \n        if mode == 'torch':\n            x /= 255.\n            mean = [0.485, 0.456, 0.406]\n            std = [0.229, 0.224, 0.225]\n        else:\n            if data_format == 'channels_first':\n                # 'RGB'->'BGR'\n                if x.ndim == 3:\n                    x = x[::-1, ...]\n                else:\n                    x = x[:, ::-1, ...]\n            else:\n                # 'RGB'->'BGR'\n                x = x[..., ::-1]\n            mean = [103.939, 116.779, 123.68]\n            std = None\n    \n        # Zero-center by mean pixel\n        if data_format == 'channels_first':\n            if x.ndim == 3:\n                x[0, :, :] -= mean[0]\n                x[1, :, :] -= mean[1]\n                x[2, :, :] -= mean[2]\n                if std is not None:\n                    x[0, :, :] /= std[0]\n                    x[1, :, :] /= std[1]\n                    x[2, :, :] /= std[2]\n            else:\n                x[:, 0, :, :] -= mean[0]\n                x[:, 1, :, :] -= mean[1]\n                x[:, 2, :, :] -= mean[2]\n                if std is not None:\n                    x[:, 0, :, :] /= std[0]\n                    x[:, 1, :, :] /= std[1]\n                    x[:, 2, :, :] /= std[2]\n        else:\n>           x[..., 0] -= mean[0]",
            "\nkeras/applications/imagenet_utils.py:82: UFuncTypeError"
        ]
    ],
    "2.2.1": [
        [
            {
                "mode": {
                    "value": "'caffe'",
                    "shape": "5",
                    "omitted": false
                },
                "x": {
                    "value": "array([[[[138.93167355, 145.69409078, 159.01897433] ... [ 45.12879342,  60.7569453 , 163.40798381]]]])",
                    "shape": "(2, 10, 10, 3)",
                    "omitted": true
                },
                "data_format": {
                    "value": "'channels_last'",
                    "shape": "13",
                    "omitted": false
                },
                "x.ndim": {
                    "value": "4",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "x": {
                    "value": "array([[[[ 5.50799743e+01,  2.89150908e+01,  1.52516735e+01] ... [ 5.94689838e+01, -5.60220547e+01, -7.85512066e+01]]]])",
                    "shape": "(2, 10, 10, 3)",
                    "omitted": true
                },
                "mean": {
                    "value": "[103.939, 116.779, 123.68]",
                    "shape": "3",
                    "omitted": false
                }
            }
        ]
    ],
    "2.2.2": [
        [
            {
                "mode": "str",
                "x": "ndarray",
                "data_format": "str",
                "x.ndim": "int"
            },
            {
                "x": "ndarray",
                "mean": "list"
            }
        ]
    ],
    "2.3.1": [
        [
            {
                "x": {
                    "value": "array([[[[ 29.21230896,  87.71107713, 188.50084669] ... [194.40231591, 142.8569995 ,  34.26928009]]]])",
                    "shape": "(2, 10, 10, 3)",
                    "omitted": true
                },
                "mode": {
                    "value": "'caffe'",
                    "shape": "5",
                    "omitted": false
                },
                "data_format": {
                    "value": "'channels_last'",
                    "shape": "13",
                    "omitted": false
                },
                "x.ndim": {
                    "value": "4",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "x": {
                    "value": "array([[[[  84.56184   ,  -29.067924  ,  -94.46769   ] ... [ -69.66972   ,   26.077995  ,   70.72231   ]]]], dtype=float32)",
                    "shape": "(2, 10, 10, 3)",
                    "omitted": true
                },
                "mean": {
                    "value": "[103.939, 116.779, 123.68]",
                    "shape": "3",
                    "omitted": false
                }
            }
        ],
        [
            {
                "x": {
                    "value": "array([[[[ 29,  87, 188],\n         [209, 193, 108] ... [194, 142,  34]]]], dtype=int32)",
                    "shape": "(2, 10, 10, 3)",
                    "omitted": true
                },
                "mode": {
                    "value": "'caffe'",
                    "shape": "5",
                    "omitted": false
                },
                "data_format": {
                    "value": "'channels_last'",
                    "shape": "13",
                    "omitted": false
                },
                "x.ndim": {
                    "value": "4",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "x": {
                    "value": "array([[[[ 8.4060997e+01, -2.9778999e+01, -9.4680000e+01] ... [-6.9939003e+01,  2.5221001e+01,  7.0320000e+01]]]],\n      dtype=float32)",
                    "shape": "(2, 10, 10, 3)",
                    "omitted": true
                },
                "mean": {
                    "value": "[103.939, 116.779, 123.68]",
                    "shape": "3",
                    "omitted": false
                }
            }
        ],
        [
            {
                "x": {
                    "value": "array([[[[ 29.21230896, 209.41729494,  45.62468045,  22.44007862,\n          243.84798   , 216.10475329, 113.55622864,  37.14484519,\n          222.4370074 , 164.5636182 ] ... [ 75.24741248, 214.76673091, 180.62167609,  37.68675235,\n          162.91539468, 126.39317227, 156.63167788, 173.35465026,\n           11.27012929,  34.26928009]]]])",
                    "shape": "(2, 3, 10, 10)",
                    "omitted": true
                },
                "mode": {
                    "value": "'caffe'",
                    "shape": "5",
                    "omitted": false
                },
                "data_format": {
                    "value": "'channels_first'",
                    "shape": "14",
                    "omitted": false
                },
                "x.ndim": {
                    "value": "4",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "x": {
                    "value": "array([[[[  84.56184   ,    4.74086   ,  -60.009624  ,  -77.312935  ,\n            82.67155   ,  126.40717   ,   91.07589   ,   97.959724  ,\n           -14.25592   ,  -40.40584   ] ... [-111.183846  ,   47.572136  ,   87.22161   ,  -23.14309   ,\n            12.973625  ,   34.522316  ,  104.74453   ,  -93.59377   ,\n           -82.728806  ,   70.72231   ]]]], dtype=float32)",
                    "shape": "(2, 3, 10, 10)",
                    "omitted": true
                },
                "mean": {
                    "value": "[103.939, 116.779, 123.68]",
                    "shape": "3",
                    "omitted": false
                }
            }
        ],
        [
            {
                "x": {
                    "value": "array([[[[ 29, 209,  45,  22, 243, 216, 113,  37, 222, 164] ... [ 75, 214, 180,  37, 162, 126, 156, 173,  11,  34]]]],\n      dtype=int32)",
                    "shape": "(2, 3, 10, 10)",
                    "omitted": true
                },
                "mode": {
                    "value": "'caffe'",
                    "shape": "5",
                    "omitted": false
                },
                "data_format": {
                    "value": "'channels_first'",
                    "shape": "14",
                    "omitted": false
                },
                "x.ndim": {
                    "value": "4",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "x": {
                    "value": "array([[[[ 8.4060997e+01,  4.0609970e+00, -6.0939003e+01,\n          -7.7939003e+01,  8.2060997e+01,  1.2606100e+02,\n           9.1060997e+01,  9.7060997e+01, -1.4939003e+01,\n          -4.0939003e+01] ... [-1.1168000e+02,  4.7320000e+01,  8.6320000e+01,\n          -2.3680000e+01,  1.2320000e+01,  3.4320000e+01,\n           1.0432000e+02, -9.3680000e+01, -8.3680000e+01,\n           7.0320000e+01]]]], dtype=float32)",
                    "shape": "(2, 3, 10, 10)",
                    "omitted": true
                },
                "mean": {
                    "value": "[103.939, 116.779, 123.68]",
                    "shape": "3",
                    "omitted": false
                }
            }
        ],
        [
            {
                "x": {
                    "value": "array([[[228.66238252,  36.4369918 , 204.78119743] ... [178.35512436, 105.38679985,  13.08039064]]])",
                    "shape": "(10, 10, 3)",
                    "omitted": true
                },
                "mode": {
                    "value": "'caffe'",
                    "shape": "5",
                    "omitted": false
                },
                "data_format": {
                    "value": "'channels_last'",
                    "shape": "13",
                    "omitted": false
                },
                "x.ndim": {
                    "value": "3",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "x": {
                    "value": "array([[[ 1.00842201e+02, -8.03420105e+01,  1.04982384e+02] ... [-9.08586121e+01, -1.13921967e+01,  5.46751175e+01]]],\n      dtype=float32)",
                    "shape": "(10, 10, 3)",
                    "omitted": true
                },
                "mean": {
                    "value": "[103.939, 116.779, 123.68]",
                    "shape": "3",
                    "omitted": false
                }
            }
        ],
        [
            {
                "x": {
                    "value": "array([[[228,  36, 204],\n        [244, 156, 122] ... [178, 105,  13]]], dtype=int32)",
                    "shape": "(10, 10, 3)",
                    "omitted": true
                },
                "mode": {
                    "value": "'caffe'",
                    "shape": "5",
                    "omitted": false
                },
                "data_format": {
                    "value": "'channels_last'",
                    "shape": "13",
                    "omitted": false
                },
                "x.ndim": {
                    "value": "3",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "x": {
                    "value": "array([[[ 100.061     ,  -80.779     ,  104.32      ] ... [ -90.939     ,  -11.778999  ,   54.32      ]]], dtype=float32)",
                    "shape": "(10, 10, 3)",
                    "omitted": true
                },
                "mean": {
                    "value": "[103.939, 116.779, 123.68]",
                    "shape": "3",
                    "omitted": false
                }
            }
        ],
        [
            {
                "x": {
                    "value": "array([[[228.66238252, 244.08452765,  99.43757151, 219.10769478,\n          88.62094635,   3.36911937, 141.73384306,  37.96260828,\n         163.28597842, 237.09218609] ... [180.64200314,  26.13185405, 214.58663258, 170.71953065,\n         152.5605002 ,  29.42117177,  36.81959288, 129.21450444,\n          18.75308327,  13.08039064]]])",
                    "shape": "(3, 10, 10)",
                    "omitted": true
                },
                "mode": {
                    "value": "'caffe'",
                    "shape": "5",
                    "omitted": false
                },
                "data_format": {
                    "value": "'channels_first'",
                    "shape": "14",
                    "omitted": false
                },
                "x.ndim": {
                    "value": "3",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "x": {
                    "value": "array([[[ 1.00842201e+02,  1.85020905e+01,  1.23630409e+02,\n          4.47860336e+01, -4.72529068e+01, -5.33748322e+01,\n         -4.54614487e+01,  1.05647469e+02, -5.73399391e+01,\n          1.15121712e+02] ... [-3.83664551e+01,  1.16741951e+02,  5.07955551e+01,\n          7.17619095e+01,  8.95218124e+01, -5.55644150e+01,\n          2.71690598e+01,  4.03660355e+01,  6.13274765e+01,\n          5.46751175e+01]]], dtype=float32)",
                    "shape": "(3, 10, 10)",
                    "omitted": true
                },
                "mean": {
                    "value": "[103.939, 116.779, 123.68]",
                    "shape": "3",
                    "omitted": false
                }
            }
        ],
        [
            {
                "x": {
                    "value": "array([[[228, 244,  99, 219,  88,   3, 141,  37, 163, 237] ... [180,  26, 214, 170, 152,  29,  36, 129,  18,  13]]], dtype=int32)",
                    "shape": "(3, 10, 10)",
                    "omitted": true
                },
                "mode": {
                    "value": "'caffe'",
                    "shape": "5",
                    "omitted": false
                },
                "data_format": {
                    "value": "'channels_first'",
                    "shape": "14",
                    "omitted": false
                },
                "x.ndim": {
                    "value": "3",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "x": {
                    "value": "array([[[ 100.061     ,   18.060997  ,  123.061     ,   44.060997  ,\n          -47.939003  ,  -53.939003  ,  -45.939003  ,  105.061     ,\n          -57.939003  ,  115.061     ] ... [ -38.68      ,  116.32      ,   50.32      ,   71.32      ,\n           89.32      ,  -55.68      ,   26.32      ,   40.32      ,\n           61.32      ,   54.32      ]]], dtype=float32)",
                    "shape": "(3, 10, 10)",
                    "omitted": true
                },
                "mean": {
                    "value": "[103.939, 116.779, 123.68]",
                    "shape": "3",
                    "omitted": false
                }
            }
        ]
    ],
    "2.3.2": [
        [
            {
                "x": "ndarray",
                "mode": "str",
                "data_format": "str",
                "x.ndim": "int"
            },
            {
                "x": "ndarray",
                "mean": "list"
            }
        ],
        [
            {
                "x": "ndarray",
                "mode": "str",
                "data_format": "str",
                "x.ndim": "int"
            },
            {
                "x": "ndarray",
                "mean": "list"
            }
        ],
        [
            {
                "x": "ndarray",
                "mode": "str",
                "data_format": "str",
                "x.ndim": "int"
            },
            {
                "x": "ndarray",
                "mean": "list"
            }
        ],
        [
            {
                "x": "ndarray",
                "mode": "str",
                "data_format": "str",
                "x.ndim": "int"
            },
            {
                "x": "ndarray",
                "mean": "list"
            }
        ],
        [
            {
                "x": "ndarray",
                "mode": "str",
                "data_format": "str",
                "x.ndim": "int"
            },
            {
                "x": "ndarray",
                "mean": "list"
            }
        ],
        [
            {
                "x": "ndarray",
                "mode": "str",
                "data_format": "str",
                "x.ndim": "int"
            },
            {
                "x": "ndarray",
                "mean": "list"
            }
        ],
        [
            {
                "x": "ndarray",
                "mode": "str",
                "data_format": "str",
                "x.ndim": "int"
            },
            {
                "x": "ndarray",
                "mean": "list"
            }
        ],
        [
            {
                "x": "ndarray",
                "mode": "str",
                "data_format": "str",
                "x.ndim": "int"
            },
            {
                "x": "ndarray",
                "mean": "list"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}