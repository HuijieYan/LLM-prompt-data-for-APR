{
    "fastapi:13": {
        "github_issue_title": [
            "Routes defined with same APIRouter instance share responses\n"
        ],
        "github_issue_description": [
            "Describe the bug\nWhen defining routes with an API router their alternative responses are shared.\n\nTo Reproduce\nExample 1:\n\nfrom fastapi import FastAPI\nfrom fastapi import APIRouter\n\napp = FastAPI()\nrouter = APIRouter()\n\n@router.get(\"/a\", responses={501: {\"description\": \"Error 1\"}})\nasync def a():\n    return \"a\"\n\n@router.get(\"/b\", responses={502: {\"description\": \"Error 2\"}})\nasync def b():\n    return \"b\"\n\n@router.get(\"/c\", responses={501: {\"description\": \"Error 1 overwriten\"}})\nasync def c():\n    return \"c\"\n\napp.include_router(router)\n/a will now have a single 501 error as expected.\n/b will now have both a 501 and a 502 error (should only be 502).\n/c will also have both 501 and 502, but an overwritten description (should only be 501).\n\nIf you split them into different routers, the problem does not occur:\nExample 2:\n\nrouter1 = APIRouter()\nrouter2 = APIRouter()\nrouter3 = APIRouter()\n\n@router1.get(\"/a\", responses={501: {\"description\": \"Error 1\"}})\nasync def a():\n    return \"a\"\n\n@router2.get(\"/b\", responses={502: {\"description\": \"Error 2\"}})\nasync def b():\n    return \"b\"\n\n@router3.get(\"/c\", responses={501: {\"description\": \"Error 1 overwriten\"}})\nasync def c():\n    return \"c\"\n\napp.include_router(router1)\napp.include_router(router2)\napp.include_router(router3\nExpected behavior\nResponses for different paths should not be merged. This only occurs for APIRouter, not if paths are added directly to the FastAPI app instance.\n"
        ]
    }
}