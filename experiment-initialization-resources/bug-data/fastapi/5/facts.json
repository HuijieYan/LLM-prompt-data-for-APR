{
    "1.1.1": "def create_cloned_field(field: ModelField) -> ModelField:\n    original_type = field.type_\n    if is_dataclass(original_type) and hasattr(original_type, \"__pydantic_model__\"):\n        original_type = original_type.__pydantic_model__  # type: ignore\n    use_type = original_type\n    if lenient_issubclass(original_type, BaseModel):\n        original_type = cast(Type[BaseModel], original_type)\n        use_type = create_model(\n            original_type.__name__, __config__=original_type.__config__\n        )\n        for f in original_type.__fields__.values():\n            use_type.__fields__[f.name] = f\n        use_type.__validators__ = original_type.__validators__\n    if PYDANTIC_1:\n        new_field = ModelField(\n            name=field.name,\n            type_=use_type,\n            class_validators={},\n            default=None,\n            required=False,\n            model_config=BaseConfig,\n            field_info=FieldInfo(None),\n        )\n    else:  # pragma: nocover\n        new_field = ModelField(  # type: ignore\n            name=field.name,\n            type_=use_type,\n            class_validators={},\n            default=None,\n            required=False,\n            model_config=BaseConfig,\n            schema=FieldInfo(None),\n        )\n    new_field.has_alias = field.has_alias\n    new_field.alias = field.alias\n    new_field.class_validators = field.class_validators\n    new_field.default = field.default\n    new_field.required = field.required\n    new_field.model_config = field.model_config\n    if PYDANTIC_1:\n        new_field.field_info = field.field_info\n    else:  # pragma: nocover\n        new_field.schema = field.schema  # type: ignore\n    new_field.allow_none = field.allow_none\n    new_field.validate_always = field.validate_always\n    if field.sub_fields:\n        new_field.sub_fields = [\n            create_cloned_field(sub_field) for sub_field in field.sub_fields\n        ]\n    if field.key_field:\n        new_field.key_field = create_cloned_field(field.key_field)\n    new_field.validators = field.validators\n    if PYDANTIC_1:\n        new_field.pre_validators = field.pre_validators\n        new_field.post_validators = field.post_validators\n    else:  # pragma: nocover\n        new_field.whole_pre_validators = field.whole_pre_validators  # type: ignore\n        new_field.whole_post_validators = field.whole_post_validators  # type: ignore\n    new_field.parse_json = field.parse_json\n    new_field.shape = field.shape\n    try:\n        new_field.populate_validators()\n    except AttributeError:  # pragma: nocover\n        # TODO: remove when removing support for Pydantic < 1.0.0\n        new_field._populate_validators()  # type: ignore\n    return new_field\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "fastapi/utils.py",
    "1.3.2": [
        "create_cloned_field(field: ModelField) -> ModelField"
    ],
    "1.4.1": [
        "def test_filter_sub_model():\n    response = client.get(\"/model\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"name\": \"model-a-name\",\n        \"description\": \"model-a-desc\",\n        \"model_b\": {\"username\": \"test-user\"},\n    }"
    ],
    "1.4.2": [
        "tests/test_filter_pydantic_sub_model.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: assert {'description': 'model-a-desc',\\n 'model_b': {'password': 'test-password', 'username': 'test-user'},\\n 'name': 'model-a-name'} == {'description': 'model-a-desc',\\n 'model_b': {'username': 'test-user'},\\n 'name': 'model-a-name'}\nE         Common items:\nE         {'description': 'model-a-desc', 'name': 'model-a-name'}\nE         Differing items:\nE         {'model_b': {'password': 'test-password', 'username': 'test-user'}} != {'model_b': {'username': 'test-user'}}\nE         Full diff:\nE           {\nE            'description': 'model-a-desc',\nE         -  'model_b': {'username': 'test-user'},\nE         +  'model_b': {'password': 'test-password', 'username': 'test-user'},\nE            'name': 'model-a-name',\nE           }"
        ]
    ],
    "2.1.2": [
        [
            "def test_filter_sub_model():\n        response = client.get(\"/model\")\n        assert response.status_code == 200\n>       assert response.json() == {\n            \"name\": \"model-a-name\",\n            \"description\": \"model-a-desc\",\n            \"model_b\": {\"username\": \"test-user\"},\n        }",
            "\ntests/test_filter_pydantic_sub_model.py:87: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "field.type_": {
                    "value": "<class 'tests.test_filter_pydantic_sub_model.ModelA'>",
                    "shape": null,
                    "omitted": false
                },
                "field": {
                    "value": "ModelField(name='Response_get_model_a_model_get', type=Optional[ModelA], required=False, default=None)",
                    "shape": "1",
                    "omitted": false
                },
                "field.name": {
                    "value": "'Response_get_model_a_model_get'",
                    "shape": "30",
                    "omitted": false
                },
                "field.has_alias": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "field.alias": {
                    "value": "'Response_get_model_a_model_get'",
                    "shape": "30",
                    "omitted": false
                },
                "field.class_validators": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                },
                "field.required": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "field.field_info": {
                    "value": "FieldInfo(extra={})",
                    "shape": null,
                    "omitted": false
                },
                "field.allow_none": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "field.validate_always": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "field.validators": {
                    "value": "[<cyfunction BaseModel.validate at 0x7fc75828f110>]",
                    "shape": "1",
                    "omitted": false
                },
                "field.parse_json": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "field.shape": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "original_type": {
                    "value": "<class 'tests.test_filter_pydantic_sub_model.ModelA'>",
                    "shape": null,
                    "omitted": false
                },
                "use_type": {
                    "value": "<class 'ModelA'>",
                    "shape": null,
                    "omitted": false
                },
                "original_type.__name__": {
                    "value": "'ModelA'",
                    "shape": "6",
                    "omitted": false
                },
                "f": {
                    "value": "ModelField(name='model_b', type=ModelB, required=True)",
                    "shape": "1",
                    "omitted": false
                },
                "original_type.__fields__": {
                    "value": "{'name': ModelField(name='name', type=str, required=True), 'description': ModelField(name='description', type=Optional[str], required=False, default=None), 'model_b': ModelField(name='model_b', type=ModelB, required=True)}",
                    "shape": "3",
                    "omitted": false
                },
                "use_type.__fields__": {
                    "value": "{'name': ModelField(name='name', type=str, required=True), 'description': ModelField(name='description', type=Optional[str], required=False, default=None), 'model_b': ModelField(name='model_b', type=ModelB, required=True)}",
                    "shape": "3",
                    "omitted": false
                },
                "f.name": {
                    "value": "'model_b'",
                    "shape": "7",
                    "omitted": false
                },
                "use_type.__validators__": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                },
                "original_type.__validators__": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                },
                "new_field": {
                    "value": "ModelField(name='Response_get_model_a_model_get', type=Optional[ModelA], required=False, default=None)",
                    "shape": "1",
                    "omitted": false
                },
                "new_field.has_alias": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "new_field.alias": {
                    "value": "'Response_get_model_a_model_get'",
                    "shape": "30",
                    "omitted": false
                },
                "new_field.class_validators": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                },
                "new_field.required": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "new_field.field_info": {
                    "value": "FieldInfo(extra={})",
                    "shape": null,
                    "omitted": false
                },
                "new_field.allow_none": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "new_field.validate_always": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "new_field.validators": {
                    "value": "[<cyfunction BaseModel.validate at 0x7fc75828f380>]",
                    "shape": "1",
                    "omitted": false
                },
                "new_field.parse_json": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "new_field.shape": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "field.type_": "ModelMetaclass",
                "field": "ModelField",
                "field.name": "str",
                "field.has_alias": "bool",
                "field.alias": "str",
                "field.class_validators": "dict",
                "field.required": "bool",
                "field.field_info": "FieldInfo",
                "field.allow_none": "bool",
                "field.validate_always": "bool",
                "field.validators": "list",
                "field.parse_json": "bool",
                "field.shape": "int"
            },
            {
                "original_type": "ModelMetaclass",
                "use_type": "ModelMetaclass",
                "original_type.__name__": "str",
                "f": "ModelField",
                "original_type.__fields__": "dict",
                "use_type.__fields__": "dict",
                "f.name": "str",
                "use_type.__validators__": "dict",
                "original_type.__validators__": "dict",
                "new_field": "ModelField",
                "new_field.has_alias": "bool",
                "new_field.alias": "str",
                "new_field.class_validators": "dict",
                "new_field.required": "bool",
                "new_field.field_info": "FieldInfo",
                "new_field.allow_none": "bool",
                "new_field.validate_always": "bool",
                "new_field.validators": "list",
                "new_field.parse_json": "bool",
                "new_field.shape": "int"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "field": {
                    "value": "ModelField(name='name', type=str, required=True)",
                    "shape": "1",
                    "omitted": false
                },
                "field.name": {
                    "value": "'name'",
                    "shape": "4",
                    "omitted": false
                },
                "field.has_alias": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "field.alias": {
                    "value": "'name'",
                    "shape": "4",
                    "omitted": false
                },
                "field.class_validators": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                },
                "field.required": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "field.field_info": {
                    "value": "FieldInfo(default=Ellipsis, extra={})",
                    "shape": null,
                    "omitted": false
                },
                "field.allow_none": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "field.validate_always": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "field.validators": {
                    "value": "[<cyfunction str_validator at 0x7fe0ac484d40>]",
                    "shape": "1",
                    "omitted": false
                },
                "field.parse_json": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "field.shape": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "original_type.__name__": {
                    "value": "'str'",
                    "shape": "3",
                    "omitted": false
                },
                "new_field": {
                    "value": "ModelField(name='name', type=str, required=True)",
                    "shape": "1",
                    "omitted": false
                },
                "new_field.has_alias": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "new_field.alias": {
                    "value": "'name'",
                    "shape": "4",
                    "omitted": false
                },
                "new_field.class_validators": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                },
                "new_field.required": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "new_field.field_info": {
                    "value": "FieldInfo(default=Ellipsis, extra={})",
                    "shape": null,
                    "omitted": false
                },
                "new_field.allow_none": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "new_field.validate_always": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "new_field.validators": {
                    "value": "[<cyfunction str_validator at 0x7fe0ac44f6c0>]",
                    "shape": "1",
                    "omitted": false
                },
                "new_field.parse_json": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "new_field.shape": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "field": {
                    "value": "ModelField(name='description', type=Optional[str], required=False, default=None)",
                    "shape": "1",
                    "omitted": false
                },
                "field.name": {
                    "value": "'description'",
                    "shape": "11",
                    "omitted": false
                },
                "field.has_alias": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "field.alias": {
                    "value": "'description'",
                    "shape": "11",
                    "omitted": false
                },
                "field.class_validators": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                },
                "field.required": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "field.field_info": {
                    "value": "FieldInfo(extra={})",
                    "shape": null,
                    "omitted": false
                },
                "field.allow_none": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "field.validate_always": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "field.validators": {
                    "value": "[<cyfunction str_validator at 0x7fe0ac484e10>]",
                    "shape": "1",
                    "omitted": false
                },
                "field.parse_json": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "field.shape": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "original_type.__name__": {
                    "value": "'str'",
                    "shape": "3",
                    "omitted": false
                },
                "new_field": {
                    "value": "ModelField(name='description', type=Optional[str], required=False, default=None)",
                    "shape": "1",
                    "omitted": false
                },
                "new_field.has_alias": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "new_field.alias": {
                    "value": "'description'",
                    "shape": "11",
                    "omitted": false
                },
                "new_field.class_validators": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                },
                "new_field.required": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "new_field.field_info": {
                    "value": "FieldInfo(extra={})",
                    "shape": null,
                    "omitted": false
                },
                "new_field.allow_none": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "new_field.validate_always": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "new_field.validators": {
                    "value": "[<cyfunction str_validator at 0x7fe0ac44f930>]",
                    "shape": "1",
                    "omitted": false
                },
                "new_field.parse_json": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "new_field.shape": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "field": {
                    "value": "ModelField(name='username', type=str, required=True)",
                    "shape": "1",
                    "omitted": false
                },
                "field.name": {
                    "value": "'username'",
                    "shape": "8",
                    "omitted": false
                },
                "field.has_alias": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "field.alias": {
                    "value": "'username'",
                    "shape": "8",
                    "omitted": false
                },
                "field.class_validators": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                },
                "field.required": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "field.field_info": {
                    "value": "FieldInfo(default=Ellipsis, extra={})",
                    "shape": null,
                    "omitted": false
                },
                "field.allow_none": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "field.validate_always": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "field.validators": {
                    "value": "[<cyfunction str_validator at 0x7fe0ac484ad0>]",
                    "shape": "1",
                    "omitted": false
                },
                "field.parse_json": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "field.shape": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "original_type.__name__": {
                    "value": "'str'",
                    "shape": "3",
                    "omitted": false
                },
                "new_field": {
                    "value": "ModelField(name='username', type=str, required=True)",
                    "shape": "1",
                    "omitted": false
                },
                "new_field.has_alias": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "new_field.alias": {
                    "value": "'username'",
                    "shape": "8",
                    "omitted": false
                },
                "new_field.class_validators": {
                    "value": "{}",
                    "shape": "0",
                    "omitted": false
                },
                "new_field.required": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "new_field.field_info": {
                    "value": "FieldInfo(default=Ellipsis, extra={})",
                    "shape": null,
                    "omitted": false
                },
                "new_field.allow_none": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "new_field.validate_always": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "new_field.validators": {
                    "value": "[<cyfunction str_validator at 0x7fe0ac44fe10>]",
                    "shape": "1",
                    "omitted": false
                },
                "new_field.parse_json": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "new_field.shape": {
                    "value": "1",
                    "shape": null,
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "field": "ModelField",
                "field.name": "str",
                "field.has_alias": "bool",
                "field.alias": "str",
                "field.class_validators": "dict",
                "field.required": "bool",
                "field.field_info": "FieldInfo",
                "field.allow_none": "bool",
                "field.validate_always": "bool",
                "field.validators": "list",
                "field.parse_json": "bool",
                "field.shape": "int"
            },
            {
                "original_type.__name__": "str",
                "new_field": "ModelField",
                "new_field.has_alias": "bool",
                "new_field.alias": "str",
                "new_field.class_validators": "dict",
                "new_field.required": "bool",
                "new_field.field_info": "FieldInfo",
                "new_field.allow_none": "bool",
                "new_field.validate_always": "bool",
                "new_field.validators": "list",
                "new_field.parse_json": "bool",
                "new_field.shape": "int"
            }
        ],
        [
            {
                "field": "ModelField",
                "field.name": "str",
                "field.has_alias": "bool",
                "field.alias": "str",
                "field.class_validators": "dict",
                "field.required": "bool",
                "field.field_info": "FieldInfo",
                "field.allow_none": "bool",
                "field.validate_always": "bool",
                "field.validators": "list",
                "field.parse_json": "bool",
                "field.shape": "int"
            },
            {
                "original_type.__name__": "str",
                "new_field": "ModelField",
                "new_field.has_alias": "bool",
                "new_field.alias": "str",
                "new_field.class_validators": "dict",
                "new_field.required": "bool",
                "new_field.field_info": "FieldInfo",
                "new_field.allow_none": "bool",
                "new_field.validate_always": "bool",
                "new_field.validators": "list",
                "new_field.parse_json": "bool",
                "new_field.shape": "int"
            }
        ],
        [
            {
                "field": "ModelField",
                "field.name": "str",
                "field.has_alias": "bool",
                "field.alias": "str",
                "field.class_validators": "dict",
                "field.required": "bool",
                "field.field_info": "FieldInfo",
                "field.allow_none": "bool",
                "field.validate_always": "bool",
                "field.validators": "list",
                "field.parse_json": "bool",
                "field.shape": "int"
            },
            {
                "original_type.__name__": "str",
                "new_field": "ModelField",
                "new_field.has_alias": "bool",
                "new_field.alias": "str",
                "new_field.class_validators": "dict",
                "new_field.required": "bool",
                "new_field.field_info": "FieldInfo",
                "new_field.allow_none": "bool",
                "new_field.validate_always": "bool",
                "new_field.validators": "list",
                "new_field.parse_json": "bool",
                "new_field.shape": "int"
            }
        ]
    ],
    "3.1.1": [
        "Nested pydantic model in response model doesn't filter additional data\n",
        "Return value (nested model) not filtered according to response_model\n"
    ],
    "3.1.2": [
        "Describe the bug\nIn Response Model documentation, there is an example for FastAPI will take care of filtering out all the data that is not declared in the output model. However, this doesn't happen for a nested model.\n\nTo Reproduce\nCreate a file with:\nfrom fastapi import FastAPI, Depends\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\n\nclass ModelB(BaseModel):\n    username: str\n\n\nclass ModelC(ModelB):\n    password: str\n\n\nclass ModelA(BaseModel):\n    name: str\n    description: str = None\n    model_b: ModelB\n\n\nasync def get_model_c() -> ModelC:\n    return ModelC(username=\"test-user\", password=\"test-password\")\n\n\n@app.get(\"/model\", response_model=ModelA)\nasync def get_model_a(model_c=Depends(get_model_c)):\n    return {\"name\": \"model-a-name\", \"description\": \"model-a-desc\", \"model_b\": model_c}\nOpen the browser and call the endpoint /model.\nIt returns a JSON with {\"name\":\"model-a-name\",\"description\":\"model-a-desc\",\"model_b\":{\"username\":\"test-user\",\"password\":\"test-password\"}}.\nBut I expected it to return {\"name\":\"model-a-name\",\"description\":\"model-a-desc\",\"model_b\":{\"username\":\"test-user\"}}.\nExpected behavior\nFiltering should be done for nested model attributes too.\n\nEnvironment\nOS: Ubuntu 18.04.3 LTS\nFastAPI 0.45.0\nPython 3.8.1\n",
        "Describe the bug\nI have a Response wrapper for my responses that only has a data field which contains the actual response data.\nThis actual data is not filtered according to the specified response_model unless I explicitly convert it into the desired response_model.\n\nTo Reproduce\nSteps to reproduce the behavior with a minimum self-contained file.\n\nReplace each part with your own scenario:\n\nCreate a file with:\nfrom typing import TypeVar, Generic, Optional, List\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\nfrom pydantic.generics import GenericModel\nfrom requests import Response\nfrom starlette import status\nfrom starlette.testclient import TestClient\n\nDataT = TypeVar('DataT')\n\n\nclass R(GenericModel, Generic[DataT]):\n    \"\"\"Wrapper for responses\"\"\"\n    data: Optional[DataT]\n\n\nclass ProjectOut(BaseModel):\n    id: int\n\n\nclass ProjectInDB(ProjectOut):\n    user_id: int\n\n\napp = FastAPI()\n\n\n@app.get(\n    '/simple',\n    response_model=ProjectOut\n)\ndef get_simple() -> ProjectOut:\n    project = ProjectInDB(id=1, user_id=2)\n\n    return project\n\n\n@app.get(\n    '/nested_explicit',\n    response_model=R[ProjectOut]\n)\ndef get_nested() -> R[ProjectOut]:\n    project = ProjectInDB(id=1, user_id=2)\n\n    return R[ProjectOut](data=ProjectOut(**project.dict()))\n\n\n@app.get(\n    '/nested',\n    response_model=R[ProjectOut]\n)\ndef get_nested() -> R[ProjectOut]:\n    project = ProjectInDB(id=1, user_id=2)\n\n    return R[ProjectOut](data=project)\n\n\ndef test_response_model():\n    with TestClient(app) as client:\n        response: Response = client.get('/simple')\n\n    assert response.status_code == status.HTTP_200_OK\n\n    data: dict = response.json()\n    assert 'user_id' not in data.keys()\n\n\ndef test_nested_response_model_explicit():\n    with TestClient(app) as client:\n        response: Response = client.get('/nested_explicit')\n\n    assert response.status_code == status.HTTP_200_OK\n\n    response_wrapper: dict = response.json()\n    data = response_wrapper['data']\n    assert 'user_id' not in data.keys()\n\n\ndef test_nested_response_model():\n    with TestClient(app) as client:\n        response: Response = client.get('/nested')\n\n    assert response.status_code == status.HTTP_200_OK\n\n    response_wrapper: dict = response.json()\n    data = response_wrapper['data']\n    assert 'user_id' not in data.keys()\nRun the tests with pytest: the test test_nested_response_model fails\nExpected behavior\nWhen returning data, it is filtered according to the specified response_model.\n\nScreenshots\nEnvironment\nOS: macOS\nFastAPI Version: 0.45.0\nPython version: 3.7.5\n"
    ],
    "used_imports": "from dataclasses import is_dataclass\nfrom typing import Any, Dict, List, Sequence, Set, Type, cast\nfrom pydantic import BaseConfig, BaseModel, create_model\nfrom pydantic.utils import lenient_issubclass\nfrom pydantic.fields import Field as ModelField\nfrom pydantic import Schema as FieldInfo"
}