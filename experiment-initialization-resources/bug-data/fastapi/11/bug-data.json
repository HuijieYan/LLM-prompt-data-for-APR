{
    "fastapi:11": {
        "/Volumes/SSD2T/bgp_envs/repos/fastapi_11/fastapi/dependencies/utils.py": {
            "buggy_functions": [
                {
                    "function_name": "is_scalar_field",
                    "function_code": "def is_scalar_field(field: Field) -> bool:\n    return (\n        field.shape == Shape.SINGLETON\n        and not lenient_issubclass(field.type_, BaseModel)\n        and not lenient_issubclass(field.type_, sequence_types + (dict,))\n        and not isinstance(field.schema, params.Body)\n    )\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 133,
                    "end_line": 139,
                    "variables": {
                        "Field": [
                            133
                        ],
                        "field.shape": [
                            135
                        ],
                        "field": [
                            136,
                            137,
                            138,
                            135
                        ],
                        "Shape.SINGLETON": [
                            135
                        ],
                        "Shape": [
                            135
                        ],
                        "lenient_issubclass": [
                            136,
                            137
                        ],
                        "field.type_": [
                            136,
                            137
                        ],
                        "BaseModel": [
                            136
                        ],
                        "sequence_types": [
                            137
                        ],
                        "dict": [
                            137
                        ],
                        "isinstance": [
                            138
                        ],
                        "field.schema": [
                            138
                        ],
                        "params.Body": [
                            138
                        ],
                        "params": [
                            138
                        ],
                        "bool": [
                            133
                        ]
                    },
                    "filtered_variables": {
                        "Field": [
                            133
                        ],
                        "field.shape": [
                            135
                        ],
                        "field": [
                            136,
                            137,
                            138,
                            135
                        ],
                        "Shape.SINGLETON": [
                            135
                        ],
                        "Shape": [
                            135
                        ],
                        "lenient_issubclass": [
                            136,
                            137
                        ],
                        "field.type_": [
                            136,
                            137
                        ],
                        "BaseModel": [
                            136
                        ],
                        "sequence_types": [
                            137
                        ],
                        "field.schema": [
                            138
                        ],
                        "params.Body": [
                            138
                        ],
                        "params": [
                            138
                        ]
                    },
                    "diff_line_number": 134,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "Field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.shape": {
                                    "variable_value": "<Shape.SINGLETON: 1>",
                                    "variable_type": "Shape",
                                    "variable_shape": null
                                },
                                "field": {
                                    "variable_value": "<Field(item type=typing.Union[tests.test_union_body.OtherItem, tests.test_union_body.Item] required)>",
                                    "variable_type": "Field",
                                    "variable_shape": "<Shape.SINGLETON: 1>"
                                },
                                "Shape.SINGLETON": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lenient_issubclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": "typing.Union[tests.test_union_body.OtherItem, tests.test_union_body.Item]",
                                    "variable_type": "_GenericAlias",
                                    "variable_shape": null
                                },
                                "BaseModel": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_types": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.schema": {
                                    "variable_value": "Schema(default: Ellipsis, extra: {})",
                                    "variable_type": "Query",
                                    "variable_shape": null
                                },
                                "params.Body": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.shape": {
                                    "variable_value": "<Shape.SINGLETON: 1>",
                                    "variable_type": "Shape",
                                    "variable_shape": null
                                },
                                "field": {
                                    "variable_value": "<Field(item type=typing.Union[tests.test_union_body.OtherItem, tests.test_union_body.Item] required)>",
                                    "variable_type": "Field",
                                    "variable_shape": "<Shape.SINGLETON: 1>"
                                },
                                "Shape.SINGLETON": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lenient_issubclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": "typing.Union[tests.test_union_body.OtherItem, tests.test_union_body.Item]",
                                    "variable_type": "_GenericAlias",
                                    "variable_shape": null
                                },
                                "BaseModel": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_types": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.schema": {
                                    "variable_value": "Schema(default: Ellipsis, extra: {})",
                                    "variable_type": "Query",
                                    "variable_shape": null
                                },
                                "params.Body": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.shape": {
                                    "variable_value": "<Shape.SINGLETON: 1>",
                                    "variable_type": "Shape",
                                    "variable_shape": null
                                },
                                "field": {
                                    "variable_value": "<Field(item type=typing.Union[tests.test_union_body.OtherItem, tests.test_union_body.Item] required)>",
                                    "variable_type": "Field",
                                    "variable_shape": "<Shape.SINGLETON: 1>"
                                },
                                "Shape.SINGLETON": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lenient_issubclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": "typing.Union[tests.test_union_body.OtherItem, tests.test_union_body.Item]",
                                    "variable_type": "_GenericAlias",
                                    "variable_shape": null
                                },
                                "BaseModel": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_types": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.schema": {
                                    "variable_value": "Schema(default: Ellipsis, extra: {})",
                                    "variable_type": "Query",
                                    "variable_shape": null
                                },
                                "params.Body": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.shape": {
                                    "variable_value": "<Shape.SINGLETON: 1>",
                                    "variable_type": "Shape",
                                    "variable_shape": null
                                },
                                "field": {
                                    "variable_value": "<Field(item type=typing.Union[tests.test_union_body.OtherItem, tests.test_union_body.Item] required)>",
                                    "variable_type": "Field",
                                    "variable_shape": "<Shape.SINGLETON: 1>"
                                },
                                "Shape.SINGLETON": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lenient_issubclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": "typing.Union[tests.test_union_body.OtherItem, tests.test_union_body.Item]",
                                    "variable_type": "_GenericAlias",
                                    "variable_shape": null
                                },
                                "BaseModel": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_types": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.schema": {
                                    "variable_value": "Schema(default: Ellipsis, extra: {})",
                                    "variable_type": "Query",
                                    "variable_shape": null
                                },
                                "params.Body": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.shape": {
                                    "variable_value": "<Shape.SINGLETON: 1>",
                                    "variable_type": "Shape",
                                    "variable_shape": null
                                },
                                "field": {
                                    "variable_value": "<Field(item type=typing.Union[tests.test_union_inherited_body.ExtendedItem, tests.test_union_inherited_body.Item] required)>",
                                    "variable_type": "Field",
                                    "variable_shape": "<Shape.SINGLETON: 1>"
                                },
                                "Shape.SINGLETON": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lenient_issubclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": "typing.Union[tests.test_union_inherited_body.ExtendedItem, tests.test_union_inherited_body.Item]",
                                    "variable_type": "_GenericAlias",
                                    "variable_shape": null
                                },
                                "BaseModel": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_types": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.schema": {
                                    "variable_value": "Schema(default: Ellipsis, extra: {})",
                                    "variable_type": "Query",
                                    "variable_shape": null
                                },
                                "params.Body": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.shape": {
                                    "variable_value": "<Shape.SINGLETON: 1>",
                                    "variable_type": "Shape",
                                    "variable_shape": null
                                },
                                "field": {
                                    "variable_value": "<Field(item type=typing.Union[tests.test_union_inherited_body.ExtendedItem, tests.test_union_inherited_body.Item] required)>",
                                    "variable_type": "Field",
                                    "variable_shape": "<Shape.SINGLETON: 1>"
                                },
                                "Shape.SINGLETON": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lenient_issubclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": "typing.Union[tests.test_union_inherited_body.ExtendedItem, tests.test_union_inherited_body.Item]",
                                    "variable_type": "_GenericAlias",
                                    "variable_shape": null
                                },
                                "BaseModel": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_types": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.schema": {
                                    "variable_value": "Schema(default: Ellipsis, extra: {})",
                                    "variable_type": "Query",
                                    "variable_shape": null
                                },
                                "params.Body": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.shape": {
                                    "variable_value": "<Shape.SINGLETON: 1>",
                                    "variable_type": "Shape",
                                    "variable_shape": null
                                },
                                "field": {
                                    "variable_value": "<Field(item type=typing.Union[tests.test_union_inherited_body.ExtendedItem, tests.test_union_inherited_body.Item] required)>",
                                    "variable_type": "Field",
                                    "variable_shape": "<Shape.SINGLETON: 1>"
                                },
                                "Shape.SINGLETON": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lenient_issubclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": "typing.Union[tests.test_union_inherited_body.ExtendedItem, tests.test_union_inherited_body.Item]",
                                    "variable_type": "_GenericAlias",
                                    "variable_shape": null
                                },
                                "BaseModel": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_types": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.schema": {
                                    "variable_value": "Schema(default: Ellipsis, extra: {})",
                                    "variable_type": "Query",
                                    "variable_shape": null
                                },
                                "params.Body": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.shape": {
                                    "variable_value": "<Shape.SINGLETON: 1>",
                                    "variable_type": "Shape",
                                    "variable_shape": null
                                },
                                "field": {
                                    "variable_value": "<Field(item type=typing.Union[tests.test_union_inherited_body.ExtendedItem, tests.test_union_inherited_body.Item] required)>",
                                    "variable_type": "Field",
                                    "variable_shape": "<Shape.SINGLETON: 1>"
                                },
                                "Shape.SINGLETON": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lenient_issubclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": "typing.Union[tests.test_union_inherited_body.ExtendedItem, tests.test_union_inherited_body.Item]",
                                    "variable_type": "_GenericAlias",
                                    "variable_shape": null
                                },
                                "BaseModel": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_types": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.schema": {
                                    "variable_value": "Schema(default: Ellipsis, extra: {})",
                                    "variable_type": "Query",
                                    "variable_shape": null
                                },
                                "params.Body": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "Field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.shape": {
                                    "variable_value": "<Shape.SINGLETON: 1>",
                                    "variable_type": "Shape",
                                    "variable_shape": null
                                },
                                "field": {
                                    "variable_value": "<Field(item_OtherItem type=OtherItem required)>",
                                    "variable_type": "Field",
                                    "variable_shape": "<Shape.SINGLETON: 1>"
                                },
                                "Shape.SINGLETON": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lenient_issubclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": "<class 'tests.test_union_body.OtherItem'>",
                                    "variable_type": "MetaModel",
                                    "variable_shape": null
                                },
                                "BaseModel": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_types": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.schema": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "params.Body": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.sub_fields": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_scalar_field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.shape": {
                                    "variable_value": "<Shape.SINGLETON: 1>",
                                    "variable_type": "Shape",
                                    "variable_shape": null
                                },
                                "field": {
                                    "variable_value": "<Field(item_OtherItem type=OtherItem required)>",
                                    "variable_type": "Field",
                                    "variable_shape": "<Shape.SINGLETON: 1>"
                                },
                                "Shape.SINGLETON": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lenient_issubclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": "<class 'tests.test_union_body.OtherItem'>",
                                    "variable_type": "MetaModel",
                                    "variable_shape": null
                                },
                                "BaseModel": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_types": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.schema": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "params.Body": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.sub_fields": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_scalar_field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.shape": {
                                    "variable_value": "<Shape.SINGLETON: 1>",
                                    "variable_type": "Shape",
                                    "variable_shape": null
                                },
                                "field": {
                                    "variable_value": "<Field(item_OtherItem type=OtherItem required)>",
                                    "variable_type": "Field",
                                    "variable_shape": "<Shape.SINGLETON: 1>"
                                },
                                "Shape.SINGLETON": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lenient_issubclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": "<class 'tests.test_union_body.OtherItem'>",
                                    "variable_type": "MetaModel",
                                    "variable_shape": null
                                },
                                "BaseModel": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_types": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.schema": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "params.Body": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.sub_fields": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_scalar_field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.shape": {
                                    "variable_value": "<Shape.SINGLETON: 1>",
                                    "variable_type": "Shape",
                                    "variable_shape": null
                                },
                                "field": {
                                    "variable_value": "<Field(item type=typing.Union[tests.test_union_body.OtherItem, tests.test_union_body.Item] required)>",
                                    "variable_type": "Field",
                                    "variable_shape": "<Shape.SINGLETON: 1>"
                                },
                                "Shape.SINGLETON": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lenient_issubclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": "typing.Union[tests.test_union_body.OtherItem, tests.test_union_body.Item]",
                                    "variable_type": "_GenericAlias",
                                    "variable_shape": null
                                },
                                "BaseModel": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_types": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.schema": {
                                    "variable_value": "Schema(default: Ellipsis, extra: {})",
                                    "variable_type": "Query",
                                    "variable_shape": null
                                },
                                "params.Body": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.sub_fields": {
                                    "variable_value": "[<Field(item_OtherItem type=OtherItem required)>, <Field(item_Item type=Item required)>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "is_scalar_field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.shape": {
                                    "variable_value": "<Shape.SINGLETON: 1>",
                                    "variable_type": "Shape",
                                    "variable_shape": null
                                },
                                "field": {
                                    "variable_value": "<Field(item type=typing.Union[tests.test_union_body.OtherItem, tests.test_union_body.Item] required)>",
                                    "variable_type": "Field",
                                    "variable_shape": "<Shape.SINGLETON: 1>"
                                },
                                "Shape.SINGLETON": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lenient_issubclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": "typing.Union[tests.test_union_body.OtherItem, tests.test_union_body.Item]",
                                    "variable_type": "_GenericAlias",
                                    "variable_shape": null
                                },
                                "BaseModel": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_types": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.schema": {
                                    "variable_value": "Schema(default: Ellipsis, extra: {})",
                                    "variable_type": "Body",
                                    "variable_shape": null
                                },
                                "params.Body": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.sub_fields": {
                                    "variable_value": "[<Field(item_OtherItem type=OtherItem required)>, <Field(item_Item type=Item required)>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "is_scalar_field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.shape": {
                                    "variable_value": "<Shape.SINGLETON: 1>",
                                    "variable_type": "Shape",
                                    "variable_shape": null
                                },
                                "field": {
                                    "variable_value": "<Field(item type=typing.Union[tests.test_union_body.OtherItem, tests.test_union_body.Item] required)>",
                                    "variable_type": "Field",
                                    "variable_shape": "<Shape.SINGLETON: 1>"
                                },
                                "Shape.SINGLETON": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lenient_issubclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": "typing.Union[tests.test_union_body.OtherItem, tests.test_union_body.Item]",
                                    "variable_type": "_GenericAlias",
                                    "variable_shape": null
                                },
                                "BaseModel": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_types": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.schema": {
                                    "variable_value": "Schema(default: Ellipsis, extra: {})",
                                    "variable_type": "Body",
                                    "variable_shape": null
                                },
                                "params.Body": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.sub_fields": {
                                    "variable_value": "[<Field(item_OtherItem type=OtherItem required)>, <Field(item_Item type=Item required)>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "is_scalar_field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.shape": {
                                    "variable_value": "<Shape.SINGLETON: 1>",
                                    "variable_type": "Shape",
                                    "variable_shape": null
                                },
                                "field": {
                                    "variable_value": "<Field(item_ExtendedItem type=ExtendedItem required)>",
                                    "variable_type": "Field",
                                    "variable_shape": "<Shape.SINGLETON: 1>"
                                },
                                "Shape.SINGLETON": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lenient_issubclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": "<class 'tests.test_union_inherited_body.ExtendedItem'>",
                                    "variable_type": "MetaModel",
                                    "variable_shape": null
                                },
                                "BaseModel": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_types": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.schema": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "params.Body": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.sub_fields": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_scalar_field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.shape": {
                                    "variable_value": "<Shape.SINGLETON: 1>",
                                    "variable_type": "Shape",
                                    "variable_shape": null
                                },
                                "field": {
                                    "variable_value": "<Field(item_ExtendedItem type=ExtendedItem required)>",
                                    "variable_type": "Field",
                                    "variable_shape": "<Shape.SINGLETON: 1>"
                                },
                                "Shape.SINGLETON": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lenient_issubclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": "<class 'tests.test_union_inherited_body.ExtendedItem'>",
                                    "variable_type": "MetaModel",
                                    "variable_shape": null
                                },
                                "BaseModel": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_types": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.schema": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "params.Body": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.sub_fields": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_scalar_field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.shape": {
                                    "variable_value": "<Shape.SINGLETON: 1>",
                                    "variable_type": "Shape",
                                    "variable_shape": null
                                },
                                "field": {
                                    "variable_value": "<Field(item_ExtendedItem type=ExtendedItem required)>",
                                    "variable_type": "Field",
                                    "variable_shape": "<Shape.SINGLETON: 1>"
                                },
                                "Shape.SINGLETON": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lenient_issubclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": "<class 'tests.test_union_inherited_body.ExtendedItem'>",
                                    "variable_type": "MetaModel",
                                    "variable_shape": null
                                },
                                "BaseModel": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_types": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.schema": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "params.Body": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.sub_fields": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_scalar_field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.shape": {
                                    "variable_value": "<Shape.SINGLETON: 1>",
                                    "variable_type": "Shape",
                                    "variable_shape": null
                                },
                                "field": {
                                    "variable_value": "<Field(item type=typing.Union[tests.test_union_inherited_body.ExtendedItem, tests.test_union_inherited_body.Item] required)>",
                                    "variable_type": "Field",
                                    "variable_shape": "<Shape.SINGLETON: 1>"
                                },
                                "Shape.SINGLETON": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lenient_issubclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": "typing.Union[tests.test_union_inherited_body.ExtendedItem, tests.test_union_inherited_body.Item]",
                                    "variable_type": "_GenericAlias",
                                    "variable_shape": null
                                },
                                "BaseModel": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_types": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.schema": {
                                    "variable_value": "Schema(default: Ellipsis, extra: {})",
                                    "variable_type": "Query",
                                    "variable_shape": null
                                },
                                "params.Body": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.sub_fields": {
                                    "variable_value": "[<Field(item_ExtendedItem type=ExtendedItem required)>, <Field(item_Item type=Item required)>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "is_scalar_field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.shape": {
                                    "variable_value": "<Shape.SINGLETON: 1>",
                                    "variable_type": "Shape",
                                    "variable_shape": null
                                },
                                "field": {
                                    "variable_value": "<Field(item type=typing.Union[tests.test_union_inherited_body.ExtendedItem, tests.test_union_inherited_body.Item] required)>",
                                    "variable_type": "Field",
                                    "variable_shape": "<Shape.SINGLETON: 1>"
                                },
                                "Shape.SINGLETON": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lenient_issubclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": "typing.Union[tests.test_union_inherited_body.ExtendedItem, tests.test_union_inherited_body.Item]",
                                    "variable_type": "_GenericAlias",
                                    "variable_shape": null
                                },
                                "BaseModel": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_types": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.schema": {
                                    "variable_value": "Schema(default: Ellipsis, extra: {})",
                                    "variable_type": "Body",
                                    "variable_shape": null
                                },
                                "params.Body": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.sub_fields": {
                                    "variable_value": "[<Field(item_ExtendedItem type=ExtendedItem required)>, <Field(item_Item type=Item required)>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "is_scalar_field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.shape": {
                                    "variable_value": "<Shape.SINGLETON: 1>",
                                    "variable_type": "Shape",
                                    "variable_shape": null
                                },
                                "field": {
                                    "variable_value": "<Field(item type=typing.Union[tests.test_union_inherited_body.ExtendedItem, tests.test_union_inherited_body.Item] required)>",
                                    "variable_type": "Field",
                                    "variable_shape": "<Shape.SINGLETON: 1>"
                                },
                                "Shape.SINGLETON": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lenient_issubclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": "typing.Union[tests.test_union_inherited_body.ExtendedItem, tests.test_union_inherited_body.Item]",
                                    "variable_type": "_GenericAlias",
                                    "variable_shape": null
                                },
                                "BaseModel": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_types": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.schema": {
                                    "variable_value": "Schema(default: Ellipsis, extra: {})",
                                    "variable_type": "Body",
                                    "variable_shape": null
                                },
                                "params.Body": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.sub_fields": {
                                    "variable_value": "[<Field(item_ExtendedItem type=ExtendedItem required)>, <Field(item_Item type=Item required)>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "is_scalar_field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def get_param_sub_dependant(\n    *, param: inspect.Parameter, path: str, security_scopes: List[str] = None\n) -> Dependant:\n    depends: params.Depends = param.default\n    if depends.dependency:\n        dependency = depends.dependency\n    else:\n        dependency = param.annotation\n    return get_sub_dependant(\n        depends=depends,\n        dependency=dependency,\n        path=path,\n        name=param.name,\n        security_scopes=security_scopes,\n    )",
                "def get_parameterless_sub_dependant(*, depends: params.Depends, path: str) -> Dependant:\n    assert callable(\n        depends.dependency\n    ), \"A parameter-less dependency must have a callable dependency\"\n    return get_sub_dependant(depends=depends, dependency=depends.dependency, path=path)",
                "def get_sub_dependant(\n    *,\n    depends: params.Depends,\n    dependency: Callable,\n    path: str,\n    name: str = None,\n    security_scopes: List[str] = None,\n) -> Dependant:\n    security_requirement = None\n    security_scopes = security_scopes or []\n    if isinstance(depends, params.Security):\n        dependency_scopes = depends.scopes\n        security_scopes.extend(dependency_scopes)\n    if isinstance(dependency, SecurityBase):\n        use_scopes: List[str] = []\n        if isinstance(dependency, (OAuth2, OpenIdConnect)):\n            use_scopes = security_scopes\n        security_requirement = SecurityRequirement(\n            security_scheme=dependency, scopes=use_scopes\n        )\n    sub_dependant = get_dependant(\n        path=path,\n        call=dependency,\n        name=name,\n        security_scopes=security_scopes,\n        use_cache=depends.use_cache,\n    )\n    if security_requirement:\n        sub_dependant.security_requirements.append(security_requirement)\n    sub_dependant.security_scopes = security_scopes\n    return sub_dependant",
                "def get_flat_dependant(dependant: Dependant) -> Dependant:\n    flat_dependant = Dependant(\n        path_params=dependant.path_params.copy(),\n        query_params=dependant.query_params.copy(),\n        header_params=dependant.header_params.copy(),\n        cookie_params=dependant.cookie_params.copy(),\n        body_params=dependant.body_params.copy(),\n        security_schemes=dependant.security_requirements.copy(),\n        use_cache=dependant.use_cache,\n        path=dependant.path,\n    )\n    for sub_dependant in dependant.dependencies:\n        flat_sub = get_flat_dependant(sub_dependant)\n        flat_dependant.path_params.extend(flat_sub.path_params)\n        flat_dependant.query_params.extend(flat_sub.query_params)\n        flat_dependant.header_params.extend(flat_sub.header_params)\n        flat_dependant.cookie_params.extend(flat_sub.cookie_params)\n        flat_dependant.body_params.extend(flat_sub.body_params)\n        flat_dependant.security_requirements.extend(flat_sub.security_requirements)\n    return flat_dependant",
                "def is_scalar_field(field: Field) -> bool:\n    return (\n        field.shape == Shape.SINGLETON\n        and not lenient_issubclass(field.type_, BaseModel)\n        and not lenient_issubclass(field.type_, sequence_types + (dict,))\n        and not isinstance(field.schema, params.Body)\n    )",
                "def is_scalar_sequence_field(field: Field) -> bool:\n    if (field.shape in sequence_shapes) and not lenient_issubclass(\n        field.type_, BaseModel\n    ):\n        if field.sub_fields is not None:\n            for sub_field in field.sub_fields:\n                if not is_scalar_field(sub_field):\n                    return False\n        return True\n    if lenient_issubclass(field.type_, sequence_types):\n        return True\n    return False",
                "def get_dependant(\n    *,\n    path: str,\n    call: Callable,\n    name: str = None,\n    security_scopes: List[str] = None,\n    use_cache: bool = True,\n) -> Dependant:\n    path_param_names = get_path_param_names(path)\n    endpoint_signature = inspect.signature(call)\n    signature_params = endpoint_signature.parameters\n    dependant = Dependant(call=call, name=name, path=path, use_cache=use_cache)\n    for param_name, param in signature_params.items():\n        if isinstance(param.default, params.Depends):\n            sub_dependant = get_param_sub_dependant(\n                param=param, path=path, security_scopes=security_scopes\n            )\n            dependant.dependencies.append(sub_dependant)\n    for param_name, param in signature_params.items():\n        if isinstance(param.default, params.Depends):\n            continue\n        if add_non_field_param_to_dependency(param=param, dependant=dependant):\n            continue\n        param_field = get_param_field(param=param, default_schema=params.Query)\n        if param_name in path_param_names:\n            assert param.default == param.empty or isinstance(\n                param.default, params.Path\n            ), \"Path params must have no defaults or use Path(...)\"\n            assert is_scalar_field(\n                field=param_field\n            ), f\"Path params must be of one of the supported types\"\n            param_field = get_param_field(\n                param=param,\n                default_schema=params.Path,\n                force_type=params.ParamTypes.path,\n            )\n            add_param_to_fields(field=param_field, dependant=dependant)\n        elif is_scalar_field(field=param_field):\n            add_param_to_fields(field=param_field, dependant=dependant)\n        elif isinstance(\n            param.default, (params.Query, params.Header)\n        ) and is_scalar_sequence_field(param_field):\n            add_param_to_fields(field=param_field, dependant=dependant)\n        else:\n            assert isinstance(\n                param_field.schema, params.Body\n            ), f\"Param: {param_field.name} can only be a request body, using Body(...)\"\n            dependant.body_params.append(param_field)\n    return dependant",
                "def add_non_field_param_to_dependency(\n    *, param: inspect.Parameter, dependant: Dependant\n) -> Optional[bool]:\n    if lenient_issubclass(param.annotation, Request):\n        dependant.request_param_name = param.name\n        return True\n    elif lenient_issubclass(param.annotation, WebSocket):\n        dependant.websocket_param_name = param.name\n        return True\n    elif lenient_issubclass(param.annotation, Response):\n        dependant.response_param_name = param.name\n        return True\n    elif lenient_issubclass(param.annotation, BackgroundTasks):\n        dependant.background_tasks_param_name = param.name\n        return True\n    elif lenient_issubclass(param.annotation, SecurityScopes):\n        dependant.security_scopes_param_name = param.name\n        return True\n    return None",
                "def get_param_field(\n    *,\n    param: inspect.Parameter,\n    default_schema: Type[params.Param] = params.Param,\n    force_type: params.ParamTypes = None,\n) -> Field:\n    default_value = Required\n    had_schema = False\n    if not param.default == param.empty:\n        default_value = param.default\n    if isinstance(default_value, Schema):\n        had_schema = True\n        schema = default_value\n        default_value = schema.default\n        if isinstance(schema, params.Param) and getattr(schema, \"in_\", None) is None:\n            schema.in_ = default_schema.in_\n        if force_type:\n            schema.in_ = force_type  # type: ignore\n    else:\n        schema = default_schema(default_value)\n    required = default_value == Required\n    annotation: Any = Any\n    if not param.annotation == param.empty:\n        annotation = param.annotation\n    annotation = get_annotation_from_schema(annotation, schema)\n    if not schema.alias and getattr(schema, \"convert_underscores\", None):\n        alias = param.name.replace(\"_\", \"-\")\n    else:\n        alias = schema.alias or param.name\n    field = Field(\n        name=param.name,\n        type_=annotation,\n        default=None if required else default_value,\n        alias=alias,\n        required=required,\n        model_config=BaseConfig,\n        class_validators={},\n        schema=schema,\n    )\n    if not had_schema and not is_scalar_field(field=field):\n        field.schema = params.Body(schema.default)\n    return field",
                "def add_param_to_fields(*, field: Field, dependant: Dependant) -> None:\n    field.schema = cast(params.Param, field.schema)\n    if field.schema.in_ == params.ParamTypes.path:\n        dependant.path_params.append(field)\n    elif field.schema.in_ == params.ParamTypes.query:\n        dependant.query_params.append(field)\n    elif field.schema.in_ == params.ParamTypes.header:\n        dependant.header_params.append(field)\n    else:\n        assert (\n            field.schema.in_ == params.ParamTypes.cookie\n        ), f\"non-body parameters must be in path, query, header or cookie: {field.name}\"\n        dependant.cookie_params.append(field)",
                "def is_coroutine_callable(call: Callable) -> bool:\n    if inspect.isfunction(call):\n        return asyncio.iscoroutinefunction(call)\n    if inspect.isclass(call):\n        return False\n    call = getattr(call, \"__call__\", None)\n    return asyncio.iscoroutinefunction(call)",
                "async def solve_dependencies(\n    *,\n    request: Union[Request, WebSocket],\n    dependant: Dependant,\n    body: Optional[Union[Dict[str, Any], FormData]] = None,\n    background_tasks: BackgroundTasks = None,\n    response: Response = None,\n    dependency_overrides_provider: Any = None,\n    dependency_cache: Dict[Tuple[Callable, Tuple[str]], Any] = None,\n) -> Tuple[\n    Dict[str, Any],\n    List[ErrorWrapper],\n    Optional[BackgroundTasks],\n    Response,\n    Dict[Tuple[Callable, Tuple[str]], Any],\n]:\n    values: Dict[str, Any] = {}\n    errors: List[ErrorWrapper] = []\n    response = response or Response(  # type: ignore\n        content=None, status_code=None, headers=None, media_type=None, background=None\n    )\n    dependency_cache = dependency_cache or {}\n    sub_dependant: Dependant\n    for sub_dependant in dependant.dependencies:\n        sub_dependant.call = cast(Callable, sub_dependant.call)\n        sub_dependant.cache_key = cast(\n            Tuple[Callable, Tuple[str]], sub_dependant.cache_key\n        )\n        call = sub_dependant.call\n        use_sub_dependant = sub_dependant\n        if (\n            dependency_overrides_provider\n            and dependency_overrides_provider.dependency_overrides\n        ):\n            original_call = sub_dependant.call\n            call = getattr(\n                dependency_overrides_provider, \"dependency_overrides\", {}\n            ).get(original_call, original_call)\n            use_path: str = sub_dependant.path  # type: ignore\n            use_sub_dependant = get_dependant(\n                path=use_path,\n                call=call,\n                name=sub_dependant.name,\n                security_scopes=sub_dependant.security_scopes,\n            )\n\n        solved_result = await solve_dependencies(\n            request=request,\n            dependant=use_sub_dependant,\n            body=body,\n            background_tasks=background_tasks,\n            response=response,\n            dependency_overrides_provider=dependency_overrides_provider,\n            dependency_cache=dependency_cache,\n        )\n        sub_values, sub_errors, background_tasks, sub_response, sub_dependency_cache = (\n            solved_result\n        )\n        sub_response = cast(Response, sub_response)\n        response.headers.raw.extend(sub_response.headers.raw)\n        if sub_response.status_code:\n            response.status_code = sub_response.status_code\n        dependency_cache.update(sub_dependency_cache)\n        if sub_errors:\n            errors.extend(sub_errors)\n            continue\n        if sub_dependant.use_cache and sub_dependant.cache_key in dependency_cache:\n            solved = dependency_cache[sub_dependant.cache_key]\n        elif is_coroutine_callable(call):\n            solved = await call(**sub_values)\n        else:\n            solved = await run_in_threadpool(call, **sub_values)\n        if sub_dependant.name is not None:\n            values[sub_dependant.name] = solved\n        if sub_dependant.cache_key not in dependency_cache:\n            dependency_cache[sub_dependant.cache_key] = solved\n    path_values, path_errors = request_params_to_args(\n        dependant.path_params, request.path_params\n    )\n    query_values, query_errors = request_params_to_args(\n        dependant.query_params, request.query_params\n    )\n    header_values, header_errors = request_params_to_args(\n        dependant.header_params, request.headers\n    )\n    cookie_values, cookie_errors = request_params_to_args(\n        dependant.cookie_params, request.cookies\n    )\n    values.update(path_values)\n    values.update(query_values)\n    values.update(header_values)\n    values.update(cookie_values)\n    errors += path_errors + query_errors + header_errors + cookie_errors\n    if dependant.body_params:\n        body_values, body_errors = await request_body_to_args(  # type: ignore # body_params checked above\n            required_params=dependant.body_params, received_body=body\n        )\n        values.update(body_values)\n        errors.extend(body_errors)\n    if dependant.request_param_name and isinstance(request, Request):\n        values[dependant.request_param_name] = request\n    elif dependant.websocket_param_name and isinstance(request, WebSocket):\n        values[dependant.websocket_param_name] = request\n    if dependant.background_tasks_param_name:\n        if background_tasks is None:\n            background_tasks = BackgroundTasks()\n        values[dependant.background_tasks_param_name] = background_tasks\n    if dependant.response_param_name:\n        values[dependant.response_param_name] = response\n    if dependant.security_scopes_param_name:\n        values[dependant.security_scopes_param_name] = SecurityScopes(\n            scopes=dependant.security_scopes\n        )\n    return values, errors, background_tasks, response, dependency_cache",
                "def request_params_to_args(\n    required_params: Sequence[Field],\n    received_params: Union[Mapping[str, Any], QueryParams, Headers],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    for field in required_params:\n        if is_scalar_sequence_field(field) and isinstance(\n            received_params, (QueryParams, Headers)\n        ):\n            value = received_params.getlist(field.alias) or field.default\n        else:\n            value = received_params.get(field.alias)\n        schema = field.schema\n        assert isinstance(schema, params.Param), \"Params must be subclasses of Param\"\n        if value is None:\n            if field.required:\n                errors.append(\n                    ErrorWrapper(\n                        MissingError(),\n                        loc=(schema.in_.value, field.alias),\n                        config=BaseConfig,\n                    )\n                )\n            else:\n                values[field.name] = deepcopy(field.default)\n            continue\n        v_, errors_ = field.validate(value, values, loc=(schema.in_.value, field.alias))\n        if isinstance(errors_, ErrorWrapper):\n            errors.append(errors_)\n        elif isinstance(errors_, list):\n            errors.extend(errors_)\n        else:\n            values[field.name] = v_\n    return values, errors",
                "async def request_body_to_args(\n    required_params: List[Field],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    if required_params:\n        field = required_params[0]\n        embed = getattr(field.schema, \"embed\", None)\n        if len(required_params) == 1 and not embed:\n            received_body = {field.alias: received_body}\n        for field in required_params:\n            value: Any = None\n            if received_body is not None:\n                if field.shape in sequence_shapes and isinstance(\n                    received_body, FormData\n                ):\n                    value = received_body.getlist(field.alias)\n                else:\n                    value = received_body.get(field.alias)\n            if (\n                value is None\n                or (isinstance(field.schema, params.Form) and value == \"\")\n                or (\n                    isinstance(field.schema, params.Form)\n                    and field.shape in sequence_shapes\n                    and len(value) == 0\n                )\n            ):\n                if field.required:\n                    errors.append(\n                        ErrorWrapper(\n                            MissingError(), loc=(\"body\", field.alias), config=BaseConfig\n                        )\n                    )\n                else:\n                    values[field.name] = deepcopy(field.default)\n                continue\n            if (\n                isinstance(field.schema, params.File)\n                and lenient_issubclass(field.type_, bytes)\n                and isinstance(value, UploadFile)\n            ):\n                value = await value.read()\n            elif (\n                field.shape in sequence_shapes\n                and isinstance(field.schema, params.File)\n                and lenient_issubclass(field.type_, bytes)\n                and isinstance(value, sequence_types)\n            ):\n                awaitables = [sub_value.read() for sub_value in value]\n                contents = await asyncio.gather(*awaitables)\n                value = sequence_shape_to_type[field.shape](contents)\n            v_, errors_ = field.validate(value, values, loc=(\"body\", field.alias))\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            else:\n                values[field.name] = v_\n    return values, errors",
                "def get_schema_compatible_field(*, field: Field) -> Field:\n    out_field = field\n    if lenient_issubclass(field.type_, UploadFile):\n        use_type: type = bytes\n        if field.shape in sequence_shapes:\n            use_type = List[bytes]\n        out_field = Field(\n            name=field.name,\n            type_=use_type,\n            class_validators=field.class_validators,\n            model_config=field.model_config,\n            default=field.default,\n            required=field.required,\n            alias=field.alias,\n            schema=field.schema,\n        )\n    return out_field",
                "def get_body_field(*, dependant: Dependant, name: str) -> Optional[Field]:\n    flat_dependant = get_flat_dependant(dependant)\n    if not flat_dependant.body_params:\n        return None\n    first_param = flat_dependant.body_params[0]\n    embed = getattr(first_param.schema, \"embed\", None)\n    if len(flat_dependant.body_params) == 1 and not embed:\n        return get_schema_compatible_field(field=first_param)\n    model_name = \"Body_\" + name\n    BodyModel = create_model(model_name)\n    for f in flat_dependant.body_params:\n        BodyModel.__fields__[f.name] = get_schema_compatible_field(field=f)\n    required = any(True for f in flat_dependant.body_params if f.required)\n    if any(isinstance(f.schema, params.File) for f in flat_dependant.body_params):\n        BodySchema: Type[params.Body] = params.File\n    elif any(isinstance(f.schema, params.Form) for f in flat_dependant.body_params):\n        BodySchema = params.Form\n    else:\n        BodySchema = params.Body\n\n    field = Field(\n        name=\"body\",\n        type_=BodyModel,\n        default=None,\n        required=required,\n        model_config=BaseConfig,\n        class_validators={},\n        alias=\"body\",\n        schema=BodySchema(None),\n    )\n    return field"
            ],
            "inscope_function_signatures": [
                "get_param_sub_dependant() -> Dependant",
                "get_parameterless_sub_dependant() -> Dependant",
                "get_sub_dependant() -> Dependant",
                "get_flat_dependant(dependant: Dependant) -> Dependant",
                "is_scalar_field(field: Field) -> bool",
                "is_scalar_sequence_field(field: Field) -> bool",
                "get_dependant() -> Dependant",
                "add_non_field_param_to_dependency() -> Optional[bool]",
                "get_param_field() -> Field",
                "add_param_to_fields() -> None",
                "is_coroutine_callable(call: Callable) -> bool",
                "solve_dependencies() -> Tuple[Dict[str, Any], List[ErrorWrapper], Optional[BackgroundTasks], Response, Dict[Tuple[Callable, Tuple[str]], Any]]",
                "request_params_to_args(required_params: Sequence[Field], received_params: Union[Mapping[str, Any], QueryParams, Headers]) -> Tuple[Dict[str, Any], List[ErrorWrapper]]",
                "request_body_to_args(required_params: List[Field], received_body: Optional[Union[Dict[str, Any], FormData]]) -> Tuple[Dict[str, Any], List[ErrorWrapper]]",
                "get_schema_compatible_field() -> Field",
                "get_body_field() -> Optional[Field]"
            ],
            "variables_in_file": {
                "sequence_shapes": [
                    516,
                    37,
                    494,
                    463,
                    143,
                    474
                ],
                "Shape.LIST": [
                    46,
                    38
                ],
                "Shape": [
                    38,
                    39,
                    40,
                    41,
                    42,
                    135,
                    46,
                    47,
                    48,
                    49,
                    50
                ],
                "Shape.SET": [
                    47,
                    39
                ],
                "Shape.TUPLE": [
                    40,
                    48
                ],
                "Shape.SEQUENCE": [
                    41,
                    49
                ],
                "Shape.TUPLE_ELLIPS": [
                    42,
                    50
                ],
                "sequence_types": [
                    137,
                    44,
                    497,
                    151
                ],
                "list": [
                    44,
                    46,
                    49,
                    50,
                    505,
                    442
                ],
                "set": [
                    44,
                    47
                ],
                "tuple": [
                    48,
                    44
                ],
                "sequence_shape_to_type": [
                    501,
                    45
                ],
                "inspect.Parameter": [
                    208,
                    230,
                    55
                ],
                "inspect": [
                    288,
                    290,
                    165,
                    230,
                    208,
                    55
                ],
                "str": [
                    531,
                    414,
                    158,
                    160,
                    161,
                    415,
                    300,
                    304,
                    306,
                    310,
                    55,
                    312,
                    322,
                    451,
                    452,
                    71,
                    334,
                    82,
                    83,
                    84,
                    92
                ],
                "List": [
                    161,
                    450,
                    452,
                    517,
                    307,
                    84,
                    55,
                    313,
                    92,
                    415
                ],
                "depends": [
                    89,
                    103,
                    73,
                    75,
                    88,
                    57,
                    58,
                    59,
                    63
                ],
                "params.Depends": [
                    71,
                    169,
                    175,
                    80,
                    57
                ],
                "params": [
                    138,
                    268,
                    273,
                    274,
                    276,
                    278,
                    282,
                    544,
                    545,
                    546,
                    547,
                    549,
                    169,
                    426,
                    175,
                    179,
                    182,
                    57,
                    189,
                    190,
                    196,
                    71,
                    201,
                    80,
                    471,
                    88,
                    473,
                    231,
                    232,
                    488,
                    495,
                    242
                ],
                "param.default": [
                    196,
                    169,
                    236,
                    237,
                    175,
                    181,
                    182,
                    57
                ],
                "param": [
                    256,
                    258,
                    168,
                    169,
                    171,
                    174,
                    175,
                    177,
                    179,
                    181,
                    182,
                    57,
                    188,
                    61,
                    66,
                    196,
                    210,
                    211,
                    213,
                    214,
                    216,
                    217,
                    219,
                    220,
                    222,
                    223,
                    236,
                    237,
                    250,
                    251,
                    254
                ],
                "depends.dependency": [
                    75,
                    73,
                    58,
                    59
                ],
                "dependency": [
                    64,
                    96,
                    100,
                    59,
                    61,
                    91,
                    93
                ],
                "param.annotation": [
                    251,
                    210,
                    213,
                    216,
                    250,
                    219,
                    61,
                    222
                ],
                "get_sub_dependant": [
                    75,
                    62
                ],
                "path": [
                    65,
                    99,
                    164,
                    167,
                    75,
                    171
                ],
                "param.name": [
                    256,
                    66,
                    258,
                    211,
                    214,
                    217,
                    220,
                    254,
                    223
                ],
                "security_scopes": [
                    67,
                    102,
                    107,
                    171,
                    87,
                    90,
                    94
                ],
                "Dependant": [
                    163,
                    71,
                    167,
                    299,
                    111,
                    112,
                    208,
                    272,
                    531,
                    85,
                    56,
                    318
                ],
                "callable": [
                    72
                ],
                "Callable": [
                    320,
                    159,
                    322,
                    304,
                    81,
                    310,
                    287
                ],
                "security_requirement": [
                    105,
                    106,
                    86,
                    95
                ],
                "isinstance": [
                    138,
                    395,
                    397,
                    544,
                    546,
                    419,
                    169,
                    426,
                    175,
                    181,
                    440,
                    442,
                    195,
                    200,
                    463,
                    471,
                    88,
                    473,
                    91,
                    93,
                    488,
                    490,
                    238,
                    495,
                    497,
                    242,
                    503,
                    505
                ],
                "params.Security": [
                    88
                ],
                "dependency_scopes": [
                    89,
                    90
                ],
                "depends.scopes": [
                    89
                ],
                "security_scopes.extend": [
                    90
                ],
                "SecurityBase": [
                    91
                ],
                "use_scopes": [
                    96,
                    92,
                    94
                ],
                "OAuth2": [
                    93
                ],
                "OpenIdConnect": [
                    93
                ],
                "SecurityRequirement": [
                    95
                ],
                "sub_dependant": [
                    170,
                    173,
                    318,
                    319,
                    320,
                    321,
                    322,
                    324,
                    325,
                    330,
                    334,
                    338,
                    339,
                    98,
                    106,
                    107,
                    108,
                    362,
                    363,
                    368,
                    369,
                    370,
                    371,
                    122,
                    123
                ],
                "get_dependant": [
                    98,
                    335
                ],
                "name": [
                    539,
                    101,
                    167
                ],
                "depends.use_cache": [
                    103
                ],
                "sub_dependant.security_requirements.append": [
                    106
                ],
                "sub_dependant.security_requirements": [
                    106
                ],
                "sub_dependant.security_scopes": [
                    339,
                    107
                ],
                "flat_dependant": [
                    128,
                    129,
                    130,
                    541,
                    544,
                    546,
                    543,
                    112,
                    532,
                    533,
                    535,
                    537,
                    124,
                    125,
                    126,
                    127
                ],
                "dependant.path_params.copy": [
                    113
                ],
                "dependant.path_params": [
                    113,
                    275,
                    373
                ],
                "dependant": [
                    389,
                    391,
                    395,
                    396,
                    397,
                    398,
                    399,
                    402,
                    275,
                    403,
                    277,
                    404,
                    279,
                    405,
                    406,
                    407,
                    532,
                    284,
                    167,
                    173,
                    177,
                    319,
                    192,
                    194,
                    198,
                    203,
                    204,
                    211,
                    214,
                    217,
                    220,
                    223,
                    376,
                    113,
                    114,
                    115,
                    116,
                    117,
                    118,
                    119,
                    120,
                    373,
                    122,
                    379,
                    382
                ],
                "dependant.query_params.copy": [
                    114
                ],
                "dependant.query_params": [
                    376,
                    114,
                    277
                ],
                "dependant.header_params.copy": [
                    115
                ],
                "dependant.header_params": [
                    379,
                    115,
                    279
                ],
                "dependant.cookie_params.copy": [
                    116
                ],
                "dependant.cookie_params": [
                    116,
                    284,
                    382
                ],
                "dependant.body_params.copy": [
                    117
                ],
                "dependant.body_params": [
                    203,
                    117,
                    389,
                    391
                ],
                "dependant.security_requirements.copy": [
                    118
                ],
                "dependant.security_requirements": [
                    118
                ],
                "dependant.use_cache": [
                    119
                ],
                "dependant.path": [
                    120
                ],
                "dependant.dependencies": [
                    122,
                    173,
                    319
                ],
                "flat_sub": [
                    128,
                    129,
                    123,
                    124,
                    125,
                    126,
                    127
                ],
                "get_flat_dependant": [
                    123,
                    532
                ],
                "flat_dependant.path_params.extend": [
                    124
                ],
                "flat_dependant.path_params": [
                    124
                ],
                "flat_sub.path_params": [
                    124
                ],
                "flat_dependant.query_params.extend": [
                    125
                ],
                "flat_dependant.query_params": [
                    125
                ],
                "flat_sub.query_params": [
                    125
                ],
                "flat_dependant.header_params.extend": [
                    126
                ],
                "flat_dependant.header_params": [
                    126
                ],
                "flat_sub.header_params": [
                    126
                ],
                "flat_dependant.cookie_params.extend": [
                    127
                ],
                "flat_dependant.cookie_params": [
                    127
                ],
                "flat_sub.cookie_params": [
                    127
                ],
                "flat_dependant.body_params.extend": [
                    128
                ],
                "flat_dependant.body_params": [
                    128,
                    544,
                    546,
                    533,
                    535,
                    537,
                    541,
                    543
                ],
                "flat_sub.body_params": [
                    128
                ],
                "flat_dependant.security_requirements.extend": [
                    129
                ],
                "flat_dependant.security_requirements": [
                    129
                ],
                "flat_sub.security_requirements": [
                    129
                ],
                "Field": [
                    512,
                    257,
                    450,
                    133,
                    518,
                    551,
                    233,
                    142,
                    272,
                    531,
                    413
                ],
                "field.shape": [
                    516,
                    135,
                    494,
                    143,
                    463,
                    501,
                    474
                ],
                "field": [
                    257,
                    513,
                    514,
                    516,
                    135,
                    136,
                    137,
                    138,
                    267,
                    268,
                    269,
                    519,
                    143,
                    144,
                    273,
                    146,
                    147,
                    274,
                    275,
                    276,
                    151,
                    277,
                    278,
                    279,
                    282,
                    283,
                    284,
                    418,
                    419,
                    422,
                    551,
                    424,
                    425,
                    428,
                    432,
                    561,
                    437,
                    439,
                    445,
                    521,
                    522,
                    456,
                    457,
                    523,
                    459,
                    460,
                    524,
                    463,
                    466,
                    525,
                    468,
                    471,
                    526,
                    473,
                    474,
                    478,
                    481,
                    485,
                    488,
                    489,
                    494,
                    495,
                    496,
                    501,
                    502,
                    508
                ],
                "Shape.SINGLETON": [
                    135
                ],
                "lenient_issubclass": [
                    514,
                    136,
                    137,
                    489,
                    143,
                    496,
                    210,
                    213,
                    151,
                    216,
                    219,
                    222
                ],
                "field.type_": [
                    514,
                    136,
                    137,
                    489,
                    144,
                    496,
                    151
                ],
                "BaseModel": [
                    136,
                    144
                ],
                "dict": [
                    137
                ],
                "field.schema": [
                    488,
                    425,
                    138,
                    457,
                    268,
                    526,
                    495,
                    273,
                    274,
                    276,
                    278,
                    471,
                    473,
                    282
                ],
                "params.Body": [
                    545,
                    549,
                    201,
                    138,
                    268
                ],
                "bool": [
                    162,
                    133,
                    142,
                    209,
                    287
                ],
                "field.sub_fields": [
                    146,
                    147
                ],
                "sub_field": [
                    147,
                    148
                ],
                "is_scalar_field": [
                    184,
                    193,
                    267,
                    148
                ],
                "path_param_names": [
                    180,
                    164
                ],
                "get_path_param_names": [
                    164
                ],
                "endpoint_signature": [
                    165,
                    166
                ],
                "inspect.signature": [
                    165
                ],
                "call": [
                    288,
                    289,
                    290,
                    292,
                    165,
                    293,
                    167,
                    324,
                    331,
                    364,
                    365,
                    367,
                    337
                ],
                "signature_params": [
                    168,
                    174,
                    166
                ],
                "endpoint_signature.parameters": [
                    166
                ],
                "use_cache": [
                    167
                ],
                "param_name": [
                    168,
                    180,
                    174
                ],
                "signature_params.items": [
                    168,
                    174
                ],
                "get_param_sub_dependant": [
                    170
                ],
                "dependant.dependencies.append": [
                    173
                ],
                "add_non_field_param_to_dependency": [
                    177
                ],
                "param_field": [
                    192,
                    193,
                    194,
                    197,
                    198,
                    201,
                    202,
                    203,
                    179,
                    185,
                    187
                ],
                "get_param_field": [
                    179,
                    187
                ],
                "params.Query": [
                    179,
                    196
                ],
                "param.empty": [
                    250,
                    236,
                    181
                ],
                "params.Path": [
                    189,
                    182
                ],
                "params.ParamTypes.path": [
                    274,
                    190
                ],
                "params.ParamTypes": [
                    232,
                    274,
                    276,
                    278,
                    282,
                    190
                ],
                "add_param_to_fields": [
                    192,
                    194,
                    198
                ],
                "params.Header": [
                    196
                ],
                "is_scalar_sequence_field": [
                    419,
                    197
                ],
                "param_field.schema": [
                    201
                ],
                "param_field.name": [
                    202
                ],
                "dependant.body_params.append": [
                    203
                ],
                "Request": [
                    210,
                    395,
                    298
                ],
                "dependant.request_param_name": [
                    396,
                    211,
                    395
                ],
                "WebSocket": [
                    298,
                    213,
                    397
                ],
                "dependant.websocket_param_name": [
                    398,
                    397,
                    214
                ],
                "Response": [
                    354,
                    302,
                    309,
                    216,
                    314
                ],
                "dependant.response_param_name": [
                    217,
                    403,
                    404
                ],
                "BackgroundTasks": [
                    401,
                    219,
                    308,
                    301
                ],
                "dependant.background_tasks_param_name": [
                    402,
                    220,
                    399
                ],
                "SecurityScopes": [
                    406,
                    222
                ],
                "dependant.security_scopes_param_name": [
                    405,
                    406,
                    223
                ],
                "Optional": [
                    451,
                    300,
                    209,
                    531,
                    308
                ],
                "Type": [
                    545,
                    231
                ],
                "params.Param": [
                    426,
                    273,
                    242,
                    231
                ],
                "default_value": [
                    260,
                    234,
                    237,
                    238,
                    240,
                    241,
                    247,
                    248
                ],
                "Required": [
                    248,
                    234
                ],
                "had_schema": [
                    267,
                    235,
                    239
                ],
                "Schema": [
                    238
                ],
                "schema": [
                    256,
                    439,
                    265,
                    425,
                    426,
                    268,
                    240,
                    241,
                    242,
                    243,
                    432,
                    245,
                    247,
                    252,
                    253
                ],
                "schema.default": [
                    241,
                    268
                ],
                "getattr": [
                    292,
                    457,
                    331,
                    242,
                    536,
                    253
                ],
                "schema.in_": [
                    432,
                    243,
                    245,
                    439
                ],
                "default_schema.in_": [
                    243
                ],
                "default_schema": [
                    243,
                    247
                ],
                "force_type": [
                    244,
                    245
                ],
                "required": [
                    260,
                    262,
                    555,
                    248,
                    543
                ],
                "annotation": [
                    259,
                    249,
                    251,
                    252
                ],
                "Any": [
                    451,
                    452,
                    300,
                    461,
                    303,
                    304,
                    306,
                    310,
                    312,
                    249,
                    414,
                    415
                ],
                "get_annotation_from_schema": [
                    252
                ],
                "schema.alias": [
                    256,
                    253
                ],
                "alias": [
                    256,
                    261,
                    254
                ],
                "param.name.replace": [
                    254
                ],
                "BaseConfig": [
                    433,
                    556,
                    481,
                    263
                ],
                "cast": [
                    320,
                    273,
                    354,
                    321
                ],
                "field.schema.in_": [
                    274,
                    282,
                    276,
                    278
                ],
                "dependant.path_params.append": [
                    275
                ],
                "params.ParamTypes.query": [
                    276
                ],
                "dependant.query_params.append": [
                    277
                ],
                "params.ParamTypes.header": [
                    278
                ],
                "dependant.header_params.append": [
                    279
                ],
                "params.ParamTypes.cookie": [
                    282
                ],
                "field.name": [
                    485,
                    519,
                    437,
                    283,
                    508,
                    445
                ],
                "dependant.cookie_params.append": [
                    284
                ],
                "inspect.isfunction": [
                    288
                ],
                "asyncio.iscoroutinefunction": [
                    289,
                    293
                ],
                "asyncio": [
                    289,
                    500,
                    293
                ],
                "inspect.isclass": [
                    290
                ],
                "Union": [
                    298,
                    451,
                    300,
                    414
                ],
                "Dict": [
                    451,
                    452,
                    300,
                    304,
                    306,
                    310,
                    312,
                    415
                ],
                "FormData": [
                    464,
                    451,
                    300
                ],
                "Tuple": [
                    322,
                    452,
                    304,
                    305,
                    310,
                    415
                ],
                "values": [
                    384,
                    385,
                    386,
                    387,
                    393,
                    396,
                    398,
                    402,
                    404,
                    406,
                    409,
                    416,
                    437,
                    439,
                    312,
                    445,
                    446,
                    453,
                    485,
                    369,
                    502,
                    508,
                    509
                ],
                "errors": [
                    417,
                    388,
                    454,
                    360,
                    394,
                    409,
                    441,
                    429,
                    504,
                    313,
                    506,
                    443,
                    509,
                    446,
                    479
                ],
                "ErrorWrapper": [
                    480,
                    452,
                    430,
                    307,
                    503,
                    440,
                    313,
                    415
                ],
                "response": [
                    355,
                    357,
                    404,
                    409,
                    314,
                    347
                ],
                "dependency_cache": [
                    358,
                    362,
                    363,
                    370,
                    371,
                    409,
                    317,
                    349
                ],
                "sub_dependant.call": [
                    320,
                    330,
                    324
                ],
                "sub_dependant.cache_key": [
                    321,
                    322,
                    362,
                    363,
                    370,
                    371
                ],
                "use_sub_dependant": [
                    344,
                    325,
                    335
                ],
                "dependency_overrides_provider": [
                    328,
                    332,
                    348,
                    327
                ],
                "dependency_overrides_provider.dependency_overrides": [
                    328
                ],
                "original_call": [
                    330,
                    333
                ],
                "get": [
                    331
                ],
                "use_path": [
                    336,
                    334
                ],
                "sub_dependant.path": [
                    334
                ],
                "sub_dependant.name": [
                    368,
                    369,
                    338
                ],
                "solved_result": [
                    352,
                    342
                ],
                "solve_dependencies": [
                    342
                ],
                "request": [
                    395,
                    396,
                    397,
                    398,
                    373,
                    343,
                    376,
                    379,
                    382
                ],
                "body": [
                    345,
                    391
                ],
                "background_tasks": [
                    400,
                    401,
                    402,
                    409,
                    346,
                    351
                ],
                "sub_values": [
                    367,
                    365,
                    351
                ],
                "sub_errors": [
                    360,
                    359,
                    351
                ],
                "sub_response": [
                    354,
                    355,
                    356,
                    357,
                    351
                ],
                "sub_dependency_cache": [
                    358,
                    351
                ],
                "response.headers.raw.extend": [
                    355
                ],
                "response.headers.raw": [
                    355
                ],
                "response.headers": [
                    355
                ],
                "sub_response.headers.raw": [
                    355
                ],
                "sub_response.headers": [
                    355
                ],
                "sub_response.status_code": [
                    356,
                    357
                ],
                "response.status_code": [
                    357
                ],
                "dependency_cache.update": [
                    358
                ],
                "errors.extend": [
                    360,
                    506,
                    394,
                    443
                ],
                "sub_dependant.use_cache": [
                    362
                ],
                "solved": [
                    363,
                    365,
                    367,
                    369,
                    371
                ],
                "is_coroutine_callable": [
                    364
                ],
                "run_in_threadpool": [
                    367
                ],
                "path_values": [
                    384,
                    372
                ],
                "path_errors": [
                    388,
                    372
                ],
                "request_params_to_args": [
                    378,
                    372,
                    381,
                    375
                ],
                "request.path_params": [
                    373
                ],
                "query_values": [
                    385,
                    375
                ],
                "query_errors": [
                    388,
                    375
                ],
                "request.query_params": [
                    376
                ],
                "header_values": [
                    378,
                    386
                ],
                "header_errors": [
                    378,
                    388
                ],
                "request.headers": [
                    379
                ],
                "cookie_values": [
                    387,
                    381
                ],
                "cookie_errors": [
                    388,
                    381
                ],
                "request.cookies": [
                    382
                ],
                "values.update": [
                    384,
                    385,
                    386,
                    387,
                    393
                ],
                "body_values": [
                    393,
                    390
                ],
                "body_errors": [
                    394,
                    390
                ],
                "request_body_to_args": [
                    390
                ],
                "dependant.security_scopes": [
                    407
                ],
                "Sequence": [
                    413
                ],
                "Mapping": [
                    414
                ],
                "QueryParams": [
                    420,
                    414
                ],
                "Headers": [
                    420,
                    414
                ],
                "required_params": [
                    418,
                    455,
                    456,
                    458,
                    460
                ],
                "received_params": [
                    424,
                    420,
                    422
                ],
                "value": [
                    471,
                    422,
                    424,
                    490,
                    427,
                    492,
                    461,
                    497,
                    466,
                    499,
                    468,
                    501,
                    470,
                    439,
                    502,
                    475
                ],
                "received_params.getlist": [
                    422
                ],
                "field.alias": [
                    481,
                    422,
                    424,
                    459,
                    525,
                    432,
                    466,
                    468,
                    502,
                    439
                ],
                "field.default": [
                    485,
                    523,
                    437,
                    422
                ],
                "received_params.get": [
                    424
                ],
                "field.required": [
                    428,
                    524,
                    478
                ],
                "errors.append": [
                    504,
                    441,
                    429,
                    479
                ],
                "MissingError": [
                    481,
                    431
                ],
                "schema.in_.value": [
                    432,
                    439
                ],
                "deepcopy": [
                    485,
                    437
                ],
                "v_": [
                    508,
                    445,
                    502,
                    439
                ],
                "errors_": [
                    503,
                    504,
                    505,
                    506,
                    502,
                    439,
                    440,
                    441,
                    442,
                    443
                ],
                "field.validate": [
                    502,
                    439
                ],
                "embed": [
                    536,
                    457,
                    458,
                    537
                ],
                "len": [
                    537,
                    458,
                    475
                ],
                "received_body": [
                    459,
                    462,
                    464,
                    466,
                    468
                ],
                "received_body.getlist": [
                    466
                ],
                "received_body.get": [
                    468
                ],
                "params.Form": [
                    473,
                    546,
                    547,
                    471
                ],
                "params.File": [
                    488,
                    545,
                    544,
                    495
                ],
                "bytes": [
                    496,
                    489,
                    515,
                    517
                ],
                "UploadFile": [
                    490,
                    514
                ],
                "value.read": [
                    492
                ],
                "awaitables": [
                    499,
                    500
                ],
                "sub_value.read": [
                    499
                ],
                "sub_value": [
                    499
                ],
                "contents": [
                    500,
                    501
                ],
                "asyncio.gather": [
                    500
                ],
                "out_field": [
                    528,
                    513,
                    518
                ],
                "use_type": [
                    520,
                    515,
                    517
                ],
                "type": [
                    515
                ],
                "field.class_validators": [
                    521
                ],
                "field.model_config": [
                    522
                ],
                "first_param": [
                    536,
                    538,
                    535
                ],
                "first_param.schema": [
                    536
                ],
                "get_schema_compatible_field": [
                    538,
                    542
                ],
                "model_name": [
                    539,
                    540
                ],
                "BodyModel": [
                    553,
                    540,
                    542
                ],
                "create_model": [
                    540
                ],
                "f": [
                    544,
                    546,
                    541,
                    542,
                    543
                ],
                "BodyModel.__fields__": [
                    542
                ],
                "f.name": [
                    542
                ],
                "any": [
                    544,
                    546,
                    543
                ],
                "f.required": [
                    543
                ],
                "f.schema": [
                    544,
                    546
                ],
                "BodySchema": [
                    545,
                    547,
                    549,
                    559
                ]
            },
            "filtered_variables_in_file": {
                "sequence_shapes": [
                    516,
                    37,
                    494,
                    463,
                    143,
                    474
                ],
                "Shape.LIST": [
                    46,
                    38
                ],
                "Shape": [
                    38,
                    39,
                    40,
                    41,
                    42,
                    135,
                    46,
                    47,
                    48,
                    49,
                    50
                ],
                "Shape.SET": [
                    47,
                    39
                ],
                "Shape.TUPLE": [
                    40,
                    48
                ],
                "Shape.SEQUENCE": [
                    41,
                    49
                ],
                "Shape.TUPLE_ELLIPS": [
                    42,
                    50
                ],
                "sequence_types": [
                    137,
                    44,
                    497,
                    151
                ],
                "sequence_shape_to_type": [
                    501,
                    45
                ],
                "inspect.Parameter": [
                    208,
                    230,
                    55
                ],
                "inspect": [
                    288,
                    290,
                    165,
                    230,
                    208,
                    55
                ],
                "List": [
                    161,
                    450,
                    452,
                    517,
                    307,
                    84,
                    55,
                    313,
                    92,
                    415
                ],
                "depends": [
                    89,
                    103,
                    73,
                    75,
                    88,
                    57,
                    58,
                    59,
                    63
                ],
                "params.Depends": [
                    71,
                    169,
                    175,
                    80,
                    57
                ],
                "params": [
                    138,
                    268,
                    273,
                    274,
                    276,
                    278,
                    282,
                    544,
                    545,
                    546,
                    547,
                    549,
                    169,
                    426,
                    175,
                    179,
                    182,
                    57,
                    189,
                    190,
                    196,
                    71,
                    201,
                    80,
                    471,
                    88,
                    473,
                    231,
                    232,
                    488,
                    495,
                    242
                ],
                "param.default": [
                    196,
                    169,
                    236,
                    237,
                    175,
                    181,
                    182,
                    57
                ],
                "param": [
                    256,
                    258,
                    168,
                    169,
                    171,
                    174,
                    175,
                    177,
                    179,
                    181,
                    182,
                    57,
                    188,
                    61,
                    66,
                    196,
                    210,
                    211,
                    213,
                    214,
                    216,
                    217,
                    219,
                    220,
                    222,
                    223,
                    236,
                    237,
                    250,
                    251,
                    254
                ],
                "depends.dependency": [
                    75,
                    73,
                    58,
                    59
                ],
                "dependency": [
                    64,
                    96,
                    100,
                    59,
                    61,
                    91,
                    93
                ],
                "param.annotation": [
                    251,
                    210,
                    213,
                    216,
                    250,
                    219,
                    61,
                    222
                ],
                "get_sub_dependant": [
                    75,
                    62
                ],
                "path": [
                    65,
                    99,
                    164,
                    167,
                    75,
                    171
                ],
                "param.name": [
                    256,
                    66,
                    258,
                    211,
                    214,
                    217,
                    220,
                    254,
                    223
                ],
                "security_scopes": [
                    67,
                    102,
                    107,
                    171,
                    87,
                    90,
                    94
                ],
                "Dependant": [
                    163,
                    71,
                    167,
                    299,
                    111,
                    112,
                    208,
                    272,
                    531,
                    85,
                    56,
                    318
                ],
                "Callable": [
                    320,
                    159,
                    322,
                    304,
                    81,
                    310,
                    287
                ],
                "security_requirement": [
                    105,
                    106,
                    86,
                    95
                ],
                "params.Security": [
                    88
                ],
                "dependency_scopes": [
                    89,
                    90
                ],
                "depends.scopes": [
                    89
                ],
                "security_scopes.extend": [
                    90
                ],
                "SecurityBase": [
                    91
                ],
                "use_scopes": [
                    96,
                    92,
                    94
                ],
                "OAuth2": [
                    93
                ],
                "OpenIdConnect": [
                    93
                ],
                "SecurityRequirement": [
                    95
                ],
                "sub_dependant": [
                    170,
                    173,
                    318,
                    319,
                    320,
                    321,
                    322,
                    324,
                    325,
                    330,
                    334,
                    338,
                    339,
                    98,
                    106,
                    107,
                    108,
                    362,
                    363,
                    368,
                    369,
                    370,
                    371,
                    122,
                    123
                ],
                "get_dependant": [
                    98,
                    335
                ],
                "name": [
                    539,
                    101,
                    167
                ],
                "depends.use_cache": [
                    103
                ],
                "sub_dependant.security_requirements.append": [
                    106
                ],
                "sub_dependant.security_requirements": [
                    106
                ],
                "sub_dependant.security_scopes": [
                    339,
                    107
                ],
                "flat_dependant": [
                    128,
                    129,
                    130,
                    541,
                    544,
                    546,
                    543,
                    112,
                    532,
                    533,
                    535,
                    537,
                    124,
                    125,
                    126,
                    127
                ],
                "dependant.path_params.copy": [
                    113
                ],
                "dependant.path_params": [
                    113,
                    275,
                    373
                ],
                "dependant": [
                    389,
                    391,
                    395,
                    396,
                    397,
                    398,
                    399,
                    402,
                    275,
                    403,
                    277,
                    404,
                    279,
                    405,
                    406,
                    407,
                    532,
                    284,
                    167,
                    173,
                    177,
                    319,
                    192,
                    194,
                    198,
                    203,
                    204,
                    211,
                    214,
                    217,
                    220,
                    223,
                    376,
                    113,
                    114,
                    115,
                    116,
                    117,
                    118,
                    119,
                    120,
                    373,
                    122,
                    379,
                    382
                ],
                "dependant.query_params.copy": [
                    114
                ],
                "dependant.query_params": [
                    376,
                    114,
                    277
                ],
                "dependant.header_params.copy": [
                    115
                ],
                "dependant.header_params": [
                    379,
                    115,
                    279
                ],
                "dependant.cookie_params.copy": [
                    116
                ],
                "dependant.cookie_params": [
                    116,
                    284,
                    382
                ],
                "dependant.body_params.copy": [
                    117
                ],
                "dependant.body_params": [
                    203,
                    117,
                    389,
                    391
                ],
                "dependant.security_requirements.copy": [
                    118
                ],
                "dependant.security_requirements": [
                    118
                ],
                "dependant.use_cache": [
                    119
                ],
                "dependant.path": [
                    120
                ],
                "dependant.dependencies": [
                    122,
                    173,
                    319
                ],
                "flat_sub": [
                    128,
                    129,
                    123,
                    124,
                    125,
                    126,
                    127
                ],
                "get_flat_dependant": [
                    123,
                    532
                ],
                "flat_dependant.path_params.extend": [
                    124
                ],
                "flat_dependant.path_params": [
                    124
                ],
                "flat_sub.path_params": [
                    124
                ],
                "flat_dependant.query_params.extend": [
                    125
                ],
                "flat_dependant.query_params": [
                    125
                ],
                "flat_sub.query_params": [
                    125
                ],
                "flat_dependant.header_params.extend": [
                    126
                ],
                "flat_dependant.header_params": [
                    126
                ],
                "flat_sub.header_params": [
                    126
                ],
                "flat_dependant.cookie_params.extend": [
                    127
                ],
                "flat_dependant.cookie_params": [
                    127
                ],
                "flat_sub.cookie_params": [
                    127
                ],
                "flat_dependant.body_params.extend": [
                    128
                ],
                "flat_dependant.body_params": [
                    128,
                    544,
                    546,
                    533,
                    535,
                    537,
                    541,
                    543
                ],
                "flat_sub.body_params": [
                    128
                ],
                "flat_dependant.security_requirements.extend": [
                    129
                ],
                "flat_dependant.security_requirements": [
                    129
                ],
                "flat_sub.security_requirements": [
                    129
                ],
                "Field": [
                    512,
                    257,
                    450,
                    133,
                    518,
                    551,
                    233,
                    142,
                    272,
                    531,
                    413
                ],
                "field.shape": [
                    516,
                    135,
                    494,
                    143,
                    463,
                    501,
                    474
                ],
                "field": [
                    257,
                    513,
                    514,
                    516,
                    135,
                    136,
                    137,
                    138,
                    267,
                    268,
                    269,
                    519,
                    143,
                    144,
                    273,
                    146,
                    147,
                    274,
                    275,
                    276,
                    151,
                    277,
                    278,
                    279,
                    282,
                    283,
                    284,
                    418,
                    419,
                    422,
                    551,
                    424,
                    425,
                    428,
                    432,
                    561,
                    437,
                    439,
                    445,
                    521,
                    522,
                    456,
                    457,
                    523,
                    459,
                    460,
                    524,
                    463,
                    466,
                    525,
                    468,
                    471,
                    526,
                    473,
                    474,
                    478,
                    481,
                    485,
                    488,
                    489,
                    494,
                    495,
                    496,
                    501,
                    502,
                    508
                ],
                "Shape.SINGLETON": [
                    135
                ],
                "lenient_issubclass": [
                    514,
                    136,
                    137,
                    489,
                    143,
                    496,
                    210,
                    213,
                    151,
                    216,
                    219,
                    222
                ],
                "field.type_": [
                    514,
                    136,
                    137,
                    489,
                    144,
                    496,
                    151
                ],
                "BaseModel": [
                    136,
                    144
                ],
                "field.schema": [
                    488,
                    425,
                    138,
                    457,
                    268,
                    526,
                    495,
                    273,
                    274,
                    276,
                    278,
                    471,
                    473,
                    282
                ],
                "params.Body": [
                    545,
                    549,
                    201,
                    138,
                    268
                ],
                "field.sub_fields": [
                    146,
                    147
                ],
                "sub_field": [
                    147,
                    148
                ],
                "is_scalar_field": [
                    184,
                    193,
                    267,
                    148
                ],
                "path_param_names": [
                    180,
                    164
                ],
                "get_path_param_names": [
                    164
                ],
                "endpoint_signature": [
                    165,
                    166
                ],
                "inspect.signature": [
                    165
                ],
                "call": [
                    288,
                    289,
                    290,
                    292,
                    165,
                    293,
                    167,
                    324,
                    331,
                    364,
                    365,
                    367,
                    337
                ],
                "signature_params": [
                    168,
                    174,
                    166
                ],
                "endpoint_signature.parameters": [
                    166
                ],
                "use_cache": [
                    167
                ],
                "param_name": [
                    168,
                    180,
                    174
                ],
                "signature_params.items": [
                    168,
                    174
                ],
                "get_param_sub_dependant": [
                    170
                ],
                "dependant.dependencies.append": [
                    173
                ],
                "add_non_field_param_to_dependency": [
                    177
                ],
                "param_field": [
                    192,
                    193,
                    194,
                    197,
                    198,
                    201,
                    202,
                    203,
                    179,
                    185,
                    187
                ],
                "get_param_field": [
                    179,
                    187
                ],
                "params.Query": [
                    179,
                    196
                ],
                "param.empty": [
                    250,
                    236,
                    181
                ],
                "params.Path": [
                    189,
                    182
                ],
                "params.ParamTypes.path": [
                    274,
                    190
                ],
                "params.ParamTypes": [
                    232,
                    274,
                    276,
                    278,
                    282,
                    190
                ],
                "add_param_to_fields": [
                    192,
                    194,
                    198
                ],
                "params.Header": [
                    196
                ],
                "is_scalar_sequence_field": [
                    419,
                    197
                ],
                "param_field.schema": [
                    201
                ],
                "param_field.name": [
                    202
                ],
                "dependant.body_params.append": [
                    203
                ],
                "Request": [
                    210,
                    395,
                    298
                ],
                "dependant.request_param_name": [
                    396,
                    211,
                    395
                ],
                "WebSocket": [
                    298,
                    213,
                    397
                ],
                "dependant.websocket_param_name": [
                    398,
                    397,
                    214
                ],
                "Response": [
                    354,
                    302,
                    309,
                    216,
                    314
                ],
                "dependant.response_param_name": [
                    217,
                    403,
                    404
                ],
                "BackgroundTasks": [
                    401,
                    219,
                    308,
                    301
                ],
                "dependant.background_tasks_param_name": [
                    402,
                    220,
                    399
                ],
                "SecurityScopes": [
                    406,
                    222
                ],
                "dependant.security_scopes_param_name": [
                    405,
                    406,
                    223
                ],
                "Optional": [
                    451,
                    300,
                    209,
                    531,
                    308
                ],
                "Type": [
                    545,
                    231
                ],
                "params.Param": [
                    426,
                    273,
                    242,
                    231
                ],
                "default_value": [
                    260,
                    234,
                    237,
                    238,
                    240,
                    241,
                    247,
                    248
                ],
                "Required": [
                    248,
                    234
                ],
                "had_schema": [
                    267,
                    235,
                    239
                ],
                "Schema": [
                    238
                ],
                "schema": [
                    256,
                    439,
                    265,
                    425,
                    426,
                    268,
                    240,
                    241,
                    242,
                    243,
                    432,
                    245,
                    247,
                    252,
                    253
                ],
                "schema.default": [
                    241,
                    268
                ],
                "schema.in_": [
                    432,
                    243,
                    245,
                    439
                ],
                "default_schema.in_": [
                    243
                ],
                "default_schema": [
                    243,
                    247
                ],
                "force_type": [
                    244,
                    245
                ],
                "required": [
                    260,
                    262,
                    555,
                    248,
                    543
                ],
                "annotation": [
                    259,
                    249,
                    251,
                    252
                ],
                "Any": [
                    451,
                    452,
                    300,
                    461,
                    303,
                    304,
                    306,
                    310,
                    312,
                    249,
                    414,
                    415
                ],
                "get_annotation_from_schema": [
                    252
                ],
                "schema.alias": [
                    256,
                    253
                ],
                "alias": [
                    256,
                    261,
                    254
                ],
                "param.name.replace": [
                    254
                ],
                "BaseConfig": [
                    433,
                    556,
                    481,
                    263
                ],
                "cast": [
                    320,
                    273,
                    354,
                    321
                ],
                "field.schema.in_": [
                    274,
                    282,
                    276,
                    278
                ],
                "dependant.path_params.append": [
                    275
                ],
                "params.ParamTypes.query": [
                    276
                ],
                "dependant.query_params.append": [
                    277
                ],
                "params.ParamTypes.header": [
                    278
                ],
                "dependant.header_params.append": [
                    279
                ],
                "params.ParamTypes.cookie": [
                    282
                ],
                "field.name": [
                    485,
                    519,
                    437,
                    283,
                    508,
                    445
                ],
                "dependant.cookie_params.append": [
                    284
                ],
                "inspect.isfunction": [
                    288
                ],
                "asyncio.iscoroutinefunction": [
                    289,
                    293
                ],
                "asyncio": [
                    289,
                    500,
                    293
                ],
                "inspect.isclass": [
                    290
                ],
                "Union": [
                    298,
                    451,
                    300,
                    414
                ],
                "Dict": [
                    451,
                    452,
                    300,
                    304,
                    306,
                    310,
                    312,
                    415
                ],
                "FormData": [
                    464,
                    451,
                    300
                ],
                "Tuple": [
                    322,
                    452,
                    304,
                    305,
                    310,
                    415
                ],
                "values": [
                    384,
                    385,
                    386,
                    387,
                    393,
                    396,
                    398,
                    402,
                    404,
                    406,
                    409,
                    416,
                    437,
                    439,
                    312,
                    445,
                    446,
                    453,
                    485,
                    369,
                    502,
                    508,
                    509
                ],
                "errors": [
                    417,
                    388,
                    454,
                    360,
                    394,
                    409,
                    441,
                    429,
                    504,
                    313,
                    506,
                    443,
                    509,
                    446,
                    479
                ],
                "ErrorWrapper": [
                    480,
                    452,
                    430,
                    307,
                    503,
                    440,
                    313,
                    415
                ],
                "response": [
                    355,
                    357,
                    404,
                    409,
                    314,
                    347
                ],
                "dependency_cache": [
                    358,
                    362,
                    363,
                    370,
                    371,
                    409,
                    317,
                    349
                ],
                "sub_dependant.call": [
                    320,
                    330,
                    324
                ],
                "sub_dependant.cache_key": [
                    321,
                    322,
                    362,
                    363,
                    370,
                    371
                ],
                "use_sub_dependant": [
                    344,
                    325,
                    335
                ],
                "dependency_overrides_provider": [
                    328,
                    332,
                    348,
                    327
                ],
                "dependency_overrides_provider.dependency_overrides": [
                    328
                ],
                "original_call": [
                    330,
                    333
                ],
                "get": [
                    331
                ],
                "use_path": [
                    336,
                    334
                ],
                "sub_dependant.path": [
                    334
                ],
                "sub_dependant.name": [
                    368,
                    369,
                    338
                ],
                "solved_result": [
                    352,
                    342
                ],
                "solve_dependencies": [
                    342
                ],
                "request": [
                    395,
                    396,
                    397,
                    398,
                    373,
                    343,
                    376,
                    379,
                    382
                ],
                "body": [
                    345,
                    391
                ],
                "background_tasks": [
                    400,
                    401,
                    402,
                    409,
                    346,
                    351
                ],
                "sub_values": [
                    367,
                    365,
                    351
                ],
                "sub_errors": [
                    360,
                    359,
                    351
                ],
                "sub_response": [
                    354,
                    355,
                    356,
                    357,
                    351
                ],
                "sub_dependency_cache": [
                    358,
                    351
                ],
                "response.headers.raw.extend": [
                    355
                ],
                "response.headers.raw": [
                    355
                ],
                "response.headers": [
                    355
                ],
                "sub_response.headers.raw": [
                    355
                ],
                "sub_response.headers": [
                    355
                ],
                "sub_response.status_code": [
                    356,
                    357
                ],
                "response.status_code": [
                    357
                ],
                "dependency_cache.update": [
                    358
                ],
                "errors.extend": [
                    360,
                    506,
                    394,
                    443
                ],
                "sub_dependant.use_cache": [
                    362
                ],
                "solved": [
                    363,
                    365,
                    367,
                    369,
                    371
                ],
                "is_coroutine_callable": [
                    364
                ],
                "run_in_threadpool": [
                    367
                ],
                "path_values": [
                    384,
                    372
                ],
                "path_errors": [
                    388,
                    372
                ],
                "request_params_to_args": [
                    378,
                    372,
                    381,
                    375
                ],
                "request.path_params": [
                    373
                ],
                "query_values": [
                    385,
                    375
                ],
                "query_errors": [
                    388,
                    375
                ],
                "request.query_params": [
                    376
                ],
                "header_values": [
                    378,
                    386
                ],
                "header_errors": [
                    378,
                    388
                ],
                "request.headers": [
                    379
                ],
                "cookie_values": [
                    387,
                    381
                ],
                "cookie_errors": [
                    388,
                    381
                ],
                "request.cookies": [
                    382
                ],
                "values.update": [
                    384,
                    385,
                    386,
                    387,
                    393
                ],
                "body_values": [
                    393,
                    390
                ],
                "body_errors": [
                    394,
                    390
                ],
                "request_body_to_args": [
                    390
                ],
                "dependant.security_scopes": [
                    407
                ],
                "Sequence": [
                    413
                ],
                "Mapping": [
                    414
                ],
                "QueryParams": [
                    420,
                    414
                ],
                "Headers": [
                    420,
                    414
                ],
                "required_params": [
                    418,
                    455,
                    456,
                    458,
                    460
                ],
                "received_params": [
                    424,
                    420,
                    422
                ],
                "value": [
                    471,
                    422,
                    424,
                    490,
                    427,
                    492,
                    461,
                    497,
                    466,
                    499,
                    468,
                    501,
                    470,
                    439,
                    502,
                    475
                ],
                "received_params.getlist": [
                    422
                ],
                "field.alias": [
                    481,
                    422,
                    424,
                    459,
                    525,
                    432,
                    466,
                    468,
                    502,
                    439
                ],
                "field.default": [
                    485,
                    523,
                    437,
                    422
                ],
                "received_params.get": [
                    424
                ],
                "field.required": [
                    428,
                    524,
                    478
                ],
                "errors.append": [
                    504,
                    441,
                    429,
                    479
                ],
                "MissingError": [
                    481,
                    431
                ],
                "schema.in_.value": [
                    432,
                    439
                ],
                "deepcopy": [
                    485,
                    437
                ],
                "v_": [
                    508,
                    445,
                    502,
                    439
                ],
                "errors_": [
                    503,
                    504,
                    505,
                    506,
                    502,
                    439,
                    440,
                    441,
                    442,
                    443
                ],
                "field.validate": [
                    502,
                    439
                ],
                "embed": [
                    536,
                    457,
                    458,
                    537
                ],
                "received_body": [
                    459,
                    462,
                    464,
                    466,
                    468
                ],
                "received_body.getlist": [
                    466
                ],
                "received_body.get": [
                    468
                ],
                "params.Form": [
                    473,
                    546,
                    547,
                    471
                ],
                "params.File": [
                    488,
                    545,
                    544,
                    495
                ],
                "UploadFile": [
                    490,
                    514
                ],
                "value.read": [
                    492
                ],
                "awaitables": [
                    499,
                    500
                ],
                "sub_value.read": [
                    499
                ],
                "sub_value": [
                    499
                ],
                "contents": [
                    500,
                    501
                ],
                "asyncio.gather": [
                    500
                ],
                "out_field": [
                    528,
                    513,
                    518
                ],
                "use_type": [
                    520,
                    515,
                    517
                ],
                "field.class_validators": [
                    521
                ],
                "field.model_config": [
                    522
                ],
                "first_param": [
                    536,
                    538,
                    535
                ],
                "first_param.schema": [
                    536
                ],
                "get_schema_compatible_field": [
                    538,
                    542
                ],
                "model_name": [
                    539,
                    540
                ],
                "BodyModel": [
                    553,
                    540,
                    542
                ],
                "create_model": [
                    540
                ],
                "f": [
                    544,
                    546,
                    541,
                    542,
                    543
                ],
                "BodyModel.__fields__": [
                    542
                ],
                "f.name": [
                    542
                ],
                "f.required": [
                    543
                ],
                "f.schema": [
                    544,
                    546
                ],
                "BodySchema": [
                    545,
                    547,
                    549,
                    559
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/fastapi_11/tests/test_union_body.py",
                "test_function": "test_item_openapi_schema",
                "test_function_code": "def test_item_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == item_openapi_schema",
                "test_error": "KeyError: <class 'tests.test_union_body.OtherItem'>",
                "full_test_error": "def test_item_openapi_schema():\n>       response = client.get(\"/openapi.json\")\n\ntests/test_union_body.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:543: in get\n    return self.request('GET', url, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:405: in request\n    return super().request(\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:238: in send\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:235: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/applications.py:133: in __call__\n    await self.error_middleware(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:177: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:155: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:73: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:62: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:590: in __call__\n    await route(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:208: in __call__\n    await self.app(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\nfastapi/applications.py:87: in openapi\n    return JSONResponse(self.openapi())\nfastapi/applications.py:73: in openapi\n    self.openapi_schema = get_openapi(\nfastapi/openapi/utils.py:254: in get_openapi\n    result = get_openapi_path(route=route, model_name_map=model_name_map)\nfastapi/openapi/utils.py:162: in get_openapi_path\n    validation_definitions, operation_parameters = get_openapi_operation_parameters(\nfastapi/openapi/utils.py:87: in get_openapi_operation_parameters\n    \"schema\": field_schema(param, model_name_map={})[0],\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:297: in field_schema\n    f_schema, f_definitions, f_nested_models = field_type_schema(\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:527: in field_type_schema\n    f_schema, f_definitions, f_nested_models = field_singleton_schema(\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:742: in field_singleton_schema\n    return field_singleton_sub_fields_schema(\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:648: in field_singleton_sub_fields_schema\n    sub_schema, sub_definitions, sub_nested_models = field_type_schema(\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:527: in field_type_schema\n    f_schema, f_definitions, f_nested_models = field_singleton_schema(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfield = <Field(item_OtherItem type=OtherItem required)>\n\n    def field_singleton_schema(  # noqa: C901 (ignore complexity)\n        field: Field,\n        *,\n        by_alias: bool,\n        model_name_map: Dict[Type['BaseModel'], str],\n        schema_overrides: bool = False,\n        ref_prefix: Optional[str] = None,\n        known_models: Set[Type['BaseModel']],\n    ) -> Tuple[Dict[str, Any], Dict[str, Any], Set[str]]:\n        \"\"\"\n        This function is indirectly used by ``field_schema()``, you should probably be using that function.\n    \n        Take a single Pydantic ``Field``, and return its schema and any additional definitions from sub-models.\n        \"\"\"\n    \n        ref_prefix = ref_prefix or default_prefix\n        definitions: Dict[str, Any] = {}\n        nested_models: Set[str] = set()\n        if field.sub_fields:\n            return field_singleton_sub_fields_schema(\n                field.sub_fields,\n                by_alias=by_alias,\n                model_name_map=model_name_map,\n                schema_overrides=schema_overrides,\n                ref_prefix=ref_prefix,\n                known_models=known_models,\n            )\n        if field.type_ is Any or type(field.type_) == TypeVar:\n            return {}, definitions, nested_models  # no restrictions\n        if is_callable_type(field.type_):\n            raise SkipField(f'Callable {field.name} was excluded from schema since JSON schema has no equivalent type.')\n        f_schema: Dict[str, Any] = {}\n        if field.schema is not None and field.schema.const:\n            f_schema['const'] = field.default\n        field_type = field.type_\n        if is_new_type(field_type):\n            field_type = new_type_supertype(field_type)\n        if is_literal_type(field_type):\n            # If there were multiple literal values, field.sub_fields would not be falsy\n            literal_value = literal_values(field_type)[0]\n            field_type = type(literal_value)\n            f_schema['const'] = literal_value\n        if issubclass(field_type, Enum):\n            f_schema.update({'enum': [item.value for item in field_type]})\n            # Don't return immediately, to allow adding specific types\n        for field_name, schema_name in validation_attribute_to_schema_keyword.items():\n            field_value = getattr(field_type, field_name, None)\n            if field_value is not None:\n                if field_name == 'regex':\n                    field_value = field_value.pattern\n                f_schema[schema_name] = field_value\n        for type_, t_schema in field_class_to_schema_enum_enabled:\n            if issubclass(field_type, type_):\n                f_schema.update(t_schema)\n                break\n        # Return schema, with or without enum definitions\n        if f_schema:\n            return f_schema, definitions, nested_models\n        for type_, t_schema in field_class_to_schema_enum_disabled:\n            if issubclass(field_type, type_):\n                return t_schema, definitions, nested_models\n        # Handle dataclass-based models\n        if lenient_issubclass(getattr(field_type, '__pydantic_model__', None), pydantic.BaseModel):\n            field_type = field_type.__pydantic_model__  # type: ignore\n        if issubclass(field_type, pydantic.BaseModel):\n>           model_name = model_name_map[field_type]\nE           KeyError: <class 'tests.test_union_body.OtherItem'>\n\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:788: KeyError",
                "traceback": "../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:543: in get\n    return self.request('GET', url, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:405: in request\n    return super().request(\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:238: in send\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:235: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/applications.py:133: in __call__\n    await self.error_middleware(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:177: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:155: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:73: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:62: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:590: in __call__\n    await route(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:208: in __call__\n    await self.app(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\nfastapi/applications.py:87: in openapi\n    return JSONResponse(self.openapi())\nfastapi/applications.py:73: in openapi\n    self.openapi_schema = get_openapi(\nfastapi/openapi/utils.py:254: in get_openapi\n    result = get_openapi_path(route=route, model_name_map=model_name_map)\nfastapi/openapi/utils.py:162: in get_openapi_path\n    validation_definitions, operation_parameters = get_openapi_operation_parameters(\nfastapi/openapi/utils.py:87: in get_openapi_operation_parameters\n    \"schema\": field_schema(param, model_name_map={})[0],\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:297: in field_schema\n    f_schema, f_definitions, f_nested_models = field_type_schema(\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:527: in field_type_schema\n    f_schema, f_definitions, f_nested_models = field_singleton_schema(\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:742: in field_singleton_schema\n    return field_singleton_sub_fields_schema(\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:648: in field_singleton_sub_fields_schema\n    sub_schema, sub_definitions, sub_nested_models = field_type_schema(\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:527: in field_type_schema\n    f_schema, f_definitions, f_nested_models = field_singleton_schema(",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfield = <Field(item_OtherItem type=OtherItem required)>\n\n    def field_singleton_schema(  # noqa: C901 (ignore complexity)\n        field: Field,\n        *,\n        by_alias: bool,\n        model_name_map: Dict[Type['BaseModel'], str],\n        schema_overrides: bool = False,\n        ref_prefix: Optional[str] = None,\n        known_models: Set[Type['BaseModel']],\n    ) -> Tuple[Dict[str, Any], Dict[str, Any], Set[str]]:\n        \"\"\"\n        This function is indirectly used by ``field_schema()``, you should probably be using that function.\n    \n        Take a single Pydantic ``Field``, and return its schema and any additional definitions from sub-models.\n        \"\"\"\n    \n        ref_prefix = ref_prefix or default_prefix\n        definitions: Dict[str, Any] = {}\n        nested_models: Set[str] = set()\n        if field.sub_fields:\n            return field_singleton_sub_fields_schema(\n                field.sub_fields,\n                by_alias=by_alias,\n                model_name_map=model_name_map,\n                schema_overrides=schema_overrides,\n                ref_prefix=ref_prefix,\n                known_models=known_models,\n            )\n        if field.type_ is Any or type(field.type_) == TypeVar:\n            return {}, definitions, nested_models  # no restrictions\n        if is_callable_type(field.type_):\n            raise SkipField(f'Callable {field.name} was excluded from schema since JSON schema has no equivalent type.')\n        f_schema: Dict[str, Any] = {}\n        if field.schema is not None and field.schema.const:\n            f_schema['const'] = field.default\n        field_type = field.type_\n        if is_new_type(field_type):\n            field_type = new_type_supertype(field_type)\n        if is_literal_type(field_type):\n            # If there were multiple literal values, field.sub_fields would not be falsy\n            literal_value = literal_values(field_type)[0]\n            field_type = type(literal_value)\n            f_schema['const'] = literal_value\n        if issubclass(field_type, Enum):\n            f_schema.update({'enum': [item.value for item in field_type]})\n            # Don't return immediately, to allow adding specific types\n        for field_name, schema_name in validation_attribute_to_schema_keyword.items():\n            field_value = getattr(field_type, field_name, None)\n            if field_value is not None:\n                if field_name == 'regex':\n                    field_value = field_value.pattern\n                f_schema[schema_name] = field_value\n        for type_, t_schema in field_class_to_schema_enum_enabled:\n            if issubclass(field_type, type_):\n                f_schema.update(t_schema)\n                break\n        # Return schema, with or without enum definitions\n        if f_schema:\n            return f_schema, definitions, nested_models\n        for type_, t_schema in field_class_to_schema_enum_disabled:\n            if issubclass(field_type, type_):\n                return t_schema, definitions, nested_models\n        # Handle dataclass-based models\n        if lenient_issubclass(getattr(field_type, '__pydantic_model__', None), pydantic.BaseModel):\n            field_type = field_type.__pydantic_model__  # type: ignore\n        if issubclass(field_type, pydantic.BaseModel):\n>           model_name = model_name_map[field_type]\nE           KeyError: <class 'tests.test_union_body.OtherItem'>\n\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:788: KeyError",
                "test_function_decorators": []
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/fastapi_11/tests/test_union_body.py",
                "test_function": "test_post_other_item",
                "test_function_code": "def test_post_other_item():\n    response = client.post(\"/items/\", json={\"price\": 100})\n    assert response.status_code == 200\n    assert response.json() == {\"item\": {\"price\": 100}}",
                "test_error": "TypeError: __init__() missing 1 required positional argument: 'model'",
                "full_test_error": "def test_post_other_item():\n>       response = client.post(\"/items/\", json={\"price\": 100})\n\ntests/test_union_body.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:578: in post\n    return self.request('POST', url, data=data, json=json, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:405: in request\n    return super().request(\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:238: in send\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:235: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/applications.py:133: in __call__\n    await self.error_middleware(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:177: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:155: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:73: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:62: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:590: in __call__\n    await route(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:208: in __call__\n    await self.app(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nrequest = <starlette.requests.Request object at 0x1114d9820>\n\n    async def app(request: Request) -> Response:\n        try:\n            body = None\n            if body_field:\n                if is_body_form:\n                    body = await request.form()\n                else:\n                    body_bytes = await request.body()\n                    if body_bytes:\n                        body = await request.json()\n        except Exception as e:\n            logging.error(f\"Error getting request body: {e}\")\n            raise HTTPException(\n                status_code=400, detail=\"There was an error parsing the body\"\n            ) from e\n        solved_result = await solve_dependencies(\n            request=request,\n            dependant=dependant,\n            body=body,\n            dependency_overrides_provider=dependency_overrides_provider,\n        )\n        values, errors, background_tasks, sub_response, _ = solved_result\n        if errors:\n>           raise RequestValidationError(errors)\nE           TypeError: __init__() missing 1 required positional argument: 'model'\n\nfastapi/routing.py:105: TypeError",
                "traceback": "../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:578: in post\n    return self.request('POST', url, data=data, json=json, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:405: in request\n    return super().request(\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:238: in send\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:235: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/applications.py:133: in __call__\n    await self.error_middleware(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:177: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:155: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:73: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:62: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:590: in __call__\n    await route(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:208: in __call__\n    await self.app(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nrequest = <starlette.requests.Request object at 0x1114d9820>\n\n    async def app(request: Request) -> Response:\n        try:\n            body = None\n            if body_field:\n                if is_body_form:\n                    body = await request.form()\n                else:\n                    body_bytes = await request.body()\n                    if body_bytes:\n                        body = await request.json()\n        except Exception as e:\n            logging.error(f\"Error getting request body: {e}\")\n            raise HTTPException(\n                status_code=400, detail=\"There was an error parsing the body\"\n            ) from e\n        solved_result = await solve_dependencies(\n            request=request,\n            dependant=dependant,\n            body=body,\n            dependency_overrides_provider=dependency_overrides_provider,\n        )\n        values, errors, background_tasks, sub_response, _ = solved_result\n        if errors:\n>           raise RequestValidationError(errors)\nE           TypeError: __init__() missing 1 required positional argument: 'model'\n\nfastapi/routing.py:105: TypeError",
                "test_function_decorators": []
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/fastapi_11/tests/test_union_body.py",
                "test_function": "test_post_item",
                "test_function_code": "def test_post_item():\n    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n    assert response.status_code == 200\n    assert response.json() == {\"item\": {\"name\": \"Foo\"}}",
                "test_error": "TypeError: __init__() missing 1 required positional argument: 'model'",
                "full_test_error": "def test_post_item():\n>       response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n\ntests/test_union_body.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:578: in post\n    return self.request('POST', url, data=data, json=json, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:405: in request\n    return super().request(\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:238: in send\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:235: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/applications.py:133: in __call__\n    await self.error_middleware(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:177: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:155: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:73: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:62: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:590: in __call__\n    await route(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:208: in __call__\n    await self.app(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nrequest = <starlette.requests.Request object at 0x111318bb0>\n\n    async def app(request: Request) -> Response:\n        try:\n            body = None\n            if body_field:\n                if is_body_form:\n                    body = await request.form()\n                else:\n                    body_bytes = await request.body()\n                    if body_bytes:\n                        body = await request.json()\n        except Exception as e:\n            logging.error(f\"Error getting request body: {e}\")\n            raise HTTPException(\n                status_code=400, detail=\"There was an error parsing the body\"\n            ) from e\n        solved_result = await solve_dependencies(\n            request=request,\n            dependant=dependant,\n            body=body,\n            dependency_overrides_provider=dependency_overrides_provider,\n        )\n        values, errors, background_tasks, sub_response, _ = solved_result\n        if errors:\n>           raise RequestValidationError(errors)\nE           TypeError: __init__() missing 1 required positional argument: 'model'\n\nfastapi/routing.py:105: TypeError",
                "traceback": "../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:578: in post\n    return self.request('POST', url, data=data, json=json, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:405: in request\n    return super().request(\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:238: in send\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:235: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/applications.py:133: in __call__\n    await self.error_middleware(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:177: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:155: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:73: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:62: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:590: in __call__\n    await route(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:208: in __call__\n    await self.app(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nrequest = <starlette.requests.Request object at 0x111318bb0>\n\n    async def app(request: Request) -> Response:\n        try:\n            body = None\n            if body_field:\n                if is_body_form:\n                    body = await request.form()\n                else:\n                    body_bytes = await request.body()\n                    if body_bytes:\n                        body = await request.json()\n        except Exception as e:\n            logging.error(f\"Error getting request body: {e}\")\n            raise HTTPException(\n                status_code=400, detail=\"There was an error parsing the body\"\n            ) from e\n        solved_result = await solve_dependencies(\n            request=request,\n            dependant=dependant,\n            body=body,\n            dependency_overrides_provider=dependency_overrides_provider,\n        )\n        values, errors, background_tasks, sub_response, _ = solved_result\n        if errors:\n>           raise RequestValidationError(errors)\nE           TypeError: __init__() missing 1 required positional argument: 'model'\n\nfastapi/routing.py:105: TypeError",
                "test_function_decorators": []
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/fastapi_11/tests/test_union_inherited_body.py",
                "test_function": "test_inherited_item_openapi_schema",
                "test_function_code": "@skip_py36\ndef test_inherited_item_openapi_schema():\n    response = client.get(\"/openapi.json\")\n    assert response.status_code == 200\n    assert response.json() == inherited_item_openapi_schema",
                "test_error": "KeyError: <class 'tests.test_union_inherited_body.ExtendedItem'>",
                "full_test_error": "@skip_py36\n    def test_inherited_item_openapi_schema():\n>       response = client.get(\"/openapi.json\")\n\ntests/test_union_inherited_body.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:543: in get\n    return self.request('GET', url, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:405: in request\n    return super().request(\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:238: in send\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:235: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/applications.py:133: in __call__\n    await self.error_middleware(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:177: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:155: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:73: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:62: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:590: in __call__\n    await route(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:208: in __call__\n    await self.app(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\nfastapi/applications.py:87: in openapi\n    return JSONResponse(self.openapi())\nfastapi/applications.py:73: in openapi\n    self.openapi_schema = get_openapi(\nfastapi/openapi/utils.py:254: in get_openapi\n    result = get_openapi_path(route=route, model_name_map=model_name_map)\nfastapi/openapi/utils.py:162: in get_openapi_path\n    validation_definitions, operation_parameters = get_openapi_operation_parameters(\nfastapi/openapi/utils.py:87: in get_openapi_operation_parameters\n    \"schema\": field_schema(param, model_name_map={})[0],\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:297: in field_schema\n    f_schema, f_definitions, f_nested_models = field_type_schema(\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:527: in field_type_schema\n    f_schema, f_definitions, f_nested_models = field_singleton_schema(\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:742: in field_singleton_schema\n    return field_singleton_sub_fields_schema(\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:648: in field_singleton_sub_fields_schema\n    sub_schema, sub_definitions, sub_nested_models = field_type_schema(\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:527: in field_type_schema\n    f_schema, f_definitions, f_nested_models = field_singleton_schema(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfield = <Field(item_ExtendedItem type=ExtendedItem required)>\n\n    def field_singleton_schema(  # noqa: C901 (ignore complexity)\n        field: Field,\n        *,\n        by_alias: bool,\n        model_name_map: Dict[Type['BaseModel'], str],\n        schema_overrides: bool = False,\n        ref_prefix: Optional[str] = None,\n        known_models: Set[Type['BaseModel']],\n    ) -> Tuple[Dict[str, Any], Dict[str, Any], Set[str]]:\n        \"\"\"\n        This function is indirectly used by ``field_schema()``, you should probably be using that function.\n    \n        Take a single Pydantic ``Field``, and return its schema and any additional definitions from sub-models.\n        \"\"\"\n    \n        ref_prefix = ref_prefix or default_prefix\n        definitions: Dict[str, Any] = {}\n        nested_models: Set[str] = set()\n        if field.sub_fields:\n            return field_singleton_sub_fields_schema(\n                field.sub_fields,\n                by_alias=by_alias,\n                model_name_map=model_name_map,\n                schema_overrides=schema_overrides,\n                ref_prefix=ref_prefix,\n                known_models=known_models,\n            )\n        if field.type_ is Any or type(field.type_) == TypeVar:\n            return {}, definitions, nested_models  # no restrictions\n        if is_callable_type(field.type_):\n            raise SkipField(f'Callable {field.name} was excluded from schema since JSON schema has no equivalent type.')\n        f_schema: Dict[str, Any] = {}\n        if field.schema is not None and field.schema.const:\n            f_schema['const'] = field.default\n        field_type = field.type_\n        if is_new_type(field_type):\n            field_type = new_type_supertype(field_type)\n        if is_literal_type(field_type):\n            # If there were multiple literal values, field.sub_fields would not be falsy\n            literal_value = literal_values(field_type)[0]\n            field_type = type(literal_value)\n            f_schema['const'] = literal_value\n        if issubclass(field_type, Enum):\n            f_schema.update({'enum': [item.value for item in field_type]})\n            # Don't return immediately, to allow adding specific types\n        for field_name, schema_name in validation_attribute_to_schema_keyword.items():\n            field_value = getattr(field_type, field_name, None)\n            if field_value is not None:\n                if field_name == 'regex':\n                    field_value = field_value.pattern\n                f_schema[schema_name] = field_value\n        for type_, t_schema in field_class_to_schema_enum_enabled:\n            if issubclass(field_type, type_):\n                f_schema.update(t_schema)\n                break\n        # Return schema, with or without enum definitions\n        if f_schema:\n            return f_schema, definitions, nested_models\n        for type_, t_schema in field_class_to_schema_enum_disabled:\n            if issubclass(field_type, type_):\n                return t_schema, definitions, nested_models\n        # Handle dataclass-based models\n        if lenient_issubclass(getattr(field_type, '__pydantic_model__', None), pydantic.BaseModel):\n            field_type = field_type.__pydantic_model__  # type: ignore\n        if issubclass(field_type, pydantic.BaseModel):\n>           model_name = model_name_map[field_type]\nE           KeyError: <class 'tests.test_union_inherited_body.ExtendedItem'>\n\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:788: KeyError",
                "traceback": "../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:543: in get\n    return self.request('GET', url, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:405: in request\n    return super().request(\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:238: in send\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:235: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/applications.py:133: in __call__\n    await self.error_middleware(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:177: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:155: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:73: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:62: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:590: in __call__\n    await route(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:208: in __call__\n    await self.app(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\nfastapi/applications.py:87: in openapi\n    return JSONResponse(self.openapi())\nfastapi/applications.py:73: in openapi\n    self.openapi_schema = get_openapi(\nfastapi/openapi/utils.py:254: in get_openapi\n    result = get_openapi_path(route=route, model_name_map=model_name_map)\nfastapi/openapi/utils.py:162: in get_openapi_path\n    validation_definitions, operation_parameters = get_openapi_operation_parameters(\nfastapi/openapi/utils.py:87: in get_openapi_operation_parameters\n    \"schema\": field_schema(param, model_name_map={})[0],\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:297: in field_schema\n    f_schema, f_definitions, f_nested_models = field_type_schema(\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:527: in field_type_schema\n    f_schema, f_definitions, f_nested_models = field_singleton_schema(\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:742: in field_singleton_schema\n    return field_singleton_sub_fields_schema(\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:648: in field_singleton_sub_fields_schema\n    sub_schema, sub_definitions, sub_nested_models = field_type_schema(\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:527: in field_type_schema\n    f_schema, f_definitions, f_nested_models = field_singleton_schema(",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfield = <Field(item_ExtendedItem type=ExtendedItem required)>\n\n    def field_singleton_schema(  # noqa: C901 (ignore complexity)\n        field: Field,\n        *,\n        by_alias: bool,\n        model_name_map: Dict[Type['BaseModel'], str],\n        schema_overrides: bool = False,\n        ref_prefix: Optional[str] = None,\n        known_models: Set[Type['BaseModel']],\n    ) -> Tuple[Dict[str, Any], Dict[str, Any], Set[str]]:\n        \"\"\"\n        This function is indirectly used by ``field_schema()``, you should probably be using that function.\n    \n        Take a single Pydantic ``Field``, and return its schema and any additional definitions from sub-models.\n        \"\"\"\n    \n        ref_prefix = ref_prefix or default_prefix\n        definitions: Dict[str, Any] = {}\n        nested_models: Set[str] = set()\n        if field.sub_fields:\n            return field_singleton_sub_fields_schema(\n                field.sub_fields,\n                by_alias=by_alias,\n                model_name_map=model_name_map,\n                schema_overrides=schema_overrides,\n                ref_prefix=ref_prefix,\n                known_models=known_models,\n            )\n        if field.type_ is Any or type(field.type_) == TypeVar:\n            return {}, definitions, nested_models  # no restrictions\n        if is_callable_type(field.type_):\n            raise SkipField(f'Callable {field.name} was excluded from schema since JSON schema has no equivalent type.')\n        f_schema: Dict[str, Any] = {}\n        if field.schema is not None and field.schema.const:\n            f_schema['const'] = field.default\n        field_type = field.type_\n        if is_new_type(field_type):\n            field_type = new_type_supertype(field_type)\n        if is_literal_type(field_type):\n            # If there were multiple literal values, field.sub_fields would not be falsy\n            literal_value = literal_values(field_type)[0]\n            field_type = type(literal_value)\n            f_schema['const'] = literal_value\n        if issubclass(field_type, Enum):\n            f_schema.update({'enum': [item.value for item in field_type]})\n            # Don't return immediately, to allow adding specific types\n        for field_name, schema_name in validation_attribute_to_schema_keyword.items():\n            field_value = getattr(field_type, field_name, None)\n            if field_value is not None:\n                if field_name == 'regex':\n                    field_value = field_value.pattern\n                f_schema[schema_name] = field_value\n        for type_, t_schema in field_class_to_schema_enum_enabled:\n            if issubclass(field_type, type_):\n                f_schema.update(t_schema)\n                break\n        # Return schema, with or without enum definitions\n        if f_schema:\n            return f_schema, definitions, nested_models\n        for type_, t_schema in field_class_to_schema_enum_disabled:\n            if issubclass(field_type, type_):\n                return t_schema, definitions, nested_models\n        # Handle dataclass-based models\n        if lenient_issubclass(getattr(field_type, '__pydantic_model__', None), pydantic.BaseModel):\n            field_type = field_type.__pydantic_model__  # type: ignore\n        if issubclass(field_type, pydantic.BaseModel):\n>           model_name = model_name_map[field_type]\nE           KeyError: <class 'tests.test_union_inherited_body.ExtendedItem'>\n\n../../envs/fastapi_11/lib/python3.8/site-packages/pydantic/schema.py:788: KeyError",
                "test_function_decorators": [
                    "skip_py36"
                ]
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/fastapi_11/tests/test_union_inherited_body.py",
                "test_function": "test_post_extended_item",
                "test_function_code": "@skip_py36\ndef test_post_extended_item():\n    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"age\": 5})\n    assert response.status_code == 200\n    assert response.json() == {\"item\": {\"name\": \"Foo\", \"age\": 5}}",
                "test_error": "TypeError: __init__() missing 1 required positional argument: 'model'",
                "full_test_error": "@skip_py36\n    def test_post_extended_item():\n>       response = client.post(\"/items/\", json={\"name\": \"Foo\", \"age\": 5})\n\ntests/test_union_inherited_body.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:578: in post\n    return self.request('POST', url, data=data, json=json, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:405: in request\n    return super().request(\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:238: in send\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:235: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/applications.py:133: in __call__\n    await self.error_middleware(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:177: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:155: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:73: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:62: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:590: in __call__\n    await route(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:208: in __call__\n    await self.app(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nrequest = <starlette.requests.Request object at 0x111474af0>\n\n    async def app(request: Request) -> Response:\n        try:\n            body = None\n            if body_field:\n                if is_body_form:\n                    body = await request.form()\n                else:\n                    body_bytes = await request.body()\n                    if body_bytes:\n                        body = await request.json()\n        except Exception as e:\n            logging.error(f\"Error getting request body: {e}\")\n            raise HTTPException(\n                status_code=400, detail=\"There was an error parsing the body\"\n            ) from e\n        solved_result = await solve_dependencies(\n            request=request,\n            dependant=dependant,\n            body=body,\n            dependency_overrides_provider=dependency_overrides_provider,\n        )\n        values, errors, background_tasks, sub_response, _ = solved_result\n        if errors:\n>           raise RequestValidationError(errors)\nE           TypeError: __init__() missing 1 required positional argument: 'model'\n\nfastapi/routing.py:105: TypeError",
                "traceback": "../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:578: in post\n    return self.request('POST', url, data=data, json=json, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:405: in request\n    return super().request(\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:238: in send\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:235: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/applications.py:133: in __call__\n    await self.error_middleware(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:177: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:155: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:73: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:62: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:590: in __call__\n    await route(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:208: in __call__\n    await self.app(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nrequest = <starlette.requests.Request object at 0x111474af0>\n\n    async def app(request: Request) -> Response:\n        try:\n            body = None\n            if body_field:\n                if is_body_form:\n                    body = await request.form()\n                else:\n                    body_bytes = await request.body()\n                    if body_bytes:\n                        body = await request.json()\n        except Exception as e:\n            logging.error(f\"Error getting request body: {e}\")\n            raise HTTPException(\n                status_code=400, detail=\"There was an error parsing the body\"\n            ) from e\n        solved_result = await solve_dependencies(\n            request=request,\n            dependant=dependant,\n            body=body,\n            dependency_overrides_provider=dependency_overrides_provider,\n        )\n        values, errors, background_tasks, sub_response, _ = solved_result\n        if errors:\n>           raise RequestValidationError(errors)\nE           TypeError: __init__() missing 1 required positional argument: 'model'\n\nfastapi/routing.py:105: TypeError",
                "test_function_decorators": [
                    "skip_py36"
                ]
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/fastapi_11/tests/test_union_inherited_body.py",
                "test_function": "test_post_item",
                "test_function_code": "@skip_py36\ndef test_post_item():\n    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n    assert response.status_code == 200\n    assert response.json() == {\"item\": {\"name\": \"Foo\"}}",
                "test_error": "TypeError: __init__() missing 1 required positional argument: 'model'",
                "full_test_error": "@skip_py36\n    def test_post_item():\n>       response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n\ntests/test_union_inherited_body.py:138: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:578: in post\n    return self.request('POST', url, data=data, json=json, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:405: in request\n    return super().request(\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:238: in send\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:235: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/applications.py:133: in __call__\n    await self.error_middleware(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:177: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:155: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:73: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:62: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:590: in __call__\n    await route(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:208: in __call__\n    await self.app(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nrequest = <starlette.requests.Request object at 0x111688df0>\n\n    async def app(request: Request) -> Response:\n        try:\n            body = None\n            if body_field:\n                if is_body_form:\n                    body = await request.form()\n                else:\n                    body_bytes = await request.body()\n                    if body_bytes:\n                        body = await request.json()\n        except Exception as e:\n            logging.error(f\"Error getting request body: {e}\")\n            raise HTTPException(\n                status_code=400, detail=\"There was an error parsing the body\"\n            ) from e\n        solved_result = await solve_dependencies(\n            request=request,\n            dependant=dependant,\n            body=body,\n            dependency_overrides_provider=dependency_overrides_provider,\n        )\n        values, errors, background_tasks, sub_response, _ = solved_result\n        if errors:\n>           raise RequestValidationError(errors)\nE           TypeError: __init__() missing 1 required positional argument: 'model'\n\nfastapi/routing.py:105: TypeError",
                "traceback": "../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:578: in post\n    return self.request('POST', url, data=data, json=json, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:405: in request\n    return super().request(\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:238: in send\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/testclient.py:235: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/applications.py:133: in __call__\n    await self.error_middleware(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:177: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/middleware/errors.py:155: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:73: in __call__\n    raise exc from None\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/exceptions.py:62: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:590: in __call__\n    await route(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:208: in __call__\n    await self.app(scope, receive, send)\n../../envs/fastapi_11/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nrequest = <starlette.requests.Request object at 0x111688df0>\n\n    async def app(request: Request) -> Response:\n        try:\n            body = None\n            if body_field:\n                if is_body_form:\n                    body = await request.form()\n                else:\n                    body_bytes = await request.body()\n                    if body_bytes:\n                        body = await request.json()\n        except Exception as e:\n            logging.error(f\"Error getting request body: {e}\")\n            raise HTTPException(\n                status_code=400, detail=\"There was an error parsing the body\"\n            ) from e\n        solved_result = await solve_dependencies(\n            request=request,\n            dependant=dependant,\n            body=body,\n            dependency_overrides_provider=dependency_overrides_provider,\n        )\n        values, errors, background_tasks, sub_response, _ = solved_result\n        if errors:\n>           raise RequestValidationError(errors)\nE           TypeError: __init__() missing 1 required positional argument: 'model'\n\nfastapi/routing.py:105: TypeError",
                "test_function_decorators": [
                    "skip_py36"
                ]
            }
        ]
    }
}