{
    "1.1.1": "async def serialize_response(\n    *,\n    field: ModelField = None,\n    response_content: Any,\n    include: Union[SetIntStr, DictIntStrAny] = None,\n    exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    by_alias: bool = True,\n    exclude_unset: bool = False,\n    is_coroutine: bool = True,\n) -> Any:\n    if field:\n        errors = []\n        if exclude_unset and isinstance(response_content, BaseModel):\n            if PYDANTIC_1:\n                response_content = response_content.dict(exclude_unset=exclude_unset)\n            else:\n                response_content = response_content.dict(\n                    skip_defaults=exclude_unset\n                )  # pragma: nocover\n        if is_coroutine:\n            value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n        else:\n            value, errors_ = await run_in_threadpool(\n                field.validate, response_content, {}, loc=(\"response\",)\n            )\n        if isinstance(errors_, ErrorWrapper):\n            errors.append(errors_)\n        elif isinstance(errors_, list):\n            errors.extend(errors_)\n        if errors:\n            raise ValidationError(errors, field.type_)\n        return jsonable_encoder(\n            value,\n            include=include,\n            exclude=exclude,\n            by_alias=by_alias,\n            exclude_unset=exclude_unset,\n        )\n    else:\n        return jsonable_encoder(response_content)\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "fastapi/routing.py",
    "1.3.2": null,
    "1.4.1": [
        "def test_valid():\n    response = client.get(\"/items/valid\")\n    response.raise_for_status()\n    assert response.json() == {\"aliased_name\": \"valid\", \"price\": 1.0, \"owner_ids\": None}",
        "def test_coerce():\n    response = client.get(\"/items/coerce\")\n    response.raise_for_status()\n    assert response.json() == {\n        \"aliased_name\": \"coerce\",\n        \"price\": 1.0,\n        \"owner_ids\": None,\n    }",
        "def test_validlist():\n    response = client.get(\"/items/validlist\")\n    response.raise_for_status()\n    assert response.json() == [\n        {\"aliased_name\": \"foo\", \"price\": None, \"owner_ids\": None},\n        {\"aliased_name\": \"bar\", \"price\": 1.0, \"owner_ids\": None},\n        {\"aliased_name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n    ]",
        "def test_validdict():\n    response = client.get(\"/items/validdict\")\n    response.raise_for_status()\n    assert response.json() == {\n        \"k1\": {\"aliased_name\": \"foo\", \"price\": None, \"owner_ids\": None},\n        \"k2\": {\"aliased_name\": \"bar\", \"price\": 1.0, \"owner_ids\": None},\n        \"k3\": {\"aliased_name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n    }",
        "def test_valid_exclude_unset():\n    response = client.get(\"/items/valid-exclude-unset\")\n    response.raise_for_status()\n    assert response.json() == {\"aliased_name\": \"valid\", \"price\": 1.0}",
        "def test_coerce_exclude_unset():\n    response = client.get(\"/items/coerce-exclude-unset\")\n    response.raise_for_status()\n    assert response.json() == {\"aliased_name\": \"coerce\", \"price\": 1.0}",
        "def test_validlist_exclude_unset():\n    response = client.get(\"/items/validlist-exclude-unset\")\n    response.raise_for_status()\n    assert response.json() == [\n        {\"aliased_name\": \"foo\"},\n        {\"aliased_name\": \"bar\", \"price\": 1.0},\n        {\"aliased_name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n    ]",
        "def test_validdict_exclude_unset():\n    response = client.get(\"/items/validdict-exclude-unset\")\n    response.raise_for_status()\n    assert response.json() == {\n        \"k1\": {\"aliased_name\": \"foo\"},\n        \"k2\": {\"aliased_name\": \"bar\", \"price\": 1.0},\n        \"k3\": {\"aliased_name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n    }"
    ],
    "1.4.2": [
        "tests/test_serialize_response_model.py",
        "tests/test_serialize_response_model.py",
        "tests/test_serialize_response_model.py",
        "tests/test_serialize_response_model.py",
        "tests/test_serialize_response_model.py",
        "tests/test_serialize_response_model.py",
        "tests/test_serialize_response_model.py",
        "tests/test_serialize_response_model.py"
    ],
    "2.1.1": [
        [
            "E               pydantic.error_wrappers.ValidationError: 1 validation error for Item\nE               response -> aliased_name\nE                 field required (type=value_error.missing)"
        ],
        [
            "E               pydantic.error_wrappers.ValidationError: 1 validation error for Item\nE               response -> aliased_name\nE                 field required (type=value_error.missing)"
        ],
        [
            "E               pydantic.error_wrappers.ValidationError: 3 validation errors for Item\nE               response -> 0 -> aliased_name\nE                 field required (type=value_error.missing)\nE               response -> 1 -> aliased_name\nE                 field required (type=value_error.missing)\nE               response -> 2 -> aliased_name\nE                 field required (type=value_error.missing)"
        ],
        [
            "E               pydantic.error_wrappers.ValidationError: 3 validation errors for Item\nE               response -> k1 -> aliased_name\nE                 field required (type=value_error.missing)\nE               response -> k2 -> aliased_name\nE                 field required (type=value_error.missing)\nE               response -> k3 -> aliased_name\nE                 field required (type=value_error.missing)"
        ],
        [
            "E               pydantic.error_wrappers.ValidationError: 1 validation error for Item\nE               response -> aliased_name\nE                 field required (type=value_error.missing)"
        ],
        [
            "E               pydantic.error_wrappers.ValidationError: 1 validation error for Item\nE               response -> aliased_name\nE                 field required (type=value_error.missing)"
        ],
        [
            "E               pydantic.error_wrappers.ValidationError: 3 validation errors for Item\nE               response -> 0 -> aliased_name\nE                 field required (type=value_error.missing)\nE               response -> 1 -> aliased_name\nE                 field required (type=value_error.missing)\nE               response -> 2 -> aliased_name\nE                 field required (type=value_error.missing)"
        ],
        [
            "E               pydantic.error_wrappers.ValidationError: 3 validation errors for Item\nE               response -> k1 -> aliased_name\nE                 field required (type=value_error.missing)\nE               response -> k2 -> aliased_name\nE                 field required (type=value_error.missing)\nE               response -> k3 -> aliased_name\nE                 field required (type=value_error.missing)"
        ]
    ],
    "2.1.2": [
        [
            "def test_valid():\n>       response = client.get(\"/items/valid\")\n\ntests/test_serialize_response_model.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:543: in get\n    return self.request('GET', url, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:413: in request\n    return super().request(\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:243: in send\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:240: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\nfastapi/applications.py:149: in __call__\n    await super().__call__(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/applications.py:102: in __call__\n    await self.middleware_stack(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:181: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:159: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:82: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:71: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:550: in __call__\n    await route.handle(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:227: in handle\n    await self.app(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\nfastapi/routing.py:155: in app\n    response_data = await serialize_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    async def serialize_response(\n        *,\n        field: ModelField = None,\n        response_content: Any,\n        include: Union[SetIntStr, DictIntStrAny] = None,\n        exclude: Union[SetIntStr, DictIntStrAny] = set(),\n        by_alias: bool = True,\n        exclude_unset: bool = False,\n        is_coroutine: bool = True,\n    ) -> Any:\n        if field:\n            errors = []\n            if exclude_unset and isinstance(response_content, BaseModel):\n                if PYDANTIC_1:\n                    response_content = response_content.dict(exclude_unset=exclude_unset)\n                else:\n                    response_content = response_content.dict(\n                        skip_defaults=exclude_unset\n                    )  # pragma: nocover\n            if is_coroutine:\n                value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n            else:\n                value, errors_ = await run_in_threadpool(\n                    field.validate, response_content, {}, loc=(\"response\",)\n                )\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            if errors:\n>               raise ValidationError(errors, field.type_)",
            "\nfastapi/routing.py:81: ValidationError"
        ],
        [
            "def test_coerce():\n>       response = client.get(\"/items/coerce\")\n\ntests/test_serialize_response_model.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:543: in get\n    return self.request('GET', url, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:413: in request\n    return super().request(\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:243: in send\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:240: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\nfastapi/applications.py:149: in __call__\n    await super().__call__(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/applications.py:102: in __call__\n    await self.middleware_stack(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:181: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:159: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:82: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:71: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:550: in __call__\n    await route.handle(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:227: in handle\n    await self.app(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\nfastapi/routing.py:155: in app\n    response_data = await serialize_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    async def serialize_response(\n        *,\n        field: ModelField = None,\n        response_content: Any,\n        include: Union[SetIntStr, DictIntStrAny] = None,\n        exclude: Union[SetIntStr, DictIntStrAny] = set(),\n        by_alias: bool = True,\n        exclude_unset: bool = False,\n        is_coroutine: bool = True,\n    ) -> Any:\n        if field:\n            errors = []\n            if exclude_unset and isinstance(response_content, BaseModel):\n                if PYDANTIC_1:\n                    response_content = response_content.dict(exclude_unset=exclude_unset)\n                else:\n                    response_content = response_content.dict(\n                        skip_defaults=exclude_unset\n                    )  # pragma: nocover\n            if is_coroutine:\n                value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n            else:\n                value, errors_ = await run_in_threadpool(\n                    field.validate, response_content, {}, loc=(\"response\",)\n                )\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            if errors:\n>               raise ValidationError(errors, field.type_)",
            "\nfastapi/routing.py:81: ValidationError"
        ],
        [
            "def test_validlist():\n>       response = client.get(\"/items/validlist\")\n\ntests/test_serialize_response_model.py:106: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:543: in get\n    return self.request('GET', url, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:413: in request\n    return super().request(\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:243: in send\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:240: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\nfastapi/applications.py:149: in __call__\n    await super().__call__(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/applications.py:102: in __call__\n    await self.middleware_stack(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:181: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:159: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:82: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:71: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:550: in __call__\n    await route.handle(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:227: in handle\n    await self.app(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\nfastapi/routing.py:155: in app\n    response_data = await serialize_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    async def serialize_response(\n        *,\n        field: ModelField = None,\n        response_content: Any,\n        include: Union[SetIntStr, DictIntStrAny] = None,\n        exclude: Union[SetIntStr, DictIntStrAny] = set(),\n        by_alias: bool = True,\n        exclude_unset: bool = False,\n        is_coroutine: bool = True,\n    ) -> Any:\n        if field:\n            errors = []\n            if exclude_unset and isinstance(response_content, BaseModel):\n                if PYDANTIC_1:\n                    response_content = response_content.dict(exclude_unset=exclude_unset)\n                else:\n                    response_content = response_content.dict(\n                        skip_defaults=exclude_unset\n                    )  # pragma: nocover\n            if is_coroutine:\n                value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n            else:\n                value, errors_ = await run_in_threadpool(\n                    field.validate, response_content, {}, loc=(\"response\",)\n                )\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            if errors:\n>               raise ValidationError(errors, field.type_)",
            "\nfastapi/routing.py:81: ValidationError"
        ],
        [
            "def test_validdict():\n>       response = client.get(\"/items/validdict\")\n\ntests/test_serialize_response_model.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:543: in get\n    return self.request('GET', url, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:413: in request\n    return super().request(\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:243: in send\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:240: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\nfastapi/applications.py:149: in __call__\n    await super().__call__(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/applications.py:102: in __call__\n    await self.middleware_stack(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:181: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:159: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:82: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:71: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:550: in __call__\n    await route.handle(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:227: in handle\n    await self.app(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\nfastapi/routing.py:155: in app\n    response_data = await serialize_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    async def serialize_response(\n        *,\n        field: ModelField = None,\n        response_content: Any,\n        include: Union[SetIntStr, DictIntStrAny] = None,\n        exclude: Union[SetIntStr, DictIntStrAny] = set(),\n        by_alias: bool = True,\n        exclude_unset: bool = False,\n        is_coroutine: bool = True,\n    ) -> Any:\n        if field:\n            errors = []\n            if exclude_unset and isinstance(response_content, BaseModel):\n                if PYDANTIC_1:\n                    response_content = response_content.dict(exclude_unset=exclude_unset)\n                else:\n                    response_content = response_content.dict(\n                        skip_defaults=exclude_unset\n                    )  # pragma: nocover\n            if is_coroutine:\n                value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n            else:\n                value, errors_ = await run_in_threadpool(\n                    field.validate, response_content, {}, loc=(\"response\",)\n                )\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            if errors:\n>               raise ValidationError(errors, field.type_)",
            "\nfastapi/routing.py:81: ValidationError"
        ],
        [
            "def test_valid_exclude_unset():\n>       response = client.get(\"/items/valid-exclude-unset\")\n\ntests/test_serialize_response_model.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:543: in get\n    return self.request('GET', url, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:413: in request\n    return super().request(\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:243: in send\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:240: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\nfastapi/applications.py:149: in __call__\n    await super().__call__(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/applications.py:102: in __call__\n    await self.middleware_stack(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:181: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:159: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:82: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:71: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:550: in __call__\n    await route.handle(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:227: in handle\n    await self.app(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\nfastapi/routing.py:155: in app\n    response_data = await serialize_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    async def serialize_response(\n        *,\n        field: ModelField = None,\n        response_content: Any,\n        include: Union[SetIntStr, DictIntStrAny] = None,\n        exclude: Union[SetIntStr, DictIntStrAny] = set(),\n        by_alias: bool = True,\n        exclude_unset: bool = False,\n        is_coroutine: bool = True,\n    ) -> Any:\n        if field:\n            errors = []\n            if exclude_unset and isinstance(response_content, BaseModel):\n                if PYDANTIC_1:\n                    response_content = response_content.dict(exclude_unset=exclude_unset)\n                else:\n                    response_content = response_content.dict(\n                        skip_defaults=exclude_unset\n                    )  # pragma: nocover\n            if is_coroutine:\n                value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n            else:\n                value, errors_ = await run_in_threadpool(\n                    field.validate, response_content, {}, loc=(\"response\",)\n                )\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            if errors:\n>               raise ValidationError(errors, field.type_)",
            "\nfastapi/routing.py:81: ValidationError"
        ],
        [
            "def test_coerce_exclude_unset():\n>       response = client.get(\"/items/coerce-exclude-unset\")\n\ntests/test_serialize_response_model.py:132: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:543: in get\n    return self.request('GET', url, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:413: in request\n    return super().request(\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:243: in send\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:240: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\nfastapi/applications.py:149: in __call__\n    await super().__call__(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/applications.py:102: in __call__\n    await self.middleware_stack(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:181: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:159: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:82: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:71: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:550: in __call__\n    await route.handle(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:227: in handle\n    await self.app(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\nfastapi/routing.py:155: in app\n    response_data = await serialize_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    async def serialize_response(\n        *,\n        field: ModelField = None,\n        response_content: Any,\n        include: Union[SetIntStr, DictIntStrAny] = None,\n        exclude: Union[SetIntStr, DictIntStrAny] = set(),\n        by_alias: bool = True,\n        exclude_unset: bool = False,\n        is_coroutine: bool = True,\n    ) -> Any:\n        if field:\n            errors = []\n            if exclude_unset and isinstance(response_content, BaseModel):\n                if PYDANTIC_1:\n                    response_content = response_content.dict(exclude_unset=exclude_unset)\n                else:\n                    response_content = response_content.dict(\n                        skip_defaults=exclude_unset\n                    )  # pragma: nocover\n            if is_coroutine:\n                value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n            else:\n                value, errors_ = await run_in_threadpool(\n                    field.validate, response_content, {}, loc=(\"response\",)\n                )\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            if errors:\n>               raise ValidationError(errors, field.type_)",
            "\nfastapi/routing.py:81: ValidationError"
        ],
        [
            "def test_validlist_exclude_unset():\n>       response = client.get(\"/items/validlist-exclude-unset\")\n\ntests/test_serialize_response_model.py:138: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:543: in get\n    return self.request('GET', url, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:413: in request\n    return super().request(\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:243: in send\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:240: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\nfastapi/applications.py:149: in __call__\n    await super().__call__(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/applications.py:102: in __call__\n    await self.middleware_stack(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:181: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:159: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:82: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:71: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:550: in __call__\n    await route.handle(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:227: in handle\n    await self.app(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\nfastapi/routing.py:155: in app\n    response_data = await serialize_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    async def serialize_response(\n        *,\n        field: ModelField = None,\n        response_content: Any,\n        include: Union[SetIntStr, DictIntStrAny] = None,\n        exclude: Union[SetIntStr, DictIntStrAny] = set(),\n        by_alias: bool = True,\n        exclude_unset: bool = False,\n        is_coroutine: bool = True,\n    ) -> Any:\n        if field:\n            errors = []\n            if exclude_unset and isinstance(response_content, BaseModel):\n                if PYDANTIC_1:\n                    response_content = response_content.dict(exclude_unset=exclude_unset)\n                else:\n                    response_content = response_content.dict(\n                        skip_defaults=exclude_unset\n                    )  # pragma: nocover\n            if is_coroutine:\n                value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n            else:\n                value, errors_ = await run_in_threadpool(\n                    field.validate, response_content, {}, loc=(\"response\",)\n                )\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            if errors:\n>               raise ValidationError(errors, field.type_)",
            "\nfastapi/routing.py:81: ValidationError"
        ],
        [
            "def test_validdict_exclude_unset():\n>       response = client.get(\"/items/validdict-exclude-unset\")\n\ntests/test_serialize_response_model.py:148: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:543: in get\n    return self.request('GET', url, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:413: in request\n    return super().request(\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:243: in send\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:240: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\nfastapi/applications.py:149: in __call__\n    await super().__call__(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/applications.py:102: in __call__\n    await self.middleware_stack(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:181: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:159: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:82: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:71: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:550: in __call__\n    await route.handle(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:227: in handle\n    await self.app(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\nfastapi/routing.py:155: in app\n    response_data = await serialize_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    async def serialize_response(\n        *,\n        field: ModelField = None,\n        response_content: Any,\n        include: Union[SetIntStr, DictIntStrAny] = None,\n        exclude: Union[SetIntStr, DictIntStrAny] = set(),\n        by_alias: bool = True,\n        exclude_unset: bool = False,\n        is_coroutine: bool = True,\n    ) -> Any:\n        if field:\n            errors = []\n            if exclude_unset and isinstance(response_content, BaseModel):\n                if PYDANTIC_1:\n                    response_content = response_content.dict(exclude_unset=exclude_unset)\n                else:\n                    response_content = response_content.dict(\n                        skip_defaults=exclude_unset\n                    )  # pragma: nocover\n            if is_coroutine:\n                value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n            else:\n                value, errors_ = await run_in_threadpool(\n                    field.validate, response_content, {}, loc=(\"response\",)\n                )\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            if errors:\n>               raise ValidationError(errors, field.type_)",
            "\nfastapi/routing.py:81: ValidationError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": null,
    "2.1.6": null,
    "3.1.1": [
        "Returning List[response_model] doesn't respect response_model_exclude_unset\n",
        "Cannot return response containing pydantic model that includes aliases since FastAPI 0.47.1\n"
    ],
    "3.1.2": [
        "Describe the bug\nNot sure if this should be a Feature request or a bug.\n\nWhen returning a List of models, the response includes \"unset\" key/values when response_model_exclude_unset is set to True.\n\nTo Reproduce\nCreate a file with:\nimport pydantic\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\nclass Item(pydantic.BaseModel):\n    foobar: str = \"foobar\"\n    foo: str\n    bar: str = None\n\nALL_ITEMS = [Item(foo=\"foo0\"), Item(foo=\"foo1\"), Item(foo=\"foo2\")]\n\n@app .get(\"/items\", response_model=List[Item], response_model_exclude_unset=True)\ndef get_all_items():\n    return ALL_ITEMS\n\n@app .get(\"/items/{item_index}\", response_model=Item, response_model_exclude_unset=True)\ndef get_item(item_index: int):\n    return ALL_ITEMS[item_index]\nOpen the browser and call the endpoint /items.\nIt returns a JSON with...\n[\n  {\n    \"foobar\": \"foobar\",\n    \"foo\": \"foo0\",\n    \"bar\": null\n  },\n  {\n    \"foobar\": \"foobar\",\n    \"foo\": \"foo1\",\n    \"bar\": null\n  },\n  {\n    \"foobar\": \"foobar\",\n    \"foo\": \"foo2\",\n    \"bar\": null\n  }\n]\nBut I expected it to return...\n[\n  {\n    \"foo\": \"foo0\"\n  },\n  {\n    \"foo\": \"foo1\"\n  },\n  {\n    \"foo\": \"foo2\"\n  }\n]\nExpected behavior\nI would expect /items and /items/{item_index} to return the same representation of an item.\n\nEnvironment\nOS: Windows and MacOS\nFastAPI Version: 0.47.1\nPython version: 3.7.3\nAdditional context\nThe main thing I'm trying to achieve here is to exclude nulls when using List[MyModel]. Currently, the only workaround that I know of is to do one of the following.\n\ncreate a new response AllItems model and overload dict()\ncreate a middleware that strips response nulls.\nuse an arbitrary dict (I don't want to do this)\nHowever, given the prevalence of API's that have a /<all_items>, /<single_item> I would think that using response_model_exclude_unset or exclude_none is the more intuitive way to achieve this.\n",
        "Starting in 0.47.1, responses fail validation if they include any pydantic model objects that contain field aliases\nYou can work around this by explicitly calling .dict(by_alias=True) on the top-level response model object before returning it from the path operation function (see the example below). However, this is super unintuitive and makes the use of field aliases painful. In our codebase we use aliases extensively (via Config.alias_generator) to expose camelCase in our public APIs while keeping our internal field names snake_case, and this issue is a real hassle.\n\nTo Reproduce\nCreate a test.py file with:\nimport fastapi\nimport pydantic\nimport starlette.testclient\nfrom typing import List\n\napp = fastapi.FastAPI()\n\nclass Item(pydantic.BaseModel):\n    my_value: int = pydantic.Field(..., alias='myValue')\n\nclass RootResponse(pydantic.BaseModel):\n    items: List[Item] = pydantic.Field(...)\n\n@app.get('/broken_1', response_model=RootResponse)\nasync def broken_1():\n    # embedded models don't work if they have aliased fields\n    return {'items': [Item(myValue=5), Item(myValue=10)]}\n\n@app.get('/broken_2', response_model=RootResponse)\nasync def broken_2():\n    # making the top-level response a model instance doesn't help\n    return RootResponse(items=[Item(myValue=5), Item(myValue=10)])\n\n@app.get('/workaround', response_model=RootResponse)\nasync def workaround():\n    # workaround is to build a top-level model and then dict(by_alias=True)\n    return RootResponse(items=[Item(myValue=5), Item(myValue=10)]).dict(by_alias=True)\n\nwith starlette.testclient.TestClient(app) as test_client:\n    for path in ['/broken_1', '/broken_2', '/workaround']:\n        try:\n            print('-------------------------------------------')\n            print(path)\n            response = test_client.get(path)\n        except Exception as exc:\n            print(exc)\n        else:\n            print('succeeded')\nRun python3 test.py with FastAPI 0.47.0. All 3 cases succeed.\nRun python3 test.py with FastAPI 0.49.0. Only the \"workaround\" case succeeds.\nExpected behavior\nModel classes that include aliased fields (whether the alias is directly specified on the field as in the above example, or using a pydantic Config.alias_generator) should be usable with the context of a response model.\n\nEnvironment\nOS: Linux (Ubuntu 18.04)\nFastAPI Version: 0.47.1 and above\nPython version: 3.7, 3.8\n"
    ],
    "used_imports": "from typing import Any, Callable, Dict, List, Optional, Sequence, Set, Type, Union\nfrom fastapi.encoders import DictIntStrAny, SetIntStr, jsonable_encoder\nfrom fastapi.utils import PYDANTIC_1, create_cloned_field, create_response_field, generate_operation_id_for_path, get_field_info, warning_response_model_skip_defaults_deprecated\nfrom pydantic import BaseModel\nfrom pydantic.error_wrappers import ErrorWrapper, ValidationError\nfrom starlette.concurrency import run_in_threadpool\nfrom pydantic.fields import Field as ModelField"
}