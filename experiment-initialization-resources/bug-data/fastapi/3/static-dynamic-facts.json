{
    "fastapi:3": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/fastapi_3/fastapi/routing.py": {
            "buggy_functions": [
                {
                    "function_name": "serialize_response",
                    "function_code": "async def serialize_response(\n    *,\n    field: ModelField = None,\n    response_content: Any,\n    include: Union[SetIntStr, DictIntStrAny] = None,\n    exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    by_alias: bool = True,\n    exclude_unset: bool = False,\n    is_coroutine: bool = True,\n) -> Any:\n    if field:\n        errors = []\n        if exclude_unset and isinstance(response_content, BaseModel):\n            if PYDANTIC_1:\n                response_content = response_content.dict(exclude_unset=exclude_unset)\n            else:\n                response_content = response_content.dict(\n                    skip_defaults=exclude_unset\n                )  # pragma: nocover\n        if is_coroutine:\n            value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n        else:\n            value, errors_ = await run_in_threadpool(\n                field.validate, response_content, {}, loc=(\"response\",)\n            )\n        if isinstance(errors_, ErrorWrapper):\n            errors.append(errors_)\n        elif isinstance(errors_, list):\n            errors.extend(errors_)\n        if errors:\n            raise ValidationError(errors, field.type_)\n        return jsonable_encoder(\n            value,\n            include=include,\n            exclude=exclude,\n            by_alias=by_alias,\n            exclude_unset=exclude_unset,\n        )\n    else:\n        return jsonable_encoder(response_content)\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 51,
                    "end_line": 90,
                    "variables": {
                        "ModelField": [
                            53
                        ],
                        "Any": [
                            60,
                            54
                        ],
                        "Union": [
                            56,
                            55
                        ],
                        "SetIntStr": [
                            56,
                            55
                        ],
                        "DictIntStrAny": [
                            56,
                            55
                        ],
                        "bool": [
                            57,
                            58,
                            59
                        ],
                        "set": [
                            56
                        ],
                        "field": [
                            81,
                            74,
                            61,
                            71
                        ],
                        "errors": [
                            77,
                            79,
                            80,
                            81,
                            62
                        ],
                        "exclude_unset": [
                            65,
                            68,
                            87,
                            63
                        ],
                        "isinstance": [
                            76,
                            78,
                            63
                        ],
                        "response_content": [
                            65,
                            67,
                            71,
                            74,
                            90,
                            63
                        ],
                        "BaseModel": [
                            63
                        ],
                        "PYDANTIC_1": [
                            64
                        ],
                        "response_content.dict": [
                            65,
                            67
                        ],
                        "is_coroutine": [
                            70
                        ],
                        "value": [
                            73,
                            83,
                            71
                        ],
                        "errors_": [
                            71,
                            73,
                            76,
                            77,
                            78,
                            79
                        ],
                        "field.validate": [
                            74,
                            71
                        ],
                        "run_in_threadpool": [
                            73
                        ],
                        "ErrorWrapper": [
                            76
                        ],
                        "errors.append": [
                            77
                        ],
                        "list": [
                            78
                        ],
                        "errors.extend": [
                            79
                        ],
                        "ValidationError": [
                            81
                        ],
                        "field.type_": [
                            81
                        ],
                        "jsonable_encoder": [
                            82,
                            90
                        ],
                        "include": [
                            84
                        ],
                        "exclude": [
                            85
                        ],
                        "by_alias": [
                            86
                        ]
                    },
                    "filtered_variables": {
                        "ModelField": [
                            53
                        ],
                        "Any": [
                            60,
                            54
                        ],
                        "Union": [
                            56,
                            55
                        ],
                        "SetIntStr": [
                            56,
                            55
                        ],
                        "DictIntStrAny": [
                            56,
                            55
                        ],
                        "field": [
                            81,
                            74,
                            61,
                            71
                        ],
                        "errors": [
                            77,
                            79,
                            80,
                            81,
                            62
                        ],
                        "exclude_unset": [
                            65,
                            68,
                            87,
                            63
                        ],
                        "response_content": [
                            65,
                            67,
                            71,
                            74,
                            90,
                            63
                        ],
                        "BaseModel": [
                            63
                        ],
                        "PYDANTIC_1": [
                            64
                        ],
                        "response_content.dict": [
                            65,
                            67
                        ],
                        "is_coroutine": [
                            70
                        ],
                        "value": [
                            73,
                            83,
                            71
                        ],
                        "errors_": [
                            71,
                            73,
                            76,
                            77,
                            78,
                            79
                        ],
                        "field.validate": [
                            74,
                            71
                        ],
                        "run_in_threadpool": [
                            73
                        ],
                        "ErrorWrapper": [
                            76
                        ],
                        "errors.append": [
                            77
                        ],
                        "errors.extend": [
                            79
                        ],
                        "ValidationError": [
                            81
                        ],
                        "field.type_": [
                            81
                        ],
                        "jsonable_encoder": [
                            82,
                            90
                        ],
                        "include": [
                            84
                        ],
                        "exclude": [
                            85
                        ],
                        "by_alias": [
                            86
                        ]
                    },
                    "diff_line_number": 51,
                    "class_data": null,
                    "used_imports": [
                        "from typing import Any, Callable, Dict, List, Optional, Sequence, Set, Type, Union",
                        "from fastapi.encoders import DictIntStrAny, SetIntStr, jsonable_encoder",
                        "from fastapi.utils import PYDANTIC_1, create_cloned_field, create_response_field, generate_operation_id_for_path, get_field_info, warning_response_model_skip_defaults_deprecated",
                        "from pydantic import BaseModel",
                        "from pydantic.error_wrappers import ErrorWrapper, ValidationError",
                        "from starlette.concurrency import run_in_threadpool",
                        "from pydantic.fields import Field as ModelField"
                    ],
                    "variable_values": [
                        [
                            {
                                "ModelField": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SetIntStr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DictIntStrAny": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field": {
                                    "variable_value": "ModelField(name='Response_get_validdict_exclude_unset_items_validdict_exclude_unset_get', type=Optional[Mapping[str, Item]], required=False, default=None)",
                                    "variable_type": "ModelField",
                                    "variable_shape": "4"
                                },
                                "errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "exclude_unset": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "response_content": {
                                    "variable_value": "{'k1': Item(name='foo', price=None, owner_ids=None), 'k2': Item(name='bar', price=1.0, owner_ids=None), 'k3': Item(name='baz', price=2.0, owner_ids=[1, 2, 3])}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "BaseModel": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PYDANTIC_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "response_content.dict": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_coroutine": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.validate": {
                                    "variable_value": "<bound method ModelField.validate of ModelField(name='Response_get_validdict_exclude_unset_items_validdict_exclude_unset_get', type=Optional[Mapping[str, Item]], required=False, default=None)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "run_in_threadpool": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ErrorWrapper": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ValidationError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": "<class 'Item'>",
                                    "variable_type": "ModelMetaclass",
                                    "variable_shape": null
                                },
                                "jsonable_encoder": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "include": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "exclude": {
                                    "variable_value": "set()",
                                    "variable_type": "set",
                                    "variable_shape": "0"
                                },
                                "by_alias": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": {
                "file_scope_functions": [
                    {
                        "code": "async def serialize_response(\n    *,\n    field: ModelField = None,\n    response_content: Any,\n    include: Union[SetIntStr, DictIntStrAny] = None,\n    exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    by_alias: bool = True,\n    exclude_unset: bool = False,\n    is_coroutine: bool = True,\n) -> Any:\n    if field:\n        errors = []\n        if exclude_unset and isinstance(response_content, BaseModel):\n            if PYDANTIC_1:\n                response_content = response_content.dict(exclude_unset=exclude_unset)\n            else:\n                response_content = response_content.dict(\n                    skip_defaults=exclude_unset\n                )  # pragma: nocover\n        if is_coroutine:\n            value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n        else:\n            value, errors_ = await run_in_threadpool(\n                field.validate, response_content, {}, loc=(\"response\",)\n            )\n        if isinstance(errors_, ErrorWrapper):\n            errors.append(errors_)\n        elif isinstance(errors_, list):\n            errors.extend(errors_)\n        if errors:\n            raise ValidationError(errors, field.type_)\n        return jsonable_encoder(\n            value,\n            include=include,\n            exclude=exclude,\n            by_alias=by_alias,\n            exclude_unset=exclude_unset,\n        )\n    else:\n        return jsonable_encoder(response_content)",
                        "signature": "serialize_response() -> Any"
                    },
                    {
                        "code": "async def run_endpoint_function(\n    *, dependant: Dependant, values: Dict[str, Any], is_coroutine: bool\n) -> Any:\n    # Only called by get_request_handler. Has been split into its own function to\n    # facilitate profiling endpoints, since inner functions are harder to profile.\n    assert dependant.call is not None, \"dependant.call must be a function\"\n\n    if is_coroutine:\n        return await dependant.call(**values)\n    else:\n        return await run_in_threadpool(dependant.call, **values)",
                        "signature": "run_endpoint_function() -> Any"
                    },
                    {
                        "code": "def get_request_handler(\n    dependant: Dependant,\n    body_field: ModelField = None,\n    status_code: int = 200,\n    response_class: Type[Response] = JSONResponse,\n    response_field: ModelField = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_exclude_unset: bool = False,\n    dependency_overrides_provider: Any = None,\n) -> Callable:\n    assert dependant.call is not None, \"dependant.call must be a function\"\n    is_coroutine = asyncio.iscoroutinefunction(dependant.call)\n    is_body_form = body_field and isinstance(get_field_info(body_field), params.Form)\n\n    async def app(request: Request) -> Response:\n        try:\n            body = None\n            if body_field:\n                if is_body_form:\n                    body = await request.form()\n                else:\n                    body_bytes = await request.body()\n                    if body_bytes:\n                        body = await request.json()\n        except Exception as e:\n            logger.error(f\"Error getting request body: {e}\")\n            raise HTTPException(\n                status_code=400, detail=\"There was an error parsing the body\"\n            ) from e\n        solved_result = await solve_dependencies(\n            request=request,\n            dependant=dependant,\n            body=body,\n            dependency_overrides_provider=dependency_overrides_provider,\n        )\n        values, errors, background_tasks, sub_response, _ = solved_result\n        if errors:\n            raise RequestValidationError(errors, body=body)\n        else:\n            raw_response = await run_endpoint_function(\n                dependant=dependant, values=values, is_coroutine=is_coroutine\n            )\n\n            if isinstance(raw_response, Response):\n                if raw_response.background is None:\n                    raw_response.background = background_tasks\n                return raw_response\n            response_data = await serialize_response(\n                field=response_field,\n                response_content=raw_response,\n                include=response_model_include,\n                exclude=response_model_exclude,\n                by_alias=response_model_by_alias,\n                exclude_unset=response_model_exclude_unset,\n                is_coroutine=is_coroutine,\n            )\n            response = response_class(\n                content=response_data,\n                status_code=status_code,\n                background=background_tasks,\n            )\n            response.headers.raw.extend(sub_response.headers.raw)\n            if sub_response.status_code:\n                response.status_code = sub_response.status_code\n            return response\n\n    return app",
                        "signature": "get_request_handler(dependant: Dependant, body_field: ModelField=None, status_code: int=200, response_class: Type[Response]=JSONResponse, response_field: ModelField=None, response_model_include: Union[SetIntStr, DictIntStrAny]=None, response_model_exclude: Union[SetIntStr, DictIntStrAny]=set(), response_model_by_alias: bool=True, response_model_exclude_unset: bool=False, dependency_overrides_provider: Any=None) -> Callable"
                    },
                    {
                        "code": "def get_websocket_app(\n    dependant: Dependant, dependency_overrides_provider: Any = None\n) -> Callable:\n    async def app(websocket: WebSocket) -> None:\n        solved_result = await solve_dependencies(\n            request=websocket,\n            dependant=dependant,\n            dependency_overrides_provider=dependency_overrides_provider,\n        )\n        values, errors, _, _2, _3 = solved_result\n        if errors:\n            await websocket.close(code=WS_1008_POLICY_VIOLATION)\n            raise WebSocketRequestValidationError(errors)\n        assert dependant.call is not None, \"dependant.call must be a function\"\n        await dependant.call(**values)\n\n    return app",
                        "signature": "get_websocket_app(dependant: Dependant, dependency_overrides_provider: Any=None) -> Callable"
                    }
                ],
                "file_scope_classes": [
                    {
                        "class_declaration": "class APIWebSocketRoute:",
                        "functions": [
                            {
                                "code": "def __init__(\n    self,\n    path: str,\n    endpoint: Callable,\n    *,\n    name: str = None,\n    dependency_overrides_provider: Any = None,\n) -> None:\n    self.path = path\n    self.endpoint = endpoint\n    self.name = get_name(endpoint) if name is None else name\n    self.dependant = get_dependant(path=path, call=self.endpoint)\n    self.app = websocket_session(\n        get_websocket_app(\n            dependant=self.dependant,\n            dependency_overrides_provider=dependency_overrides_provider,\n        )\n    )\n    self.path_regex, self.path_format, self.param_convertors = compile_path(path)",
                                "signature": "__init__(self, path: str, endpoint: Callable) -> None"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class APIRoute:",
                        "functions": [
                            {
                                "code": "def __init__(\n    self,\n    path: str,\n    endpoint: Callable,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    name: str = None,\n    methods: Optional[Union[Set[str], List[str]]] = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Optional[Type[Response]] = None,\n    dependency_overrides_provider: Any = None,\n    callbacks: Optional[List[\"APIRoute\"]] = None,\n) -> None:\n    self.path = path\n    self.endpoint = endpoint\n    self.name = get_name(endpoint) if name is None else name\n    self.path_regex, self.path_format, self.param_convertors = compile_path(path)\n    if methods is None:\n        methods = [\"GET\"]\n    self.methods = set([method.upper() for method in methods])\n    self.unique_id = generate_operation_id_for_path(\n        name=self.name, path=self.path_format, method=list(methods)[0]\n    )\n    self.response_model = response_model\n    if self.response_model:\n        assert (\n            status_code not in STATUS_CODES_WITH_NO_BODY\n        ), f\"Status code {status_code} must not have a response body\"\n        response_name = \"Response_\" + self.unique_id\n        self.response_field = create_response_field(\n            name=response_name, type_=self.response_model\n        )\n        # Create a clone of the field, so that a Pydantic submodel is not returned\n        # as is just because it's an instance of a subclass of a more limited class\n        # e.g. UserInDB (containing hashed_password) could be a subclass of User\n        # that doesn't have the hashed_password. But because it's a subclass, it\n        # would pass the validation and be returned as is.\n        # By being a new field, no inheritance will be passed as is. A new model\n        # will be always created.\n        self.secure_cloned_response_field: Optional[\n            ModelField\n        ] = create_cloned_field(self.response_field)\n    else:\n        self.response_field = None  # type: ignore\n        self.secure_cloned_response_field = None\n    self.status_code = status_code\n    self.tags = tags or []\n    if dependencies:\n        self.dependencies = list(dependencies)\n    else:\n        self.dependencies = []\n    self.summary = summary\n    self.description = description or inspect.cleandoc(self.endpoint.__doc__ or \"\")\n    # if a \"form feed\" character (page break) is found in the description text,\n    # truncate description text to the content preceding the first \"form feed\"\n    self.description = self.description.split(\"\\f\")[0]\n    self.response_description = response_description\n    self.responses = responses or {}\n    response_fields = {}\n    for additional_status_code, response in self.responses.items():\n        assert isinstance(response, dict), \"An additional response must be a dict\"\n        model = response.get(\"model\")\n        if model:\n            assert (\n                additional_status_code not in STATUS_CODES_WITH_NO_BODY\n            ), f\"Status code {additional_status_code} must not have a response body\"\n            response_name = f\"Response_{additional_status_code}_{self.unique_id}\"\n            response_field = create_response_field(name=response_name, type_=model)\n            response_fields[additional_status_code] = response_field\n    if response_fields:\n        self.response_fields: Dict[Union[int, str], ModelField] = response_fields\n    else:\n        self.response_fields = {}\n    self.deprecated = deprecated\n    self.operation_id = operation_id\n    self.response_model_include = response_model_include\n    self.response_model_exclude = response_model_exclude\n    self.response_model_by_alias = response_model_by_alias\n    self.response_model_exclude_unset = response_model_exclude_unset\n    self.include_in_schema = include_in_schema\n    self.response_class = response_class\n\n    assert callable(endpoint), f\"An endpoint must be a callable\"\n    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)\n    for depends in self.dependencies[::-1]:\n        self.dependant.dependencies.insert(\n            0,\n            get_parameterless_sub_dependant(depends=depends, path=self.path_format),\n        )\n    self.body_field = get_body_field(dependant=self.dependant, name=self.unique_id)\n    self.dependency_overrides_provider = dependency_overrides_provider\n    self.callbacks = callbacks\n    self.app = request_response(self.get_route_handler())",
                                "signature": "__init__(self, path: str, endpoint: Callable) -> None"
                            },
                            {
                                "code": "def get_route_handler(self) -> Callable:\n    return get_request_handler(\n        dependant=self.dependant,\n        body_field=self.body_field,\n        status_code=self.status_code,\n        response_class=self.response_class or JSONResponse,\n        response_field=self.secure_cloned_response_field,\n        response_model_include=self.response_model_include,\n        response_model_exclude=self.response_model_exclude,\n        response_model_by_alias=self.response_model_by_alias,\n        response_model_exclude_unset=self.response_model_exclude_unset,\n        dependency_overrides_provider=self.dependency_overrides_provider,\n    )",
                                "signature": "get_route_handler(self) -> Callable"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class APIRouter:",
                        "functions": [
                            {
                                "code": "def __init__(\n    self,\n    routes: List[routing.BaseRoute] = None,\n    redirect_slashes: bool = True,\n    default: ASGIApp = None,\n    dependency_overrides_provider: Any = None,\n    route_class: Type[APIRoute] = APIRoute,\n    default_response_class: Type[Response] = None,\n    on_startup: Sequence[Callable] = None,\n    on_shutdown: Sequence[Callable] = None,\n) -> None:\n    super().__init__(\n        routes=routes,\n        redirect_slashes=redirect_slashes,\n        default=default,\n        on_startup=on_startup,\n        on_shutdown=on_shutdown,\n    )\n    self.dependency_overrides_provider = dependency_overrides_provider\n    self.route_class = route_class\n    self.default_response_class = default_response_class",
                                "signature": "__init__(self, routes: List[routing.BaseRoute]=None, redirect_slashes: bool=True, default: ASGIApp=None, dependency_overrides_provider: Any=None, route_class: Type[APIRoute]=APIRoute, default_response_class: Type[Response]=None, on_startup: Sequence[Callable]=None, on_shutdown: Sequence[Callable]=None) -> None"
                            },
                            {
                                "code": "def add_api_route(\n    self,\n    path: str,\n    endpoint: Callable,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    methods: Optional[Union[Set[str], List[str]]] = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    route_class_override: Optional[Type[APIRoute]] = None,\n    callbacks: List[APIRoute] = None,\n) -> None:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    route_class = route_class_override or self.route_class\n    route = route_class(\n        path,\n        endpoint=endpoint,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=methods,\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        dependency_overrides_provider=self.dependency_overrides_provider,\n        callbacks=callbacks,\n    )\n    self.routes.append(route)",
                                "signature": "add_api_route(self, path: str, endpoint: Callable) -> None"
                            },
                            {
                                "code": "def api_route(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    methods: List[str] = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n\n    def decorator(func: Callable) -> Callable:\n        self.add_api_route(\n            path,\n            func,\n            response_model=response_model,\n            status_code=status_code,\n            tags=tags or [],\n            dependencies=dependencies,\n            summary=summary,\n            description=description,\n            response_description=response_description,\n            responses=responses or {},\n            deprecated=deprecated,\n            methods=methods,\n            operation_id=operation_id,\n            response_model_include=response_model_include,\n            response_model_exclude=response_model_exclude,\n            response_model_by_alias=response_model_by_alias,\n            response_model_exclude_unset=bool(\n                response_model_exclude_unset or response_model_skip_defaults\n            ),\n            include_in_schema=include_in_schema,\n            response_class=response_class or self.default_response_class,\n            name=name,\n            callbacks=callbacks,\n        )\n        return func\n\n    return decorator",
                                "signature": "api_route(self, path: str) -> Callable"
                            },
                            {
                                "code": "def add_api_websocket_route(\n    self, path: str, endpoint: Callable, name: str = None\n) -> None:\n    route = APIWebSocketRoute(path, endpoint=endpoint, name=name)\n    self.routes.append(route)",
                                "signature": "add_api_websocket_route(self, path: str, endpoint: Callable, name: str=None) -> None"
                            },
                            {
                                "code": "def websocket(self, path: str, name: str = None) -> Callable:\n    def decorator(func: Callable) -> Callable:\n        self.add_api_websocket_route(path, func, name=name)\n        return func\n\n    return decorator",
                                "signature": "websocket(self, path: str, name: str=None) -> Callable"
                            },
                            {
                                "code": "def include_router(\n    self,\n    router: \"APIRouter\",\n    *,\n    prefix: str = \"\",\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    default_response_class: Optional[Type[Response]] = None,\n) -> None:\n    if prefix:\n        assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n        assert not prefix.endswith(\n            \"/\"\n        ), \"A path prefix must not end with '/', as the routes will start with '/'\"\n    else:\n        for r in router.routes:\n            path = getattr(r, \"path\")\n            name = getattr(r, \"name\", \"unknown\")\n            if path is not None and not path:\n                raise Exception(\n                    f\"Prefix and path cannot be both empty (path operation: {name})\"\n                )\n    if responses is None:\n        responses = {}\n    for route in router.routes:\n        if isinstance(route, APIRoute):\n            combined_responses = {**responses, **route.responses}\n            self.add_api_route(\n                prefix + route.path,\n                route.endpoint,\n                response_model=route.response_model,\n                status_code=route.status_code,\n                tags=(route.tags or []) + (tags or []),\n                dependencies=list(dependencies or [])\n                + list(route.dependencies or []),\n                summary=route.summary,\n                description=route.description,\n                response_description=route.response_description,\n                responses=combined_responses,\n                deprecated=route.deprecated,\n                methods=route.methods,\n                operation_id=route.operation_id,\n                response_model_include=route.response_model_include,\n                response_model_exclude=route.response_model_exclude,\n                response_model_by_alias=route.response_model_by_alias,\n                response_model_exclude_unset=route.response_model_exclude_unset,\n                include_in_schema=route.include_in_schema,\n                response_class=route.response_class or default_response_class,\n                name=route.name,\n                route_class_override=type(route),\n                callbacks=route.callbacks,\n            )\n        elif isinstance(route, routing.Route):\n            self.add_route(\n                prefix + route.path,\n                route.endpoint,\n                methods=list(route.methods or []),\n                include_in_schema=route.include_in_schema,\n                name=route.name,\n            )\n        elif isinstance(route, APIWebSocketRoute):\n            self.add_api_websocket_route(\n                prefix + route.path, route.endpoint, name=route.name\n            )\n        elif isinstance(route, routing.WebSocketRoute):\n            self.add_websocket_route(\n                prefix + route.path, route.endpoint, name=route.name\n            )\n    for handler in router.on_startup:\n        self.add_event_handler(\"startup\", handler)\n    for handler in router.on_shutdown:\n        self.add_event_handler(\"shutdown\", handler)",
                                "signature": "include_router(self, router: 'APIRouter') -> None"
                            },
                            {
                                "code": "def get(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"GET\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )",
                                "signature": "get(self, path: str) -> Callable"
                            },
                            {
                                "code": "def put(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"PUT\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )",
                                "signature": "put(self, path: str) -> Callable"
                            },
                            {
                                "code": "def post(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"POST\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )",
                                "signature": "post(self, path: str) -> Callable"
                            },
                            {
                                "code": "def delete(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"DELETE\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )",
                                "signature": "delete(self, path: str) -> Callable"
                            },
                            {
                                "code": "def options(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"OPTIONS\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )",
                                "signature": "options(self, path: str) -> Callable"
                            },
                            {
                                "code": "def head(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"HEAD\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )",
                                "signature": "head(self, path: str) -> Callable"
                            },
                            {
                                "code": "def patch(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"PATCH\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )",
                                "signature": "patch(self, path: str) -> Callable"
                            },
                            {
                                "code": "def trace(\n    self,\n    path: str,\n    *,\n    response_model: Type[Any] = None,\n    status_code: int = 200,\n    tags: List[str] = None,\n    dependencies: Sequence[params.Depends] = None,\n    summary: str = None,\n    description: str = None,\n    response_description: str = \"Successful Response\",\n    responses: Dict[Union[int, str], Dict[str, Any]] = None,\n    deprecated: bool = None,\n    operation_id: str = None,\n    response_model_include: Union[SetIntStr, DictIntStrAny] = None,\n    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n    response_model_by_alias: bool = True,\n    response_model_skip_defaults: bool = None,\n    response_model_exclude_unset: bool = False,\n    include_in_schema: bool = True,\n    response_class: Type[Response] = None,\n    name: str = None,\n    callbacks: List[APIRoute] = None,\n) -> Callable:\n    if response_model_skip_defaults is not None:\n        warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n    return self.api_route(\n        path=path,\n        response_model=response_model,\n        status_code=status_code,\n        tags=tags or [],\n        dependencies=dependencies,\n        summary=summary,\n        description=description,\n        response_description=response_description,\n        responses=responses or {},\n        deprecated=deprecated,\n        methods=[\"TRACE\"],\n        operation_id=operation_id,\n        response_model_include=response_model_include,\n        response_model_exclude=response_model_exclude,\n        response_model_by_alias=response_model_by_alias,\n        response_model_exclude_unset=bool(\n            response_model_exclude_unset or response_model_skip_defaults\n        ),\n        include_in_schema=include_in_schema,\n        response_class=response_class or self.default_response_class,\n        name=name,\n        callbacks=callbacks,\n    )",
                                "signature": "trace(self, path: str) -> Callable"
                            }
                        ]
                    }
                ]
            },
            "variables_in_file": {
                "ImportError": [
                    45
                ],
                "ModelField": [
                    108,
                    302,
                    111,
                    272,
                    53
                ],
                "Any": [
                    775,
                    782,
                    928,
                    673,
                    935,
                    680,
                    426,
                    433,
                    178,
                    54,
                    826,
                    571,
                    60,
                    833,
                    578,
                    203,
                    724,
                    347,
                    731,
                    94,
                    95,
                    224,
                    231,
                    877,
                    622,
                    369,
                    242,
                    116,
                    500,
                    629,
                    884,
                    376
                ],
                "Union": [
                    782,
                    785,
                    786,
                    935,
                    680,
                    938,
                    683,
                    684,
                    939,
                    302,
                    433,
                    437,
                    438,
                    55,
                    56,
                    833,
                    578,
                    836,
                    581,
                    582,
                    837,
                    731,
                    734,
                    735,
                    231,
                    234,
                    236,
                    237,
                    632,
                    112,
                    113,
                    500,
                    629,
                    884,
                    887,
                    376,
                    633,
                    378,
                    888,
                    380,
                    381
                ],
                "SetIntStr": [
                    785,
                    786,
                    938,
                    683,
                    684,
                    939,
                    437,
                    438,
                    55,
                    56,
                    836,
                    581,
                    582,
                    837,
                    734,
                    735,
                    236,
                    237,
                    112,
                    113,
                    888,
                    887,
                    632,
                    633,
                    380,
                    381
                ],
                "DictIntStrAny": [
                    785,
                    786,
                    938,
                    683,
                    684,
                    939,
                    437,
                    438,
                    55,
                    56,
                    836,
                    581,
                    582,
                    837,
                    734,
                    735,
                    236,
                    237,
                    112,
                    113,
                    888,
                    887,
                    632,
                    633,
                    380,
                    381
                ],
                "bool": [
                    384,
                    385,
                    891,
                    892,
                    783,
                    787,
                    660,
                    788,
                    789,
                    790,
                    915,
                    411,
                    936,
                    681,
                    940,
                    685,
                    686,
                    687,
                    688,
                    813,
                    434,
                    941,
                    942,
                    943,
                    439,
                    440,
                    57,
                    58,
                    59,
                    441,
                    442,
                    834,
                    579,
                    838,
                    583,
                    584,
                    585,
                    586,
                    711,
                    839,
                    840,
                    841,
                    966,
                    468,
                    345,
                    732,
                    94,
                    889,
                    736,
                    609,
                    737,
                    738,
                    739,
                    762,
                    864,
                    232,
                    238,
                    239,
                    240,
                    114,
                    115,
                    885,
                    630,
                    890,
                    377,
                    634,
                    635,
                    636,
                    637,
                    382,
                    383
                ],
                "set": [
                    837,
                    582,
                    939,
                    684,
                    237,
                    113,
                    786,
                    888,
                    438,
                    56,
                    633,
                    251,
                    381,
                    735
                ],
                "field": [
                    81,
                    74,
                    61,
                    71
                ],
                "errors": [
                    77,
                    79,
                    80,
                    81,
                    143,
                    144,
                    145,
                    186,
                    187,
                    189,
                    62
                ],
                "exclude_unset": [
                    65,
                    68,
                    87,
                    63
                ],
                "isinstance": [
                    546,
                    292,
                    519,
                    554,
                    76,
                    78,
                    558,
                    151,
                    120,
                    63
                ],
                "response_content": [
                    65,
                    67,
                    71,
                    74,
                    90,
                    63
                ],
                "BaseModel": [
                    63
                ],
                "PYDANTIC_1": [
                    64
                ],
                "response_content.dict": [
                    65,
                    67
                ],
                "is_coroutine": [
                    162,
                    100,
                    70,
                    148,
                    119
                ],
                "value": [
                    73,
                    83,
                    71
                ],
                "errors_": [
                    71,
                    73,
                    76,
                    77,
                    78,
                    79
                ],
                "field.validate": [
                    74,
                    71
                ],
                "run_in_threadpool": [
                    73,
                    103
                ],
                "ErrorWrapper": [
                    76
                ],
                "errors.append": [
                    77
                ],
                "list": [
                    550,
                    78,
                    527,
                    528,
                    280,
                    253
                ],
                "errors.extend": [
                    79
                ],
                "ValidationError": [
                    81
                ],
                "field.type_": [
                    81
                ],
                "jsonable_encoder": [
                    82,
                    90
                ],
                "include": [
                    84
                ],
                "exclude": [
                    85
                ],
                "by_alias": [
                    86
                ],
                "Dependant": [
                    178,
                    107,
                    94
                ],
                "Dict": [
                    833,
                    578,
                    231,
                    680,
                    935,
                    302,
                    782,
                    433,
                    500,
                    629,
                    884,
                    376,
                    731,
                    94
                ],
                "str": [
                    569,
                    573,
                    575,
                    576,
                    577,
                    578,
                    580,
                    588,
                    94,
                    620,
                    624,
                    626,
                    627,
                    628,
                    629,
                    631,
                    639,
                    671,
                    675,
                    677,
                    678,
                    679,
                    680,
                    682,
                    690,
                    199,
                    202,
                    722,
                    726,
                    728,
                    729,
                    730,
                    731,
                    221,
                    733,
                    226,
                    228,
                    741,
                    229,
                    230,
                    231,
                    233,
                    234,
                    235,
                    773,
                    777,
                    779,
                    780,
                    781,
                    782,
                    784,
                    792,
                    302,
                    824,
                    828,
                    830,
                    831,
                    832,
                    833,
                    835,
                    843,
                    875,
                    366,
                    879,
                    881,
                    882,
                    371,
                    883,
                    373,
                    374,
                    375,
                    376,
                    884,
                    378,
                    379,
                    886,
                    894,
                    387,
                    926,
                    930,
                    932,
                    933,
                    934,
                    935,
                    424,
                    937,
                    428,
                    430,
                    431,
                    432,
                    433,
                    945,
                    435,
                    436,
                    444,
                    481,
                    486,
                    497,
                    498,
                    500
                ],
                "dependant.call": [
                    98,
                    101,
                    103,
                    118,
                    119,
                    190,
                    191
                ],
                "dependant": [
                    98,
                    101,
                    103,
                    139,
                    148,
                    118,
                    119,
                    183,
                    190,
                    191
                ],
                "values": [
                    101,
                    103,
                    143,
                    148,
                    186,
                    191
                ],
                "int": [
                    776,
                    782,
                    929,
                    674,
                    935,
                    680,
                    427,
                    302,
                    433,
                    827,
                    572,
                    833,
                    578,
                    725,
                    731,
                    225,
                    231,
                    109,
                    878,
                    623,
                    370,
                    500,
                    629,
                    884,
                    376
                ],
                "Type": [
                    386,
                    388,
                    775,
                    791,
                    928,
                    673,
                    426,
                    944,
                    689,
                    826,
                    571,
                    443,
                    842,
                    587,
                    724,
                    348,
                    349,
                    224,
                    740,
                    877,
                    110,
                    622,
                    241,
                    369,
                    501,
                    893,
                    638
                ],
                "Response": [
                    386,
                    740,
                    842,
                    587,
                    791,
                    893,
                    110,
                    944,
                    241,
                    689,
                    501,
                    151,
                    122,
                    443,
                    349,
                    638
                ],
                "JSONResponse": [
                    331,
                    110
                ],
                "asyncio.iscoroutinefunction": [
                    119
                ],
                "asyncio": [
                    119
                ],
                "is_body_form": [
                    120,
                    126
                ],
                "body_field": [
                    120,
                    125
                ],
                "get_field_info": [
                    120
                ],
                "params.Form": [
                    120
                ],
                "params": [
                    227,
                    676,
                    931,
                    778,
                    429,
                    880,
                    625,
                    499,
                    372,
                    727,
                    120,
                    829,
                    574
                ],
                "Request": [
                    122
                ],
                "body": [
                    131,
                    140,
                    145,
                    124,
                    127
                ],
                "request.form": [
                    127
                ],
                "request": [
                    129,
                    138,
                    131,
                    127
                ],
                "body_bytes": [
                    129,
                    130
                ],
                "request.body": [
                    129
                ],
                "request.json": [
                    131
                ],
                "Exception": [
                    513,
                    132
                ],
                "logger.error": [
                    133
                ],
                "logger": [
                    133
                ],
                "e": [
                    136,
                    133
                ],
                "HTTPException": [
                    134
                ],
                "solved_result": [
                    137,
                    186,
                    181,
                    143
                ],
                "solve_dependencies": [
                    137,
                    181
                ],
                "dependency_overrides_provider": [
                    322,
                    360,
                    141,
                    212,
                    184
                ],
                "background_tasks": [
                    153,
                    167,
                    143
                ],
                "sub_response": [
                    169,
                    170,
                    171,
                    143
                ],
                "_": [
                    186,
                    143
                ],
                "RequestValidationError": [
                    145
                ],
                "raw_response": [
                    147,
                    151,
                    152,
                    153,
                    154,
                    157
                ],
                "run_endpoint_function": [
                    147
                ],
                "raw_response.background": [
                    152,
                    153
                ],
                "response_data": [
                    155,
                    165
                ],
                "serialize_response": [
                    155
                ],
                "response_field": [
                    299,
                    156,
                    300
                ],
                "response_model_include": [
                    963,
                    708,
                    606,
                    810,
                    912,
                    465,
                    657,
                    307,
                    759,
                    408,
                    861,
                    158
                ],
                "response_model_exclude": [
                    159,
                    964,
                    709,
                    811,
                    913,
                    466,
                    658,
                    308,
                    760,
                    409,
                    862,
                    607
                ],
                "response_model_by_alias": [
                    160,
                    608,
                    965,
                    710,
                    812,
                    914,
                    467,
                    659,
                    309,
                    761,
                    410,
                    863
                ],
                "response_model_exclude_unset": [
                    161,
                    610,
                    865,
                    967,
                    712,
                    814,
                    916,
                    469,
                    310,
                    661,
                    763,
                    412
                ],
                "response": [
                    291,
                    164,
                    292,
                    293,
                    169,
                    171,
                    172
                ],
                "response_class": [
                    164,
                    613,
                    868,
                    472,
                    970,
                    715,
                    664,
                    817,
                    919,
                    312,
                    766,
                    415
                ],
                "status_code": [
                    800,
                    258,
                    259,
                    166,
                    455,
                    647,
                    902,
                    749,
                    398,
                    851,
                    596,
                    277,
                    953,
                    698
                ],
                "response.headers.raw.extend": [
                    169
                ],
                "response.headers.raw": [
                    169
                ],
                "response.headers": [
                    169
                ],
                "sub_response.headers.raw": [
                    169
                ],
                "sub_response.headers": [
                    169
                ],
                "sub_response.status_code": [
                    170,
                    171
                ],
                "response.status_code": [
                    171
                ],
                "app": [
                    193,
                    174
                ],
                "Callable": [
                    896,
                    641,
                    794,
                    179,
                    692,
                    947,
                    446,
                    450,
                    326,
                    200,
                    845,
                    590,
                    350,
                    222,
                    351,
                    481,
                    486,
                    487,
                    743,
                    367,
                    117
                ],
                "WebSocket": [
                    180
                ],
                "websocket": [
                    188,
                    182
                ],
                "_2": [
                    186
                ],
                "_3": [
                    186
                ],
                "websocket.close": [
                    188
                ],
                "WS_1008_POLICY_VIOLATION": [
                    188
                ],
                "WebSocketRequestValidationError": [
                    189
                ],
                "routing.WebSocketRoute": [
                    196,
                    558
                ],
                "routing": [
                    546,
                    196,
                    558,
                    341,
                    344,
                    218
                ],
                "self.path": [
                    245,
                    205
                ],
                "self": [
                    521,
                    547,
                    555,
                    559,
                    563,
                    565,
                    593,
                    613,
                    644,
                    664,
                    695,
                    715,
                    205,
                    206,
                    207,
                    208,
                    209,
                    211,
                    215,
                    746,
                    245,
                    246,
                    247,
                    248,
                    251,
                    252,
                    253,
                    766,
                    255,
                    256,
                    260,
                    261,
                    262,
                    271,
                    273,
                    275,
                    276,
                    277,
                    278,
                    280,
                    282,
                    283,
                    284,
                    797,
                    287,
                    288,
                    289,
                    291,
                    298,
                    302,
                    304,
                    305,
                    306,
                    307,
                    308,
                    309,
                    310,
                    311,
                    312,
                    817,
                    315,
                    316,
                    317,
                    319,
                    321,
                    322,
                    323,
                    324,
                    328,
                    329,
                    330,
                    331,
                    332,
                    333,
                    334,
                    335,
                    336,
                    337,
                    848,
                    868,
                    360,
                    361,
                    362,
                    899,
                    393,
                    919,
                    415,
                    417,
                    420,
                    950,
                    451,
                    970,
                    472,
                    484,
                    488
                ],
                "path": [
                    512,
                    900,
                    645,
                    395,
                    798,
                    951,
                    696,
                    452,
                    205,
                    208,
                    849,
                    594,
                    215,
                    483,
                    488,
                    747,
                    245,
                    248,
                    510
                ],
                "self.endpoint": [
                    206,
                    208,
                    246,
                    315,
                    284
                ],
                "endpoint": [
                    483,
                    396,
                    206,
                    207,
                    246,
                    247,
                    314
                ],
                "self.name": [
                    247,
                    253,
                    207
                ],
                "name": [
                    416,
                    514,
                    483,
                    869,
                    614,
                    488,
                    971,
                    716,
                    207,
                    665,
                    767,
                    818,
                    247,
                    920,
                    473,
                    511
                ],
                "get_name": [
                    247,
                    207
                ],
                "self.dependant": [
                    321,
                    328,
                    208,
                    211,
                    315,
                    317
                ],
                "get_dependant": [
                    208,
                    315
                ],
                "self.app": [
                    209,
                    324
                ],
                "websocket_session": [
                    209
                ],
                "get_websocket_app": [
                    210
                ],
                "self.path_regex": [
                    248,
                    215
                ],
                "self.path_format": [
                    215,
                    248,
                    315,
                    253,
                    319
                ],
                "self.param_convertors": [
                    248,
                    215
                ],
                "compile_path": [
                    248,
                    215
                ],
                "routing.Route": [
                    218,
                    546
                ],
                "List": [
                    640,
                    389,
                    777,
                    793,
                    930,
                    675,
                    428,
                    946,
                    435,
                    691,
                    828,
                    573,
                    445,
                    844,
                    589,
                    726,
                    344,
                    226,
                    742,
                    234,
                    879,
                    624,
                    498,
                    371,
                    243,
                    378,
                    895
                ],
                "Sequence": [
                    227,
                    676,
                    931,
                    574,
                    778,
                    429,
                    880,
                    625,
                    499,
                    372,
                    727,
                    829,
                    350,
                    351
                ],
                "params.Depends": [
                    227,
                    676,
                    931,
                    778,
                    429,
                    880,
                    625,
                    499,
                    372,
                    727,
                    829,
                    574
                ],
                "Optional": [
                    388,
                    234,
                    271,
                    241,
                    243,
                    501,
                    378
                ],
                "Set": [
                    234,
                    378
                ],
                "methods": [
                    463,
                    406,
                    249,
                    250,
                    251,
                    253
                ],
                "self.methods": [
                    251
                ],
                "method.upper": [
                    251
                ],
                "method": [
                    251
                ],
                "self.unique_id": [
                    321,
                    298,
                    252,
                    260
                ],
                "generate_operation_id_for_path": [
                    252
                ],
                "self.response_model": [
                    256,
                    262,
                    255
                ],
                "response_model": [
                    901,
                    646,
                    454,
                    748,
                    397,
                    850,
                    595,
                    799,
                    952,
                    697,
                    255
                ],
                "STATUS_CODES_WITH_NO_BODY": [
                    296,
                    258
                ],
                "response_name": [
                    298,
                    299,
                    260,
                    262
                ],
                "self.response_field": [
                    273,
                    275,
                    261
                ],
                "create_response_field": [
                    299,
                    261
                ],
                "self.secure_cloned_response_field": [
                    276,
                    332,
                    271
                ],
                "create_cloned_field": [
                    273
                ],
                "self.status_code": [
                    330,
                    277
                ],
                "self.tags": [
                    278
                ],
                "tags": [
                    801,
                    903,
                    456,
                    648,
                    526,
                    399,
                    750,
                    852,
                    597,
                    278,
                    954,
                    699
                ],
                "dependencies": [
                    802,
                    904,
                    457,
                    649,
                    527,
                    400,
                    751,
                    853,
                    598,
                    279,
                    280,
                    955,
                    700
                ],
                "self.dependencies": [
                    280,
                    282,
                    316
                ],
                "self.summary": [
                    283
                ],
                "summary": [
                    803,
                    905,
                    458,
                    650,
                    752,
                    401,
                    854,
                    599,
                    283,
                    956,
                    701
                ],
                "self.description": [
                    284,
                    287
                ],
                "description": [
                    804,
                    906,
                    459,
                    651,
                    753,
                    402,
                    855,
                    600,
                    284,
                    957,
                    702
                ],
                "inspect.cleandoc": [
                    284
                ],
                "inspect": [
                    284
                ],
                "self.endpoint.__doc__": [
                    284
                ],
                "self.description.split": [
                    287
                ],
                "self.response_description": [
                    288
                ],
                "response_description": [
                    288,
                    805,
                    907,
                    460,
                    652,
                    754,
                    403,
                    856,
                    601,
                    958,
                    703
                ],
                "self.responses": [
                    289,
                    291
                ],
                "responses": [
                    704,
                    289,
                    516,
                    517,
                    806,
                    520,
                    908,
                    461,
                    653,
                    755,
                    404,
                    857,
                    602,
                    959
                ],
                "response_fields": [
                    290,
                    300,
                    301,
                    302
                ],
                "additional_status_code": [
                    291,
                    296,
                    297,
                    298,
                    300
                ],
                "self.responses.items": [
                    291
                ],
                "dict": [
                    292
                ],
                "model": [
                    299,
                    293,
                    294
                ],
                "response.get": [
                    293
                ],
                "self.response_fields": [
                    304,
                    302
                ],
                "self.deprecated": [
                    305
                ],
                "deprecated": [
                    960,
                    705,
                    807,
                    909,
                    654,
                    462,
                    305,
                    756,
                    405,
                    858,
                    603
                ],
                "self.operation_id": [
                    306
                ],
                "operation_id": [
                    962,
                    707,
                    809,
                    911,
                    464,
                    656,
                    306,
                    758,
                    407,
                    860,
                    605
                ],
                "self.response_model_include": [
                    307,
                    333
                ],
                "self.response_model_exclude": [
                    308,
                    334
                ],
                "self.response_model_by_alias": [
                    309,
                    335
                ],
                "self.response_model_exclude_unset": [
                    336,
                    310
                ],
                "self.include_in_schema": [
                    311
                ],
                "include_in_schema": [
                    471,
                    867,
                    612,
                    765,
                    714,
                    969,
                    816,
                    918,
                    663,
                    311,
                    414
                ],
                "self.response_class": [
                    312,
                    331
                ],
                "callable": [
                    314
                ],
                "depends": [
                    316,
                    319
                ],
                "self.dependant.dependencies.insert": [
                    317
                ],
                "self.dependant.dependencies": [
                    317
                ],
                "get_parameterless_sub_dependant": [
                    319
                ],
                "self.body_field": [
                    329,
                    321
                ],
                "get_body_field": [
                    321
                ],
                "self.dependency_overrides_provider": [
                    360,
                    337,
                    322,
                    417
                ],
                "self.callbacks": [
                    323
                ],
                "callbacks": [
                    768,
                    418,
                    323,
                    870,
                    615,
                    972,
                    717,
                    819,
                    666,
                    921,
                    474
                ],
                "request_response": [
                    324
                ],
                "self.get_route_handler": [
                    324
                ],
                "get_request_handler": [
                    327
                ],
                "routing.Router": [
                    341
                ],
                "routing.BaseRoute": [
                    344
                ],
                "ASGIApp": [
                    346
                ],
                "APIRoute": [
                    640,
                    388,
                    389,
                    742,
                    519,
                    844,
                    589,
                    946,
                    691,
                    793,
                    348,
                    445,
                    895
                ],
                "__init__": [
                    353
                ],
                "super": [
                    353
                ],
                "routes": [
                    354
                ],
                "redirect_slashes": [
                    355
                ],
                "default": [
                    356
                ],
                "on_startup": [
                    357
                ],
                "on_shutdown": [
                    358
                ],
                "self.route_class": [
                    361,
                    393
                ],
                "route_class": [
                    361,
                    393,
                    394
                ],
                "self.default_response_class": [
                    868,
                    613,
                    362,
                    715,
                    970,
                    664,
                    817,
                    919,
                    472,
                    766,
                    415
                ],
                "default_response_class": [
                    362,
                    541
                ],
                "response_model_skip_defaults": [
                    897,
                    642,
                    391,
                    916,
                    661,
                    795,
                    412,
                    814,
                    948,
                    693,
                    447,
                    967,
                    712,
                    846,
                    591,
                    469,
                    865,
                    610,
                    744,
                    763
                ],
                "warning_response_model_skip_defaults_deprecated": [
                    448,
                    898,
                    643,
                    392,
                    745,
                    847,
                    592,
                    949,
                    694,
                    796
                ],
                "route_class_override": [
                    393
                ],
                "route": [
                    518,
                    519,
                    520,
                    394,
                    522,
                    523,
                    524,
                    525,
                    526,
                    528,
                    529,
                    530,
                    531,
                    533,
                    534,
                    535,
                    536,
                    537,
                    538,
                    539,
                    540,
                    541,
                    542,
                    543,
                    544,
                    546,
                    420,
                    548,
                    549,
                    550,
                    551,
                    552,
                    554,
                    556,
                    558,
                    560,
                    483,
                    484
                ],
                "self.routes.append": [
                    420,
                    484
                ],
                "self.routes": [
                    420,
                    484
                ],
                "self.add_api_route": [
                    521,
                    451
                ],
                "func": [
                    488,
                    489,
                    476,
                    453
                ],
                "decorator": [
                    491,
                    478
                ],
                "APIWebSocketRoute": [
                    554,
                    483
                ],
                "self.add_api_websocket_route": [
                    488,
                    555
                ],
                "prefix": [
                    548,
                    522,
                    556,
                    560,
                    503,
                    504,
                    505
                ],
                "prefix.startswith": [
                    504
                ],
                "prefix.endswith": [
                    505
                ],
                "r": [
                    509,
                    510,
                    511
                ],
                "router.routes": [
                    509,
                    518
                ],
                "router": [
                    562,
                    564,
                    509,
                    518
                ],
                "getattr": [
                    510,
                    511
                ],
                "combined_responses": [
                    520,
                    532
                ],
                "route.responses": [
                    520
                ],
                "route.path": [
                    560,
                    522,
                    548,
                    556
                ],
                "route.endpoint": [
                    560,
                    523,
                    556,
                    549
                ],
                "route.response_model": [
                    524
                ],
                "route.status_code": [
                    525
                ],
                "route.tags": [
                    526
                ],
                "route.dependencies": [
                    528
                ],
                "route.summary": [
                    529
                ],
                "route.description": [
                    530
                ],
                "route.response_description": [
                    531
                ],
                "route.deprecated": [
                    533
                ],
                "route.methods": [
                    550,
                    534
                ],
                "route.operation_id": [
                    535
                ],
                "route.response_model_include": [
                    536
                ],
                "route.response_model_exclude": [
                    537
                ],
                "route.response_model_by_alias": [
                    538
                ],
                "route.response_model_exclude_unset": [
                    539
                ],
                "route.include_in_schema": [
                    540,
                    551
                ],
                "route.response_class": [
                    541
                ],
                "route.name": [
                    552,
                    560,
                    556,
                    542
                ],
                "type": [
                    543
                ],
                "route.callbacks": [
                    544
                ],
                "self.add_route": [
                    547
                ],
                "self.add_websocket_route": [
                    559
                ],
                "handler": [
                    562,
                    563,
                    564,
                    565
                ],
                "router.on_startup": [
                    562
                ],
                "self.add_event_handler": [
                    563,
                    565
                ],
                "router.on_shutdown": [
                    564
                ],
                "self.api_route": [
                    899,
                    644,
                    746,
                    848,
                    593,
                    950,
                    695,
                    797
                ]
            },
            "filtered_variables_in_file": {
                "ModelField": [
                    108,
                    302,
                    111,
                    272,
                    53
                ],
                "Any": [
                    775,
                    782,
                    928,
                    673,
                    935,
                    680,
                    426,
                    433,
                    178,
                    54,
                    826,
                    571,
                    60,
                    833,
                    578,
                    203,
                    724,
                    347,
                    731,
                    94,
                    95,
                    224,
                    231,
                    877,
                    622,
                    369,
                    242,
                    116,
                    500,
                    629,
                    884,
                    376
                ],
                "Union": [
                    782,
                    785,
                    786,
                    935,
                    680,
                    938,
                    683,
                    684,
                    939,
                    302,
                    433,
                    437,
                    438,
                    55,
                    56,
                    833,
                    578,
                    836,
                    581,
                    582,
                    837,
                    731,
                    734,
                    735,
                    231,
                    234,
                    236,
                    237,
                    632,
                    112,
                    113,
                    500,
                    629,
                    884,
                    887,
                    376,
                    633,
                    378,
                    888,
                    380,
                    381
                ],
                "SetIntStr": [
                    785,
                    786,
                    938,
                    683,
                    684,
                    939,
                    437,
                    438,
                    55,
                    56,
                    836,
                    581,
                    582,
                    837,
                    734,
                    735,
                    236,
                    237,
                    112,
                    113,
                    888,
                    887,
                    632,
                    633,
                    380,
                    381
                ],
                "DictIntStrAny": [
                    785,
                    786,
                    938,
                    683,
                    684,
                    939,
                    437,
                    438,
                    55,
                    56,
                    836,
                    581,
                    582,
                    837,
                    734,
                    735,
                    236,
                    237,
                    112,
                    113,
                    888,
                    887,
                    632,
                    633,
                    380,
                    381
                ],
                "field": [
                    81,
                    74,
                    61,
                    71
                ],
                "errors": [
                    77,
                    79,
                    80,
                    81,
                    143,
                    144,
                    145,
                    186,
                    187,
                    189,
                    62
                ],
                "exclude_unset": [
                    65,
                    68,
                    87,
                    63
                ],
                "response_content": [
                    65,
                    67,
                    71,
                    74,
                    90,
                    63
                ],
                "BaseModel": [
                    63
                ],
                "PYDANTIC_1": [
                    64
                ],
                "response_content.dict": [
                    65,
                    67
                ],
                "is_coroutine": [
                    162,
                    100,
                    70,
                    148,
                    119
                ],
                "value": [
                    73,
                    83,
                    71
                ],
                "errors_": [
                    71,
                    73,
                    76,
                    77,
                    78,
                    79
                ],
                "field.validate": [
                    74,
                    71
                ],
                "run_in_threadpool": [
                    73,
                    103
                ],
                "ErrorWrapper": [
                    76
                ],
                "errors.append": [
                    77
                ],
                "errors.extend": [
                    79
                ],
                "ValidationError": [
                    81
                ],
                "field.type_": [
                    81
                ],
                "jsonable_encoder": [
                    82,
                    90
                ],
                "include": [
                    84
                ],
                "exclude": [
                    85
                ],
                "by_alias": [
                    86
                ],
                "Dependant": [
                    178,
                    107,
                    94
                ],
                "Dict": [
                    833,
                    578,
                    231,
                    680,
                    935,
                    302,
                    782,
                    433,
                    500,
                    629,
                    884,
                    376,
                    731,
                    94
                ],
                "dependant.call": [
                    98,
                    101,
                    103,
                    118,
                    119,
                    190,
                    191
                ],
                "dependant": [
                    98,
                    101,
                    103,
                    139,
                    148,
                    118,
                    119,
                    183,
                    190,
                    191
                ],
                "values": [
                    101,
                    103,
                    143,
                    148,
                    186,
                    191
                ],
                "Type": [
                    386,
                    388,
                    775,
                    791,
                    928,
                    673,
                    426,
                    944,
                    689,
                    826,
                    571,
                    443,
                    842,
                    587,
                    724,
                    348,
                    349,
                    224,
                    740,
                    877,
                    110,
                    622,
                    241,
                    369,
                    501,
                    893,
                    638
                ],
                "Response": [
                    386,
                    740,
                    842,
                    587,
                    791,
                    893,
                    110,
                    944,
                    241,
                    689,
                    501,
                    151,
                    122,
                    443,
                    349,
                    638
                ],
                "JSONResponse": [
                    331,
                    110
                ],
                "asyncio.iscoroutinefunction": [
                    119
                ],
                "asyncio": [
                    119
                ],
                "is_body_form": [
                    120,
                    126
                ],
                "body_field": [
                    120,
                    125
                ],
                "get_field_info": [
                    120
                ],
                "params.Form": [
                    120
                ],
                "params": [
                    227,
                    676,
                    931,
                    778,
                    429,
                    880,
                    625,
                    499,
                    372,
                    727,
                    120,
                    829,
                    574
                ],
                "Request": [
                    122
                ],
                "body": [
                    131,
                    140,
                    145,
                    124,
                    127
                ],
                "request.form": [
                    127
                ],
                "request": [
                    129,
                    138,
                    131,
                    127
                ],
                "body_bytes": [
                    129,
                    130
                ],
                "request.body": [
                    129
                ],
                "request.json": [
                    131
                ],
                "logger.error": [
                    133
                ],
                "logger": [
                    133
                ],
                "e": [
                    136,
                    133
                ],
                "HTTPException": [
                    134
                ],
                "solved_result": [
                    137,
                    186,
                    181,
                    143
                ],
                "solve_dependencies": [
                    137,
                    181
                ],
                "dependency_overrides_provider": [
                    322,
                    360,
                    141,
                    212,
                    184
                ],
                "background_tasks": [
                    153,
                    167,
                    143
                ],
                "sub_response": [
                    169,
                    170,
                    171,
                    143
                ],
                "_": [
                    186,
                    143
                ],
                "RequestValidationError": [
                    145
                ],
                "raw_response": [
                    147,
                    151,
                    152,
                    153,
                    154,
                    157
                ],
                "run_endpoint_function": [
                    147
                ],
                "raw_response.background": [
                    152,
                    153
                ],
                "response_data": [
                    155,
                    165
                ],
                "serialize_response": [
                    155
                ],
                "response_field": [
                    299,
                    156,
                    300
                ],
                "response_model_include": [
                    963,
                    708,
                    606,
                    810,
                    912,
                    465,
                    657,
                    307,
                    759,
                    408,
                    861,
                    158
                ],
                "response_model_exclude": [
                    159,
                    964,
                    709,
                    811,
                    913,
                    466,
                    658,
                    308,
                    760,
                    409,
                    862,
                    607
                ],
                "response_model_by_alias": [
                    160,
                    608,
                    965,
                    710,
                    812,
                    914,
                    467,
                    659,
                    309,
                    761,
                    410,
                    863
                ],
                "response_model_exclude_unset": [
                    161,
                    610,
                    865,
                    967,
                    712,
                    814,
                    916,
                    469,
                    310,
                    661,
                    763,
                    412
                ],
                "response": [
                    291,
                    164,
                    292,
                    293,
                    169,
                    171,
                    172
                ],
                "response_class": [
                    164,
                    613,
                    868,
                    472,
                    970,
                    715,
                    664,
                    817,
                    919,
                    312,
                    766,
                    415
                ],
                "status_code": [
                    800,
                    258,
                    259,
                    166,
                    455,
                    647,
                    902,
                    749,
                    398,
                    851,
                    596,
                    277,
                    953,
                    698
                ],
                "response.headers.raw.extend": [
                    169
                ],
                "response.headers.raw": [
                    169
                ],
                "response.headers": [
                    169
                ],
                "sub_response.headers.raw": [
                    169
                ],
                "sub_response.headers": [
                    169
                ],
                "sub_response.status_code": [
                    170,
                    171
                ],
                "response.status_code": [
                    171
                ],
                "app": [
                    193,
                    174
                ],
                "Callable": [
                    896,
                    641,
                    794,
                    179,
                    692,
                    947,
                    446,
                    450,
                    326,
                    200,
                    845,
                    590,
                    350,
                    222,
                    351,
                    481,
                    486,
                    487,
                    743,
                    367,
                    117
                ],
                "WebSocket": [
                    180
                ],
                "websocket": [
                    188,
                    182
                ],
                "_2": [
                    186
                ],
                "_3": [
                    186
                ],
                "websocket.close": [
                    188
                ],
                "WS_1008_POLICY_VIOLATION": [
                    188
                ],
                "WebSocketRequestValidationError": [
                    189
                ],
                "routing.WebSocketRoute": [
                    196,
                    558
                ],
                "routing": [
                    546,
                    196,
                    558,
                    341,
                    344,
                    218
                ],
                "self.path": [
                    245,
                    205
                ],
                "self": [
                    521,
                    547,
                    555,
                    559,
                    563,
                    565,
                    593,
                    613,
                    644,
                    664,
                    695,
                    715,
                    205,
                    206,
                    207,
                    208,
                    209,
                    211,
                    215,
                    746,
                    245,
                    246,
                    247,
                    248,
                    251,
                    252,
                    253,
                    766,
                    255,
                    256,
                    260,
                    261,
                    262,
                    271,
                    273,
                    275,
                    276,
                    277,
                    278,
                    280,
                    282,
                    283,
                    284,
                    797,
                    287,
                    288,
                    289,
                    291,
                    298,
                    302,
                    304,
                    305,
                    306,
                    307,
                    308,
                    309,
                    310,
                    311,
                    312,
                    817,
                    315,
                    316,
                    317,
                    319,
                    321,
                    322,
                    323,
                    324,
                    328,
                    329,
                    330,
                    331,
                    332,
                    333,
                    334,
                    335,
                    336,
                    337,
                    848,
                    868,
                    360,
                    361,
                    362,
                    899,
                    393,
                    919,
                    415,
                    417,
                    420,
                    950,
                    451,
                    970,
                    472,
                    484,
                    488
                ],
                "path": [
                    512,
                    900,
                    645,
                    395,
                    798,
                    951,
                    696,
                    452,
                    205,
                    208,
                    849,
                    594,
                    215,
                    483,
                    488,
                    747,
                    245,
                    248,
                    510
                ],
                "self.endpoint": [
                    206,
                    208,
                    246,
                    315,
                    284
                ],
                "endpoint": [
                    483,
                    396,
                    206,
                    207,
                    246,
                    247,
                    314
                ],
                "self.name": [
                    247,
                    253,
                    207
                ],
                "name": [
                    416,
                    514,
                    483,
                    869,
                    614,
                    488,
                    971,
                    716,
                    207,
                    665,
                    767,
                    818,
                    247,
                    920,
                    473,
                    511
                ],
                "get_name": [
                    247,
                    207
                ],
                "self.dependant": [
                    321,
                    328,
                    208,
                    211,
                    315,
                    317
                ],
                "get_dependant": [
                    208,
                    315
                ],
                "self.app": [
                    209,
                    324
                ],
                "websocket_session": [
                    209
                ],
                "get_websocket_app": [
                    210
                ],
                "self.path_regex": [
                    248,
                    215
                ],
                "self.path_format": [
                    215,
                    248,
                    315,
                    253,
                    319
                ],
                "self.param_convertors": [
                    248,
                    215
                ],
                "compile_path": [
                    248,
                    215
                ],
                "routing.Route": [
                    218,
                    546
                ],
                "List": [
                    640,
                    389,
                    777,
                    793,
                    930,
                    675,
                    428,
                    946,
                    435,
                    691,
                    828,
                    573,
                    445,
                    844,
                    589,
                    726,
                    344,
                    226,
                    742,
                    234,
                    879,
                    624,
                    498,
                    371,
                    243,
                    378,
                    895
                ],
                "Sequence": [
                    227,
                    676,
                    931,
                    574,
                    778,
                    429,
                    880,
                    625,
                    499,
                    372,
                    727,
                    829,
                    350,
                    351
                ],
                "params.Depends": [
                    227,
                    676,
                    931,
                    778,
                    429,
                    880,
                    625,
                    499,
                    372,
                    727,
                    829,
                    574
                ],
                "Optional": [
                    388,
                    234,
                    271,
                    241,
                    243,
                    501,
                    378
                ],
                "Set": [
                    234,
                    378
                ],
                "methods": [
                    463,
                    406,
                    249,
                    250,
                    251,
                    253
                ],
                "self.methods": [
                    251
                ],
                "method.upper": [
                    251
                ],
                "method": [
                    251
                ],
                "self.unique_id": [
                    321,
                    298,
                    252,
                    260
                ],
                "generate_operation_id_for_path": [
                    252
                ],
                "self.response_model": [
                    256,
                    262,
                    255
                ],
                "response_model": [
                    901,
                    646,
                    454,
                    748,
                    397,
                    850,
                    595,
                    799,
                    952,
                    697,
                    255
                ],
                "STATUS_CODES_WITH_NO_BODY": [
                    296,
                    258
                ],
                "response_name": [
                    298,
                    299,
                    260,
                    262
                ],
                "self.response_field": [
                    273,
                    275,
                    261
                ],
                "create_response_field": [
                    299,
                    261
                ],
                "self.secure_cloned_response_field": [
                    276,
                    332,
                    271
                ],
                "create_cloned_field": [
                    273
                ],
                "self.status_code": [
                    330,
                    277
                ],
                "self.tags": [
                    278
                ],
                "tags": [
                    801,
                    903,
                    456,
                    648,
                    526,
                    399,
                    750,
                    852,
                    597,
                    278,
                    954,
                    699
                ],
                "dependencies": [
                    802,
                    904,
                    457,
                    649,
                    527,
                    400,
                    751,
                    853,
                    598,
                    279,
                    280,
                    955,
                    700
                ],
                "self.dependencies": [
                    280,
                    282,
                    316
                ],
                "self.summary": [
                    283
                ],
                "summary": [
                    803,
                    905,
                    458,
                    650,
                    752,
                    401,
                    854,
                    599,
                    283,
                    956,
                    701
                ],
                "self.description": [
                    284,
                    287
                ],
                "description": [
                    804,
                    906,
                    459,
                    651,
                    753,
                    402,
                    855,
                    600,
                    284,
                    957,
                    702
                ],
                "inspect.cleandoc": [
                    284
                ],
                "inspect": [
                    284
                ],
                "self.endpoint.__doc__": [
                    284
                ],
                "self.description.split": [
                    287
                ],
                "self.response_description": [
                    288
                ],
                "response_description": [
                    288,
                    805,
                    907,
                    460,
                    652,
                    754,
                    403,
                    856,
                    601,
                    958,
                    703
                ],
                "self.responses": [
                    289,
                    291
                ],
                "responses": [
                    704,
                    289,
                    516,
                    517,
                    806,
                    520,
                    908,
                    461,
                    653,
                    755,
                    404,
                    857,
                    602,
                    959
                ],
                "response_fields": [
                    290,
                    300,
                    301,
                    302
                ],
                "additional_status_code": [
                    291,
                    296,
                    297,
                    298,
                    300
                ],
                "self.responses.items": [
                    291
                ],
                "model": [
                    299,
                    293,
                    294
                ],
                "response.get": [
                    293
                ],
                "self.response_fields": [
                    304,
                    302
                ],
                "self.deprecated": [
                    305
                ],
                "deprecated": [
                    960,
                    705,
                    807,
                    909,
                    654,
                    462,
                    305,
                    756,
                    405,
                    858,
                    603
                ],
                "self.operation_id": [
                    306
                ],
                "operation_id": [
                    962,
                    707,
                    809,
                    911,
                    464,
                    656,
                    306,
                    758,
                    407,
                    860,
                    605
                ],
                "self.response_model_include": [
                    307,
                    333
                ],
                "self.response_model_exclude": [
                    308,
                    334
                ],
                "self.response_model_by_alias": [
                    309,
                    335
                ],
                "self.response_model_exclude_unset": [
                    336,
                    310
                ],
                "self.include_in_schema": [
                    311
                ],
                "include_in_schema": [
                    471,
                    867,
                    612,
                    765,
                    714,
                    969,
                    816,
                    918,
                    663,
                    311,
                    414
                ],
                "self.response_class": [
                    312,
                    331
                ],
                "depends": [
                    316,
                    319
                ],
                "self.dependant.dependencies.insert": [
                    317
                ],
                "self.dependant.dependencies": [
                    317
                ],
                "get_parameterless_sub_dependant": [
                    319
                ],
                "self.body_field": [
                    329,
                    321
                ],
                "get_body_field": [
                    321
                ],
                "self.dependency_overrides_provider": [
                    360,
                    337,
                    322,
                    417
                ],
                "self.callbacks": [
                    323
                ],
                "callbacks": [
                    768,
                    418,
                    323,
                    870,
                    615,
                    972,
                    717,
                    819,
                    666,
                    921,
                    474
                ],
                "request_response": [
                    324
                ],
                "self.get_route_handler": [
                    324
                ],
                "get_request_handler": [
                    327
                ],
                "routing.Router": [
                    341
                ],
                "routing.BaseRoute": [
                    344
                ],
                "ASGIApp": [
                    346
                ],
                "APIRoute": [
                    640,
                    388,
                    389,
                    742,
                    519,
                    844,
                    589,
                    946,
                    691,
                    793,
                    348,
                    445,
                    895
                ],
                "__init__": [
                    353
                ],
                "routes": [
                    354
                ],
                "redirect_slashes": [
                    355
                ],
                "default": [
                    356
                ],
                "on_startup": [
                    357
                ],
                "on_shutdown": [
                    358
                ],
                "self.route_class": [
                    361,
                    393
                ],
                "route_class": [
                    361,
                    393,
                    394
                ],
                "self.default_response_class": [
                    868,
                    613,
                    362,
                    715,
                    970,
                    664,
                    817,
                    919,
                    472,
                    766,
                    415
                ],
                "default_response_class": [
                    362,
                    541
                ],
                "response_model_skip_defaults": [
                    897,
                    642,
                    391,
                    916,
                    661,
                    795,
                    412,
                    814,
                    948,
                    693,
                    447,
                    967,
                    712,
                    846,
                    591,
                    469,
                    865,
                    610,
                    744,
                    763
                ],
                "warning_response_model_skip_defaults_deprecated": [
                    448,
                    898,
                    643,
                    392,
                    745,
                    847,
                    592,
                    949,
                    694,
                    796
                ],
                "route_class_override": [
                    393
                ],
                "route": [
                    518,
                    519,
                    520,
                    394,
                    522,
                    523,
                    524,
                    525,
                    526,
                    528,
                    529,
                    530,
                    531,
                    533,
                    534,
                    535,
                    536,
                    537,
                    538,
                    539,
                    540,
                    541,
                    542,
                    543,
                    544,
                    546,
                    420,
                    548,
                    549,
                    550,
                    551,
                    552,
                    554,
                    556,
                    558,
                    560,
                    483,
                    484
                ],
                "self.routes.append": [
                    420,
                    484
                ],
                "self.routes": [
                    420,
                    484
                ],
                "self.add_api_route": [
                    521,
                    451
                ],
                "func": [
                    488,
                    489,
                    476,
                    453
                ],
                "decorator": [
                    491,
                    478
                ],
                "APIWebSocketRoute": [
                    554,
                    483
                ],
                "self.add_api_websocket_route": [
                    488,
                    555
                ],
                "prefix": [
                    548,
                    522,
                    556,
                    560,
                    503,
                    504,
                    505
                ],
                "prefix.startswith": [
                    504
                ],
                "prefix.endswith": [
                    505
                ],
                "r": [
                    509,
                    510,
                    511
                ],
                "router.routes": [
                    509,
                    518
                ],
                "router": [
                    562,
                    564,
                    509,
                    518
                ],
                "combined_responses": [
                    520,
                    532
                ],
                "route.responses": [
                    520
                ],
                "route.path": [
                    560,
                    522,
                    548,
                    556
                ],
                "route.endpoint": [
                    560,
                    523,
                    556,
                    549
                ],
                "route.response_model": [
                    524
                ],
                "route.status_code": [
                    525
                ],
                "route.tags": [
                    526
                ],
                "route.dependencies": [
                    528
                ],
                "route.summary": [
                    529
                ],
                "route.description": [
                    530
                ],
                "route.response_description": [
                    531
                ],
                "route.deprecated": [
                    533
                ],
                "route.methods": [
                    550,
                    534
                ],
                "route.operation_id": [
                    535
                ],
                "route.response_model_include": [
                    536
                ],
                "route.response_model_exclude": [
                    537
                ],
                "route.response_model_by_alias": [
                    538
                ],
                "route.response_model_exclude_unset": [
                    539
                ],
                "route.include_in_schema": [
                    540,
                    551
                ],
                "route.response_class": [
                    541
                ],
                "route.name": [
                    552,
                    560,
                    556,
                    542
                ],
                "route.callbacks": [
                    544
                ],
                "self.add_route": [
                    547
                ],
                "self.add_websocket_route": [
                    559
                ],
                "handler": [
                    562,
                    563,
                    564,
                    565
                ],
                "router.on_startup": [
                    562
                ],
                "self.add_event_handler": [
                    563,
                    565
                ],
                "router.on_shutdown": [
                    564
                ],
                "self.api_route": [
                    899,
                    644,
                    746,
                    848,
                    593,
                    950,
                    695,
                    797
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/fastapi_3/tests/test_serialize_response_model.py",
                "test_function": "test_valid",
                "test_function_code": "def test_valid():\n    response = client.get(\"/items/valid\")\n    response.raise_for_status()\n    assert response.json() == {\"aliased_name\": \"valid\", \"price\": 1.0, \"owner_ids\": None}",
                "test_error": "pydantic.error_wrappers.ValidationError: 1 validation error for Item response -> aliased_name   field required (type=value_error.missing)",
                "full_test_error": "def test_valid():\n>       response = client.get(\"/items/valid\")\n\ntests/test_serialize_response_model.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:543: in get\n    return self.request('GET', url, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:413: in request\n    return super().request(\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:243: in send\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:240: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\nfastapi/applications.py:149: in __call__\n    await super().__call__(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/applications.py:102: in __call__\n    await self.middleware_stack(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:181: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:159: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:82: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:71: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:550: in __call__\n    await route.handle(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:227: in handle\n    await self.app(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\nfastapi/routing.py:155: in app\n    response_data = await serialize_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    async def serialize_response(\n        *,\n        field: ModelField = None,\n        response_content: Any,\n        include: Union[SetIntStr, DictIntStrAny] = None,\n        exclude: Union[SetIntStr, DictIntStrAny] = set(),\n        by_alias: bool = True,\n        exclude_unset: bool = False,\n        is_coroutine: bool = True,\n    ) -> Any:\n        if field:\n            errors = []\n            if exclude_unset and isinstance(response_content, BaseModel):\n                if PYDANTIC_1:\n                    response_content = response_content.dict(exclude_unset=exclude_unset)\n                else:\n                    response_content = response_content.dict(\n                        skip_defaults=exclude_unset\n                    )  # pragma: nocover\n            if is_coroutine:\n                value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n            else:\n                value, errors_ = await run_in_threadpool(\n                    field.validate, response_content, {}, loc=(\"response\",)\n                )\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            if errors:\n>               raise ValidationError(errors, field.type_)\nE               pydantic.error_wrappers.ValidationError: 1 validation error for Item\nE               response -> aliased_name\nE                 field required (type=value_error.missing)\n\nfastapi/routing.py:81: ValidationError",
                "traceback": "../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:543: in get\n    return self.request('GET', url, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:413: in request\n    return super().request(\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:243: in send\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:240: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\nfastapi/applications.py:149: in __call__\n    await super().__call__(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/applications.py:102: in __call__\n    await self.middleware_stack(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:181: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:159: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:82: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:71: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:550: in __call__\n    await route.handle(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:227: in handle\n    await self.app(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\nfastapi/routing.py:155: in app\n    response_data = await serialize_response(",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    async def serialize_response(\n        *,\n        field: ModelField = None,\n        response_content: Any,\n        include: Union[SetIntStr, DictIntStrAny] = None,\n        exclude: Union[SetIntStr, DictIntStrAny] = set(),\n        by_alias: bool = True,\n        exclude_unset: bool = False,\n        is_coroutine: bool = True,\n    ) -> Any:\n        if field:\n            errors = []\n            if exclude_unset and isinstance(response_content, BaseModel):\n                if PYDANTIC_1:\n                    response_content = response_content.dict(exclude_unset=exclude_unset)\n                else:\n                    response_content = response_content.dict(\n                        skip_defaults=exclude_unset\n                    )  # pragma: nocover\n            if is_coroutine:\n                value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n            else:\n                value, errors_ = await run_in_threadpool(\n                    field.validate, response_content, {}, loc=(\"response\",)\n                )\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            if errors:\n>               raise ValidationError(errors, field.type_)\nE               pydantic.error_wrappers.ValidationError: 1 validation error for Item\nE               response -> aliased_name\nE                 field required (type=value_error.missing)\n\nfastapi/routing.py:81: ValidationError",
                "test_function_decorators": []
            },
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/fastapi_3/tests/test_serialize_response_model.py",
                "test_function": "test_coerce",
                "test_function_code": "def test_coerce():\n    response = client.get(\"/items/coerce\")\n    response.raise_for_status()\n    assert response.json() == {\n        \"aliased_name\": \"coerce\",\n        \"price\": 1.0,\n        \"owner_ids\": None,\n    }",
                "test_error": "pydantic.error_wrappers.ValidationError: 1 validation error for Item response -> aliased_name   field required (type=value_error.missing)",
                "full_test_error": "def test_coerce():\n>       response = client.get(\"/items/coerce\")\n\ntests/test_serialize_response_model.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:543: in get\n    return self.request('GET', url, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:413: in request\n    return super().request(\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:243: in send\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:240: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\nfastapi/applications.py:149: in __call__\n    await super().__call__(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/applications.py:102: in __call__\n    await self.middleware_stack(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:181: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:159: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:82: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:71: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:550: in __call__\n    await route.handle(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:227: in handle\n    await self.app(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\nfastapi/routing.py:155: in app\n    response_data = await serialize_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    async def serialize_response(\n        *,\n        field: ModelField = None,\n        response_content: Any,\n        include: Union[SetIntStr, DictIntStrAny] = None,\n        exclude: Union[SetIntStr, DictIntStrAny] = set(),\n        by_alias: bool = True,\n        exclude_unset: bool = False,\n        is_coroutine: bool = True,\n    ) -> Any:\n        if field:\n            errors = []\n            if exclude_unset and isinstance(response_content, BaseModel):\n                if PYDANTIC_1:\n                    response_content = response_content.dict(exclude_unset=exclude_unset)\n                else:\n                    response_content = response_content.dict(\n                        skip_defaults=exclude_unset\n                    )  # pragma: nocover\n            if is_coroutine:\n                value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n            else:\n                value, errors_ = await run_in_threadpool(\n                    field.validate, response_content, {}, loc=(\"response\",)\n                )\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            if errors:\n>               raise ValidationError(errors, field.type_)\nE               pydantic.error_wrappers.ValidationError: 1 validation error for Item\nE               response -> aliased_name\nE                 field required (type=value_error.missing)\n\nfastapi/routing.py:81: ValidationError",
                "traceback": "../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:543: in get\n    return self.request('GET', url, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:413: in request\n    return super().request(\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:243: in send\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:240: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\nfastapi/applications.py:149: in __call__\n    await super().__call__(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/applications.py:102: in __call__\n    await self.middleware_stack(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:181: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:159: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:82: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:71: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:550: in __call__\n    await route.handle(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:227: in handle\n    await self.app(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\nfastapi/routing.py:155: in app\n    response_data = await serialize_response(",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    async def serialize_response(\n        *,\n        field: ModelField = None,\n        response_content: Any,\n        include: Union[SetIntStr, DictIntStrAny] = None,\n        exclude: Union[SetIntStr, DictIntStrAny] = set(),\n        by_alias: bool = True,\n        exclude_unset: bool = False,\n        is_coroutine: bool = True,\n    ) -> Any:\n        if field:\n            errors = []\n            if exclude_unset and isinstance(response_content, BaseModel):\n                if PYDANTIC_1:\n                    response_content = response_content.dict(exclude_unset=exclude_unset)\n                else:\n                    response_content = response_content.dict(\n                        skip_defaults=exclude_unset\n                    )  # pragma: nocover\n            if is_coroutine:\n                value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n            else:\n                value, errors_ = await run_in_threadpool(\n                    field.validate, response_content, {}, loc=(\"response\",)\n                )\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            if errors:\n>               raise ValidationError(errors, field.type_)\nE               pydantic.error_wrappers.ValidationError: 1 validation error for Item\nE               response -> aliased_name\nE                 field required (type=value_error.missing)\n\nfastapi/routing.py:81: ValidationError",
                "test_function_decorators": []
            },
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/fastapi_3/tests/test_serialize_response_model.py",
                "test_function": "test_validlist",
                "test_function_code": "def test_validlist():\n    response = client.get(\"/items/validlist\")\n    response.raise_for_status()\n    assert response.json() == [\n        {\"aliased_name\": \"foo\", \"price\": None, \"owner_ids\": None},\n        {\"aliased_name\": \"bar\", \"price\": 1.0, \"owner_ids\": None},\n        {\"aliased_name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n    ]",
                "test_error": "pydantic.error_wrappers.ValidationError: 3 validation errors for Item response -> 0 -> aliased_name   field required (type=value_error.missing) response -> 1 -> aliased_name   field required (type=value_error.missing) response -> 2 -> aliased_name   field required (type=value_error.missing)",
                "full_test_error": "def test_validlist():\n>       response = client.get(\"/items/validlist\")\n\ntests/test_serialize_response_model.py:106: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:543: in get\n    return self.request('GET', url, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:413: in request\n    return super().request(\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:243: in send\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:240: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\nfastapi/applications.py:149: in __call__\n    await super().__call__(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/applications.py:102: in __call__\n    await self.middleware_stack(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:181: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:159: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:82: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:71: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:550: in __call__\n    await route.handle(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:227: in handle\n    await self.app(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\nfastapi/routing.py:155: in app\n    response_data = await serialize_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    async def serialize_response(\n        *,\n        field: ModelField = None,\n        response_content: Any,\n        include: Union[SetIntStr, DictIntStrAny] = None,\n        exclude: Union[SetIntStr, DictIntStrAny] = set(),\n        by_alias: bool = True,\n        exclude_unset: bool = False,\n        is_coroutine: bool = True,\n    ) -> Any:\n        if field:\n            errors = []\n            if exclude_unset and isinstance(response_content, BaseModel):\n                if PYDANTIC_1:\n                    response_content = response_content.dict(exclude_unset=exclude_unset)\n                else:\n                    response_content = response_content.dict(\n                        skip_defaults=exclude_unset\n                    )  # pragma: nocover\n            if is_coroutine:\n                value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n            else:\n                value, errors_ = await run_in_threadpool(\n                    field.validate, response_content, {}, loc=(\"response\",)\n                )\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            if errors:\n>               raise ValidationError(errors, field.type_)\nE               pydantic.error_wrappers.ValidationError: 3 validation errors for Item\nE               response -> 0 -> aliased_name\nE                 field required (type=value_error.missing)\nE               response -> 1 -> aliased_name\nE                 field required (type=value_error.missing)\nE               response -> 2 -> aliased_name\nE                 field required (type=value_error.missing)\n\nfastapi/routing.py:81: ValidationError",
                "traceback": "../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:543: in get\n    return self.request('GET', url, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:413: in request\n    return super().request(\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:243: in send\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:240: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\nfastapi/applications.py:149: in __call__\n    await super().__call__(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/applications.py:102: in __call__\n    await self.middleware_stack(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:181: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:159: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:82: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:71: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:550: in __call__\n    await route.handle(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:227: in handle\n    await self.app(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\nfastapi/routing.py:155: in app\n    response_data = await serialize_response(",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    async def serialize_response(\n        *,\n        field: ModelField = None,\n        response_content: Any,\n        include: Union[SetIntStr, DictIntStrAny] = None,\n        exclude: Union[SetIntStr, DictIntStrAny] = set(),\n        by_alias: bool = True,\n        exclude_unset: bool = False,\n        is_coroutine: bool = True,\n    ) -> Any:\n        if field:\n            errors = []\n            if exclude_unset and isinstance(response_content, BaseModel):\n                if PYDANTIC_1:\n                    response_content = response_content.dict(exclude_unset=exclude_unset)\n                else:\n                    response_content = response_content.dict(\n                        skip_defaults=exclude_unset\n                    )  # pragma: nocover\n            if is_coroutine:\n                value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n            else:\n                value, errors_ = await run_in_threadpool(\n                    field.validate, response_content, {}, loc=(\"response\",)\n                )\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            if errors:\n>               raise ValidationError(errors, field.type_)\nE               pydantic.error_wrappers.ValidationError: 3 validation errors for Item\nE               response -> 0 -> aliased_name\nE                 field required (type=value_error.missing)\nE               response -> 1 -> aliased_name\nE                 field required (type=value_error.missing)\nE               response -> 2 -> aliased_name\nE                 field required (type=value_error.missing)\n\nfastapi/routing.py:81: ValidationError",
                "test_function_decorators": []
            },
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/fastapi_3/tests/test_serialize_response_model.py",
                "test_function": "test_validdict",
                "test_function_code": "def test_validdict():\n    response = client.get(\"/items/validdict\")\n    response.raise_for_status()\n    assert response.json() == {\n        \"k1\": {\"aliased_name\": \"foo\", \"price\": None, \"owner_ids\": None},\n        \"k2\": {\"aliased_name\": \"bar\", \"price\": 1.0, \"owner_ids\": None},\n        \"k3\": {\"aliased_name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n    }",
                "test_error": "pydantic.error_wrappers.ValidationError: 3 validation errors for Item response -> k1 -> aliased_name   field required (type=value_error.missing) response -> k2 -> aliased_name   field required (type=value_error.missing) response -> k3 -> aliased_name   field required (type=value_error.missing)",
                "full_test_error": "def test_validdict():\n>       response = client.get(\"/items/validdict\")\n\ntests/test_serialize_response_model.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:543: in get\n    return self.request('GET', url, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:413: in request\n    return super().request(\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:243: in send\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:240: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\nfastapi/applications.py:149: in __call__\n    await super().__call__(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/applications.py:102: in __call__\n    await self.middleware_stack(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:181: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:159: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:82: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:71: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:550: in __call__\n    await route.handle(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:227: in handle\n    await self.app(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\nfastapi/routing.py:155: in app\n    response_data = await serialize_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    async def serialize_response(\n        *,\n        field: ModelField = None,\n        response_content: Any,\n        include: Union[SetIntStr, DictIntStrAny] = None,\n        exclude: Union[SetIntStr, DictIntStrAny] = set(),\n        by_alias: bool = True,\n        exclude_unset: bool = False,\n        is_coroutine: bool = True,\n    ) -> Any:\n        if field:\n            errors = []\n            if exclude_unset and isinstance(response_content, BaseModel):\n                if PYDANTIC_1:\n                    response_content = response_content.dict(exclude_unset=exclude_unset)\n                else:\n                    response_content = response_content.dict(\n                        skip_defaults=exclude_unset\n                    )  # pragma: nocover\n            if is_coroutine:\n                value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n            else:\n                value, errors_ = await run_in_threadpool(\n                    field.validate, response_content, {}, loc=(\"response\",)\n                )\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            if errors:\n>               raise ValidationError(errors, field.type_)\nE               pydantic.error_wrappers.ValidationError: 3 validation errors for Item\nE               response -> k1 -> aliased_name\nE                 field required (type=value_error.missing)\nE               response -> k2 -> aliased_name\nE                 field required (type=value_error.missing)\nE               response -> k3 -> aliased_name\nE                 field required (type=value_error.missing)\n\nfastapi/routing.py:81: ValidationError",
                "traceback": "../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:543: in get\n    return self.request('GET', url, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:413: in request\n    return super().request(\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:243: in send\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:240: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\nfastapi/applications.py:149: in __call__\n    await super().__call__(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/applications.py:102: in __call__\n    await self.middleware_stack(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:181: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:159: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:82: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:71: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:550: in __call__\n    await route.handle(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:227: in handle\n    await self.app(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\nfastapi/routing.py:155: in app\n    response_data = await serialize_response(",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    async def serialize_response(\n        *,\n        field: ModelField = None,\n        response_content: Any,\n        include: Union[SetIntStr, DictIntStrAny] = None,\n        exclude: Union[SetIntStr, DictIntStrAny] = set(),\n        by_alias: bool = True,\n        exclude_unset: bool = False,\n        is_coroutine: bool = True,\n    ) -> Any:\n        if field:\n            errors = []\n            if exclude_unset and isinstance(response_content, BaseModel):\n                if PYDANTIC_1:\n                    response_content = response_content.dict(exclude_unset=exclude_unset)\n                else:\n                    response_content = response_content.dict(\n                        skip_defaults=exclude_unset\n                    )  # pragma: nocover\n            if is_coroutine:\n                value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n            else:\n                value, errors_ = await run_in_threadpool(\n                    field.validate, response_content, {}, loc=(\"response\",)\n                )\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            if errors:\n>               raise ValidationError(errors, field.type_)\nE               pydantic.error_wrappers.ValidationError: 3 validation errors for Item\nE               response -> k1 -> aliased_name\nE                 field required (type=value_error.missing)\nE               response -> k2 -> aliased_name\nE                 field required (type=value_error.missing)\nE               response -> k3 -> aliased_name\nE                 field required (type=value_error.missing)\n\nfastapi/routing.py:81: ValidationError",
                "test_function_decorators": []
            },
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/fastapi_3/tests/test_serialize_response_model.py",
                "test_function": "test_valid_exclude_unset",
                "test_function_code": "def test_valid_exclude_unset():\n    response = client.get(\"/items/valid-exclude-unset\")\n    response.raise_for_status()\n    assert response.json() == {\"aliased_name\": \"valid\", \"price\": 1.0}",
                "test_error": "pydantic.error_wrappers.ValidationError: 1 validation error for Item response -> aliased_name   field required (type=value_error.missing)",
                "full_test_error": "def test_valid_exclude_unset():\n>       response = client.get(\"/items/valid-exclude-unset\")\n\ntests/test_serialize_response_model.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:543: in get\n    return self.request('GET', url, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:413: in request\n    return super().request(\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:243: in send\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:240: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\nfastapi/applications.py:149: in __call__\n    await super().__call__(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/applications.py:102: in __call__\n    await self.middleware_stack(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:181: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:159: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:82: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:71: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:550: in __call__\n    await route.handle(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:227: in handle\n    await self.app(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\nfastapi/routing.py:155: in app\n    response_data = await serialize_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    async def serialize_response(\n        *,\n        field: ModelField = None,\n        response_content: Any,\n        include: Union[SetIntStr, DictIntStrAny] = None,\n        exclude: Union[SetIntStr, DictIntStrAny] = set(),\n        by_alias: bool = True,\n        exclude_unset: bool = False,\n        is_coroutine: bool = True,\n    ) -> Any:\n        if field:\n            errors = []\n            if exclude_unset and isinstance(response_content, BaseModel):\n                if PYDANTIC_1:\n                    response_content = response_content.dict(exclude_unset=exclude_unset)\n                else:\n                    response_content = response_content.dict(\n                        skip_defaults=exclude_unset\n                    )  # pragma: nocover\n            if is_coroutine:\n                value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n            else:\n                value, errors_ = await run_in_threadpool(\n                    field.validate, response_content, {}, loc=(\"response\",)\n                )\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            if errors:\n>               raise ValidationError(errors, field.type_)\nE               pydantic.error_wrappers.ValidationError: 1 validation error for Item\nE               response -> aliased_name\nE                 field required (type=value_error.missing)\n\nfastapi/routing.py:81: ValidationError",
                "traceback": "../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:543: in get\n    return self.request('GET', url, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:413: in request\n    return super().request(\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:243: in send\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:240: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\nfastapi/applications.py:149: in __call__\n    await super().__call__(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/applications.py:102: in __call__\n    await self.middleware_stack(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:181: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:159: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:82: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:71: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:550: in __call__\n    await route.handle(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:227: in handle\n    await self.app(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\nfastapi/routing.py:155: in app\n    response_data = await serialize_response(",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    async def serialize_response(\n        *,\n        field: ModelField = None,\n        response_content: Any,\n        include: Union[SetIntStr, DictIntStrAny] = None,\n        exclude: Union[SetIntStr, DictIntStrAny] = set(),\n        by_alias: bool = True,\n        exclude_unset: bool = False,\n        is_coroutine: bool = True,\n    ) -> Any:\n        if field:\n            errors = []\n            if exclude_unset and isinstance(response_content, BaseModel):\n                if PYDANTIC_1:\n                    response_content = response_content.dict(exclude_unset=exclude_unset)\n                else:\n                    response_content = response_content.dict(\n                        skip_defaults=exclude_unset\n                    )  # pragma: nocover\n            if is_coroutine:\n                value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n            else:\n                value, errors_ = await run_in_threadpool(\n                    field.validate, response_content, {}, loc=(\"response\",)\n                )\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            if errors:\n>               raise ValidationError(errors, field.type_)\nE               pydantic.error_wrappers.ValidationError: 1 validation error for Item\nE               response -> aliased_name\nE                 field required (type=value_error.missing)\n\nfastapi/routing.py:81: ValidationError",
                "test_function_decorators": []
            },
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/fastapi_3/tests/test_serialize_response_model.py",
                "test_function": "test_coerce_exclude_unset",
                "test_function_code": "def test_coerce_exclude_unset():\n    response = client.get(\"/items/coerce-exclude-unset\")\n    response.raise_for_status()\n    assert response.json() == {\"aliased_name\": \"coerce\", \"price\": 1.0}",
                "test_error": "pydantic.error_wrappers.ValidationError: 1 validation error for Item response -> aliased_name   field required (type=value_error.missing)",
                "full_test_error": "def test_coerce_exclude_unset():\n>       response = client.get(\"/items/coerce-exclude-unset\")\n\ntests/test_serialize_response_model.py:132: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:543: in get\n    return self.request('GET', url, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:413: in request\n    return super().request(\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:243: in send\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:240: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\nfastapi/applications.py:149: in __call__\n    await super().__call__(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/applications.py:102: in __call__\n    await self.middleware_stack(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:181: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:159: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:82: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:71: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:550: in __call__\n    await route.handle(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:227: in handle\n    await self.app(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\nfastapi/routing.py:155: in app\n    response_data = await serialize_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    async def serialize_response(\n        *,\n        field: ModelField = None,\n        response_content: Any,\n        include: Union[SetIntStr, DictIntStrAny] = None,\n        exclude: Union[SetIntStr, DictIntStrAny] = set(),\n        by_alias: bool = True,\n        exclude_unset: bool = False,\n        is_coroutine: bool = True,\n    ) -> Any:\n        if field:\n            errors = []\n            if exclude_unset and isinstance(response_content, BaseModel):\n                if PYDANTIC_1:\n                    response_content = response_content.dict(exclude_unset=exclude_unset)\n                else:\n                    response_content = response_content.dict(\n                        skip_defaults=exclude_unset\n                    )  # pragma: nocover\n            if is_coroutine:\n                value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n            else:\n                value, errors_ = await run_in_threadpool(\n                    field.validate, response_content, {}, loc=(\"response\",)\n                )\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            if errors:\n>               raise ValidationError(errors, field.type_)\nE               pydantic.error_wrappers.ValidationError: 1 validation error for Item\nE               response -> aliased_name\nE                 field required (type=value_error.missing)\n\nfastapi/routing.py:81: ValidationError",
                "traceback": "../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:543: in get\n    return self.request('GET', url, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:413: in request\n    return super().request(\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:243: in send\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:240: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\nfastapi/applications.py:149: in __call__\n    await super().__call__(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/applications.py:102: in __call__\n    await self.middleware_stack(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:181: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:159: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:82: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:71: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:550: in __call__\n    await route.handle(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:227: in handle\n    await self.app(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\nfastapi/routing.py:155: in app\n    response_data = await serialize_response(",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    async def serialize_response(\n        *,\n        field: ModelField = None,\n        response_content: Any,\n        include: Union[SetIntStr, DictIntStrAny] = None,\n        exclude: Union[SetIntStr, DictIntStrAny] = set(),\n        by_alias: bool = True,\n        exclude_unset: bool = False,\n        is_coroutine: bool = True,\n    ) -> Any:\n        if field:\n            errors = []\n            if exclude_unset and isinstance(response_content, BaseModel):\n                if PYDANTIC_1:\n                    response_content = response_content.dict(exclude_unset=exclude_unset)\n                else:\n                    response_content = response_content.dict(\n                        skip_defaults=exclude_unset\n                    )  # pragma: nocover\n            if is_coroutine:\n                value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n            else:\n                value, errors_ = await run_in_threadpool(\n                    field.validate, response_content, {}, loc=(\"response\",)\n                )\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            if errors:\n>               raise ValidationError(errors, field.type_)\nE               pydantic.error_wrappers.ValidationError: 1 validation error for Item\nE               response -> aliased_name\nE                 field required (type=value_error.missing)\n\nfastapi/routing.py:81: ValidationError",
                "test_function_decorators": []
            },
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/fastapi_3/tests/test_serialize_response_model.py",
                "test_function": "test_validlist_exclude_unset",
                "test_function_code": "def test_validlist_exclude_unset():\n    response = client.get(\"/items/validlist-exclude-unset\")\n    response.raise_for_status()\n    assert response.json() == [\n        {\"aliased_name\": \"foo\"},\n        {\"aliased_name\": \"bar\", \"price\": 1.0},\n        {\"aliased_name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n    ]",
                "test_error": "pydantic.error_wrappers.ValidationError: 3 validation errors for Item response -> 0 -> aliased_name   field required (type=value_error.missing) response -> 1 -> aliased_name   field required (type=value_error.missing) response -> 2 -> aliased_name   field required (type=value_error.missing)",
                "full_test_error": "def test_validlist_exclude_unset():\n>       response = client.get(\"/items/validlist-exclude-unset\")\n\ntests/test_serialize_response_model.py:138: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:543: in get\n    return self.request('GET', url, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:413: in request\n    return super().request(\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:243: in send\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:240: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\nfastapi/applications.py:149: in __call__\n    await super().__call__(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/applications.py:102: in __call__\n    await self.middleware_stack(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:181: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:159: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:82: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:71: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:550: in __call__\n    await route.handle(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:227: in handle\n    await self.app(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\nfastapi/routing.py:155: in app\n    response_data = await serialize_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    async def serialize_response(\n        *,\n        field: ModelField = None,\n        response_content: Any,\n        include: Union[SetIntStr, DictIntStrAny] = None,\n        exclude: Union[SetIntStr, DictIntStrAny] = set(),\n        by_alias: bool = True,\n        exclude_unset: bool = False,\n        is_coroutine: bool = True,\n    ) -> Any:\n        if field:\n            errors = []\n            if exclude_unset and isinstance(response_content, BaseModel):\n                if PYDANTIC_1:\n                    response_content = response_content.dict(exclude_unset=exclude_unset)\n                else:\n                    response_content = response_content.dict(\n                        skip_defaults=exclude_unset\n                    )  # pragma: nocover\n            if is_coroutine:\n                value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n            else:\n                value, errors_ = await run_in_threadpool(\n                    field.validate, response_content, {}, loc=(\"response\",)\n                )\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            if errors:\n>               raise ValidationError(errors, field.type_)\nE               pydantic.error_wrappers.ValidationError: 3 validation errors for Item\nE               response -> 0 -> aliased_name\nE                 field required (type=value_error.missing)\nE               response -> 1 -> aliased_name\nE                 field required (type=value_error.missing)\nE               response -> 2 -> aliased_name\nE                 field required (type=value_error.missing)\n\nfastapi/routing.py:81: ValidationError",
                "traceback": "../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:543: in get\n    return self.request('GET', url, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:413: in request\n    return super().request(\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:243: in send\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:240: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\nfastapi/applications.py:149: in __call__\n    await super().__call__(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/applications.py:102: in __call__\n    await self.middleware_stack(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:181: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:159: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:82: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:71: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:550: in __call__\n    await route.handle(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:227: in handle\n    await self.app(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\nfastapi/routing.py:155: in app\n    response_data = await serialize_response(",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    async def serialize_response(\n        *,\n        field: ModelField = None,\n        response_content: Any,\n        include: Union[SetIntStr, DictIntStrAny] = None,\n        exclude: Union[SetIntStr, DictIntStrAny] = set(),\n        by_alias: bool = True,\n        exclude_unset: bool = False,\n        is_coroutine: bool = True,\n    ) -> Any:\n        if field:\n            errors = []\n            if exclude_unset and isinstance(response_content, BaseModel):\n                if PYDANTIC_1:\n                    response_content = response_content.dict(exclude_unset=exclude_unset)\n                else:\n                    response_content = response_content.dict(\n                        skip_defaults=exclude_unset\n                    )  # pragma: nocover\n            if is_coroutine:\n                value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n            else:\n                value, errors_ = await run_in_threadpool(\n                    field.validate, response_content, {}, loc=(\"response\",)\n                )\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            if errors:\n>               raise ValidationError(errors, field.type_)\nE               pydantic.error_wrappers.ValidationError: 3 validation errors for Item\nE               response -> 0 -> aliased_name\nE                 field required (type=value_error.missing)\nE               response -> 1 -> aliased_name\nE                 field required (type=value_error.missing)\nE               response -> 2 -> aliased_name\nE                 field required (type=value_error.missing)\n\nfastapi/routing.py:81: ValidationError",
                "test_function_decorators": []
            },
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/fastapi_3/tests/test_serialize_response_model.py",
                "test_function": "test_validdict_exclude_unset",
                "test_function_code": "def test_validdict_exclude_unset():\n    response = client.get(\"/items/validdict-exclude-unset\")\n    response.raise_for_status()\n    assert response.json() == {\n        \"k1\": {\"aliased_name\": \"foo\"},\n        \"k2\": {\"aliased_name\": \"bar\", \"price\": 1.0},\n        \"k3\": {\"aliased_name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n    }",
                "test_error": "pydantic.error_wrappers.ValidationError: 3 validation errors for Item response -> k1 -> aliased_name   field required (type=value_error.missing) response -> k2 -> aliased_name   field required (type=value_error.missing) response -> k3 -> aliased_name   field required (type=value_error.missing)",
                "full_test_error": "def test_validdict_exclude_unset():\n>       response = client.get(\"/items/validdict-exclude-unset\")\n\ntests/test_serialize_response_model.py:148: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:543: in get\n    return self.request('GET', url, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:413: in request\n    return super().request(\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:243: in send\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:240: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\nfastapi/applications.py:149: in __call__\n    await super().__call__(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/applications.py:102: in __call__\n    await self.middleware_stack(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:181: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:159: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:82: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:71: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:550: in __call__\n    await route.handle(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:227: in handle\n    await self.app(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\nfastapi/routing.py:155: in app\n    response_data = await serialize_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    async def serialize_response(\n        *,\n        field: ModelField = None,\n        response_content: Any,\n        include: Union[SetIntStr, DictIntStrAny] = None,\n        exclude: Union[SetIntStr, DictIntStrAny] = set(),\n        by_alias: bool = True,\n        exclude_unset: bool = False,\n        is_coroutine: bool = True,\n    ) -> Any:\n        if field:\n            errors = []\n            if exclude_unset and isinstance(response_content, BaseModel):\n                if PYDANTIC_1:\n                    response_content = response_content.dict(exclude_unset=exclude_unset)\n                else:\n                    response_content = response_content.dict(\n                        skip_defaults=exclude_unset\n                    )  # pragma: nocover\n            if is_coroutine:\n                value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n            else:\n                value, errors_ = await run_in_threadpool(\n                    field.validate, response_content, {}, loc=(\"response\",)\n                )\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            if errors:\n>               raise ValidationError(errors, field.type_)\nE               pydantic.error_wrappers.ValidationError: 3 validation errors for Item\nE               response -> k1 -> aliased_name\nE                 field required (type=value_error.missing)\nE               response -> k2 -> aliased_name\nE                 field required (type=value_error.missing)\nE               response -> k3 -> aliased_name\nE                 field required (type=value_error.missing)\n\nfastapi/routing.py:81: ValidationError",
                "traceback": "../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:543: in get\n    return self.request('GET', url, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:413: in request\n    return super().request(\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:243: in send\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/testclient.py:240: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\nfastapi/applications.py:149: in __call__\n    await super().__call__(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/applications.py:102: in __call__\n    await self.middleware_stack(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:181: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/middleware/errors.py:159: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:82: in __call__\n    raise exc from None\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/exceptions.py:71: in __call__\n    await self.app(scope, receive, sender)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:550: in __call__\n    await route.handle(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:227: in handle\n    await self.app(scope, receive, send)\n../../envs/fastapi_3/lib/python3.8/site-packages/starlette/routing.py:41: in app\n    response = await func(request)\nfastapi/routing.py:155: in app\n    response_data = await serialize_response(",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    async def serialize_response(\n        *,\n        field: ModelField = None,\n        response_content: Any,\n        include: Union[SetIntStr, DictIntStrAny] = None,\n        exclude: Union[SetIntStr, DictIntStrAny] = set(),\n        by_alias: bool = True,\n        exclude_unset: bool = False,\n        is_coroutine: bool = True,\n    ) -> Any:\n        if field:\n            errors = []\n            if exclude_unset and isinstance(response_content, BaseModel):\n                if PYDANTIC_1:\n                    response_content = response_content.dict(exclude_unset=exclude_unset)\n                else:\n                    response_content = response_content.dict(\n                        skip_defaults=exclude_unset\n                    )  # pragma: nocover\n            if is_coroutine:\n                value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n            else:\n                value, errors_ = await run_in_threadpool(\n                    field.validate, response_content, {}, loc=(\"response\",)\n                )\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            if errors:\n>               raise ValidationError(errors, field.type_)\nE               pydantic.error_wrappers.ValidationError: 3 validation errors for Item\nE               response -> k1 -> aliased_name\nE                 field required (type=value_error.missing)\nE               response -> k2 -> aliased_name\nE                 field required (type=value_error.missing)\nE               response -> k3 -> aliased_name\nE                 field required (type=value_error.missing)\n\nfastapi/routing.py:81: ValidationError",
                "test_function_decorators": []
            }
        ]
    }
}