{
    "1.1.1": "async def request_validation_exception_handler(\n    request: Request, exc: RequestValidationError\n) -> JSONResponse:\n    return JSONResponse(\n        status_code=HTTP_422_UNPROCESSABLE_ENTITY, content={\"detail\": exc.errors()}\n    )\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "fastapi/exception_handlers.py",
    "1.3.2": null,
    "1.4.1": [
        "def test_jsonable_encoder_requiring_error():\n    response = client.post(\"/items/\", json=[{\"name\": \"Foo\", \"age\": -1.0}])\n    assert response.status_code == 422\n    assert response.json() == single_error"
    ],
    "1.4.2": [
        "tests/test_multi_body_errors.py"
    ],
    "2.1.1": [
        [
            "E       TypeError: Object of type Decimal is not JSON serializable"
        ]
    ],
    "2.1.2": [
        [
            "def test_jsonable_encoder_requiring_error():\n>       response = client.post(\"/items/\", json=[{\"name\": \"Foo\", \"age\": -1.0}])\n\ntests/test_multi_body_errors.py:153: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/fastapi_7/lib/python3.8/site-packages/requests/sessions.py:578: in post\n    return self.request('POST', url, data=data, json=json, **kwargs)\n../../envs/fastapi_7/lib/python3.8/site-packages/starlette/testclient.py:405: in request\n    return super().request(\n../../envs/fastapi_7/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_7/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_7/lib/python3.8/site-packages/starlette/testclient.py:238: in send\n    raise exc from None\n../../envs/fastapi_7/lib/python3.8/site-packages/starlette/testclient.py:235: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\nfastapi/applications.py:140: in __call__\n    await super().__call__(scope, receive, send)\n../../envs/fastapi_7/lib/python3.8/site-packages/starlette/applications.py:134: in __call__\n    await self.error_middleware(scope, receive, send)\n../../envs/fastapi_7/lib/python3.8/site-packages/starlette/middleware/errors.py:178: in __call__\n    raise exc from None\n../../envs/fastapi_7/lib/python3.8/site-packages/starlette/middleware/errors.py:156: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_7/lib/python3.8/site-packages/starlette/exceptions.py:81: in __call__\n    response = await handler(request, exc)\nfastapi/exception_handlers.py:21: in request_validation_exception_handler\n    return JSONResponse(\n../../envs/fastapi_7/lib/python3.8/site-packages/starlette/responses.py:42: in __init__\n    self.body = self.render(content)\n../../envs/fastapi_7/lib/python3.8/site-packages/starlette/responses.py:146: in render\n    return json.dumps(\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/__init__.py:234: in dumps\n    return cls(\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/encoder.py:199: in encode\n    chunks = self.iterencode(o, _one_shot=True)\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/encoder.py:257: in iterencode\n    return _iterencode(o, 0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.encoder.JSONEncoder object at 0x111dff940>, o = Decimal('0')\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return JSONEncoder.default(self, o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')",
            "\n/usr/local/Cellar/python@3.8/3.8.18_1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/json/encoder.py:179: TypeError"
        ]
    ],
    "2.1.3": [
        [
            {
                "exc": {
                    "value": "RequestValidationError(model='Request', errors=[{'loc': ('body', 'item', 0, 'age'), 'msg': 'ensure this value is greater than 0', 'type': 'value_error.number.not_gt', 'ctx': {'limit_value': Decimal('0')}}])",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ]
    ],
    "2.1.4": [
        [
            {
                "exc": "RequestValidationError"
            },
            {}
        ]
    ],
    "2.1.5": [
        [
            {
                "exc": {
                    "value": "RequestValidationError(model='Request', errors=[{'loc': ('body', 'item', 0, 'age'), 'msg': 'ensure this value is greater than 0', 'type': 'value_error.number.not_gt', 'ctx': {'limit_value': Decimal('0')}}])",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ]
    ],
    "2.1.6": [
        [
            {
                "exc": "RequestValidationError"
            },
            {}
        ]
    ],
    "3.1.1": [
        "Invalid Constrained Decimals (condecimal) cause 500 response code, rather than a 422 with explanation of what was invalid.\n"
    ],
    "3.1.2": [
        "Describe the bug\nIf an invalid condecimal is sent to a FastAPI service the service will return a 500 internal server error, instead of a 422 validation error. I can't reproduce this using Pydantic alone.\n\nTo Reproduce\nSteps to reproduce the behavior:\n\nRun the attached condecimal-500-server.py file.\nIn a separate terminal run the attached condecimal-500-client.py file.\ncondecimal-500-server.log shows what you will see in the terminal that is running the server, most of the invalid requests will return a 422 but the one that violates the decimal constraint raises a TypeError.\ncondecimal-500-client.log shows what you will see in the terminal running the client, basically the same info that you see in the server's logs.\nRun the attached condecimal-500-pydantic.py file.\ncondecimal-500-pydantic.log shows what you will see when running that file, Pydantic correctly raises a ValidationError when the constraint is violated indicating that this is not an bug in Pydantic.\nExpected behavior\nI expect a 422 response along with an explanation of what is invalid about the number to be returned, as happens when other invalid payloads are sent.\n\nEnvironment:\n\nOS: Linux\nFastAPI Version: 0.44.0\nPydantic Version: 1.1.1\nPython Version: 3.7.2\n"
    ]
}