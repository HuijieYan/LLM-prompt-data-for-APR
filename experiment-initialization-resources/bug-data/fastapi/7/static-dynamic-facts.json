{
    "fastapi:7": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/fastapi_7/fastapi/exception_handlers.py": {
            "buggy_functions": [
                {
                    "function_name": "request_validation_exception_handler",
                    "function_code": "async def request_validation_exception_handler(\n    request: Request, exc: RequestValidationError\n) -> JSONResponse:\n    return JSONResponse(\n        status_code=HTTP_422_UNPROCESSABLE_ENTITY, content={\"detail\": exc.errors()}\n    )\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 18,
                    "end_line": 23,
                    "variables": {
                        "Request": [
                            19
                        ],
                        "RequestValidationError": [
                            19
                        ],
                        "JSONResponse": [
                            20,
                            21
                        ],
                        "HTTP_422_UNPROCESSABLE_ENTITY": [
                            22
                        ],
                        "exc.errors": [
                            22
                        ],
                        "exc": [
                            22
                        ]
                    },
                    "filtered_variables": {
                        "Request": [
                            19
                        ],
                        "RequestValidationError": [
                            19
                        ],
                        "JSONResponse": [
                            20,
                            21
                        ],
                        "HTTP_422_UNPROCESSABLE_ENTITY": [
                            22
                        ],
                        "exc.errors": [
                            22
                        ],
                        "exc": [
                            22
                        ]
                    },
                    "diff_line_number": 22,
                    "class_data": null,
                    "used_imports": [
                        "from fastapi.exceptions import RequestValidationError",
                        "from starlette.requests import Request",
                        "from starlette.responses import JSONResponse",
                        "from starlette.status import HTTP_422_UNPROCESSABLE_ENTITY"
                    ],
                    "variable_values": [
                        [
                            {
                                "Request": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RequestValidationError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "JSONResponse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "HTTP_422_UNPROCESSABLE_ENTITY": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "exc.errors": {
                                    "variable_value": "<bound method ValidationError.errors of RequestValidationError(model='Request', errors=[{'loc': ('body', 'item', 0, 'age'), 'msg': 'ensure this value is greater than 0', 'type': 'value_error.number.not_gt', 'ctx': {'limit_value': Decimal('0')}}])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "exc": {
                                    "variable_value": "RequestValidationError(model='Request', errors=[{'loc': ('body', 'item', 0, 'age'), 'msg': 'ensure this value is greater than 0', 'type': 'value_error.number.not_gt', 'ctx': {'limit_value': Decimal('0')}}])",
                                    "variable_type": "RequestValidationError",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Request": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RequestValidationError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "JSONResponse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "HTTP_422_UNPROCESSABLE_ENTITY": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "exc.errors": {
                                    "variable_value": "<bound method ValidationError.errors of RequestValidationError(model='Request', errors=[{'loc': ('body', 'item', 0, 'age'), 'msg': 'ensure this value is greater than 0', 'type': 'value_error.number.not_gt', 'ctx': {'limit_value': Decimal('0')}}])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "exc": {
                                    "variable_value": "RequestValidationError(model='Request', errors=[{'loc': ('body', 'item', 0, 'age'), 'msg': 'ensure this value is greater than 0', 'type': 'value_error.number.not_gt', 'ctx': {'limit_value': Decimal('0')}}])",
                                    "variable_type": "RequestValidationError",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "Request": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RequestValidationError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "JSONResponse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "HTTP_422_UNPROCESSABLE_ENTITY": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "jsonable_encoder": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "exc.errors": {
                                    "variable_value": "<bound method ValidationError.errors of RequestValidationError(model='Request', errors=[{'loc': ('body', 'item', 0, 'age'), 'msg': 'ensure this value is greater than 0', 'type': 'value_error.number.not_gt', 'ctx': {'limit_value': Decimal('0')}}])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "exc": {
                                    "variable_value": "RequestValidationError(model='Request', errors=[{'loc': ('body', 'item', 0, 'age'), 'msg': 'ensure this value is greater than 0', 'type': 'value_error.number.not_gt', 'ctx': {'limit_value': Decimal('0')}}])",
                                    "variable_type": "RequestValidationError",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Request": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "RequestValidationError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "JSONResponse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "HTTP_422_UNPROCESSABLE_ENTITY": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "jsonable_encoder": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "exc.errors": {
                                    "variable_value": "<bound method ValidationError.errors of RequestValidationError(model='Request', errors=[{'loc': ('body', 'item', 0, 'age'), 'msg': 'ensure this value is greater than 0', 'type': 'value_error.number.not_gt', 'ctx': {'limit_value': Decimal('0')}}])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "exc": {
                                    "variable_value": "RequestValidationError(model='Request', errors=[{'loc': ('body', 'item', 0, 'age'), 'msg': 'ensure this value is greater than 0', 'type': 'value_error.number.not_gt', 'ctx': {'limit_value': Decimal('0')}}])",
                                    "variable_type": "RequestValidationError",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "async def http_exception_handler(request: Request, exc: HTTPException) -> JSONResponse:\n    headers = getattr(exc, \"headers\", None)\n    if headers:\n        return JSONResponse(\n            {\"detail\": exc.detail}, status_code=exc.status_code, headers=headers\n        )\n    else:\n        return JSONResponse({\"detail\": exc.detail}, status_code=exc.status_code)",
                "async def request_validation_exception_handler(\n    request: Request, exc: RequestValidationError\n) -> JSONResponse:\n    return JSONResponse(\n        status_code=HTTP_422_UNPROCESSABLE_ENTITY, content={\"detail\": exc.errors()}\n    )"
            ],
            "inscope_function_signatures": [
                "http_exception_handler(request: Request, exc: HTTPException) -> JSONResponse",
                "request_validation_exception_handler(request: Request, exc: RequestValidationError) -> JSONResponse"
            ],
            "variables_in_file": {
                "Request": [
                    8,
                    19
                ],
                "HTTPException": [
                    8
                ],
                "headers": [
                    9,
                    10,
                    12
                ],
                "getattr": [
                    9
                ],
                "exc": [
                    9,
                    12,
                    22,
                    15
                ],
                "JSONResponse": [
                    8,
                    11,
                    15,
                    20,
                    21
                ],
                "exc.detail": [
                    12,
                    15
                ],
                "exc.status_code": [
                    12,
                    15
                ],
                "RequestValidationError": [
                    19
                ],
                "HTTP_422_UNPROCESSABLE_ENTITY": [
                    22
                ],
                "exc.errors": [
                    22
                ]
            },
            "filtered_variables_in_file": {
                "Request": [
                    8,
                    19
                ],
                "HTTPException": [
                    8
                ],
                "headers": [
                    9,
                    10,
                    12
                ],
                "exc": [
                    9,
                    12,
                    22,
                    15
                ],
                "JSONResponse": [
                    8,
                    11,
                    15,
                    20,
                    21
                ],
                "exc.detail": [
                    12,
                    15
                ],
                "exc.status_code": [
                    12,
                    15
                ],
                "RequestValidationError": [
                    19
                ],
                "HTTP_422_UNPROCESSABLE_ENTITY": [
                    22
                ],
                "exc.errors": [
                    22
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/fastapi_7/tests/test_multi_body_errors.py",
                "test_function": "test_jsonable_encoder_requiring_error",
                "test_function_code": "def test_jsonable_encoder_requiring_error():\n    response = client.post(\"/items/\", json=[{\"name\": \"Foo\", \"age\": -1.0}])\n    assert response.status_code == 422\n    assert response.json() == single_error",
                "test_error": "TypeError: Object of type Decimal is not JSON serializable",
                "full_test_error": "def test_jsonable_encoder_requiring_error():\n>       response = client.post(\"/items/\", json=[{\"name\": \"Foo\", \"age\": -1.0}])\n\ntests/test_multi_body_errors.py:153: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/fastapi_7/lib/python3.8/site-packages/requests/sessions.py:578: in post\n    return self.request('POST', url, data=data, json=json, **kwargs)\n../../envs/fastapi_7/lib/python3.8/site-packages/starlette/testclient.py:405: in request\n    return super().request(\n../../envs/fastapi_7/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_7/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_7/lib/python3.8/site-packages/starlette/testclient.py:238: in send\n    raise exc from None\n../../envs/fastapi_7/lib/python3.8/site-packages/starlette/testclient.py:235: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\nfastapi/applications.py:140: in __call__\n    await super().__call__(scope, receive, send)\n../../envs/fastapi_7/lib/python3.8/site-packages/starlette/applications.py:134: in __call__\n    await self.error_middleware(scope, receive, send)\n../../envs/fastapi_7/lib/python3.8/site-packages/starlette/middleware/errors.py:178: in __call__\n    raise exc from None\n../../envs/fastapi_7/lib/python3.8/site-packages/starlette/middleware/errors.py:156: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_7/lib/python3.8/site-packages/starlette/exceptions.py:81: in __call__\n    response = await handler(request, exc)\nfastapi/exception_handlers.py:21: in request_validation_exception_handler\n    return JSONResponse(\n../../envs/fastapi_7/lib/python3.8/site-packages/starlette/responses.py:42: in __init__\n    self.body = self.render(content)\n../../envs/fastapi_7/lib/python3.8/site-packages/starlette/responses.py:146: in render\n    return json.dumps(\n/usr/local/lib/python3.8/json/__init__.py:234: in dumps\n    return cls(\n/usr/local/lib/python3.8/json/encoder.py:199: in encode\n    chunks = self.iterencode(o, _one_shot=True)\n/usr/local/lib/python3.8/json/encoder.py:257: in iterencode\n    return _iterencode(o, 0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.encoder.JSONEncoder object at 0x7f14be9cf100>, o = Decimal('0')\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return JSONEncoder.default(self, o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')\nE       TypeError: Object of type Decimal is not JSON serializable\n\n/usr/local/lib/python3.8/json/encoder.py:179: TypeError",
                "traceback": "../../envs/fastapi_7/lib/python3.8/site-packages/requests/sessions.py:578: in post\n    return self.request('POST', url, data=data, json=json, **kwargs)\n../../envs/fastapi_7/lib/python3.8/site-packages/starlette/testclient.py:405: in request\n    return super().request(\n../../envs/fastapi_7/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_7/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_7/lib/python3.8/site-packages/starlette/testclient.py:238: in send\n    raise exc from None\n../../envs/fastapi_7/lib/python3.8/site-packages/starlette/testclient.py:235: in send\n    loop.run_until_complete(self.app(scope, receive, send))\n/usr/local/lib/python3.8/asyncio/base_events.py:616: in run_until_complete\n    return future.result()\nfastapi/applications.py:140: in __call__\n    await super().__call__(scope, receive, send)\n../../envs/fastapi_7/lib/python3.8/site-packages/starlette/applications.py:134: in __call__\n    await self.error_middleware(scope, receive, send)\n../../envs/fastapi_7/lib/python3.8/site-packages/starlette/middleware/errors.py:178: in __call__\n    raise exc from None\n../../envs/fastapi_7/lib/python3.8/site-packages/starlette/middleware/errors.py:156: in __call__\n    await self.app(scope, receive, _send)\n../../envs/fastapi_7/lib/python3.8/site-packages/starlette/exceptions.py:81: in __call__\n    response = await handler(request, exc)\nfastapi/exception_handlers.py:21: in request_validation_exception_handler\n    return JSONResponse(\n../../envs/fastapi_7/lib/python3.8/site-packages/starlette/responses.py:42: in __init__\n    self.body = self.render(content)\n../../envs/fastapi_7/lib/python3.8/site-packages/starlette/responses.py:146: in render\n    return json.dumps(\n/usr/local/lib/python3.8/json/__init__.py:234: in dumps\n    return cls(\n/usr/local/lib/python3.8/json/encoder.py:199: in encode\n    chunks = self.iterencode(o, _one_shot=True)\n/usr/local/lib/python3.8/json/encoder.py:257: in iterencode\n    return _iterencode(o, 0)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.encoder.JSONEncoder object at 0x7f14be9cf100>, o = Decimal('0')\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return JSONEncoder.default(self, o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')\nE       TypeError: Object of type Decimal is not JSON serializable\n\n/usr/local/lib/python3.8/json/encoder.py:179: TypeError",
                "test_function_decorators": []
            }
        ]
    }
}