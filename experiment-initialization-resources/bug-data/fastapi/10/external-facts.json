{
    "fastapi:10": {
        "github_issue_title": [
            "response_model_skip_defaults doesn't appear to be working?\n"
        ],
        "github_issue_description": [
            "Describe the bug\nIt's pretty straightforward, I've used the response_model_skip_defaults flag but it's returning the full model anyways. I'll try to post code examples but it's really barebones.\n\nTo Reproduce\nSteps to reproduce the behavior:\n\nCreate a file with '...'\nAdd a path operation function with '....'\nOpen the browser and call it with a payload of '....'\nSee error\nCode\nAcross a few different files...\n\nApp = FastAPI(debug=settings.debug)\nApp.add_middleware(RequestContextMiddleware)\nApp.add_middleware(ApiTokenMiddleware)\nApp.add_middleware(SentryMiddleware)\nApp.include_router(profile_router,\n    prefix='/org/{org_id:int}/groups/{group_id:int}')\n\n...\n\n@validate_token(scope='usermanagement')\n@profile_router.get('/profile', response_model=Profile, response_model_skip_defaults=True)\nasync def get_profile(org_id: int, group_id: int):\n    return Profile(description=\"These are words\")\n\n...\n\nclass ProfileContact(BaseModel):\n    email: EmailStr = None\n    phone: str = None\n    website: str = None\n\nclass ProfileAddress(BaseModel):\n    address: str = None\n    city: str = None\n    state: str = None\n    zip: str = None\n    country: str = None\n\nclass Profile(BaseModel):\n    first_name: str = None\n    last_name: str = None\n    title: str = None\n    company: str = None\n    licenses: str = None\n    headline: str = None\n    description: str = None\n    disclaimer: str = None\n    contact: ProfileContact = None\n    address: ProfileAddress = None\nsome shell stuff that works just fine:\n\nIn [1]: from profile_management.service.profiles.records import Profile\nIn [2]: x = Profile(description=\"Test stuff\")\n\nIn [3]: x.dict()\nOut[3]: \n{'first_name': None,\n 'last_name': None,\n 'title': None,\n 'company': None,\n 'licenses': None,\n 'headline': None,\n 'description': 'Test stuff',\n 'disclaimer': None,\n 'contact': None,\n 'address': None}\n\nIn [4]: x.dict(skip_defaults=True)\nOut[4]: {'description': 'Test stuff'}\n\nIn [5]: from fastapi.encoders import jsonable_encoder\n\nIn [6]: jsonable_encoder(x, skip_defaults=True)\nOut[6]: {'description': 'Test stuff'}\nNot sure why the same behavior isn't working at the router level\n\nEnvironment:\n\nOS: Windows\nFastAPI Version: 0.33.0\nPython version: 3.7.3\n"
        ]
    }
}