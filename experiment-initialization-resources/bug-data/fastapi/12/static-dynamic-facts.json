{
    "fastapi:12": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/fastapi_12/fastapi/security/http.py": {
            "buggy_functions": [
                {
                    "function_name": "__call__",
                    "function_code": "async def __call__(\n    self, request: Request\n) -> Optional[HTTPAuthorizationCredentials]:\n    authorization: str = request.headers.get(\"Authorization\")\n    scheme, credentials = get_authorization_scheme_param(authorization)\n    if not (authorization and scheme and credentials):\n        if self.auto_error:\n            raise HTTPException(\n                status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n            )\n        else:\n            return None\n    if scheme.lower() != \"bearer\":\n        raise HTTPException(\n            status_code=HTTP_403_FORBIDDEN,\n            detail=\"Invalid authentication credentials\",\n        )\n    return HTTPAuthorizationCredentials(scheme=scheme, credentials=credentials)\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 102,
                    "end_line": 119,
                    "variables": {
                        "Request": [
                            103
                        ],
                        "authorization": [
                            105,
                            106,
                            107
                        ],
                        "str": [
                            105
                        ],
                        "request.headers.get": [
                            105
                        ],
                        "request.headers": [
                            105
                        ],
                        "request": [
                            105
                        ],
                        "scheme": [
                            106,
                            107,
                            114,
                            119
                        ],
                        "credentials": [
                            106,
                            107,
                            119
                        ],
                        "get_authorization_scheme_param": [
                            106
                        ],
                        "self.auto_error": [
                            108
                        ],
                        "self": [
                            108
                        ],
                        "HTTPException": [
                            115,
                            109
                        ],
                        "HTTP_403_FORBIDDEN": [
                            116,
                            110
                        ],
                        "scheme.lower": [
                            114
                        ],
                        "HTTPAuthorizationCredentials": [
                            104,
                            119
                        ],
                        "Optional": [
                            104
                        ]
                    },
                    "filtered_variables": {
                        "Request": [
                            103
                        ],
                        "authorization": [
                            105,
                            106,
                            107
                        ],
                        "request.headers.get": [
                            105
                        ],
                        "request.headers": [
                            105
                        ],
                        "request": [
                            105
                        ],
                        "scheme": [
                            106,
                            107,
                            114,
                            119
                        ],
                        "credentials": [
                            106,
                            107,
                            119
                        ],
                        "get_authorization_scheme_param": [
                            106
                        ],
                        "self.auto_error": [
                            108
                        ],
                        "self": [
                            108
                        ],
                        "HTTPException": [
                            115,
                            109
                        ],
                        "HTTP_403_FORBIDDEN": [
                            116,
                            110
                        ],
                        "scheme.lower": [
                            114
                        ],
                        "HTTPAuthorizationCredentials": [
                            104,
                            119
                        ],
                        "Optional": [
                            104
                        ]
                    },
                    "diff_line_number": 115,
                    "class_data": {
                        "signature": "class HTTPBearer(HTTPBase)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, *, bearerFormat: str=None, scheme_name: str=None, auto_error: bool=True):\n    self.model = HTTPBearerModel(bearerFormat=bearerFormat)\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error",
                            "async def __call__(self, request: Request) -> Optional[HTTPAuthorizationCredentials]:\n    authorization: str = request.headers.get('Authorization')\n    (scheme, credentials) = get_authorization_scheme_param(authorization)\n    if not (authorization and scheme and credentials):\n        if self.auto_error:\n            raise HTTPException(status_code=HTTP_403_FORBIDDEN, detail='Not authenticated')\n        else:\n            return None\n    if scheme.lower() != 'bearer':\n        raise HTTPException(status_code=HTTP_403_FORBIDDEN, detail='Invalid authentication credentials')\n    return HTTPAuthorizationCredentials(scheme=scheme, credentials=credentials)"
                        ],
                        "constructor_variables": [
                            "self.model = HTTPBearerModel(bearerFormat=bearerFormat)",
                            "self.scheme_name = scheme_name or self.__class__.__name__",
                            "self.auto_error = auto_error"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self)",
                            "__call__(self, request: Request) -> Optional[HTTPAuthorizationCredentials]"
                        ],
                        "class_level_variable_names": [],
                        "constructor_variable_names": [
                            "scheme_name",
                            "model",
                            "auto_error"
                        ]
                    },
                    "used_imports": [
                        "from typing import Optional",
                        "from fastapi.exceptions import HTTPException",
                        "from fastapi.security.utils import get_authorization_scheme_param",
                        "from starlette.requests import Request",
                        "from starlette.status import HTTP_401_UNAUTHORIZED, HTTP_403_FORBIDDEN"
                    ],
                    "variable_values": [
                        [
                            {
                                "Request": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "authorization": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "request.headers.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "request.headers": {
                                    "variable_value": "Headers({'host': 'testserver', 'user-agent': 'testclient', 'accept-encoding': 'gzip, deflate', 'accept': '*/*', 'connection': 'keep-alive', 'authorization': 'Basic notreally'})",
                                    "variable_type": "Headers",
                                    "variable_shape": null
                                },
                                "request": {
                                    "variable_value": "<starlette.requests.Request object at 0x7fae09690280>",
                                    "variable_type": "Request",
                                    "variable_shape": null
                                },
                                "scheme": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "credentials": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get_authorization_scheme_param": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.auto_error": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<fastapi.security.http.HTTPBearer object at 0x7fae09686fd0>",
                                    "variable_type": "HTTPBearer",
                                    "variable_shape": null
                                },
                                "HTTPException": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "HTTP_403_FORBIDDEN": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "scheme.lower": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "HTTPAuthorizationCredentials": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "Request": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "authorization": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "request.headers.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "request.headers": {
                                    "variable_value": "Headers({'host': 'testserver', 'user-agent': 'testclient', 'accept-encoding': 'gzip, deflate', 'accept': '*/*', 'connection': 'keep-alive', 'authorization': 'Basic notreally'})",
                                    "variable_type": "Headers",
                                    "variable_shape": null
                                },
                                "request": {
                                    "variable_value": "<starlette.requests.Request object at 0x7effd5c96400>",
                                    "variable_type": "Request",
                                    "variable_shape": null
                                },
                                "scheme": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "credentials": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get_authorization_scheme_param": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.auto_error": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<fastapi.security.http.HTTPBearer object at 0x7effd5c8ff10>",
                                    "variable_type": "HTTPBearer",
                                    "variable_shape": null
                                },
                                "HTTPException": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "HTTP_403_FORBIDDEN": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "scheme.lower": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "HTTPAuthorizationCredentials": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Request": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "authorization": {
                                    "variable_value": "'Basic notreally'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "request.headers.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "request.headers": {
                                    "variable_value": "Headers({'host': 'testserver', 'user-agent': 'testclient', 'accept-encoding': 'gzip, deflate', 'accept': '*/*', 'connection': 'keep-alive', 'authorization': 'Basic notreally'})",
                                    "variable_type": "Headers",
                                    "variable_shape": null
                                },
                                "request": {
                                    "variable_value": "<starlette.requests.Request object at 0x7effd5c96400>",
                                    "variable_type": "Request",
                                    "variable_shape": null
                                },
                                "scheme": {
                                    "variable_value": "'Basic'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "credentials": {
                                    "variable_value": "'notreally'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "get_authorization_scheme_param": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.auto_error": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<fastapi.security.http.HTTPBearer object at 0x7effd5c8ff10>",
                                    "variable_type": "HTTPBearer",
                                    "variable_shape": null
                                },
                                "HTTPException": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "HTTP_403_FORBIDDEN": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "scheme.lower": {
                                    "variable_value": "<built-in method lower of str object at 0x7effd5c50c70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "HTTPAuthorizationCredentials": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": {
                "file_scope_functions": [],
                "file_scope_classes": [
                    {
                        "class_declaration": "class HTTPBasicCredentials:",
                        "functions": []
                    },
                    {
                        "class_declaration": "class HTTPAuthorizationCredentials:",
                        "functions": []
                    },
                    {
                        "class_declaration": "class HTTPBase:",
                        "functions": [
                            {
                                "code": "def __init__(\n    self, *, scheme: str, scheme_name: str = None, auto_error: bool = True\n):\n    self.model = HTTPBaseModel(scheme=scheme)\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error",
                                "signature": "__init__(self)"
                            },
                            {
                                "code": "async def __call__(\n    self, request: Request\n) -> Optional[HTTPAuthorizationCredentials]:\n    authorization: str = request.headers.get(\"Authorization\")\n    scheme, credentials = get_authorization_scheme_param(authorization)\n    if not (authorization and scheme and credentials):\n        if self.auto_error:\n            raise HTTPException(\n                status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n            )\n        else:\n            return None\n    return HTTPAuthorizationCredentials(scheme=scheme, credentials=credentials)",
                                "signature": "__call__(self, request: Request) -> Optional[HTTPAuthorizationCredentials]"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class HTTPBasic:",
                        "functions": [
                            {
                                "code": "def __init__(\n    self, *, scheme_name: str = None, realm: str = None, auto_error: bool = True\n):\n    self.model = HTTPBaseModel(scheme=\"basic\")\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.realm = realm\n    self.auto_error = auto_error",
                                "signature": "__init__(self)"
                            },
                            {
                                "code": "async def __call__(self, request: Request) -> Optional[HTTPBasicCredentials]:\n    authorization: str = request.headers.get(\"Authorization\")\n    scheme, param = get_authorization_scheme_param(authorization)\n    if self.realm:\n        unauthorized_headers = {\"WWW-Authenticate\": f'Basic realm=\"{self.realm}\"'}\n    else:\n        unauthorized_headers = {\"WWW-Authenticate\": \"Basic\"}\n    invalid_user_credentials_exc = HTTPException(\n        status_code=HTTP_401_UNAUTHORIZED,\n        detail=\"Invalid authentication credentials\",\n        headers=unauthorized_headers,\n    )\n    if not authorization or scheme.lower() != \"basic\":\n        if self.auto_error:\n            raise HTTPException(\n                status_code=HTTP_401_UNAUTHORIZED,\n                detail=\"Not authenticated\",\n                headers=unauthorized_headers,\n            )\n        else:\n            return None\n    try:\n        data = b64decode(param).decode(\"ascii\")\n    except (ValueError, UnicodeDecodeError, binascii.Error):\n        raise invalid_user_credentials_exc\n    username, separator, password = data.partition(\":\")\n    if not (separator):\n        raise invalid_user_credentials_exc\n    return HTTPBasicCredentials(username=username, password=password)",
                                "signature": "__call__(self, request: Request) -> Optional[HTTPBasicCredentials]"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class HTTPBearer:",
                        "functions": [
                            {
                                "code": "def __init__(\n    self,\n    *,\n    bearerFormat: str = None,\n    scheme_name: str = None,\n    auto_error: bool = True,\n):\n    self.model = HTTPBearerModel(bearerFormat=bearerFormat)\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error",
                                "signature": "__init__(self)"
                            },
                            {
                                "code": "async def __call__(\n    self, request: Request\n) -> Optional[HTTPAuthorizationCredentials]:\n    authorization: str = request.headers.get(\"Authorization\")\n    scheme, credentials = get_authorization_scheme_param(authorization)\n    if not (authorization and scheme and credentials):\n        if self.auto_error:\n            raise HTTPException(\n                status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n            )\n        else:\n            return None\n    if scheme.lower() != \"bearer\":\n        raise HTTPException(\n            status_code=HTTP_403_FORBIDDEN,\n            detail=\"Invalid authentication credentials\",\n        )\n    return HTTPAuthorizationCredentials(scheme=scheme, credentials=credentials)",
                                "signature": "__call__(self, request: Request) -> Optional[HTTPAuthorizationCredentials]"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class HTTPDigest:",
                        "functions": [
                            {
                                "code": "def __init__(self, *, scheme_name: str = None, auto_error: bool = True):\n    self.model = HTTPBaseModel(scheme=\"digest\")\n    self.scheme_name = scheme_name or self.__class__.__name__\n    self.auto_error = auto_error",
                                "signature": "__init__(self)"
                            },
                            {
                                "code": "async def __call__(\n    self, request: Request\n) -> Optional[HTTPAuthorizationCredentials]:\n    authorization: str = request.headers.get(\"Authorization\")\n    scheme, credentials = get_authorization_scheme_param(authorization)\n    if not (authorization and scheme and credentials):\n        if self.auto_error:\n            raise HTTPException(\n                status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n            )\n        else:\n            return None\n    if scheme.lower() != \"digest\":\n        raise HTTPException(\n            status_code=HTTP_403_FORBIDDEN,\n            detail=\"Invalid authentication credentials\",\n        )\n    return HTTPAuthorizationCredentials(scheme=scheme, credentials=credentials)",
                                "signature": "__call__(self, request: Request) -> Optional[HTTPAuthorizationCredentials]"
                            }
                        ]
                    }
                ]
            },
            "variables_in_file": {
                "BaseModel": [
                    17,
                    22
                ],
                "username": [
                    18,
                    84,
                    87
                ],
                "str": [
                    131,
                    38,
                    105,
                    18,
                    19,
                    52,
                    23,
                    24,
                    123,
                    60,
                    29,
                    94,
                    95
                ],
                "password": [
                    19,
                    84,
                    87
                ],
                "scheme": [
                    132,
                    133,
                    39,
                    40,
                    71,
                    106,
                    107,
                    140,
                    47,
                    145,
                    114,
                    119,
                    23,
                    61,
                    31
                ],
                "credentials": [
                    132,
                    133,
                    39,
                    40,
                    106,
                    107,
                    47,
                    145,
                    119,
                    24
                ],
                "SecurityBase": [
                    27
                ],
                "bool": [
                    96,
                    123,
                    52,
                    29
                ],
                "self.model": [
                    98,
                    124,
                    54,
                    31
                ],
                "self": [
                    134,
                    31,
                    32,
                    33,
                    41,
                    54,
                    55,
                    56,
                    57,
                    62,
                    63,
                    72,
                    98,
                    99,
                    100,
                    108,
                    124,
                    125,
                    126
                ],
                "HTTPBaseModel": [
                    124,
                    54,
                    31
                ],
                "self.scheme_name": [
                    32,
                    99,
                    125,
                    55
                ],
                "scheme_name": [
                    32,
                    99,
                    125,
                    55
                ],
                "self.__class__.__name__": [
                    32,
                    99,
                    125,
                    55
                ],
                "self.__class__": [
                    32,
                    99,
                    125,
                    55
                ],
                "self.auto_error": [
                    33,
                    100,
                    134,
                    72,
                    41,
                    108,
                    57,
                    126
                ],
                "auto_error": [
                    33,
                    100,
                    126,
                    57
                ],
                "Request": [
                    129,
                    59,
                    36,
                    103
                ],
                "authorization": [
                    131,
                    132,
                    133,
                    38,
                    39,
                    40,
                    71,
                    105,
                    106,
                    107,
                    60,
                    61
                ],
                "request.headers.get": [
                    105,
                    131,
                    60,
                    38
                ],
                "request.headers": [
                    105,
                    131,
                    60,
                    38
                ],
                "request": [
                    105,
                    131,
                    60,
                    38
                ],
                "get_authorization_scheme_param": [
                    106,
                    132,
                    61,
                    39
                ],
                "HTTPException": [
                    66,
                    135,
                    73,
                    42,
                    109,
                    141,
                    115
                ],
                "HTTP_403_FORBIDDEN": [
                    136,
                    43,
                    142,
                    110,
                    116
                ],
                "HTTPAuthorizationCredentials": [
                    130,
                    37,
                    104,
                    47,
                    145,
                    119
                ],
                "Optional": [
                    104,
                    130,
                    59,
                    37
                ],
                "HTTPBase": [
                    50,
                    90,
                    122
                ],
                "self.realm": [
                    56,
                    62,
                    63
                ],
                "realm": [
                    56
                ],
                "param": [
                    81,
                    61
                ],
                "unauthorized_headers": [
                    65,
                    76,
                    69,
                    63
                ],
                "invalid_user_credentials_exc": [
                    66,
                    83,
                    86
                ],
                "HTTP_401_UNAUTHORIZED": [
                    74,
                    67
                ],
                "scheme.lower": [
                    114,
                    140,
                    71
                ],
                "data": [
                    81,
                    84
                ],
                "decode": [
                    81
                ],
                "b64decode": [
                    81
                ],
                "ValueError": [
                    82
                ],
                "UnicodeDecodeError": [
                    82
                ],
                "binascii.Error": [
                    82
                ],
                "binascii": [
                    82
                ],
                "separator": [
                    84,
                    85
                ],
                "data.partition": [
                    84
                ],
                "HTTPBasicCredentials": [
                    59,
                    87
                ],
                "HTTPBearerModel": [
                    98
                ],
                "bearerFormat": [
                    98
                ]
            },
            "filtered_variables_in_file": {
                "BaseModel": [
                    17,
                    22
                ],
                "username": [
                    18,
                    84,
                    87
                ],
                "password": [
                    19,
                    84,
                    87
                ],
                "scheme": [
                    132,
                    133,
                    39,
                    40,
                    71,
                    106,
                    107,
                    140,
                    47,
                    145,
                    114,
                    119,
                    23,
                    61,
                    31
                ],
                "credentials": [
                    132,
                    133,
                    39,
                    40,
                    106,
                    107,
                    47,
                    145,
                    119,
                    24
                ],
                "SecurityBase": [
                    27
                ],
                "self.model": [
                    98,
                    124,
                    54,
                    31
                ],
                "self": [
                    134,
                    31,
                    32,
                    33,
                    41,
                    54,
                    55,
                    56,
                    57,
                    62,
                    63,
                    72,
                    98,
                    99,
                    100,
                    108,
                    124,
                    125,
                    126
                ],
                "HTTPBaseModel": [
                    124,
                    54,
                    31
                ],
                "self.scheme_name": [
                    32,
                    99,
                    125,
                    55
                ],
                "scheme_name": [
                    32,
                    99,
                    125,
                    55
                ],
                "self.__class__.__name__": [
                    32,
                    99,
                    125,
                    55
                ],
                "self.__class__": [
                    32,
                    99,
                    125,
                    55
                ],
                "self.auto_error": [
                    33,
                    100,
                    134,
                    72,
                    41,
                    108,
                    57,
                    126
                ],
                "auto_error": [
                    33,
                    100,
                    126,
                    57
                ],
                "Request": [
                    129,
                    59,
                    36,
                    103
                ],
                "authorization": [
                    131,
                    132,
                    133,
                    38,
                    39,
                    40,
                    71,
                    105,
                    106,
                    107,
                    60,
                    61
                ],
                "request.headers.get": [
                    105,
                    131,
                    60,
                    38
                ],
                "request.headers": [
                    105,
                    131,
                    60,
                    38
                ],
                "request": [
                    105,
                    131,
                    60,
                    38
                ],
                "get_authorization_scheme_param": [
                    106,
                    132,
                    61,
                    39
                ],
                "HTTPException": [
                    66,
                    135,
                    73,
                    42,
                    109,
                    141,
                    115
                ],
                "HTTP_403_FORBIDDEN": [
                    136,
                    43,
                    142,
                    110,
                    116
                ],
                "HTTPAuthorizationCredentials": [
                    130,
                    37,
                    104,
                    47,
                    145,
                    119
                ],
                "Optional": [
                    104,
                    130,
                    59,
                    37
                ],
                "HTTPBase": [
                    50,
                    90,
                    122
                ],
                "self.realm": [
                    56,
                    62,
                    63
                ],
                "realm": [
                    56
                ],
                "param": [
                    81,
                    61
                ],
                "unauthorized_headers": [
                    65,
                    76,
                    69,
                    63
                ],
                "invalid_user_credentials_exc": [
                    66,
                    83,
                    86
                ],
                "HTTP_401_UNAUTHORIZED": [
                    74,
                    67
                ],
                "scheme.lower": [
                    114,
                    140,
                    71
                ],
                "data": [
                    81,
                    84
                ],
                "decode": [
                    81
                ],
                "b64decode": [
                    81
                ],
                "binascii.Error": [
                    82
                ],
                "binascii": [
                    82
                ],
                "separator": [
                    84,
                    85
                ],
                "data.partition": [
                    84
                ],
                "HTTPBasicCredentials": [
                    59,
                    87
                ],
                "HTTPBearerModel": [
                    98
                ],
                "bearerFormat": [
                    98
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/fastapi_12/tests/test_security_http_bearer_optional.py",
                "test_function": "test_security_http_bearer_incorrect_scheme_credentials",
                "test_function_code": "def test_security_http_bearer_incorrect_scheme_credentials():\n    response = client.get(\"/users/me\", headers={\"Authorization\": \"Basic notreally\"})\n    assert response.status_code == 200\n    assert response.json() == {\"msg\": \"Create an account first\"}",
                "test_error": "assert 403 == 200   +403   -200",
                "full_test_error": "def test_security_http_bearer_incorrect_scheme_credentials():\n        response = client.get(\"/users/me\", headers={\"Authorization\": \"Basic notreally\"})\n>       assert response.status_code == 200\nE       assert 403 == 200\nE         +403\nE         -200\n\ntests/test_security_http_bearer_optional.py:67: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}