{
    "fastapi:6": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/fastapi_6/fastapi/dependencies/utils.py": {
            "buggy_functions": [
                {
                    "function_name": "request_body_to_args",
                    "function_code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    if required_params:\n        field = required_params[0]\n        field_info = get_field_info(field)\n        embed = getattr(field_info, \"embed\", None)\n        if len(required_params) == 1 and not embed:\n            received_body = {field.alias: received_body}\n        for field in required_params:\n            value: Any = None\n            if received_body is not None:\n                if field.shape in sequence_shapes and isinstance(\n                    received_body, FormData\n                ):\n                    value = received_body.getlist(field.alias)\n                else:\n                    value = received_body.get(field.alias)\n            if (\n                value is None\n                or (isinstance(field_info, params.Form) and value == \"\")\n                or (\n                    isinstance(field_info, params.Form)\n                    and field.shape in sequence_shapes\n                    and len(value) == 0\n                )\n            ):\n                if field.required:\n                    if PYDANTIC_1:\n                        errors.append(\n                            ErrorWrapper(MissingError(), loc=(\"body\", field.alias))\n                        )\n                    else:  # pragma: nocover\n                        errors.append(\n                            ErrorWrapper(  # type: ignore\n                                MissingError(),\n                                loc=(\"body\", field.alias),\n                                config=BaseConfig,\n                            )\n                        )\n                else:\n                    values[field.name] = deepcopy(field.default)\n                continue\n            if (\n                isinstance(field_info, params.File)\n                and lenient_issubclass(field.type_, bytes)\n                and isinstance(value, UploadFile)\n            ):\n                value = await value.read()\n            elif (\n                field.shape in sequence_shapes\n                and isinstance(field_info, params.File)\n                and lenient_issubclass(field.type_, bytes)\n                and isinstance(value, sequence_types)\n            ):\n                awaitables = [sub_value.read() for sub_value in value]\n                contents = await asyncio.gather(*awaitables)\n                value = sequence_shape_to_type[field.shape](contents)\n            v_, errors_ = field.validate(value, values, loc=(\"body\", field.alias))\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            else:\n                values[field.name] = v_\n    return values, errors\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 617,
                    "end_line": 685,
                    "variables": {
                        "List": [
                            618,
                            620
                        ],
                        "ModelField": [
                            618
                        ],
                        "Optional": [
                            619
                        ],
                        "Union": [
                            619
                        ],
                        "Dict": [
                            619,
                            620
                        ],
                        "str": [
                            619,
                            620
                        ],
                        "Any": [
                            619,
                            620,
                            630
                        ],
                        "FormData": [
                            633,
                            619
                        ],
                        "values": [
                            678,
                            684,
                            621,
                            685,
                            661
                        ],
                        "errors": [
                            680,
                            649,
                            682,
                            653,
                            622,
                            685
                        ],
                        "required_params": [
                            624,
                            627,
                            629,
                            623
                        ],
                        "field": [
                            672,
                            643,
                            677,
                            678,
                            647,
                            650,
                            684,
                            624,
                            625,
                            656,
                            628,
                            629,
                            661,
                            632,
                            665,
                            635,
                            637,
                            670
                        ],
                        "field_info": [
                            640,
                            642,
                            625,
                            626,
                            664,
                            671
                        ],
                        "get_field_info": [
                            625
                        ],
                        "embed": [
                            626,
                            627
                        ],
                        "getattr": [
                            626
                        ],
                        "len": [
                            627,
                            644
                        ],
                        "received_body": [
                            628,
                            631,
                            633,
                            635,
                            637
                        ],
                        "field.alias": [
                            678,
                            650,
                            656,
                            628,
                            635,
                            637
                        ],
                        "value": [
                            640,
                            673,
                            675,
                            644,
                            677,
                            678,
                            630,
                            666,
                            635,
                            668,
                            637,
                            639
                        ],
                        "field.shape": [
                            632,
                            643,
                            677,
                            670
                        ],
                        "sequence_shapes": [
                            632,
                            643,
                            670
                        ],
                        "isinstance": [
                            640,
                            673,
                            642,
                            679,
                            681,
                            664,
                            632,
                            666,
                            671
                        ],
                        "received_body.getlist": [
                            635
                        ],
                        "received_body.get": [
                            637
                        ],
                        "params.Form": [
                            640,
                            642
                        ],
                        "params": [
                            640,
                            642,
                            664,
                            671
                        ],
                        "field.required": [
                            647
                        ],
                        "PYDANTIC_1": [
                            648
                        ],
                        "errors.append": [
                            680,
                            649,
                            653
                        ],
                        "ErrorWrapper": [
                            650,
                            620,
                            654,
                            679
                        ],
                        "MissingError": [
                            650,
                            655
                        ],
                        "BaseConfig": [
                            657
                        ],
                        "field.name": [
                            684,
                            661
                        ],
                        "deepcopy": [
                            661
                        ],
                        "field.default": [
                            661
                        ],
                        "params.File": [
                            664,
                            671
                        ],
                        "lenient_issubclass": [
                            672,
                            665
                        ],
                        "field.type_": [
                            672,
                            665
                        ],
                        "bytes": [
                            672,
                            665
                        ],
                        "UploadFile": [
                            666
                        ],
                        "value.read": [
                            668
                        ],
                        "sequence_types": [
                            673
                        ],
                        "awaitables": [
                            675,
                            676
                        ],
                        "sub_value.read": [
                            675
                        ],
                        "sub_value": [
                            675
                        ],
                        "contents": [
                            676,
                            677
                        ],
                        "asyncio.gather": [
                            676
                        ],
                        "asyncio": [
                            676
                        ],
                        "sequence_shape_to_type": [
                            677
                        ],
                        "v_": [
                            684,
                            678
                        ],
                        "errors_": [
                            678,
                            679,
                            680,
                            681,
                            682
                        ],
                        "field.validate": [
                            678
                        ],
                        "list": [
                            681
                        ],
                        "errors.extend": [
                            682
                        ],
                        "Tuple": [
                            620
                        ]
                    },
                    "filtered_variables": {
                        "List": [
                            618,
                            620
                        ],
                        "ModelField": [
                            618
                        ],
                        "Optional": [
                            619
                        ],
                        "Union": [
                            619
                        ],
                        "Dict": [
                            619,
                            620
                        ],
                        "Any": [
                            619,
                            620,
                            630
                        ],
                        "FormData": [
                            633,
                            619
                        ],
                        "values": [
                            678,
                            684,
                            621,
                            685,
                            661
                        ],
                        "errors": [
                            680,
                            649,
                            682,
                            653,
                            622,
                            685
                        ],
                        "required_params": [
                            624,
                            627,
                            629,
                            623
                        ],
                        "field": [
                            672,
                            643,
                            677,
                            678,
                            647,
                            650,
                            684,
                            624,
                            625,
                            656,
                            628,
                            629,
                            661,
                            632,
                            665,
                            635,
                            637,
                            670
                        ],
                        "field_info": [
                            640,
                            642,
                            625,
                            626,
                            664,
                            671
                        ],
                        "get_field_info": [
                            625
                        ],
                        "embed": [
                            626,
                            627
                        ],
                        "received_body": [
                            628,
                            631,
                            633,
                            635,
                            637
                        ],
                        "field.alias": [
                            678,
                            650,
                            656,
                            628,
                            635,
                            637
                        ],
                        "value": [
                            640,
                            673,
                            675,
                            644,
                            677,
                            678,
                            630,
                            666,
                            635,
                            668,
                            637,
                            639
                        ],
                        "field.shape": [
                            632,
                            643,
                            677,
                            670
                        ],
                        "sequence_shapes": [
                            632,
                            643,
                            670
                        ],
                        "received_body.getlist": [
                            635
                        ],
                        "received_body.get": [
                            637
                        ],
                        "params.Form": [
                            640,
                            642
                        ],
                        "params": [
                            640,
                            642,
                            664,
                            671
                        ],
                        "field.required": [
                            647
                        ],
                        "PYDANTIC_1": [
                            648
                        ],
                        "errors.append": [
                            680,
                            649,
                            653
                        ],
                        "ErrorWrapper": [
                            650,
                            620,
                            654,
                            679
                        ],
                        "MissingError": [
                            650,
                            655
                        ],
                        "BaseConfig": [
                            657
                        ],
                        "field.name": [
                            684,
                            661
                        ],
                        "deepcopy": [
                            661
                        ],
                        "field.default": [
                            661
                        ],
                        "params.File": [
                            664,
                            671
                        ],
                        "lenient_issubclass": [
                            672,
                            665
                        ],
                        "field.type_": [
                            672,
                            665
                        ],
                        "UploadFile": [
                            666
                        ],
                        "value.read": [
                            668
                        ],
                        "sequence_types": [
                            673
                        ],
                        "awaitables": [
                            675,
                            676
                        ],
                        "sub_value.read": [
                            675
                        ],
                        "sub_value": [
                            675
                        ],
                        "contents": [
                            676,
                            677
                        ],
                        "asyncio.gather": [
                            676
                        ],
                        "asyncio": [
                            676
                        ],
                        "sequence_shape_to_type": [
                            677
                        ],
                        "v_": [
                            684,
                            678
                        ],
                        "errors_": [
                            678,
                            679,
                            680,
                            681,
                            682
                        ],
                        "field.validate": [
                            678
                        ],
                        "errors.extend": [
                            682
                        ],
                        "Tuple": [
                            620
                        ]
                    },
                    "diff_line_number": 632,
                    "class_data": null,
                    "used_imports": [
                        "import asyncio",
                        "from copy import deepcopy",
                        "from typing import Any, Callable, Dict, List, Mapping, Optional, Sequence, Tuple, Type, Union, cast",
                        "from fastapi import params",
                        "from fastapi.utils import PYDANTIC_1, get_field_info, get_path_param_names",
                        "from pydantic import BaseConfig, BaseModel, create_model",
                        "from pydantic.error_wrappers import ErrorWrapper",
                        "from pydantic.errors import MissingError",
                        "from pydantic.utils import lenient_issubclass",
                        "from starlette.datastructures import FormData, Headers, QueryParams, UploadFile",
                        "from pydantic.fields import Field as ModelField"
                    ],
                    "variable_values": [
                        [
                            {
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ModelField": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FormData": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "required_params": {
                                    "variable_value": "[ModelField(name='items', type=list, required=True)]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get_field_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embed": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "received_body": {
                                    "variable_value": "FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])",
                                    "variable_type": "FormData",
                                    "variable_shape": null
                                },
                                "field.alias": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_shapes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "received_body.getlist": {
                                    "variable_value": "<bound method ImmutableMultiDict.getlist of FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "received_body.get": {
                                    "variable_value": "<bound method ImmutableMultiDict.get of FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "params.Form": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.required": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PYDANTIC_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ErrorWrapper": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MissingError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "BaseConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "deepcopy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.default": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params.File": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lenient_issubclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UploadFile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_types": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "awaitables": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sub_value.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sub_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio.gather": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_shape_to_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.validate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ModelField": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FormData": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "errors": {
                                    "variable_value": "[ErrorWrapper(exc=ListError(), loc=('body', 'items'))]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "required_params": {
                                    "variable_value": "[ModelField(name='items', type=list, required=True)]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "field": {
                                    "variable_value": "ModelField(name='items', type=list, required=True)",
                                    "variable_type": "ModelField",
                                    "variable_shape": "1"
                                },
                                "field_info": {
                                    "variable_value": "Form(default=Ellipsis, extra={})",
                                    "variable_type": "Form",
                                    "variable_shape": null
                                },
                                "get_field_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embed": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "received_body": {
                                    "variable_value": "FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])",
                                    "variable_type": "FormData",
                                    "variable_shape": null
                                },
                                "field.alias": {
                                    "variable_value": "'items'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "value": {
                                    "variable_value": "'third'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "field.shape": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "sequence_shapes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "received_body.getlist": {
                                    "variable_value": "<bound method ImmutableMultiDict.getlist of FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "received_body.get": {
                                    "variable_value": "<bound method ImmutableMultiDict.get of FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "params.Form": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.required": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "PYDANTIC_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors.append": {
                                    "variable_value": "<built-in method append of list object at 0x7f39c889d080>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "ErrorWrapper": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MissingError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "BaseConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.name": {
                                    "variable_value": "'items'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "deepcopy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.default": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "params.File": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lenient_issubclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": "<class 'list'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "UploadFile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.read": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "sequence_types": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "awaitables": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sub_value.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sub_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio.gather": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_shape_to_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v_": {
                                    "variable_value": "'third'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "errors_": {
                                    "variable_value": "ErrorWrapper(exc=ListError(), loc=('body', 'items'))",
                                    "variable_type": "ErrorWrapper",
                                    "variable_shape": null
                                },
                                "field.validate": {
                                    "variable_value": "<bound method ModelField.validate of ModelField(name='items', type=list, required=True)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "errors.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x7f39c889d080>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ModelField": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FormData": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "required_params": {
                                    "variable_value": "[ModelField(name='items', type=set, required=True)]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get_field_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embed": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "received_body": {
                                    "variable_value": "FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])",
                                    "variable_type": "FormData",
                                    "variable_shape": null
                                },
                                "field.alias": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_shapes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "received_body.getlist": {
                                    "variable_value": "<bound method ImmutableMultiDict.getlist of FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "received_body.get": {
                                    "variable_value": "<bound method ImmutableMultiDict.get of FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "params.Form": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.required": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PYDANTIC_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ErrorWrapper": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MissingError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "BaseConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "deepcopy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.default": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params.File": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lenient_issubclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UploadFile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_types": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "awaitables": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sub_value.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sub_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio.gather": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_shape_to_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.validate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ModelField": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FormData": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "errors": {
                                    "variable_value": "[ErrorWrapper(exc=SetError(), loc=('body', 'items'))]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "required_params": {
                                    "variable_value": "[ModelField(name='items', type=set, required=True)]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "field": {
                                    "variable_value": "ModelField(name='items', type=set, required=True)",
                                    "variable_type": "ModelField",
                                    "variable_shape": "1"
                                },
                                "field_info": {
                                    "variable_value": "Form(default=Ellipsis, extra={})",
                                    "variable_type": "Form",
                                    "variable_shape": null
                                },
                                "get_field_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embed": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "received_body": {
                                    "variable_value": "FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])",
                                    "variable_type": "FormData",
                                    "variable_shape": null
                                },
                                "field.alias": {
                                    "variable_value": "'items'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "value": {
                                    "variable_value": "'third'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "field.shape": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "sequence_shapes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "received_body.getlist": {
                                    "variable_value": "<bound method ImmutableMultiDict.getlist of FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "received_body.get": {
                                    "variable_value": "<bound method ImmutableMultiDict.get of FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "params.Form": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.required": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "PYDANTIC_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors.append": {
                                    "variable_value": "<built-in method append of list object at 0x7f39c8867280>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "ErrorWrapper": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MissingError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "BaseConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.name": {
                                    "variable_value": "'items'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "deepcopy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.default": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "params.File": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lenient_issubclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": "<class 'set'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "UploadFile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.read": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "sequence_types": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "awaitables": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sub_value.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sub_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio.gather": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_shape_to_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v_": {
                                    "variable_value": "'third'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "errors_": {
                                    "variable_value": "ErrorWrapper(exc=SetError(), loc=('body', 'items'))",
                                    "variable_type": "ErrorWrapper",
                                    "variable_shape": null
                                },
                                "field.validate": {
                                    "variable_value": "<bound method ModelField.validate of ModelField(name='items', type=set, required=True)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "errors.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x7f39c8867280>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ModelField": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FormData": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "required_params": {
                                    "variable_value": "[ModelField(name='items', type=tuple, required=True)]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get_field_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embed": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "received_body": {
                                    "variable_value": "FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])",
                                    "variable_type": "FormData",
                                    "variable_shape": null
                                },
                                "field.alias": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_shapes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "received_body.getlist": {
                                    "variable_value": "<bound method ImmutableMultiDict.getlist of FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "received_body.get": {
                                    "variable_value": "<bound method ImmutableMultiDict.get of FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "params.Form": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.required": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PYDANTIC_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ErrorWrapper": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MissingError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "BaseConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "deepcopy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.default": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params.File": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lenient_issubclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UploadFile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_types": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "awaitables": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sub_value.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sub_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio.gather": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_shape_to_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.validate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ModelField": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FormData": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "errors": {
                                    "variable_value": "[ErrorWrapper(exc=TupleError(), loc=('body', 'items'))]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "required_params": {
                                    "variable_value": "[ModelField(name='items', type=tuple, required=True)]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "field": {
                                    "variable_value": "ModelField(name='items', type=tuple, required=True)",
                                    "variable_type": "ModelField",
                                    "variable_shape": "1"
                                },
                                "field_info": {
                                    "variable_value": "Form(default=Ellipsis, extra={})",
                                    "variable_type": "Form",
                                    "variable_shape": null
                                },
                                "get_field_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embed": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "received_body": {
                                    "variable_value": "FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])",
                                    "variable_type": "FormData",
                                    "variable_shape": null
                                },
                                "field.alias": {
                                    "variable_value": "'items'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "value": {
                                    "variable_value": "'third'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "field.shape": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "sequence_shapes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "received_body.getlist": {
                                    "variable_value": "<bound method ImmutableMultiDict.getlist of FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "received_body.get": {
                                    "variable_value": "<bound method ImmutableMultiDict.get of FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "params.Form": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.required": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "PYDANTIC_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors.append": {
                                    "variable_value": "<built-in method append of list object at 0x7f39c8868040>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "ErrorWrapper": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MissingError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "BaseConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.name": {
                                    "variable_value": "'items'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "deepcopy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.default": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "params.File": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lenient_issubclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": "<class 'tuple'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "UploadFile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.read": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "sequence_types": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "awaitables": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sub_value.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sub_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio.gather": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_shape_to_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v_": {
                                    "variable_value": "'third'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "errors_": {
                                    "variable_value": "ErrorWrapper(exc=TupleError(), loc=('body', 'items'))",
                                    "variable_type": "ErrorWrapper",
                                    "variable_shape": null
                                },
                                "field.validate": {
                                    "variable_value": "<bound method ModelField.validate of ModelField(name='items', type=tuple, required=True)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "errors.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x7f39c8868040>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ModelField": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FormData": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "required_params": {
                                    "variable_value": "[ModelField(name='items', type=list, required=True)]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get_field_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embed": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "received_body": {
                                    "variable_value": "FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])",
                                    "variable_type": "FormData",
                                    "variable_shape": null
                                },
                                "field.alias": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_shapes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_types": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "received_body.getlist": {
                                    "variable_value": "<bound method ImmutableMultiDict.getlist of FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "received_body.get": {
                                    "variable_value": "<bound method ImmutableMultiDict.get of FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "params.Form": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.required": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PYDANTIC_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ErrorWrapper": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MissingError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "BaseConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "deepcopy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.default": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params.File": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lenient_issubclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UploadFile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "awaitables": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sub_value.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sub_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio.gather": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_shape_to_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.validate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ModelField": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FormData": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "{'items': ['first', 'second', 'third']}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "errors": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "required_params": {
                                    "variable_value": "[ModelField(name='items', type=list, required=True)]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "field": {
                                    "variable_value": "ModelField(name='items', type=list, required=True)",
                                    "variable_type": "ModelField",
                                    "variable_shape": "1"
                                },
                                "field_info": {
                                    "variable_value": "Form(default=Ellipsis, extra={})",
                                    "variable_type": "Form",
                                    "variable_shape": null
                                },
                                "get_field_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embed": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "received_body": {
                                    "variable_value": "FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])",
                                    "variable_type": "FormData",
                                    "variable_shape": null
                                },
                                "field.alias": {
                                    "variable_value": "'items'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "value": {
                                    "variable_value": "['first', 'second', 'third']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "field.shape": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "sequence_shapes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": "<class 'list'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "sequence_types": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "received_body.getlist": {
                                    "variable_value": "<bound method ImmutableMultiDict.getlist of FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "received_body.get": {
                                    "variable_value": "<bound method ImmutableMultiDict.get of FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "params.Form": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.required": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "PYDANTIC_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors.append": {
                                    "variable_value": "<built-in method append of list object at 0x7f44e6d9e900>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "ErrorWrapper": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MissingError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "BaseConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.name": {
                                    "variable_value": "'items'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "deepcopy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.default": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "params.File": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lenient_issubclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UploadFile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.read": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "awaitables": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sub_value.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sub_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio.gather": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_shape_to_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v_": {
                                    "variable_value": "['first', 'second', 'third']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "errors_": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "field.validate": {
                                    "variable_value": "<bound method ModelField.validate of ModelField(name='items', type=list, required=True)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "errors.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x7f44e6d9e900>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ModelField": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FormData": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "required_params": {
                                    "variable_value": "[ModelField(name='items', type=set, required=True)]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get_field_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embed": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "received_body": {
                                    "variable_value": "FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])",
                                    "variable_type": "FormData",
                                    "variable_shape": null
                                },
                                "field.alias": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_shapes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_types": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "received_body.getlist": {
                                    "variable_value": "<bound method ImmutableMultiDict.getlist of FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "received_body.get": {
                                    "variable_value": "<bound method ImmutableMultiDict.get of FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "params.Form": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.required": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PYDANTIC_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ErrorWrapper": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MissingError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "BaseConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "deepcopy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.default": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params.File": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lenient_issubclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UploadFile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "awaitables": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sub_value.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sub_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio.gather": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_shape_to_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.validate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ModelField": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FormData": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "{'items': {'second', 'first', 'third'}}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "errors": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "required_params": {
                                    "variable_value": "[ModelField(name='items', type=set, required=True)]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "field": {
                                    "variable_value": "ModelField(name='items', type=set, required=True)",
                                    "variable_type": "ModelField",
                                    "variable_shape": "1"
                                },
                                "field_info": {
                                    "variable_value": "Form(default=Ellipsis, extra={})",
                                    "variable_type": "Form",
                                    "variable_shape": null
                                },
                                "get_field_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embed": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "received_body": {
                                    "variable_value": "FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])",
                                    "variable_type": "FormData",
                                    "variable_shape": null
                                },
                                "field.alias": {
                                    "variable_value": "'items'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "value": {
                                    "variable_value": "['first', 'second', 'third']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "field.shape": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "sequence_shapes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": "<class 'set'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "sequence_types": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "received_body.getlist": {
                                    "variable_value": "<bound method ImmutableMultiDict.getlist of FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "received_body.get": {
                                    "variable_value": "<bound method ImmutableMultiDict.get of FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "params.Form": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.required": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "PYDANTIC_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors.append": {
                                    "variable_value": "<built-in method append of list object at 0x7f44e6d420c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "ErrorWrapper": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MissingError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "BaseConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.name": {
                                    "variable_value": "'items'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "deepcopy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.default": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "params.File": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lenient_issubclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UploadFile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.read": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "awaitables": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sub_value.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sub_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio.gather": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_shape_to_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v_": {
                                    "variable_value": "{'second', 'first', 'third'}",
                                    "variable_type": "set",
                                    "variable_shape": "3"
                                },
                                "errors_": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "field.validate": {
                                    "variable_value": "<bound method ModelField.validate of ModelField(name='items', type=set, required=True)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "errors.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x7f44e6d420c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ModelField": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FormData": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "required_params": {
                                    "variable_value": "[ModelField(name='items', type=tuple, required=True)]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "field": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get_field_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embed": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "received_body": {
                                    "variable_value": "FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])",
                                    "variable_type": "FormData",
                                    "variable_shape": null
                                },
                                "field.alias": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_shapes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_types": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "received_body.getlist": {
                                    "variable_value": "<bound method ImmutableMultiDict.getlist of FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "received_body.get": {
                                    "variable_value": "<bound method ImmutableMultiDict.get of FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "params.Form": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.required": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PYDANTIC_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ErrorWrapper": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MissingError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "BaseConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "deepcopy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.default": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params.File": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lenient_issubclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UploadFile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "awaitables": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sub_value.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sub_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio.gather": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_shape_to_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.validate": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "List": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ModelField": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Union": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Dict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "FormData": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "{'items': ('first', 'second', 'third')}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "errors": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "required_params": {
                                    "variable_value": "[ModelField(name='items', type=tuple, required=True)]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "field": {
                                    "variable_value": "ModelField(name='items', type=tuple, required=True)",
                                    "variable_type": "ModelField",
                                    "variable_shape": "1"
                                },
                                "field_info": {
                                    "variable_value": "Form(default=Ellipsis, extra={})",
                                    "variable_type": "Form",
                                    "variable_shape": null
                                },
                                "get_field_info": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "embed": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "received_body": {
                                    "variable_value": "FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])",
                                    "variable_type": "FormData",
                                    "variable_shape": null
                                },
                                "field.alias": {
                                    "variable_value": "'items'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "value": {
                                    "variable_value": "['first', 'second', 'third']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "field.shape": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "sequence_shapes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.type_": {
                                    "variable_value": "<class 'tuple'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "sequence_types": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "received_body.getlist": {
                                    "variable_value": "<bound method ImmutableMultiDict.getlist of FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "received_body.get": {
                                    "variable_value": "<bound method ImmutableMultiDict.get of FormData([('items', 'first'), ('items', 'second'), ('items', 'third')])>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "params.Form": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "params": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.required": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "PYDANTIC_1": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "errors.append": {
                                    "variable_value": "<built-in method append of list object at 0x7f44e6d43d40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "ErrorWrapper": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "MissingError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "BaseConfig": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.name": {
                                    "variable_value": "'items'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "deepcopy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "field.default": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "params.File": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lenient_issubclass": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "UploadFile": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.read": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "awaitables": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sub_value.read": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sub_value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "contents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio.gather": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "asyncio": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sequence_shape_to_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v_": {
                                    "variable_value": "('first', 'second', 'third')",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "errors_": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "field.validate": {
                                    "variable_value": "<bound method ModelField.validate of ModelField(name='items', type=tuple, required=True)>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "errors.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x7f44e6d43d40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "Tuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": {
                "file_scope_functions": [
                    {
                        "code": "def get_param_sub_dependant(\n    *, param: inspect.Parameter, path: str, security_scopes: List[str] = None\n) -> Dependant:\n    depends: params.Depends = param.default\n    if depends.dependency:\n        dependency = depends.dependency\n    else:\n        dependency = param.annotation\n    return get_sub_dependant(\n        depends=depends,\n        dependency=dependency,\n        path=path,\n        name=param.name,\n        security_scopes=security_scopes,\n    )",
                        "signature": "get_param_sub_dependant() -> Dependant"
                    },
                    {
                        "code": "def get_parameterless_sub_dependant(*, depends: params.Depends, path: str) -> Dependant:\n    assert callable(\n        depends.dependency\n    ), \"A parameter-less dependency must have a callable dependency\"\n    return get_sub_dependant(depends=depends, dependency=depends.dependency, path=path)",
                        "signature": "get_parameterless_sub_dependant() -> Dependant"
                    },
                    {
                        "code": "def get_sub_dependant(\n    *,\n    depends: params.Depends,\n    dependency: Callable,\n    path: str,\n    name: str = None,\n    security_scopes: List[str] = None,\n) -> Dependant:\n    security_requirement = None\n    security_scopes = security_scopes or []\n    if isinstance(depends, params.Security):\n        dependency_scopes = depends.scopes\n        security_scopes.extend(dependency_scopes)\n    if isinstance(dependency, SecurityBase):\n        use_scopes: List[str] = []\n        if isinstance(dependency, (OAuth2, OpenIdConnect)):\n            use_scopes = security_scopes\n        security_requirement = SecurityRequirement(\n            security_scheme=dependency, scopes=use_scopes\n        )\n    sub_dependant = get_dependant(\n        path=path,\n        call=dependency,\n        name=name,\n        security_scopes=security_scopes,\n        use_cache=depends.use_cache,\n    )\n    if security_requirement:\n        sub_dependant.security_requirements.append(security_requirement)\n    sub_dependant.security_scopes = security_scopes\n    return sub_dependant",
                        "signature": "get_sub_dependant() -> Dependant"
                    },
                    {
                        "code": "def get_flat_dependant(\n    dependant: Dependant, *, skip_repeats: bool = False, visited: List[CacheKey] = None\n) -> Dependant:\n    if visited is None:\n        visited = []\n    visited.append(dependant.cache_key)\n\n    flat_dependant = Dependant(\n        path_params=dependant.path_params.copy(),\n        query_params=dependant.query_params.copy(),\n        header_params=dependant.header_params.copy(),\n        cookie_params=dependant.cookie_params.copy(),\n        body_params=dependant.body_params.copy(),\n        security_schemes=dependant.security_requirements.copy(),\n        use_cache=dependant.use_cache,\n        path=dependant.path,\n    )\n    for sub_dependant in dependant.dependencies:\n        if skip_repeats and sub_dependant.cache_key in visited:\n            continue\n        flat_sub = get_flat_dependant(\n            sub_dependant, skip_repeats=skip_repeats, visited=visited\n        )\n        flat_dependant.path_params.extend(flat_sub.path_params)\n        flat_dependant.query_params.extend(flat_sub.query_params)\n        flat_dependant.header_params.extend(flat_sub.header_params)\n        flat_dependant.cookie_params.extend(flat_sub.cookie_params)\n        flat_dependant.body_params.extend(flat_sub.body_params)\n        flat_dependant.security_requirements.extend(flat_sub.security_requirements)\n    return flat_dependant",
                        "signature": "get_flat_dependant(dependant: Dependant) -> Dependant"
                    },
                    {
                        "code": "def is_scalar_field(field: ModelField) -> bool:\n    field_info = get_field_info(field)\n    if not (\n        field.shape == SHAPE_SINGLETON\n        and not lenient_issubclass(field.type_, BaseModel)\n        and not lenient_issubclass(field.type_, sequence_types + (dict,))\n        and not isinstance(field_info, params.Body)\n    ):\n        return False\n    if field.sub_fields:\n        if not all(is_scalar_field(f) for f in field.sub_fields):\n            return False\n    return True",
                        "signature": "is_scalar_field(field: ModelField) -> bool"
                    },
                    {
                        "code": "def is_scalar_sequence_field(field: ModelField) -> bool:\n    if (field.shape in sequence_shapes) and not lenient_issubclass(\n        field.type_, BaseModel\n    ):\n        if field.sub_fields is not None:\n            for sub_field in field.sub_fields:\n                if not is_scalar_field(sub_field):\n                    return False\n        return True\n    if lenient_issubclass(field.type_, sequence_types):\n        return True\n    return False",
                        "signature": "is_scalar_sequence_field(field: ModelField) -> bool"
                    },
                    {
                        "code": "def get_typed_signature(call: Callable) -> inspect.Signature:\n    signature = inspect.signature(call)\n    globalns = getattr(call, \"__globals__\", {})\n    typed_params = [\n        inspect.Parameter(\n            name=param.name,\n            kind=param.kind,\n            default=param.default,\n            annotation=get_typed_annotation(param, globalns),\n        )\n        for param in signature.parameters.values()\n    ]\n    typed_signature = inspect.Signature(typed_params)\n    return typed_signature",
                        "signature": "get_typed_signature(call: Callable) -> inspect.Signature"
                    },
                    {
                        "code": "def get_typed_annotation(param: inspect.Parameter, globalns: Dict[str, Any]) -> Any:\n    annotation = param.annotation\n    if isinstance(annotation, str):\n        annotation = ForwardRef(annotation)\n        annotation = evaluate_forwardref(annotation, globalns, globalns)\n    return annotation",
                        "signature": "get_typed_annotation(param: inspect.Parameter, globalns: Dict[str, Any]) -> Any"
                    },
                    {
                        "code": "def check_dependency_contextmanagers() -> None:\n    if AsyncExitStack is None or asynccontextmanager == _fake_asynccontextmanager:\n        raise RuntimeError(async_contextmanager_dependencies_error)  # pragma: no cover",
                        "signature": "check_dependency_contextmanagers() -> None"
                    },
                    {
                        "code": "def get_dependant(\n    *,\n    path: str,\n    call: Callable,\n    name: str = None,\n    security_scopes: List[str] = None,\n    use_cache: bool = True,\n) -> Dependant:\n    path_param_names = get_path_param_names(path)\n    endpoint_signature = get_typed_signature(call)\n    signature_params = endpoint_signature.parameters\n    if inspect.isgeneratorfunction(call) or inspect.isasyncgenfunction(call):\n        check_dependency_contextmanagers()\n    dependant = Dependant(call=call, name=name, path=path, use_cache=use_cache)\n    for param_name, param in signature_params.items():\n        if isinstance(param.default, params.Depends):\n            sub_dependant = get_param_sub_dependant(\n                param=param, path=path, security_scopes=security_scopes\n            )\n            dependant.dependencies.append(sub_dependant)\n    for param_name, param in signature_params.items():\n        if isinstance(param.default, params.Depends):\n            continue\n        if add_non_field_param_to_dependency(param=param, dependant=dependant):\n            continue\n        param_field = get_param_field(\n            param=param, default_field_info=params.Query, param_name=param_name\n        )\n        if param_name in path_param_names:\n            assert is_scalar_field(\n                field=param_field\n            ), f\"Path params must be of one of the supported types\"\n            if isinstance(param.default, params.Path):\n                ignore_default = False\n            else:\n                ignore_default = True\n            param_field = get_param_field(\n                param=param,\n                param_name=param_name,\n                default_field_info=params.Path,\n                force_type=params.ParamTypes.path,\n                ignore_default=ignore_default,\n            )\n            add_param_to_fields(field=param_field, dependant=dependant)\n        elif is_scalar_field(field=param_field):\n            add_param_to_fields(field=param_field, dependant=dependant)\n        elif isinstance(\n            param.default, (params.Query, params.Header)\n        ) and is_scalar_sequence_field(param_field):\n            add_param_to_fields(field=param_field, dependant=dependant)\n        else:\n            field_info = get_field_info(param_field)\n            assert isinstance(\n                field_info, params.Body\n            ), f\"Param: {param_field.name} can only be a request body, using Body(...)\"\n            dependant.body_params.append(param_field)\n    return dependant",
                        "signature": "get_dependant() -> Dependant"
                    },
                    {
                        "code": "def add_non_field_param_to_dependency(\n    *, param: inspect.Parameter, dependant: Dependant\n) -> Optional[bool]:\n    if lenient_issubclass(param.annotation, Request):\n        dependant.request_param_name = param.name\n        return True\n    elif lenient_issubclass(param.annotation, WebSocket):\n        dependant.websocket_param_name = param.name\n        return True\n    elif lenient_issubclass(param.annotation, Response):\n        dependant.response_param_name = param.name\n        return True\n    elif lenient_issubclass(param.annotation, BackgroundTasks):\n        dependant.background_tasks_param_name = param.name\n        return True\n    elif lenient_issubclass(param.annotation, SecurityScopes):\n        dependant.security_scopes_param_name = param.name\n        return True\n    return None",
                        "signature": "add_non_field_param_to_dependency() -> Optional[bool]"
                    },
                    {
                        "code": "def get_param_field(\n    *,\n    param: inspect.Parameter,\n    param_name: str,\n    default_field_info: Type[params.Param] = params.Param,\n    force_type: params.ParamTypes = None,\n    ignore_default: bool = False,\n) -> ModelField:\n    default_value = Required\n    had_schema = False\n    if not param.default == param.empty and ignore_default is False:\n        default_value = param.default\n    if isinstance(default_value, FieldInfo):\n        had_schema = True\n        field_info = default_value\n        default_value = field_info.default\n        if (\n            isinstance(field_info, params.Param)\n            and getattr(field_info, \"in_\", None) is None\n        ):\n            field_info.in_ = default_field_info.in_\n        if force_type:\n            field_info.in_ = force_type  # type: ignore\n    else:\n        field_info = default_field_info(default_value)\n    required = default_value == Required\n    annotation: Any = Any\n    if not param.annotation == param.empty:\n        annotation = param.annotation\n    annotation = get_annotation_from_field_info(annotation, field_info, param_name)\n    if not field_info.alias and getattr(field_info, \"convert_underscores\", None):\n        alias = param.name.replace(\"_\", \"-\")\n    else:\n        alias = field_info.alias or param.name\n    if PYDANTIC_1:\n        field = ModelField(\n            name=param.name,\n            type_=annotation,\n            default=None if required else default_value,\n            alias=alias,\n            required=required,\n            model_config=BaseConfig,\n            class_validators={},\n            field_info=field_info,\n        )\n        # TODO: remove when removing support for Pydantic < 1.2.0\n        field.required = required\n    else:  # pragma: nocover\n        field = ModelField(  # type: ignore\n            name=param.name,\n            type_=annotation,\n            default=None if required else default_value,\n            alias=alias,\n            required=required,\n            model_config=BaseConfig,\n            class_validators={},\n            schema=field_info,\n        )\n        field.required = required\n    if not had_schema and not is_scalar_field(field=field):\n        if PYDANTIC_1:\n            field.field_info = params.Body(field_info.default)\n        else:\n            field.schema = params.Body(field_info.default)  # type: ignore  # pragma: nocover\n\n    return field",
                        "signature": "get_param_field() -> ModelField"
                    },
                    {
                        "code": "def add_param_to_fields(*, field: ModelField, dependant: Dependant) -> None:\n    field_info = cast(params.Param, get_field_info(field))\n    if field_info.in_ == params.ParamTypes.path:\n        dependant.path_params.append(field)\n    elif field_info.in_ == params.ParamTypes.query:\n        dependant.query_params.append(field)\n    elif field_info.in_ == params.ParamTypes.header:\n        dependant.header_params.append(field)\n    else:\n        assert (\n            field_info.in_ == params.ParamTypes.cookie\n        ), f\"non-body parameters must be in path, query, header or cookie: {field.name}\"\n        dependant.cookie_params.append(field)",
                        "signature": "add_param_to_fields() -> None"
                    },
                    {
                        "code": "def is_coroutine_callable(call: Callable) -> bool:\n    if inspect.isroutine(call):\n        return asyncio.iscoroutinefunction(call)\n    if inspect.isclass(call):\n        return False\n    call = getattr(call, \"__call__\", None)\n    return asyncio.iscoroutinefunction(call)",
                        "signature": "is_coroutine_callable(call: Callable) -> bool"
                    },
                    {
                        "code": "async def solve_generator(\n    *, call: Callable, stack: AsyncExitStack, sub_values: Dict[str, Any]\n) -> Any:\n    if inspect.isgeneratorfunction(call):\n        cm = contextmanager_in_threadpool(contextmanager(call)(**sub_values))\n    elif inspect.isasyncgenfunction(call):\n        cm = asynccontextmanager(call)(**sub_values)\n    return await stack.enter_async_context(cm)",
                        "signature": "solve_generator() -> Any"
                    },
                    {
                        "code": "async def solve_dependencies(\n    *,\n    request: Union[Request, WebSocket],\n    dependant: Dependant,\n    body: Optional[Union[Dict[str, Any], FormData]] = None,\n    background_tasks: BackgroundTasks = None,\n    response: Response = None,\n    dependency_overrides_provider: Any = None,\n    dependency_cache: Dict[Tuple[Callable, Tuple[str]], Any] = None,\n) -> Tuple[\n    Dict[str, Any],\n    List[ErrorWrapper],\n    Optional[BackgroundTasks],\n    Response,\n    Dict[Tuple[Callable, Tuple[str]], Any],\n]:\n    values: Dict[str, Any] = {}\n    errors: List[ErrorWrapper] = []\n    response = response or Response(\n        content=None,\n        status_code=None,  # type: ignore\n        headers=None,\n        media_type=None,\n        background=None,\n    )\n    dependency_cache = dependency_cache or {}\n    sub_dependant: Dependant\n    for sub_dependant in dependant.dependencies:\n        sub_dependant.call = cast(Callable, sub_dependant.call)\n        sub_dependant.cache_key = cast(\n            Tuple[Callable, Tuple[str]], sub_dependant.cache_key\n        )\n        call = sub_dependant.call\n        use_sub_dependant = sub_dependant\n        if (\n            dependency_overrides_provider\n            and dependency_overrides_provider.dependency_overrides\n        ):\n            original_call = sub_dependant.call\n            call = getattr(\n                dependency_overrides_provider, \"dependency_overrides\", {}\n            ).get(original_call, original_call)\n            use_path: str = sub_dependant.path  # type: ignore\n            use_sub_dependant = get_dependant(\n                path=use_path,\n                call=call,\n                name=sub_dependant.name,\n                security_scopes=sub_dependant.security_scopes,\n            )\n\n        solved_result = await solve_dependencies(\n            request=request,\n            dependant=use_sub_dependant,\n            body=body,\n            background_tasks=background_tasks,\n            response=response,\n            dependency_overrides_provider=dependency_overrides_provider,\n            dependency_cache=dependency_cache,\n        )\n        (\n            sub_values,\n            sub_errors,\n            background_tasks,\n            sub_response,\n            sub_dependency_cache,\n        ) = solved_result\n        sub_response = cast(Response, sub_response)\n        response.headers.raw.extend(sub_response.headers.raw)\n        if sub_response.status_code:\n            response.status_code = sub_response.status_code\n        dependency_cache.update(sub_dependency_cache)\n        if sub_errors:\n            errors.extend(sub_errors)\n            continue\n        if sub_dependant.use_cache and sub_dependant.cache_key in dependency_cache:\n            solved = dependency_cache[sub_dependant.cache_key]\n        elif inspect.isgeneratorfunction(call) or inspect.isasyncgenfunction(call):\n            stack = request.scope.get(\"fastapi_astack\")\n            if stack is None:\n                raise RuntimeError(\n                    async_contextmanager_dependencies_error\n                )  # pragma: no cover\n            solved = await solve_generator(\n                call=call, stack=stack, sub_values=sub_values\n            )\n        elif is_coroutine_callable(call):\n            solved = await call(**sub_values)\n        else:\n            solved = await run_in_threadpool(call, **sub_values)\n        if sub_dependant.name is not None:\n            values[sub_dependant.name] = solved\n        if sub_dependant.cache_key not in dependency_cache:\n            dependency_cache[sub_dependant.cache_key] = solved\n    path_values, path_errors = request_params_to_args(\n        dependant.path_params, request.path_params\n    )\n    query_values, query_errors = request_params_to_args(\n        dependant.query_params, request.query_params\n    )\n    header_values, header_errors = request_params_to_args(\n        dependant.header_params, request.headers\n    )\n    cookie_values, cookie_errors = request_params_to_args(\n        dependant.cookie_params, request.cookies\n    )\n    values.update(path_values)\n    values.update(query_values)\n    values.update(header_values)\n    values.update(cookie_values)\n    errors += path_errors + query_errors + header_errors + cookie_errors\n    if dependant.body_params:\n        (\n            body_values,\n            body_errors,\n        ) = await request_body_to_args(  # body_params checked above\n            required_params=dependant.body_params, received_body=body\n        )\n        values.update(body_values)\n        errors.extend(body_errors)\n    if dependant.request_param_name and isinstance(request, Request):\n        values[dependant.request_param_name] = request\n    elif dependant.websocket_param_name and isinstance(request, WebSocket):\n        values[dependant.websocket_param_name] = request\n    if dependant.background_tasks_param_name:\n        if background_tasks is None:\n            background_tasks = BackgroundTasks()\n        values[dependant.background_tasks_param_name] = background_tasks\n    if dependant.response_param_name:\n        values[dependant.response_param_name] = response\n    if dependant.security_scopes_param_name:\n        values[dependant.security_scopes_param_name] = SecurityScopes(\n            scopes=dependant.security_scopes\n        )\n    return values, errors, background_tasks, response, dependency_cache",
                        "signature": "solve_dependencies() -> Tuple[Dict[str, Any], List[ErrorWrapper], Optional[BackgroundTasks], Response, Dict[Tuple[Callable, Tuple[str]], Any]]"
                    },
                    {
                        "code": "def request_params_to_args(\n    required_params: Sequence[ModelField],\n    received_params: Union[Mapping[str, Any], QueryParams, Headers],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    for field in required_params:\n        if is_scalar_sequence_field(field) and isinstance(\n            received_params, (QueryParams, Headers)\n        ):\n            value = received_params.getlist(field.alias) or field.default\n        else:\n            value = received_params.get(field.alias)\n        field_info = get_field_info(field)\n        assert isinstance(\n            field_info, params.Param\n        ), \"Params must be subclasses of Param\"\n        if value is None:\n            if field.required:\n                if PYDANTIC_1:\n                    errors.append(\n                        ErrorWrapper(\n                            MissingError(), loc=(field_info.in_.value, field.alias)\n                        )\n                    )\n                else:  # pragma: nocover\n                    errors.append(\n                        ErrorWrapper(  # type: ignore\n                            MissingError(),\n                            loc=(field_info.in_.value, field.alias),\n                            config=BaseConfig,\n                        )\n                    )\n            else:\n                values[field.name] = deepcopy(field.default)\n            continue\n        v_, errors_ = field.validate(\n            value, values, loc=(field_info.in_.value, field.alias)\n        )\n        if isinstance(errors_, ErrorWrapper):\n            errors.append(errors_)\n        elif isinstance(errors_, list):\n            errors.extend(errors_)\n        else:\n            values[field.name] = v_\n    return values, errors",
                        "signature": "request_params_to_args(required_params: Sequence[ModelField], received_params: Union[Mapping[str, Any], QueryParams, Headers]) -> Tuple[Dict[str, Any], List[ErrorWrapper]]"
                    },
                    {
                        "code": "async def request_body_to_args(\n    required_params: List[ModelField],\n    received_body: Optional[Union[Dict[str, Any], FormData]],\n) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n    values = {}\n    errors = []\n    if required_params:\n        field = required_params[0]\n        field_info = get_field_info(field)\n        embed = getattr(field_info, \"embed\", None)\n        if len(required_params) == 1 and not embed:\n            received_body = {field.alias: received_body}\n        for field in required_params:\n            value: Any = None\n            if received_body is not None:\n                if field.shape in sequence_shapes and isinstance(\n                    received_body, FormData\n                ):\n                    value = received_body.getlist(field.alias)\n                else:\n                    value = received_body.get(field.alias)\n            if (\n                value is None\n                or (isinstance(field_info, params.Form) and value == \"\")\n                or (\n                    isinstance(field_info, params.Form)\n                    and field.shape in sequence_shapes\n                    and len(value) == 0\n                )\n            ):\n                if field.required:\n                    if PYDANTIC_1:\n                        errors.append(\n                            ErrorWrapper(MissingError(), loc=(\"body\", field.alias))\n                        )\n                    else:  # pragma: nocover\n                        errors.append(\n                            ErrorWrapper(  # type: ignore\n                                MissingError(),\n                                loc=(\"body\", field.alias),\n                                config=BaseConfig,\n                            )\n                        )\n                else:\n                    values[field.name] = deepcopy(field.default)\n                continue\n            if (\n                isinstance(field_info, params.File)\n                and lenient_issubclass(field.type_, bytes)\n                and isinstance(value, UploadFile)\n            ):\n                value = await value.read()\n            elif (\n                field.shape in sequence_shapes\n                and isinstance(field_info, params.File)\n                and lenient_issubclass(field.type_, bytes)\n                and isinstance(value, sequence_types)\n            ):\n                awaitables = [sub_value.read() for sub_value in value]\n                contents = await asyncio.gather(*awaitables)\n                value = sequence_shape_to_type[field.shape](contents)\n            v_, errors_ = field.validate(value, values, loc=(\"body\", field.alias))\n            if isinstance(errors_, ErrorWrapper):\n                errors.append(errors_)\n            elif isinstance(errors_, list):\n                errors.extend(errors_)\n            else:\n                values[field.name] = v_\n    return values, errors",
                        "signature": "request_body_to_args(required_params: List[ModelField], received_body: Optional[Union[Dict[str, Any], FormData]]) -> Tuple[Dict[str, Any], List[ErrorWrapper]]"
                    },
                    {
                        "code": "def get_schema_compatible_field(*, field: ModelField) -> ModelField:\n    out_field = field\n    if lenient_issubclass(field.type_, UploadFile):\n        use_type: type = bytes\n        if field.shape in sequence_shapes:\n            use_type = List[bytes]\n        if PYDANTIC_1:\n            out_field = ModelField(\n                name=field.name,\n                type_=use_type,\n                class_validators=field.class_validators,\n                model_config=field.model_config,\n                default=field.default,\n                required=field.required,\n                alias=field.alias,\n                field_info=field.field_info,\n            )\n        else:  # pragma: nocover\n            out_field = ModelField(  # type: ignore\n                name=field.name,\n                type_=use_type,\n                class_validators=field.class_validators,\n                model_config=field.model_config,\n                default=field.default,\n                required=field.required,\n                alias=field.alias,\n                schema=field.schema,  # type: ignore\n            )\n\n    return out_field",
                        "signature": "get_schema_compatible_field() -> ModelField"
                    },
                    {
                        "code": "def get_body_field(*, dependant: Dependant, name: str) -> Optional[ModelField]:\n    flat_dependant = get_flat_dependant(dependant)\n    if not flat_dependant.body_params:\n        return None\n    first_param = flat_dependant.body_params[0]\n    field_info = get_field_info(first_param)\n    embed = getattr(field_info, \"embed\", None)\n    if len(flat_dependant.body_params) == 1 and not embed:\n        return get_schema_compatible_field(field=first_param)\n    model_name = \"Body_\" + name\n    BodyModel = create_model(model_name)\n    for f in flat_dependant.body_params:\n        BodyModel.__fields__[f.name] = get_schema_compatible_field(field=f)\n    required = any(True for f in flat_dependant.body_params if f.required)\n\n    BodyFieldInfo_kwargs: Dict[str, Any] = dict(default=None)\n    if any(\n        isinstance(get_field_info(f), params.File) for f in flat_dependant.body_params\n    ):\n        BodyFieldInfo: Type[params.Body] = params.File\n    elif any(\n        isinstance(get_field_info(f), params.Form) for f in flat_dependant.body_params\n    ):\n        BodyFieldInfo = params.Form\n    else:\n        BodyFieldInfo = params.Body\n\n        body_param_media_types = [\n            getattr(get_field_info(f), \"media_type\")\n            for f in flat_dependant.body_params\n            if isinstance(get_field_info(f), params.Body)\n        ]\n        if len(set(body_param_media_types)) == 1:\n            BodyFieldInfo_kwargs[\"media_type\"] = body_param_media_types[0]\n    if PYDANTIC_1:\n        field = ModelField(\n            name=\"body\",\n            type_=BodyModel,\n            default=None,\n            required=required,\n            model_config=BaseConfig,\n            class_validators={},\n            alias=\"body\",\n            field_info=BodyFieldInfo(**BodyFieldInfo_kwargs),\n        )\n    else:  # pragma: nocover\n        field = ModelField(  # type: ignore\n            name=\"body\",\n            type_=BodyModel,\n            default=None,\n            required=required,\n            model_config=BaseConfig,\n            class_validators={},\n            alias=\"body\",\n            schema=BodyFieldInfo(**BodyFieldInfo_kwargs),\n        )\n    return field",
                        "signature": "get_body_field() -> Optional[ModelField]"
                    },
                    {
                        "code": "def get_annotation_from_field_info(\n    annotation: Any, field_info: FieldInfo, field_name: str\n) -> Type[Any]:\n    return get_annotation_from_schema(annotation, field_info)",
                        "signature": "get_annotation_from_field_info(annotation: Any, field_info: FieldInfo, field_name: str) -> Type[Any]"
                    }
                ],
                "file_scope_classes": []
            },
            "variables_in_file": {
                "ImportError": [
                    56
                ],
                "SHAPE_LIST": [
                    64,
                    86,
                    78
                ],
                "Shape.LIST": [
                    64
                ],
                "Shape": [
                    64,
                    65,
                    66,
                    67,
                    68,
                    69
                ],
                "SHAPE_SEQUENCE": [
                    81,
                    65,
                    89
                ],
                "Shape.SEQUENCE": [
                    65
                ],
                "SHAPE_SET": [
                    66,
                    87,
                    79
                ],
                "Shape.SET": [
                    66
                ],
                "SHAPE_SINGLETON": [
                    67,
                    189
                ],
                "Shape.SINGLETON": [
                    67
                ],
                "SHAPE_TUPLE": [
                    80,
                    88,
                    68
                ],
                "Shape.TUPLE": [
                    68
                ],
                "SHAPE_TUPLE_ELLIPSIS": [
                    82,
                    90,
                    69
                ],
                "Shape.TUPLE_ELLIPS": [
                    69
                ],
                "Any": [
                    449,
                    357,
                    231,
                    72,
                    73,
                    424,
                    425,
                    619,
                    620,
                    735,
                    437,
                    630,
                    440,
                    441,
                    443,
                    572,
                    571,
                    447
                ],
                "FieldInfo": [
                    72,
                    343
                ],
                "str": [
                    256,
                    132,
                    151,
                    424,
                    437,
                    441,
                    443,
                    571,
                    572,
                    447,
                    449,
                    72,
                    334,
                    463,
                    720,
                    475,
                    95,
                    735,
                    231,
                    233,
                    619,
                    620,
                    111,
                    122,
                    123,
                    124,
                    253,
                    255
                ],
                "get_annotation_from_schema": [
                    74
                ],
                "annotation": [
                    357,
                    359,
                    232,
                    233,
                    74,
                    234,
                    235,
                    236,
                    360,
                    368,
                    381
                ],
                "field_info": [
                    640,
                    642,
                    387,
                    392,
                    394,
                    400,
                    401,
                    403,
                    405,
                    664,
                    409,
                    671,
                    302,
                    304,
                    187,
                    192,
                    582,
                    584,
                    74,
                    591,
                    725,
                    598,
                    726,
                    345,
                    346,
                    348,
                    349,
                    606,
                    351,
                    353,
                    355,
                    360,
                    361,
                    364,
                    625,
                    626,
                    374
                ],
                "Type": [
                    73,
                    739,
                    335
                ],
                "sequence_shapes": [
                    643,
                    202,
                    77,
                    692,
                    632,
                    670
                ],
                "sequence_types": [
                    673,
                    210,
                    84,
                    191
                ],
                "list": [
                    610,
                    681,
                    84,
                    86,
                    89,
                    90
                ],
                "set": [
                    752,
                    84,
                    87
                ],
                "tuple": [
                    88,
                    84
                ],
                "sequence_shape_to_type": [
                    85,
                    677
                ],
                "inspect.Parameter": [
                    231,
                    333,
                    311,
                    219,
                    95
                ],
                "inspect": [
                    417,
                    509,
                    227,
                    262,
                    231,
                    415,
                    426,
                    428,
                    333,
                    215,
                    216,
                    219,
                    311,
                    95
                ],
                "List": [
                    256,
                    450,
                    132,
                    618,
                    620,
                    693,
                    444,
                    155,
                    124,
                    572,
                    95
                ],
                "depends": [
                    128,
                    97,
                    98,
                    99,
                    129,
                    103,
                    143,
                    113,
                    115
                ],
                "params.Depends": [
                    97,
                    266,
                    111,
                    272,
                    120
                ],
                "params": [
                    128,
                    640,
                    642,
                    392,
                    266,
                    394,
                    272,
                    400,
                    401,
                    403,
                    277,
                    405,
                    664,
                    409,
                    283,
                    671,
                    290,
                    291,
                    298,
                    304,
                    192,
                    584,
                    335,
                    336,
                    348,
                    97,
                    737,
                    739,
                    741,
                    743,
                    745,
                    750,
                    111,
                    120
                ],
                "param.default": [
                    97,
                    266,
                    298,
                    272,
                    341,
                    342,
                    283,
                    222
                ],
                "param": [
                    265,
                    266,
                    268,
                    271,
                    272,
                    274,
                    277,
                    283,
                    288,
                    298,
                    313,
                    314,
                    316,
                    317,
                    319,
                    320,
                    322,
                    323,
                    325,
                    326,
                    341,
                    342,
                    220,
                    221,
                    222,
                    223,
                    97,
                    225,
                    101,
                    358,
                    359,
                    232,
                    106,
                    362,
                    364,
                    367,
                    380
                ],
                "depends.dependency": [
                    115,
                    113,
                    98,
                    99
                ],
                "dependency": [
                    99,
                    131,
                    101,
                    133,
                    104,
                    136,
                    140
                ],
                "param.annotation": [
                    322,
                    101,
                    325,
                    358,
                    232,
                    359,
                    313,
                    316,
                    319
                ],
                "get_sub_dependant": [
                    115,
                    102
                ],
                "path": [
                    259,
                    264,
                    105,
                    139,
                    268,
                    115
                ],
                "param.name": [
                    320,
                    323,
                    326,
                    106,
                    362,
                    364,
                    367,
                    380,
                    314,
                    220,
                    317
                ],
                "security_scopes": [
                    130,
                    134,
                    107,
                    268,
                    142,
                    147,
                    127
                ],
                "Dependant": [
                    96,
                    161,
                    258,
                    264,
                    459,
                    111,
                    399,
                    720,
                    436,
                    311,
                    155,
                    156,
                    125
                ],
                "callable": [
                    112
                ],
                "Callable": [
                    424,
                    441,
                    461,
                    463,
                    254,
                    215,
                    151,
                    121,
                    414,
                    447
                ],
                "security_requirement": [
                    145,
                    146,
                    126,
                    135
                ],
                "isinstance": [
                    128,
                    640,
                    642,
                    131,
                    133,
                    266,
                    272,
                    664,
                    666,
                    283,
                    671,
                    673,
                    679,
                    552,
                    297,
                    554,
                    681,
                    303,
                    192,
                    576,
                    583,
                    343,
                    348,
                    608,
                    737,
                    610,
                    741,
                    233,
                    750,
                    632
                ],
                "params.Security": [
                    128
                ],
                "dependency_scopes": [
                    129,
                    130
                ],
                "depends.scopes": [
                    129
                ],
                "security_scopes.extend": [
                    130
                ],
                "SecurityBase": [
                    131
                ],
                "use_scopes": [
                    136,
                    132,
                    134
                ],
                "OAuth2": [
                    133
                ],
                "OpenIdConnect": [
                    133
                ],
                "SecurityRequirement": [
                    135
                ],
                "sub_dependant": [
                    138,
                    267,
                    522,
                    523,
                    270,
                    524,
                    525,
                    146,
                    147,
                    148,
                    171,
                    172,
                    175,
                    459,
                    460,
                    461,
                    462,
                    463,
                    465,
                    466,
                    471,
                    475,
                    479,
                    480,
                    507,
                    508
                ],
                "get_dependant": [
                    138,
                    476
                ],
                "name": [
                    264,
                    729,
                    141
                ],
                "depends.use_cache": [
                    143
                ],
                "sub_dependant.security_requirements.append": [
                    146
                ],
                "sub_dependant.security_requirements": [
                    146
                ],
                "sub_dependant.security_scopes": [
                    480,
                    147
                ],
                "CacheKey": [
                    155,
                    151
                ],
                "Tuple": [
                    620,
                    463,
                    151,
                    441,
                    442,
                    572,
                    447
                ],
                "Optional": [
                    619,
                    720,
                    437,
                    151,
                    312,
                    445
                ],
                "bool": [
                    257,
                    201,
                    337,
                    312,
                    186,
                    155,
                    414
                ],
                "visited": [
                    172,
                    175,
                    157,
                    158,
                    159
                ],
                "visited.append": [
                    159
                ],
                "dependant.cache_key": [
                    159
                ],
                "dependant": [
                    264,
                    270,
                    527,
                    274,
                    402,
                    404,
                    530,
                    406,
                    533,
                    536,
                    411,
                    159,
                    543,
                    162,
                    163,
                    164,
                    165,
                    166,
                    167,
                    168,
                    169,
                    294,
                    171,
                    296,
                    300,
                    552,
                    553,
                    554,
                    555,
                    306,
                    307,
                    556,
                    559,
                    560,
                    561,
                    562,
                    563,
                    314,
                    564,
                    317,
                    320,
                    323,
                    326,
                    548,
                    460,
                    721
                ],
                "flat_dependant": [
                    161,
                    737,
                    741,
                    727,
                    749,
                    177,
                    178,
                    179,
                    180,
                    181,
                    182,
                    183,
                    721,
                    722,
                    724,
                    731,
                    733
                ],
                "dependant.path_params.copy": [
                    162
                ],
                "dependant.path_params": [
                    162,
                    527,
                    402
                ],
                "dependant.query_params.copy": [
                    163
                ],
                "dependant.query_params": [
                    530,
                    163,
                    404
                ],
                "dependant.header_params.copy": [
                    164
                ],
                "dependant.header_params": [
                    164,
                    533,
                    406
                ],
                "dependant.cookie_params.copy": [
                    165
                ],
                "dependant.cookie_params": [
                    536,
                    411,
                    165
                ],
                "dependant.body_params.copy": [
                    166
                ],
                "dependant.body_params": [
                    306,
                    548,
                    166,
                    543
                ],
                "dependant.security_requirements.copy": [
                    167
                ],
                "dependant.security_requirements": [
                    167
                ],
                "dependant.use_cache": [
                    168
                ],
                "dependant.path": [
                    169
                ],
                "dependant.dependencies": [
                    171,
                    460,
                    270
                ],
                "skip_repeats": [
                    172,
                    175
                ],
                "sub_dependant.cache_key": [
                    172,
                    524,
                    462,
                    463,
                    525,
                    507,
                    508
                ],
                "flat_sub": [
                    174,
                    177,
                    178,
                    179,
                    180,
                    181,
                    182
                ],
                "get_flat_dependant": [
                    721,
                    174
                ],
                "flat_dependant.path_params.extend": [
                    177
                ],
                "flat_dependant.path_params": [
                    177
                ],
                "flat_sub.path_params": [
                    177
                ],
                "flat_dependant.query_params.extend": [
                    178
                ],
                "flat_dependant.query_params": [
                    178
                ],
                "flat_sub.query_params": [
                    178
                ],
                "flat_dependant.header_params.extend": [
                    179
                ],
                "flat_dependant.header_params": [
                    179
                ],
                "flat_sub.header_params": [
                    179
                ],
                "flat_dependant.cookie_params.extend": [
                    180
                ],
                "flat_dependant.cookie_params": [
                    180
                ],
                "flat_sub.cookie_params": [
                    180
                ],
                "flat_dependant.body_params.extend": [
                    181
                ],
                "flat_dependant.body_params": [
                    737,
                    741,
                    749,
                    722,
                    724,
                    181,
                    727,
                    731,
                    733
                ],
                "flat_sub.body_params": [
                    181
                ],
                "flat_dependant.security_requirements.extend": [
                    182
                ],
                "flat_dependant.security_requirements": [
                    182
                ],
                "flat_sub.security_requirements": [
                    182
                ],
                "ModelField": [
                    706,
                    201,
                    618,
                    366,
                    399,
                    688,
                    720,
                    338,
                    755,
                    570,
                    695,
                    186,
                    379,
                    766
                ],
                "get_field_info": [
                    737,
                    741,
                    582,
                    748,
                    302,
                    750,
                    400,
                    625,
                    725,
                    187
                ],
                "field": [
                    643,
                    713,
                    389,
                    390,
                    647,
                    392,
                    776,
                    394,
                    650,
                    396,
                    400,
                    656,
                    402,
                    404,
                    661,
                    406,
                    665,
                    410,
                    411,
                    670,
                    672,
                    677,
                    678,
                    684,
                    689,
                    690,
                    692,
                    696,
                    698,
                    187,
                    699,
                    189,
                    190,
                    191,
                    575,
                    576,
                    700,
                    195,
                    196,
                    579,
                    581,
                    582,
                    701,
                    707,
                    202,
                    203,
                    587,
                    205,
                    206,
                    591,
                    702,
                    703,
                    210,
                    714,
                    598,
                    603,
                    605,
                    606,
                    613,
                    635,
                    366,
                    624,
                    625,
                    709,
                    755,
                    628,
                    629,
                    710,
                    632,
                    377,
                    711,
                    379,
                    637,
                    766,
                    712
                ],
                "field.shape": [
                    643,
                    677,
                    202,
                    692,
                    632,
                    189,
                    670
                ],
                "lenient_issubclass": [
                    672,
                    322,
                    319,
                    325,
                    202,
                    210,
                    665,
                    690,
                    313,
                    316,
                    190,
                    191
                ],
                "field.type_": [
                    672,
                    203,
                    210,
                    690,
                    665,
                    190,
                    191
                ],
                "BaseModel": [
                    203,
                    190
                ],
                "dict": [
                    735,
                    191
                ],
                "params.Body": [
                    192,
                    739,
                    392,
                    745,
                    394,
                    750,
                    304
                ],
                "field.sub_fields": [
                    195,
                    196,
                    205,
                    206
                ],
                "all": [
                    196
                ],
                "is_scalar_field": [
                    196,
                    390,
                    295,
                    207,
                    280
                ],
                "f": [
                    737,
                    196,
                    741,
                    748,
                    749,
                    750,
                    731,
                    732,
                    733
                ],
                "sub_field": [
                    206,
                    207
                ],
                "signature": [
                    216,
                    225
                ],
                "inspect.signature": [
                    216
                ],
                "call": [
                    260,
                    516,
                    262,
                    518,
                    264,
                    519,
                    521,
                    415,
                    416,
                    417,
                    419,
                    420,
                    426,
                    427,
                    428,
                    429,
                    465,
                    472,
                    216,
                    217,
                    478,
                    509
                ],
                "globalns": [
                    217,
                    235,
                    223
                ],
                "getattr": [
                    419,
                    361,
                    748,
                    626,
                    726,
                    472,
                    217,
                    349
                ],
                "typed_params": [
                    218,
                    227
                ],
                "param.kind": [
                    221
                ],
                "get_typed_annotation": [
                    223
                ],
                "signature.parameters.values": [
                    225
                ],
                "signature.parameters": [
                    225
                ],
                "typed_signature": [
                    227,
                    228
                ],
                "inspect.Signature": [
                    227,
                    215
                ],
                "Dict": [
                    449,
                    231,
                    424,
                    619,
                    620,
                    735,
                    437,
                    441,
                    443,
                    572,
                    447
                ],
                "ForwardRef": [
                    234
                ],
                "evaluate_forwardref": [
                    235
                ],
                "async_contextmanager_dependencies_error": [
                    248,
                    513,
                    239
                ],
                "AsyncExitStack": [
                    424,
                    247
                ],
                "asynccontextmanager": [
                    429,
                    247
                ],
                "_fake_asynccontextmanager": [
                    247
                ],
                "RuntimeError": [
                    248,
                    512
                ],
                "path_param_names": [
                    259,
                    279
                ],
                "get_path_param_names": [
                    259
                ],
                "endpoint_signature": [
                    260,
                    261
                ],
                "get_typed_signature": [
                    260
                ],
                "signature_params": [
                    265,
                    261,
                    271
                ],
                "endpoint_signature.parameters": [
                    261
                ],
                "inspect.isgeneratorfunction": [
                    426,
                    509,
                    262
                ],
                "inspect.isasyncgenfunction": [
                    428,
                    509,
                    262
                ],
                "check_dependency_contextmanagers": [
                    263
                ],
                "use_cache": [
                    264
                ],
                "param_name": [
                    289,
                    360,
                    265,
                    271,
                    277,
                    279
                ],
                "signature_params.items": [
                    265,
                    271
                ],
                "get_param_sub_dependant": [
                    267
                ],
                "dependant.dependencies.append": [
                    270
                ],
                "add_non_field_param_to_dependency": [
                    274
                ],
                "param_field": [
                    294,
                    295,
                    296,
                    299,
                    300,
                    302,
                    305,
                    306,
                    276,
                    281,
                    287
                ],
                "get_param_field": [
                    276,
                    287
                ],
                "params.Query": [
                    298,
                    277
                ],
                "params.Path": [
                    290,
                    283
                ],
                "ignore_default": [
                    284,
                    341,
                    286,
                    292
                ],
                "params.ParamTypes.path": [
                    401,
                    291
                ],
                "params.ParamTypes": [
                    291,
                    336,
                    401,
                    403,
                    405,
                    409
                ],
                "add_param_to_fields": [
                    296,
                    300,
                    294
                ],
                "params.Header": [
                    298
                ],
                "is_scalar_sequence_field": [
                    576,
                    299
                ],
                "param_field.name": [
                    305
                ],
                "dependant.body_params.append": [
                    306
                ],
                "Request": [
                    552,
                    313,
                    435
                ],
                "dependant.request_param_name": [
                    552,
                    553,
                    314
                ],
                "WebSocket": [
                    554,
                    435,
                    316
                ],
                "dependant.websocket_param_name": [
                    554,
                    555,
                    317
                ],
                "Response": [
                    451,
                    499,
                    439,
                    446,
                    319
                ],
                "dependant.response_param_name": [
                    320,
                    561,
                    560
                ],
                "BackgroundTasks": [
                    558,
                    322,
                    445,
                    438
                ],
                "dependant.background_tasks_param_name": [
                    323,
                    556,
                    559
                ],
                "SecurityScopes": [
                    563,
                    325
                ],
                "dependant.security_scopes_param_name": [
                    562,
                    563,
                    326
                ],
                "params.Param": [
                    400,
                    584,
                    348,
                    335
                ],
                "default_value": [
                    355,
                    356,
                    369,
                    339,
                    342,
                    343,
                    345,
                    346,
                    382
                ],
                "Required": [
                    339,
                    356
                ],
                "had_schema": [
                    344,
                    340,
                    390
                ],
                "param.empty": [
                    341,
                    358
                ],
                "field_info.default": [
                    392,
                    346,
                    394
                ],
                "field_info.in_": [
                    353,
                    591,
                    401,
                    403,
                    405,
                    598,
                    409,
                    606,
                    351
                ],
                "default_field_info.in_": [
                    351
                ],
                "default_field_info": [
                    355,
                    351
                ],
                "force_type": [
                    352,
                    353
                ],
                "required": [
                    384,
                    770,
                    356,
                    389,
                    369,
                    371,
                    759,
                    377,
                    733,
                    382
                ],
                "get_annotation_from_field_info": [
                    360
                ],
                "field_info.alias": [
                    361,
                    364
                ],
                "alias": [
                    362,
                    364,
                    370,
                    383
                ],
                "param.name.replace": [
                    362
                ],
                "PYDANTIC_1": [
                    391,
                    648,
                    588,
                    365,
                    754,
                    694
                ],
                "BaseConfig": [
                    385,
                    771,
                    657,
                    372,
                    599,
                    760
                ],
                "field.required": [
                    389,
                    647,
                    712,
                    587,
                    377,
                    701
                ],
                "field.field_info": [
                    392,
                    703
                ],
                "field.schema": [
                    714,
                    394
                ],
                "cast": [
                    400,
                    499,
                    461,
                    462
                ],
                "dependant.path_params.append": [
                    402
                ],
                "params.ParamTypes.query": [
                    403
                ],
                "dependant.query_params.append": [
                    404
                ],
                "params.ParamTypes.header": [
                    405
                ],
                "dependant.header_params.append": [
                    406
                ],
                "params.ParamTypes.cookie": [
                    409
                ],
                "field.name": [
                    707,
                    613,
                    684,
                    661,
                    696,
                    410,
                    603
                ],
                "dependant.cookie_params.append": [
                    411
                ],
                "inspect.isroutine": [
                    415
                ],
                "asyncio.iscoroutinefunction": [
                    416,
                    420
                ],
                "asyncio": [
                    416,
                    676,
                    420
                ],
                "inspect.isclass": [
                    417
                ],
                "cm": [
                    427,
                    429,
                    430
                ],
                "contextmanager_in_threadpool": [
                    427
                ],
                "contextmanager": [
                    427
                ],
                "sub_values": [
                    516,
                    519,
                    521,
                    427,
                    493,
                    429
                ],
                "stack.enter_async_context": [
                    430
                ],
                "stack": [
                    511,
                    516,
                    430,
                    510
                ],
                "Union": [
                    619,
                    571,
                    435,
                    437
                ],
                "FormData": [
                    633,
                    619,
                    437
                ],
                "values": [
                    523,
                    661,
                    538,
                    539,
                    540,
                    541,
                    550,
                    678,
                    553,
                    555,
                    684,
                    685,
                    559,
                    561,
                    563,
                    566,
                    573,
                    449,
                    603,
                    606,
                    613,
                    614,
                    621
                ],
                "errors": [
                    609,
                    450,
                    611,
                    614,
                    551,
                    574,
                    649,
                    680,
                    682,
                    589,
                    622,
                    653,
                    685,
                    595,
                    566,
                    505,
                    542
                ],
                "ErrorWrapper": [
                    608,
                    450,
                    679,
                    650,
                    620,
                    590,
                    654,
                    596,
                    444,
                    572
                ],
                "response": [
                    451,
                    488,
                    561,
                    500,
                    502,
                    566
                ],
                "dependency_cache": [
                    458,
                    490,
                    524,
                    525,
                    566,
                    503,
                    507,
                    508
                ],
                "sub_dependant.call": [
                    465,
                    461,
                    471
                ],
                "use_sub_dependant": [
                    466,
                    476,
                    485
                ],
                "dependency_overrides_provider": [
                    473,
                    489,
                    468,
                    469
                ],
                "dependency_overrides_provider.dependency_overrides": [
                    469
                ],
                "original_call": [
                    474,
                    471
                ],
                "get": [
                    472
                ],
                "use_path": [
                    475,
                    477
                ],
                "sub_dependant.path": [
                    475
                ],
                "sub_dependant.name": [
                    522,
                    523,
                    479
                ],
                "solved_result": [
                    498,
                    483
                ],
                "solve_dependencies": [
                    483
                ],
                "request": [
                    484,
                    552,
                    553,
                    554,
                    555,
                    527,
                    530,
                    533,
                    536,
                    510
                ],
                "body": [
                    548,
                    486
                ],
                "background_tasks": [
                    487,
                    557,
                    558,
                    559,
                    495,
                    566
                ],
                "sub_errors": [
                    504,
                    505,
                    494
                ],
                "sub_response": [
                    496,
                    499,
                    500,
                    501,
                    502
                ],
                "sub_dependency_cache": [
                    497,
                    503
                ],
                "response.headers.raw.extend": [
                    500
                ],
                "response.headers.raw": [
                    500
                ],
                "response.headers": [
                    500
                ],
                "sub_response.headers.raw": [
                    500
                ],
                "sub_response.headers": [
                    500
                ],
                "sub_response.status_code": [
                    501,
                    502
                ],
                "response.status_code": [
                    502
                ],
                "dependency_cache.update": [
                    503
                ],
                "errors.extend": [
                    505,
                    682,
                    611,
                    551
                ],
                "sub_dependant.use_cache": [
                    507
                ],
                "solved": [
                    515,
                    519,
                    521,
                    523,
                    525,
                    508
                ],
                "request.scope.get": [
                    510
                ],
                "request.scope": [
                    510
                ],
                "solve_generator": [
                    515
                ],
                "is_coroutine_callable": [
                    518
                ],
                "run_in_threadpool": [
                    521
                ],
                "path_values": [
                    538,
                    526
                ],
                "path_errors": [
                    526,
                    542
                ],
                "request_params_to_args": [
                    529,
                    532,
                    526,
                    535
                ],
                "request.path_params": [
                    527
                ],
                "query_values": [
                    529,
                    539
                ],
                "query_errors": [
                    529,
                    542
                ],
                "request.query_params": [
                    530
                ],
                "header_values": [
                    532,
                    540
                ],
                "header_errors": [
                    532,
                    542
                ],
                "request.headers": [
                    533
                ],
                "cookie_values": [
                    541,
                    535
                ],
                "cookie_errors": [
                    542,
                    535
                ],
                "request.cookies": [
                    536
                ],
                "values.update": [
                    550,
                    538,
                    539,
                    540,
                    541
                ],
                "body_values": [
                    545,
                    550
                ],
                "body_errors": [
                    546,
                    551
                ],
                "request_body_to_args": [
                    547
                ],
                "dependant.security_scopes": [
                    564
                ],
                "Sequence": [
                    570
                ],
                "Mapping": [
                    571
                ],
                "QueryParams": [
                    577,
                    571
                ],
                "Headers": [
                    577,
                    571
                ],
                "required_params": [
                    623,
                    624,
                    627,
                    629,
                    575
                ],
                "received_params": [
                    577,
                    579,
                    581
                ],
                "value": [
                    640,
                    673,
                    579,
                    644,
                    581,
                    675,
                    677,
                    678,
                    586,
                    630,
                    666,
                    635,
                    668,
                    637,
                    606,
                    639
                ],
                "received_params.getlist": [
                    579
                ],
                "field.alias": [
                    579,
                    581,
                    678,
                    713,
                    650,
                    702,
                    591,
                    656,
                    628,
                    598,
                    635,
                    637,
                    606
                ],
                "field.default": [
                    579,
                    711,
                    661,
                    603,
                    700
                ],
                "received_params.get": [
                    581
                ],
                "errors.append": [
                    609,
                    680,
                    649,
                    589,
                    653,
                    595
                ],
                "MissingError": [
                    655,
                    650,
                    597,
                    591
                ],
                "field_info.in_.value": [
                    606,
                    598,
                    591
                ],
                "deepcopy": [
                    603,
                    661
                ],
                "v_": [
                    613,
                    684,
                    605,
                    678
                ],
                "errors_": [
                    608,
                    609,
                    610,
                    611,
                    678,
                    679,
                    680,
                    681,
                    682,
                    605
                ],
                "field.validate": [
                    605,
                    678
                ],
                "embed": [
                    626,
                    627,
                    726,
                    727
                ],
                "len": [
                    752,
                    627,
                    644,
                    727
                ],
                "received_body": [
                    628,
                    631,
                    633,
                    635,
                    637
                ],
                "received_body.getlist": [
                    635
                ],
                "received_body.get": [
                    637
                ],
                "params.Form": [
                    640,
                    642,
                    741,
                    743
                ],
                "params.File": [
                    664,
                    737,
                    739,
                    671
                ],
                "bytes": [
                    672,
                    665,
                    691,
                    693
                ],
                "UploadFile": [
                    690,
                    666
                ],
                "value.read": [
                    668
                ],
                "awaitables": [
                    675,
                    676
                ],
                "sub_value.read": [
                    675
                ],
                "sub_value": [
                    675
                ],
                "contents": [
                    676,
                    677
                ],
                "asyncio.gather": [
                    676
                ],
                "out_field": [
                    689,
                    706,
                    717,
                    695
                ],
                "use_type": [
                    697,
                    691,
                    708,
                    693
                ],
                "type": [
                    691
                ],
                "field.class_validators": [
                    698,
                    709
                ],
                "field.model_config": [
                    699,
                    710
                ],
                "first_param": [
                    728,
                    724,
                    725
                ],
                "get_schema_compatible_field": [
                    728,
                    732
                ],
                "model_name": [
                    729,
                    730
                ],
                "BodyModel": [
                    768,
                    730,
                    732,
                    757
                ],
                "create_model": [
                    730
                ],
                "BodyModel.__fields__": [
                    732
                ],
                "f.name": [
                    732
                ],
                "any": [
                    736,
                    740,
                    733
                ],
                "f.required": [
                    733
                ],
                "BodyFieldInfo_kwargs": [
                    753,
                    763,
                    774,
                    735
                ],
                "BodyFieldInfo": [
                    739,
                    774,
                    743,
                    745,
                    763
                ],
                "body_param_media_types": [
                    752,
                    753,
                    747
                ]
            },
            "filtered_variables_in_file": {
                "SHAPE_LIST": [
                    64,
                    86,
                    78
                ],
                "Shape.LIST": [
                    64
                ],
                "Shape": [
                    64,
                    65,
                    66,
                    67,
                    68,
                    69
                ],
                "SHAPE_SEQUENCE": [
                    81,
                    65,
                    89
                ],
                "Shape.SEQUENCE": [
                    65
                ],
                "SHAPE_SET": [
                    66,
                    87,
                    79
                ],
                "Shape.SET": [
                    66
                ],
                "SHAPE_SINGLETON": [
                    67,
                    189
                ],
                "Shape.SINGLETON": [
                    67
                ],
                "SHAPE_TUPLE": [
                    80,
                    88,
                    68
                ],
                "Shape.TUPLE": [
                    68
                ],
                "SHAPE_TUPLE_ELLIPSIS": [
                    82,
                    90,
                    69
                ],
                "Shape.TUPLE_ELLIPS": [
                    69
                ],
                "Any": [
                    449,
                    357,
                    231,
                    72,
                    73,
                    424,
                    425,
                    619,
                    620,
                    735,
                    437,
                    630,
                    440,
                    441,
                    443,
                    572,
                    571,
                    447
                ],
                "FieldInfo": [
                    72,
                    343
                ],
                "get_annotation_from_schema": [
                    74
                ],
                "annotation": [
                    357,
                    359,
                    232,
                    233,
                    74,
                    234,
                    235,
                    236,
                    360,
                    368,
                    381
                ],
                "field_info": [
                    640,
                    642,
                    387,
                    392,
                    394,
                    400,
                    401,
                    403,
                    405,
                    664,
                    409,
                    671,
                    302,
                    304,
                    187,
                    192,
                    582,
                    584,
                    74,
                    591,
                    725,
                    598,
                    726,
                    345,
                    346,
                    348,
                    349,
                    606,
                    351,
                    353,
                    355,
                    360,
                    361,
                    364,
                    625,
                    626,
                    374
                ],
                "Type": [
                    73,
                    739,
                    335
                ],
                "sequence_shapes": [
                    643,
                    202,
                    77,
                    692,
                    632,
                    670
                ],
                "sequence_types": [
                    673,
                    210,
                    84,
                    191
                ],
                "sequence_shape_to_type": [
                    85,
                    677
                ],
                "inspect.Parameter": [
                    231,
                    333,
                    311,
                    219,
                    95
                ],
                "inspect": [
                    417,
                    509,
                    227,
                    262,
                    231,
                    415,
                    426,
                    428,
                    333,
                    215,
                    216,
                    219,
                    311,
                    95
                ],
                "List": [
                    256,
                    450,
                    132,
                    618,
                    620,
                    693,
                    444,
                    155,
                    124,
                    572,
                    95
                ],
                "depends": [
                    128,
                    97,
                    98,
                    99,
                    129,
                    103,
                    143,
                    113,
                    115
                ],
                "params.Depends": [
                    97,
                    266,
                    111,
                    272,
                    120
                ],
                "params": [
                    128,
                    640,
                    642,
                    392,
                    266,
                    394,
                    272,
                    400,
                    401,
                    403,
                    277,
                    405,
                    664,
                    409,
                    283,
                    671,
                    290,
                    291,
                    298,
                    304,
                    192,
                    584,
                    335,
                    336,
                    348,
                    97,
                    737,
                    739,
                    741,
                    743,
                    745,
                    750,
                    111,
                    120
                ],
                "param.default": [
                    97,
                    266,
                    298,
                    272,
                    341,
                    342,
                    283,
                    222
                ],
                "param": [
                    265,
                    266,
                    268,
                    271,
                    272,
                    274,
                    277,
                    283,
                    288,
                    298,
                    313,
                    314,
                    316,
                    317,
                    319,
                    320,
                    322,
                    323,
                    325,
                    326,
                    341,
                    342,
                    220,
                    221,
                    222,
                    223,
                    97,
                    225,
                    101,
                    358,
                    359,
                    232,
                    106,
                    362,
                    364,
                    367,
                    380
                ],
                "depends.dependency": [
                    115,
                    113,
                    98,
                    99
                ],
                "dependency": [
                    99,
                    131,
                    101,
                    133,
                    104,
                    136,
                    140
                ],
                "param.annotation": [
                    322,
                    101,
                    325,
                    358,
                    232,
                    359,
                    313,
                    316,
                    319
                ],
                "get_sub_dependant": [
                    115,
                    102
                ],
                "path": [
                    259,
                    264,
                    105,
                    139,
                    268,
                    115
                ],
                "param.name": [
                    320,
                    323,
                    326,
                    106,
                    362,
                    364,
                    367,
                    380,
                    314,
                    220,
                    317
                ],
                "security_scopes": [
                    130,
                    134,
                    107,
                    268,
                    142,
                    147,
                    127
                ],
                "Dependant": [
                    96,
                    161,
                    258,
                    264,
                    459,
                    111,
                    399,
                    720,
                    436,
                    311,
                    155,
                    156,
                    125
                ],
                "Callable": [
                    424,
                    441,
                    461,
                    463,
                    254,
                    215,
                    151,
                    121,
                    414,
                    447
                ],
                "security_requirement": [
                    145,
                    146,
                    126,
                    135
                ],
                "params.Security": [
                    128
                ],
                "dependency_scopes": [
                    129,
                    130
                ],
                "depends.scopes": [
                    129
                ],
                "security_scopes.extend": [
                    130
                ],
                "SecurityBase": [
                    131
                ],
                "use_scopes": [
                    136,
                    132,
                    134
                ],
                "OAuth2": [
                    133
                ],
                "OpenIdConnect": [
                    133
                ],
                "SecurityRequirement": [
                    135
                ],
                "sub_dependant": [
                    138,
                    267,
                    522,
                    523,
                    270,
                    524,
                    525,
                    146,
                    147,
                    148,
                    171,
                    172,
                    175,
                    459,
                    460,
                    461,
                    462,
                    463,
                    465,
                    466,
                    471,
                    475,
                    479,
                    480,
                    507,
                    508
                ],
                "get_dependant": [
                    138,
                    476
                ],
                "name": [
                    264,
                    729,
                    141
                ],
                "depends.use_cache": [
                    143
                ],
                "sub_dependant.security_requirements.append": [
                    146
                ],
                "sub_dependant.security_requirements": [
                    146
                ],
                "sub_dependant.security_scopes": [
                    480,
                    147
                ],
                "CacheKey": [
                    155,
                    151
                ],
                "Tuple": [
                    620,
                    463,
                    151,
                    441,
                    442,
                    572,
                    447
                ],
                "Optional": [
                    619,
                    720,
                    437,
                    151,
                    312,
                    445
                ],
                "visited": [
                    172,
                    175,
                    157,
                    158,
                    159
                ],
                "visited.append": [
                    159
                ],
                "dependant.cache_key": [
                    159
                ],
                "dependant": [
                    264,
                    270,
                    527,
                    274,
                    402,
                    404,
                    530,
                    406,
                    533,
                    536,
                    411,
                    159,
                    543,
                    162,
                    163,
                    164,
                    165,
                    166,
                    167,
                    168,
                    169,
                    294,
                    171,
                    296,
                    300,
                    552,
                    553,
                    554,
                    555,
                    306,
                    307,
                    556,
                    559,
                    560,
                    561,
                    562,
                    563,
                    314,
                    564,
                    317,
                    320,
                    323,
                    326,
                    548,
                    460,
                    721
                ],
                "flat_dependant": [
                    161,
                    737,
                    741,
                    727,
                    749,
                    177,
                    178,
                    179,
                    180,
                    181,
                    182,
                    183,
                    721,
                    722,
                    724,
                    731,
                    733
                ],
                "dependant.path_params.copy": [
                    162
                ],
                "dependant.path_params": [
                    162,
                    527,
                    402
                ],
                "dependant.query_params.copy": [
                    163
                ],
                "dependant.query_params": [
                    530,
                    163,
                    404
                ],
                "dependant.header_params.copy": [
                    164
                ],
                "dependant.header_params": [
                    164,
                    533,
                    406
                ],
                "dependant.cookie_params.copy": [
                    165
                ],
                "dependant.cookie_params": [
                    536,
                    411,
                    165
                ],
                "dependant.body_params.copy": [
                    166
                ],
                "dependant.body_params": [
                    306,
                    548,
                    166,
                    543
                ],
                "dependant.security_requirements.copy": [
                    167
                ],
                "dependant.security_requirements": [
                    167
                ],
                "dependant.use_cache": [
                    168
                ],
                "dependant.path": [
                    169
                ],
                "dependant.dependencies": [
                    171,
                    460,
                    270
                ],
                "skip_repeats": [
                    172,
                    175
                ],
                "sub_dependant.cache_key": [
                    172,
                    524,
                    462,
                    463,
                    525,
                    507,
                    508
                ],
                "flat_sub": [
                    174,
                    177,
                    178,
                    179,
                    180,
                    181,
                    182
                ],
                "get_flat_dependant": [
                    721,
                    174
                ],
                "flat_dependant.path_params.extend": [
                    177
                ],
                "flat_dependant.path_params": [
                    177
                ],
                "flat_sub.path_params": [
                    177
                ],
                "flat_dependant.query_params.extend": [
                    178
                ],
                "flat_dependant.query_params": [
                    178
                ],
                "flat_sub.query_params": [
                    178
                ],
                "flat_dependant.header_params.extend": [
                    179
                ],
                "flat_dependant.header_params": [
                    179
                ],
                "flat_sub.header_params": [
                    179
                ],
                "flat_dependant.cookie_params.extend": [
                    180
                ],
                "flat_dependant.cookie_params": [
                    180
                ],
                "flat_sub.cookie_params": [
                    180
                ],
                "flat_dependant.body_params.extend": [
                    181
                ],
                "flat_dependant.body_params": [
                    737,
                    741,
                    749,
                    722,
                    724,
                    181,
                    727,
                    731,
                    733
                ],
                "flat_sub.body_params": [
                    181
                ],
                "flat_dependant.security_requirements.extend": [
                    182
                ],
                "flat_dependant.security_requirements": [
                    182
                ],
                "flat_sub.security_requirements": [
                    182
                ],
                "ModelField": [
                    706,
                    201,
                    618,
                    366,
                    399,
                    688,
                    720,
                    338,
                    755,
                    570,
                    695,
                    186,
                    379,
                    766
                ],
                "get_field_info": [
                    737,
                    741,
                    582,
                    748,
                    302,
                    750,
                    400,
                    625,
                    725,
                    187
                ],
                "field": [
                    643,
                    713,
                    389,
                    390,
                    647,
                    392,
                    776,
                    394,
                    650,
                    396,
                    400,
                    656,
                    402,
                    404,
                    661,
                    406,
                    665,
                    410,
                    411,
                    670,
                    672,
                    677,
                    678,
                    684,
                    689,
                    690,
                    692,
                    696,
                    698,
                    187,
                    699,
                    189,
                    190,
                    191,
                    575,
                    576,
                    700,
                    195,
                    196,
                    579,
                    581,
                    582,
                    701,
                    707,
                    202,
                    203,
                    587,
                    205,
                    206,
                    591,
                    702,
                    703,
                    210,
                    714,
                    598,
                    603,
                    605,
                    606,
                    613,
                    635,
                    366,
                    624,
                    625,
                    709,
                    755,
                    628,
                    629,
                    710,
                    632,
                    377,
                    711,
                    379,
                    637,
                    766,
                    712
                ],
                "field.shape": [
                    643,
                    677,
                    202,
                    692,
                    632,
                    189,
                    670
                ],
                "lenient_issubclass": [
                    672,
                    322,
                    319,
                    325,
                    202,
                    210,
                    665,
                    690,
                    313,
                    316,
                    190,
                    191
                ],
                "field.type_": [
                    672,
                    203,
                    210,
                    690,
                    665,
                    190,
                    191
                ],
                "BaseModel": [
                    203,
                    190
                ],
                "params.Body": [
                    192,
                    739,
                    392,
                    745,
                    394,
                    750,
                    304
                ],
                "field.sub_fields": [
                    195,
                    196,
                    205,
                    206
                ],
                "is_scalar_field": [
                    196,
                    390,
                    295,
                    207,
                    280
                ],
                "f": [
                    737,
                    196,
                    741,
                    748,
                    749,
                    750,
                    731,
                    732,
                    733
                ],
                "sub_field": [
                    206,
                    207
                ],
                "signature": [
                    216,
                    225
                ],
                "inspect.signature": [
                    216
                ],
                "call": [
                    260,
                    516,
                    262,
                    518,
                    264,
                    519,
                    521,
                    415,
                    416,
                    417,
                    419,
                    420,
                    426,
                    427,
                    428,
                    429,
                    465,
                    472,
                    216,
                    217,
                    478,
                    509
                ],
                "globalns": [
                    217,
                    235,
                    223
                ],
                "typed_params": [
                    218,
                    227
                ],
                "param.kind": [
                    221
                ],
                "get_typed_annotation": [
                    223
                ],
                "signature.parameters.values": [
                    225
                ],
                "signature.parameters": [
                    225
                ],
                "typed_signature": [
                    227,
                    228
                ],
                "inspect.Signature": [
                    227,
                    215
                ],
                "Dict": [
                    449,
                    231,
                    424,
                    619,
                    620,
                    735,
                    437,
                    441,
                    443,
                    572,
                    447
                ],
                "ForwardRef": [
                    234
                ],
                "evaluate_forwardref": [
                    235
                ],
                "async_contextmanager_dependencies_error": [
                    248,
                    513,
                    239
                ],
                "AsyncExitStack": [
                    424,
                    247
                ],
                "asynccontextmanager": [
                    429,
                    247
                ],
                "_fake_asynccontextmanager": [
                    247
                ],
                "path_param_names": [
                    259,
                    279
                ],
                "get_path_param_names": [
                    259
                ],
                "endpoint_signature": [
                    260,
                    261
                ],
                "get_typed_signature": [
                    260
                ],
                "signature_params": [
                    265,
                    261,
                    271
                ],
                "endpoint_signature.parameters": [
                    261
                ],
                "inspect.isgeneratorfunction": [
                    426,
                    509,
                    262
                ],
                "inspect.isasyncgenfunction": [
                    428,
                    509,
                    262
                ],
                "check_dependency_contextmanagers": [
                    263
                ],
                "use_cache": [
                    264
                ],
                "param_name": [
                    289,
                    360,
                    265,
                    271,
                    277,
                    279
                ],
                "signature_params.items": [
                    265,
                    271
                ],
                "get_param_sub_dependant": [
                    267
                ],
                "dependant.dependencies.append": [
                    270
                ],
                "add_non_field_param_to_dependency": [
                    274
                ],
                "param_field": [
                    294,
                    295,
                    296,
                    299,
                    300,
                    302,
                    305,
                    306,
                    276,
                    281,
                    287
                ],
                "get_param_field": [
                    276,
                    287
                ],
                "params.Query": [
                    298,
                    277
                ],
                "params.Path": [
                    290,
                    283
                ],
                "ignore_default": [
                    284,
                    341,
                    286,
                    292
                ],
                "params.ParamTypes.path": [
                    401,
                    291
                ],
                "params.ParamTypes": [
                    291,
                    336,
                    401,
                    403,
                    405,
                    409
                ],
                "add_param_to_fields": [
                    296,
                    300,
                    294
                ],
                "params.Header": [
                    298
                ],
                "is_scalar_sequence_field": [
                    576,
                    299
                ],
                "param_field.name": [
                    305
                ],
                "dependant.body_params.append": [
                    306
                ],
                "Request": [
                    552,
                    313,
                    435
                ],
                "dependant.request_param_name": [
                    552,
                    553,
                    314
                ],
                "WebSocket": [
                    554,
                    435,
                    316
                ],
                "dependant.websocket_param_name": [
                    554,
                    555,
                    317
                ],
                "Response": [
                    451,
                    499,
                    439,
                    446,
                    319
                ],
                "dependant.response_param_name": [
                    320,
                    561,
                    560
                ],
                "BackgroundTasks": [
                    558,
                    322,
                    445,
                    438
                ],
                "dependant.background_tasks_param_name": [
                    323,
                    556,
                    559
                ],
                "SecurityScopes": [
                    563,
                    325
                ],
                "dependant.security_scopes_param_name": [
                    562,
                    563,
                    326
                ],
                "params.Param": [
                    400,
                    584,
                    348,
                    335
                ],
                "default_value": [
                    355,
                    356,
                    369,
                    339,
                    342,
                    343,
                    345,
                    346,
                    382
                ],
                "Required": [
                    339,
                    356
                ],
                "had_schema": [
                    344,
                    340,
                    390
                ],
                "param.empty": [
                    341,
                    358
                ],
                "field_info.default": [
                    392,
                    346,
                    394
                ],
                "field_info.in_": [
                    353,
                    591,
                    401,
                    403,
                    405,
                    598,
                    409,
                    606,
                    351
                ],
                "default_field_info.in_": [
                    351
                ],
                "default_field_info": [
                    355,
                    351
                ],
                "force_type": [
                    352,
                    353
                ],
                "required": [
                    384,
                    770,
                    356,
                    389,
                    369,
                    371,
                    759,
                    377,
                    733,
                    382
                ],
                "get_annotation_from_field_info": [
                    360
                ],
                "field_info.alias": [
                    361,
                    364
                ],
                "alias": [
                    362,
                    364,
                    370,
                    383
                ],
                "param.name.replace": [
                    362
                ],
                "PYDANTIC_1": [
                    391,
                    648,
                    588,
                    365,
                    754,
                    694
                ],
                "BaseConfig": [
                    385,
                    771,
                    657,
                    372,
                    599,
                    760
                ],
                "field.required": [
                    389,
                    647,
                    712,
                    587,
                    377,
                    701
                ],
                "field.field_info": [
                    392,
                    703
                ],
                "field.schema": [
                    714,
                    394
                ],
                "cast": [
                    400,
                    499,
                    461,
                    462
                ],
                "dependant.path_params.append": [
                    402
                ],
                "params.ParamTypes.query": [
                    403
                ],
                "dependant.query_params.append": [
                    404
                ],
                "params.ParamTypes.header": [
                    405
                ],
                "dependant.header_params.append": [
                    406
                ],
                "params.ParamTypes.cookie": [
                    409
                ],
                "field.name": [
                    707,
                    613,
                    684,
                    661,
                    696,
                    410,
                    603
                ],
                "dependant.cookie_params.append": [
                    411
                ],
                "inspect.isroutine": [
                    415
                ],
                "asyncio.iscoroutinefunction": [
                    416,
                    420
                ],
                "asyncio": [
                    416,
                    676,
                    420
                ],
                "inspect.isclass": [
                    417
                ],
                "cm": [
                    427,
                    429,
                    430
                ],
                "contextmanager_in_threadpool": [
                    427
                ],
                "contextmanager": [
                    427
                ],
                "sub_values": [
                    516,
                    519,
                    521,
                    427,
                    493,
                    429
                ],
                "stack.enter_async_context": [
                    430
                ],
                "stack": [
                    511,
                    516,
                    430,
                    510
                ],
                "Union": [
                    619,
                    571,
                    435,
                    437
                ],
                "FormData": [
                    633,
                    619,
                    437
                ],
                "values": [
                    523,
                    661,
                    538,
                    539,
                    540,
                    541,
                    550,
                    678,
                    553,
                    555,
                    684,
                    685,
                    559,
                    561,
                    563,
                    566,
                    573,
                    449,
                    603,
                    606,
                    613,
                    614,
                    621
                ],
                "errors": [
                    609,
                    450,
                    611,
                    614,
                    551,
                    574,
                    649,
                    680,
                    682,
                    589,
                    622,
                    653,
                    685,
                    595,
                    566,
                    505,
                    542
                ],
                "ErrorWrapper": [
                    608,
                    450,
                    679,
                    650,
                    620,
                    590,
                    654,
                    596,
                    444,
                    572
                ],
                "response": [
                    451,
                    488,
                    561,
                    500,
                    502,
                    566
                ],
                "dependency_cache": [
                    458,
                    490,
                    524,
                    525,
                    566,
                    503,
                    507,
                    508
                ],
                "sub_dependant.call": [
                    465,
                    461,
                    471
                ],
                "use_sub_dependant": [
                    466,
                    476,
                    485
                ],
                "dependency_overrides_provider": [
                    473,
                    489,
                    468,
                    469
                ],
                "dependency_overrides_provider.dependency_overrides": [
                    469
                ],
                "original_call": [
                    474,
                    471
                ],
                "get": [
                    472
                ],
                "use_path": [
                    475,
                    477
                ],
                "sub_dependant.path": [
                    475
                ],
                "sub_dependant.name": [
                    522,
                    523,
                    479
                ],
                "solved_result": [
                    498,
                    483
                ],
                "solve_dependencies": [
                    483
                ],
                "request": [
                    484,
                    552,
                    553,
                    554,
                    555,
                    527,
                    530,
                    533,
                    536,
                    510
                ],
                "body": [
                    548,
                    486
                ],
                "background_tasks": [
                    487,
                    557,
                    558,
                    559,
                    495,
                    566
                ],
                "sub_errors": [
                    504,
                    505,
                    494
                ],
                "sub_response": [
                    496,
                    499,
                    500,
                    501,
                    502
                ],
                "sub_dependency_cache": [
                    497,
                    503
                ],
                "response.headers.raw.extend": [
                    500
                ],
                "response.headers.raw": [
                    500
                ],
                "response.headers": [
                    500
                ],
                "sub_response.headers.raw": [
                    500
                ],
                "sub_response.headers": [
                    500
                ],
                "sub_response.status_code": [
                    501,
                    502
                ],
                "response.status_code": [
                    502
                ],
                "dependency_cache.update": [
                    503
                ],
                "errors.extend": [
                    505,
                    682,
                    611,
                    551
                ],
                "sub_dependant.use_cache": [
                    507
                ],
                "solved": [
                    515,
                    519,
                    521,
                    523,
                    525,
                    508
                ],
                "request.scope.get": [
                    510
                ],
                "request.scope": [
                    510
                ],
                "solve_generator": [
                    515
                ],
                "is_coroutine_callable": [
                    518
                ],
                "run_in_threadpool": [
                    521
                ],
                "path_values": [
                    538,
                    526
                ],
                "path_errors": [
                    526,
                    542
                ],
                "request_params_to_args": [
                    529,
                    532,
                    526,
                    535
                ],
                "request.path_params": [
                    527
                ],
                "query_values": [
                    529,
                    539
                ],
                "query_errors": [
                    529,
                    542
                ],
                "request.query_params": [
                    530
                ],
                "header_values": [
                    532,
                    540
                ],
                "header_errors": [
                    532,
                    542
                ],
                "request.headers": [
                    533
                ],
                "cookie_values": [
                    541,
                    535
                ],
                "cookie_errors": [
                    542,
                    535
                ],
                "request.cookies": [
                    536
                ],
                "values.update": [
                    550,
                    538,
                    539,
                    540,
                    541
                ],
                "body_values": [
                    545,
                    550
                ],
                "body_errors": [
                    546,
                    551
                ],
                "request_body_to_args": [
                    547
                ],
                "dependant.security_scopes": [
                    564
                ],
                "Sequence": [
                    570
                ],
                "Mapping": [
                    571
                ],
                "QueryParams": [
                    577,
                    571
                ],
                "Headers": [
                    577,
                    571
                ],
                "required_params": [
                    623,
                    624,
                    627,
                    629,
                    575
                ],
                "received_params": [
                    577,
                    579,
                    581
                ],
                "value": [
                    640,
                    673,
                    579,
                    644,
                    581,
                    675,
                    677,
                    678,
                    586,
                    630,
                    666,
                    635,
                    668,
                    637,
                    606,
                    639
                ],
                "received_params.getlist": [
                    579
                ],
                "field.alias": [
                    579,
                    581,
                    678,
                    713,
                    650,
                    702,
                    591,
                    656,
                    628,
                    598,
                    635,
                    637,
                    606
                ],
                "field.default": [
                    579,
                    711,
                    661,
                    603,
                    700
                ],
                "received_params.get": [
                    581
                ],
                "errors.append": [
                    609,
                    680,
                    649,
                    589,
                    653,
                    595
                ],
                "MissingError": [
                    655,
                    650,
                    597,
                    591
                ],
                "field_info.in_.value": [
                    606,
                    598,
                    591
                ],
                "deepcopy": [
                    603,
                    661
                ],
                "v_": [
                    613,
                    684,
                    605,
                    678
                ],
                "errors_": [
                    608,
                    609,
                    610,
                    611,
                    678,
                    679,
                    680,
                    681,
                    682,
                    605
                ],
                "field.validate": [
                    605,
                    678
                ],
                "embed": [
                    626,
                    627,
                    726,
                    727
                ],
                "received_body": [
                    628,
                    631,
                    633,
                    635,
                    637
                ],
                "received_body.getlist": [
                    635
                ],
                "received_body.get": [
                    637
                ],
                "params.Form": [
                    640,
                    642,
                    741,
                    743
                ],
                "params.File": [
                    664,
                    737,
                    739,
                    671
                ],
                "UploadFile": [
                    690,
                    666
                ],
                "value.read": [
                    668
                ],
                "awaitables": [
                    675,
                    676
                ],
                "sub_value.read": [
                    675
                ],
                "sub_value": [
                    675
                ],
                "contents": [
                    676,
                    677
                ],
                "asyncio.gather": [
                    676
                ],
                "out_field": [
                    689,
                    706,
                    717,
                    695
                ],
                "use_type": [
                    697,
                    691,
                    708,
                    693
                ],
                "field.class_validators": [
                    698,
                    709
                ],
                "field.model_config": [
                    699,
                    710
                ],
                "first_param": [
                    728,
                    724,
                    725
                ],
                "get_schema_compatible_field": [
                    728,
                    732
                ],
                "model_name": [
                    729,
                    730
                ],
                "BodyModel": [
                    768,
                    730,
                    732,
                    757
                ],
                "create_model": [
                    730
                ],
                "BodyModel.__fields__": [
                    732
                ],
                "f.name": [
                    732
                ],
                "f.required": [
                    733
                ],
                "BodyFieldInfo_kwargs": [
                    753,
                    763,
                    774,
                    735
                ],
                "BodyFieldInfo": [
                    739,
                    774,
                    743,
                    745,
                    763
                ],
                "body_param_media_types": [
                    752,
                    753,
                    747
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/fastapi_6/tests/test_forms_from_non_typing_sequences.py",
                "test_function": "test_python_list_param_as_form",
                "test_function_code": "def test_python_list_param_as_form():\n    response = client.post(\n        \"/form/python-list\", data={\"items\": [\"first\", \"second\", \"third\"]}\n    )\n    assert response.status_code == 200\n    assert response.json() == [\"first\", \"second\", \"third\"]",
                "test_error": "assert 422 == 200   +422   -200",
                "full_test_error": "def test_python_list_param_as_form():\n        response = client.post(\n            \"/form/python-list\", data={\"items\": [\"first\", \"second\", \"third\"]}\n        )\n>       assert response.status_code == 200\nE       assert 422 == 200\nE         +422\nE         -200\n\ntests/test_forms_from_non_typing_sequences.py:29: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            },
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/fastapi_6/tests/test_forms_from_non_typing_sequences.py",
                "test_function": "test_python_set_param_as_form",
                "test_function_code": "def test_python_set_param_as_form():\n    response = client.post(\n        \"/form/python-set\", data={\"items\": [\"first\", \"second\", \"third\"]}\n    )\n    assert response.status_code == 200\n    assert set(response.json()) == {\"first\", \"second\", \"third\"}",
                "test_error": "assert 422 == 200   +422   -200",
                "full_test_error": "def test_python_set_param_as_form():\n        response = client.post(\n            \"/form/python-set\", data={\"items\": [\"first\", \"second\", \"third\"]}\n        )\n>       assert response.status_code == 200\nE       assert 422 == 200\nE         +422\nE         -200\n\ntests/test_forms_from_non_typing_sequences.py:37: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            },
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/fastapi_6/tests/test_forms_from_non_typing_sequences.py",
                "test_function": "test_python_tuple_param_as_form",
                "test_function_code": "def test_python_tuple_param_as_form():\n    response = client.post(\n        \"/form/python-tuple\", data={\"items\": [\"first\", \"second\", \"third\"]}\n    )\n    assert response.status_code == 200\n    assert response.json() == [\"first\", \"second\", \"third\"]",
                "test_error": "assert 422 == 200   +422   -200",
                "full_test_error": "def test_python_tuple_param_as_form():\n        response = client.post(\n            \"/form/python-tuple\", data={\"items\": [\"first\", \"second\", \"third\"]}\n        )\n>       assert response.status_code == 200\nE       assert 422 == 200\nE         +422\nE         -200\n\ntests/test_forms_from_non_typing_sequences.py:45: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}