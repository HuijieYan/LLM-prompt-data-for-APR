{
    "1.1.1": "def include_router(\n    self, router: \"APIRouter\", *, prefix: str = \"\", tags: List[str] = None\n) -> None:\n    if prefix:\n        assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n        assert not prefix.endswith(\n            \"/\"\n        ), \"A path prefix must not end with '/', as the routes will start with '/'\"\n    for route in router.routes:\n        if isinstance(route, APIRoute):\n            self.add_api_route(\n                prefix + route.path,\n                route.endpoint,\n                response_model=route.response_model,\n                status_code=route.status_code,\n                tags=(route.tags or []) + (tags or []),\n                summary=route.summary,\n                description=route.description,\n                response_description=route.response_description,\n                deprecated=route.deprecated,\n                methods=route.methods,\n                operation_id=route.operation_id,\n                include_in_schema=route.include_in_schema,\n                content_type=route.content_type,\n                name=route.name,\n            )\n        elif isinstance(route, routing.Route):\n            self.add_route(\n                prefix + route.path,\n                route.endpoint,\n                methods=route.methods,\n                include_in_schema=route.include_in_schema,\n                name=route.name,\n            )\n",
    "1.1.2": null,
    "1.2.1": "fastapi/routing.py",
    "1.2.2": "from typing import Any, Callable, List, Optional, Type\nfrom starlette import routing",
    "1.3.1": "class APIRouter(routing.Router)",
    "1.3.2": null,
    "1.4.1": [
        "add_api_route(self, path: str, endpoint: Callable) -> None"
    ],
    "1.4.2": [
        "add_api_route(self, path: str, endpoint: Callable) -> None"
    ],
    "1.5.1": [
        "def test_router():\n    client = TestClient(app)\n    with client.websocket_connect(\"/router\") as websocket:\n        data = websocket.receive_text()\n        assert data == \"Hello, router!\"",
        "def test_prefix_router():\n    client = TestClient(app)\n    with client.websocket_connect(\"/prefix/\") as websocket:\n        data = websocket.receive_text()\n        assert data == \"Hello, router with prefix!\""
    ],
    "1.5.2": [
        "tests/test_ws_router.py",
        "tests/test_ws_router.py"
    ],
    "2.1.1": [
        [
            "E           starlette.websockets.WebSocketDisconnect: 1000"
        ],
        [
            "E           starlette.websockets.WebSocketDisconnect: 1000"
        ]
    ],
    "2.1.2": [
        [
            "def test_router():\n        client = TestClient(app)\n>       with client.websocket_connect(\"/router\") as websocket:\n\ntests/test_ws_router.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/fastapi_15/lib/python3.8/site-packages/starlette/testclient.py:436: in websocket_connect\n    super().request(\"GET\", url, **kwargs)\n../../envs/fastapi_15/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_15/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_15/lib/python3.8/site-packages/starlette/testclient.py:140: in send\n    session = WebSocketTestSession(self.app, scope)\n../../envs/fastapi_15/lib/python3.8/site-packages/starlette/testclient.py:273: in __init__\n    self._raise_on_close(message)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <starlette.testclient.WebSocketTestSession object at 0x7f5d18c006a0>\nmessage = {'code': 1000, 'type': 'websocket.close'}\n\n    def _raise_on_close(self, message: Message) -> None:\n        if message[\"type\"] == \"websocket.close\":\n>           raise WebSocketDisconnect(message.get(\"code\", 1000))",
            "\n../../envs/fastapi_15/lib/python3.8/site-packages/starlette/testclient.py:309: WebSocketDisconnect"
        ],
        [
            "def test_prefix_router():\n        client = TestClient(app)\n>       with client.websocket_connect(\"/prefix/\") as websocket:\n\ntests/test_ws_router.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../envs/fastapi_15/lib/python3.8/site-packages/starlette/testclient.py:436: in websocket_connect\n    super().request(\"GET\", url, **kwargs)\n../../envs/fastapi_15/lib/python3.8/site-packages/requests/sessions.py:530: in request\n    resp = self.send(prep, **send_kwargs)\n../../envs/fastapi_15/lib/python3.8/site-packages/requests/sessions.py:643: in send\n    r = adapter.send(request, **kwargs)\n../../envs/fastapi_15/lib/python3.8/site-packages/starlette/testclient.py:140: in send\n    session = WebSocketTestSession(self.app, scope)\n../../envs/fastapi_15/lib/python3.8/site-packages/starlette/testclient.py:273: in __init__\n    self._raise_on_close(message)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <starlette.testclient.WebSocketTestSession object at 0x7f5d182d4df0>\nmessage = {'code': 1000, 'type': 'websocket.close'}\n\n    def _raise_on_close(self, message: Message) -> None:\n        if message[\"type\"] == \"websocket.close\":\n>           raise WebSocketDisconnect(message.get(\"code\", 1000))",
            "\n../../envs/fastapi_15/lib/python3.8/site-packages/starlette/testclient.py:309: WebSocketDisconnect"
        ]
    ],
    "2.2.1": [
        [
            {
                "prefix": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "router.routes": {
                    "value": "[<starlette.routing.WebSocketRoute object at 0x7fa6d5f7f760>]",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "route.path": {
                    "value": "'/router'",
                    "shape": "7",
                    "omitted": false
                },
                "route.name": {
                    "value": "'routerindex'",
                    "shape": "11",
                    "omitted": false
                }
            }
        ],
        [
            {
                "prefix": {
                    "value": "'/prefix'",
                    "shape": "7",
                    "omitted": false
                },
                "router.routes": {
                    "value": "[<starlette.routing.WebSocketRoute object at 0x7fa6d5f7f940>]",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "route.path": {
                    "value": "'/'",
                    "shape": "1",
                    "omitted": false
                },
                "route.name": {
                    "value": "'routerprefixindex'",
                    "shape": "17",
                    "omitted": false
                }
            }
        ]
    ],
    "2.2.2": [
        [
            {
                "prefix": "str",
                "router.routes": "list"
            },
            {
                "route.path": "str",
                "route.name": "str"
            }
        ],
        [
            {
                "prefix": "str",
                "router.routes": "list"
            },
            {
                "route.path": "str",
                "route.name": "str"
            }
        ]
    ],
    "2.3.1": [
        [
            {
                "prefix": {
                    "value": "''",
                    "shape": "0",
                    "omitted": false
                },
                "router.routes": {
                    "value": "[<starlette.routing.WebSocketRoute object at 0x7f285d7037f0>]",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "route.path": {
                    "value": "'/router'",
                    "shape": "7",
                    "omitted": false
                },
                "route.name": {
                    "value": "'routerindex'",
                    "shape": "11",
                    "omitted": false
                }
            }
        ],
        [
            {
                "prefix": {
                    "value": "'/prefix'",
                    "shape": "7",
                    "omitted": false
                },
                "router.routes": {
                    "value": "[<starlette.routing.WebSocketRoute object at 0x7f285d7039d0>]",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "route.path": {
                    "value": "'/'",
                    "shape": "1",
                    "omitted": false
                },
                "route.name": {
                    "value": "'routerprefixindex'",
                    "shape": "17",
                    "omitted": false
                }
            }
        ]
    ],
    "2.3.2": [
        [
            {
                "prefix": "str",
                "router.routes": "list"
            },
            {
                "route.path": "str",
                "route.name": "str"
            }
        ],
        [
            {
                "prefix": "str",
                "router.routes": "list"
            },
            {
                "route.path": "str",
                "route.name": "str"
            }
        ]
    ],
    "3.1.1": [
        "Websocket Routes Only Work on FastAPI, not APIRouter\n"
    ],
    "3.1.2": [
        "Describe the bug\nWebsocket routes appear to only work on the main FastAPI object, not on APIRouter objects. When the same function is copied from a FastAPI object to an APIRouter object instead of working properly it just throws a 403.\n\nTo Reproduce\nSteps to reproduce the behavior:\n\nThe following works as expected:\nfrom fastapi import FastAPI\napp = FastAPI()\n\n@app.websocket_route(\"/hello\")\nasync def hello(websocket):\n    await websocket.accept()\n    await websocket.send_text(\"Hello!\")\n    response = await websocket.receive_text()\n    print(response)\n    await websocket.close()\n    print(\"Closed\")\nMoving hello to an APIRouter fails:\n# main.py\nfrom fastapi import FastAPI\nimport other\napp = FastAPI()\napp.include_router(other.router)\n# other.py\nfrom fastapi import APIRouter\nrouter = APIRouter()\n\n@router.websocket_route(\"/routerhello\")\nasync def hello(websocket):\n    await websocket.accept()\n    await websocket.send_text(\"Router Hello!\")\n    response = await websocket.receive_text()\n    print(response)\n    await websocket.close()\n    print(\"Router Closed\")\nExpected behavior\nI expect a websocket route to work on both a FastAPI and APIRouter object.\n\nScreenshots\nNot applicable.\n\nEnvironment:\n\nOS: macOS 10.14.3\n\nFastAPI Version: 0.9.0\n\nPython version, get it with: 3.7.2\n\nAdditional context\nTesting websocket client side with websocat.\n"
    ]
}