{
    "httpie:3": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/httpie_3/httpie/sessions.py": {
            "buggy_functions": [
                {
                    "function_name": "update_headers",
                    "function_code": "def update_headers(self, request_headers):\n    \"\"\"\n    Update the session headers with the request ones while ignoring\n    certain name prefixes.\n\n    :type request_headers: dict\n\n    \"\"\"\n    for name, value in request_headers.items():\n        value = value.decode('utf8')\n        if name == 'User-Agent' and value.startswith('HTTPie/'):\n            continue\n\n        for prefix in SESSION_IGNORED_HEADER_PREFIXES:\n            if name.lower().startswith(prefix.lower()):\n                break\n        else:\n            self['headers'][name] = value\n",
                    "decorators": [],
                    "docstring": "Update the session headers with the request ones while ignoring\ncertain name prefixes.\n\n:type request_headers: dict",
                    "start_line": 95,
                    "end_line": 112,
                    "variables": {
                        "name": [
                            112,
                            105,
                            109,
                            103
                        ],
                        "value": [
                            104,
                            105,
                            112,
                            103
                        ],
                        "request_headers.items": [
                            103
                        ],
                        "request_headers": [
                            103
                        ],
                        "value.decode": [
                            104
                        ],
                        "value.startswith": [
                            105
                        ],
                        "prefix": [
                            108,
                            109
                        ],
                        "SESSION_IGNORED_HEADER_PREFIXES": [
                            108
                        ],
                        "startswith": [
                            109
                        ],
                        "name.lower": [
                            109
                        ],
                        "prefix.lower": [
                            109
                        ],
                        "self": [
                            112
                        ]
                    },
                    "filtered_variables": {
                        "name": [
                            112,
                            105,
                            109,
                            103
                        ],
                        "value": [
                            104,
                            105,
                            112,
                            103
                        ],
                        "request_headers.items": [
                            103
                        ],
                        "request_headers": [
                            103
                        ],
                        "value.decode": [
                            104
                        ],
                        "value.startswith": [
                            105
                        ],
                        "prefix": [
                            108,
                            109
                        ],
                        "SESSION_IGNORED_HEADER_PREFIXES": [
                            108
                        ],
                        "startswith": [
                            109
                        ],
                        "name.lower": [
                            109
                        ],
                        "prefix.lower": [
                            109
                        ],
                        "self": [
                            112
                        ]
                    },
                    "diff_line_number": 103,
                    "class_data": {
                        "signature": "class Session(BaseConfigDict)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, path, *args, **kwargs):\n    super(Session, self).__init__(*args, **kwargs)\n    self._path = path\n    self['headers'] = {}\n    self['cookies'] = {}\n    self['auth'] = {'type': None, 'username': None, 'password': None}",
                            "def _get_path(self):\n    return self._path",
                            "def update_headers(self, request_headers):\n    \"\"\"\n    Update the session headers with the request ones while ignoring\n    certain name prefixes.\n\n    :type request_headers: dict\n\n    \"\"\"\n    for (name, value) in request_headers.items():\n        value = value.decode('utf8')\n        if name == 'User-Agent' and value.startswith('HTTPie/'):\n            continue\n        for prefix in SESSION_IGNORED_HEADER_PREFIXES:\n            if name.lower().startswith(prefix.lower()):\n                break\n        else:\n            self['headers'][name] = value",
                            "@property\ndef headers(self):\n    return self['headers']",
                            "@property\ndef cookies(self):\n    jar = RequestsCookieJar()\n    for (name, cookie_dict) in self['cookies'].items():\n        jar.set_cookie(create_cookie(name, cookie_dict.pop('value'), **cookie_dict))\n    jar.clear_expired_cookies()\n    return jar",
                            "@cookies.setter\ndef cookies(self, jar):\n    \"\"\"\n    :type jar: CookieJar\n    \"\"\"\n    stored_attrs = ['value', 'path', 'secure', 'expires']\n    self['cookies'] = {}\n    for cookie in jar:\n        self['cookies'][cookie.name] = dict(((attname, getattr(cookie, attname)) for attname in stored_attrs))",
                            "@property\ndef auth(self):\n    auth = self.get('auth', None)\n    if not auth or not auth['type']:\n        return\n    auth_plugin = plugin_manager.get_auth_plugin(auth['type'])()\n    return auth_plugin.get_auth(auth['username'], auth['password'])",
                            "@auth.setter\ndef auth(self, auth):\n    assert set(['type', 'username', 'password']) == set(auth.keys())\n    self['auth'] = auth"
                        ],
                        "constructor_variables": [
                            "self._path = path"
                        ],
                        "class_level_variables": [
                            "helpurl = 'https://github.com/jkbrzt/httpie#sessions'",
                            "about = 'HTTPie session file'"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, path, *args, **kwargs)",
                            "_get_path(self)",
                            "update_headers(self, request_headers)",
                            "headers(self)",
                            "cookies(self)",
                            "cookies(self, jar)",
                            "auth(self)",
                            "auth(self, auth)"
                        ],
                        "class_level_variable_names": [
                            "helpurl",
                            "about"
                        ],
                        "constructor_variable_names": [
                            "_path"
                        ]
                    },
                    "used_imports": [],
                    "variable_values": [
                        [
                            {
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "request_headers.items": {
                                    "variable_value": "<built-in method items of dict object at 0x7f51ee7a05f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "request_headers": {
                                    "variable_value": "{'User-Agent': b'HTTPie/1.0.0-dev', 'Accept-Encoding': None}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "value.decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SESSION_IGNORED_HEADER_PREFIXES": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name.lower": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix.lower": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "{'headers': {}, 'cookies': {}, 'auth': {'type': None, 'username': None, 'password': None}}",
                                    "variable_type": "Session",
                                    "variable_shape": "3"
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "request_headers.items": {
                                    "variable_value": "<built-in method items of dict object at 0x7fb55a7f7a00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "request_headers": {
                                    "variable_value": "{'User-Agent': b'HTTPie/1.0.0-dev', 'Accept-Encoding': None}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "value.decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SESSION_IGNORED_HEADER_PREFIXES": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name.lower": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "prefix.lower": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "{'headers': {}, 'cookies': {}, 'auth': {'type': None, 'username': None, 'password': None}}",
                                    "variable_type": "Session",
                                    "variable_shape": "3"
                                }
                            },
                            {
                                "name": {
                                    "variable_value": "'Accept-Encoding'",
                                    "variable_type": "str",
                                    "variable_shape": "15"
                                },
                                "value": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "request_headers.items": {
                                    "variable_value": "<built-in method items of dict object at 0x7fb55a7f7a00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "request_headers": {
                                    "variable_value": "{'User-Agent': b'HTTPie/1.0.0-dev', 'Accept-Encoding': None}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "value.decode": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value.startswith": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "prefix": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "SESSION_IGNORED_HEADER_PREFIXES": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name.lower": {
                                    "variable_value": "<built-in method lower of str object at 0x7fb55a72e7b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "prefix.lower": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "{'headers': {}, 'cookies': {}, 'auth': {'type': None, 'username': None, 'password': None}}",
                                    "variable_type": "Session",
                                    "variable_shape": "3"
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": {
                "file_scope_functions": [
                    {
                        "code": "def get_response(requests_session, session_name,\n                 config_dir, args, read_only=False):\n    \"\"\"Like `client.get_response`, but applies permanent\n    aspects of the session to the request.\n\n    \"\"\"\n    from .client import get_requests_kwargs, dump_request\n    if os.path.sep in session_name:\n        path = os.path.expanduser(session_name)\n    else:\n        hostname = (args.headers.get('Host', None)\n                    or urlsplit(args.url).netloc.split('@')[-1])\n        if not hostname:\n            # HACK/FIXME: httpie-unixsocket's URLs have no hostname.\n            hostname = 'localhost'\n\n        # host:port => host_port\n        hostname = hostname.replace(':', '_')\n        path = os.path.join(config_dir,\n                            SESSIONS_DIR_NAME,\n                            hostname,\n                            session_name + '.json')\n\n    session = Session(path)\n    session.load()\n\n    kwargs = get_requests_kwargs(args, base_headers=session.headers)\n    if args.debug:\n        dump_request(kwargs)\n    session.update_headers(kwargs['headers'])\n\n    if args.auth:\n        session.auth = {\n            'type': args.auth_type,\n            'username': args.auth.key,\n            'password': args.auth.value,\n        }\n    elif session.auth:\n        kwargs['auth'] = session.auth\n\n    requests_session.cookies = session.cookies\n\n    try:\n        response = requests_session.request(**kwargs)\n    except Exception:\n        raise\n    else:\n        # Existing sessions with `read_only=True` don't get updated.\n        if session.is_new() or not read_only:\n            session.cookies = requests_session.cookies\n            session.save()\n        return response",
                        "signature": "get_response(requests_session, session_name, config_dir, args, read_only=False)"
                    }
                ],
                "file_scope_classes": [
                    {
                        "class_declaration": "class Session:",
                        "functions": [
                            {
                                "code": "def __init__(self, path, *args, **kwargs):\n    super(Session, self).__init__(*args, **kwargs)\n    self._path = path\n    self['headers'] = {}\n    self['cookies'] = {}\n    self['auth'] = {\n        'type': None,\n        'username': None,\n        'password': None\n    }",
                                "signature": "__init__(self, path, *args, **kwargs)"
                            },
                            {
                                "code": "def _get_path(self):\n    return self._path",
                                "signature": "_get_path(self)"
                            },
                            {
                                "code": "def update_headers(self, request_headers):\n    \"\"\"\n    Update the session headers with the request ones while ignoring\n    certain name prefixes.\n\n    :type request_headers: dict\n\n    \"\"\"\n    for name, value in request_headers.items():\n        value = value.decode('utf8')\n        if name == 'User-Agent' and value.startswith('HTTPie/'):\n            continue\n\n        for prefix in SESSION_IGNORED_HEADER_PREFIXES:\n            if name.lower().startswith(prefix.lower()):\n                break\n        else:\n            self['headers'][name] = value",
                                "signature": "update_headers(self, request_headers)"
                            },
                            {
                                "code": "@property\ndef headers(self):\n    return self['headers']",
                                "signature": "headers(self)"
                            },
                            {
                                "code": "@property\ndef cookies(self):\n    jar = RequestsCookieJar()\n    for name, cookie_dict in self['cookies'].items():\n        jar.set_cookie(create_cookie(\n            name, cookie_dict.pop('value'), **cookie_dict))\n    jar.clear_expired_cookies()\n    return jar",
                                "signature": "cookies(self)"
                            },
                            {
                                "code": "@cookies.setter\ndef cookies(self, jar):\n    \"\"\"\n    :type jar: CookieJar\n    \"\"\"\n    # http://docs.python.org/2/library/cookielib.html#cookie-objects\n    stored_attrs = ['value', 'path', 'secure', 'expires']\n    self['cookies'] = {}\n    for cookie in jar:\n        self['cookies'][cookie.name] = dict(\n            (attname, getattr(cookie, attname))\n            for attname in stored_attrs\n        )",
                                "signature": "cookies(self, jar)"
                            },
                            {
                                "code": "@property\ndef auth(self):\n    auth = self.get('auth', None)\n    if not auth or not auth['type']:\n        return\n    auth_plugin = plugin_manager.get_auth_plugin(auth['type'])()\n    return auth_plugin.get_auth(auth['username'], auth['password'])",
                                "signature": "auth(self)"
                            },
                            {
                                "code": "@auth.setter\ndef auth(self, auth):\n    assert set(['type', 'username', 'password']) == set(auth.keys())\n    self['auth'] = auth",
                                "signature": "auth(self, auth)"
                            }
                        ]
                    }
                ]
            },
            "variables_in_file": {
                "SESSIONS_DIR_NAME": [
                    42,
                    14,
                    15
                ],
                "DEFAULT_SESSIONS_DIR": [
                    15
                ],
                "os.path.join": [
                    41,
                    15
                ],
                "os.path": [
                    41,
                    31,
                    30,
                    15
                ],
                "os": [
                    41,
                    31,
                    30,
                    15
                ],
                "DEFAULT_CONFIG_DIR": [
                    15
                ],
                "VALID_SESSION_NAME_PATTERN": [
                    16
                ],
                "re.compile": [
                    16
                ],
                "re": [
                    16
                ],
                "SESSION_IGNORED_HEADER_PREFIXES": [
                    108,
                    20
                ],
                "os.path.sep": [
                    30
                ],
                "session_name": [
                    44,
                    30,
                    31
                ],
                "path": [
                    41,
                    83,
                    46,
                    31
                ],
                "os.path.expanduser": [
                    31
                ],
                "hostname": [
                    33,
                    35,
                    37,
                    40,
                    43
                ],
                "args.headers.get": [
                    33
                ],
                "args.headers": [
                    33
                ],
                "args": [
                    33,
                    34,
                    49,
                    50,
                    82,
                    54,
                    56,
                    57,
                    58
                ],
                "netloc.split": [
                    34
                ],
                "netloc": [
                    34
                ],
                "urlsplit": [
                    34
                ],
                "args.url": [
                    34
                ],
                "hostname.replace": [
                    40
                ],
                "config_dir": [
                    41
                ],
                "session": [
                    71,
                    72,
                    73,
                    46,
                    47,
                    49,
                    52,
                    55,
                    60,
                    61,
                    63
                ],
                "Session": [
                    82,
                    46
                ],
                "session.load": [
                    47
                ],
                "kwargs": [
                    66,
                    49,
                    82,
                    51,
                    52,
                    61
                ],
                "get_requests_kwargs": [
                    49
                ],
                "session.headers": [
                    49
                ],
                "args.debug": [
                    50
                ],
                "dump_request": [
                    51
                ],
                "session.update_headers": [
                    52
                ],
                "args.auth": [
                    57,
                    58,
                    54
                ],
                "session.auth": [
                    60,
                    61,
                    55
                ],
                "args.auth_type": [
                    56
                ],
                "args.auth.key": [
                    57
                ],
                "args.auth.value": [
                    58
                ],
                "requests_session.cookies": [
                    72,
                    63
                ],
                "requests_session": [
                    72,
                    66,
                    63
                ],
                "session.cookies": [
                    72,
                    63
                ],
                "response": [
                    66,
                    74
                ],
                "requests_session.request": [
                    66
                ],
                "Exception": [
                    67
                ],
                "session.is_new": [
                    71
                ],
                "read_only": [
                    71
                ],
                "session.save": [
                    73
                ],
                "BaseConfigDict": [
                    77
                ],
                "helpurl": [
                    78
                ],
                "about": [
                    79
                ],
                "__init__": [
                    82
                ],
                "super": [
                    82
                ],
                "self": [
                    134,
                    136,
                    143,
                    112,
                    82,
                    83,
                    84,
                    85,
                    86,
                    116,
                    152,
                    121,
                    93
                ],
                "self._path": [
                    83,
                    93
                ],
                "name": [
                    103,
                    105,
                    109,
                    112,
                    121,
                    123
                ],
                "value": [
                    104,
                    105,
                    112,
                    103
                ],
                "request_headers.items": [
                    103
                ],
                "request_headers": [
                    103
                ],
                "value.decode": [
                    104
                ],
                "value.startswith": [
                    105
                ],
                "prefix": [
                    108,
                    109
                ],
                "startswith": [
                    109
                ],
                "name.lower": [
                    109
                ],
                "prefix.lower": [
                    109
                ],
                "property": [
                    114,
                    141,
                    118
                ],
                "jar": [
                    135,
                    120,
                    122,
                    124,
                    125
                ],
                "RequestsCookieJar": [
                    120
                ],
                "cookie_dict": [
                    121,
                    123
                ],
                "items": [
                    121
                ],
                "jar.set_cookie": [
                    122
                ],
                "create_cookie": [
                    122
                ],
                "cookie_dict.pop": [
                    123
                ],
                "jar.clear_expired_cookies": [
                    124
                ],
                "stored_attrs": [
                    138,
                    133
                ],
                "cookie": [
                    136,
                    137,
                    135
                ],
                "cookie.name": [
                    136
                ],
                "dict": [
                    136
                ],
                "attname": [
                    137,
                    138
                ],
                "getattr": [
                    137
                ],
                "cookies.setter": [
                    127
                ],
                "cookies": [
                    127
                ],
                "auth": [
                    143,
                    144,
                    146,
                    147,
                    149,
                    151,
                    152
                ],
                "self.get": [
                    143
                ],
                "auth_plugin": [
                    146,
                    147
                ],
                "plugin_manager.get_auth_plugin": [
                    146
                ],
                "plugin_manager": [
                    146
                ],
                "auth_plugin.get_auth": [
                    147
                ],
                "set": [
                    151
                ],
                "auth.keys": [
                    151
                ],
                "auth.setter": [
                    149
                ]
            },
            "filtered_variables_in_file": {
                "SESSIONS_DIR_NAME": [
                    42,
                    14,
                    15
                ],
                "DEFAULT_SESSIONS_DIR": [
                    15
                ],
                "os.path.join": [
                    41,
                    15
                ],
                "os.path": [
                    41,
                    31,
                    30,
                    15
                ],
                "os": [
                    41,
                    31,
                    30,
                    15
                ],
                "DEFAULT_CONFIG_DIR": [
                    15
                ],
                "VALID_SESSION_NAME_PATTERN": [
                    16
                ],
                "re.compile": [
                    16
                ],
                "re": [
                    16
                ],
                "SESSION_IGNORED_HEADER_PREFIXES": [
                    108,
                    20
                ],
                "os.path.sep": [
                    30
                ],
                "session_name": [
                    44,
                    30,
                    31
                ],
                "path": [
                    41,
                    83,
                    46,
                    31
                ],
                "os.path.expanduser": [
                    31
                ],
                "hostname": [
                    33,
                    35,
                    37,
                    40,
                    43
                ],
                "args.headers.get": [
                    33
                ],
                "args.headers": [
                    33
                ],
                "args": [
                    33,
                    34,
                    49,
                    50,
                    82,
                    54,
                    56,
                    57,
                    58
                ],
                "netloc.split": [
                    34
                ],
                "netloc": [
                    34
                ],
                "urlsplit": [
                    34
                ],
                "args.url": [
                    34
                ],
                "hostname.replace": [
                    40
                ],
                "config_dir": [
                    41
                ],
                "session": [
                    71,
                    72,
                    73,
                    46,
                    47,
                    49,
                    52,
                    55,
                    60,
                    61,
                    63
                ],
                "Session": [
                    82,
                    46
                ],
                "session.load": [
                    47
                ],
                "kwargs": [
                    66,
                    49,
                    82,
                    51,
                    52,
                    61
                ],
                "get_requests_kwargs": [
                    49
                ],
                "session.headers": [
                    49
                ],
                "args.debug": [
                    50
                ],
                "dump_request": [
                    51
                ],
                "session.update_headers": [
                    52
                ],
                "args.auth": [
                    57,
                    58,
                    54
                ],
                "session.auth": [
                    60,
                    61,
                    55
                ],
                "args.auth_type": [
                    56
                ],
                "args.auth.key": [
                    57
                ],
                "args.auth.value": [
                    58
                ],
                "requests_session.cookies": [
                    72,
                    63
                ],
                "requests_session": [
                    72,
                    66,
                    63
                ],
                "session.cookies": [
                    72,
                    63
                ],
                "response": [
                    66,
                    74
                ],
                "requests_session.request": [
                    66
                ],
                "session.is_new": [
                    71
                ],
                "read_only": [
                    71
                ],
                "session.save": [
                    73
                ],
                "BaseConfigDict": [
                    77
                ],
                "helpurl": [
                    78
                ],
                "about": [
                    79
                ],
                "__init__": [
                    82
                ],
                "self": [
                    134,
                    136,
                    143,
                    112,
                    82,
                    83,
                    84,
                    85,
                    86,
                    116,
                    152,
                    121,
                    93
                ],
                "self._path": [
                    83,
                    93
                ],
                "name": [
                    103,
                    105,
                    109,
                    112,
                    121,
                    123
                ],
                "value": [
                    104,
                    105,
                    112,
                    103
                ],
                "request_headers.items": [
                    103
                ],
                "request_headers": [
                    103
                ],
                "value.decode": [
                    104
                ],
                "value.startswith": [
                    105
                ],
                "prefix": [
                    108,
                    109
                ],
                "startswith": [
                    109
                ],
                "name.lower": [
                    109
                ],
                "prefix.lower": [
                    109
                ],
                "jar": [
                    135,
                    120,
                    122,
                    124,
                    125
                ],
                "RequestsCookieJar": [
                    120
                ],
                "cookie_dict": [
                    121,
                    123
                ],
                "items": [
                    121
                ],
                "jar.set_cookie": [
                    122
                ],
                "create_cookie": [
                    122
                ],
                "cookie_dict.pop": [
                    123
                ],
                "jar.clear_expired_cookies": [
                    124
                ],
                "stored_attrs": [
                    138,
                    133
                ],
                "cookie": [
                    136,
                    137,
                    135
                ],
                "cookie.name": [
                    136
                ],
                "attname": [
                    137,
                    138
                ],
                "cookies.setter": [
                    127
                ],
                "cookies": [
                    127
                ],
                "auth": [
                    143,
                    144,
                    146,
                    147,
                    149,
                    151,
                    152
                ],
                "self.get": [
                    143
                ],
                "auth_plugin": [
                    146,
                    147
                ],
                "plugin_manager.get_auth_plugin": [
                    146
                ],
                "plugin_manager": [
                    146
                ],
                "auth_plugin.get_auth": [
                    147
                ],
                "auth.keys": [
                    151
                ],
                "auth.setter": [
                    149
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/httpie_3/tests/test_sessions.py",
                "test_function": "test_download_in_session",
                "test_function_code": "    def test_download_in_session(self, httpbin):\n        # https://github.com/jkbrzt/httpie/issues/412\n        self.start_session(httpbin)\n        cwd = os.getcwd()\n        try:\n            os.chdir(gettempdir())\n            http('--session=test', '--download',\n                 httpbin.url + '/get', env=self.env())\n        finally:\n            os.chdir(cwd)",
                "test_error": "AttributeError: 'NoneType' object has no attribute 'decode'",
                "full_test_error": "Traceback (most recent call last):\n  File \"/home/ubuntu/Desktop/bgp_envs_local/repos/httpie_3/tests/test_sessions.py\", line 186, in test_download_in_session\n    httpbin.url + '/get', env=self.env())\n  File \"/home/ubuntu/Desktop/bgp_envs_local/repos/httpie_3/tests/utils.py\", line 136, in http\n    exit_status = main(args=args, **kwargs)\n  File \"/home/ubuntu/Desktop/bgp_envs_local/repos/httpie_3/httpie/core.py\", line 115, in main\n    response = get_response(args, config_dir=env.config.directory)\n  File \"/home/ubuntu/Desktop/bgp_envs_local/repos/httpie_3/httpie/client.py\", line 55, in get_response\n    read_only=bool(args.session_read_only),\n  File \"/home/ubuntu/Desktop/bgp_envs_local/repos/httpie_3/httpie/sessions.py\", line 52, in get_response\n    session.update_headers(kwargs['headers'])\n  File \"/home/ubuntu/Desktop/bgp_envs_local/repos/httpie_3/httpie/sessions.py\", line 104, in update_headers\n    value = value.decode('utf8')\nAttributeError: 'NoneType' object has no attribute 'decode'",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}