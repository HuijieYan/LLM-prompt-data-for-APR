{
    "httpie:4": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/httpie_4/httpie/models.py": {
            "buggy_functions": [
                {
                    "function_name": "headers",
                    "function_code": "@property\ndef headers(self):\n    url = urlsplit(self._orig.url)\n\n    request_line = '{method} {path}{query} HTTP/1.1'.format(\n        method=self._orig.method,\n        path=url.path or '/',\n        query='?' + url.query if url.query else ''\n    )\n\n    headers = dict(self._orig.headers)\n\n    if 'Host' not in headers:\n        headers['Host'] = url.netloc.split('@')[-1]\n\n    headers = ['%s: %s' % (name, value)\n               for name, value in headers.items()]\n\n    headers.insert(0, request_line)\n    headers = '\\r\\n'.join(headers).strip()\n\n    if isinstance(headers, bytes):\n        # Python < 3\n        headers = headers.decode('utf8')\n    return headers\n",
                    "decorators": [
                        "property"
                    ],
                    "docstring": null,
                    "start_line": 94,
                    "end_line": 118,
                    "variables": {
                        "url": [
                            96,
                            107,
                            100,
                            101
                        ],
                        "urlsplit": [
                            96
                        ],
                        "self._orig.url": [
                            96
                        ],
                        "self._orig": [
                            96,
                            99,
                            104
                        ],
                        "self": [
                            96,
                            99,
                            104
                        ],
                        "request_line": [
                            112,
                            98
                        ],
                        "format": [
                            98
                        ],
                        "self._orig.method": [
                            99
                        ],
                        "url.path": [
                            100
                        ],
                        "url.query": [
                            101
                        ],
                        "headers": [
                            104,
                            106,
                            107,
                            109,
                            110,
                            112,
                            113,
                            115,
                            117,
                            118
                        ],
                        "dict": [
                            104
                        ],
                        "self._orig.headers": [
                            104
                        ],
                        "url.netloc.split": [
                            107
                        ],
                        "url.netloc": [
                            107
                        ],
                        "name": [
                            109,
                            110
                        ],
                        "value": [
                            109,
                            110
                        ],
                        "headers.items": [
                            110
                        ],
                        "headers.insert": [
                            112
                        ],
                        "strip": [
                            113
                        ],
                        "join": [
                            113
                        ],
                        "isinstance": [
                            115
                        ],
                        "bytes": [
                            115
                        ],
                        "headers.decode": [
                            117
                        ],
                        "property": [
                            94
                        ]
                    },
                    "filtered_variables": {
                        "url": [
                            96,
                            107,
                            100,
                            101
                        ],
                        "urlsplit": [
                            96
                        ],
                        "self._orig.url": [
                            96
                        ],
                        "self._orig": [
                            96,
                            99,
                            104
                        ],
                        "self": [
                            96,
                            99,
                            104
                        ],
                        "request_line": [
                            112,
                            98
                        ],
                        "self._orig.method": [
                            99
                        ],
                        "url.path": [
                            100
                        ],
                        "url.query": [
                            101
                        ],
                        "headers": [
                            104,
                            106,
                            107,
                            109,
                            110,
                            112,
                            113,
                            115,
                            117,
                            118
                        ],
                        "self._orig.headers": [
                            104
                        ],
                        "url.netloc.split": [
                            107
                        ],
                        "url.netloc": [
                            107
                        ],
                        "name": [
                            109,
                            110
                        ],
                        "value": [
                            109,
                            110
                        ],
                        "headers.items": [
                            110
                        ],
                        "headers.insert": [
                            112
                        ],
                        "strip": [
                            113
                        ],
                        "join": [
                            113
                        ],
                        "headers.decode": [
                            117
                        ]
                    },
                    "diff_line_number": 105,
                    "class_data": {
                        "signature": "class HTTPRequest(HTTPMessage)",
                        "docstring": "A :class:`requests.models.Request` wrapper.",
                        "constructor_docstring": null,
                        "functions": [
                            "def iter_body(self, chunk_size):\n    yield self.body",
                            "def iter_lines(self, chunk_size):\n    yield (self.body, b'')",
                            "@property\ndef headers(self):\n    url = urlsplit(self._orig.url)\n    request_line = '{method} {path}{query} HTTP/1.1'.format(method=self._orig.method, path=url.path or '/', query='?' + url.query if url.query else '')\n    headers = dict(self._orig.headers)\n    if 'Host' not in headers:\n        headers['Host'] = url.netloc.split('@')[-1]\n    headers = ['%s: %s' % (name, value) for (name, value) in headers.items()]\n    headers.insert(0, request_line)\n    headers = '\\r\\n'.join(headers).strip()\n    if isinstance(headers, bytes):\n        headers = headers.decode('utf8')\n    return headers",
                            "@property\ndef encoding(self):\n    return 'utf8'",
                            "@property\ndef body(self):\n    body = self._orig.body\n    if isinstance(body, str):\n        body = body.encode('utf8')\n    return body or b''"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "iter_body(self, chunk_size)",
                            "iter_lines(self, chunk_size)",
                            "headers(self)",
                            "encoding(self)",
                            "body(self)"
                        ],
                        "class_level_variable_names": [],
                        "constructor_variable_names": []
                    },
                    "used_imports": [
                        "from httpie.compat import urlsplit, str"
                    ],
                    "variable_values": [
                        [
                            {
                                "url": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlsplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._orig.url": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._orig": {
                                    "variable_value": "<PreparedRequest [GET]>",
                                    "variable_type": "PreparedRequest",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<httpie.models.HTTPRequest object at 0x7fd801ad9e90>",
                                    "variable_type": "HTTPRequest",
                                    "variable_shape": null
                                },
                                "request_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._orig.method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "url.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url.query": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "headers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._orig.headers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "url.netloc.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url.netloc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "headers.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "headers.insert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "headers.decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "url": {
                                    "variable_value": "SplitResult(scheme='http', netloc='174.129.27.151', path='/get', query='', fragment='')",
                                    "variable_type": "SplitResult",
                                    "variable_shape": "5"
                                },
                                "urlsplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._orig.url": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._orig": {
                                    "variable_value": "<PreparedRequest [GET]>",
                                    "variable_type": "PreparedRequest",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<httpie.models.HTTPRequest object at 0x7fd801ad9e90>",
                                    "variable_type": "HTTPRequest",
                                    "variable_shape": null
                                },
                                "request_line": {
                                    "variable_value": "'GET /get HTTP/1.1'",
                                    "variable_type": "str",
                                    "variable_shape": "17"
                                },
                                "self._orig.method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "url.path": {
                                    "variable_value": "'/get'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "url.query": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "headers": {
                                    "variable_value": "\"GET /get HTTP/1.1\\r\\nUser-Agent: b'HTTPie/0.9.0-dev'\\r\\nAccept-Encoding: gzip, deflate, compress\\r\\nAccept: */*\\r\\nhost: b'httpbin.org'\\r\\nHost: 174.129.27.151\"",
                                    "variable_type": "str",
                                    "variable_shape": "149"
                                },
                                "self._orig.headers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "url.netloc.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "url.netloc": {
                                    "variable_value": "'174.129.27.151'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "headers.items": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "headers.insert": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "headers.decode": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "url": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "urlsplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._orig.url": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._orig": {
                                    "variable_value": "<PreparedRequest [GET]>",
                                    "variable_type": "PreparedRequest",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<httpie.models.HTTPRequest object at 0x7fa0820ddc50>",
                                    "variable_type": "HTTPRequest",
                                    "variable_shape": null
                                },
                                "request_line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._orig.method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "url.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url.query": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "headers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._orig.headers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "url.netloc.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "url.netloc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "headers.items": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "headers.insert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "headers.decode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "url": {
                                    "variable_value": "SplitResult(scheme='http', netloc='54.165.134.201', path='/get', query='', fragment='')",
                                    "variable_type": "SplitResult",
                                    "variable_shape": "5"
                                },
                                "urlsplit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._orig.url": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._orig": {
                                    "variable_value": "<PreparedRequest [GET]>",
                                    "variable_type": "PreparedRequest",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<httpie.models.HTTPRequest object at 0x7fa0820ddc50>",
                                    "variable_type": "HTTPRequest",
                                    "variable_shape": null
                                },
                                "request_line": {
                                    "variable_value": "'GET /get HTTP/1.1'",
                                    "variable_type": "str",
                                    "variable_shape": "17"
                                },
                                "self._orig.method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "url.path": {
                                    "variable_value": "'/get'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "url.query": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "headers": {
                                    "variable_value": "\"GET /get HTTP/1.1\\r\\nUser-Agent: b'HTTPie/0.9.0-dev'\\r\\nAccept-Encoding: gzip, deflate, compress\\r\\nAccept: */*\\r\\nhost: b'httpbin.org'\"",
                                    "variable_type": "str",
                                    "variable_shape": "127"
                                },
                                "self._orig.headers": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "url.netloc.split": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "url.netloc": {
                                    "variable_value": "'54.165.134.201'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "headers.items": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "headers.insert": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "strip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "headers.decode": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": {
                "file_scope_functions": [],
                "file_scope_classes": [
                    {
                        "class_declaration": "class HTTPMessage:",
                        "functions": [
                            {
                                "code": "def __init__(self, orig):\n    self._orig = orig",
                                "signature": "__init__(self, orig)"
                            },
                            {
                                "code": "def iter_body(self, chunk_size):\n    \"\"\"Return an iterator over the body.\"\"\"\n    raise NotImplementedError()",
                                "signature": "iter_body(self, chunk_size)"
                            },
                            {
                                "code": "def iter_lines(self, chunk_size):\n    \"\"\"Return an iterator over the body yielding (`line`, `line_feed`).\"\"\"\n    raise NotImplementedError()",
                                "signature": "iter_lines(self, chunk_size)"
                            },
                            {
                                "code": "@property\ndef headers(self):\n    \"\"\"Return a `str` with the message's headers.\"\"\"\n    raise NotImplementedError()",
                                "signature": "headers(self)"
                            },
                            {
                                "code": "@property\ndef encoding(self):\n    \"\"\"Return a `str` with the message's encoding, if known.\"\"\"\n    raise NotImplementedError()",
                                "signature": "encoding(self)"
                            },
                            {
                                "code": "@property\ndef body(self):\n    \"\"\"Return a `bytes` with the message's body.\"\"\"\n    raise NotImplementedError()",
                                "signature": "body(self)"
                            },
                            {
                                "code": "@property\ndef content_type(self):\n    \"\"\"Return the message content type.\"\"\"\n    ct = self._orig.headers.get('Content-Type', '')\n    if not isinstance(ct, str):\n        ct = ct.decode('utf8')\n    return ct",
                                "signature": "content_type(self)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class HTTPResponse:",
                        "functions": [
                            {
                                "code": "def iter_body(self, chunk_size=1):\n    return self._orig.iter_content(chunk_size=chunk_size)",
                                "signature": "iter_body(self, chunk_size=1)"
                            },
                            {
                                "code": "def iter_lines(self, chunk_size):\n    return ((line, b'\\n') for line in self._orig.iter_lines(chunk_size))",
                                "signature": "iter_lines(self, chunk_size)"
                            },
                            {
                                "code": "@property\ndef headers(self):\n    original = self._orig.raw._original_response\n    version = {9: '0.9', 10: '1.0', 11: '1.1'}[original.version]\n    status_line = 'HTTP/{version} {status} {reason}'.format(\n        version=version,\n        status=original.status,\n        reason=original.reason\n    )\n    headers = [status_line]\n    try:\n        # `original.msg` is a `http.client.HTTPMessage` on Python 3\n        # `_headers` is a 2-tuple\n        headers.extend(\n            '%s: %s' % header for header in original.msg._headers)\n    except AttributeError:\n        # and a `httplib.HTTPMessage` on Python 2.x\n        # `headers` is a list of `name: val<CRLF>`.\n        headers.extend(h.strip() for h in original.msg.headers)\n\n    return '\\r\\n'.join(headers)",
                                "signature": "headers(self)"
                            },
                            {
                                "code": "@property\ndef encoding(self):\n    return self._orig.encoding or 'utf8'",
                                "signature": "encoding(self)"
                            },
                            {
                                "code": "@property\ndef body(self):\n    # Only now the response body is fetched.\n    # Shouldn't be touched unless the body is actually needed.\n    return self._orig.content",
                                "signature": "body(self)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class HTTPRequest:",
                        "functions": [
                            {
                                "code": "def iter_body(self, chunk_size):\n    yield self.body",
                                "signature": "iter_body(self, chunk_size)"
                            },
                            {
                                "code": "def iter_lines(self, chunk_size):\n    yield self.body, b''",
                                "signature": "iter_lines(self, chunk_size)"
                            },
                            {
                                "code": "@property\ndef headers(self):\n    url = urlsplit(self._orig.url)\n\n    request_line = '{method} {path}{query} HTTP/1.1'.format(\n        method=self._orig.method,\n        path=url.path or '/',\n        query='?' + url.query if url.query else ''\n    )\n\n    headers = dict(self._orig.headers)\n\n    if 'Host' not in headers:\n        headers['Host'] = url.netloc.split('@')[-1]\n\n    headers = ['%s: %s' % (name, value)\n               for name, value in headers.items()]\n\n    headers.insert(0, request_line)\n    headers = '\\r\\n'.join(headers).strip()\n\n    if isinstance(headers, bytes):\n        # Python < 3\n        headers = headers.decode('utf8')\n    return headers",
                                "signature": "headers(self)"
                            },
                            {
                                "code": "@property\ndef encoding(self):\n    return 'utf8'",
                                "signature": "encoding(self)"
                            },
                            {
                                "code": "@property\ndef body(self):\n    body = self._orig.body\n    if isinstance(body, str):\n        # Happens with JSON/form request data parsed from the command line.\n        body = body.encode('utf8')\n    return body or b''",
                                "signature": "body(self)"
                            }
                        ]
                    }
                ]
            },
            "variables_in_file": {
                "object": [
                    4
                ],
                "self._orig": [
                    96,
                    99,
                    36,
                    8,
                    104,
                    76,
                    46,
                    49,
                    82,
                    54,
                    126
                ],
                "self": [
                    96,
                    99,
                    36,
                    8,
                    104,
                    76,
                    46,
                    49,
                    82,
                    54,
                    89,
                    92,
                    126
                ],
                "orig": [
                    8
                ],
                "NotImplementedError": [
                    12,
                    16,
                    21,
                    26,
                    31
                ],
                "property": [
                    33,
                    74,
                    78,
                    124,
                    18,
                    52,
                    23,
                    120,
                    28,
                    94
                ],
                "ct": [
                    36,
                    37,
                    38,
                    39
                ],
                "self._orig.headers.get": [
                    36
                ],
                "self._orig.headers": [
                    104,
                    36
                ],
                "isinstance": [
                    115,
                    37,
                    127
                ],
                "str": [
                    37,
                    127
                ],
                "ct.decode": [
                    38
                ],
                "HTTPMessage": [
                    42,
                    85
                ],
                "self._orig.iter_content": [
                    46
                ],
                "chunk_size": [
                    49,
                    46
                ],
                "line": [
                    49
                ],
                "self._orig.iter_lines": [
                    49
                ],
                "original": [
                    66,
                    70,
                    54,
                    55,
                    58,
                    59
                ],
                "self._orig.raw._original_response": [
                    54
                ],
                "self._orig.raw": [
                    54
                ],
                "version": [
                    57,
                    55
                ],
                "original.version": [
                    55
                ],
                "status_line": [
                    56,
                    61
                ],
                "format": [
                    56,
                    98
                ],
                "original.status": [
                    58
                ],
                "original.reason": [
                    59
                ],
                "headers": [
                    65,
                    70,
                    72,
                    104,
                    106,
                    107,
                    109,
                    110,
                    112,
                    113,
                    115,
                    117,
                    118,
                    61
                ],
                "headers.extend": [
                    65,
                    70
                ],
                "header": [
                    66
                ],
                "original.msg._headers": [
                    66
                ],
                "original.msg": [
                    66,
                    70
                ],
                "AttributeError": [
                    67
                ],
                "h.strip": [
                    70
                ],
                "h": [
                    70
                ],
                "original.msg.headers": [
                    70
                ],
                "join": [
                    72,
                    113
                ],
                "self._orig.encoding": [
                    76
                ],
                "self._orig.content": [
                    82
                ],
                "self.body": [
                    89,
                    92
                ],
                "url": [
                    96,
                    107,
                    100,
                    101
                ],
                "urlsplit": [
                    96
                ],
                "self._orig.url": [
                    96
                ],
                "request_line": [
                    112,
                    98
                ],
                "self._orig.method": [
                    99
                ],
                "url.path": [
                    100
                ],
                "url.query": [
                    101
                ],
                "dict": [
                    104
                ],
                "url.netloc.split": [
                    107
                ],
                "url.netloc": [
                    107
                ],
                "name": [
                    109,
                    110
                ],
                "value": [
                    109,
                    110
                ],
                "headers.items": [
                    110
                ],
                "headers.insert": [
                    112
                ],
                "strip": [
                    113
                ],
                "bytes": [
                    115
                ],
                "headers.decode": [
                    117
                ],
                "body": [
                    129,
                    130,
                    126,
                    127
                ],
                "self._orig.body": [
                    126
                ],
                "body.encode": [
                    129
                ]
            },
            "filtered_variables_in_file": {
                "self._orig": [
                    96,
                    99,
                    36,
                    8,
                    104,
                    76,
                    46,
                    49,
                    82,
                    54,
                    126
                ],
                "self": [
                    96,
                    99,
                    36,
                    8,
                    104,
                    76,
                    46,
                    49,
                    82,
                    54,
                    89,
                    92,
                    126
                ],
                "orig": [
                    8
                ],
                "ct": [
                    36,
                    37,
                    38,
                    39
                ],
                "self._orig.headers.get": [
                    36
                ],
                "self._orig.headers": [
                    104,
                    36
                ],
                "ct.decode": [
                    38
                ],
                "HTTPMessage": [
                    42,
                    85
                ],
                "self._orig.iter_content": [
                    46
                ],
                "chunk_size": [
                    49,
                    46
                ],
                "line": [
                    49
                ],
                "self._orig.iter_lines": [
                    49
                ],
                "original": [
                    66,
                    70,
                    54,
                    55,
                    58,
                    59
                ],
                "self._orig.raw._original_response": [
                    54
                ],
                "self._orig.raw": [
                    54
                ],
                "version": [
                    57,
                    55
                ],
                "original.version": [
                    55
                ],
                "status_line": [
                    56,
                    61
                ],
                "original.status": [
                    58
                ],
                "original.reason": [
                    59
                ],
                "headers": [
                    65,
                    70,
                    72,
                    104,
                    106,
                    107,
                    109,
                    110,
                    112,
                    113,
                    115,
                    117,
                    118,
                    61
                ],
                "headers.extend": [
                    65,
                    70
                ],
                "header": [
                    66
                ],
                "original.msg._headers": [
                    66
                ],
                "original.msg": [
                    66,
                    70
                ],
                "h.strip": [
                    70
                ],
                "h": [
                    70
                ],
                "original.msg.headers": [
                    70
                ],
                "join": [
                    72,
                    113
                ],
                "self._orig.encoding": [
                    76
                ],
                "self._orig.content": [
                    82
                ],
                "self.body": [
                    89,
                    92
                ],
                "url": [
                    96,
                    107,
                    100,
                    101
                ],
                "urlsplit": [
                    96
                ],
                "self._orig.url": [
                    96
                ],
                "request_line": [
                    112,
                    98
                ],
                "self._orig.method": [
                    99
                ],
                "url.path": [
                    100
                ],
                "url.query": [
                    101
                ],
                "url.netloc.split": [
                    107
                ],
                "url.netloc": [
                    107
                ],
                "name": [
                    109,
                    110
                ],
                "value": [
                    109,
                    110
                ],
                "headers.items": [
                    110
                ],
                "headers.insert": [
                    112
                ],
                "strip": [
                    113
                ],
                "headers.decode": [
                    117
                ],
                "body": [
                    129,
                    130,
                    126,
                    127
                ],
                "self._orig.body": [
                    126
                ],
                "body.encode": [
                    129
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/httpie_4/tests/test_regressions.py",
                "test_function": "test_Host_header_overwrite",
                "test_function_code": "def test_Host_header_overwrite():\n    \"\"\"\n    https://github.com/jakubroztocil/httpie/issues/235\n\n    \"\"\"\n    host = 'httpbin.org'\n    url = 'http://{httpbin_ip}/get'.format(\n        httpbin_ip=socket.gethostbyname(host))\n    r = http('--print=hH', url, 'host:{}'.format(host))\n    assert HTTP_OK in r\n    assert r.lower().count('host:') == 1",
                "test_error": "assert 2 == 1   +2   -1",
                "full_test_error": "def test_Host_header_overwrite():\n        \"\"\"\n        https://github.com/jakubroztocil/httpie/issues/235\n    \n        \"\"\"\n        host = 'httpbin.org'\n        url = 'http://{httpbin_ip}/get'.format(\n            httpbin_ip=socket.gethostbyname(host))\n        r = http('--print=hH', url, 'host:{}'.format(host))\n        assert HTTP_OK in r\n>       assert r.lower().count('host:') == 1\nE       assert 2 == 1\nE         +2\nE         -1\n\ntests/test_regressions.py:17: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}