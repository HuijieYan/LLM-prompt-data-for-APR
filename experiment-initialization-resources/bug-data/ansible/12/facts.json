{
    "1.1.1": "def run(self, terms, variables, **kwargs):\n\n    ret = []\n    for term in terms:\n        var = term.split()[0]\n        ret.append(os.getenv(var, ''))\n\n    return ret\n",
    "1.1.2": null,
    "1.2.1": "class LookupModule(LookupBase)",
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "lib/ansible/plugins/lookup/env.py",
    "1.3.2": null,
    "1.4.1": [
        "@pytest.mark.parametrize('env_var,exp_value', [\n    ('foo', 'bar'),\n    ('equation', 'a=b*100')\n])\ndef test_env_var_value(monkeypatch, env_var, exp_value):\n    monkeypatch.setattr('ansible.utils.py3compat.environ.get', lambda x, y: exp_value)\n\n    env_lookup = lookup_loader.get('env')\n    retval = env_lookup.run([env_var], None)\n    assert retval == [exp_value]",
        "@pytest.mark.parametrize('env_var,exp_value', [\n    ('foo', 'bar'),\n    ('equation', 'a=b*100')\n])\ndef test_env_var_value(monkeypatch, env_var, exp_value):\n    monkeypatch.setattr('ansible.utils.py3compat.environ.get', lambda x, y: exp_value)\n\n    env_lookup = lookup_loader.get('env')\n    retval = env_lookup.run([env_var], None)\n    assert retval == [exp_value]",
        "@pytest.mark.parametrize('env_var,exp_value', [\n    ('simple_var', 'alpha-\u03b2-gamma'),\n    ('the_var', '\u00e3n\u02c8si\u03b2le')\n])\ndef test_utf8_env_var_value(monkeypatch, env_var, exp_value):\n    monkeypatch.setattr('ansible.utils.py3compat.environ.get', lambda x, y: exp_value)\n\n    env_lookup = lookup_loader.get('env')\n    retval = env_lookup.run([env_var], None)\n    assert retval == [exp_value]",
        "@pytest.mark.parametrize('env_var,exp_value', [\n    ('simple_var', 'alpha-\u03b2-gamma'),\n    ('the_var', '\u00e3n\u02c8si\u03b2le')\n])\ndef test_utf8_env_var_value(monkeypatch, env_var, exp_value):\n    monkeypatch.setattr('ansible.utils.py3compat.environ.get', lambda x, y: exp_value)\n\n    env_lookup = lookup_loader.get('env')\n    retval = env_lookup.run([env_var], None)\n    assert retval == [exp_value]"
    ],
    "1.4.2": [
        "test/units/plugins/lookup/test_env.py",
        "test/units/plugins/lookup/test_env.py",
        "test/units/plugins/lookup/test_env.py",
        "test/units/plugins/lookup/test_env.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: assert [''] == ['bar']\nE         At index 0 diff: '' != 'bar'\nE         Full diff:\nE         - ['bar']\nE         + ['']"
        ],
        [
            "E       AssertionError: assert [''] == ['a=b*100']\nE         At index 0 diff: '' != 'a=b*100'\nE         Full diff:\nE         - ['a=b*100']\nE         + ['']"
        ],
        [
            "E       AssertionError: assert [''] == ['alpha-\u03b2-gamma']\nE         At index 0 diff: '' != 'alpha-\u03b2-gamma'\nE         Full diff:\nE         - ['alpha-\u03b2-gamma']\nE         + ['']"
        ],
        [
            "E       AssertionError: assert [''] == ['\u00e3n\u02c8si\u03b2le']\nE         At index 0 diff: '' != '\u00e3n\u02c8si\u03b2le'\nE         Full diff:\nE         - ['\u00e3n\u02c8si\u03b2le']\nE         + ['']"
        ]
    ],
    "2.1.2": [
        [
            "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fe830bb2ad0>\nenv_var = 'foo', exp_value = 'bar'\n\n    @pytest.mark.parametrize('env_var,exp_value', [\n        ('foo', 'bar'),\n        ('equation', 'a=b*100')\n    ])\n    def test_env_var_value(monkeypatch, env_var, exp_value):\n        monkeypatch.setattr('ansible.utils.py3compat.environ.get', lambda x, y: exp_value)\n    \n        env_lookup = lookup_loader.get('env')\n        retval = env_lookup.run([env_var], None)\n>       assert retval == [exp_value]",
            "\ntest/units/plugins/lookup/test_env.py:23: AssertionError"
        ],
        [
            "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fe82fa37050>\nenv_var = 'equation', exp_value = 'a=b*100'\n\n    @pytest.mark.parametrize('env_var,exp_value', [\n        ('foo', 'bar'),\n        ('equation', 'a=b*100')\n    ])\n    def test_env_var_value(monkeypatch, env_var, exp_value):\n        monkeypatch.setattr('ansible.utils.py3compat.environ.get', lambda x, y: exp_value)\n    \n        env_lookup = lookup_loader.get('env')\n        retval = env_lookup.run([env_var], None)\n>       assert retval == [exp_value]",
            "\ntest/units/plugins/lookup/test_env.py:23: AssertionError"
        ],
        [
            "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fe82f9ce790>\nenv_var = 'simple_var', exp_value = 'alpha-\u03b2-gamma'\n\n    @pytest.mark.parametrize('env_var,exp_value', [\n        ('simple_var', 'alpha-\u03b2-gamma'),\n        ('the_var', '\u00e3n\u02c8si\u03b2le')\n    ])\n    def test_utf8_env_var_value(monkeypatch, env_var, exp_value):\n        monkeypatch.setattr('ansible.utils.py3compat.environ.get', lambda x, y: exp_value)\n    \n        env_lookup = lookup_loader.get('env')\n        retval = env_lookup.run([env_var], None)\n>       assert retval == [exp_value]",
            "\ntest/units/plugins/lookup/test_env.py:35: AssertionError"
        ],
        [
            "monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fe82f9e3810>\nenv_var = 'the_var', exp_value = '\u00e3n\u02c8si\u03b2le'\n\n    @pytest.mark.parametrize('env_var,exp_value', [\n        ('simple_var', 'alpha-\u03b2-gamma'),\n        ('the_var', '\u00e3n\u02c8si\u03b2le')\n    ])\n    def test_utf8_env_var_value(monkeypatch, env_var, exp_value):\n        monkeypatch.setattr('ansible.utils.py3compat.environ.get', lambda x, y: exp_value)\n    \n        env_lookup = lookup_loader.get('env')\n        retval = env_lookup.run([env_var], None)\n>       assert retval == [exp_value]",
            "\ntest/units/plugins/lookup/test_env.py:35: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "terms": {
                    "value": "['foo']",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "ret": {
                    "value": "['']",
                    "shape": "1",
                    "omitted": false
                },
                "term": {
                    "value": "'foo'",
                    "shape": "3",
                    "omitted": false
                },
                "var": {
                    "value": "'foo'",
                    "shape": "3",
                    "omitted": false
                }
            }
        ],
        [
            {
                "terms": {
                    "value": "['equation']",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "ret": {
                    "value": "['']",
                    "shape": "1",
                    "omitted": false
                },
                "term": {
                    "value": "'equation'",
                    "shape": "8",
                    "omitted": false
                },
                "var": {
                    "value": "'equation'",
                    "shape": "8",
                    "omitted": false
                }
            }
        ],
        [
            {
                "terms": {
                    "value": "['simple_var']",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "ret": {
                    "value": "['']",
                    "shape": "1",
                    "omitted": false
                },
                "term": {
                    "value": "'simple_var'",
                    "shape": "10",
                    "omitted": false
                },
                "var": {
                    "value": "'simple_var'",
                    "shape": "10",
                    "omitted": false
                }
            }
        ],
        [
            {
                "terms": {
                    "value": "['the_var']",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "ret": {
                    "value": "['']",
                    "shape": "1",
                    "omitted": false
                },
                "term": {
                    "value": "'the_var'",
                    "shape": "7",
                    "omitted": false
                },
                "var": {
                    "value": "'the_var'",
                    "shape": "7",
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "terms": "list"
            },
            {
                "ret": "list",
                "term": "str",
                "var": "str"
            }
        ],
        [
            {
                "terms": "list"
            },
            {
                "ret": "list",
                "term": "str",
                "var": "str"
            }
        ],
        [
            {
                "terms": "list"
            },
            {
                "ret": "list",
                "term": "str",
                "var": "str"
            }
        ],
        [
            {
                "terms": "list"
            },
            {
                "ret": "list",
                "term": "str",
                "var": "str"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "terms": {
                    "value": "['foo']",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "ret": {
                    "value": "['bar']",
                    "shape": "1",
                    "omitted": false
                },
                "term": {
                    "value": "'foo'",
                    "shape": "3",
                    "omitted": false
                },
                "var": {
                    "value": "'foo'",
                    "shape": "3",
                    "omitted": false
                }
            }
        ],
        [
            {
                "terms": {
                    "value": "['equation']",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "ret": {
                    "value": "['a=b*100']",
                    "shape": "1",
                    "omitted": false
                },
                "term": {
                    "value": "'equation'",
                    "shape": "8",
                    "omitted": false
                },
                "var": {
                    "value": "'equation'",
                    "shape": "8",
                    "omitted": false
                }
            }
        ],
        [
            {
                "terms": {
                    "value": "['simple_var']",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "ret": {
                    "value": "['alpha-\u03b2-gamma']",
                    "shape": "1",
                    "omitted": false
                },
                "term": {
                    "value": "'simple_var'",
                    "shape": "10",
                    "omitted": false
                },
                "var": {
                    "value": "'simple_var'",
                    "shape": "10",
                    "omitted": false
                }
            }
        ],
        [
            {
                "terms": {
                    "value": "['the_var']",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "ret": {
                    "value": "['\u00e3n\u02c8si\u03b2le']",
                    "shape": "1",
                    "omitted": false
                },
                "term": {
                    "value": "'the_var'",
                    "shape": "7",
                    "omitted": false
                },
                "var": {
                    "value": "'the_var'",
                    "shape": "7",
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "terms": "list"
            },
            {
                "ret": "list",
                "term": "str",
                "var": "str"
            }
        ],
        [
            {
                "terms": "list"
            },
            {
                "ret": "list",
                "term": "str",
                "var": "str"
            }
        ],
        [
            {
                "terms": "list"
            },
            {
                "ret": "list",
                "term": "str",
                "var": "str"
            }
        ],
        [
            {
                "terms": "list"
            },
            {
                "ret": "list",
                "term": "str",
                "var": "str"
            }
        ]
    ],
    "3.1.1": [
        "env lookup plugin error with utf8 chars in the variable value\n"
    ],
    "3.1.2": [
        "SUMMARY\nThe env lookup plugin fails with an error when the environment variable value contains an UTF8 character.\nThe problem exists since Ansible 2.9 and only with Python 2.7\n\nISSUE TYPE\nBug Report\nCOMPONENT NAME\nenv lookup plugin\n\nANSIBLE VERSION\nansible 2.9.1\n  config file = /etc/ansible/ansible.cfg\n  configured module search path = [u'/home/admin/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules']\n  ansible python module location = /usr/lib/python2.7/dist-packages/ansible\n  executable location = /usr/bin/ansible\n  python version = 2.7.15+ (default, Oct  7 2019, 17:39:04) [GCC 7.4.0]\nCONFIGURATION\n\nOS / ENVIRONMENT\nUbuntu 18.04.3 LTS\nSTEPS TO REPRODUCE\nTESTENVVAR=\u00e9\u00e1\u00fa\u0151\u00fa\u00f6\u00fc\u00f3 ansible all -i localhost, -m debug -a msg=\"{{ lookup('env','TESTENVVAR') }}\"\nEXPECTED RESULTS\nlocalhost | SUCCESS => {\n    \"msg\": \"\u00e9\u00e1\u00fa\u0151\u00fa\u00f6\u00fc\u00f3\"\n}\nACTUAL RESULTS\nlocalhost | FAILED! => {\n    \"msg\": \"the field 'args' has an invalid value ({u'msg': u\\\"{{ lookup('env','TESTENVVAR') }}\\\"}), and could not be converted to an dict.The error was: 'ascii' codec can't decode byte 0xc3 in position 0: ordinal not in range(128)\"\n}\n"
    ],
    "used_imports": "import os"
}