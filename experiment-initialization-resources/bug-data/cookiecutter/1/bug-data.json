{
    "cookiecutter:1": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/cookiecutter_1/cookiecutter/generate.py": {
            "buggy_functions": [
                {
                    "function_name": "generate_context",
                    "function_code": "def generate_context(\n    context_file='cookiecutter.json', default_context=None, extra_context=None\n):\n    \"\"\"Generate the context for a Cookiecutter project template.\n\n    Loads the JSON file as a Python object, with key being the JSON filename.\n\n    :param context_file: JSON file containing key/value pairs for populating\n        the cookiecutter's variables.\n    :param default_context: Dictionary containing config to take into account.\n    :param extra_context: Dictionary containing configuration overrides\n    \"\"\"\n    context = OrderedDict([])\n\n    try:\n        with open(context_file) as file_handle:\n            obj = json.load(file_handle, object_pairs_hook=OrderedDict)\n    except ValueError as e:\n        # JSON decoding error.  Let's throw a new exception that is more\n        # friendly for the developer or user.\n        full_fpath = os.path.abspath(context_file)\n        json_exc_message = str(e)\n        our_exc_message = (\n            'JSON decoding error while loading \"{0}\".  Decoding'\n            ' error details: \"{1}\"'.format(full_fpath, json_exc_message)\n        )\n        raise ContextDecodingException(our_exc_message)\n\n    # Add the Python object to the context dictionary\n    file_name = os.path.split(context_file)[1]\n    file_stem = file_name.split('.')[0]\n    context[file_stem] = obj\n\n    # Overwrite context variable defaults with the default context from the\n    # user's global config, if available\n    if default_context:\n        apply_overwrites_to_context(obj, default_context)\n    if extra_context:\n        apply_overwrites_to_context(obj, extra_context)\n\n    logger.debug('Context generated is %s', context)\n    return context\n",
                    "decorators": [],
                    "docstring": "Generate the context for a Cookiecutter project template.\n\nLoads the JSON file as a Python object, with key being the JSON filename.\n\n:param context_file: JSON file containing key/value pairs for populating\n    the cookiecutter's variables.\n:param default_context: Dictionary containing config to take into account.\n:param extra_context: Dictionary containing configuration overrides",
                    "start_line": 70,
                    "end_line": 111,
                    "variables": {
                        "context": [
                            82,
                            101,
                            110,
                            111
                        ],
                        "OrderedDict": [
                            82,
                            86
                        ],
                        "open": [
                            85
                        ],
                        "context_file": [
                            90,
                            99,
                            85
                        ],
                        "file_handle": [
                            85,
                            86
                        ],
                        "obj": [
                            106,
                            108,
                            101,
                            86
                        ],
                        "json.load": [
                            86
                        ],
                        "json": [
                            86
                        ],
                        "ValueError": [
                            87
                        ],
                        "full_fpath": [
                            90,
                            94
                        ],
                        "os.path.abspath": [
                            90
                        ],
                        "os.path": [
                            90,
                            99
                        ],
                        "os": [
                            90,
                            99
                        ],
                        "json_exc_message": [
                            91,
                            94
                        ],
                        "str": [
                            91
                        ],
                        "e": [
                            91
                        ],
                        "our_exc_message": [
                            96,
                            92
                        ],
                        "format": [
                            93
                        ],
                        "ContextDecodingException": [
                            96
                        ],
                        "file_name": [
                            99,
                            100
                        ],
                        "os.path.split": [
                            99
                        ],
                        "file_stem": [
                            100,
                            101
                        ],
                        "file_name.split": [
                            100
                        ],
                        "default_context": [
                            105,
                            106
                        ],
                        "apply_overwrites_to_context": [
                            106,
                            108
                        ],
                        "extra_context": [
                            107,
                            108
                        ],
                        "logger.debug": [
                            110
                        ],
                        "logger": [
                            110
                        ]
                    },
                    "filtered_variables": {
                        "context": [
                            82,
                            101,
                            110,
                            111
                        ],
                        "OrderedDict": [
                            82,
                            86
                        ],
                        "context_file": [
                            90,
                            99,
                            85
                        ],
                        "file_handle": [
                            85,
                            86
                        ],
                        "obj": [
                            106,
                            108,
                            101,
                            86
                        ],
                        "json.load": [
                            86
                        ],
                        "json": [
                            86
                        ],
                        "full_fpath": [
                            90,
                            94
                        ],
                        "os.path.abspath": [
                            90
                        ],
                        "os.path": [
                            90,
                            99
                        ],
                        "os": [
                            90,
                            99
                        ],
                        "json_exc_message": [
                            91,
                            94
                        ],
                        "e": [
                            91
                        ],
                        "our_exc_message": [
                            96,
                            92
                        ],
                        "ContextDecodingException": [
                            96
                        ],
                        "file_name": [
                            99,
                            100
                        ],
                        "os.path.split": [
                            99
                        ],
                        "file_stem": [
                            100,
                            101
                        ],
                        "file_name.split": [
                            100
                        ],
                        "default_context": [
                            105,
                            106
                        ],
                        "apply_overwrites_to_context": [
                            106,
                            108
                        ],
                        "extra_context": [
                            107,
                            108
                        ],
                        "logger.debug": [
                            110
                        ],
                        "logger": [
                            110
                        ]
                    },
                    "diff_line_number": 85,
                    "class_data": null,
                    "used_imports": [
                        "import json",
                        "import os",
                        "from collections import OrderedDict",
                        "from cookiecutter.exceptions import ContextDecodingException, FailedHookException, NonTemplatedInputDirException, OutputDirExistsException, UndefinedVariableInTemplate"
                    ],
                    "variable_values": [
                        [
                            {
                                "context": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedDict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "context_file": {
                                    "variable_value": "'tests/test-generate-context/non_ascii.json'",
                                    "variable_type": "str",
                                    "variable_shape": "42"
                                },
                                "file_handle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "json.load": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "json": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_fpath": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.abspath": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "json_exc_message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "e": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "our_exc_message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ContextDecodingException": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "file_stem": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "file_name.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "default_context": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "apply_overwrites_to_context": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extra_context": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "logger.debug": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "logger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "context": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedDict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "context_file": {
                                    "variable_value": "'tests/test-generate-context/non_ascii.json'",
                                    "variable_type": "str",
                                    "variable_shape": "42"
                                },
                                "file_handle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "json.load": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "json": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_fpath": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.abspath": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "json_exc_message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "e": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "our_exc_message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ContextDecodingException": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "file_stem": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "file_name.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "default_context": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "apply_overwrites_to_context": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extra_context": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "logger.debug": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "logger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "context": {
                                    "variable_value": "OrderedDict([('non_ascii', OrderedDict([('full_name', '\u00e9\u00e8\u00e0')]))])",
                                    "variable_type": "OrderedDict",
                                    "variable_shape": "1"
                                },
                                "OrderedDict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "context_file": {
                                    "variable_value": "'tests/test-generate-context/non_ascii.json'",
                                    "variable_type": "str",
                                    "variable_shape": "42"
                                },
                                "file_handle": {
                                    "variable_value": "<_io.TextIOWrapper name='tests/test-generate-context/non_ascii.json' mode='r' encoding='utf-8'>",
                                    "variable_type": "TextIOWrapper",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "OrderedDict([('full_name', '\u00e9\u00e8\u00e0')])",
                                    "variable_type": "OrderedDict",
                                    "variable_shape": "1"
                                },
                                "json.load": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "json": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "full_fpath": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path.abspath": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os.path": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "os": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "json_exc_message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "e": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "our_exc_message": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ContextDecodingException": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "file_name": {
                                    "variable_value": "'non_ascii.json'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "os.path.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "file_stem": {
                                    "variable_value": "'non_ascii'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "file_name.split": {
                                    "variable_value": "<built-in method split of str object at 0x7f904b9e9db0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "default_context": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "apply_overwrites_to_context": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "extra_context": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "logger.debug": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "logger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def is_copy_only_path(path, context):\n    \"\"\"Check whether the given `path` should only be copied and not rendered.\n\n    Returns True if `path` matches a pattern in the given `context` dict,\n    otherwise False.\n\n    :param path: A file-system path referring to a file or dir that\n        should be rendered or just copied.\n    :param context: cookiecutter context.\n    \"\"\"\n    try:\n        for dont_render in context['cookiecutter']['_copy_without_render']:\n            if fnmatch.fnmatch(path, dont_render):\n                return True\n    except KeyError:\n        return False\n\n    return False",
                "def apply_overwrites_to_context(context, overwrite_context):\n    \"\"\"Modify the given context in place based on the overwrite_context.\"\"\"\n    for variable, overwrite in overwrite_context.items():\n        if variable not in context:\n            # Do not include variables which are not used in the template\n            continue\n\n        context_value = context[variable]\n\n        if isinstance(context_value, list):\n            # We are dealing with a choice variable\n            if overwrite in context_value:\n                # This overwrite is actually valid for the given context\n                # Let's set it as default (by definition first item in list)\n                # see ``cookiecutter.prompt.prompt_choice_for_config``\n                context_value.remove(overwrite)\n                context_value.insert(0, overwrite)\n        else:\n            # Simply overwrite the value for this variable\n            context[variable] = overwrite",
                "def generate_context(\n    context_file='cookiecutter.json', default_context=None, extra_context=None\n):\n    \"\"\"Generate the context for a Cookiecutter project template.\n\n    Loads the JSON file as a Python object, with key being the JSON filename.\n\n    :param context_file: JSON file containing key/value pairs for populating\n        the cookiecutter's variables.\n    :param default_context: Dictionary containing config to take into account.\n    :param extra_context: Dictionary containing configuration overrides\n    \"\"\"\n    context = OrderedDict([])\n\n    try:\n        with open(context_file) as file_handle:\n            obj = json.load(file_handle, object_pairs_hook=OrderedDict)\n    except ValueError as e:\n        # JSON decoding error.  Let's throw a new exception that is more\n        # friendly for the developer or user.\n        full_fpath = os.path.abspath(context_file)\n        json_exc_message = str(e)\n        our_exc_message = (\n            'JSON decoding error while loading \"{0}\".  Decoding'\n            ' error details: \"{1}\"'.format(full_fpath, json_exc_message)\n        )\n        raise ContextDecodingException(our_exc_message)\n\n    # Add the Python object to the context dictionary\n    file_name = os.path.split(context_file)[1]\n    file_stem = file_name.split('.')[0]\n    context[file_stem] = obj\n\n    # Overwrite context variable defaults with the default context from the\n    # user's global config, if available\n    if default_context:\n        apply_overwrites_to_context(obj, default_context)\n    if extra_context:\n        apply_overwrites_to_context(obj, extra_context)\n\n    logger.debug('Context generated is %s', context)\n    return context",
                "def generate_file(project_dir, infile, context, env, skip_if_file_exists=False):\n    \"\"\"Render filename of infile as name of outfile, handle infile correctly.\n\n    Dealing with infile appropriately:\n\n        a. If infile is a binary file, copy it over without rendering.\n        b. If infile is a text file, render its contents and write the\n           rendered infile to outfile.\n\n    Precondition:\n\n        When calling `generate_file()`, the root template dir must be the\n        current working directory. Using `utils.work_in()` is the recommended\n        way to perform this directory change.\n\n    :param project_dir: Absolute path to the resulting generated project.\n    :param infile: Input file to generate the file from. Relative to the root\n        template dir.\n    :param context: Dict for populating the cookiecutter's variables.\n    :param env: Jinja2 template execution environment.\n    \"\"\"\n    logger.debug('Processing file %s', infile)\n\n    # Render the path to the output file (not including the root project dir)\n    outfile_tmpl = env.from_string(infile)\n\n    outfile = os.path.join(project_dir, outfile_tmpl.render(**context))\n    file_name_is_empty = os.path.isdir(outfile)\n    if file_name_is_empty:\n        logger.debug('The resulting file name is empty: %s', outfile)\n        return\n\n    if skip_if_file_exists and os.path.exists(outfile):\n        logger.debug('The resulting file already exists: %s', outfile)\n        return\n\n    logger.debug('Created file at %s', outfile)\n\n    # Just copy over binary files. Don't render.\n    logger.debug(\"Check %s to see if it's a binary\", infile)\n    if is_binary(infile):\n        logger.debug('Copying binary %s to %s without rendering', infile, outfile)\n        shutil.copyfile(infile, outfile)\n    else:\n        # Force fwd slashes on Windows for get_template\n        # This is a by-design Jinja issue\n        infile_fwd_slashes = infile.replace(os.path.sep, '/')\n\n        # Render the file\n        try:\n            tmpl = env.get_template(infile_fwd_slashes)\n        except TemplateSyntaxError as exception:\n            # Disable translated so that printed exception contains verbose\n            # information about syntax error location\n            exception.translated = False\n            raise\n        rendered_file = tmpl.render(**context)\n\n        # Detect original file newline to output the rendered file\n        # note: newline='' ensures newlines are not converted\n        with open(infile, 'r', encoding='utf-8', newline='') as rd:\n            rd.readline()  # Read the first line to load 'newlines' value\n\n            # Use `_new_lines` overwrite from context, if configured.\n            newline = rd.newlines\n            if context['cookiecutter'].get('_new_lines', False):\n                newline = context['cookiecutter']['_new_lines']\n                logger.debug('Overwriting end line character with %s', newline)\n\n        logger.debug('Writing contents to file %s', outfile)\n\n        with open(outfile, 'w', encoding='utf-8', newline=newline) as fh:\n            fh.write(rendered_file)\n\n    # Apply file permissions to output file\n    shutil.copymode(infile, outfile)",
                "def render_and_create_dir(\n    dirname, context, output_dir, environment, overwrite_if_exists=False\n):\n    \"\"\"Render name of a directory, create the directory, return its path.\"\"\"\n    name_tmpl = environment.from_string(dirname)\n    rendered_dirname = name_tmpl.render(**context)\n\n    dir_to_create = os.path.normpath(os.path.join(output_dir, rendered_dirname))\n\n    logger.debug(\n        'Rendered dir %s must exist in output_dir %s', dir_to_create, output_dir\n    )\n\n    output_dir_exists = os.path.exists(dir_to_create)\n\n    if output_dir_exists:\n        if overwrite_if_exists:\n            logger.debug(\n                'Output directory %s already exists, overwriting it', dir_to_create\n            )\n        else:\n            msg = 'Error: \"{}\" directory already exists'.format(dir_to_create)\n            raise OutputDirExistsException(msg)\n    else:\n        make_sure_path_exists(dir_to_create)\n\n    return dir_to_create, not output_dir_exists",
                "def ensure_dir_is_templated(dirname):\n    \"\"\"Ensure that dirname is a templated directory name.\"\"\"\n    if '{{' in dirname and '}}' in dirname:\n        return True\n    else:\n        raise NonTemplatedInputDirException",
                "def _run_hook_from_repo_dir(\n    repo_dir, hook_name, project_dir, context, delete_project_on_failure\n):\n    \"\"\"Run hook from repo directory, clean project directory if hook fails.\n\n    :param repo_dir: Project template input directory.\n    :param hook_name: The hook to execute.\n    :param project_dir: The directory to execute the script from.\n    :param context: Cookiecutter project context.\n    :param delete_project_on_failure: Delete the project directory on hook\n        failure?\n    \"\"\"\n    with work_in(repo_dir):\n        try:\n            run_hook(hook_name, project_dir, context)\n        except FailedHookException:\n            if delete_project_on_failure:\n                rmtree(project_dir)\n            logger.error(\n                \"Stopping generation because %s hook \"\n                \"script didn't exit successfully\",\n                hook_name,\n            )\n            raise",
                "def generate_files(\n    repo_dir,\n    context=None,\n    output_dir='.',\n    overwrite_if_exists=False,\n    skip_if_file_exists=False,\n    accept_hooks=True,\n):\n    \"\"\"Render the templates and saves them to files.\n\n    :param repo_dir: Project template input directory.\n    :param context: Dict for populating the template's variables.\n    :param output_dir: Where to output the generated project dir into.\n    :param overwrite_if_exists: Overwrite the contents of the output directory\n        if it exists.\n    :param accept_hooks: Accept pre and post hooks if set to `True`.\n    \"\"\"\n    template_dir = find_template(repo_dir)\n    logger.debug('Generating project from %s...', template_dir)\n    context = context or OrderedDict([])\n\n    unrendered_dir = os.path.split(template_dir)[1]\n    ensure_dir_is_templated(unrendered_dir)\n    env = StrictEnvironment(context=context, keep_trailing_newline=True)\n    try:\n        project_dir, output_directory_created = render_and_create_dir(\n            unrendered_dir, context, output_dir, env, overwrite_if_exists\n        )\n    except UndefinedError as err:\n        msg = \"Unable to create project directory '{}'\".format(unrendered_dir)\n        raise UndefinedVariableInTemplate(msg, err, context)\n\n    # We want the Jinja path and the OS paths to match. Consequently, we'll:\n    #   + CD to the template folder\n    #   + Set Jinja's path to '.'\n    #\n    #  In order to build our files to the correct folder(s), we'll use an\n    # absolute path for the target folder (project_dir)\n\n    project_dir = os.path.abspath(project_dir)\n    logger.debug('Project directory is %s', project_dir)\n\n    # if we created the output directory, then it's ok to remove it\n    # if rendering fails\n    delete_project_on_failure = output_directory_created\n\n    if accept_hooks:\n        _run_hook_from_repo_dir(\n            repo_dir, 'pre_gen_project', project_dir, context, delete_project_on_failure\n        )\n\n    with work_in(template_dir):\n        env.loader = FileSystemLoader('.')\n\n        for root, dirs, files in os.walk('.'):\n            # We must separate the two types of dirs into different lists.\n            # The reason is that we don't want ``os.walk`` to go through the\n            # unrendered directories, since they will just be copied.\n            copy_dirs = []\n            render_dirs = []\n\n            for d in dirs:\n                d_ = os.path.normpath(os.path.join(root, d))\n                # We check the full path, because that's how it can be\n                # specified in the ``_copy_without_render`` setting, but\n                # we store just the dir name\n                if is_copy_only_path(d_, context):\n                    copy_dirs.append(d)\n                else:\n                    render_dirs.append(d)\n\n            for copy_dir in copy_dirs:\n                indir = os.path.normpath(os.path.join(root, copy_dir))\n                outdir = os.path.normpath(os.path.join(project_dir, indir))\n                outdir = env.from_string(outdir).render(**context)\n                logger.debug('Copying dir %s to %s without rendering', indir, outdir)\n                shutil.copytree(indir, outdir)\n\n            # We mutate ``dirs``, because we only want to go through these dirs\n            # recursively\n            dirs[:] = render_dirs\n            for d in dirs:\n                unrendered_dir = os.path.join(project_dir, root, d)\n                try:\n                    render_and_create_dir(\n                        unrendered_dir, context, output_dir, env, overwrite_if_exists\n                    )\n                except UndefinedError as err:\n                    if delete_project_on_failure:\n                        rmtree(project_dir)\n                    _dir = os.path.relpath(unrendered_dir, output_dir)\n                    msg = \"Unable to create directory '{}'\".format(_dir)\n                    raise UndefinedVariableInTemplate(msg, err, context)\n\n            for f in files:\n                infile = os.path.normpath(os.path.join(root, f))\n                if is_copy_only_path(infile, context):\n                    outfile_tmpl = env.from_string(infile)\n                    outfile_rendered = outfile_tmpl.render(**context)\n                    outfile = os.path.join(project_dir, outfile_rendered)\n                    logger.debug(\n                        'Copying file %s to %s without rendering', infile, outfile\n                    )\n                    shutil.copyfile(infile, outfile)\n                    shutil.copymode(infile, outfile)\n                    continue\n                try:\n                    generate_file(\n                        project_dir, infile, context, env, skip_if_file_exists\n                    )\n                except UndefinedError as err:\n                    if delete_project_on_failure:\n                        rmtree(project_dir)\n                    msg = \"Unable to create file '{}'\".format(infile)\n                    raise UndefinedVariableInTemplate(msg, err, context)\n\n    if accept_hooks:\n        _run_hook_from_repo_dir(\n            repo_dir,\n            'post_gen_project',\n            project_dir,\n            context,\n            delete_project_on_failure,\n        )\n\n    return project_dir"
            ],
            "inscope_function_signatures": [
                "is_copy_only_path(path, context)",
                "apply_overwrites_to_context(context, overwrite_context)",
                "generate_context(context_file='cookiecutter.json', default_context=None, extra_context=None)",
                "generate_file(project_dir, infile, context, env, skip_if_file_exists=False)",
                "render_and_create_dir(dirname, context, output_dir, environment, overwrite_if_exists=False)",
                "ensure_dir_is_templated(dirname)",
                "_run_hook_from_repo_dir(repo_dir, hook_name, project_dir, context, delete_project_on_failure)",
                "generate_files(repo_dir, context=None, output_dir='.', overwrite_if_exists=False, skip_if_file_exists=False, accept_hooks=True)"
            ],
            "variables_in_file": {
                "logger": [
                    153,
                    355,
                    135,
                    247,
                    201,
                    295,
                    330,
                    110,
                    143,
                    209,
                    273,
                    147,
                    181,
                    150,
                    183,
                    25,
                    155
                ],
                "logging.getLogger": [
                    25
                ],
                "logging": [
                    25
                ],
                "__name__": [
                    25
                ],
                "dont_render": [
                    40,
                    39
                ],
                "context": [
                    140,
                    274,
                    278,
                    281,
                    285,
                    39,
                    170,
                    303,
                    51,
                    179,
                    180,
                    55,
                    321,
                    67,
                    197,
                    329,
                    82,
                    340,
                    347,
                    351,
                    353,
                    101,
                    363,
                    110,
                    111,
                    369,
                    243,
                    376
                ],
                "fnmatch.fnmatch": [
                    40
                ],
                "fnmatch": [
                    40
                ],
                "path": [
                    40
                ],
                "KeyError": [
                    42
                ],
                "variable": [
                    67,
                    50,
                    51,
                    55
                ],
                "overwrite": [
                    64,
                    67,
                    50,
                    59,
                    63
                ],
                "overwrite_context.items": [
                    50
                ],
                "overwrite_context": [
                    50
                ],
                "context_value": [
                    64,
                    55,
                    57,
                    59,
                    63
                ],
                "isinstance": [
                    57
                ],
                "list": [
                    57
                ],
                "context_value.remove": [
                    63
                ],
                "context_value.insert": [
                    64
                ],
                "OrderedDict": [
                    82,
                    274,
                    86
                ],
                "open": [
                    185,
                    85,
                    174
                ],
                "context_file": [
                    90,
                    99,
                    85
                ],
                "file_handle": [
                    85,
                    86
                ],
                "obj": [
                    106,
                    108,
                    101,
                    86
                ],
                "json.load": [
                    86
                ],
                "json": [
                    86
                ],
                "ValueError": [
                    87
                ],
                "full_fpath": [
                    90,
                    94
                ],
                "os.path.abspath": [
                    90,
                    294
                ],
                "os.path": [
                    160,
                    354,
                    99,
                    294,
                    199,
                    327,
                    328,
                    140,
                    141,
                    205,
                    337,
                    146,
                    276,
                    345,
                    90,
                    317,
                    350
                ],
                "os": [
                    160,
                    354,
                    99,
                    294,
                    199,
                    327,
                    328,
                    140,
                    141,
                    205,
                    337,
                    146,
                    276,
                    309,
                    345,
                    90,
                    317,
                    350
                ],
                "json_exc_message": [
                    91,
                    94
                ],
                "str": [
                    91
                ],
                "e": [
                    91
                ],
                "our_exc_message": [
                    96,
                    92
                ],
                "format": [
                    368,
                    213,
                    346,
                    284,
                    93
                ],
                "ContextDecodingException": [
                    96
                ],
                "file_name": [
                    99,
                    100
                ],
                "os.path.split": [
                    99,
                    276
                ],
                "file_stem": [
                    100,
                    101
                ],
                "file_name.split": [
                    100
                ],
                "default_context": [
                    105,
                    106
                ],
                "apply_overwrites_to_context": [
                    106,
                    108
                ],
                "extra_context": [
                    107,
                    108
                ],
                "logger.debug": [
                    355,
                    135,
                    295,
                    201,
                    330,
                    110,
                    143,
                    209,
                    273,
                    147,
                    181,
                    150,
                    183,
                    153,
                    155
                ],
                "infile": [
                    160,
                    352,
                    356,
                    358,
                    135,
                    359,
                    138,
                    363,
                    174,
                    368,
                    153,
                    154,
                    155,
                    156,
                    189,
                    350,
                    351
                ],
                "outfile_tmpl": [
                    352,
                    353,
                    138,
                    140
                ],
                "env.from_string": [
                    352,
                    329,
                    138
                ],
                "env": [
                    352,
                    164,
                    329,
                    138,
                    363,
                    307,
                    340,
                    278,
                    281
                ],
                "outfile": [
                    354,
                    356,
                    358,
                    359,
                    140,
                    141,
                    143,
                    146,
                    147,
                    150,
                    183,
                    185,
                    155,
                    156,
                    189
                ],
                "os.path.join": [
                    354,
                    327,
                    328,
                    199,
                    140,
                    337,
                    317,
                    350
                ],
                "project_dir": [
                    354,
                    344,
                    294,
                    295,
                    328,
                    363,
                    140,
                    303,
                    367,
                    337,
                    243,
                    246,
                    375,
                    280,
                    380
                ],
                "outfile_tmpl.render": [
                    353,
                    140
                ],
                "file_name_is_empty": [
                    141,
                    142
                ],
                "os.path.isdir": [
                    141
                ],
                "skip_if_file_exists": [
                    146,
                    363
                ],
                "os.path.exists": [
                    146,
                    205
                ],
                "is_binary": [
                    154
                ],
                "shutil.copyfile": [
                    156,
                    358
                ],
                "shutil": [
                    358,
                    359,
                    331,
                    156,
                    189
                ],
                "infile_fwd_slashes": [
                    160,
                    164
                ],
                "infile.replace": [
                    160
                ],
                "os.path.sep": [
                    160
                ],
                "tmpl": [
                    170,
                    164
                ],
                "env.get_template": [
                    164
                ],
                "TemplateSyntaxError": [
                    165
                ],
                "exception.translated": [
                    168
                ],
                "exception": [
                    168
                ],
                "rendered_file": [
                    186,
                    170
                ],
                "tmpl.render": [
                    170
                ],
                "rd": [
                    178,
                    174,
                    175
                ],
                "rd.readline": [
                    175
                ],
                "newline": [
                    185,
                    178,
                    180,
                    181
                ],
                "rd.newlines": [
                    178
                ],
                "get": [
                    179
                ],
                "fh": [
                    185,
                    186
                ],
                "fh.write": [
                    186
                ],
                "shutil.copymode": [
                    189,
                    359
                ],
                "name_tmpl": [
                    196,
                    197
                ],
                "environment.from_string": [
                    196
                ],
                "environment": [
                    196
                ],
                "dirname": [
                    196,
                    223
                ],
                "rendered_dirname": [
                    197,
                    199
                ],
                "name_tmpl.render": [
                    197
                ],
                "dir_to_create": [
                    199,
                    202,
                    205,
                    210,
                    213,
                    216,
                    218
                ],
                "os.path.normpath": [
                    327,
                    328,
                    199,
                    317,
                    350
                ],
                "output_dir": [
                    281,
                    199,
                    202,
                    340,
                    345
                ],
                "output_dir_exists": [
                    218,
                    205,
                    207
                ],
                "overwrite_if_exists": [
                    208,
                    281,
                    340
                ],
                "msg": [
                    368,
                    369,
                    213,
                    214,
                    346,
                    347,
                    284,
                    285
                ],
                "OutputDirExistsException": [
                    214
                ],
                "make_sure_path_exists": [
                    216
                ],
                "NonTemplatedInputDirException": [
                    226
                ],
                "work_in": [
                    241,
                    306
                ],
                "repo_dir": [
                    272,
                    241,
                    373,
                    303
                ],
                "run_hook": [
                    243
                ],
                "hook_name": [
                    250,
                    243
                ],
                "FailedHookException": [
                    244
                ],
                "delete_project_on_failure": [
                    299,
                    366,
                    303,
                    245,
                    343,
                    377
                ],
                "rmtree": [
                    344,
                    246,
                    367
                ],
                "logger.error": [
                    247
                ],
                "template_dir": [
                    272,
                    273,
                    306,
                    276
                ],
                "find_template": [
                    272
                ],
                "unrendered_dir": [
                    345,
                    337,
                    276,
                    277,
                    340,
                    281,
                    284
                ],
                "ensure_dir_is_templated": [
                    277
                ],
                "StrictEnvironment": [
                    278
                ],
                "output_directory_created": [
                    280,
                    299
                ],
                "render_and_create_dir": [
                    280,
                    339
                ],
                "UndefinedError": [
                    283,
                    365,
                    342
                ],
                "UndefinedVariableInTemplate": [
                    369,
                    347,
                    285
                ],
                "err": [
                    369,
                    347,
                    285
                ],
                "accept_hooks": [
                    371,
                    301
                ],
                "_run_hook_from_repo_dir": [
                    372,
                    302
                ],
                "env.loader": [
                    307
                ],
                "FileSystemLoader": [
                    307
                ],
                "root": [
                    327,
                    337,
                    309,
                    317,
                    350
                ],
                "dirs": [
                    336,
                    316,
                    309,
                    335
                ],
                "files": [
                    349,
                    309
                ],
                "os.walk": [
                    309
                ],
                "copy_dirs": [
                    313,
                    322,
                    326
                ],
                "render_dirs": [
                    314,
                    324,
                    335
                ],
                "d": [
                    322,
                    324,
                    336,
                    337,
                    316,
                    317
                ],
                "d_": [
                    321,
                    317
                ],
                "is_copy_only_path": [
                    321,
                    351
                ],
                "copy_dirs.append": [
                    322
                ],
                "render_dirs.append": [
                    324
                ],
                "copy_dir": [
                    326,
                    327
                ],
                "indir": [
                    328,
                    330,
                    331,
                    327
                ],
                "outdir": [
                    328,
                    329,
                    330,
                    331
                ],
                "render": [
                    329
                ],
                "shutil.copytree": [
                    331
                ],
                "_dir": [
                    345,
                    346
                ],
                "os.path.relpath": [
                    345
                ],
                "f": [
                    349,
                    350
                ],
                "outfile_rendered": [
                    353,
                    354
                ],
                "generate_file": [
                    362
                ]
            },
            "filtered_variables_in_file": {
                "logger": [
                    153,
                    355,
                    135,
                    247,
                    201,
                    295,
                    330,
                    110,
                    143,
                    209,
                    273,
                    147,
                    181,
                    150,
                    183,
                    25,
                    155
                ],
                "logging.getLogger": [
                    25
                ],
                "logging": [
                    25
                ],
                "dont_render": [
                    40,
                    39
                ],
                "context": [
                    140,
                    274,
                    278,
                    281,
                    285,
                    39,
                    170,
                    303,
                    51,
                    179,
                    180,
                    55,
                    321,
                    67,
                    197,
                    329,
                    82,
                    340,
                    347,
                    351,
                    353,
                    101,
                    363,
                    110,
                    111,
                    369,
                    243,
                    376
                ],
                "fnmatch.fnmatch": [
                    40
                ],
                "fnmatch": [
                    40
                ],
                "path": [
                    40
                ],
                "variable": [
                    67,
                    50,
                    51,
                    55
                ],
                "overwrite": [
                    64,
                    67,
                    50,
                    59,
                    63
                ],
                "overwrite_context.items": [
                    50
                ],
                "overwrite_context": [
                    50
                ],
                "context_value": [
                    64,
                    55,
                    57,
                    59,
                    63
                ],
                "context_value.remove": [
                    63
                ],
                "context_value.insert": [
                    64
                ],
                "OrderedDict": [
                    82,
                    274,
                    86
                ],
                "context_file": [
                    90,
                    99,
                    85
                ],
                "file_handle": [
                    85,
                    86
                ],
                "obj": [
                    106,
                    108,
                    101,
                    86
                ],
                "json.load": [
                    86
                ],
                "json": [
                    86
                ],
                "full_fpath": [
                    90,
                    94
                ],
                "os.path.abspath": [
                    90,
                    294
                ],
                "os.path": [
                    160,
                    354,
                    99,
                    294,
                    199,
                    327,
                    328,
                    140,
                    141,
                    205,
                    337,
                    146,
                    276,
                    345,
                    90,
                    317,
                    350
                ],
                "os": [
                    160,
                    354,
                    99,
                    294,
                    199,
                    327,
                    328,
                    140,
                    141,
                    205,
                    337,
                    146,
                    276,
                    309,
                    345,
                    90,
                    317,
                    350
                ],
                "json_exc_message": [
                    91,
                    94
                ],
                "e": [
                    91
                ],
                "our_exc_message": [
                    96,
                    92
                ],
                "ContextDecodingException": [
                    96
                ],
                "file_name": [
                    99,
                    100
                ],
                "os.path.split": [
                    99,
                    276
                ],
                "file_stem": [
                    100,
                    101
                ],
                "file_name.split": [
                    100
                ],
                "default_context": [
                    105,
                    106
                ],
                "apply_overwrites_to_context": [
                    106,
                    108
                ],
                "extra_context": [
                    107,
                    108
                ],
                "logger.debug": [
                    355,
                    135,
                    295,
                    201,
                    330,
                    110,
                    143,
                    209,
                    273,
                    147,
                    181,
                    150,
                    183,
                    153,
                    155
                ],
                "infile": [
                    160,
                    352,
                    356,
                    358,
                    135,
                    359,
                    138,
                    363,
                    174,
                    368,
                    153,
                    154,
                    155,
                    156,
                    189,
                    350,
                    351
                ],
                "outfile_tmpl": [
                    352,
                    353,
                    138,
                    140
                ],
                "env.from_string": [
                    352,
                    329,
                    138
                ],
                "env": [
                    352,
                    164,
                    329,
                    138,
                    363,
                    307,
                    340,
                    278,
                    281
                ],
                "outfile": [
                    354,
                    356,
                    358,
                    359,
                    140,
                    141,
                    143,
                    146,
                    147,
                    150,
                    183,
                    185,
                    155,
                    156,
                    189
                ],
                "os.path.join": [
                    354,
                    327,
                    328,
                    199,
                    140,
                    337,
                    317,
                    350
                ],
                "project_dir": [
                    354,
                    344,
                    294,
                    295,
                    328,
                    363,
                    140,
                    303,
                    367,
                    337,
                    243,
                    246,
                    375,
                    280,
                    380
                ],
                "outfile_tmpl.render": [
                    353,
                    140
                ],
                "file_name_is_empty": [
                    141,
                    142
                ],
                "os.path.isdir": [
                    141
                ],
                "skip_if_file_exists": [
                    146,
                    363
                ],
                "os.path.exists": [
                    146,
                    205
                ],
                "is_binary": [
                    154
                ],
                "shutil.copyfile": [
                    156,
                    358
                ],
                "shutil": [
                    358,
                    359,
                    331,
                    156,
                    189
                ],
                "infile_fwd_slashes": [
                    160,
                    164
                ],
                "infile.replace": [
                    160
                ],
                "os.path.sep": [
                    160
                ],
                "tmpl": [
                    170,
                    164
                ],
                "env.get_template": [
                    164
                ],
                "TemplateSyntaxError": [
                    165
                ],
                "exception.translated": [
                    168
                ],
                "exception": [
                    168
                ],
                "rendered_file": [
                    186,
                    170
                ],
                "tmpl.render": [
                    170
                ],
                "rd": [
                    178,
                    174,
                    175
                ],
                "rd.readline": [
                    175
                ],
                "newline": [
                    185,
                    178,
                    180,
                    181
                ],
                "rd.newlines": [
                    178
                ],
                "get": [
                    179
                ],
                "fh": [
                    185,
                    186
                ],
                "fh.write": [
                    186
                ],
                "shutil.copymode": [
                    189,
                    359
                ],
                "name_tmpl": [
                    196,
                    197
                ],
                "environment.from_string": [
                    196
                ],
                "environment": [
                    196
                ],
                "dirname": [
                    196,
                    223
                ],
                "rendered_dirname": [
                    197,
                    199
                ],
                "name_tmpl.render": [
                    197
                ],
                "dir_to_create": [
                    199,
                    202,
                    205,
                    210,
                    213,
                    216,
                    218
                ],
                "os.path.normpath": [
                    327,
                    328,
                    199,
                    317,
                    350
                ],
                "output_dir": [
                    281,
                    199,
                    202,
                    340,
                    345
                ],
                "output_dir_exists": [
                    218,
                    205,
                    207
                ],
                "overwrite_if_exists": [
                    208,
                    281,
                    340
                ],
                "msg": [
                    368,
                    369,
                    213,
                    214,
                    346,
                    347,
                    284,
                    285
                ],
                "OutputDirExistsException": [
                    214
                ],
                "make_sure_path_exists": [
                    216
                ],
                "NonTemplatedInputDirException": [
                    226
                ],
                "work_in": [
                    241,
                    306
                ],
                "repo_dir": [
                    272,
                    241,
                    373,
                    303
                ],
                "run_hook": [
                    243
                ],
                "hook_name": [
                    250,
                    243
                ],
                "FailedHookException": [
                    244
                ],
                "delete_project_on_failure": [
                    299,
                    366,
                    303,
                    245,
                    343,
                    377
                ],
                "rmtree": [
                    344,
                    246,
                    367
                ],
                "logger.error": [
                    247
                ],
                "template_dir": [
                    272,
                    273,
                    306,
                    276
                ],
                "find_template": [
                    272
                ],
                "unrendered_dir": [
                    345,
                    337,
                    276,
                    277,
                    340,
                    281,
                    284
                ],
                "ensure_dir_is_templated": [
                    277
                ],
                "StrictEnvironment": [
                    278
                ],
                "output_directory_created": [
                    280,
                    299
                ],
                "render_and_create_dir": [
                    280,
                    339
                ],
                "UndefinedError": [
                    283,
                    365,
                    342
                ],
                "UndefinedVariableInTemplate": [
                    369,
                    347,
                    285
                ],
                "err": [
                    369,
                    347,
                    285
                ],
                "accept_hooks": [
                    371,
                    301
                ],
                "_run_hook_from_repo_dir": [
                    372,
                    302
                ],
                "env.loader": [
                    307
                ],
                "FileSystemLoader": [
                    307
                ],
                "root": [
                    327,
                    337,
                    309,
                    317,
                    350
                ],
                "dirs": [
                    336,
                    316,
                    309,
                    335
                ],
                "files": [
                    349,
                    309
                ],
                "os.walk": [
                    309
                ],
                "copy_dirs": [
                    313,
                    322,
                    326
                ],
                "render_dirs": [
                    314,
                    324,
                    335
                ],
                "d": [
                    322,
                    324,
                    336,
                    337,
                    316,
                    317
                ],
                "d_": [
                    321,
                    317
                ],
                "is_copy_only_path": [
                    321,
                    351
                ],
                "copy_dirs.append": [
                    322
                ],
                "render_dirs.append": [
                    324
                ],
                "copy_dir": [
                    326,
                    327
                ],
                "indir": [
                    328,
                    330,
                    331,
                    327
                ],
                "outdir": [
                    328,
                    329,
                    330,
                    331
                ],
                "render": [
                    329
                ],
                "shutil.copytree": [
                    331
                ],
                "_dir": [
                    345,
                    346
                ],
                "os.path.relpath": [
                    345
                ],
                "f": [
                    349,
                    350
                ],
                "outfile_rendered": [
                    353,
                    354
                ],
                "generate_file": [
                    362
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/cookiecutter_1/tests/test_generate_context.py",
                "test_function": "test_generate_context_decodes_non_ascii_chars",
                "test_function_code": "def test_generate_context_decodes_non_ascii_chars():\n    \"\"\"Verify `generate_context` correctly decodes non-ascii chars.\"\"\"\n    expected_context = {'non_ascii': OrderedDict([('full_name', '\u00e9\u00e8\u00e0'),])}\n\n    generated_context = generate.generate_context(\n        context_file='tests/test-generate-context/non_ascii.json'\n    )\n\n    assert generated_context == expected_context",
                "test_error": "FileNotFoundError: [Errno 2] No such file or directory: 'tests/test-generate-context/non_ascii.json'",
                "full_test_error": "def test_generate_context_decodes_non_ascii_chars():\n        \"\"\"Verify `generate_context` correctly decodes non-ascii chars.\"\"\"\n        expected_context = {'non_ascii': OrderedDict([('full_name', '\u00e9\u00e8\u00e0'),])}\n    \n        generated_context = generate.generate_context(\n>           context_file='tests/test-generate-context/non_ascii.json'\n        )\n\ntests/test_generate_context.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncontext_file = 'tests/test-generate-context/non_ascii.json'\ndefault_context = None, extra_context = None\n\n    def generate_context(\n        context_file='cookiecutter.json', default_context=None, extra_context=None\n    ):\n        \"\"\"Generate the context for a Cookiecutter project template.\n    \n        Loads the JSON file as a Python object, with key being the JSON filename.\n    \n        :param context_file: JSON file containing key/value pairs for populating\n            the cookiecutter's variables.\n        :param default_context: Dictionary containing config to take into account.\n        :param extra_context: Dictionary containing configuration overrides\n        \"\"\"\n        context = OrderedDict([])\n    \n        try:\n>           with open(context_file) as file_handle:\nE           FileNotFoundError: [Errno 2] No such file or directory: 'tests/test-generate-context/non_ascii.json'\n\ncookiecutter/generate.py:85: FileNotFoundError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}