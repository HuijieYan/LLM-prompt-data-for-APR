{
    "1.1.1": "def format_file_in_place(\n    src: Path,\n    line_length: int,\n    fast: bool,\n    write_back: WriteBack = WriteBack.NO,\n    lock: Any = None,  # multiprocessing.Manager().Lock() is some crazy proxy\n) -> bool:\n    \n\n    with tokenize.open(src) as src_buffer:\n        src_contents = src_buffer.read()\n    try:\n        dst_contents = format_file_contents(\n            src_contents, line_length=line_length, fast=fast\n        )\n    except NothingChanged:\n        return False\n\n    if write_back == write_back.YES:\n        with open(src, \"w\", encoding=src_buffer.encoding) as f:\n            f.write(dst_contents)\n    elif write_back == write_back.DIFF:\n        src_name = f\"{src.name}  (original)\"\n        dst_name = f\"{src.name}  (formatted)\"\n        diff_contents = diff(src_contents, dst_contents, src_name, dst_name)\n        if lock:\n            lock.acquire()\n        try:\n            sys.stdout.write(diff_contents)\n        finally:\n            if lock:\n                lock.release()\n    return True\n",
    "1.1.2": "Format file under `src` path. Return True if changed.\n\nIf `write_back` is True, write reformatted code back to stdout.\n`line_length` and `fast` options are passed to :func:`format_file_contents`.",
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "black.py",
    "1.3.2": [
        "format_file_contents(src_contents: str, line_length: int, fast: bool) -> FileContent",
        "diff(a: str, b: str, a_name: str, b_name: str) -> str"
    ],
    "1.4.1": [
        "    def test_expression_diff(self) -> None:\n        source, _ = read_data(\"expression.py\")\n        expected, _ = read_data(\"expression.diff\")\n        tmp_file = Path(black.dump_to_file(source))\n        hold_stdout = sys.stdout\n        try:\n            sys.stdout = StringIO()\n            self.assertTrue(ff(tmp_file, write_back=black.WriteBack.DIFF))\n            sys.stdout.seek(0)\n            actual = sys.stdout.read()\n            actual = actual.replace(str(tmp_file), \"<stdin>\")\n        finally:\n            sys.stdout = hold_stdout\n            os.unlink(tmp_file)\n        actual = actual.rstrip() + \"\\n\"  # the diff output has a trailing space\n        if expected != actual:\n            dump = black.dump_to_file(actual)\n            msg = (\n                f\"Expected diff isn't equal to the actual. If you made changes \"\n                f\"to expression.py and this is an anticipated difference, \"\n                f\"overwrite tests/expression.diff with {dump}\"\n            )\n            self.assertEqual(expected, actual, msg)"
    ],
    "1.4.2": [
        "tests/test_black.py"
    ],
    "2.1.1": [
        [
            "E           AssertionError: '--- <stdin>  (original)\\n+++ <stdin>  (format[9503 chars]ER\\n' != '--- blk_fdd0gogs.log  (original)\\n+++ blk_fdd[9521 chars]ER\\n'\nE           - --- <stdin>  (original)\nE           - +++ <stdin>  (formatted)\nE           + --- blk_fdd0gogs.log  (original)\nE           + +++ blk_fdd0gogs.log  (formatted)\nE             @@ -1,8 +1,8 @@\nE              ...\nE             -'some_string'\nE             -b'\\\\xa3'\nE             +\"some_string\"\nE             +b\"\\\\xa3\"\nE              Name\nE              None\nE              True\nE              False\nE              1\nE             @@ -29,60 +29,78 @@\nE              ~great\nE              +value\nE              -1\nE              ~int and not v1 ^ 123 + v2 | True\nE              (~int) and (not ((v1 ^ (123 + v2)) | True))\nE             -flags & ~ select.EPOLLIN and waiters.write_task is not None\nE             +flags & ~select.EPOLLIN and waiters.write_task is not None\nE              lambda arg: None\nE              lambda a=True: a\nE              lambda a, b, c=True: a\nE             -lambda a, b, c=True, *, d=(1 << v2), e='str': a\nE             -lambda a, b, c=True, *vararg, d=(v1 << 2), e='str', **kwargs: a + b\nE             -foo = (lambda port_id, ignore_missing: {\"port1\": port1_resource, \"port2\": port2_resource}[port_id])\nE             +lambda a, b, c=True, *, d=(1 << v2), e=\"str\": a\nE             +lambda a, b, c=True, *vararg, d=(v1 << 2), e=\"str\", **kwargs: a + b\nE             +foo = (\nE             +    lambda port_id, ignore_missing: {\"port1\": port1_resource, \"port2\": port2_resource}[\nE             +        port_id\nE             +    ]\nE             +)\nE              1 if True else 2\nE              str or None if True else str or bytes or None\nE              (str or None) if True else (str or bytes or None)\nE              str or None if (1 if True else 2) else str or bytes or None\nE              (str or None) if (1 if True else 2) else (str or bytes or None)\nE             -{'2.7': dead, '3.7': (long_live or die_hard)}\nE             -{'2.7': dead, '3.7': (long_live or die_hard), **{'3.6': verygood}}\nE             +{\"2.7\": dead, \"3.7\": (long_live or die_hard)}\nE             +{\"2.7\": dead, \"3.7\": (long_live or die_hard), **{\"3.6\": verygood}}\nE              {**a, **b, **c}\nE             -{'2.7', '3.6', '3.7', '3.8', '3.9', ('4.0' if gilectomy else '3.10')}\nE             -({'a': 'b'}, (True or False), (+value), 'string', b'bytes') or None\nE             +{\"2.7\", \"3.6\", \"3.7\", \"3.8\", \"3.9\", (\"4.0\" if gilectomy else \"3.10\")}\nE             +({\"a\": \"b\"}, (True or False), (+value), \"string\", b\"bytes\") or None\nE              ()\nE              (1,)\nE              (1, 2)\nE              (1, 2, 3)\nE              []\nE              [1, 2, 3, 4, 5, 6, 7, 8, 9, (10 or A), (11 or B), (12 or C)]\nE             -[1, 2, 3,]\nE             +[1, 2, 3]\nE              [*a]\nE              [*range(10)]\nE             -[*a, 4, 5,]\nE             -[4, *a, 5,]\nE             -[this_is_a_very_long_variable_which_will_force_a_delimiter_split, element, another, *more]\nE             +[*a, 4, 5]\nE             +[4, *a, 5]\nE             +[\nE             +    this_is_a_very_long_variable_which_will_force_a_delimiter_split,\nE             +    element,\nE             +    another,\nE             +    *more,\nE             +]\nE              {i for i in (1, 2, 3)}\nE              {(i ** 2) for i in (1, 2, 3)}\nE             -{(i ** 2) for i, _ in ((1, 'a'), (2, 'b'), (3, 'c'))}\nE             +{(i ** 2) for i, _ in ((1, \"a\"), (2, \"b\"), (3, \"c\"))}\nE              {((i ** 2) + j) for i in (1, 2, 3) for j in (1, 2, 3)}\nE              [i for i in (1, 2, 3)]\nE              [(i ** 2) for i in (1, 2, 3)]\nE             -[(i ** 2) for i, _ in ((1, 'a'), (2, 'b'), (3, 'c'))]\nE             +[(i ** 2) for i, _ in ((1, \"a\"), (2, \"b\"), (3, \"c\"))]\nE              [((i ** 2) + j) for i in (1, 2, 3) for j in (1, 2, 3)]\nE              {i: 0 for i in (1, 2, 3)}\nE             -{i: j for i, j in ((1, 'a'), (2, 'b'), (3, 'c'))}\nE             +{i: j for i, j in ((1, \"a\"), (2, \"b\"), (3, \"c\"))}\nE              {a: b * 2 for a, b in dictionary.items()}\nE              {a: b * -2 for a, b in dictionary.items()}\nE             -{k: v for k, v in this_is_a_very_long_variable_which_will_cause_a_trailing_comma_which_breaks_the_comprehension}\nE             +{\nE             +    k: v\nE             +    for k, v in this_is_a_very_long_variable_which_will_cause_a_trailing_comma_which_breaks_the_comprehension\nE             +}\nE              Python3 > Python2 > COBOL\nE              Life is Life\nE              call()\nE              call(arg)\nE             -call(kwarg='hey')\nE             -call(arg, kwarg='hey')\nE             -call(arg, another, kwarg='hey', **kwargs)\nE             -call(this_is_a_very_long_variable_which_will_force_a_delimiter_split, arg, another, kwarg='hey', **kwargs)  # note: no trailing comma pre-3.6\nE             +call(kwarg=\"hey\")\nE             +call(arg, kwarg=\"hey\")\nE             +call(arg, another, kwarg=\"hey\", **kwargs)\nE             +call(\nE             +    this_is_a_very_long_variable_which_will_force_a_delimiter_split,\nE             +    arg,\nE             +    another,\nE             +    kwarg=\"hey\",\nE             +    **kwargs\nE             +)  # note: no trailing comma pre-3.6\nE              call(*gidgets[:2])\nE              call(a, *gidgets[:2])\nE              call(**self.screen_kwargs)\nE              call(b, **self.screen_kwargs)\nE              lukasz.langa.pl\nE             @@ -91,11 +109,11 @@\nE              1.0 .real\nE              ....__class__\nE              list[str]\nE              dict[str, int]\nE              tuple[str, ...]\nE             -tuple[str, int, float, dict[str, int],]\nE             +tuple[str, int, float, dict[str, int]]\nE              very_long_variable_name_filters: t.List[\nE                  t.Tuple[str, t.Union[str, t.List[t.Optional[str]]]],\nE              ]\nE              slice[0]\nE              slice[0:1]\nE             @@ -122,88 +140,122 @@\nE              numpy[-(c + 1):, d]\nE              numpy[:, l[-2]]\nE              numpy[:, ::-1]\nE              numpy[np.newaxis, :]\nE              (str or None) if (sys.version_info[0] > (3,)) else (str or bytes or None)\nE             -{'2.7': dead, '3.7': long_live or die_hard}\nE             -{'2.7', '3.6', '3.7', '3.8', '3.9', '4.0' if gilectomy else '3.10'}\nE             +{\"2.7\": dead, \"3.7\": long_live or die_hard}\nE             +{\"2.7\", \"3.6\", \"3.7\", \"3.8\", \"3.9\", \"4.0\" if gilectomy else \"3.10\"}\nE              [1, 2, 3, 4, 5, 6, 7, 8, 9, 10 or A, 11 or B, 12 or C]\nE              (SomeName)\nE              SomeName\nE              (Good, Bad, Ugly)\nE              (i for i in (1, 2, 3))\nE              ((i ** 2) for i in (1, 2, 3))\nE             -((i ** 2) for i, _ in ((1, 'a'), (2, 'b'), (3, 'c')))\nE             +((i ** 2) for i, _ in ((1, \"a\"), (2, \"b\"), (3, \"c\")))\nE              (((i ** 2) + j) for i in (1, 2, 3) for j in (1, 2, 3))\nE              (*starred)\nE             -{\"id\": \"1\",\"type\": \"type\",\"started_at\": now(),\"ended_at\": now() + timedelta(days=10),\"priority\": 1,\"import_session_id\": 1,**kwargs}\nE             +{\nE             +    \"id\": \"1\",\nE             +    \"type\": \"type\",\nE             +    \"started_at\": now(),\nE             +    \"ended_at\": now() + timedelta(days=10),\nE             +    \"priority\": 1,\nE             +    \"import_session_id\": 1,\nE             +    **kwargs,\nE             +}\nE              a = (1,)\nE              b = 1,\nE              c = 1\nE              d = (1,) + a + (2,)\nE              e = (1,).count(1)\nE             -what_is_up_with_those_new_coord_names = (coord_names + set(vars_to_create)) + set(vars_to_remove)\nE             -what_is_up_with_those_new_coord_names = (coord_names | set(vars_to_create)) - set(vars_to_remove)\nE             -result = session.query(models.Customer.id).filter(models.Customer.account_id == account_id, models.Customer.email == email_address).order_by(models.Customer.id.asc(),).all()\nE             +what_is_up_with_those_new_coord_names = (coord_names + set(vars_to_create)) + set(\nE             +    vars_to_remove\nE             +)\nE             +what_is_up_with_those_new_coord_names = (coord_names | set(vars_to_create)) - set(\nE             +    vars_to_remove\nE             +)\nE             +result = session.query(models.Customer.id).filter(\nE             +    models.Customer.account_id == account_id, models.Customer.email == email_address\nE             +).order_by(\nE             +    models.Customer.id.asc()\nE             +).all()\nE              \u00d8 = set()\nE              authors.\u0142ukasz.say_thanks()\nE              mapping = {\nE                  A: 0.25 * (10.0 / 12),\nE                  B: 0.1 * (10.0 / 12),\nE                  C: 0.1 * (10.0 / 12),\nE                  D: 0.1 * (10.0 / 12),\nE              }\nE              \nE             +\nE              def gen():\nE                  yield from outside_of_generator\nE             +\nE                  a = (yield)\nE             +\nE              \nE              async def f():\nE                  await some.complicated[0].call(with_args=(True or (1 is not 1)))\nE             -print(* [] or [1])\nE             +\nE             +\nE             +print(*[] or [1])\nE              print(**{1: 3} if False else {x: x for x in range(3)})\nE             -print(* lambda x: x)\nE             -for x, in (1,), (2,), (3,): ...\nE             -for y in (): ...\nE             -for z in (i for i in (1, 2, 3)): ...\nE             -for i in (call()): ...\nE             -for j in (1 + (2 + 3)): ...\nE             -while(this and that): ...\nE             -if (\nE             -    threading.current_thread() != threading.main_thread() and\nE             -    threading.current_thread() != threading.main_thread() or\nE             -    signal.getsignal(signal.SIGINT) != signal.default_int_handler\nE             -):\nE             -    return True\nE             -if (\nE             -    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa |\nE             -    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nE             -):\nE             -    return True\nE             -if (\nE             -    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa &\nE             -    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nE             -):\nE             -    return True\nE             -if (\nE             -    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\nE             -    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nE             -):\nE             -    return True\nE             -if (\nE             -    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa -\nE             -    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nE             -):\nE             -    return True\nE             -if (\nE             -    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa *\nE             -    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nE             -):\nE             -    return True\nE             -if (\nE             -    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa /\nE             -    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nE             -):\nE             -    return True\nE             +print(*lambda x: x)\nE             +for (x,) in (1,), (2,), (3,):\nE             +    ...\nE             +for y in ():\nE             +    ...\nE             +for z in (i for i in (1, 2, 3)):\nE             +    ...\nE             +for i in call():\nE             +    ...\nE             +for j in 1 + (2 + 3):\nE             +    ...\nE             +while this and that:\nE             +    ...\nE             +if (\nE             +    threading.current_thread() != threading.main_thread()\nE             +    and threading.current_thread() != threading.main_thread()\nE             +    or signal.getsignal(signal.SIGINT) != signal.default_int_handler\nE             +):\nE             +    return True\nE             +\nE             +if (\nE             +    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nE             +    | aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nE             +):\nE             +    return True\nE             +\nE             +if (\nE             +    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nE             +    & aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nE             +):\nE             +    return True\nE             +\nE             +if (\nE             +    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nE             +    + aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nE             +):\nE             +    return True\nE             +\nE             +if (\nE             +    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nE             +    - aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nE             +):\nE             +    return True\nE             +\nE             +if (\nE             +    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nE             +    * aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nE             +):\nE             +    return True\nE             +\nE             +if (\nE             +    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nE             +    / aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nE             +):\nE             +    return True\nE             +\nE              last_call()\nE              # standalone comment at ENDMARKER\nE            : Expected diff isn't equal to the actual. If you made changes to expression.py and this is an anticipated difference, overwrite tests/expression.diff with /tmp/blk_45aluatq.log"
        ]
    ],
    "2.1.2": [
        [
            "self = <test_black.BlackTestCase testMethod=test_expression_diff>\n\n    def test_expression_diff(self) -> None:\n        source, _ = read_data(\"expression.py\")\n        expected, _ = read_data(\"expression.diff\")\n        tmp_file = Path(black.dump_to_file(source))\n        hold_stdout = sys.stdout\n        try:\n            sys.stdout = StringIO()\n            self.assertTrue(ff(tmp_file, write_back=black.WriteBack.DIFF))\n            sys.stdout.seek(0)\n            actual = sys.stdout.read()\n            actual = actual.replace(str(tmp_file), \"<stdin>\")\n        finally:\n            sys.stdout = hold_stdout\n            os.unlink(tmp_file)\n        actual = actual.rstrip() + \"\\n\"  # the diff output has a trailing space\n        if expected != actual:\n            dump = black.dump_to_file(actual)\n            msg = (\n                f\"Expected diff isn't equal to the actual. If you made changes \"\n                f\"to expression.py and this is an anticipated difference, \"\n                f\"overwrite tests/expression.diff with {dump}\"\n            )\n>           self.assertEqual(expected, actual, msg)",
            "\ntests/test_black.py:215: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "src": {
                    "value": "PosixPath('/tmp/blk_nwm1kz17.log')",
                    "shape": null,
                    "omitted": false
                },
                "line_length": {
                    "value": "88",
                    "shape": null,
                    "omitted": false
                },
                "fast": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "write_back": {
                    "value": "<WriteBack.DIFF: 2>",
                    "shape": null,
                    "omitted": false
                },
                "write_back.YES": {
                    "value": "<WriteBack.YES: 1>",
                    "shape": null,
                    "omitted": false
                },
                "write_back.DIFF": {
                    "value": "<WriteBack.DIFF: 2>",
                    "shape": null,
                    "omitted": false
                },
                "src.name": {
                    "value": "'blk_nwm1kz17.log'",
                    "shape": "16",
                    "omitted": false
                }
            },
            {
                "src_buffer": {
                    "value": "<_io.TextIOWrapper name='/tmp/blk_nwm1kz17.log' mode='r' encoding='utf-8'>",
                    "shape": null,
                    "omitted": false
                },
                "src_contents": {
                    "value": "'...\\n\\'some_string\\'\\nb\\'\\\\\\\\xa3\\'\\nName\\nNone\\nTrue\\nFalse\\n1\\n1.0\\n1j\\nTrue or False\\nTrue or False or None\\nTrue and False\\nTrue and False and None\\n(Name1 and Name2) ... (5 ** v6) / 7) // 8)\\nnot great\\n~great\\n+value\\n-1\\n~int and not v1 ^ 123 + v2 ",
                    "shape": " True\\n(~int) and (not ((v1 ^ (123 + v2)) ",
                    "omitted": true
                },
                "dst_contents": {
                    "value": "'...\\n\"some_string\"\\nb\"\\\\\\\\xa3\"\\nName\\nNone\\nTrue\\nFalse\\n1\\n1.0\\n1j\\nTrue or False\\nTrue or False or None\\nTrue and False\\nTrue and False and None\\n(Name1 and Name2) ... (5 ** v6) / 7) // 8)\\nnot great\\n~great\\n+value\\n-1\\n~int and not v1 ^ 123 + v2 ",
                    "shape": " True\\n(~int) and (not ((v1 ^ (123 + v2)) ",
                    "omitted": true
                },
                "src_buffer.encoding": {
                    "value": "'utf-8'",
                    "shape": "5",
                    "omitted": false
                },
                "src_name": {
                    "value": "'blk_nwm1kz17.log  (original)'",
                    "shape": "28",
                    "omitted": false
                },
                "dst_name": {
                    "value": "'blk_nwm1kz17.log  (formatted)'",
                    "shape": "29",
                    "omitted": false
                },
                "diff_contents": {
                    "value": "'--- blk_nwm1kz17.log  (original)\\n+++ blk_nwm1kz17.log  (formatted)\\n@@ -1,8 +1,8 @@\\n ...\\n-\\'some_string\\'\\n-b\\'\\\\\\\\xa3\\'\\n+\"some_string\"\\n+b\"\\\\\\\\xa3\"\\n Name\\n None\\n True\\n False\\n 1\\n@@ -29,60 +29,78 @@\\n ~great\\n +value\\n -1\\n ~int and not v1 ^ 123 + v2 ",
                    "shape": " True\\n (~int) and (not ((v1 ^ (123 + v2)) ",
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "src": "PosixPath",
                "line_length": "int",
                "fast": "bool",
                "write_back": "WriteBack",
                "write_back.YES": "WriteBack",
                "write_back.DIFF": "WriteBack",
                "src.name": "str"
            },
            {
                "src_buffer": "TextIOWrapper",
                "src_contents": "str",
                "dst_contents": "str",
                "src_buffer.encoding": "str",
                "src_name": "str",
                "dst_name": "str",
                "diff_contents": "str"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "src": {
                    "value": "PosixPath('/tmp/blk_55hjs89b.log')",
                    "shape": null,
                    "omitted": false
                },
                "line_length": {
                    "value": "88",
                    "shape": null,
                    "omitted": false
                },
                "fast": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "write_back": {
                    "value": "<WriteBack.DIFF: 2>",
                    "shape": null,
                    "omitted": false
                },
                "write_back.YES": {
                    "value": "<WriteBack.YES: 1>",
                    "shape": null,
                    "omitted": false
                },
                "write_back.DIFF": {
                    "value": "<WriteBack.DIFF: 2>",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "src_buffer": {
                    "value": "<_io.TextIOWrapper name='/tmp/blk_55hjs89b.log' mode='r' encoding='utf-8'>",
                    "shape": null,
                    "omitted": false
                },
                "src_contents": {
                    "value": "'...\\n\\'some_string\\'\\nb\\'\\\\\\\\xa3\\'\\nName\\nNone\\nTrue\\nFalse\\n1\\n1.0\\n1j\\nTrue or False\\nTrue or False or None\\nTrue and False\\nTrue and False and None\\n(Name1 and Name2) ... (5 ** v6) / 7) // 8)\\nnot great\\n~great\\n+value\\n-1\\n~int and not v1 ^ 123 + v2 ",
                    "shape": " True\\n(~int) and (not ((v1 ^ (123 + v2)) ",
                    "omitted": true
                },
                "dst_contents": {
                    "value": "'...\\n\"some_string\"\\nb\"\\\\\\\\xa3\"\\nName\\nNone\\nTrue\\nFalse\\n1\\n1.0\\n1j\\nTrue or False\\nTrue or False or None\\nTrue and False\\nTrue and False and None\\n(Name1 and Name2) ... (5 ** v6) / 7) // 8)\\nnot great\\n~great\\n+value\\n-1\\n~int and not v1 ^ 123 + v2 ",
                    "shape": " True\\n(~int) and (not ((v1 ^ (123 + v2)) ",
                    "omitted": true
                },
                "src_buffer.encoding": {
                    "value": "'utf-8'",
                    "shape": "5",
                    "omitted": false
                },
                "src_name": {
                    "value": "'/tmp/blk_55hjs89b.log  (original)'",
                    "shape": "33",
                    "omitted": false
                },
                "dst_name": {
                    "value": "'/tmp/blk_55hjs89b.log  (formatted)'",
                    "shape": "34",
                    "omitted": false
                },
                "diff_contents": {
                    "value": "'--- /tmp/blk_55hjs89b.log  (original)\\n+++ /tmp/blk_55hjs89b.log  (formatted)\\n@@ -1,8 +1,8 @@\\n ...\\n-\\'some_string\\'\\n-b\\'\\\\\\\\xa3\\'\\n+\"some_string\"\\n+b\"\\\\\\\\xa3\"\\n Name\\n None\\n True\\n False\\n 1\\n@@ -29,60 +29,78 @@\\n ~great\\n +value\\n -1\\n ~int and not v1 ^ 123 + v2 ",
                    "shape": " True\\n (~int) and (not ((v1 ^ (123 + v2)) ",
                    "omitted": false
                }
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "src": "PosixPath",
                "line_length": "int",
                "fast": "bool",
                "write_back": "WriteBack",
                "write_back.YES": "WriteBack",
                "write_back.DIFF": "WriteBack"
            },
            {
                "src_buffer": "TextIOWrapper",
                "src_contents": "str",
                "dst_contents": "str",
                "src_buffer.encoding": "str",
                "src_name": "str",
                "dst_name": "str",
                "diff_contents": "str"
            }
        ]
    ],
    "3.1.1": [
        "--diff doesn't display full file path\n"
    ],
    "3.1.2": [
        "Operating system: Ubuntu 16.04.4\nPython version: 3.6.3\nBlack version: 18.4a2\nDoes also happen on master: I believe so\n\nDoing black --diff path/to/foo.py results in:\n\n--- foo.py  (original)\n+++ foo.py  (formatted)\n@@ -39,24 +39,21 @@\n...\ncaused by the following two lines:\n\nhttps://github.com/ambv/black/blob/f294cc272c3aa5b8d3cd35b9f9283721b7e458d8/black.py#L298-L299\n\nIMO, Black should print the full path to each file it formats in --diff output to be consistent with the behaviour of other diff-producing programs. Not printing the full path also makes it hard to read several concatenated diffs (especially when filenames are duplicated in different directories).\n"
    ],
    "used_imports": "from pathlib import Path\nimport tokenize\nimport sys\nfrom typing import Any, Callable, Collection, Dict, Generic, Iterable, Iterator, List, Optional, Pattern, Set, Tuple, Type, TypeVar, Union"
}