{
    "black:13": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/black_13/blib2to3/pgen2/tokenize.py": {
            "buggy_functions": [
                {
                    "function_name": "generate_tokens",
                    "function_code": "def generate_tokens(readline):\n    \"\"\"\n    The generate_tokens() generator requires one argument, readline, which\n    must be a callable object which provides the same interface as the\n    readline() method of built-in file objects. Each call to the function\n    should return one line of input as a string.  Alternately, readline\n    can be a callable function terminating with StopIteration:\n        readline = open(myfile).next    # Example of alternate readline\n\n    The generator produces 5-tuples with these members: the token type; the\n    token string; a 2-tuple (srow, scol) of ints specifying the row and\n    column where the token begins in the source; a 2-tuple (erow, ecol) of\n    ints specifying the row and column where the token ends in the source;\n    and the line on which the token was found. The line passed is the\n    logical line; continuation lines are included.\n    \"\"\"\n    lnum = parenlev = continued = 0\n    numchars = '0123456789'\n    contstr, needcont = '', 0\n    contline = None\n    indents = [0]\n\n    # 'stashed' and 'async_*' are used for async/await parsing\n    stashed = None\n    async_def = False\n    async_def_indent = 0\n    async_def_nl = False\n\n    while 1:                                   # loop over lines in stream\n        try:\n            line = readline()\n        except StopIteration:\n            line = ''\n        lnum = lnum + 1\n        pos, max = 0, len(line)\n\n        if contstr:                            # continued string\n            if not line:\n                raise TokenError(\"EOF in multi-line string\", strstart)\n            endmatch = endprog.match(line)\n            if endmatch:\n                pos = end = endmatch.end(0)\n                yield (STRING, contstr + line[:end],\n                       strstart, (lnum, end), contline + line)\n                contstr, needcont = '', 0\n                contline = None\n            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n                yield (ERRORTOKEN, contstr + line,\n                           strstart, (lnum, len(line)), contline)\n                contstr = ''\n                contline = None\n                continue\n            else:\n                contstr = contstr + line\n                contline = contline + line\n                continue\n\n        elif parenlev == 0 and not continued:  # new statement\n            if not line: break\n            column = 0\n            while pos < max:                   # measure leading whitespace\n                if line[pos] == ' ': column = column + 1\n                elif line[pos] == '\\t': column = (column//tabsize + 1)*tabsize\n                elif line[pos] == '\\f': column = 0\n                else: break\n                pos = pos + 1\n            if pos == max: break\n\n            if stashed:\n                yield stashed\n                stashed = None\n\n            if line[pos] in '\\r\\n':            # skip blank lines\n                yield (NL, line[pos:], (lnum, pos), (lnum, len(line)), line)\n                continue\n\n            if line[pos] == '#':               # skip comments\n                comment_token = line[pos:].rstrip('\\r\\n')\n                nl_pos = pos + len(comment_token)\n                yield (COMMENT, comment_token,\n                        (lnum, pos), (lnum, pos + len(comment_token)), line)\n                yield (NL, line[nl_pos:],\n                        (lnum, nl_pos), (lnum, len(line)), line)\n                continue\n\n            if column > indents[-1]:           # count indents\n                indents.append(column)\n                yield (INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n\n            while column < indents[-1]:        # count dedents\n                if column not in indents:\n                    raise IndentationError(\n                        \"unindent does not match any outer indentation level\",\n                        (\"<tokenize>\", lnum, pos, line))\n                indents = indents[:-1]\n\n                if async_def and async_def_indent >= indents[-1]:\n                    async_def = False\n                    async_def_nl = False\n                    async_def_indent = 0\n\n                yield (DEDENT, '', (lnum, pos), (lnum, pos), line)\n\n            if async_def and async_def_nl and async_def_indent >= indents[-1]:\n                async_def = False\n                async_def_nl = False\n                async_def_indent = 0\n\n        else:                                  # continued statement\n            if not line:\n                raise TokenError(\"EOF in multi-line statement\", (lnum, 0))\n            continued = 0\n\n        while pos < max:\n            pseudomatch = pseudoprog.match(line, pos)\n            if pseudomatch:                                # scan for tokens\n                start, end = pseudomatch.span(1)\n                spos, epos, pos = (lnum, start), (lnum, end), end\n                token, initial = line[start:end], line[start]\n\n                if initial in numchars or \\\n                   (initial == '.' and token != '.'):      # ordinary number\n                    yield (NUMBER, token, spos, epos, line)\n                elif initial in '\\r\\n':\n                    newline = NEWLINE\n                    if parenlev > 0:\n                        newline = NL\n                    elif async_def:\n                        async_def_nl = True\n                    if stashed:\n                        yield stashed\n                        stashed = None\n                    yield (newline, token, spos, epos, line)\n\n                elif initial == '#':\n                    assert not token.endswith(\"\\n\")\n                    if stashed:\n                        yield stashed\n                        stashed = None\n                    yield (COMMENT, token, spos, epos, line)\n                elif token in triple_quoted:\n                    endprog = endprogs[token]\n                    endmatch = endprog.match(line, pos)\n                    if endmatch:                           # all on one line\n                        pos = endmatch.end(0)\n                        token = line[start:pos]\n                        if stashed:\n                            yield stashed\n                            stashed = None\n                        yield (STRING, token, spos, (lnum, pos), line)\n                    else:\n                        strstart = (lnum, start)           # multiple lines\n                        contstr = line[start:]\n                        contline = line\n                        break\n                elif initial in single_quoted or \\\n                    token[:2] in single_quoted or \\\n                    token[:3] in single_quoted:\n                    if token[-1] == '\\n':                  # continued string\n                        strstart = (lnum, start)\n                        endprog = (endprogs[initial] or endprogs[token[1]] or\n                                   endprogs[token[2]])\n                        contstr, needcont = line[start:], 1\n                        contline = line\n                        break\n                    else:                                  # ordinary string\n                        if stashed:\n                            yield stashed\n                            stashed = None\n                        yield (STRING, token, spos, epos, line)\n                elif initial.isidentifier():               # ordinary name\n                    if token in ('async', 'await'):\n                        if async_def:\n                            yield (ASYNC if token == 'async' else AWAIT,\n                                   token, spos, epos, line)\n                            continue\n\n                    tok = (NAME, token, spos, epos, line)\n                    if token == 'async' and not stashed:\n                        stashed = tok\n                        continue\n\n                    if token == 'def':\n                        if (stashed\n                                and stashed[0] == NAME\n                                and stashed[1] == 'async'):\n\n                            async_def = True\n                            async_def_indent = indents[-1]\n\n                            yield (ASYNC, stashed[1],\n                                   stashed[2], stashed[3],\n                                   stashed[4])\n                            stashed = None\n\n                    if stashed:\n                        yield stashed\n                        stashed = None\n\n                    yield tok\n                elif initial == '\\\\':                      # continued stmt\n                    # This yield is new; needed for better idempotency:\n                    if stashed:\n                        yield stashed\n                        stashed = None\n                    yield (NL, token, spos, (lnum, pos), line)\n                    continued = 1\n                else:\n                    if initial in '([{': parenlev = parenlev + 1\n                    elif initial in ')]}': parenlev = parenlev - 1\n                    if stashed:\n                        yield stashed\n                        stashed = None\n                    yield (OP, token, spos, epos, line)\n            else:\n                yield (ERRORTOKEN, line[pos],\n                           (lnum, pos), (lnum, pos+1), line)\n                pos = pos + 1\n\n    if stashed:\n        yield stashed\n        stashed = None\n\n    for indent in indents[1:]:                 # pop remaining indent levels\n        yield (DEDENT, '', (lnum, 0), (lnum, 0), '')\n    yield (ENDMARKER, '', (lnum, 0), (lnum, 0), '')\n",
                    "decorators": [],
                    "docstring": "The generate_tokens() generator requires one argument, readline, which\nmust be a callable object which provides the same interface as the\nreadline() method of built-in file objects. Each call to the function\nshould return one line of input as a string.  Alternately, readline\ncan be a callable function terminating with StopIteration:\n    readline = open(myfile).next    # Example of alternate readline\n\nThe generator produces 5-tuples with these members: the token type; the\ntoken string; a 2-tuple (srow, scol) of ints specifying the row and\ncolumn where the token begins in the source; a 2-tuple (erow, ecol) of\nints specifying the row and column where the token ends in the source;\nand the line on which the token was found. The line passed is the\nlogical line; continuation lines are included.",
                    "start_line": 337,
                    "end_line": 562,
                    "variables": {
                        "lnum": [
                            385,
                            410,
                            542,
                            417,
                            419,
                            424,
                            553,
                            430,
                            561,
                            562,
                            438,
                            447,
                            454,
                            353,
                            486,
                            488,
                            496,
                            370,
                            380
                        ],
                        "parenlev": [
                            353,
                            546,
                            545,
                            394,
                            462
                        ],
                        "continued": [
                            448,
                            353,
                            394,
                            543
                        ],
                        "numchars": [
                            457,
                            354
                        ],
                        "contstr": [
                            384,
                            386,
                            355,
                            390,
                            489,
                            499,
                            373,
                            379,
                            381
                        ],
                        "needcont": [
                            355,
                            499,
                            381,
                            383
                        ],
                        "contline": [
                            385,
                            387,
                            356,
                            391,
                            490,
                            500,
                            380,
                            382
                        ],
                        "indents": [
                            357,
                            422,
                            423,
                            426,
                            427,
                            525,
                            431,
                            560,
                            433,
                            440
                        ],
                        "stashed": [
                            515,
                            516,
                            520,
                            521,
                            522,
                            527,
                            528,
                            529,
                            530,
                            532,
                            405,
                            406,
                            407,
                            533,
                            534,
                            539,
                            540,
                            541,
                            547,
                            548,
                            549,
                            556,
                            557,
                            558,
                            466,
                            467,
                            468,
                            473,
                            474,
                            475,
                            483,
                            484,
                            485,
                            360,
                            503,
                            504,
                            505
                        ],
                        "async_def": [
                            361,
                            524,
                            464,
                            433,
                            434,
                            440,
                            441,
                            509
                        ],
                        "async_def_indent": [
                            362,
                            525,
                            433,
                            436,
                            440,
                            443
                        ],
                        "async_def_nl": [
                            363,
                            465,
                            435,
                            440,
                            442
                        ],
                        "line": [
                            384,
                            385,
                            514,
                            390,
                            391,
                            395,
                            511,
                            398,
                            399,
                            400,
                            409,
                            410,
                            413,
                            414,
                            542,
                            417,
                            418,
                            419,
                            550,
                            424,
                            552,
                            553,
                            430,
                            438,
                            446,
                            451,
                            455,
                            459,
                            469,
                            476,
                            479,
                            482,
                            486,
                            489,
                            490,
                            367,
                            369,
                            371,
                            499,
                            500,
                            374,
                            376,
                            506,
                            379,
                            380,
                            383
                        ],
                        "readline": [
                            367
                        ],
                        "StopIteration": [
                            368
                        ],
                        "pos": [
                            397,
                            398,
                            399,
                            400,
                            402,
                            403,
                            409,
                            410,
                            413,
                            414,
                            415,
                            542,
                            417,
                            424,
                            552,
                            553,
                            554,
                            430,
                            438,
                            450,
                            451,
                            454,
                            479,
                            481,
                            482,
                            486,
                            371,
                            378
                        ],
                        "max": [
                            450,
                            371,
                            403,
                            397
                        ],
                        "len": [
                            417,
                            385,
                            419,
                            371,
                            410,
                            415
                        ],
                        "TokenError": [
                            447,
                            375
                        ],
                        "strstart": [
                            385,
                            488,
                            496,
                            375,
                            380
                        ],
                        "endmatch": [
                            480,
                            481,
                            376,
                            377,
                            378,
                            479
                        ],
                        "endprog.match": [
                            376,
                            479
                        ],
                        "endprog": [
                            376,
                            497,
                            478,
                            479
                        ],
                        "end": [
                            453,
                            454,
                            455,
                            378,
                            379,
                            380
                        ],
                        "endmatch.end": [
                            481,
                            378
                        ],
                        "STRING": [
                            506,
                            379,
                            486
                        ],
                        "ERRORTOKEN": [
                            384,
                            552
                        ],
                        "column": [
                            422,
                            423,
                            426,
                            427,
                            396,
                            398,
                            399,
                            400
                        ],
                        "tabsize": [
                            399
                        ],
                        "NL": [
                            418,
                            410,
                            542,
                            463
                        ],
                        "comment_token": [
                            416,
                            417,
                            414,
                            415
                        ],
                        "rstrip": [
                            414
                        ],
                        "nl_pos": [
                            418,
                            419,
                            415
                        ],
                        "COMMENT": [
                            416,
                            476
                        ],
                        "indents.append": [
                            423
                        ],
                        "INDENT": [
                            424
                        ],
                        "IndentationError": [
                            428
                        ],
                        "DEDENT": [
                            561,
                            438
                        ],
                        "pseudomatch": [
                            451,
                            452,
                            453
                        ],
                        "pseudoprog.match": [
                            451
                        ],
                        "pseudoprog": [
                            451
                        ],
                        "start": [
                            482,
                            453,
                            454,
                            455,
                            488,
                            489,
                            496,
                            499
                        ],
                        "pseudomatch.span": [
                            453
                        ],
                        "spos": [
                            514,
                            454,
                            486,
                            550,
                            459,
                            469,
                            506,
                            476,
                            542,
                            511
                        ],
                        "epos": [
                            514,
                            454,
                            550,
                            459,
                            469,
                            506,
                            476,
                            511
                        ],
                        "token": [
                            514,
                            515,
                            519,
                            542,
                            550,
                            455,
                            458,
                            459,
                            469,
                            472,
                            476,
                            477,
                            478,
                            482,
                            486,
                            493,
                            494,
                            495,
                            497,
                            498,
                            506,
                            508,
                            510,
                            511
                        ],
                        "initial": [
                            545,
                            546,
                            455,
                            457,
                            458,
                            460,
                            492,
                            497,
                            471,
                            537,
                            507
                        ],
                        "NUMBER": [
                            459
                        ],
                        "newline": [
                            469,
                            461,
                            463
                        ],
                        "NEWLINE": [
                            461
                        ],
                        "token.endswith": [
                            472
                        ],
                        "triple_quoted": [
                            477
                        ],
                        "endprogs": [
                            497,
                            498,
                            478
                        ],
                        "single_quoted": [
                            492,
                            493,
                            494
                        ],
                        "initial.isidentifier": [
                            507
                        ],
                        "ASYNC": [
                            510,
                            527
                        ],
                        "AWAIT": [
                            510
                        ],
                        "tok": [
                            536,
                            514,
                            516
                        ],
                        "NAME": [
                            521,
                            514
                        ],
                        "OP": [
                            550
                        ],
                        "indent": [
                            560
                        ],
                        "ENDMARKER": [
                            562
                        ]
                    },
                    "filtered_variables": {
                        "lnum": [
                            385,
                            410,
                            542,
                            417,
                            419,
                            424,
                            553,
                            430,
                            561,
                            562,
                            438,
                            447,
                            454,
                            353,
                            486,
                            488,
                            496,
                            370,
                            380
                        ],
                        "parenlev": [
                            353,
                            546,
                            545,
                            394,
                            462
                        ],
                        "continued": [
                            448,
                            353,
                            394,
                            543
                        ],
                        "numchars": [
                            457,
                            354
                        ],
                        "contstr": [
                            384,
                            386,
                            355,
                            390,
                            489,
                            499,
                            373,
                            379,
                            381
                        ],
                        "needcont": [
                            355,
                            499,
                            381,
                            383
                        ],
                        "contline": [
                            385,
                            387,
                            356,
                            391,
                            490,
                            500,
                            380,
                            382
                        ],
                        "indents": [
                            357,
                            422,
                            423,
                            426,
                            427,
                            525,
                            431,
                            560,
                            433,
                            440
                        ],
                        "stashed": [
                            515,
                            516,
                            520,
                            521,
                            522,
                            527,
                            528,
                            529,
                            530,
                            532,
                            405,
                            406,
                            407,
                            533,
                            534,
                            539,
                            540,
                            541,
                            547,
                            548,
                            549,
                            556,
                            557,
                            558,
                            466,
                            467,
                            468,
                            473,
                            474,
                            475,
                            483,
                            484,
                            485,
                            360,
                            503,
                            504,
                            505
                        ],
                        "async_def": [
                            361,
                            524,
                            464,
                            433,
                            434,
                            440,
                            441,
                            509
                        ],
                        "async_def_indent": [
                            362,
                            525,
                            433,
                            436,
                            440,
                            443
                        ],
                        "async_def_nl": [
                            363,
                            465,
                            435,
                            440,
                            442
                        ],
                        "line": [
                            384,
                            385,
                            514,
                            390,
                            391,
                            395,
                            511,
                            398,
                            399,
                            400,
                            409,
                            410,
                            413,
                            414,
                            542,
                            417,
                            418,
                            419,
                            550,
                            424,
                            552,
                            553,
                            430,
                            438,
                            446,
                            451,
                            455,
                            459,
                            469,
                            476,
                            479,
                            482,
                            486,
                            489,
                            490,
                            367,
                            369,
                            371,
                            499,
                            500,
                            374,
                            376,
                            506,
                            379,
                            380,
                            383
                        ],
                        "readline": [
                            367
                        ],
                        "pos": [
                            397,
                            398,
                            399,
                            400,
                            402,
                            403,
                            409,
                            410,
                            413,
                            414,
                            415,
                            542,
                            417,
                            424,
                            552,
                            553,
                            554,
                            430,
                            438,
                            450,
                            451,
                            454,
                            479,
                            481,
                            482,
                            486,
                            371,
                            378
                        ],
                        "TokenError": [
                            447,
                            375
                        ],
                        "strstart": [
                            385,
                            488,
                            496,
                            375,
                            380
                        ],
                        "endmatch": [
                            480,
                            481,
                            376,
                            377,
                            378,
                            479
                        ],
                        "endprog.match": [
                            376,
                            479
                        ],
                        "endprog": [
                            376,
                            497,
                            478,
                            479
                        ],
                        "end": [
                            453,
                            454,
                            455,
                            378,
                            379,
                            380
                        ],
                        "endmatch.end": [
                            481,
                            378
                        ],
                        "STRING": [
                            506,
                            379,
                            486
                        ],
                        "ERRORTOKEN": [
                            384,
                            552
                        ],
                        "column": [
                            422,
                            423,
                            426,
                            427,
                            396,
                            398,
                            399,
                            400
                        ],
                        "tabsize": [
                            399
                        ],
                        "NL": [
                            418,
                            410,
                            542,
                            463
                        ],
                        "comment_token": [
                            416,
                            417,
                            414,
                            415
                        ],
                        "rstrip": [
                            414
                        ],
                        "nl_pos": [
                            418,
                            419,
                            415
                        ],
                        "COMMENT": [
                            416,
                            476
                        ],
                        "indents.append": [
                            423
                        ],
                        "INDENT": [
                            424
                        ],
                        "DEDENT": [
                            561,
                            438
                        ],
                        "pseudomatch": [
                            451,
                            452,
                            453
                        ],
                        "pseudoprog.match": [
                            451
                        ],
                        "pseudoprog": [
                            451
                        ],
                        "start": [
                            482,
                            453,
                            454,
                            455,
                            488,
                            489,
                            496,
                            499
                        ],
                        "pseudomatch.span": [
                            453
                        ],
                        "spos": [
                            514,
                            454,
                            486,
                            550,
                            459,
                            469,
                            506,
                            476,
                            542,
                            511
                        ],
                        "epos": [
                            514,
                            454,
                            550,
                            459,
                            469,
                            506,
                            476,
                            511
                        ],
                        "token": [
                            514,
                            515,
                            519,
                            542,
                            550,
                            455,
                            458,
                            459,
                            469,
                            472,
                            476,
                            477,
                            478,
                            482,
                            486,
                            493,
                            494,
                            495,
                            497,
                            498,
                            506,
                            508,
                            510,
                            511
                        ],
                        "initial": [
                            545,
                            546,
                            455,
                            457,
                            458,
                            460,
                            492,
                            497,
                            471,
                            537,
                            507
                        ],
                        "NUMBER": [
                            459
                        ],
                        "newline": [
                            469,
                            461,
                            463
                        ],
                        "NEWLINE": [
                            461
                        ],
                        "token.endswith": [
                            472
                        ],
                        "triple_quoted": [
                            477
                        ],
                        "endprogs": [
                            497,
                            498,
                            478
                        ],
                        "single_quoted": [
                            492,
                            493,
                            494
                        ],
                        "initial.isidentifier": [
                            507
                        ],
                        "ASYNC": [
                            510,
                            527
                        ],
                        "AWAIT": [
                            510
                        ],
                        "tok": [
                            536,
                            514,
                            516
                        ],
                        "NAME": [
                            521,
                            514
                        ],
                        "OP": [
                            550
                        ],
                        "indent": [
                            560
                        ],
                        "ENDMARKER": [
                            562
                        ]
                    },
                    "diff_line_number": 519,
                    "class_data": null,
                    "used_imports": [
                        "from . import token"
                    ],
                    "variable_values": [
                        [
                            {
                                "lnum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parenlev": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "continued": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "numchars": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "contstr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "needcont": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "contline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stashed": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "async_def": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "async_def_indent": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "async_def_nl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "readline": {
                                    "variable_value": "<built-in method readline of _io.StringIO object at 0x7f02e5d1a790>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "pos": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strstart": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "endmatch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "endprog.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "endprog": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "end": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "endmatch.end": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STRING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ERRORTOKEN": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tabsize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "NL": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comment_token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rstrip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nl_pos": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "COMMENT": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indents.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "INDENT": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DEDENT": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pseudomatch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pseudoprog.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pseudoprog": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pseudomatch.span": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spos": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "epos": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "initial": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "newline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "NEWLINE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "triple_quoted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "endprogs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "single_quoted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "initial.isidentifier": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ASYNC": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "AWAIT": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tok": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indent": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "lnum": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "parenlev": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "continued": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "numchars": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "contstr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "needcont": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "contline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indents": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stashed": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "async_def": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "async_def_indent": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "async_def_nl": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "readline": {
                                    "variable_value": "<built-in method readline of _io.StringIO object at 0x7faa0a38a1f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "pos": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "TokenError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strstart": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "endmatch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "endprog.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "endprog": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "end": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "endmatch.end": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "STRING": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ERRORTOKEN": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "column": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tabsize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "NL": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comment_token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "rstrip": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nl_pos": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "COMMENT": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indents.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "INDENT": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DEDENT": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pseudomatch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pseudoprog.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pseudoprog": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pseudomatch.span": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spos": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "epos": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "initial": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "NUMBER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "newline": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "NEWLINE": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "token.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "triple_quoted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "endprogs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "single_quoted": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "initial.isidentifier": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ASYNC": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "AWAIT": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tok": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "NAME": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OP": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indent": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ENDMARKER": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": {
                "file_scope_functions": [
                    {
                        "code": "def group(*choices): return '(' + '|'.join(choices) + ')'",
                        "signature": "group(*choices)"
                    },
                    {
                        "code": "def any(*choices): return group(*choices) + '*'",
                        "signature": "any(*choices)"
                    },
                    {
                        "code": "def maybe(*choices): return group(*choices) + '?'",
                        "signature": "maybe(*choices)"
                    },
                    {
                        "code": "def _combinations(*l):\n    return set(\n        x + y for x in l for y in l + (\"\",) if x.casefold() != y.casefold()\n    )",
                        "signature": "_combinations(*l)"
                    },
                    {
                        "code": "def printtoken(type, token, xxx_todo_changeme, xxx_todo_changeme1, line): # for testing\n    (srow, scol) = xxx_todo_changeme\n    (erow, ecol) = xxx_todo_changeme1\n    print(\"%d,%d-%d,%d:\\t%s\\t%s\" % \\\n        (srow, scol, erow, ecol, tok_name[type], repr(token)))",
                        "signature": "printtoken(type, token, xxx_todo_changeme, xxx_todo_changeme1, line)"
                    },
                    {
                        "code": "def tokenize(readline, tokeneater=printtoken):\n    \"\"\"\n    The tokenize() function accepts two parameters: one representing the\n    input stream, and one providing an output mechanism for tokenize().\n\n    The first parameter, readline, must be a callable object which provides\n    the same interface as the readline() method of built-in file objects.\n    Each call to the function should return one line of input as a string.\n\n    The second parameter, tokeneater, must also be a callable object. It is\n    called once for each token, with five arguments, corresponding to the\n    tuples generated by generate_tokens().\n    \"\"\"\n    try:\n        tokenize_loop(readline, tokeneater)\n    except StopTokenizing:\n        pass",
                        "signature": "tokenize(readline, tokeneater=printtoken)"
                    },
                    {
                        "code": "def tokenize_loop(readline, tokeneater):\n    for token_info in generate_tokens(readline):\n        tokeneater(*token_info)",
                        "signature": "tokenize_loop(readline, tokeneater)"
                    },
                    {
                        "code": "def _get_normal_name(orig_enc):\n    \"\"\"Imitates get_normal_name in tokenizer.c.\"\"\"\n    # Only care about the first 12 characters.\n    enc = orig_enc[:12].lower().replace(\"_\", \"-\")\n    if enc == \"utf-8\" or enc.startswith(\"utf-8-\"):\n        return \"utf-8\"\n    if enc in (\"latin-1\", \"iso-8859-1\", \"iso-latin-1\") or \\\n       enc.startswith((\"latin-1-\", \"iso-8859-1-\", \"iso-latin-1-\")):\n        return \"iso-8859-1\"\n    return orig_enc",
                        "signature": "_get_normal_name(orig_enc)"
                    },
                    {
                        "code": "def detect_encoding(readline):\n    \"\"\"\n    The detect_encoding() function is used to detect the encoding that should\n    be used to decode a Python source file. It requires one argument, readline,\n    in the same way as the tokenize() generator.\n\n    It will call readline a maximum of twice, and return the encoding used\n    (as a string) and a list of any lines (left as bytes) it has read\n    in.\n\n    It detects the encoding from the presence of a utf-8 bom or an encoding\n    cookie as specified in pep-0263. If both a bom and a cookie are present, but\n    disagree, a SyntaxError will be raised. If the encoding cookie is an invalid\n    charset, raise a SyntaxError.  Note that if a utf-8 bom is found,\n    'utf-8-sig' is returned.\n\n    If no encoding is specified, then the default of 'utf-8' will be returned.\n    \"\"\"\n    bom_found = False\n    encoding = None\n    default = 'utf-8'\n    def read_or_stop():\n        try:\n            return readline()\n        except StopIteration:\n            return bytes()\n\n    def find_cookie(line):\n        try:\n            line_string = line.decode('ascii')\n        except UnicodeDecodeError:\n            return None\n        match = cookie_re.match(line_string)\n        if not match:\n            return None\n        encoding = _get_normal_name(match.group(1))\n        try:\n            codec = lookup(encoding)\n        except LookupError:\n            # This behaviour mimics the Python interpreter\n            raise SyntaxError(\"unknown encoding: \" + encoding)\n\n        if bom_found:\n            if codec.name != 'utf-8':\n                # This behaviour mimics the Python interpreter\n                raise SyntaxError('encoding problem: utf-8')\n            encoding += '-sig'\n        return encoding\n\n    first = read_or_stop()\n    if first.startswith(BOM_UTF8):\n        bom_found = True\n        first = first[3:]\n        default = 'utf-8-sig'\n    if not first:\n        return default, []\n\n    encoding = find_cookie(first)\n    if encoding:\n        return encoding, [first]\n    if not blank_re.match(first):\n        return default, [first]\n\n    second = read_or_stop()\n    if not second:\n        return default, [first]\n\n    encoding = find_cookie(second)\n    if encoding:\n        return encoding, [first, second]\n\n    return default, [first, second]",
                        "signature": "detect_encoding(readline)"
                    },
                    {
                        "code": "def untokenize(iterable):\n    \"\"\"Transform tokens back into Python source code.\n\n    Each element returned by the iterable must be a token sequence\n    with at least two elements, a token number and token value.  If\n    only two tokens are passed, the resulting output is poor.\n\n    Round-trip invariant for full input:\n        Untokenized source will match input source exactly\n\n    Round-trip invariant for limited intput:\n        # Output text will tokenize the back to the input\n        t1 = [tok[:2] for tok in generate_tokens(f.readline)]\n        newcode = untokenize(t1)\n        readline = iter(newcode.splitlines(1)).next\n        t2 = [tok[:2] for tokin generate_tokens(readline)]\n        assert t1 == t2\n    \"\"\"\n    ut = Untokenizer()\n    return ut.untokenize(iterable)",
                        "signature": "untokenize(iterable)"
                    },
                    {
                        "code": "def generate_tokens(readline):\n    \"\"\"\n    The generate_tokens() generator requires one argument, readline, which\n    must be a callable object which provides the same interface as the\n    readline() method of built-in file objects. Each call to the function\n    should return one line of input as a string.  Alternately, readline\n    can be a callable function terminating with StopIteration:\n        readline = open(myfile).next    # Example of alternate readline\n\n    The generator produces 5-tuples with these members: the token type; the\n    token string; a 2-tuple (srow, scol) of ints specifying the row and\n    column where the token begins in the source; a 2-tuple (erow, ecol) of\n    ints specifying the row and column where the token ends in the source;\n    and the line on which the token was found. The line passed is the\n    logical line; continuation lines are included.\n    \"\"\"\n    lnum = parenlev = continued = 0\n    numchars = '0123456789'\n    contstr, needcont = '', 0\n    contline = None\n    indents = [0]\n\n    # 'stashed' and 'async_*' are used for async/await parsing\n    stashed = None\n    async_def = False\n    async_def_indent = 0\n    async_def_nl = False\n\n    while 1:                                   # loop over lines in stream\n        try:\n            line = readline()\n        except StopIteration:\n            line = ''\n        lnum = lnum + 1\n        pos, max = 0, len(line)\n\n        if contstr:                            # continued string\n            if not line:\n                raise TokenError(\"EOF in multi-line string\", strstart)\n            endmatch = endprog.match(line)\n            if endmatch:\n                pos = end = endmatch.end(0)\n                yield (STRING, contstr + line[:end],\n                       strstart, (lnum, end), contline + line)\n                contstr, needcont = '', 0\n                contline = None\n            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n                yield (ERRORTOKEN, contstr + line,\n                           strstart, (lnum, len(line)), contline)\n                contstr = ''\n                contline = None\n                continue\n            else:\n                contstr = contstr + line\n                contline = contline + line\n                continue\n\n        elif parenlev == 0 and not continued:  # new statement\n            if not line: break\n            column = 0\n            while pos < max:                   # measure leading whitespace\n                if line[pos] == ' ': column = column + 1\n                elif line[pos] == '\\t': column = (column//tabsize + 1)*tabsize\n                elif line[pos] == '\\f': column = 0\n                else: break\n                pos = pos + 1\n            if pos == max: break\n\n            if stashed:\n                yield stashed\n                stashed = None\n\n            if line[pos] in '\\r\\n':            # skip blank lines\n                yield (NL, line[pos:], (lnum, pos), (lnum, len(line)), line)\n                continue\n\n            if line[pos] == '#':               # skip comments\n                comment_token = line[pos:].rstrip('\\r\\n')\n                nl_pos = pos + len(comment_token)\n                yield (COMMENT, comment_token,\n                        (lnum, pos), (lnum, pos + len(comment_token)), line)\n                yield (NL, line[nl_pos:],\n                        (lnum, nl_pos), (lnum, len(line)), line)\n                continue\n\n            if column > indents[-1]:           # count indents\n                indents.append(column)\n                yield (INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n\n            while column < indents[-1]:        # count dedents\n                if column not in indents:\n                    raise IndentationError(\n                        \"unindent does not match any outer indentation level\",\n                        (\"<tokenize>\", lnum, pos, line))\n                indents = indents[:-1]\n\n                if async_def and async_def_indent >= indents[-1]:\n                    async_def = False\n                    async_def_nl = False\n                    async_def_indent = 0\n\n                yield (DEDENT, '', (lnum, pos), (lnum, pos), line)\n\n            if async_def and async_def_nl and async_def_indent >= indents[-1]:\n                async_def = False\n                async_def_nl = False\n                async_def_indent = 0\n\n        else:                                  # continued statement\n            if not line:\n                raise TokenError(\"EOF in multi-line statement\", (lnum, 0))\n            continued = 0\n\n        while pos < max:\n            pseudomatch = pseudoprog.match(line, pos)\n            if pseudomatch:                                # scan for tokens\n                start, end = pseudomatch.span(1)\n                spos, epos, pos = (lnum, start), (lnum, end), end\n                token, initial = line[start:end], line[start]\n\n                if initial in numchars or \\\n                   (initial == '.' and token != '.'):      # ordinary number\n                    yield (NUMBER, token, spos, epos, line)\n                elif initial in '\\r\\n':\n                    newline = NEWLINE\n                    if parenlev > 0:\n                        newline = NL\n                    elif async_def:\n                        async_def_nl = True\n                    if stashed:\n                        yield stashed\n                        stashed = None\n                    yield (newline, token, spos, epos, line)\n\n                elif initial == '#':\n                    assert not token.endswith(\"\\n\")\n                    if stashed:\n                        yield stashed\n                        stashed = None\n                    yield (COMMENT, token, spos, epos, line)\n                elif token in triple_quoted:\n                    endprog = endprogs[token]\n                    endmatch = endprog.match(line, pos)\n                    if endmatch:                           # all on one line\n                        pos = endmatch.end(0)\n                        token = line[start:pos]\n                        if stashed:\n                            yield stashed\n                            stashed = None\n                        yield (STRING, token, spos, (lnum, pos), line)\n                    else:\n                        strstart = (lnum, start)           # multiple lines\n                        contstr = line[start:]\n                        contline = line\n                        break\n                elif initial in single_quoted or \\\n                    token[:2] in single_quoted or \\\n                    token[:3] in single_quoted:\n                    if token[-1] == '\\n':                  # continued string\n                        strstart = (lnum, start)\n                        endprog = (endprogs[initial] or endprogs[token[1]] or\n                                   endprogs[token[2]])\n                        contstr, needcont = line[start:], 1\n                        contline = line\n                        break\n                    else:                                  # ordinary string\n                        if stashed:\n                            yield stashed\n                            stashed = None\n                        yield (STRING, token, spos, epos, line)\n                elif initial.isidentifier():               # ordinary name\n                    if token in ('async', 'await'):\n                        if async_def:\n                            yield (ASYNC if token == 'async' else AWAIT,\n                                   token, spos, epos, line)\n                            continue\n\n                    tok = (NAME, token, spos, epos, line)\n                    if token == 'async' and not stashed:\n                        stashed = tok\n                        continue\n\n                    if token == 'def':\n                        if (stashed\n                                and stashed[0] == NAME\n                                and stashed[1] == 'async'):\n\n                            async_def = True\n                            async_def_indent = indents[-1]\n\n                            yield (ASYNC, stashed[1],\n                                   stashed[2], stashed[3],\n                                   stashed[4])\n                            stashed = None\n\n                    if stashed:\n                        yield stashed\n                        stashed = None\n\n                    yield tok\n                elif initial == '\\\\':                      # continued stmt\n                    # This yield is new; needed for better idempotency:\n                    if stashed:\n                        yield stashed\n                        stashed = None\n                    yield (NL, token, spos, (lnum, pos), line)\n                    continued = 1\n                else:\n                    if initial in '([{': parenlev = parenlev + 1\n                    elif initial in ')]}': parenlev = parenlev - 1\n                    if stashed:\n                        yield stashed\n                        stashed = None\n                    yield (OP, token, spos, epos, line)\n            else:\n                yield (ERRORTOKEN, line[pos],\n                           (lnum, pos), (lnum, pos+1), line)\n                pos = pos + 1\n\n    if stashed:\n        yield stashed\n        stashed = None\n\n    for indent in indents[1:]:                 # pop remaining indent levels\n        yield (DEDENT, '', (lnum, 0), (lnum, 0), '')\n    yield (ENDMARKER, '', (lnum, 0), (lnum, 0), '')",
                        "signature": "generate_tokens(readline)"
                    }
                ],
                "file_scope_classes": [
                    {
                        "class_declaration": "class TokenError:",
                        "functions": []
                    },
                    {
                        "class_declaration": "class StopTokenizing:",
                        "functions": []
                    },
                    {
                        "class_declaration": "class Untokenizer:",
                        "functions": [
                            {
                                "code": "def __init__(self):\n    self.tokens = []\n    self.prev_row = 1\n    self.prev_col = 0",
                                "signature": "__init__(self)"
                            },
                            {
                                "code": "def add_whitespace(self, start):\n    row, col = start\n    assert row <= self.prev_row\n    col_offset = col - self.prev_col\n    if col_offset:\n        self.tokens.append(\" \" * col_offset)",
                                "signature": "add_whitespace(self, start)"
                            },
                            {
                                "code": "def untokenize(self, iterable):\n    for t in iterable:\n        if len(t) == 2:\n            self.compat(t, iterable)\n            break\n        tok_type, token, start, end, line = t\n        self.add_whitespace(start)\n        self.tokens.append(token)\n        self.prev_row, self.prev_col = end\n        if tok_type in (NEWLINE, NL):\n            self.prev_row += 1\n            self.prev_col = 0\n    return \"\".join(self.tokens)",
                                "signature": "untokenize(self, iterable)"
                            },
                            {
                                "code": "def compat(self, token, iterable):\n    startline = False\n    indents = []\n    toks_append = self.tokens.append\n    toknum, tokval = token\n    if toknum in (NAME, NUMBER):\n        tokval += ' '\n    if toknum in (NEWLINE, NL):\n        startline = True\n    for tok in iterable:\n        toknum, tokval = tok[:2]\n\n        if toknum in (NAME, NUMBER, ASYNC, AWAIT):\n            tokval += ' '\n\n        if toknum == INDENT:\n            indents.append(tokval)\n            continue\n        elif toknum == DEDENT:\n            indents.pop()\n            continue\n        elif toknum in (NEWLINE, NL):\n            startline = True\n        elif startline and indents:\n            toks_append(indents[-1])\n            startline = False\n        toks_append(tokval)",
                                "signature": "compat(self, token, iterable)"
                            }
                        ]
                    }
                ]
            },
            "variables_in_file": {
                "__author__": [
                    28
                ],
                "__credits__": [
                    29
                ],
                "__all__": [
                    37
                ],
                "x": [
                    53,
                    37
                ],
                "dir": [
                    37
                ],
                "token": [
                    514,
                    515,
                    519,
                    148,
                    542,
                    37,
                    550,
                    39,
                    192,
                    194,
                    455,
                    458,
                    459,
                    205,
                    469,
                    472,
                    476,
                    477,
                    478,
                    482,
                    486,
                    493,
                    494,
                    495,
                    497,
                    498,
                    506,
                    508,
                    510,
                    511
                ],
                "bytes": [
                    42,
                    268,
                    46
                ],
                "NameError": [
                    43
                ],
                "str": [
                    46
                ],
                "join": [
                    48,
                    199
                ],
                "choices": [
                    48,
                    49,
                    50
                ],
                "group": [
                    49,
                    50,
                    64,
                    65,
                    67,
                    69,
                    70,
                    71,
                    82,
                    84,
                    90,
                    96,
                    97,
                    99,
                    103,
                    104,
                    106,
                    107,
                    108
                ],
                "set": [
                    52
                ],
                "y": [
                    53
                ],
                "l": [
                    53
                ],
                "x.casefold": [
                    53
                ],
                "y.casefold": [
                    53
                ],
                "Whitespace": [
                    56,
                    58,
                    108
                ],
                "Comment": [
                    57,
                    58,
                    107
                ],
                "Ignore": [
                    58,
                    100
                ],
                "any": [
                    58
                ],
                "maybe": [
                    58,
                    67
                ],
                "Name": [
                    99,
                    59,
                    108
                ],
                "Binnumber": [
                    65,
                    61
                ],
                "Hexnumber": [
                    65,
                    62
                ],
                "Octnumber": [
                    65,
                    63
                ],
                "Decnumber": [
                    64,
                    65
                ],
                "Intnumber": [
                    65,
                    71
                ],
                "Exponent": [
                    66,
                    67,
                    68
                ],
                "Pointfloat": [
                    67,
                    69
                ],
                "Expfloat": [
                    68,
                    69
                ],
                "Floatnumber": [
                    69,
                    70,
                    71
                ],
                "Imagnumber": [
                    70,
                    71
                ],
                "Number": [
                    99,
                    108,
                    71
                ],
                "Single": [
                    121,
                    74
                ],
                "Double": [
                    121,
                    76
                ],
                "Single3": [
                    112,
                    78
                ],
                "Double3": [
                    80,
                    113
                ],
                "_litprefix": [
                    103,
                    105,
                    81,
                    82,
                    84,
                    85
                ],
                "Triple": [
                    82,
                    107
                ],
                "String": [
                    99,
                    84
                ],
                "Operator": [
                    97,
                    90
                ],
                "Bracket": [
                    97,
                    95
                ],
                "Special": [
                    96,
                    97
                ],
                "Funny": [
                    97,
                    99,
                    108
                ],
                "PlainToken": [
                    99,
                    100
                ],
                "Token": [
                    100,
                    110
                ],
                "ContStr": [
                    108,
                    103
                ],
                "PseudoExtras": [
                    107,
                    108
                ],
                "PseudoToken": [
                    108,
                    111
                ],
                "tokenprog": [
                    110
                ],
                "re.compile": [
                    229,
                    230,
                    110,
                    111,
                    112,
                    113,
                    121
                ],
                "re": [
                    229,
                    230,
                    110,
                    111,
                    112,
                    113,
                    121
                ],
                "re.UNICODE": [
                    110,
                    111
                ],
                "pseudoprog": [
                    451,
                    111
                ],
                "single3prog": [
                    112,
                    122,
                    123
                ],
                "double3prog": [
                    113,
                    122,
                    124
                ],
                "_strprefixes": [
                    129,
                    130,
                    134,
                    135,
                    115,
                    123,
                    124,
                    125
                ],
                "_combinations": [
                    116,
                    117
                ],
                "endprogs": [
                    121,
                    498,
                    497,
                    478
                ],
                "prefix": [
                    129,
                    130,
                    134,
                    135,
                    123,
                    124,
                    125
                ],
                "triple_quoted": [
                    477,
                    127
                ],
                "single_quoted": [
                    493,
                    132,
                    492,
                    494
                ],
                "tabsize": [
                    138,
                    399
                ],
                "Exception": [
                    140,
                    142
                ],
                "srow": [
                    145,
                    148
                ],
                "scol": [
                    145,
                    148
                ],
                "xxx_todo_changeme": [
                    145
                ],
                "erow": [
                    146,
                    148
                ],
                "ecol": [
                    146,
                    148
                ],
                "xxx_todo_changeme1": [
                    146
                ],
                "print": [
                    147
                ],
                "tok_name": [
                    148
                ],
                "type": [
                    148
                ],
                "repr": [
                    148
                ],
                "printtoken": [
                    150
                ],
                "tokenize_loop": [
                    164
                ],
                "readline": [
                    164,
                    170,
                    266,
                    367,
                    566
                ],
                "tokeneater": [
                    171,
                    164
                ],
                "StopTokenizing": [
                    165
                ],
                "token_info": [
                    170,
                    171
                ],
                "generate_tokens": [
                    170
                ],
                "self.tokens": [
                    194,
                    199,
                    204,
                    176,
                    185
                ],
                "self": [
                    193,
                    194,
                    195,
                    197,
                    198,
                    199,
                    204,
                    176,
                    177,
                    178,
                    182,
                    183,
                    185,
                    190
                ],
                "self.prev_row": [
                    177,
                    195,
                    197,
                    182
                ],
                "self.prev_col": [
                    178,
                    195,
                    198,
                    183
                ],
                "row": [
                    181,
                    182
                ],
                "col": [
                    181,
                    183
                ],
                "start": [
                    192,
                    193,
                    482,
                    453,
                    454,
                    455,
                    488,
                    489,
                    496,
                    499,
                    181
                ],
                "col_offset": [
                    184,
                    185,
                    183
                ],
                "self.tokens.append": [
                    185,
                    194,
                    204
                ],
                "t": [
                    192,
                    188,
                    189,
                    190
                ],
                "iterable": [
                    210,
                    188,
                    190,
                    335
                ],
                "len": [
                    385,
                    417,
                    419,
                    371,
                    566,
                    410,
                    189,
                    415
                ],
                "self.compat": [
                    190
                ],
                "tok_type": [
                    192,
                    196
                ],
                "end": [
                    192,
                    195,
                    453,
                    454,
                    455,
                    378,
                    379,
                    380
                ],
                "line": [
                    384,
                    385,
                    514,
                    390,
                    391,
                    395,
                    511,
                    398,
                    399,
                    272,
                    400,
                    409,
                    410,
                    413,
                    414,
                    542,
                    417,
                    418,
                    419,
                    550,
                    424,
                    552,
                    553,
                    430,
                    438,
                    446,
                    192,
                    451,
                    455,
                    459,
                    469,
                    476,
                    479,
                    482,
                    486,
                    489,
                    490,
                    367,
                    369,
                    371,
                    499,
                    500,
                    374,
                    376,
                    506,
                    379,
                    380,
                    383
                ],
                "self.add_whitespace": [
                    193
                ],
                "NEWLINE": [
                    208,
                    196,
                    461,
                    222
                ],
                "NL": [
                    418,
                    196,
                    542,
                    463,
                    208,
                    410,
                    222
                ],
                "startline": [
                    224,
                    226,
                    202,
                    209,
                    223
                ],
                "indents": [
                    224,
                    225,
                    357,
                    422,
                    423,
                    426,
                    203,
                    427,
                    525,
                    431,
                    560,
                    433,
                    440,
                    217,
                    220
                ],
                "toks_append": [
                    225,
                    227,
                    204
                ],
                "toknum": [
                    205,
                    206,
                    208,
                    211,
                    213,
                    216,
                    219,
                    222
                ],
                "tokval": [
                    227,
                    205,
                    207,
                    211,
                    214,
                    217
                ],
                "NAME": [
                    521,
                    514,
                    213,
                    206
                ],
                "NUMBER": [
                    459,
                    213,
                    206
                ],
                "tok": [
                    514,
                    516,
                    210,
                    211,
                    536
                ],
                "ASYNC": [
                    213,
                    510,
                    527
                ],
                "AWAIT": [
                    213,
                    510
                ],
                "INDENT": [
                    216,
                    424
                ],
                "indents.append": [
                    217,
                    423
                ],
                "DEDENT": [
                    561,
                    219,
                    438
                ],
                "indents.pop": [
                    220
                ],
                "cookie_re": [
                    275,
                    229
                ],
                "re.ASCII": [
                    229,
                    230
                ],
                "blank_re": [
                    230,
                    303
                ],
                "enc": [
                    235,
                    236,
                    238,
                    239
                ],
                "replace": [
                    235
                ],
                "lower": [
                    235
                ],
                "orig_enc": [
                    241,
                    235
                ],
                "enc.startswith": [
                    236,
                    239
                ],
                "bom_found": [
                    285,
                    261,
                    294
                ],
                "encoding": [
                    289,
                    290,
                    312,
                    262,
                    300,
                    301,
                    302,
                    278,
                    310,
                    280,
                    283,
                    311
                ],
                "default": [
                    263,
                    296,
                    298,
                    304,
                    308,
                    314
                ],
                "StopIteration": [
                    368,
                    267
                ],
                "line_string": [
                    272,
                    275
                ],
                "line.decode": [
                    272
                ],
                "UnicodeDecodeError": [
                    273
                ],
                "match": [
                    275,
                    276,
                    278
                ],
                "cookie_re.match": [
                    275
                ],
                "_get_normal_name": [
                    278
                ],
                "match.group": [
                    278
                ],
                "codec": [
                    280,
                    286
                ],
                "lookup": [
                    280
                ],
                "LookupError": [
                    281
                ],
                "SyntaxError": [
                    288,
                    283
                ],
                "codec.name": [
                    286
                ],
                "first": [
                    292,
                    293,
                    295,
                    297,
                    300,
                    302,
                    303,
                    304,
                    308,
                    312,
                    314
                ],
                "read_or_stop": [
                    306,
                    292
                ],
                "first.startswith": [
                    293
                ],
                "BOM_UTF8": [
                    293
                ],
                "find_cookie": [
                    300,
                    310
                ],
                "blank_re.match": [
                    303
                ],
                "second": [
                    306,
                    307,
                    310,
                    312,
                    314
                ],
                "ut": [
                    334,
                    335
                ],
                "Untokenizer": [
                    334
                ],
                "ut.untokenize": [
                    335
                ],
                "lnum": [
                    385,
                    410,
                    542,
                    417,
                    419,
                    424,
                    553,
                    430,
                    561,
                    562,
                    438,
                    447,
                    454,
                    353,
                    486,
                    488,
                    496,
                    370,
                    380
                ],
                "parenlev": [
                    353,
                    546,
                    545,
                    394,
                    462
                ],
                "continued": [
                    448,
                    353,
                    394,
                    543
                ],
                "numchars": [
                    457,
                    354
                ],
                "contstr": [
                    384,
                    386,
                    355,
                    390,
                    489,
                    499,
                    373,
                    379,
                    381
                ],
                "needcont": [
                    355,
                    499,
                    381,
                    383
                ],
                "contline": [
                    385,
                    387,
                    356,
                    391,
                    490,
                    500,
                    380,
                    382
                ],
                "stashed": [
                    515,
                    516,
                    520,
                    521,
                    522,
                    527,
                    528,
                    529,
                    530,
                    532,
                    405,
                    406,
                    407,
                    533,
                    534,
                    539,
                    540,
                    541,
                    547,
                    548,
                    549,
                    556,
                    557,
                    558,
                    466,
                    467,
                    468,
                    473,
                    474,
                    475,
                    483,
                    484,
                    485,
                    360,
                    503,
                    504,
                    505
                ],
                "async_def": [
                    361,
                    524,
                    464,
                    433,
                    434,
                    440,
                    441,
                    509
                ],
                "async_def_indent": [
                    362,
                    525,
                    433,
                    436,
                    440,
                    443
                ],
                "async_def_nl": [
                    363,
                    465,
                    435,
                    440,
                    442
                ],
                "pos": [
                    397,
                    398,
                    399,
                    400,
                    402,
                    403,
                    409,
                    410,
                    413,
                    414,
                    415,
                    542,
                    417,
                    424,
                    552,
                    553,
                    554,
                    430,
                    438,
                    450,
                    451,
                    454,
                    479,
                    481,
                    482,
                    486,
                    371,
                    378
                ],
                "max": [
                    450,
                    371,
                    403,
                    397
                ],
                "TokenError": [
                    447,
                    375
                ],
                "strstart": [
                    385,
                    488,
                    496,
                    375,
                    380
                ],
                "endmatch": [
                    480,
                    481,
                    376,
                    377,
                    378,
                    479
                ],
                "endprog.match": [
                    376,
                    479
                ],
                "endprog": [
                    376,
                    497,
                    478,
                    479
                ],
                "endmatch.end": [
                    481,
                    378
                ],
                "STRING": [
                    506,
                    379,
                    486
                ],
                "ERRORTOKEN": [
                    384,
                    552
                ],
                "column": [
                    422,
                    423,
                    426,
                    427,
                    396,
                    398,
                    399,
                    400
                ],
                "comment_token": [
                    416,
                    417,
                    414,
                    415
                ],
                "rstrip": [
                    414
                ],
                "nl_pos": [
                    418,
                    419,
                    415
                ],
                "COMMENT": [
                    416,
                    476
                ],
                "IndentationError": [
                    428
                ],
                "pseudomatch": [
                    451,
                    452,
                    453
                ],
                "pseudoprog.match": [
                    451
                ],
                "pseudomatch.span": [
                    453
                ],
                "spos": [
                    514,
                    454,
                    486,
                    550,
                    459,
                    469,
                    506,
                    476,
                    542,
                    511
                ],
                "epos": [
                    514,
                    454,
                    550,
                    459,
                    469,
                    506,
                    476,
                    511
                ],
                "initial": [
                    545,
                    546,
                    455,
                    457,
                    458,
                    460,
                    492,
                    497,
                    471,
                    537,
                    507
                ],
                "newline": [
                    469,
                    461,
                    463
                ],
                "token.endswith": [
                    472
                ],
                "initial.isidentifier": [
                    507
                ],
                "OP": [
                    550
                ],
                "indent": [
                    560
                ],
                "ENDMARKER": [
                    562
                ],
                "__name__": [
                    564
                ],
                "sys.argv": [
                    566
                ],
                "sys": [
                    566,
                    567
                ],
                "tokenize": [
                    566,
                    567
                ],
                "open": [
                    566
                ],
                "sys.stdin.readline": [
                    567
                ],
                "sys.stdin": [
                    567
                ]
            },
            "filtered_variables_in_file": {
                "__author__": [
                    28
                ],
                "__credits__": [
                    29
                ],
                "__all__": [
                    37
                ],
                "x": [
                    53,
                    37
                ],
                "token": [
                    514,
                    515,
                    519,
                    148,
                    542,
                    37,
                    550,
                    39,
                    192,
                    194,
                    455,
                    458,
                    459,
                    205,
                    469,
                    472,
                    476,
                    477,
                    478,
                    482,
                    486,
                    493,
                    494,
                    495,
                    497,
                    498,
                    506,
                    508,
                    510,
                    511
                ],
                "join": [
                    48,
                    199
                ],
                "choices": [
                    48,
                    49,
                    50
                ],
                "group": [
                    49,
                    50,
                    64,
                    65,
                    67,
                    69,
                    70,
                    71,
                    82,
                    84,
                    90,
                    96,
                    97,
                    99,
                    103,
                    104,
                    106,
                    107,
                    108
                ],
                "y": [
                    53
                ],
                "l": [
                    53
                ],
                "x.casefold": [
                    53
                ],
                "y.casefold": [
                    53
                ],
                "Whitespace": [
                    56,
                    58,
                    108
                ],
                "Comment": [
                    57,
                    58,
                    107
                ],
                "Ignore": [
                    58,
                    100
                ],
                "maybe": [
                    58,
                    67
                ],
                "Name": [
                    99,
                    59,
                    108
                ],
                "Binnumber": [
                    65,
                    61
                ],
                "Hexnumber": [
                    65,
                    62
                ],
                "Octnumber": [
                    65,
                    63
                ],
                "Decnumber": [
                    64,
                    65
                ],
                "Intnumber": [
                    65,
                    71
                ],
                "Exponent": [
                    66,
                    67,
                    68
                ],
                "Pointfloat": [
                    67,
                    69
                ],
                "Expfloat": [
                    68,
                    69
                ],
                "Floatnumber": [
                    69,
                    70,
                    71
                ],
                "Imagnumber": [
                    70,
                    71
                ],
                "Number": [
                    99,
                    108,
                    71
                ],
                "Single": [
                    121,
                    74
                ],
                "Double": [
                    121,
                    76
                ],
                "Single3": [
                    112,
                    78
                ],
                "Double3": [
                    80,
                    113
                ],
                "_litprefix": [
                    103,
                    105,
                    81,
                    82,
                    84,
                    85
                ],
                "Triple": [
                    82,
                    107
                ],
                "String": [
                    99,
                    84
                ],
                "Operator": [
                    97,
                    90
                ],
                "Bracket": [
                    97,
                    95
                ],
                "Special": [
                    96,
                    97
                ],
                "Funny": [
                    97,
                    99,
                    108
                ],
                "PlainToken": [
                    99,
                    100
                ],
                "Token": [
                    100,
                    110
                ],
                "ContStr": [
                    108,
                    103
                ],
                "PseudoExtras": [
                    107,
                    108
                ],
                "PseudoToken": [
                    108,
                    111
                ],
                "tokenprog": [
                    110
                ],
                "re.compile": [
                    229,
                    230,
                    110,
                    111,
                    112,
                    113,
                    121
                ],
                "re": [
                    229,
                    230,
                    110,
                    111,
                    112,
                    113,
                    121
                ],
                "re.UNICODE": [
                    110,
                    111
                ],
                "pseudoprog": [
                    451,
                    111
                ],
                "single3prog": [
                    112,
                    122,
                    123
                ],
                "double3prog": [
                    113,
                    122,
                    124
                ],
                "_strprefixes": [
                    129,
                    130,
                    134,
                    135,
                    115,
                    123,
                    124,
                    125
                ],
                "_combinations": [
                    116,
                    117
                ],
                "endprogs": [
                    121,
                    498,
                    497,
                    478
                ],
                "prefix": [
                    129,
                    130,
                    134,
                    135,
                    123,
                    124,
                    125
                ],
                "triple_quoted": [
                    477,
                    127
                ],
                "single_quoted": [
                    493,
                    132,
                    492,
                    494
                ],
                "tabsize": [
                    138,
                    399
                ],
                "srow": [
                    145,
                    148
                ],
                "scol": [
                    145,
                    148
                ],
                "xxx_todo_changeme": [
                    145
                ],
                "erow": [
                    146,
                    148
                ],
                "ecol": [
                    146,
                    148
                ],
                "xxx_todo_changeme1": [
                    146
                ],
                "tok_name": [
                    148
                ],
                "printtoken": [
                    150
                ],
                "tokenize_loop": [
                    164
                ],
                "readline": [
                    164,
                    170,
                    266,
                    367,
                    566
                ],
                "tokeneater": [
                    171,
                    164
                ],
                "StopTokenizing": [
                    165
                ],
                "token_info": [
                    170,
                    171
                ],
                "generate_tokens": [
                    170
                ],
                "self.tokens": [
                    194,
                    199,
                    204,
                    176,
                    185
                ],
                "self": [
                    193,
                    194,
                    195,
                    197,
                    198,
                    199,
                    204,
                    176,
                    177,
                    178,
                    182,
                    183,
                    185,
                    190
                ],
                "self.prev_row": [
                    177,
                    195,
                    197,
                    182
                ],
                "self.prev_col": [
                    178,
                    195,
                    198,
                    183
                ],
                "row": [
                    181,
                    182
                ],
                "col": [
                    181,
                    183
                ],
                "start": [
                    192,
                    193,
                    482,
                    453,
                    454,
                    455,
                    488,
                    489,
                    496,
                    499,
                    181
                ],
                "col_offset": [
                    184,
                    185,
                    183
                ],
                "self.tokens.append": [
                    185,
                    194,
                    204
                ],
                "t": [
                    192,
                    188,
                    189,
                    190
                ],
                "iterable": [
                    210,
                    188,
                    190,
                    335
                ],
                "self.compat": [
                    190
                ],
                "tok_type": [
                    192,
                    196
                ],
                "end": [
                    192,
                    195,
                    453,
                    454,
                    455,
                    378,
                    379,
                    380
                ],
                "line": [
                    384,
                    385,
                    514,
                    390,
                    391,
                    395,
                    511,
                    398,
                    399,
                    272,
                    400,
                    409,
                    410,
                    413,
                    414,
                    542,
                    417,
                    418,
                    419,
                    550,
                    424,
                    552,
                    553,
                    430,
                    438,
                    446,
                    192,
                    451,
                    455,
                    459,
                    469,
                    476,
                    479,
                    482,
                    486,
                    489,
                    490,
                    367,
                    369,
                    371,
                    499,
                    500,
                    374,
                    376,
                    506,
                    379,
                    380,
                    383
                ],
                "self.add_whitespace": [
                    193
                ],
                "NEWLINE": [
                    208,
                    196,
                    461,
                    222
                ],
                "NL": [
                    418,
                    196,
                    542,
                    463,
                    208,
                    410,
                    222
                ],
                "startline": [
                    224,
                    226,
                    202,
                    209,
                    223
                ],
                "indents": [
                    224,
                    225,
                    357,
                    422,
                    423,
                    426,
                    203,
                    427,
                    525,
                    431,
                    560,
                    433,
                    440,
                    217,
                    220
                ],
                "toks_append": [
                    225,
                    227,
                    204
                ],
                "toknum": [
                    205,
                    206,
                    208,
                    211,
                    213,
                    216,
                    219,
                    222
                ],
                "tokval": [
                    227,
                    205,
                    207,
                    211,
                    214,
                    217
                ],
                "NAME": [
                    521,
                    514,
                    213,
                    206
                ],
                "NUMBER": [
                    459,
                    213,
                    206
                ],
                "tok": [
                    514,
                    516,
                    210,
                    211,
                    536
                ],
                "ASYNC": [
                    213,
                    510,
                    527
                ],
                "AWAIT": [
                    213,
                    510
                ],
                "INDENT": [
                    216,
                    424
                ],
                "indents.append": [
                    217,
                    423
                ],
                "DEDENT": [
                    561,
                    219,
                    438
                ],
                "indents.pop": [
                    220
                ],
                "cookie_re": [
                    275,
                    229
                ],
                "re.ASCII": [
                    229,
                    230
                ],
                "blank_re": [
                    230,
                    303
                ],
                "enc": [
                    235,
                    236,
                    238,
                    239
                ],
                "replace": [
                    235
                ],
                "lower": [
                    235
                ],
                "orig_enc": [
                    241,
                    235
                ],
                "enc.startswith": [
                    236,
                    239
                ],
                "bom_found": [
                    285,
                    261,
                    294
                ],
                "encoding": [
                    289,
                    290,
                    312,
                    262,
                    300,
                    301,
                    302,
                    278,
                    310,
                    280,
                    283,
                    311
                ],
                "default": [
                    263,
                    296,
                    298,
                    304,
                    308,
                    314
                ],
                "line_string": [
                    272,
                    275
                ],
                "line.decode": [
                    272
                ],
                "match": [
                    275,
                    276,
                    278
                ],
                "cookie_re.match": [
                    275
                ],
                "_get_normal_name": [
                    278
                ],
                "match.group": [
                    278
                ],
                "codec": [
                    280,
                    286
                ],
                "lookup": [
                    280
                ],
                "codec.name": [
                    286
                ],
                "first": [
                    292,
                    293,
                    295,
                    297,
                    300,
                    302,
                    303,
                    304,
                    308,
                    312,
                    314
                ],
                "read_or_stop": [
                    306,
                    292
                ],
                "first.startswith": [
                    293
                ],
                "BOM_UTF8": [
                    293
                ],
                "find_cookie": [
                    300,
                    310
                ],
                "blank_re.match": [
                    303
                ],
                "second": [
                    306,
                    307,
                    310,
                    312,
                    314
                ],
                "ut": [
                    334,
                    335
                ],
                "Untokenizer": [
                    334
                ],
                "ut.untokenize": [
                    335
                ],
                "lnum": [
                    385,
                    410,
                    542,
                    417,
                    419,
                    424,
                    553,
                    430,
                    561,
                    562,
                    438,
                    447,
                    454,
                    353,
                    486,
                    488,
                    496,
                    370,
                    380
                ],
                "parenlev": [
                    353,
                    546,
                    545,
                    394,
                    462
                ],
                "continued": [
                    448,
                    353,
                    394,
                    543
                ],
                "numchars": [
                    457,
                    354
                ],
                "contstr": [
                    384,
                    386,
                    355,
                    390,
                    489,
                    499,
                    373,
                    379,
                    381
                ],
                "needcont": [
                    355,
                    499,
                    381,
                    383
                ],
                "contline": [
                    385,
                    387,
                    356,
                    391,
                    490,
                    500,
                    380,
                    382
                ],
                "stashed": [
                    515,
                    516,
                    520,
                    521,
                    522,
                    527,
                    528,
                    529,
                    530,
                    532,
                    405,
                    406,
                    407,
                    533,
                    534,
                    539,
                    540,
                    541,
                    547,
                    548,
                    549,
                    556,
                    557,
                    558,
                    466,
                    467,
                    468,
                    473,
                    474,
                    475,
                    483,
                    484,
                    485,
                    360,
                    503,
                    504,
                    505
                ],
                "async_def": [
                    361,
                    524,
                    464,
                    433,
                    434,
                    440,
                    441,
                    509
                ],
                "async_def_indent": [
                    362,
                    525,
                    433,
                    436,
                    440,
                    443
                ],
                "async_def_nl": [
                    363,
                    465,
                    435,
                    440,
                    442
                ],
                "pos": [
                    397,
                    398,
                    399,
                    400,
                    402,
                    403,
                    409,
                    410,
                    413,
                    414,
                    415,
                    542,
                    417,
                    424,
                    552,
                    553,
                    554,
                    430,
                    438,
                    450,
                    451,
                    454,
                    479,
                    481,
                    482,
                    486,
                    371,
                    378
                ],
                "TokenError": [
                    447,
                    375
                ],
                "strstart": [
                    385,
                    488,
                    496,
                    375,
                    380
                ],
                "endmatch": [
                    480,
                    481,
                    376,
                    377,
                    378,
                    479
                ],
                "endprog.match": [
                    376,
                    479
                ],
                "endprog": [
                    376,
                    497,
                    478,
                    479
                ],
                "endmatch.end": [
                    481,
                    378
                ],
                "STRING": [
                    506,
                    379,
                    486
                ],
                "ERRORTOKEN": [
                    384,
                    552
                ],
                "column": [
                    422,
                    423,
                    426,
                    427,
                    396,
                    398,
                    399,
                    400
                ],
                "comment_token": [
                    416,
                    417,
                    414,
                    415
                ],
                "rstrip": [
                    414
                ],
                "nl_pos": [
                    418,
                    419,
                    415
                ],
                "COMMENT": [
                    416,
                    476
                ],
                "pseudomatch": [
                    451,
                    452,
                    453
                ],
                "pseudoprog.match": [
                    451
                ],
                "pseudomatch.span": [
                    453
                ],
                "spos": [
                    514,
                    454,
                    486,
                    550,
                    459,
                    469,
                    506,
                    476,
                    542,
                    511
                ],
                "epos": [
                    514,
                    454,
                    550,
                    459,
                    469,
                    506,
                    476,
                    511
                ],
                "initial": [
                    545,
                    546,
                    455,
                    457,
                    458,
                    460,
                    492,
                    497,
                    471,
                    537,
                    507
                ],
                "newline": [
                    469,
                    461,
                    463
                ],
                "token.endswith": [
                    472
                ],
                "initial.isidentifier": [
                    507
                ],
                "OP": [
                    550
                ],
                "indent": [
                    560
                ],
                "ENDMARKER": [
                    562
                ],
                "sys.argv": [
                    566
                ],
                "sys": [
                    566,
                    567
                ],
                "tokenize": [
                    566,
                    567
                ],
                "sys.stdin.readline": [
                    567
                ],
                "sys.stdin": [
                    567
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/black_13/tests/test_black.py",
                "test_function": "test_python37",
                "test_function_code": "    @patch(\"black.dump_to_file\", dump_to_stderr)\n    def test_python37(self) -> None:\n        source, expected = read_data(\"python37\")\n        actual = fs(source)\n        self.assertFormatEqual(expected, actual)\n        major, minor = sys.version_info[:2]\n        if major > 3 or (major == 3 and minor >= 7):\n            black.assert_equivalent(source, actual)\n        black.assert_stable(source, actual, line_length=ll)",
                "test_error": "ValueError: Cannot parse: 4:16:     return (i*2 async for i in arange(42))",
                "full_test_error": "self = <test_black.BlackTestCase testMethod=test_python37>\n\n    @patch(\"black.dump_to_file\", dump_to_stderr)\n    def test_python37(self) -> None:\n        source, expected = read_data(\"python37\")\n>       actual = fs(source)\n\ntests/test_black.py:417: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nblack.py:610: in format_str\n    src_node = lib2to3_parse(src_contents)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsrc_txt = '#!/usr/bin/env python3.7\\n\\ndef f():\\n    return (i*2 async for i in arange(42))\\n'\n\n    def lib2to3_parse(src_txt: str) -> Node:\n        \"\"\"Given a string with source, return the lib2to3 Node.\"\"\"\n        grammar = pygram.python_grammar_no_print_statement\n        if src_txt[-1:] != \"\\n\":\n            src_txt += \"\\n\"\n        for grammar in GRAMMARS:\n            drv = driver.Driver(grammar, pytree.convert)\n            try:\n                result = drv.parse_string(src_txt, True)\n                break\n    \n            except ParseError as pe:\n                lineno, column = pe.context[1]\n                lines = src_txt.splitlines()\n                try:\n                    faulty_line = lines[lineno - 1]\n                except IndexError:\n                    faulty_line = \"<line number missing in source>\"\n                exc = ValueError(f\"Cannot parse: {lineno}:{column}: {faulty_line}\")\n        else:\n>           raise exc from None\nE           ValueError: Cannot parse: 4:16:     return (i*2 async for i in arange(42))\n\nblack.py:681: ValueError",
                "traceback": "black.py:610: in format_str\n    src_node = lib2to3_parse(src_contents)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsrc_txt = '#!/usr/bin/env python3.7\\n\\ndef f():\\n    return (i*2 async for i in arange(42))\\n'\n\n    def lib2to3_parse(src_txt: str) -> Node:\n        \"\"\"Given a string with source, return the lib2to3 Node.\"\"\"\n        grammar = pygram.python_grammar_no_print_statement\n        if src_txt[-1:] != \"\\n\":\n            src_txt += \"\\n\"\n        for grammar in GRAMMARS:\n            drv = driver.Driver(grammar, pytree.convert)\n            try:\n                result = drv.parse_string(src_txt, True)\n                break\n    \n            except ParseError as pe:\n                lineno, column = pe.context[1]\n                lines = src_txt.splitlines()\n                try:\n                    faulty_line = lines[lineno - 1]\n                except IndexError:\n                    faulty_line = \"<line number missing in source>\"\n                exc = ValueError(f\"Cannot parse: {lineno}:{column}: {faulty_line}\")\n        else:\n>           raise exc from None\nE           ValueError: Cannot parse: 4:16:     return (i*2 async for i in arange(42))\n\nblack.py:681: ValueError",
                "test_function_decorators": [
                    "patch('black.dump_to_file', dump_to_stderr)"
                ]
            }
        ]
    }
}