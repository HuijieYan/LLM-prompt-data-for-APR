{
    "pandas:163": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_163/pandas/core/window.py": {
            "buggy_functions": [
                {
                    "function_name": "_prep_values",
                    "function_code": "def _prep_values(self, values: Optional[np.ndarray] = None) -> np.ndarray:\n    \"\"\"Convert input to numpy arrays for Cython routines\"\"\"\n    if values is None:\n        values = getattr(self._selected_obj, \"values\", self._selected_obj)\n\n    # GH #12373 : rolling functions error on float32 data\n    # make sure the data is coerced to float64\n    if is_float_dtype(values.dtype):\n        values = ensure_float64(values)\n    elif is_integer_dtype(values.dtype):\n        values = ensure_float64(values)\n    elif needs_i8_conversion(values.dtype):\n        raise NotImplementedError(\n            \"ops for {action} for this \"\n            \"dtype {dtype} are not \"\n            \"implemented\".format(action=self._window_type, dtype=values.dtype)\n        )\n    else:\n        try:\n            values = ensure_float64(values)\n        except (ValueError, TypeError):\n            raise TypeError(\"cannot handle this type -> {0}\".format(values.dtype))\n\n    # Always convert inf to nan\n    values[np.isinf(values)] = np.NaN\n\n    return values\n",
                    "decorators": [],
                    "docstring": "Convert input to numpy arrays for Cython routines",
                    "start_line": 226,
                    "end_line": 252,
                    "variables": {
                        "Optional": [
                            226
                        ],
                        "np.ndarray": [
                            226
                        ],
                        "np": [
                            226,
                            250
                        ],
                        "values": [
                            228,
                            229,
                            233,
                            234,
                            235,
                            236,
                            237,
                            241,
                            245,
                            247,
                            250,
                            252
                        ],
                        "getattr": [
                            229
                        ],
                        "self._selected_obj": [
                            229
                        ],
                        "self": [
                            241,
                            229
                        ],
                        "is_float_dtype": [
                            233
                        ],
                        "values.dtype": [
                            233,
                            235,
                            237,
                            241,
                            247
                        ],
                        "ensure_float64": [
                            234,
                            236,
                            245
                        ],
                        "is_integer_dtype": [
                            235
                        ],
                        "needs_i8_conversion": [
                            237
                        ],
                        "NotImplementedError": [
                            238
                        ],
                        "format": [
                            247,
                            239
                        ],
                        "self._window_type": [
                            241
                        ],
                        "ValueError": [
                            246
                        ],
                        "TypeError": [
                            246,
                            247
                        ],
                        "np.isinf": [
                            250
                        ],
                        "np.NaN": [
                            250
                        ]
                    },
                    "filtered_variables": {
                        "Optional": [
                            226
                        ],
                        "np.ndarray": [
                            226
                        ],
                        "np": [
                            226,
                            250
                        ],
                        "values": [
                            228,
                            229,
                            233,
                            234,
                            235,
                            236,
                            237,
                            241,
                            245,
                            247,
                            250,
                            252
                        ],
                        "self._selected_obj": [
                            229
                        ],
                        "self": [
                            241,
                            229
                        ],
                        "is_float_dtype": [
                            233
                        ],
                        "values.dtype": [
                            233,
                            235,
                            237,
                            241,
                            247
                        ],
                        "ensure_float64": [
                            234,
                            236,
                            245
                        ],
                        "is_integer_dtype": [
                            235
                        ],
                        "needs_i8_conversion": [
                            237
                        ],
                        "self._window_type": [
                            241
                        ],
                        "np.isinf": [
                            250
                        ],
                        "np.NaN": [
                            250
                        ]
                    },
                    "diff_line_number": 249,
                    "class_data": {
                        "signature": "class _Window(PandasObject, SelectionMixin)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, obj, window=None, min_periods: Optional[int]=None, center: Optional[bool]=False, win_type: Optional[str]=None, axis: Axis=0, on: Optional[str]=None, closed: Optional[str]=None, **kwargs):\n    self.__dict__.update(kwargs)\n    self.obj = obj\n    self.on = on\n    self.closed = closed\n    self.window = window\n    self.min_periods = min_periods\n    self.center = center\n    self.win_type = win_type\n    self.win_freq = None\n    self.axis = obj._get_axis_number(axis) if axis is not None else None\n    self.validate()",
                            "@property\ndef _constructor(self):\n    return Window",
                            "@property\ndef is_datetimelike(self) -> Optional[bool]:\n    return None",
                            "@property\ndef _on(self):\n    return None",
                            "@property\ndef is_freq_type(self) -> bool:\n    return self.win_type == 'freq'",
                            "def validate(self):\n    if self.center is not None and (not is_bool(self.center)):\n        raise ValueError('center must be a boolean')\n    if self.min_periods is not None and (not is_integer(self.min_periods)):\n        raise ValueError('min_periods must be an integer')\n    if self.closed is not None and self.closed not in ['right', 'both', 'left', 'neither']:\n        raise ValueError(\"closed must be 'right', 'left', 'both' or 'neither'\")",
                            "def _create_blocks(self):\n    \"\"\"\n    Split data into blocks & return conformed data.\n    \"\"\"\n    obj = self._selected_obj\n    if self.on is not None:\n        if obj.ndim == 2:\n            obj = obj.reindex(columns=obj.columns.difference([self.on]), copy=False)\n    blocks = obj._to_dict_of_blocks(copy=False).values()\n    return (blocks, obj)",
                            "def _gotitem(self, key, ndim, subset=None):\n    \"\"\"\n    Sub-classes to define. Return a sliced object.\n\n    Parameters\n    ----------\n    key : str / list of selections\n    ndim : 1,2\n        requested ndim of result\n    subset : object, default None\n        subset to act on\n    \"\"\"\n    if subset is None:\n        subset = self.obj\n    self = self._shallow_copy(subset)\n    self._reset_cache()\n    if subset.ndim == 2:\n        if is_scalar(key) and key in subset or is_list_like(key):\n            self._selection = key\n    return self",
                            "def __getattr__(self, attr):\n    if attr in self._internal_names_set:\n        return object.__getattribute__(self, attr)\n    if attr in self.obj:\n        return self[attr]\n    raise AttributeError('%r object has no attribute %r' % (type(self).__name__, attr))",
                            "def _dir_additions(self):\n    return self.obj._dir_additions()",
                            "def _get_window(self, other=None, **kwargs) -> int:\n    \"\"\"\n    Returns window length\n\n    Parameters\n    ----------\n    other:\n        ignored, exists for compatibility\n\n    Returns\n    -------\n    window : int\n    \"\"\"\n    return self.window",
                            "@property\ndef _window_type(self) -> str:\n    return self.__class__.__name__",
                            "def __repr__(self) -> str:\n    \"\"\"\n    Provide a nice str repr of our rolling object.\n    \"\"\"\n    attrs = ('{k}={v}'.format(k=k, v=getattr(self, k)) for k in self._attributes if getattr(self, k, None) is not None)\n    return '{klass} [{attrs}]'.format(klass=self._window_type, attrs=','.join(attrs))",
                            "def __iter__(self):\n    url = 'https://github.com/pandas-dev/pandas/issues/11704'\n    raise NotImplementedError('See issue #11704 {url}'.format(url=url))",
                            "def _get_index(self) -> Optional[np.ndarray]:\n    \"\"\"\n    Return integer representations as an ndarray if index is frequency.\n\n    Returns\n    -------\n    None or ndarray\n    \"\"\"\n    if self.is_freq_type:\n        return self._on.asi8\n    return None",
                            "def _prep_values(self, values: Optional[np.ndarray]=None) -> np.ndarray:\n    \"\"\"Convert input to numpy arrays for Cython routines\"\"\"\n    if values is None:\n        values = getattr(self._selected_obj, 'values', self._selected_obj)\n    if is_float_dtype(values.dtype):\n        values = ensure_float64(values)\n    elif is_integer_dtype(values.dtype):\n        values = ensure_float64(values)\n    elif needs_i8_conversion(values.dtype):\n        raise NotImplementedError('ops for {action} for this dtype {dtype} are not implemented'.format(action=self._window_type, dtype=values.dtype))\n    else:\n        try:\n            values = ensure_float64(values)\n        except (ValueError, TypeError):\n            raise TypeError('cannot handle this type -> {0}'.format(values.dtype))\n    values[np.isinf(values)] = np.NaN\n    return values",
                            "def _wrap_result(self, result, block=None, obj=None):\n    \"\"\"\n    Wrap a single result.\n    \"\"\"\n    if obj is None:\n        obj = self._selected_obj\n    index = obj.index\n    if isinstance(result, np.ndarray):\n        if block is not None:\n            if is_timedelta64_dtype(block.values.dtype):\n                from pandas import to_timedelta\n                result = to_timedelta(result.ravel(), unit='ns').values.reshape(result.shape)\n        if result.ndim == 1:\n            from pandas import Series\n            return Series(result, index, name=obj.name)\n        return type(obj)(result, index=index, columns=block.columns)\n    return result",
                            "def _wrap_results(self, results, blocks, obj, exclude=None) -> FrameOrSeries:\n    \"\"\"\n    Wrap the results.\n\n    Parameters\n    ----------\n    results : list of ndarrays\n    blocks : list of blocks\n    obj : conformed data (may be resampled)\n    exclude: list of columns to exclude, default to None\n    \"\"\"\n    from pandas import Series, concat\n    final = []\n    for (result, block) in zip(results, blocks):\n        result = self._wrap_result(result, block=block, obj=obj)\n        if result.ndim == 1:\n            return result\n        final.append(result)\n    columns = self._selected_obj.columns\n    if self.on is not None and (not self._on.equals(obj.index)):\n        name = self._on.name\n        final.append(Series(self._on, index=obj.index, name=name))\n        if self._selection is not None:\n            selection = ensure_index(self._selection)\n            if name not in selection:\n                columns = self.obj.columns\n                indexer = columns.get_indexer(selection.tolist() + [name])\n                columns = columns.take(sorted(indexer))\n    if exclude is not None and exclude:\n        columns = [c for c in columns if c not in exclude]\n        if not columns:\n            raise DataError('No numeric types to aggregate')\n    if not len(final):\n        return obj.astype('float64')\n    return concat(final, axis=1).reindex(columns=columns, copy=False)",
                            "def _center_window(self, result, window) -> np.ndarray:\n    \"\"\"\n    Center the result in the window.\n    \"\"\"\n    if self.axis > result.ndim - 1:\n        raise ValueError('Requested axis is larger then no. of argument dimensions')\n    offset = _offset(window, True)\n    if offset > 0:\n        if isinstance(result, (ABCSeries, ABCDataFrame)):\n            result = result.slice_shift(-offset, axis=self.axis)\n        else:\n            lead_indexer = [slice(None)] * result.ndim\n            lead_indexer[self.axis] = slice(offset, None)\n            result = np.copy(result[tuple(lead_indexer)])\n    return result",
                            "def _get_roll_func(self, cfunc: Callable, check_minp: Callable, index: np.ndarray, **kwargs) -> Callable:\n    \"\"\"\n    Wrap rolling function to check values passed.\n\n    Parameters\n    ----------\n    cfunc : callable\n        Cython function used to calculate rolling statistics\n    check_minp : callable\n        function to check minimum period parameter\n    index : ndarray\n        used for variable window\n\n    Returns\n    -------\n    func : callable\n    \"\"\"\n\n    def func(arg, window, min_periods=None, closed=None):\n        minp = check_minp(min_periods, window)\n        return cfunc(arg, window, minp, index, closed, **kwargs)\n    return func",
                            "def _apply(self, func: Union[str, Callable], name: Optional[str]=None, window: Optional[Union[int, str]]=None, center: Optional[bool]=None, check_minp: Optional[Callable]=None, **kwargs):\n    \"\"\"\n    Rolling statistical measure using supplied function.\n\n    Designed to be used with passed-in Cython array-based functions.\n\n    Parameters\n    ----------\n    func : str/callable to apply\n    name : str, optional\n       name of this function\n    window : int/str, default to _get_window()\n        window length or offset\n    center : bool, default to self.center\n    check_minp : function, default to _use_window\n    **kwargs\n        additional arguments for rolling function and window function\n\n    Returns\n    -------\n    y : type of input\n    \"\"\"\n    if center is None:\n        center = self.center\n    if check_minp is None:\n        check_minp = _use_window\n    if window is None:\n        window = self._get_window(**kwargs)\n    (blocks, obj) = self._create_blocks()\n    block_list = list(blocks)\n    index_as_array = self._get_index()\n    results = []\n    exclude = []\n    for (i, b) in enumerate(blocks):\n        try:\n            values = self._prep_values(b.values)\n        except (TypeError, NotImplementedError):\n            if isinstance(obj, ABCDataFrame):\n                exclude.extend(b.columns)\n                del block_list[i]\n                continue\n            else:\n                raise DataError('No numeric types to aggregate')\n        if values.size == 0:\n            results.append(values.copy())\n            continue\n        if isinstance(func, str):\n            cfunc = getattr(libwindow, func, None)\n            if cfunc is None:\n                raise ValueError('we do not support this function in libwindow.{func}'.format(func=func))\n            func = self._get_roll_func(cfunc, check_minp, index_as_array, **kwargs)\n        if center:\n            offset = _offset(window, center)\n            additional_nans = np.array([np.NaN] * offset)\n\n            def calc(x):\n                return func(np.concatenate((x, additional_nans)), window, min_periods=self.min_periods, closed=self.closed)\n        else:\n\n            def calc(x):\n                return func(x, window, min_periods=self.min_periods, closed=self.closed)\n        with np.errstate(all='ignore'):\n            if values.ndim > 1:\n                result = np.apply_along_axis(calc, self.axis, values)\n            else:\n                result = calc(values)\n                result = np.asarray(result)\n        if center:\n            result = self._center_window(result, window)\n        results.append(result)\n    return self._wrap_results(results, block_list, obj, exclude)",
                            "def aggregate(self, func, *args, **kwargs):\n    (result, how) = self._aggregate(func, *args, **kwargs)\n    if result is None:\n        return self.apply(func, raw=False, args=args, kwargs=kwargs)\n    return result",
                            "def calc(x):\n    return func(np.concatenate((x, additional_nans)), window, min_periods=self.min_periods, closed=self.closed)",
                            "def calc(x):\n    return func(x, window, min_periods=self.min_periods, closed=self.closed)"
                        ],
                        "constructor_variables": [
                            "self.obj = obj",
                            "self.on = on",
                            "self.closed = closed",
                            "self.window = window",
                            "self.min_periods = min_periods",
                            "self.center = center",
                            "self.win_type = win_type",
                            "self.win_freq = None",
                            "self.axis = obj._get_axis_number(axis) if axis is not None else None"
                        ],
                        "class_level_variables": [
                            "_attributes = ['window', 'min_periods', 'center', 'win_type', 'axis', 'on', 'closed']",
                            "exclusions = set()",
                            "agg = aggregate",
                            "_shared_docs['sum'] = dedent('\\n    Calculate %(name)s sum of given DataFrame or Series.\\n\\n    Parameters\\n    ----------\\n    *args, **kwargs\\n        For compatibility with other %(name)s methods. Has no effect\\n        on the computed value.\\n\\n    Returns\\n    -------\\n    Series or DataFrame\\n        Same type as the input, with the same index, containing the\\n        %(name)s sum.\\n\\n    See Also\\n    --------\\n    Series.sum : Reducing sum for Series.\\n    DataFrame.sum : Reducing sum for DataFrame.\\n\\n    Examples\\n    --------\\n    >>> s = pd.Series([1, 2, 3, 4, 5])\\n    >>> s\\n    0    1\\n    1    2\\n    2    3\\n    3    4\\n    4    5\\n    dtype: int64\\n\\n    >>> s.rolling(3).sum()\\n    0     NaN\\n    1     NaN\\n    2     6.0\\n    3     9.0\\n    4    12.0\\n    dtype: float64\\n\\n    >>> s.expanding(3).sum()\\n    0     NaN\\n    1     NaN\\n    2     6.0\\n    3    10.0\\n    4    15.0\\n    dtype: float64\\n\\n    >>> s.rolling(3, center=True).sum()\\n    0     NaN\\n    1     6.0\\n    2     9.0\\n    3    12.0\\n    4     NaN\\n    dtype: float64\\n\\n    For DataFrame, each %(name)s sum is computed column-wise.\\n\\n    >>> df = pd.DataFrame({\"A\": s, \"B\": s ** 2})\\n    >>> df\\n       A   B\\n    0  1   1\\n    1  2   4\\n    2  3   9\\n    3  4  16\\n    4  5  25\\n\\n    >>> df.rolling(3).sum()\\n          A     B\\n    0   NaN   NaN\\n    1   NaN   NaN\\n    2   6.0  14.0\\n    3   9.0  29.0\\n    4  12.0  50.0\\n    ')",
                            "_shared_docs['mean'] = dedent('\\n    Calculate the %(name)s mean of the values.\\n\\n    Parameters\\n    ----------\\n    *args\\n        Under Review.\\n    **kwargs\\n        Under Review.\\n\\n    Returns\\n    -------\\n    Series or DataFrame\\n        Returned object type is determined by the caller of the %(name)s\\n        calculation.\\n\\n    See Also\\n    --------\\n    Series.%(name)s : Calling object with Series data.\\n    DataFrame.%(name)s : Calling object with DataFrames.\\n    Series.mean : Equivalent method for Series.\\n    DataFrame.mean : Equivalent method for DataFrame.\\n\\n    Examples\\n    --------\\n    The below examples will show rolling mean calculations with window sizes of\\n    two and three, respectively.\\n\\n    >>> s = pd.Series([1, 2, 3, 4])\\n    >>> s.rolling(2).mean()\\n    0    NaN\\n    1    1.5\\n    2    2.5\\n    3    3.5\\n    dtype: float64\\n\\n    >>> s.rolling(3).mean()\\n    0    NaN\\n    1    NaN\\n    2    2.0\\n    3    3.0\\n    dtype: float64\\n    ')"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, obj, window=None, min_periods: Optional[int]=None, center: Optional[bool]=False, win_type: Optional[str]=None, axis: Axis=0, on: Optional[str]=None, closed: Optional[str]=None, **kwargs)",
                            "_constructor(self)",
                            "is_datetimelike(self) -> Optional[bool]",
                            "_on(self)",
                            "is_freq_type(self) -> bool",
                            "validate(self)",
                            "_create_blocks(self)",
                            "_gotitem(self, key, ndim, subset=None)",
                            "__getattr__(self, attr)",
                            "_dir_additions(self)",
                            "_get_window(self, other=None, **kwargs) -> int",
                            "_window_type(self) -> str",
                            "__repr__(self) -> str",
                            "__iter__(self)",
                            "_get_index(self) -> Optional[np.ndarray]",
                            "_prep_values(self, values: Optional[np.ndarray]=None) -> np.ndarray",
                            "_wrap_result(self, result, block=None, obj=None)",
                            "_wrap_results(self, results, blocks, obj, exclude=None) -> FrameOrSeries",
                            "_center_window(self, result, window) -> np.ndarray",
                            "_get_roll_func(self, cfunc: Callable, check_minp: Callable, index: np.ndarray, **kwargs) -> Callable",
                            "_apply(self, func: Union[str, Callable], name: Optional[str]=None, window: Optional[Union[int, str]]=None, center: Optional[bool]=None, check_minp: Optional[Callable]=None, **kwargs)",
                            "aggregate(self, func, *args, **kwargs)",
                            "calc(x)",
                            "calc(x)"
                        ],
                        "class_level_variable_names": [
                            "_attributes",
                            "exclusions",
                            "agg"
                        ],
                        "constructor_variable_names": [
                            "axis",
                            "min_periods",
                            "window",
                            "win_type",
                            "on",
                            "obj",
                            "win_freq",
                            "center",
                            "closed"
                        ]
                    },
                    "used_imports": [
                        "from typing import Callable, List, Optional, Set, Union",
                        "import numpy as np",
                        "from pandas.core.dtypes.common import ensure_float64, is_bool, is_float_dtype, is_integer, is_integer_dtype, is_list_like, is_scalar, is_timedelta64_dtype, needs_i8_conversion"
                    ],
                    "variable_values": [
                        [
                            {
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([ 1.,  3., nan,  3.,  5.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "self._selected_obj": {
                                    "variable_value": "0    1.0\n1    3.0\n2    NaN\n3    3.0\n4    5.0\ndtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "self": {
                                    "variable_value": "Rolling [window=2,center=False,axis=0]",
                                    "variable_type": "Rolling",
                                    "variable_shape": null
                                },
                                "is_float_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.dtype": {
                                    "variable_value": "dtype('float64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "ensure_float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._window_type": {
                                    "variable_value": "'Rolling'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "np.isinf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.NaN": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([ 1.,  3., nan,  3.,  5.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "self._selected_obj": {
                                    "variable_value": "0    1.0\n1    3.0\n2    NaN\n3    3.0\n4    5.0\ndtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "self": {
                                    "variable_value": "Rolling [window=2,center=False,axis=0]",
                                    "variable_type": "Rolling",
                                    "variable_shape": null
                                },
                                "is_float_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.dtype": {
                                    "variable_value": "dtype('float64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "ensure_float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._window_type": {
                                    "variable_value": "'Rolling'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "inf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.isinf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inf.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Optional": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([ 1.,  3., nan,  3.,  5.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "self._selected_obj": {
                                    "variable_value": "0    1.0\n1    3.0\n2    NaN\n3    3.0\n4    5.0\ndtype: float64",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "self": {
                                    "variable_value": "Rolling [window=2,center=False,axis=0]",
                                    "variable_type": "Rolling",
                                    "variable_shape": null
                                },
                                "is_float_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values.dtype": {
                                    "variable_value": "dtype('float64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "()"
                                },
                                "ensure_float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "needs_i8_conversion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._window_type": {
                                    "variable_value": "'Rolling'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "inf": {
                                    "variable_value": "array([False, False, False, False, False])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "np.isinf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inf.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x7f772d4ce5d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": {
                "file_scope_functions": [
                    {
                        "code": "def _flex_binary_moment(arg1, arg2, f, pairwise=False):\n\n    if not (\n        isinstance(arg1, (np.ndarray, ABCSeries, ABCDataFrame))\n        and isinstance(arg2, (np.ndarray, ABCSeries, ABCDataFrame))\n    ):\n        raise TypeError(\n            \"arguments to moment function must be of type \"\n            \"np.ndarray/Series/DataFrame\"\n        )\n\n    if isinstance(arg1, (np.ndarray, ABCSeries)) and isinstance(\n        arg2, (np.ndarray, ABCSeries)\n    ):\n        X, Y = _prep_binary(arg1, arg2)\n        return f(X, Y)\n\n    elif isinstance(arg1, ABCDataFrame):\n        from pandas import DataFrame\n\n        def dataframe_from_int_dict(data, frame_template):\n            result = DataFrame(data, index=frame_template.index)\n            if len(result.columns) > 0:\n                result.columns = frame_template.columns[result.columns]\n            return result\n\n        results = {}\n        if isinstance(arg2, ABCDataFrame):\n            if pairwise is False:\n                if arg1 is arg2:\n                    # special case in order to handle duplicate column names\n                    for i, col in enumerate(arg1.columns):\n                        results[i] = f(arg1.iloc[:, i], arg2.iloc[:, i])\n                    return dataframe_from_int_dict(results, arg1)\n                else:\n                    if not arg1.columns.is_unique:\n                        raise ValueError(\"'arg1' columns are not unique\")\n                    if not arg2.columns.is_unique:\n                        raise ValueError(\"'arg2' columns are not unique\")\n                    with warnings.catch_warnings(record=True):\n                        warnings.simplefilter(\"ignore\", RuntimeWarning)\n                        X, Y = arg1.align(arg2, join=\"outer\")\n                    X = X + 0 * Y\n                    Y = Y + 0 * X\n\n                    with warnings.catch_warnings(record=True):\n                        warnings.simplefilter(\"ignore\", RuntimeWarning)\n                        res_columns = arg1.columns.union(arg2.columns)\n                    for col in res_columns:\n                        if col in X and col in Y:\n                            results[col] = f(X[col], Y[col])\n                    return DataFrame(results, index=X.index, columns=res_columns)\n            elif pairwise is True:\n                results = defaultdict(dict)\n                for i, k1 in enumerate(arg1.columns):\n                    for j, k2 in enumerate(arg2.columns):\n                        if j < i and arg2 is arg1:\n                            # Symmetric case\n                            results[i][j] = results[j][i]\n                        else:\n                            results[i][j] = f(\n                                *_prep_binary(arg1.iloc[:, i], arg2.iloc[:, j])\n                            )\n\n                from pandas import concat\n\n                result_index = arg1.index.union(arg2.index)\n                if len(result_index):\n\n                    # construct result frame\n                    result = concat(\n                        [\n                            concat(\n                                [results[i][j] for j, c in enumerate(arg2.columns)],\n                                ignore_index=True,\n                            )\n                            for i, c in enumerate(arg1.columns)\n                        ],\n                        ignore_index=True,\n                        axis=1,\n                    )\n                    result.columns = arg1.columns\n\n                    # set the index and reorder\n                    if arg2.columns.nlevels > 1:\n                        result.index = MultiIndex.from_product(\n                            arg2.columns.levels + [result_index]\n                        )\n                        result = result.reorder_levels([2, 0, 1]).sort_index()\n                    else:\n                        result.index = MultiIndex.from_product(\n                            [range(len(arg2.columns)), range(len(result_index))]\n                        )\n                        result = result.swaplevel(1, 0).sort_index()\n                        result.index = MultiIndex.from_product(\n                            [result_index] + [arg2.columns]\n                        )\n                else:\n\n                    # empty result\n                    result = DataFrame(\n                        index=MultiIndex(\n                            levels=[arg1.index, arg2.columns], codes=[[], []]\n                        ),\n                        columns=arg2.columns,\n                        dtype=\"float64\",\n                    )\n\n                # reset our index names to arg1 names\n                # reset our column names to arg2 names\n                # careful not to mutate the original names\n                result.columns = result.columns.set_names(arg1.columns.names)\n                result.index = result.index.set_names(\n                    result_index.names + arg2.columns.names\n                )\n\n                return result\n\n            else:\n                raise ValueError(\"'pairwise' is not True/False\")\n        else:\n            results = {\n                i: f(*_prep_binary(arg1.iloc[:, i], arg2))\n                for i, col in enumerate(arg1.columns)\n            }\n            return dataframe_from_int_dict(results, arg1)\n\n    else:\n        return _flex_binary_moment(arg2, arg1, f)",
                        "signature": "_flex_binary_moment(arg1, arg2, f, pairwise=False)"
                    },
                    {
                        "code": "def _get_center_of_mass(comass, span, halflife, alpha):\n    valid_count = com.count_not_none(comass, span, halflife, alpha)\n    if valid_count > 1:\n        raise ValueError(\"comass, span, halflife, and alpha are mutually exclusive\")\n\n    # Convert to center of mass; domain checks ensure 0 < alpha <= 1\n    if comass is not None:\n        if comass < 0:\n            raise ValueError(\"comass must satisfy: comass >= 0\")\n    elif span is not None:\n        if span < 1:\n            raise ValueError(\"span must satisfy: span >= 1\")\n        comass = (span - 1) / 2.0\n    elif halflife is not None:\n        if halflife <= 0:\n            raise ValueError(\"halflife must satisfy: halflife > 0\")\n        decay = 1 - np.exp(np.log(0.5) / halflife)\n        comass = 1 / decay - 1\n    elif alpha is not None:\n        if alpha <= 0 or alpha > 1:\n            raise ValueError(\"alpha must satisfy: 0 < alpha <= 1\")\n        comass = (1.0 - alpha) / alpha\n    else:\n        raise ValueError(\"Must pass one of comass, span, halflife, or alpha\")\n\n    return float(comass)",
                        "signature": "_get_center_of_mass(comass, span, halflife, alpha)"
                    },
                    {
                        "code": "def _offset(window, center):\n    if not is_integer(window):\n        window = len(window)\n    offset = (window - 1) / 2.0 if center else 0\n    try:\n        return int(offset)\n    except TypeError:\n        return offset.astype(int)",
                        "signature": "_offset(window, center)"
                    },
                    {
                        "code": "def _require_min_periods(p):\n    def _check_func(minp, window):\n        if minp is None:\n            return window\n        else:\n            return max(p, minp)\n\n    return _check_func",
                        "signature": "_require_min_periods(p)"
                    },
                    {
                        "code": "def _use_window(minp, window):\n    if minp is None:\n        return window\n    else:\n        return minp",
                        "signature": "_use_window(minp, window)"
                    },
                    {
                        "code": "def _zsqrt(x):\n    with np.errstate(all=\"ignore\"):\n        result = np.sqrt(x)\n        mask = x < 0\n\n    if isinstance(x, ABCDataFrame):\n        if mask.values.any():\n            result[mask] = 0\n    else:\n        if mask.any():\n            result[mask] = 0\n\n    return result",
                        "signature": "_zsqrt(x)"
                    },
                    {
                        "code": "def _prep_binary(arg1, arg2):\n    if not isinstance(arg2, type(arg1)):\n        raise Exception(\"Input arrays must be of the same type!\")\n\n    # mask out values, this also makes a common index...\n    X = arg1 + 0 * arg2\n    Y = arg2 + 0 * arg1\n\n    return X, Y",
                        "signature": "_prep_binary(arg1, arg2)"
                    },
                    {
                        "code": "def rolling(obj, win_type=None, **kwds):\n    if not isinstance(obj, (ABCSeries, ABCDataFrame)):\n        raise TypeError(\"invalid type: %s\" % type(obj))\n\n    if win_type is not None:\n        return Window(obj, win_type=win_type, **kwds)\n\n    return Rolling(obj, **kwds)",
                        "signature": "rolling(obj, win_type=None, **kwds)"
                    },
                    {
                        "code": "def expanding(obj, **kwds):\n    if not isinstance(obj, (ABCSeries, ABCDataFrame)):\n        raise TypeError(\"invalid type: %s\" % type(obj))\n\n    return Expanding(obj, **kwds)",
                        "signature": "expanding(obj, **kwds)"
                    },
                    {
                        "code": "def ewm(obj, **kwds):\n    if not isinstance(obj, (ABCSeries, ABCDataFrame)):\n        raise TypeError(\"invalid type: %s\" % type(obj))\n\n    return EWM(obj, **kwds)",
                        "signature": "ewm(obj, **kwds)"
                    },
                    {
                        "code": "def dataframe_from_int_dict(data, frame_template):\n    result = DataFrame(data, index=frame_template.index)\n    if len(result.columns) > 0:\n        result.columns = frame_template.columns[result.columns]\n    return result",
                        "signature": "dataframe_from_int_dict(data, frame_template)"
                    },
                    {
                        "code": "def calc(x):\n    return func(\n        np.concatenate((x, additional_nans)),\n        window,\n        min_periods=self.min_periods,\n        closed=self.closed,\n    )",
                        "signature": "calc(x)"
                    },
                    {
                        "code": "def calc(x):\n    return func(\n        x, window, min_periods=self.min_periods, closed=self.closed\n    )",
                        "signature": "calc(x)"
                    },
                    {
                        "code": "def _validate_win_type(win_type, kwargs):\n    arg_map = {\n        \"kaiser\": [\"beta\"],\n        \"gaussian\": [\"std\"],\n        \"general_gaussian\": [\"power\", \"width\"],\n        \"slepian\": [\"width\"],\n        \"exponential\": [\"tau\"],\n    }\n\n    if win_type in arg_map:\n        win_args = _pop_args(win_type, arg_map[win_type], kwargs)\n        if win_type == \"exponential\":\n            # exponential window requires the first arg (center)\n            # to be set to None (necessary for symmetric window)\n            win_args.insert(0, None)\n\n        return tuple([win_type] + win_args)\n\n    return win_type",
                        "signature": "_validate_win_type(win_type, kwargs)"
                    },
                    {
                        "code": "def _pop_args(win_type, arg_names, kwargs):\n    msg = \"%s window requires %%s\" % win_type\n    all_args = []\n    for n in arg_names:\n        if n not in kwargs:\n            raise ValueError(msg % n)\n        all_args.append(kwargs.pop(n))\n    return all_args",
                        "signature": "_pop_args(win_type, arg_names, kwargs)"
                    },
                    {
                        "code": "def func(arg):\n    return cfunc(\n        arg,\n        self.com,\n        int(self.adjust),\n        int(self.ignore_na),\n        int(self.min_periods),\n    )",
                        "signature": "func(arg)"
                    }
                ],
                "file_scope_classes": [
                    {
                        "class_declaration": "class _Window:",
                        "functions": [
                            {
                                "code": "def __init__(\n    self,\n    obj,\n    window=None,\n    min_periods: Optional[int] = None,\n    center: Optional[bool] = False,\n    win_type: Optional[str] = None,\n    axis: Axis = 0,\n    on: Optional[str] = None,\n    closed: Optional[str] = None,\n    **kwargs\n):\n\n    self.__dict__.update(kwargs)\n    self.obj = obj\n    self.on = on\n    self.closed = closed\n    self.window = window\n    self.min_periods = min_periods\n    self.center = center\n    self.win_type = win_type\n    self.win_freq = None\n    self.axis = obj._get_axis_number(axis) if axis is not None else None\n    self.validate()",
                                "signature": "__init__(self, obj, window=None, min_periods: Optional[int]=None, center: Optional[bool]=False, win_type: Optional[str]=None, axis: Axis=0, on: Optional[str]=None, closed: Optional[str]=None, **kwargs)"
                            },
                            {
                                "code": "@property\ndef _constructor(self):\n    return Window",
                                "signature": "_constructor(self)"
                            },
                            {
                                "code": "@property\ndef is_datetimelike(self) -> Optional[bool]:\n    return None",
                                "signature": "is_datetimelike(self) -> Optional[bool]"
                            },
                            {
                                "code": "@property\ndef _on(self):\n    return None",
                                "signature": "_on(self)"
                            },
                            {
                                "code": "@property\ndef is_freq_type(self) -> bool:\n    return self.win_type == \"freq\"",
                                "signature": "is_freq_type(self) -> bool"
                            },
                            {
                                "code": "def validate(self):\n    if self.center is not None and not is_bool(self.center):\n        raise ValueError(\"center must be a boolean\")\n    if self.min_periods is not None and not is_integer(self.min_periods):\n        raise ValueError(\"min_periods must be an integer\")\n    if self.closed is not None and self.closed not in [\n        \"right\",\n        \"both\",\n        \"left\",\n        \"neither\",\n    ]:\n        raise ValueError(\"closed must be 'right', 'left', 'both' or 'neither'\")",
                                "signature": "validate(self)"
                            },
                            {
                                "code": "def _create_blocks(self):\n    \"\"\"\n    Split data into blocks & return conformed data.\n    \"\"\"\n\n    obj = self._selected_obj\n\n    # filter out the on from the object\n    if self.on is not None:\n        if obj.ndim == 2:\n            obj = obj.reindex(columns=obj.columns.difference([self.on]), copy=False)\n    blocks = obj._to_dict_of_blocks(copy=False).values()\n\n    return blocks, obj",
                                "signature": "_create_blocks(self)"
                            },
                            {
                                "code": "def _gotitem(self, key, ndim, subset=None):\n    \"\"\"\n    Sub-classes to define. Return a sliced object.\n\n    Parameters\n    ----------\n    key : str / list of selections\n    ndim : 1,2\n        requested ndim of result\n    subset : object, default None\n        subset to act on\n    \"\"\"\n\n    # create a new object to prevent aliasing\n    if subset is None:\n        subset = self.obj\n    self = self._shallow_copy(subset)\n    self._reset_cache()\n    if subset.ndim == 2:\n        if is_scalar(key) and key in subset or is_list_like(key):\n            self._selection = key\n    return self",
                                "signature": "_gotitem(self, key, ndim, subset=None)"
                            },
                            {
                                "code": "def __getattr__(self, attr):\n    if attr in self._internal_names_set:\n        return object.__getattribute__(self, attr)\n    if attr in self.obj:\n        return self[attr]\n\n    raise AttributeError(\n        \"%r object has no attribute %r\" % (type(self).__name__, attr)\n    )",
                                "signature": "__getattr__(self, attr)"
                            },
                            {
                                "code": "def _dir_additions(self):\n    return self.obj._dir_additions()",
                                "signature": "_dir_additions(self)"
                            },
                            {
                                "code": "def _get_window(self, other=None, **kwargs) -> int:\n    \"\"\"\n    Returns window length\n\n    Parameters\n    ----------\n    other:\n        ignored, exists for compatibility\n\n    Returns\n    -------\n    window : int\n    \"\"\"\n    return self.window",
                                "signature": "_get_window(self, other=None, **kwargs) -> int"
                            },
                            {
                                "code": "@property\ndef _window_type(self) -> str:\n    return self.__class__.__name__",
                                "signature": "_window_type(self) -> str"
                            },
                            {
                                "code": "def __repr__(self) -> str:\n    \"\"\"\n    Provide a nice str repr of our rolling object.\n    \"\"\"\n\n    attrs = (\n        \"{k}={v}\".format(k=k, v=getattr(self, k))\n        for k in self._attributes\n        if getattr(self, k, None) is not None\n    )\n    return \"{klass} [{attrs}]\".format(\n        klass=self._window_type, attrs=\",\".join(attrs)\n    )",
                                "signature": "__repr__(self) -> str"
                            },
                            {
                                "code": "def __iter__(self):\n    url = \"https://github.com/pandas-dev/pandas/issues/11704\"\n    raise NotImplementedError(\"See issue #11704 {url}\".format(url=url))",
                                "signature": "__iter__(self)"
                            },
                            {
                                "code": "def _get_index(self) -> Optional[np.ndarray]:\n    \"\"\"\n    Return integer representations as an ndarray if index is frequency.\n\n    Returns\n    -------\n    None or ndarray\n    \"\"\"\n\n    if self.is_freq_type:\n        return self._on.asi8\n    return None",
                                "signature": "_get_index(self) -> Optional[np.ndarray]"
                            },
                            {
                                "code": "def _prep_values(self, values: Optional[np.ndarray] = None) -> np.ndarray:\n    \"\"\"Convert input to numpy arrays for Cython routines\"\"\"\n    if values is None:\n        values = getattr(self._selected_obj, \"values\", self._selected_obj)\n\n    # GH #12373 : rolling functions error on float32 data\n    # make sure the data is coerced to float64\n    if is_float_dtype(values.dtype):\n        values = ensure_float64(values)\n    elif is_integer_dtype(values.dtype):\n        values = ensure_float64(values)\n    elif needs_i8_conversion(values.dtype):\n        raise NotImplementedError(\n            \"ops for {action} for this \"\n            \"dtype {dtype} are not \"\n            \"implemented\".format(action=self._window_type, dtype=values.dtype)\n        )\n    else:\n        try:\n            values = ensure_float64(values)\n        except (ValueError, TypeError):\n            raise TypeError(\"cannot handle this type -> {0}\".format(values.dtype))\n\n    # Always convert inf to nan\n    values[np.isinf(values)] = np.NaN\n\n    return values",
                                "signature": "_prep_values(self, values: Optional[np.ndarray]=None) -> np.ndarray"
                            },
                            {
                                "code": "def _wrap_result(self, result, block=None, obj=None):\n    \"\"\"\n    Wrap a single result.\n    \"\"\"\n\n    if obj is None:\n        obj = self._selected_obj\n    index = obj.index\n\n    if isinstance(result, np.ndarray):\n\n        # coerce if necessary\n        if block is not None:\n            if is_timedelta64_dtype(block.values.dtype):\n                # TODO: do we know what result.dtype is at this point?\n                #  i.e. can we just do an astype?\n                from pandas import to_timedelta\n\n                result = to_timedelta(result.ravel(), unit=\"ns\").values.reshape(\n                    result.shape\n                )\n\n        if result.ndim == 1:\n            from pandas import Series\n\n            return Series(result, index, name=obj.name)\n\n        return type(obj)(result, index=index, columns=block.columns)\n    return result",
                                "signature": "_wrap_result(self, result, block=None, obj=None)"
                            },
                            {
                                "code": "def _wrap_results(self, results, blocks, obj, exclude=None) -> FrameOrSeries:\n    \"\"\"\n    Wrap the results.\n\n    Parameters\n    ----------\n    results : list of ndarrays\n    blocks : list of blocks\n    obj : conformed data (may be resampled)\n    exclude: list of columns to exclude, default to None\n    \"\"\"\n\n    from pandas import Series, concat\n\n    final = []\n    for result, block in zip(results, blocks):\n\n        result = self._wrap_result(result, block=block, obj=obj)\n        if result.ndim == 1:\n            return result\n        final.append(result)\n\n    # if we have an 'on' column\n    # we want to put it back into the results\n    # in the same location\n    columns = self._selected_obj.columns\n    if self.on is not None and not self._on.equals(obj.index):\n\n        name = self._on.name\n        final.append(Series(self._on, index=obj.index, name=name))\n\n        if self._selection is not None:\n\n            selection = ensure_index(self._selection)\n\n            # need to reorder to include original location of\n            # the on column (if its not already there)\n            if name not in selection:\n                columns = self.obj.columns\n                indexer = columns.get_indexer(selection.tolist() + [name])\n                columns = columns.take(sorted(indexer))\n\n    # exclude nuisance columns so that they are not reindexed\n    if exclude is not None and exclude:\n        columns = [c for c in columns if c not in exclude]\n\n        if not columns:\n            raise DataError(\"No numeric types to aggregate\")\n\n    if not len(final):\n        return obj.astype(\"float64\")\n    return concat(final, axis=1).reindex(columns=columns, copy=False)",
                                "signature": "_wrap_results(self, results, blocks, obj, exclude=None) -> FrameOrSeries"
                            },
                            {
                                "code": "def _center_window(self, result, window) -> np.ndarray:\n    \"\"\"\n    Center the result in the window.\n    \"\"\"\n    if self.axis > result.ndim - 1:\n        raise ValueError(\"Requested axis is larger then no. of argument dimensions\")\n\n    offset = _offset(window, True)\n    if offset > 0:\n        if isinstance(result, (ABCSeries, ABCDataFrame)):\n            result = result.slice_shift(-offset, axis=self.axis)\n        else:\n            lead_indexer = [slice(None)] * result.ndim\n            lead_indexer[self.axis] = slice(offset, None)\n            result = np.copy(result[tuple(lead_indexer)])\n    return result",
                                "signature": "_center_window(self, result, window) -> np.ndarray"
                            },
                            {
                                "code": "def _get_roll_func(\n    self, cfunc: Callable, check_minp: Callable, index: np.ndarray, **kwargs\n) -> Callable:\n    \"\"\"\n    Wrap rolling function to check values passed.\n\n    Parameters\n    ----------\n    cfunc : callable\n        Cython function used to calculate rolling statistics\n    check_minp : callable\n        function to check minimum period parameter\n    index : ndarray\n        used for variable window\n\n    Returns\n    -------\n    func : callable\n    \"\"\"\n\n    def func(arg, window, min_periods=None, closed=None):\n        minp = check_minp(min_periods, window)\n        return cfunc(arg, window, minp, index, closed, **kwargs)\n\n    return func",
                                "signature": "_get_roll_func(self, cfunc: Callable, check_minp: Callable, index: np.ndarray, **kwargs) -> Callable"
                            },
                            {
                                "code": "def _apply(\n    self,\n    func: Union[str, Callable],\n    name: Optional[str] = None,\n    window: Optional[Union[int, str]] = None,\n    center: Optional[bool] = None,\n    check_minp: Optional[Callable] = None,\n    **kwargs\n):\n    \"\"\"\n    Rolling statistical measure using supplied function.\n\n    Designed to be used with passed-in Cython array-based functions.\n\n    Parameters\n    ----------\n    func : str/callable to apply\n    name : str, optional\n       name of this function\n    window : int/str, default to _get_window()\n        window length or offset\n    center : bool, default to self.center\n    check_minp : function, default to _use_window\n    **kwargs\n        additional arguments for rolling function and window function\n\n    Returns\n    -------\n    y : type of input\n    \"\"\"\n    if center is None:\n        center = self.center\n\n    if check_minp is None:\n        check_minp = _use_window\n\n    if window is None:\n        window = self._get_window(**kwargs)\n\n    blocks, obj = self._create_blocks()\n    block_list = list(blocks)\n    index_as_array = self._get_index()\n\n    results = []\n    exclude = []  # type: List[Scalar]\n    for i, b in enumerate(blocks):\n        try:\n            values = self._prep_values(b.values)\n\n        except (TypeError, NotImplementedError):\n            if isinstance(obj, ABCDataFrame):\n                exclude.extend(b.columns)\n                del block_list[i]\n                continue\n            else:\n                raise DataError(\"No numeric types to aggregate\")\n\n        if values.size == 0:\n            results.append(values.copy())\n            continue\n\n        # if we have a string function name, wrap it\n        if isinstance(func, str):\n            cfunc = getattr(libwindow, func, None)\n            if cfunc is None:\n                raise ValueError(\n                    \"we do not support this function \"\n                    \"in libwindow.{func}\".format(func=func)\n                )\n\n            func = self._get_roll_func(cfunc, check_minp, index_as_array, **kwargs)\n\n        # calculation function\n        if center:\n            offset = _offset(window, center)\n            additional_nans = np.array([np.NaN] * offset)\n\n            def calc(x):\n                return func(\n                    np.concatenate((x, additional_nans)),\n                    window,\n                    min_periods=self.min_periods,\n                    closed=self.closed,\n                )\n\n        else:\n\n            def calc(x):\n                return func(\n                    x, window, min_periods=self.min_periods, closed=self.closed\n                )\n\n        with np.errstate(all=\"ignore\"):\n            if values.ndim > 1:\n                result = np.apply_along_axis(calc, self.axis, values)\n            else:\n                result = calc(values)\n                result = np.asarray(result)\n\n        if center:\n            result = self._center_window(result, window)\n\n        results.append(result)\n\n    return self._wrap_results(results, block_list, obj, exclude)",
                                "signature": "_apply(self, func: Union[str, Callable], name: Optional[str]=None, window: Optional[Union[int, str]]=None, center: Optional[bool]=None, check_minp: Optional[Callable]=None, **kwargs)"
                            },
                            {
                                "code": "def aggregate(self, func, *args, **kwargs):\n    result, how = self._aggregate(func, *args, **kwargs)\n    if result is None:\n        return self.apply(func, raw=False, args=args, kwargs=kwargs)\n    return result",
                                "signature": "aggregate(self, func, *args, **kwargs)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class Window:",
                        "functions": [
                            {
                                "code": "def validate(self):\n    super().validate()\n\n    window = self.window\n    if isinstance(window, (list, tuple, np.ndarray)):\n        pass\n    elif is_integer(window):\n        if window <= 0:\n            raise ValueError(\"window must be > 0 \")\n        import_optional_dependency(\n            \"scipy\", extra=\"Scipy is required to generate window weight.\"\n        )\n        import scipy.signal as sig\n\n        if not isinstance(self.win_type, str):\n            raise ValueError(\"Invalid win_type {0}\".format(self.win_type))\n        if getattr(sig, self.win_type, None) is None:\n            raise ValueError(\"Invalid win_type {0}\".format(self.win_type))\n    else:\n        raise ValueError(\"Invalid window {0}\".format(window))",
                                "signature": "validate(self)"
                            },
                            {
                                "code": "def _get_window(self, other=None, **kwargs) -> np.ndarray:\n    \"\"\"\n    Provide validation for the window type, return the window\n    which has already been validated.\n\n    Parameters\n    ----------\n    other:\n        ignored, exists for compatibility\n\n    Returns\n    -------\n    window : ndarray\n        the window, weights\n    \"\"\"\n\n    window = self.window\n    if isinstance(window, (list, tuple, np.ndarray)):\n        return com.asarray_tuplesafe(window).astype(float)\n    elif is_integer(window):\n        import scipy.signal as sig\n\n        # the below may pop from kwargs\n        def _validate_win_type(win_type, kwargs):\n            arg_map = {\n                \"kaiser\": [\"beta\"],\n                \"gaussian\": [\"std\"],\n                \"general_gaussian\": [\"power\", \"width\"],\n                \"slepian\": [\"width\"],\n                \"exponential\": [\"tau\"],\n            }\n\n            if win_type in arg_map:\n                win_args = _pop_args(win_type, arg_map[win_type], kwargs)\n                if win_type == \"exponential\":\n                    # exponential window requires the first arg (center)\n                    # to be set to None (necessary for symmetric window)\n                    win_args.insert(0, None)\n\n                return tuple([win_type] + win_args)\n\n            return win_type\n\n        def _pop_args(win_type, arg_names, kwargs):\n            msg = \"%s window requires %%s\" % win_type\n            all_args = []\n            for n in arg_names:\n                if n not in kwargs:\n                    raise ValueError(msg % n)\n                all_args.append(kwargs.pop(n))\n            return all_args\n\n        win_type = _validate_win_type(self.win_type, kwargs)\n        # GH #15662. `False` makes symmetric window, rather than periodic.\n        return sig.get_window(win_type, window, False).astype(float)",
                                "signature": "_get_window(self, other=None, **kwargs) -> np.ndarray"
                            },
                            {
                                "code": "def _get_roll_func(\n    self, cfunc: Callable, check_minp: Callable, index: np.ndarray, **kwargs\n) -> Callable:\n    def func(arg, window, min_periods=None, closed=None):\n        minp = check_minp(min_periods, len(window))\n        return cfunc(arg, window, minp)\n\n    return func",
                                "signature": "_get_roll_func(self, cfunc: Callable, check_minp: Callable, index: np.ndarray, **kwargs) -> Callable"
                            },
                            {
                                "code": "@Substitution(\n    see_also=_agg_see_also_doc,\n    examples=_agg_examples_doc,\n    versionadded=\"\",\n    klass=\"Series/DataFrame\",\n    axis=\"\",\n)\n@Appender(_shared_docs[\"aggregate\"])\ndef aggregate(self, arg, *args, **kwargs):\n    result, how = self._aggregate(arg, *args, **kwargs)\n    if result is None:\n\n        # these must apply directly\n        result = arg(self)\n\n    return result",
                                "signature": "aggregate(self, arg, *args, **kwargs)"
                            },
                            {
                                "code": "@Substitution(name=\"window\")\n@Appender(_shared_docs[\"sum\"])\ndef sum(self, *args, **kwargs):\n    nv.validate_window_func(\"sum\", args, kwargs)\n    return self._apply(\"roll_weighted_sum\", **kwargs)",
                                "signature": "sum(self, *args, **kwargs)"
                            },
                            {
                                "code": "@Substitution(name=\"window\")\n@Appender(_shared_docs[\"mean\"])\ndef mean(self, *args, **kwargs):\n    nv.validate_window_func(\"mean\", args, kwargs)\n    return self._apply(\"roll_weighted_mean\", **kwargs)",
                                "signature": "mean(self, *args, **kwargs)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class _GroupByMixin:",
                        "functions": [
                            {
                                "code": "def __init__(self, obj, *args, **kwargs):\n    parent = kwargs.pop(\"parent\", None)  # noqa\n    groupby = kwargs.pop(\"groupby\", None)\n    if groupby is None:\n        groupby, obj = obj, obj.obj\n    self._groupby = groupby\n    self._groupby.mutated = True\n    self._groupby.grouper.mutated = True\n    super().__init__(obj, *args, **kwargs)",
                                "signature": "__init__(self, obj, *args, **kwargs)"
                            },
                            {
                                "code": "def _apply(\n    self, func, name=None, window=None, center=None, check_minp=None, **kwargs\n):\n    \"\"\"\n    Dispatch to apply; we are stripping all of the _apply kwargs and\n    performing the original function call on the grouped object.\n    \"\"\"\n\n    def f(x, name=name, *args):\n        x = self._shallow_copy(x)\n\n        if isinstance(name, str):\n            return getattr(x, name)(*args, **kwargs)\n\n        return x.apply(name, *args, **kwargs)\n\n    return self._groupby.apply(f)",
                                "signature": "_apply(self, func, name=None, window=None, center=None, check_minp=None, **kwargs)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class _Rolling:",
                        "functions": [
                            {
                                "code": "@property\ndef _constructor(self):\n    return Rolling",
                                "signature": "_constructor(self)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class _Rolling_and_Expanding:",
                        "functions": [
                            {
                                "code": "def count(self):\n\n    blocks, obj = self._create_blocks()\n    # Validate the index\n    self._get_index()\n\n    window = self._get_window()\n    window = min(window, len(obj)) if not self.center else window\n\n    results = []\n    for b in blocks:\n        result = b.notna().astype(int)\n        result = self._constructor(\n            result,\n            window=window,\n            min_periods=0,\n            center=self.center,\n            axis=self.axis,\n            closed=self.closed,\n        ).sum()\n        results.append(result)\n\n    return self._wrap_results(results, blocks, obj)",
                                "signature": "count(self)"
                            },
                            {
                                "code": "def apply(self, func, raw=None, args=(), kwargs={}):\n    from pandas import Series\n\n    kwargs.pop(\"_level\", None)\n    window = self._get_window()\n    offset = _offset(window, self.center)\n    index_as_array = self._get_index()\n\n    # TODO: default is for backward compat\n    # change to False in the future\n    if raw is None:\n        warnings.warn(\n            \"Currently, 'apply' passes the values as ndarrays to the \"\n            \"applied function. In the future, this will change to passing \"\n            \"it as Series objects. You need to specify 'raw=True' to keep \"\n            \"the current behaviour, and you can pass 'raw=False' to \"\n            \"silence this warning\",\n            FutureWarning,\n            stacklevel=3,\n        )\n        raw = True\n\n    def f(arg, window, min_periods, closed):\n        minp = _use_window(min_periods, window)\n        if not raw:\n            arg = Series(arg, index=self.obj.index)\n        return libwindow.roll_generic(\n            arg,\n            window,\n            minp,\n            index_as_array,\n            closed,\n            offset,\n            func,\n            raw,\n            args,\n            kwargs,\n        )\n\n    return self._apply(f, func, args=args, kwargs=kwargs, center=False, raw=raw)",
                                "signature": "apply(self, func, raw=None, args=(), kwargs={})"
                            },
                            {
                                "code": "def sum(self, *args, **kwargs):\n    nv.validate_window_func(\"sum\", args, kwargs)\n    return self._apply(\"roll_sum\", \"sum\", **kwargs)",
                                "signature": "sum(self, *args, **kwargs)"
                            },
                            {
                                "code": "def max(self, *args, **kwargs):\n    nv.validate_window_func(\"max\", args, kwargs)\n    return self._apply(\"roll_max\", \"max\", **kwargs)",
                                "signature": "max(self, *args, **kwargs)"
                            },
                            {
                                "code": "def min(self, *args, **kwargs):\n    nv.validate_window_func(\"min\", args, kwargs)\n    return self._apply(\"roll_min\", \"min\", **kwargs)",
                                "signature": "min(self, *args, **kwargs)"
                            },
                            {
                                "code": "def mean(self, *args, **kwargs):\n    nv.validate_window_func(\"mean\", args, kwargs)\n    return self._apply(\"roll_mean\", \"mean\", **kwargs)",
                                "signature": "mean(self, *args, **kwargs)"
                            },
                            {
                                "code": "def median(self, **kwargs):\n    return self._apply(\"roll_median_c\", \"median\", **kwargs)",
                                "signature": "median(self, **kwargs)"
                            },
                            {
                                "code": "def std(self, ddof=1, *args, **kwargs):\n    nv.validate_window_func(\"std\", args, kwargs)\n    window = self._get_window()\n    index_as_array = self._get_index()\n\n    def f(arg, *args, **kwargs):\n        minp = _require_min_periods(1)(self.min_periods, window)\n        return _zsqrt(\n            libwindow.roll_var(arg, window, minp, index_as_array, self.closed, ddof)\n        )\n\n    return self._apply(\n        f, \"std\", check_minp=_require_min_periods(1), ddof=ddof, **kwargs\n    )",
                                "signature": "std(self, ddof=1, *args, **kwargs)"
                            },
                            {
                                "code": "def var(self, ddof=1, *args, **kwargs):\n    nv.validate_window_func(\"var\", args, kwargs)\n    return self._apply(\n        \"roll_var\", \"var\", check_minp=_require_min_periods(1), ddof=ddof, **kwargs\n    )",
                                "signature": "var(self, ddof=1, *args, **kwargs)"
                            },
                            {
                                "code": "def skew(self, **kwargs):\n    return self._apply(\n        \"roll_skew\", \"skew\", check_minp=_require_min_periods(3), **kwargs\n    )",
                                "signature": "skew(self, **kwargs)"
                            },
                            {
                                "code": "def kurt(self, **kwargs):\n    return self._apply(\n        \"roll_kurt\", \"kurt\", check_minp=_require_min_periods(4), **kwargs\n    )",
                                "signature": "kurt(self, **kwargs)"
                            },
                            {
                                "code": "def quantile(self, quantile, interpolation=\"linear\", **kwargs):\n    window = self._get_window()\n    index_as_array = self._get_index()\n\n    def f(arg, *args, **kwargs):\n        minp = _use_window(self.min_periods, window)\n        if quantile == 1.0:\n            return libwindow.roll_max(\n                arg, window, minp, index_as_array, self.closed\n            )\n        elif quantile == 0.0:\n            return libwindow.roll_min(\n                arg, window, minp, index_as_array, self.closed\n            )\n        else:\n            return libwindow.roll_quantile(\n                arg,\n                window,\n                minp,\n                index_as_array,\n                self.closed,\n                quantile,\n                interpolation,\n            )\n\n    return self._apply(f, \"quantile\", quantile=quantile, **kwargs)",
                                "signature": "quantile(self, quantile, interpolation='linear', **kwargs)"
                            },
                            {
                                "code": "def cov(self, other=None, pairwise=None, ddof=1, **kwargs):\n    if other is None:\n        other = self._selected_obj\n        # only default unset\n        pairwise = True if pairwise is None else pairwise\n    other = self._shallow_copy(other)\n\n    # GH 16058: offset window\n    if self.is_freq_type:\n        window = self.win_freq\n    else:\n        window = self._get_window(other)\n\n    def _get_cov(X, Y):\n        # GH #12373 : rolling functions error on float32 data\n        # to avoid potential overflow, cast the data to float64\n        X = X.astype(\"float64\")\n        Y = Y.astype(\"float64\")\n        mean = lambda x: x.rolling(\n            window, self.min_periods, center=self.center\n        ).mean(**kwargs)\n        count = (X + Y).rolling(window=window, center=self.center).count(**kwargs)\n        bias_adj = count / (count - ddof)\n        return (mean(X * Y) - mean(X) * mean(Y)) * bias_adj\n\n    return _flex_binary_moment(\n        self._selected_obj, other._selected_obj, _get_cov, pairwise=bool(pairwise)\n    )",
                                "signature": "cov(self, other=None, pairwise=None, ddof=1, **kwargs)"
                            },
                            {
                                "code": "def corr(self, other=None, pairwise=None, **kwargs):\n    if other is None:\n        other = self._selected_obj\n        # only default unset\n        pairwise = True if pairwise is None else pairwise\n    other = self._shallow_copy(other)\n    window = self._get_window(other)\n\n    def _get_corr(a, b):\n        a = a.rolling(\n            window=window, min_periods=self.min_periods, center=self.center\n        )\n        b = b.rolling(\n            window=window, min_periods=self.min_periods, center=self.center\n        )\n\n        return a.cov(b, **kwargs) / (a.std(**kwargs) * b.std(**kwargs))\n\n    return _flex_binary_moment(\n        self._selected_obj, other._selected_obj, _get_corr, pairwise=bool(pairwise)\n    )",
                                "signature": "corr(self, other=None, pairwise=None, **kwargs)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class Rolling:",
                        "functions": [
                            {
                                "code": "@cache_readonly\ndef is_datetimelike(self):\n    return isinstance(\n        self._on, (ABCDatetimeIndex, ABCTimedeltaIndex, ABCPeriodIndex)\n    )",
                                "signature": "is_datetimelike(self)"
                            },
                            {
                                "code": "@cache_readonly\ndef _on(self):\n\n    if self.on is None:\n        return self.obj.index\n    elif isinstance(self.obj, ABCDataFrame) and self.on in self.obj.columns:\n        return Index(self.obj[self.on])\n    else:\n        raise ValueError(\n            \"invalid on specified as {0}, \"\n            \"must be a column (if DataFrame) \"\n            \"or None\".format(self.on)\n        )",
                                "signature": "_on(self)"
                            },
                            {
                                "code": "def validate(self):\n    super().validate()\n\n    # we allow rolling on a datetimelike index\n    if (self.obj.empty or self.is_datetimelike) and isinstance(\n        self.window, (str, ABCDateOffset, timedelta)\n    ):\n\n        self._validate_monotonic()\n        freq = self._validate_freq()\n\n        # we don't allow center\n        if self.center:\n            raise NotImplementedError(\n                \"center is not implemented \"\n                \"for datetimelike and offset \"\n                \"based windows\"\n            )\n\n        # this will raise ValueError on non-fixed freqs\n        self.win_freq = self.window\n        self.window = freq.nanos\n        self.win_type = \"freq\"\n\n        # min_periods must be an integer\n        if self.min_periods is None:\n            self.min_periods = 1\n\n    elif not is_integer(self.window):\n        raise ValueError(\"window must be an integer\")\n    elif self.window < 0:\n        raise ValueError(\"window must be non-negative\")\n\n    if not self.is_datetimelike and self.closed is not None:\n        raise ValueError(\n            \"closed only implemented for datetimelike and offset based windows\"\n        )",
                                "signature": "validate(self)"
                            },
                            {
                                "code": "def _validate_monotonic(self):\n    \"\"\"\n    Validate on is_monotonic.\n    \"\"\"\n    if not self._on.is_monotonic:\n        formatted = self.on or \"index\"\n        raise ValueError(\"{0} must be monotonic\".format(formatted))",
                                "signature": "_validate_monotonic(self)"
                            },
                            {
                                "code": "def _validate_freq(self):\n    \"\"\"\n    Validate & return window frequency.\n    \"\"\"\n    from pandas.tseries.frequencies import to_offset\n\n    try:\n        return to_offset(self.window)\n    except (TypeError, ValueError):\n        raise ValueError(\n            \"passed window {0} is not \"\n            \"compatible with a datetimelike \"\n            \"index\".format(self.window)\n        )",
                                "signature": "_validate_freq(self)"
                            },
                            {
                                "code": "@Substitution(\n    see_also=_agg_see_also_doc,\n    examples=_agg_examples_doc,\n    versionadded=\"\",\n    klass=\"Series/Dataframe\",\n    axis=\"\",\n)\n@Appender(_shared_docs[\"aggregate\"])\ndef aggregate(self, arg, *args, **kwargs):\n    return super().aggregate(arg, *args, **kwargs)",
                                "signature": "aggregate(self, arg, *args, **kwargs)"
                            },
                            {
                                "code": "@Substitution(name=\"rolling\")\n@Appender(_shared_docs[\"count\"])\ndef count(self):\n\n    # different impl for freq counting\n    if self.is_freq_type:\n        return self._apply(\"roll_count\", \"count\")\n\n    return super().count()",
                                "signature": "count(self)"
                            },
                            {
                                "code": "@Substitution(name=\"rolling\")\n@Appender(_shared_docs[\"apply\"])\ndef apply(self, func, raw=None, args=(), kwargs={}):\n    return super().apply(func, raw=raw, args=args, kwargs=kwargs)",
                                "signature": "apply(self, func, raw=None, args=(), kwargs={})"
                            },
                            {
                                "code": "@Substitution(name=\"rolling\")\n@Appender(_shared_docs[\"sum\"])\ndef sum(self, *args, **kwargs):\n    nv.validate_rolling_func(\"sum\", args, kwargs)\n    return super().sum(*args, **kwargs)",
                                "signature": "sum(self, *args, **kwargs)"
                            },
                            {
                                "code": "@Substitution(name=\"rolling\")\n@Appender(_doc_template)\n@Appender(_shared_docs[\"max\"])\ndef max(self, *args, **kwargs):\n    nv.validate_rolling_func(\"max\", args, kwargs)\n    return super().max(*args, **kwargs)",
                                "signature": "max(self, *args, **kwargs)"
                            },
                            {
                                "code": "@Substitution(name=\"rolling\")\n@Appender(_shared_docs[\"min\"])\ndef min(self, *args, **kwargs):\n    nv.validate_rolling_func(\"min\", args, kwargs)\n    return super().min(*args, **kwargs)",
                                "signature": "min(self, *args, **kwargs)"
                            },
                            {
                                "code": "@Substitution(name=\"rolling\")\n@Appender(_shared_docs[\"mean\"])\ndef mean(self, *args, **kwargs):\n    nv.validate_rolling_func(\"mean\", args, kwargs)\n    return super().mean(*args, **kwargs)",
                                "signature": "mean(self, *args, **kwargs)"
                            },
                            {
                                "code": "@Substitution(name=\"rolling\")\n@Appender(_shared_docs[\"median\"])\ndef median(self, **kwargs):\n    return super().median(**kwargs)",
                                "signature": "median(self, **kwargs)"
                            },
                            {
                                "code": "@Substitution(name=\"rolling\")\n@Appender(_shared_docs[\"std\"])\ndef std(self, ddof=1, *args, **kwargs):\n    nv.validate_rolling_func(\"std\", args, kwargs)\n    return super().std(ddof=ddof, **kwargs)",
                                "signature": "std(self, ddof=1, *args, **kwargs)"
                            },
                            {
                                "code": "@Substitution(name=\"rolling\")\n@Appender(_shared_docs[\"var\"])\ndef var(self, ddof=1, *args, **kwargs):\n    nv.validate_rolling_func(\"var\", args, kwargs)\n    return super().var(ddof=ddof, **kwargs)",
                                "signature": "var(self, ddof=1, *args, **kwargs)"
                            },
                            {
                                "code": "@Substitution(name=\"rolling\")\n@Appender(_doc_template)\n@Appender(_shared_docs[\"skew\"])\ndef skew(self, **kwargs):\n    return super().skew(**kwargs)",
                                "signature": "skew(self, **kwargs)"
                            },
                            {
                                "code": "@Appender(_agg_doc)\n@Substitution(name=\"rolling\")\n@Appender(_shared_docs[\"kurt\"])\ndef kurt(self, **kwargs):\n    return super().kurt(**kwargs)",
                                "signature": "kurt(self, **kwargs)"
                            },
                            {
                                "code": "@Substitution(name=\"rolling\")\n@Appender(_shared_docs[\"quantile\"])\ndef quantile(self, quantile, interpolation=\"linear\", **kwargs):\n    return super().quantile(\n        quantile=quantile, interpolation=interpolation, **kwargs\n    )",
                                "signature": "quantile(self, quantile, interpolation='linear', **kwargs)"
                            },
                            {
                                "code": "@Substitution(name=\"rolling\")\n@Appender(_doc_template)\n@Appender(_shared_docs[\"cov\"])\ndef cov(self, other=None, pairwise=None, ddof=1, **kwargs):\n    return super().cov(other=other, pairwise=pairwise, ddof=ddof, **kwargs)",
                                "signature": "cov(self, other=None, pairwise=None, ddof=1, **kwargs)"
                            },
                            {
                                "code": "@Substitution(name=\"rolling\")\n@Appender(_shared_docs[\"corr\"])\ndef corr(self, other=None, pairwise=None, **kwargs):\n    return super().corr(other=other, pairwise=pairwise, **kwargs)",
                                "signature": "corr(self, other=None, pairwise=None, **kwargs)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class RollingGroupby:",
                        "functions": [
                            {
                                "code": "@property\ndef _constructor(self):\n    return Rolling",
                                "signature": "_constructor(self)"
                            },
                            {
                                "code": "def _gotitem(self, key, ndim, subset=None):\n\n    # we are setting the index on the actual object\n    # here so our index is carried thru to the selected obj\n    # when we do the splitting for the groupby\n    if self.on is not None:\n        self._groupby.obj = self._groupby.obj.set_index(self._on)\n        self.on = None\n    return super()._gotitem(key, ndim, subset=subset)",
                                "signature": "_gotitem(self, key, ndim, subset=None)"
                            },
                            {
                                "code": "def _validate_monotonic(self):\n    \"\"\"\n    Validate that on is monotonic;\n    we don't care for groupby.rolling\n    because we have already validated at a higher\n    level.\n    \"\"\"\n    pass",
                                "signature": "_validate_monotonic(self)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class Expanding:",
                        "functions": [
                            {
                                "code": "def __init__(self, obj, min_periods=1, center=False, axis=0, **kwargs):\n    super().__init__(obj=obj, min_periods=min_periods, center=center, axis=axis)",
                                "signature": "__init__(self, obj, min_periods=1, center=False, axis=0, **kwargs)"
                            },
                            {
                                "code": "@property\ndef _constructor(self):\n    return Expanding",
                                "signature": "_constructor(self)"
                            },
                            {
                                "code": "def _get_window(self, other=None, **kwargs):\n    \"\"\"\n    Get the window length over which to perform some operation.\n\n    Parameters\n    ----------\n    other : object, default None\n        The other object that is involved in the operation.\n        Such an object is involved for operations like covariance.\n\n    Returns\n    -------\n    window : int\n        The window length.\n    \"\"\"\n    axis = self.obj._get_axis(self.axis)\n    length = len(axis) + (other is not None) * len(axis)\n\n    other = self.min_periods or -1\n    return max(length, other)",
                                "signature": "_get_window(self, other=None, **kwargs)"
                            },
                            {
                                "code": "@Substitution(\n    see_also=_agg_see_also_doc,\n    examples=_agg_examples_doc,\n    versionadded=\"\",\n    klass=\"Series/Dataframe\",\n    axis=\"\",\n)\n@Appender(_shared_docs[\"aggregate\"])\ndef aggregate(self, arg, *args, **kwargs):\n    return super().aggregate(arg, *args, **kwargs)",
                                "signature": "aggregate(self, arg, *args, **kwargs)"
                            },
                            {
                                "code": "@Substitution(name=\"expanding\")\n@Appender(_shared_docs[\"count\"])\ndef count(self, **kwargs):\n    return super().count(**kwargs)",
                                "signature": "count(self, **kwargs)"
                            },
                            {
                                "code": "@Substitution(name=\"expanding\")\n@Appender(_shared_docs[\"apply\"])\ndef apply(self, func, raw=None, args=(), kwargs={}):\n    return super().apply(func, raw=raw, args=args, kwargs=kwargs)",
                                "signature": "apply(self, func, raw=None, args=(), kwargs={})"
                            },
                            {
                                "code": "@Substitution(name=\"expanding\")\n@Appender(_shared_docs[\"sum\"])\ndef sum(self, *args, **kwargs):\n    nv.validate_expanding_func(\"sum\", args, kwargs)\n    return super().sum(*args, **kwargs)",
                                "signature": "sum(self, *args, **kwargs)"
                            },
                            {
                                "code": "@Substitution(name=\"expanding\")\n@Appender(_doc_template)\n@Appender(_shared_docs[\"max\"])\ndef max(self, *args, **kwargs):\n    nv.validate_expanding_func(\"max\", args, kwargs)\n    return super().max(*args, **kwargs)",
                                "signature": "max(self, *args, **kwargs)"
                            },
                            {
                                "code": "@Substitution(name=\"expanding\")\n@Appender(_shared_docs[\"min\"])\ndef min(self, *args, **kwargs):\n    nv.validate_expanding_func(\"min\", args, kwargs)\n    return super().min(*args, **kwargs)",
                                "signature": "min(self, *args, **kwargs)"
                            },
                            {
                                "code": "@Substitution(name=\"expanding\")\n@Appender(_shared_docs[\"mean\"])\ndef mean(self, *args, **kwargs):\n    nv.validate_expanding_func(\"mean\", args, kwargs)\n    return super().mean(*args, **kwargs)",
                                "signature": "mean(self, *args, **kwargs)"
                            },
                            {
                                "code": "@Substitution(name=\"expanding\")\n@Appender(_shared_docs[\"median\"])\ndef median(self, **kwargs):\n    return super().median(**kwargs)",
                                "signature": "median(self, **kwargs)"
                            },
                            {
                                "code": "@Substitution(name=\"expanding\")\n@Appender(_shared_docs[\"std\"])\ndef std(self, ddof=1, *args, **kwargs):\n    nv.validate_expanding_func(\"std\", args, kwargs)\n    return super().std(ddof=ddof, **kwargs)",
                                "signature": "std(self, ddof=1, *args, **kwargs)"
                            },
                            {
                                "code": "@Substitution(name=\"expanding\")\n@Appender(_shared_docs[\"var\"])\ndef var(self, ddof=1, *args, **kwargs):\n    nv.validate_expanding_func(\"var\", args, kwargs)\n    return super().var(ddof=ddof, **kwargs)",
                                "signature": "var(self, ddof=1, *args, **kwargs)"
                            },
                            {
                                "code": "@Substitution(name=\"expanding\")\n@Appender(_doc_template)\n@Appender(_shared_docs[\"skew\"])\ndef skew(self, **kwargs):\n    return super().skew(**kwargs)",
                                "signature": "skew(self, **kwargs)"
                            },
                            {
                                "code": "@Appender(_agg_doc)\n@Substitution(name=\"expanding\")\n@Appender(_shared_docs[\"kurt\"])\ndef kurt(self, **kwargs):\n    return super().kurt(**kwargs)",
                                "signature": "kurt(self, **kwargs)"
                            },
                            {
                                "code": "@Substitution(name=\"expanding\")\n@Appender(_shared_docs[\"quantile\"])\ndef quantile(self, quantile, interpolation=\"linear\", **kwargs):\n    return super().quantile(\n        quantile=quantile, interpolation=interpolation, **kwargs\n    )",
                                "signature": "quantile(self, quantile, interpolation='linear', **kwargs)"
                            },
                            {
                                "code": "@Substitution(name=\"expanding\")\n@Appender(_doc_template)\n@Appender(_shared_docs[\"cov\"])\ndef cov(self, other=None, pairwise=None, ddof=1, **kwargs):\n    return super().cov(other=other, pairwise=pairwise, ddof=ddof, **kwargs)",
                                "signature": "cov(self, other=None, pairwise=None, ddof=1, **kwargs)"
                            },
                            {
                                "code": "@Substitution(name=\"expanding\")\n@Appender(_shared_docs[\"corr\"])\ndef corr(self, other=None, pairwise=None, **kwargs):\n    return super().corr(other=other, pairwise=pairwise, **kwargs)",
                                "signature": "corr(self, other=None, pairwise=None, **kwargs)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class ExpandingGroupby:",
                        "functions": [
                            {
                                "code": "@property\ndef _constructor(self):\n    return Expanding",
                                "signature": "_constructor(self)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class EWM:",
                        "functions": [
                            {
                                "code": "def __init__(\n    self,\n    obj,\n    com=None,\n    span=None,\n    halflife=None,\n    alpha=None,\n    min_periods=0,\n    adjust=True,\n    ignore_na=False,\n    axis=0,\n):\n    self.obj = obj\n    self.com = _get_center_of_mass(com, span, halflife, alpha)\n    self.min_periods = min_periods\n    self.adjust = adjust\n    self.ignore_na = ignore_na\n    self.axis = axis\n    self.on = None",
                                "signature": "__init__(self, obj, com=None, span=None, halflife=None, alpha=None, min_periods=0, adjust=True, ignore_na=False, axis=0)"
                            },
                            {
                                "code": "@property\ndef _constructor(self):\n    return EWM",
                                "signature": "_constructor(self)"
                            },
                            {
                                "code": "@Substitution(\n    see_also=_agg_see_also_doc,\n    examples=_agg_examples_doc,\n    versionadded=\"\",\n    klass=\"Series/Dataframe\",\n    axis=\"\",\n)\n@Appender(_shared_docs[\"aggregate\"])\ndef aggregate(self, arg, *args, **kwargs):\n    return super().aggregate(arg, *args, **kwargs)",
                                "signature": "aggregate(self, arg, *args, **kwargs)"
                            },
                            {
                                "code": "def _apply(self, func, **kwargs):\n    \"\"\"\n    Rolling statistical measure using supplied function. Designed to be\n    used with passed-in Cython array-based functions.\n\n    Parameters\n    ----------\n    func : str/callable to apply\n\n    Returns\n    -------\n    y : same type as input argument\n    \"\"\"\n    blocks, obj = self._create_blocks()\n    block_list = list(blocks)\n\n    results = []\n    exclude = []\n    for i, b in enumerate(blocks):\n        try:\n            values = self._prep_values(b.values)\n\n        except (TypeError, NotImplementedError):\n            if isinstance(obj, ABCDataFrame):\n                exclude.extend(b.columns)\n                del block_list[i]\n                continue\n            else:\n                raise DataError(\"No numeric types to aggregate\")\n\n        if values.size == 0:\n            results.append(values.copy())\n            continue\n\n        # if we have a string function name, wrap it\n        if isinstance(func, str):\n            cfunc = getattr(libwindow, func, None)\n            if cfunc is None:\n                raise ValueError(\n                    \"we do not support this function \"\n                    \"in libwindow.{func}\".format(func=func)\n                )\n\n            def func(arg):\n                return cfunc(\n                    arg,\n                    self.com,\n                    int(self.adjust),\n                    int(self.ignore_na),\n                    int(self.min_periods),\n                )\n\n        results.append(np.apply_along_axis(func, self.axis, values))\n\n    return self._wrap_results(results, block_list, obj, exclude)",
                                "signature": "_apply(self, func, **kwargs)"
                            },
                            {
                                "code": "@Substitution(name=\"ewm\")\n@Appender(_doc_template)\ndef mean(self, *args, **kwargs):\n    \"\"\"\n    Exponential weighted moving average.\n\n    Parameters\n    ----------\n    *args, **kwargs\n        Arguments and keyword arguments to be passed into func.\n    \"\"\"\n    nv.validate_window_func(\"mean\", args, kwargs)\n    return self._apply(\"ewma\", **kwargs)",
                                "signature": "mean(self, *args, **kwargs)"
                            },
                            {
                                "code": "@Substitution(name=\"ewm\")\n@Appender(_doc_template)\n@Appender(_bias_template)\ndef std(self, bias=False, *args, **kwargs):\n    \"\"\"\n    Exponential weighted moving stddev.\n    \"\"\"\n    nv.validate_window_func(\"std\", args, kwargs)\n    return _zsqrt(self.var(bias=bias, **kwargs))",
                                "signature": "std(self, bias=False, *args, **kwargs)"
                            },
                            {
                                "code": "@Substitution(name=\"ewm\")\n@Appender(_doc_template)\n@Appender(_bias_template)\ndef var(self, bias=False, *args, **kwargs):\n    \"\"\"\n    Exponential weighted moving variance.\n    \"\"\"\n    nv.validate_window_func(\"var\", args, kwargs)\n\n    def f(arg):\n        return libwindow.ewmcov(\n            arg,\n            arg,\n            self.com,\n            int(self.adjust),\n            int(self.ignore_na),\n            int(self.min_periods),\n            int(bias),\n        )\n\n    return self._apply(f, **kwargs)",
                                "signature": "var(self, bias=False, *args, **kwargs)"
                            },
                            {
                                "code": "@Substitution(name=\"ewm\")\n@Appender(_doc_template)\n@Appender(_pairwise_template)\ndef cov(self, other=None, pairwise=None, bias=False, **kwargs):\n    \"\"\"\n    Exponential weighted sample covariance.\n    \"\"\"\n    if other is None:\n        other = self._selected_obj\n        # only default unset\n        pairwise = True if pairwise is None else pairwise\n    other = self._shallow_copy(other)\n\n    def _get_cov(X, Y):\n        X = self._shallow_copy(X)\n        Y = self._shallow_copy(Y)\n        cov = libwindow.ewmcov(\n            X._prep_values(),\n            Y._prep_values(),\n            self.com,\n            int(self.adjust),\n            int(self.ignore_na),\n            int(self.min_periods),\n            int(bias),\n        )\n        return X._wrap_result(cov)\n\n    return _flex_binary_moment(\n        self._selected_obj, other._selected_obj, _get_cov, pairwise=bool(pairwise)\n    )",
                                "signature": "cov(self, other=None, pairwise=None, bias=False, **kwargs)"
                            },
                            {
                                "code": "@Substitution(name=\"ewm\")\n@Appender(_doc_template)\n@Appender(_pairwise_template)\ndef corr(self, other=None, pairwise=None, **kwargs):\n    \"\"\"\n    Exponential weighted sample correlation.\n    \"\"\"\n    if other is None:\n        other = self._selected_obj\n        # only default unset\n        pairwise = True if pairwise is None else pairwise\n    other = self._shallow_copy(other)\n\n    def _get_corr(X, Y):\n        X = self._shallow_copy(X)\n        Y = self._shallow_copy(Y)\n\n        def _cov(x, y):\n            return libwindow.ewmcov(\n                x,\n                y,\n                self.com,\n                int(self.adjust),\n                int(self.ignore_na),\n                int(self.min_periods),\n                1,\n            )\n\n        x_values = X._prep_values()\n        y_values = Y._prep_values()\n        with np.errstate(all=\"ignore\"):\n            cov = _cov(x_values, y_values)\n            x_var = _cov(x_values, x_values)\n            y_var = _cov(y_values, y_values)\n            corr = cov / _zsqrt(x_var * y_var)\n        return X._wrap_result(corr)\n\n    return _flex_binary_moment(\n        self._selected_obj, other._selected_obj, _get_corr, pairwise=bool(pairwise)\n    )",
                                "signature": "corr(self, other=None, pairwise=None, **kwargs)"
                            }
                        ]
                    }
                ]
            },
            "variables_in_file": {
                "_shared_docs": [
                    1415,
                    1927,
                    905,
                    1932,
                    1551,
                    1040,
                    1296,
                    1940,
                    918,
                    2199,
                    1945,
                    924,
                    1181,
                    2204,
                    2212,
                    1830,
                    2217,
                    45,
                    1837,
                    1847,
                    571,
                    1852,
                    2107,
                    2114,
                    1859,
                    1221,
                    2119,
                    1865,
                    2124,
                    1871,
                    976,
                    1362,
                    2131,
                    1877,
                    2137,
                    1498,
                    1882,
                    2143,
                    1888,
                    1121,
                    1378,
                    2149,
                    1895,
                    2154,
                    494,
                    1136,
                    2160,
                    2167,
                    2425
                ],
                "dict": [
                    2664,
                    45
                ],
                "_doc_template": [
                    1858,
                    2211,
                    1894,
                    2502,
                    2536,
                    2567,
                    46,
                    2130,
                    1939,
                    2514,
                    2166,
                    2488
                ],
                "PandasObject": [
                    59
                ],
                "SelectionMixin": [
                    59
                ],
                "_attributes": [
                    2026,
                    60,
                    2350
                ],
                "exclusions": [
                    69
                ],
                "set": [
                    69
                ],
                "Optional": [
                    384,
                    385,
                    226,
                    386,
                    101,
                    75,
                    76,
                    77,
                    79,
                    80,
                    213,
                    383
                ],
                "int": [
                    384,
                    1027,
                    2588,
                    2589,
                    2590,
                    2478,
                    2479,
                    176,
                    2480,
                    75,
                    2775,
                    2777,
                    2527,
                    2528,
                    2529,
                    2530,
                    2555,
                    2556,
                    2557,
                    2558
                ],
                "bool": [
                    385,
                    2563,
                    101,
                    1548,
                    109,
                    76,
                    2604,
                    1681
                ],
                "str": [
                    192,
                    384,
                    960,
                    195,
                    2466,
                    77,
                    79,
                    80,
                    783,
                    1711,
                    442,
                    382,
                    383
                ],
                "Axis": [
                    78
                ],
                "self.__dict__.update": [
                    84
                ],
                "self.__dict__": [
                    84
                ],
                "self": [
                    2050,
                    2563,
                    1028,
                    1541,
                    2053,
                    1543,
                    1032,
                    1033,
                    1034,
                    1548,
                    1038,
                    2574,
                    2577,
                    1530,
                    2580,
                    2581,
                    2587,
                    2588,
                    2589,
                    2590,
                    2604,
                    2554,
                    2555,
                    1080,
                    1081,
                    1082,
                    2556,
                    2557,
                    1101,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    1115,
                    1119,
                    110,
                    1134,
                    113,
                    115,
                    117,
                    1664,
                    130,
                    1667,
                    1668,
                    133,
                    135,
                    1672,
                    1675,
                    1681,
                    1175,
                    1689,
                    155,
                    156,
                    157,
                    1179,
                    1695,
                    160,
                    161,
                    1696,
                    1697,
                    164,
                    165,
                    166,
                    167,
                    1698,
                    1703,
                    170,
                    174,
                    1710,
                    1711,
                    1714,
                    1715,
                    1718,
                    189,
                    1726,
                    1727,
                    1728,
                    193,
                    1219,
                    1731,
                    1732,
                    1734,
                    1736,
                    201,
                    202,
                    203,
                    1739,
                    206,
                    1748,
                    1749,
                    222,
                    223,
                    1759,
                    1764,
                    229,
                    241,
                    1283,
                    260,
                    772,
                    1284,
                    1287,
                    1289,
                    1292,
                    783,
                    784,
                    785,
                    786,
                    806,
                    301,
                    1841,
                    1842,
                    309,
                    310,
                    312,
                    313,
                    315,
                    2364,
                    317,
                    2365,
                    2366,
                    2367,
                    2368,
                    322,
                    2369,
                    2370,
                    842,
                    1358,
                    341,
                    347,
                    350,
                    1374,
                    1411,
                    907,
                    2444,
                    911,
                    2451,
                    921,
                    411,
                    927,
                    417,
                    419,
                    421,
                    427,
                    940,
                    941,
                    942,
                    1964,
                    1965,
                    1966,
                    2477,
                    2478,
                    2479,
                    2480,
                    2483,
                    2485,
                    958,
                    1472,
                    1473,
                    450,
                    2499,
                    1476,
                    965,
                    1479,
                    1483,
                    461,
                    462,
                    2509,
                    1491,
                    469,
                    1496,
                    474,
                    2526,
                    2527,
                    480,
                    2528,
                    2529,
                    484,
                    2533,
                    487,
                    489,
                    2543,
                    2546,
                    1524,
                    2549,
                    2550,
                    1527,
                    1018,
                    1531,
                    1020,
                    1533,
                    1022,
                    1023
                ],
                "kwargs": [
                    1542,
                    1543,
                    1079,
                    2109,
                    2116,
                    2121,
                    2126,
                    2127,
                    84,
                    2133,
                    2134,
                    1112,
                    1115,
                    2139,
                    2140,
                    1118,
                    1119,
                    2145,
                    2146,
                    2151,
                    2156,
                    1133,
                    1134,
                    2157,
                    2162,
                    2163,
                    2169,
                    1678,
                    1174,
                    1175,
                    2201,
                    1178,
                    1179,
                    2207,
                    2214,
                    2219,
                    1219,
                    1282,
                    1293,
                    1832,
                    823,
                    1849,
                    1854,
                    1855,
                    837,
                    1861,
                    839,
                    1862,
                    842,
                    1867,
                    1868,
                    1357,
                    1359,
                    1873,
                    1874,
                    1879,
                    1884,
                    1885,
                    1375,
                    1890,
                    1891,
                    1897,
                    376,
                    2427,
                    1412,
                    1929,
                    907,
                    1935,
                    1942,
                    920,
                    921,
                    1947,
                    926,
                    927,
                    417,
                    936,
                    937,
                    943,
                    961,
                    450,
                    963,
                    2498,
                    2499,
                    2508,
                    2509,
                    1496,
                    2520,
                    2533,
                    487,
                    489
                ],
                "self.obj": [
                    1696,
                    1697,
                    322,
                    1698,
                    2050,
                    166,
                    1101,
                    174,
                    1710,
                    85,
                    155,
                    2364
                ],
                "obj": [
                    130,
                    259,
                    260,
                    261,
                    134,
                    135,
                    136,
                    138,
                    2827,
                    2444,
                    2828,
                    1038,
                    2831,
                    2833,
                    2454,
                    279,
                    2840,
                    281,
                    2841,
                    2843,
                    2850,
                    419,
                    2851,
                    2853,
                    939,
                    301,
                    430,
                    943,
                    2485,
                    310,
                    313,
                    2364,
                    334,
                    85,
                    93,
                    484,
                    2029,
                    1018,
                    1023
                ],
                "self.on": [
                    1697,
                    1698,
                    2370,
                    133,
                    135,
                    1703,
                    1964,
                    1966,
                    1749,
                    310,
                    86,
                    1695
                ],
                "on": [
                    86
                ],
                "self.closed": [
                    1479,
                    1289,
                    1034,
                    1483,
                    1739,
                    462,
                    1491,
                    469,
                    117,
                    87
                ],
                "closed": [
                    376,
                    1107,
                    87
                ],
                "self.window": [
                    772,
                    1764,
                    806,
                    1734,
                    1736,
                    1711,
                    1759,
                    88,
                    189,
                    1726,
                    1727
                ],
                "window": [
                    1283,
                    772,
                    773,
                    1030,
                    775,
                    776,
                    1287,
                    1289,
                    1541,
                    1543,
                    1668,
                    1672,
                    1675,
                    788,
                    416,
                    417,
                    806,
                    807,
                    808,
                    809,
                    1080,
                    1081,
                    1472,
                    1476,
                    454,
                    1479,
                    1099,
                    460,
                    844,
                    1483,
                    1104,
                    1488,
                    850,
                    851,
                    2771,
                    469,
                    2772,
                    2773,
                    344,
                    88,
                    2783,
                    480,
                    2792,
                    375,
                    376,
                    1531,
                    1533,
                    1022,
                    1023
                ],
                "self.min_periods": [
                    2529,
                    1731,
                    1476,
                    1541,
                    1732,
                    1287,
                    1672,
                    2053,
                    2590,
                    1675,
                    461,
                    2480,
                    115,
                    469,
                    89,
                    2557,
                    2366
                ],
                "min_periods": [
                    1099,
                    2029,
                    850,
                    375,
                    89,
                    2366
                ],
                "self.center": [
                    1541,
                    1543,
                    1032,
                    1672,
                    1675,
                    113,
                    1718,
                    1081,
                    90,
                    411,
                    1023
                ],
                "center": [
                    453,
                    454,
                    2029,
                    410,
                    2773,
                    90,
                    411,
                    479
                ],
                "self.win_type": [
                    1728,
                    842,
                    110,
                    783,
                    784,
                    785,
                    786,
                    91
                ],
                "win_type": [
                    834,
                    842,
                    844,
                    2830,
                    2831,
                    822,
                    823,
                    824,
                    91,
                    829,
                    831
                ],
                "self.win_freq": [
                    1531,
                    92,
                    1726
                ],
                "self.axis": [
                    2369,
                    2050,
                    1033,
                    2483,
                    341,
                    474,
                    347,
                    93,
                    350
                ],
                "axis": [
                    2369,
                    2050,
                    2051,
                    2029,
                    93
                ],
                "obj._get_axis_number": [
                    93
                ],
                "self.validate": [
                    94
                ],
                "Window": [
                    98,
                    2836,
                    2831
                ],
                "property": [
                    96,
                    1955,
                    100,
                    2372,
                    104,
                    969,
                    108,
                    2031,
                    2227,
                    191
                ],
                "is_bool": [
                    113
                ],
                "ValueError": [
                    777,
                    784,
                    786,
                    788,
                    1700,
                    2469,
                    2730,
                    2745,
                    445,
                    2750,
                    2753,
                    2757,
                    838,
                    1735,
                    1737,
                    2762,
                    1740,
                    2765,
                    342,
                    1750,
                    2647,
                    2649,
                    1760,
                    1761,
                    114,
                    116,
                    246,
                    123
                ],
                "is_integer": [
                    1734,
                    775,
                    809,
                    115,
                    2771
                ],
                "self._selected_obj": [
                    1664,
                    130,
                    2563,
                    260,
                    229,
                    1548,
                    2604,
                    2574,
                    2543,
                    1681,
                    1524,
                    309
                ],
                "obj.ndim": [
                    134
                ],
                "obj.reindex": [
                    135
                ],
                "obj.columns.difference": [
                    135
                ],
                "obj.columns": [
                    135
                ],
                "blocks": [
                    1026,
                    419,
                    420,
                    136,
                    425,
                    138,
                    299,
                    2444,
                    2445,
                    1038,
                    2449,
                    1018
                ],
                "values": [
                    136,
                    272,
                    2451,
                    2461,
                    2462,
                    427,
                    2483,
                    437,
                    438,
                    473,
                    474,
                    476,
                    228,
                    229,
                    233,
                    234,
                    235,
                    236,
                    237,
                    241,
                    245,
                    247,
                    250,
                    252
                ],
                "obj._to_dict_of_blocks": [
                    136
                ],
                "subset": [
                    1967,
                    154,
                    155,
                    156,
                    158,
                    159
                ],
                "self._shallow_copy": [
                    1667,
                    2577,
                    2546,
                    2580,
                    2549,
                    2550,
                    1527,
                    2581,
                    156,
                    958
                ],
                "self._reset_cache": [
                    157
                ],
                "subset.ndim": [
                    158
                ],
                "is_scalar": [
                    159
                ],
                "key": [
                    160,
                    1967,
                    159
                ],
                "is_list_like": [
                    159
                ],
                "self._selection": [
                    160,
                    315,
                    317
                ],
                "attr": [
                    164,
                    165,
                    166,
                    167,
                    170
                ],
                "self._internal_names_set": [
                    164
                ],
                "object.__getattribute__": [
                    165
                ],
                "object": [
                    165
                ],
                "AttributeError": [
                    169
                ],
                "__name__": [
                    170
                ],
                "type": [
                    2851,
                    170,
                    2828,
                    2841,
                    281,
                    2813
                ],
                "self.obj._dir_additions": [
                    174
                ],
                "self.__class__.__name__": [
                    193
                ],
                "self.__class__": [
                    193
                ],
                "attrs": [
                    200,
                    206
                ],
                "format": [
                    1762,
                    1701,
                    2470,
                    201,
                    205,
                    239,
                    784,
                    786,
                    211,
                    788,
                    1750,
                    247,
                    446
                ],
                "k": [
                    201,
                    202,
                    203
                ],
                "getattr": [
                    961,
                    2467,
                    229,
                    201,
                    203,
                    785,
                    443
                ],
                "self._attributes": [
                    202
                ],
                "self._window_type": [
                    241,
                    206
                ],
                "join": [
                    206
                ],
                "url": [
                    210,
                    211
                ],
                "NotImplementedError": [
                    429,
                    238,
                    211,
                    2453,
                    1719
                ],
                "self.is_freq_type": [
                    1841,
                    1530,
                    222
                ],
                "self._on.asi8": [
                    223
                ],
                "self._on": [
                    1965,
                    1689,
                    1748,
                    310,
                    312,
                    313,
                    223
                ],
                "np.ndarray": [
                    226,
                    355,
                    773,
                    2615,
                    263,
                    807,
                    847,
                    337,
                    213,
                    790,
                    2614,
                    2622,
                    2623
                ],
                "np": [
                    773,
                    263,
                    790,
                    2596,
                    807,
                    2483,
                    2614,
                    2615,
                    2622,
                    2623,
                    2758,
                    455,
                    459,
                    847,
                    337,
                    213,
                    472,
                    474,
                    477,
                    351,
                    226,
                    355,
                    2798,
                    2799,
                    250
                ],
                "is_float_dtype": [
                    233
                ],
                "values.dtype": [
                    233,
                    235,
                    237,
                    241,
                    247
                ],
                "ensure_float64": [
                    234,
                    236,
                    245
                ],
                "is_integer_dtype": [
                    235
                ],
                "needs_i8_conversion": [
                    237
                ],
                "TypeError": [
                    1760,
                    2851,
                    2828,
                    429,
                    2453,
                    246,
                    247,
                    2776,
                    2617,
                    2841
                ],
                "np.isinf": [
                    250
                ],
                "np.NaN": [
                    250,
                    455
                ],
                "index": [
                    376,
                    281,
                    261,
                    279
                ],
                "obj.index": [
                    313,
                    261,
                    310
                ],
                "isinstance": [
                    773,
                    263,
                    2827,
                    783,
                    2454,
                    1688,
                    2840,
                    1697,
                    2466,
                    2850,
                    807,
                    430,
                    1710,
                    2614,
                    2615,
                    442,
                    2622,
                    960,
                    2628,
                    2638,
                    346,
                    2802,
                    2813
                ],
                "result": [
                    1027,
                    1028,
                    1029,
                    2692,
                    263,
                    2696,
                    907,
                    908,
                    1036,
                    2699,
                    911,
                    272,
                    273,
                    913,
                    2701,
                    276,
                    2704,
                    2705,
                    279,
                    2711,
                    281,
                    282,
                    2722,
                    2723,
                    2727,
                    299,
                    301,
                    302,
                    303,
                    304,
                    2809,
                    2632,
                    2633,
                    2634,
                    2635,
                    341,
                    346,
                    474,
                    347,
                    349,
                    476,
                    351,
                    352,
                    477,
                    480,
                    482,
                    487,
                    488,
                    490,
                    2799,
                    2804,
                    2807,
                    2681
                ],
                "block": [
                    266,
                    267,
                    299,
                    301,
                    281
                ],
                "is_timedelta64_dtype": [
                    267
                ],
                "block.values.dtype": [
                    267
                ],
                "block.values": [
                    267
                ],
                "values.reshape": [
                    272
                ],
                "to_timedelta": [
                    272
                ],
                "result.ravel": [
                    272
                ],
                "result.shape": [
                    273
                ],
                "result.ndim": [
                    349,
                    276,
                    341,
                    302
                ],
                "Series": [
                    313,
                    1101,
                    279
                ],
                "obj.name": [
                    279
                ],
                "block.columns": [
                    281
                ],
                "final": [
                    298,
                    333,
                    335,
                    304,
                    313
                ],
                "zip": [
                    299
                ],
                "results": [
                    1025,
                    1036,
                    1038,
                    2447,
                    2462,
                    423,
                    299,
                    2732,
                    2736,
                    2483,
                    2485,
                    438,
                    2637,
                    2643,
                    2644,
                    482,
                    484,
                    2661,
                    2662,
                    2664,
                    2669,
                    2671,
                    2684
                ],
                "self._wrap_result": [
                    301
                ],
                "final.append": [
                    304,
                    313
                ],
                "columns": [
                    322,
                    323,
                    324,
                    328,
                    330,
                    335,
                    309
                ],
                "self._selected_obj.columns": [
                    309
                ],
                "self._on.equals": [
                    310
                ],
                "name": [
                    960,
                    321,
                    961,
                    323,
                    963,
                    312,
                    313,
                    957
                ],
                "self._on.name": [
                    312
                ],
                "selection": [
                    321,
                    323,
                    317
                ],
                "ensure_index": [
                    317
                ],
                "self.obj.columns": [
                    1697,
                    322
                ],
                "indexer": [
                    323,
                    324
                ],
                "columns.get_indexer": [
                    323
                ],
                "selection.tolist": [
                    323
                ],
                "columns.take": [
                    324
                ],
                "sorted": [
                    324
                ],
                "exclude": [
                    484,
                    327,
                    328,
                    424,
                    431,
                    2448,
                    2485,
                    2455
                ],
                "c": [
                    328,
                    2684,
                    2687
                ],
                "DataError": [
                    331,
                    2459,
                    435
                ],
                "len": [
                    2051,
                    2633,
                    333,
                    2702,
                    850,
                    2772,
                    2678,
                    1023
                ],
                "obj.astype": [
                    334
                ],
                "reindex": [
                    335
                ],
                "concat": [
                    2681,
                    2683,
                    335
                ],
                "FrameOrSeries": [
                    284
                ],
                "offset": [
                    454,
                    455,
                    1108,
                    2773,
                    2777,
                    2775,
                    344,
                    345,
                    347,
                    350,
                    1081
                ],
                "_offset": [
                    344,
                    1081,
                    454
                ],
                "ABCSeries": [
                    2850,
                    2827,
                    2614,
                    2615,
                    2840,
                    346,
                    2622,
                    2623
                ],
                "ABCDataFrame": [
                    1697,
                    2850,
                    2628,
                    2615,
                    2827,
                    430,
                    2638,
                    2802,
                    2614,
                    2454,
                    2840,
                    346
                ],
                "result.slice_shift": [
                    347
                ],
                "lead_indexer": [
                    349,
                    350,
                    351
                ],
                "slice": [
                    349,
                    350
                ],
                "np.copy": [
                    351
                ],
                "tuple": [
                    807,
                    829,
                    773,
                    351
                ],
                "Callable": [
                    386,
                    355,
                    356,
                    847,
                    848,
                    382
                ],
                "minp": [
                    2785,
                    1476,
                    1287,
                    1479,
                    1289,
                    2791,
                    1099,
                    1483,
                    2794,
                    1105,
                    850,
                    851,
                    1489,
                    375,
                    376,
                    2782
                ],
                "check_minp": [
                    450,
                    850,
                    375,
                    413,
                    414
                ],
                "cfunc": [
                    450,
                    2467,
                    2468,
                    2475,
                    851,
                    376,
                    443,
                    444
                ],
                "arg": [
                    2525,
                    1479,
                    1832,
                    1289,
                    907,
                    1483,
                    1101,
                    2476,
                    911,
                    1103,
                    1487,
                    851,
                    376,
                    2427,
                    2524,
                    2109
                ],
                "func": [
                    450,
                    2466,
                    2467,
                    487,
                    2471,
                    489,
                    458,
                    1115,
                    2121,
                    378,
                    2483,
                    468,
                    853,
                    1109,
                    1849,
                    442,
                    443,
                    447
                ],
                "Union": [
                    384,
                    382
                ],
                "_use_window": [
                    1099,
                    1476,
                    414
                ],
                "self._get_window": [
                    1472,
                    417,
                    1283,
                    1668,
                    1080,
                    1533,
                    1022
                ],
                "self._create_blocks": [
                    1018,
                    419,
                    2444
                ],
                "block_list": [
                    420,
                    484,
                    2445,
                    432,
                    2485,
                    2456
                ],
                "list": [
                    420,
                    773,
                    2445,
                    807
                ],
                "index_as_array": [
                    1473,
                    450,
                    1284,
                    421,
                    1479,
                    1289,
                    1483,
                    1106,
                    1490,
                    1082
                ],
                "self._get_index": [
                    1473,
                    1284,
                    421,
                    1082,
                    1020
                ],
                "i": [
                    425,
                    2665,
                    2667,
                    2669,
                    2733,
                    2671,
                    432,
                    2449,
                    2642,
                    2643,
                    2672,
                    2734,
                    2456,
                    2684,
                    2687
                ],
                "b": [
                    1026,
                    1027,
                    425,
                    1674,
                    427,
                    1678,
                    431,
                    2449,
                    2451,
                    2455
                ],
                "enumerate": [
                    2665,
                    425,
                    2666,
                    2734,
                    2449,
                    2642,
                    2684,
                    2687
                ],
                "self._prep_values": [
                    427,
                    2451
                ],
                "b.values": [
                    427,
                    2451
                ],
                "exclude.extend": [
                    2455,
                    431
                ],
                "b.columns": [
                    2455,
                    431
                ],
                "values.size": [
                    437,
                    2461
                ],
                "results.append": [
                    482,
                    1036,
                    2483,
                    438,
                    2462
                ],
                "values.copy": [
                    2462,
                    438
                ],
                "libwindow": [
                    2467,
                    1478,
                    1289,
                    1482,
                    1102,
                    1486,
                    2523,
                    2551,
                    2584,
                    443
                ],
                "self._get_roll_func": [
                    450
                ],
                "additional_nans": [
                    459,
                    455
                ],
                "np.array": [
                    455
                ],
                "np.concatenate": [
                    459
                ],
                "x": [
                    961,
                    963,
                    1540,
                    459,
                    2799,
                    2800,
                    2802,
                    469,
                    2585,
                    958
                ],
                "np.errstate": [
                    472,
                    2596,
                    2798
                ],
                "values.ndim": [
                    473
                ],
                "np.apply_along_axis": [
                    474,
                    2483
                ],
                "calc": [
                    474,
                    476
                ],
                "np.asarray": [
                    477
                ],
                "self._center_window": [
                    480
                ],
                "self._wrap_results": [
                    484,
                    2485,
                    1038
                ],
                "how": [
                    907,
                    487
                ],
                "self._aggregate": [
                    907,
                    487
                ],
                "args": [
                    1282,
                    907,
                    1174,
                    920,
                    1178,
                    926,
                    1832,
                    943,
                    1849,
                    2109,
                    1854,
                    1855,
                    961,
                    2498,
                    963,
                    1861,
                    1862,
                    2121,
                    1867,
                    1868,
                    1357,
                    2126,
                    2127,
                    2508,
                    1873,
                    1874,
                    2133,
                    2134,
                    1111,
                    2520,
                    1115,
                    1884,
                    2139,
                    1118,
                    2140,
                    2145,
                    1890,
                    2146,
                    487,
                    489,
                    2156,
                    1133,
                    2162,
                    2427
                ],
                "self.apply": [
                    489
                ],
                "agg": [
                    1834,
                    492,
                    915,
                    2429,
                    2111
                ],
                "aggregate": [
                    1832,
                    1834,
                    492,
                    915,
                    2429,
                    2427,
                    2109,
                    2111
                ],
                "dedent": [
                    1415,
                    2056,
                    1551,
                    1040,
                    1296,
                    2066,
                    1181,
                    571,
                    1221,
                    2376,
                    976,
                    2384,
                    855,
                    864,
                    1121,
                    1378,
                    1767,
                    1899,
                    494,
                    1136,
                    1776,
                    2171
                ],
                "_Window": [
                    968,
                    618
                ],
                "validate": [
                    770,
                    1707
                ],
                "super": [
                    770,
                    1929,
                    1934,
                    1942,
                    2201,
                    1947,
                    2206,
                    2214,
                    1832,
                    1707,
                    2219,
                    943,
                    1967,
                    1844,
                    1849,
                    2109,
                    1855,
                    2116,
                    1862,
                    2121,
                    1868,
                    2127,
                    1874,
                    2134,
                    1879,
                    2140,
                    1885,
                    2146,
                    1891,
                    2151,
                    1897,
                    2029,
                    2157,
                    2163,
                    2169,
                    2427
                ],
                "import_optional_dependency": [
                    778
                ],
                "sig": [
                    785,
                    844
                ],
                "astype": [
                    808,
                    1027,
                    844
                ],
                "com.asarray_tuplesafe": [
                    808
                ],
                "com": [
                    808,
                    2365,
                    2743
                ],
                "float": [
                    808,
                    844,
                    2767
                ],
                "arg_map": [
                    822,
                    814,
                    823
                ],
                "win_args": [
                    827,
                    829,
                    823
                ],
                "_pop_args": [
                    823
                ],
                "win_args.insert": [
                    827
                ],
                "msg": [
                    834,
                    838
                ],
                "all_args": [
                    840,
                    835,
                    839
                ],
                "n": [
                    836,
                    837,
                    838,
                    839
                ],
                "arg_names": [
                    836
                ],
                "all_args.append": [
                    839
                ],
                "kwargs.pop": [
                    936,
                    937,
                    1079,
                    839
                ],
                "_validate_win_type": [
                    842
                ],
                "sig.get_window": [
                    844
                ],
                "_agg_see_also_doc": [
                    1824,
                    899,
                    1767,
                    2056,
                    2376,
                    2419,
                    2101,
                    855
                ],
                "_agg_examples_doc": [
                    864,
                    1825,
                    900,
                    1776,
                    2384,
                    2066,
                    2420,
                    2102
                ],
                "Substitution": [
                    898,
                    1926,
                    2566,
                    1931,
                    1938,
                    917,
                    2198,
                    1944,
                    923,
                    2203,
                    1823,
                    2210,
                    2216,
                    1836,
                    2100,
                    1846,
                    2487,
                    1851,
                    1857,
                    2113,
                    2501,
                    2118,
                    1864,
                    2123,
                    1870,
                    2129,
                    2513,
                    1876,
                    2136,
                    1881,
                    2142,
                    1887,
                    2148,
                    1893,
                    2535,
                    2153,
                    2159,
                    2418,
                    2165
                ],
                "Appender": [
                    1925,
                    1927,
                    2567,
                    905,
                    2568,
                    1932,
                    1939,
                    1940,
                    2197,
                    918,
                    2199,
                    1945,
                    924,
                    2204,
                    2211,
                    2212,
                    1830,
                    2217,
                    1837,
                    1847,
                    2488,
                    2107,
                    1852,
                    1858,
                    1859,
                    2114,
                    2502,
                    2119,
                    2503,
                    1865,
                    2124,
                    1871,
                    2130,
                    2131,
                    2514,
                    1877,
                    2515,
                    2137,
                    1882,
                    2143,
                    1888,
                    2149,
                    1894,
                    1895,
                    2536,
                    2537,
                    2154,
                    2160,
                    2166,
                    2167,
                    2425
                ],
                "nv.validate_window_func": [
                    1282,
                    2498,
                    2520,
                    2508,
                    1133,
                    1357,
                    926,
                    1174,
                    920,
                    1178,
                    1118
                ],
                "nv": [
                    1282,
                    1174,
                    920,
                    1178,
                    926,
                    1854,
                    2498,
                    1861,
                    1867,
                    2508,
                    1357,
                    2126,
                    1873,
                    2133,
                    2520,
                    2139,
                    1884,
                    1118,
                    2145,
                    1890,
                    2156,
                    1133,
                    2162
                ],
                "self._apply": [
                    1219,
                    1411,
                    2499,
                    2533,
                    1496,
                    1179,
                    1292,
                    1134,
                    1358,
                    1842,
                    1175,
                    927,
                    921,
                    1115,
                    1374,
                    1119
                ],
                "GroupByMixin": [
                    946,
                    945,
                    930,
                    947
                ],
                "parent": [
                    936
                ],
                "groupby": [
                    937,
                    938,
                    939,
                    940
                ],
                "obj.obj": [
                    939
                ],
                "self._groupby": [
                    965,
                    940,
                    941,
                    942,
                    1965
                ],
                "self._groupby.mutated": [
                    941
                ],
                "self._groupby.grouper.mutated": [
                    942
                ],
                "self._groupby.grouper": [
                    942
                ],
                "__init__": [
                    2029,
                    943
                ],
                "count": [
                    2116,
                    1543,
                    1544,
                    945,
                    1844
                ],
                "GroupByMixin._dispatch": [
                    945,
                    946,
                    947
                ],
                "corr": [
                    2600,
                    2601,
                    2219,
                    946,
                    1947
                ],
                "cov": [
                    2560,
                    2597,
                    2214,
                    2600,
                    947,
                    1942,
                    2551
                ],
                "x.apply": [
                    963
                ],
                "self._groupby.apply": [
                    965
                ],
                "f": [
                    2626,
                    2533,
                    965,
                    2661,
                    1293,
                    2733,
                    2671,
                    2643,
                    2739,
                    1496,
                    1115
                ],
                "Rolling": [
                    2833,
                    971,
                    1957,
                    1950
                ],
                "_Rolling": [
                    2261,
                    974
                ],
                "min": [
                    1868,
                    2140,
                    1023
                ],
                "b.notna": [
                    1027
                ],
                "sum": [
                    1028,
                    2127,
                    1855
                ],
                "self._constructor": [
                    1028
                ],
                "raw": [
                    1096,
                    2121,
                    1100,
                    1110,
                    1849,
                    1115,
                    1086
                ],
                "warnings.warn": [
                    1087
                ],
                "warnings": [
                    2656,
                    2657,
                    2650,
                    2651,
                    1087
                ],
                "FutureWarning": [
                    1093
                ],
                "self.obj.index": [
                    1696,
                    1101
                ],
                "libwindow.roll_generic": [
                    1102
                ],
                "_require_min_periods": [
                    1412,
                    1287,
                    1293,
                    1359,
                    1375
                ],
                "_zsqrt": [
                    1288,
                    2600,
                    2509
                ],
                "libwindow.roll_var": [
                    1289
                ],
                "ddof": [
                    1891,
                    2214,
                    1544,
                    1289,
                    1293,
                    2157,
                    1359,
                    2163,
                    1942,
                    1885
                ],
                "quantile": [
                    1477,
                    1481,
                    1934,
                    1935,
                    1492,
                    1496,
                    2206,
                    2207
                ],
                "libwindow.roll_max": [
                    1478
                ],
                "libwindow.roll_min": [
                    1482
                ],
                "libwindow.roll_quantile": [
                    1486
                ],
                "interpolation": [
                    2207,
                    1493,
                    1935
                ],
                "other": [
                    1664,
                    1667,
                    1668,
                    2051,
                    2053,
                    2054,
                    2563,
                    1548,
                    2573,
                    2574,
                    1681,
                    2577,
                    1942,
                    1947,
                    2214,
                    2219,
                    2604,
                    2542,
                    2543,
                    2546,
                    1523,
                    1524,
                    1527,
                    1533,
                    1663
                ],
                "pairwise": [
                    1666,
                    2563,
                    2214,
                    2663,
                    2219,
                    1548,
                    2604,
                    2639,
                    2576,
                    1681,
                    2545,
                    1942,
                    1526,
                    1947
                ],
                "X": [
                    2560,
                    2817,
                    1538,
                    2820,
                    1543,
                    1545,
                    2580,
                    2594,
                    2601,
                    2625,
                    2626,
                    2652,
                    2653,
                    2654,
                    2660,
                    2661,
                    2662,
                    2549,
                    2552
                ],
                "X.astype": [
                    1538
                ],
                "Y": [
                    2625,
                    2626,
                    1539,
                    2595,
                    2660,
                    2661,
                    1543,
                    2818,
                    1545,
                    2820,
                    2581,
                    2550,
                    2553,
                    2652,
                    2653,
                    2654
                ],
                "Y.astype": [
                    1539
                ],
                "mean": [
                    1545,
                    1874,
                    1540,
                    2146
                ],
                "x.rolling": [
                    1540
                ],
                "rolling": [
                    2836,
                    1543
                ],
                "bias_adj": [
                    1544,
                    1545
                ],
                "_flex_binary_moment": [
                    2562,
                    2603,
                    1547,
                    1680,
                    2739
                ],
                "other._selected_obj": [
                    1681,
                    2563,
                    1548,
                    2604
                ],
                "_get_cov": [
                    2563,
                    1548
                ],
                "a": [
                    1678,
                    1671
                ],
                "a.rolling": [
                    1671
                ],
                "b.rolling": [
                    1674
                ],
                "a.cov": [
                    1678
                ],
                "a.std": [
                    1678
                ],
                "b.std": [
                    1678
                ],
                "_get_corr": [
                    1681,
                    2604
                ],
                "_Rolling_and_Expanding": [
                    1979,
                    1685
                ],
                "ABCDatetimeIndex": [
                    1689
                ],
                "ABCTimedeltaIndex": [
                    1689
                ],
                "ABCPeriodIndex": [
                    1689
                ],
                "cache_readonly": [
                    1692,
                    1686
                ],
                "Index": [
                    1698
                ],
                "self.obj.empty": [
                    1710
                ],
                "self.is_datetimelike": [
                    1739,
                    1710
                ],
                "ABCDateOffset": [
                    1711
                ],
                "timedelta": [
                    1711
                ],
                "self._validate_monotonic": [
                    1714
                ],
                "freq": [
                    1715,
                    1727
                ],
                "self._validate_freq": [
                    1715
                ],
                "freq.nanos": [
                    1727
                ],
                "self._on.is_monotonic": [
                    1748
                ],
                "formatted": [
                    1749,
                    1750
                ],
                "to_offset": [
                    1759
                ],
                "apply": [
                    2121,
                    1849
                ],
                "nv.validate_rolling_func": [
                    1890,
                    1861,
                    1867,
                    1873,
                    1884,
                    1854
                ],
                "max": [
                    2134,
                    2785,
                    1862,
                    2054
                ],
                "median": [
                    2151,
                    1879
                ],
                "std": [
                    2157,
                    1885,
                    2511
                ],
                "var": [
                    2163,
                    1891
                ],
                "skew": [
                    2169,
                    1897
                ],
                "_agg_doc": [
                    2171,
                    1899,
                    1925,
                    2197
                ],
                "kurt": [
                    1929,
                    2201
                ],
                "_GroupByMixin": [
                    2222,
                    1950
                ],
                "self._groupby.obj": [
                    1965
                ],
                "self._groupby.obj.set_index": [
                    1965
                ],
                "_gotitem": [
                    1967
                ],
                "ndim": [
                    1967
                ],
                "Expanding": [
                    2222,
                    2033,
                    2229,
                    2843,
                    2846
                ],
                "self.obj._get_axis": [
                    2050
                ],
                "length": [
                    2051,
                    2054
                ],
                "nv.validate_expanding_func": [
                    2145,
                    2156,
                    2126,
                    2162,
                    2133,
                    2139
                ],
                "_bias_template": [
                    2232,
                    2515,
                    2503
                ],
                "_pairwise_template": [
                    2568,
                    2241,
                    2537
                ],
                "self.com": [
                    2477,
                    2554,
                    2587,
                    2365,
                    2526
                ],
                "_get_center_of_mass": [
                    2365
                ],
                "span": [
                    2752,
                    2754,
                    2743,
                    2365,
                    2751
                ],
                "halflife": [
                    2755,
                    2756,
                    2758,
                    2743,
                    2365
                ],
                "alpha": [
                    2760,
                    2761,
                    2763,
                    2743,
                    2365
                ],
                "self.adjust": [
                    2367,
                    2478,
                    2555,
                    2588,
                    2527
                ],
                "adjust": [
                    2367
                ],
                "self.ignore_na": [
                    2368,
                    2528,
                    2479,
                    2556,
                    2589
                ],
                "ignore_na": [
                    2368
                ],
                "EWM": [
                    2856,
                    2853,
                    2374
                ],
                "self.var": [
                    2509
                ],
                "bias": [
                    2530,
                    2509,
                    2558
                ],
                "vol": [
                    2511
                ],
                "libwindow.ewmcov": [
                    2584,
                    2523,
                    2551
                ],
                "X._prep_values": [
                    2552,
                    2594
                ],
                "Y._prep_values": [
                    2553,
                    2595
                ],
                "X._wrap_result": [
                    2560,
                    2601
                ],
                "y": [
                    2586
                ],
                "x_values": [
                    2594,
                    2597,
                    2598
                ],
                "y_values": [
                    2595,
                    2597,
                    2599
                ],
                "_cov": [
                    2597,
                    2598,
                    2599
                ],
                "x_var": [
                    2600,
                    2598
                ],
                "y_var": [
                    2600,
                    2599
                ],
                "arg1": [
                    2817,
                    2818,
                    2692,
                    2713,
                    2722,
                    2733,
                    2734,
                    2736,
                    2739,
                    2614,
                    2622,
                    2625,
                    2628,
                    2640,
                    2642,
                    2643,
                    2644,
                    2646,
                    2652,
                    2658,
                    2665,
                    2667,
                    2672,
                    2677,
                    2813,
                    2687
                ],
                "arg2": [
                    2817,
                    2818,
                    2695,
                    2697,
                    2702,
                    2706,
                    2713,
                    2715,
                    2724,
                    2733,
                    2739,
                    2615,
                    2623,
                    2625,
                    2638,
                    2640,
                    2643,
                    2648,
                    2652,
                    2658,
                    2666,
                    2667,
                    2672,
                    2677,
                    2684,
                    2813
                ],
                "_prep_binary": [
                    2672,
                    2625,
                    2733
                ],
                "DataFrame": [
                    2632,
                    2662,
                    2711
                ],
                "data": [
                    2632
                ],
                "frame_template.index": [
                    2632
                ],
                "frame_template": [
                    2632,
                    2634
                ],
                "result.columns": [
                    2722,
                    2633,
                    2634,
                    2692
                ],
                "frame_template.columns": [
                    2634
                ],
                "col": [
                    2659,
                    2660,
                    2661,
                    2734,
                    2642
                ],
                "arg1.columns": [
                    2658,
                    2722,
                    2692,
                    2665,
                    2734,
                    2642,
                    2646,
                    2687
                ],
                "arg1.iloc": [
                    2672,
                    2643,
                    2733
                ],
                "arg2.iloc": [
                    2672,
                    2643
                ],
                "dataframe_from_int_dict": [
                    2736,
                    2644
                ],
                "arg1.columns.is_unique": [
                    2646
                ],
                "arg2.columns.is_unique": [
                    2648
                ],
                "arg2.columns": [
                    2658,
                    2724,
                    2695,
                    2697,
                    2666,
                    2702,
                    2706,
                    2648,
                    2713,
                    2715,
                    2684
                ],
                "warnings.catch_warnings": [
                    2656,
                    2650
                ],
                "warnings.simplefilter": [
                    2657,
                    2651
                ],
                "RuntimeWarning": [
                    2657,
                    2651
                ],
                "arg1.align": [
                    2652
                ],
                "res_columns": [
                    2658,
                    2659,
                    2662
                ],
                "arg1.columns.union": [
                    2658
                ],
                "X.index": [
                    2662
                ],
                "defaultdict": [
                    2664
                ],
                "k1": [
                    2665
                ],
                "j": [
                    2666,
                    2667,
                    2669,
                    2671,
                    2672,
                    2684
                ],
                "k2": [
                    2666
                ],
                "result_index": [
                    2724,
                    2697,
                    2702,
                    2706,
                    2677,
                    2678
                ],
                "arg1.index.union": [
                    2677
                ],
                "arg1.index": [
                    2713,
                    2677
                ],
                "arg2.index": [
                    2677
                ],
                "arg2.columns.nlevels": [
                    2695
                ],
                "result.index": [
                    2696,
                    2705,
                    2723,
                    2701
                ],
                "MultiIndex.from_product": [
                    2696,
                    2705,
                    2701
                ],
                "MultiIndex": [
                    2696,
                    2705,
                    2712,
                    2701
                ],
                "arg2.columns.levels": [
                    2697
                ],
                "sort_index": [
                    2704,
                    2699
                ],
                "result.reorder_levels": [
                    2699
                ],
                "range": [
                    2702
                ],
                "result.swaplevel": [
                    2704
                ],
                "result.columns.set_names": [
                    2722
                ],
                "arg1.columns.names": [
                    2722
                ],
                "result.index.set_names": [
                    2723
                ],
                "result_index.names": [
                    2724
                ],
                "arg2.columns.names": [
                    2724
                ],
                "valid_count": [
                    2744,
                    2743
                ],
                "com.count_not_none": [
                    2743
                ],
                "comass": [
                    2754,
                    2759,
                    2763,
                    2767,
                    2743,
                    2748,
                    2749
                ],
                "decay": [
                    2758,
                    2759
                ],
                "np.exp": [
                    2758
                ],
                "np.log": [
                    2758
                ],
                "offset.astype": [
                    2777
                ],
                "p": [
                    2785
                ],
                "_check_func": [
                    2787
                ],
                "np.sqrt": [
                    2799
                ],
                "mask": [
                    2800,
                    2803,
                    2804,
                    2806,
                    2807
                ],
                "mask.values.any": [
                    2803
                ],
                "mask.values": [
                    2803
                ],
                "mask.any": [
                    2806
                ],
                "Exception": [
                    2814
                ],
                "kwds": [
                    2833,
                    2843,
                    2853,
                    2831
                ],
                "rolling.__doc__": [
                    2836
                ],
                "Window.__doc__": [
                    2836
                ],
                "expanding.__doc__": [
                    2846
                ],
                "expanding": [
                    2846
                ],
                "Expanding.__doc__": [
                    2846
                ],
                "ewm.__doc__": [
                    2856
                ],
                "ewm": [
                    2856
                ],
                "EWM.__doc__": [
                    2856
                ]
            },
            "filtered_variables_in_file": {
                "_shared_docs": [
                    1415,
                    1927,
                    905,
                    1932,
                    1551,
                    1040,
                    1296,
                    1940,
                    918,
                    2199,
                    1945,
                    924,
                    1181,
                    2204,
                    2212,
                    1830,
                    2217,
                    45,
                    1837,
                    1847,
                    571,
                    1852,
                    2107,
                    2114,
                    1859,
                    1221,
                    2119,
                    1865,
                    2124,
                    1871,
                    976,
                    1362,
                    2131,
                    1877,
                    2137,
                    1498,
                    1882,
                    2143,
                    1888,
                    1121,
                    1378,
                    2149,
                    1895,
                    2154,
                    494,
                    1136,
                    2160,
                    2167,
                    2425
                ],
                "_doc_template": [
                    1858,
                    2211,
                    1894,
                    2502,
                    2536,
                    2567,
                    46,
                    2130,
                    1939,
                    2514,
                    2166,
                    2488
                ],
                "PandasObject": [
                    59
                ],
                "SelectionMixin": [
                    59
                ],
                "_attributes": [
                    2026,
                    60,
                    2350
                ],
                "exclusions": [
                    69
                ],
                "Optional": [
                    384,
                    385,
                    226,
                    386,
                    101,
                    75,
                    76,
                    77,
                    79,
                    80,
                    213,
                    383
                ],
                "Axis": [
                    78
                ],
                "self.__dict__.update": [
                    84
                ],
                "self.__dict__": [
                    84
                ],
                "self": [
                    2050,
                    2563,
                    1028,
                    1541,
                    2053,
                    1543,
                    1032,
                    1033,
                    1034,
                    1548,
                    1038,
                    2574,
                    2577,
                    1530,
                    2580,
                    2581,
                    2587,
                    2588,
                    2589,
                    2590,
                    2604,
                    2554,
                    2555,
                    1080,
                    1081,
                    1082,
                    2556,
                    2557,
                    1101,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    1115,
                    1119,
                    110,
                    1134,
                    113,
                    115,
                    117,
                    1664,
                    130,
                    1667,
                    1668,
                    133,
                    135,
                    1672,
                    1675,
                    1681,
                    1175,
                    1689,
                    155,
                    156,
                    157,
                    1179,
                    1695,
                    160,
                    161,
                    1696,
                    1697,
                    164,
                    165,
                    166,
                    167,
                    1698,
                    1703,
                    170,
                    174,
                    1710,
                    1711,
                    1714,
                    1715,
                    1718,
                    189,
                    1726,
                    1727,
                    1728,
                    193,
                    1219,
                    1731,
                    1732,
                    1734,
                    1736,
                    201,
                    202,
                    203,
                    1739,
                    206,
                    1748,
                    1749,
                    222,
                    223,
                    1759,
                    1764,
                    229,
                    241,
                    1283,
                    260,
                    772,
                    1284,
                    1287,
                    1289,
                    1292,
                    783,
                    784,
                    785,
                    786,
                    806,
                    301,
                    1841,
                    1842,
                    309,
                    310,
                    312,
                    313,
                    315,
                    2364,
                    317,
                    2365,
                    2366,
                    2367,
                    2368,
                    322,
                    2369,
                    2370,
                    842,
                    1358,
                    341,
                    347,
                    350,
                    1374,
                    1411,
                    907,
                    2444,
                    911,
                    2451,
                    921,
                    411,
                    927,
                    417,
                    419,
                    421,
                    427,
                    940,
                    941,
                    942,
                    1964,
                    1965,
                    1966,
                    2477,
                    2478,
                    2479,
                    2480,
                    2483,
                    2485,
                    958,
                    1472,
                    1473,
                    450,
                    2499,
                    1476,
                    965,
                    1479,
                    1483,
                    461,
                    462,
                    2509,
                    1491,
                    469,
                    1496,
                    474,
                    2526,
                    2527,
                    480,
                    2528,
                    2529,
                    484,
                    2533,
                    487,
                    489,
                    2543,
                    2546,
                    1524,
                    2549,
                    2550,
                    1527,
                    1018,
                    1531,
                    1020,
                    1533,
                    1022,
                    1023
                ],
                "kwargs": [
                    1542,
                    1543,
                    1079,
                    2109,
                    2116,
                    2121,
                    2126,
                    2127,
                    84,
                    2133,
                    2134,
                    1112,
                    1115,
                    2139,
                    2140,
                    1118,
                    1119,
                    2145,
                    2146,
                    2151,
                    2156,
                    1133,
                    1134,
                    2157,
                    2162,
                    2163,
                    2169,
                    1678,
                    1174,
                    1175,
                    2201,
                    1178,
                    1179,
                    2207,
                    2214,
                    2219,
                    1219,
                    1282,
                    1293,
                    1832,
                    823,
                    1849,
                    1854,
                    1855,
                    837,
                    1861,
                    839,
                    1862,
                    842,
                    1867,
                    1868,
                    1357,
                    1359,
                    1873,
                    1874,
                    1879,
                    1884,
                    1885,
                    1375,
                    1890,
                    1891,
                    1897,
                    376,
                    2427,
                    1412,
                    1929,
                    907,
                    1935,
                    1942,
                    920,
                    921,
                    1947,
                    926,
                    927,
                    417,
                    936,
                    937,
                    943,
                    961,
                    450,
                    963,
                    2498,
                    2499,
                    2508,
                    2509,
                    1496,
                    2520,
                    2533,
                    487,
                    489
                ],
                "self.obj": [
                    1696,
                    1697,
                    322,
                    1698,
                    2050,
                    166,
                    1101,
                    174,
                    1710,
                    85,
                    155,
                    2364
                ],
                "obj": [
                    130,
                    259,
                    260,
                    261,
                    134,
                    135,
                    136,
                    138,
                    2827,
                    2444,
                    2828,
                    1038,
                    2831,
                    2833,
                    2454,
                    279,
                    2840,
                    281,
                    2841,
                    2843,
                    2850,
                    419,
                    2851,
                    2853,
                    939,
                    301,
                    430,
                    943,
                    2485,
                    310,
                    313,
                    2364,
                    334,
                    85,
                    93,
                    484,
                    2029,
                    1018,
                    1023
                ],
                "self.on": [
                    1697,
                    1698,
                    2370,
                    133,
                    135,
                    1703,
                    1964,
                    1966,
                    1749,
                    310,
                    86,
                    1695
                ],
                "on": [
                    86
                ],
                "self.closed": [
                    1479,
                    1289,
                    1034,
                    1483,
                    1739,
                    462,
                    1491,
                    469,
                    117,
                    87
                ],
                "closed": [
                    376,
                    1107,
                    87
                ],
                "self.window": [
                    772,
                    1764,
                    806,
                    1734,
                    1736,
                    1711,
                    1759,
                    88,
                    189,
                    1726,
                    1727
                ],
                "window": [
                    1283,
                    772,
                    773,
                    1030,
                    775,
                    776,
                    1287,
                    1289,
                    1541,
                    1543,
                    1668,
                    1672,
                    1675,
                    788,
                    416,
                    417,
                    806,
                    807,
                    808,
                    809,
                    1080,
                    1081,
                    1472,
                    1476,
                    454,
                    1479,
                    1099,
                    460,
                    844,
                    1483,
                    1104,
                    1488,
                    850,
                    851,
                    2771,
                    469,
                    2772,
                    2773,
                    344,
                    88,
                    2783,
                    480,
                    2792,
                    375,
                    376,
                    1531,
                    1533,
                    1022,
                    1023
                ],
                "self.min_periods": [
                    2529,
                    1731,
                    1476,
                    1541,
                    1732,
                    1287,
                    1672,
                    2053,
                    2590,
                    1675,
                    461,
                    2480,
                    115,
                    469,
                    89,
                    2557,
                    2366
                ],
                "min_periods": [
                    1099,
                    2029,
                    850,
                    375,
                    89,
                    2366
                ],
                "self.center": [
                    1541,
                    1543,
                    1032,
                    1672,
                    1675,
                    113,
                    1718,
                    1081,
                    90,
                    411,
                    1023
                ],
                "center": [
                    453,
                    454,
                    2029,
                    410,
                    2773,
                    90,
                    411,
                    479
                ],
                "self.win_type": [
                    1728,
                    842,
                    110,
                    783,
                    784,
                    785,
                    786,
                    91
                ],
                "win_type": [
                    834,
                    842,
                    844,
                    2830,
                    2831,
                    822,
                    823,
                    824,
                    91,
                    829,
                    831
                ],
                "self.win_freq": [
                    1531,
                    92,
                    1726
                ],
                "self.axis": [
                    2369,
                    2050,
                    1033,
                    2483,
                    341,
                    474,
                    347,
                    93,
                    350
                ],
                "axis": [
                    2369,
                    2050,
                    2051,
                    2029,
                    93
                ],
                "obj._get_axis_number": [
                    93
                ],
                "self.validate": [
                    94
                ],
                "Window": [
                    98,
                    2836,
                    2831
                ],
                "is_bool": [
                    113
                ],
                "is_integer": [
                    1734,
                    775,
                    809,
                    115,
                    2771
                ],
                "self._selected_obj": [
                    1664,
                    130,
                    2563,
                    260,
                    229,
                    1548,
                    2604,
                    2574,
                    2543,
                    1681,
                    1524,
                    309
                ],
                "obj.ndim": [
                    134
                ],
                "obj.reindex": [
                    135
                ],
                "obj.columns.difference": [
                    135
                ],
                "obj.columns": [
                    135
                ],
                "blocks": [
                    1026,
                    419,
                    420,
                    136,
                    425,
                    138,
                    299,
                    2444,
                    2445,
                    1038,
                    2449,
                    1018
                ],
                "values": [
                    136,
                    272,
                    2451,
                    2461,
                    2462,
                    427,
                    2483,
                    437,
                    438,
                    473,
                    474,
                    476,
                    228,
                    229,
                    233,
                    234,
                    235,
                    236,
                    237,
                    241,
                    245,
                    247,
                    250,
                    252
                ],
                "obj._to_dict_of_blocks": [
                    136
                ],
                "subset": [
                    1967,
                    154,
                    155,
                    156,
                    158,
                    159
                ],
                "self._shallow_copy": [
                    1667,
                    2577,
                    2546,
                    2580,
                    2549,
                    2550,
                    1527,
                    2581,
                    156,
                    958
                ],
                "self._reset_cache": [
                    157
                ],
                "subset.ndim": [
                    158
                ],
                "is_scalar": [
                    159
                ],
                "key": [
                    160,
                    1967,
                    159
                ],
                "is_list_like": [
                    159
                ],
                "self._selection": [
                    160,
                    315,
                    317
                ],
                "attr": [
                    164,
                    165,
                    166,
                    167,
                    170
                ],
                "self._internal_names_set": [
                    164
                ],
                "object.__getattribute__": [
                    165
                ],
                "self.obj._dir_additions": [
                    174
                ],
                "self.__class__.__name__": [
                    193
                ],
                "self.__class__": [
                    193
                ],
                "attrs": [
                    200,
                    206
                ],
                "k": [
                    201,
                    202,
                    203
                ],
                "self._attributes": [
                    202
                ],
                "self._window_type": [
                    241,
                    206
                ],
                "join": [
                    206
                ],
                "url": [
                    210,
                    211
                ],
                "self.is_freq_type": [
                    1841,
                    1530,
                    222
                ],
                "self._on.asi8": [
                    223
                ],
                "self._on": [
                    1965,
                    1689,
                    1748,
                    310,
                    312,
                    313,
                    223
                ],
                "np.ndarray": [
                    226,
                    355,
                    773,
                    2615,
                    263,
                    807,
                    847,
                    337,
                    213,
                    790,
                    2614,
                    2622,
                    2623
                ],
                "np": [
                    773,
                    263,
                    790,
                    2596,
                    807,
                    2483,
                    2614,
                    2615,
                    2622,
                    2623,
                    2758,
                    455,
                    459,
                    847,
                    337,
                    213,
                    472,
                    474,
                    477,
                    351,
                    226,
                    355,
                    2798,
                    2799,
                    250
                ],
                "is_float_dtype": [
                    233
                ],
                "values.dtype": [
                    233,
                    235,
                    237,
                    241,
                    247
                ],
                "ensure_float64": [
                    234,
                    236,
                    245
                ],
                "is_integer_dtype": [
                    235
                ],
                "needs_i8_conversion": [
                    237
                ],
                "np.isinf": [
                    250
                ],
                "np.NaN": [
                    250,
                    455
                ],
                "index": [
                    376,
                    281,
                    261,
                    279
                ],
                "obj.index": [
                    313,
                    261,
                    310
                ],
                "result": [
                    1027,
                    1028,
                    1029,
                    2692,
                    263,
                    2696,
                    907,
                    908,
                    1036,
                    2699,
                    911,
                    272,
                    273,
                    913,
                    2701,
                    276,
                    2704,
                    2705,
                    279,
                    2711,
                    281,
                    282,
                    2722,
                    2723,
                    2727,
                    299,
                    301,
                    302,
                    303,
                    304,
                    2809,
                    2632,
                    2633,
                    2634,
                    2635,
                    341,
                    346,
                    474,
                    347,
                    349,
                    476,
                    351,
                    352,
                    477,
                    480,
                    482,
                    487,
                    488,
                    490,
                    2799,
                    2804,
                    2807,
                    2681
                ],
                "block": [
                    266,
                    267,
                    299,
                    301,
                    281
                ],
                "is_timedelta64_dtype": [
                    267
                ],
                "block.values.dtype": [
                    267
                ],
                "block.values": [
                    267
                ],
                "values.reshape": [
                    272
                ],
                "to_timedelta": [
                    272
                ],
                "result.ravel": [
                    272
                ],
                "result.shape": [
                    273
                ],
                "result.ndim": [
                    349,
                    276,
                    341,
                    302
                ],
                "Series": [
                    313,
                    1101,
                    279
                ],
                "obj.name": [
                    279
                ],
                "block.columns": [
                    281
                ],
                "final": [
                    298,
                    333,
                    335,
                    304,
                    313
                ],
                "results": [
                    1025,
                    1036,
                    1038,
                    2447,
                    2462,
                    423,
                    299,
                    2732,
                    2736,
                    2483,
                    2485,
                    438,
                    2637,
                    2643,
                    2644,
                    482,
                    484,
                    2661,
                    2662,
                    2664,
                    2669,
                    2671,
                    2684
                ],
                "self._wrap_result": [
                    301
                ],
                "final.append": [
                    304,
                    313
                ],
                "columns": [
                    322,
                    323,
                    324,
                    328,
                    330,
                    335,
                    309
                ],
                "self._selected_obj.columns": [
                    309
                ],
                "self._on.equals": [
                    310
                ],
                "name": [
                    960,
                    321,
                    961,
                    323,
                    963,
                    312,
                    313,
                    957
                ],
                "self._on.name": [
                    312
                ],
                "selection": [
                    321,
                    323,
                    317
                ],
                "ensure_index": [
                    317
                ],
                "self.obj.columns": [
                    1697,
                    322
                ],
                "indexer": [
                    323,
                    324
                ],
                "columns.get_indexer": [
                    323
                ],
                "selection.tolist": [
                    323
                ],
                "columns.take": [
                    324
                ],
                "exclude": [
                    484,
                    327,
                    328,
                    424,
                    431,
                    2448,
                    2485,
                    2455
                ],
                "c": [
                    328,
                    2684,
                    2687
                ],
                "DataError": [
                    331,
                    2459,
                    435
                ],
                "obj.astype": [
                    334
                ],
                "reindex": [
                    335
                ],
                "concat": [
                    2681,
                    2683,
                    335
                ],
                "FrameOrSeries": [
                    284
                ],
                "offset": [
                    454,
                    455,
                    1108,
                    2773,
                    2777,
                    2775,
                    344,
                    345,
                    347,
                    350,
                    1081
                ],
                "_offset": [
                    344,
                    1081,
                    454
                ],
                "ABCSeries": [
                    2850,
                    2827,
                    2614,
                    2615,
                    2840,
                    346,
                    2622,
                    2623
                ],
                "ABCDataFrame": [
                    1697,
                    2850,
                    2628,
                    2615,
                    2827,
                    430,
                    2638,
                    2802,
                    2614,
                    2454,
                    2840,
                    346
                ],
                "result.slice_shift": [
                    347
                ],
                "lead_indexer": [
                    349,
                    350,
                    351
                ],
                "np.copy": [
                    351
                ],
                "Callable": [
                    386,
                    355,
                    356,
                    847,
                    848,
                    382
                ],
                "minp": [
                    2785,
                    1476,
                    1287,
                    1479,
                    1289,
                    2791,
                    1099,
                    1483,
                    2794,
                    1105,
                    850,
                    851,
                    1489,
                    375,
                    376,
                    2782
                ],
                "check_minp": [
                    450,
                    850,
                    375,
                    413,
                    414
                ],
                "cfunc": [
                    450,
                    2467,
                    2468,
                    2475,
                    851,
                    376,
                    443,
                    444
                ],
                "arg": [
                    2525,
                    1479,
                    1832,
                    1289,
                    907,
                    1483,
                    1101,
                    2476,
                    911,
                    1103,
                    1487,
                    851,
                    376,
                    2427,
                    2524,
                    2109
                ],
                "func": [
                    450,
                    2466,
                    2467,
                    487,
                    2471,
                    489,
                    458,
                    1115,
                    2121,
                    378,
                    2483,
                    468,
                    853,
                    1109,
                    1849,
                    442,
                    443,
                    447
                ],
                "Union": [
                    384,
                    382
                ],
                "_use_window": [
                    1099,
                    1476,
                    414
                ],
                "self._get_window": [
                    1472,
                    417,
                    1283,
                    1668,
                    1080,
                    1533,
                    1022
                ],
                "self._create_blocks": [
                    1018,
                    419,
                    2444
                ],
                "block_list": [
                    420,
                    484,
                    2445,
                    432,
                    2485,
                    2456
                ],
                "index_as_array": [
                    1473,
                    450,
                    1284,
                    421,
                    1479,
                    1289,
                    1483,
                    1106,
                    1490,
                    1082
                ],
                "self._get_index": [
                    1473,
                    1284,
                    421,
                    1082,
                    1020
                ],
                "i": [
                    425,
                    2665,
                    2667,
                    2669,
                    2733,
                    2671,
                    432,
                    2449,
                    2642,
                    2643,
                    2672,
                    2734,
                    2456,
                    2684,
                    2687
                ],
                "b": [
                    1026,
                    1027,
                    425,
                    1674,
                    427,
                    1678,
                    431,
                    2449,
                    2451,
                    2455
                ],
                "self._prep_values": [
                    427,
                    2451
                ],
                "b.values": [
                    427,
                    2451
                ],
                "exclude.extend": [
                    2455,
                    431
                ],
                "b.columns": [
                    2455,
                    431
                ],
                "values.size": [
                    437,
                    2461
                ],
                "results.append": [
                    482,
                    1036,
                    2483,
                    438,
                    2462
                ],
                "values.copy": [
                    2462,
                    438
                ],
                "libwindow": [
                    2467,
                    1478,
                    1289,
                    1482,
                    1102,
                    1486,
                    2523,
                    2551,
                    2584,
                    443
                ],
                "self._get_roll_func": [
                    450
                ],
                "additional_nans": [
                    459,
                    455
                ],
                "np.array": [
                    455
                ],
                "np.concatenate": [
                    459
                ],
                "x": [
                    961,
                    963,
                    1540,
                    459,
                    2799,
                    2800,
                    2802,
                    469,
                    2585,
                    958
                ],
                "np.errstate": [
                    472,
                    2596,
                    2798
                ],
                "values.ndim": [
                    473
                ],
                "np.apply_along_axis": [
                    474,
                    2483
                ],
                "calc": [
                    474,
                    476
                ],
                "np.asarray": [
                    477
                ],
                "self._center_window": [
                    480
                ],
                "self._wrap_results": [
                    484,
                    2485,
                    1038
                ],
                "how": [
                    907,
                    487
                ],
                "self._aggregate": [
                    907,
                    487
                ],
                "args": [
                    1282,
                    907,
                    1174,
                    920,
                    1178,
                    926,
                    1832,
                    943,
                    1849,
                    2109,
                    1854,
                    1855,
                    961,
                    2498,
                    963,
                    1861,
                    1862,
                    2121,
                    1867,
                    1868,
                    1357,
                    2126,
                    2127,
                    2508,
                    1873,
                    1874,
                    2133,
                    2134,
                    1111,
                    2520,
                    1115,
                    1884,
                    2139,
                    1118,
                    2140,
                    2145,
                    1890,
                    2146,
                    487,
                    489,
                    2156,
                    1133,
                    2162,
                    2427
                ],
                "self.apply": [
                    489
                ],
                "agg": [
                    1834,
                    492,
                    915,
                    2429,
                    2111
                ],
                "aggregate": [
                    1832,
                    1834,
                    492,
                    915,
                    2429,
                    2427,
                    2109,
                    2111
                ],
                "dedent": [
                    1415,
                    2056,
                    1551,
                    1040,
                    1296,
                    2066,
                    1181,
                    571,
                    1221,
                    2376,
                    976,
                    2384,
                    855,
                    864,
                    1121,
                    1378,
                    1767,
                    1899,
                    494,
                    1136,
                    1776,
                    2171
                ],
                "_Window": [
                    968,
                    618
                ],
                "validate": [
                    770,
                    1707
                ],
                "import_optional_dependency": [
                    778
                ],
                "sig": [
                    785,
                    844
                ],
                "astype": [
                    808,
                    1027,
                    844
                ],
                "com.asarray_tuplesafe": [
                    808
                ],
                "com": [
                    808,
                    2365,
                    2743
                ],
                "arg_map": [
                    822,
                    814,
                    823
                ],
                "win_args": [
                    827,
                    829,
                    823
                ],
                "_pop_args": [
                    823
                ],
                "win_args.insert": [
                    827
                ],
                "msg": [
                    834,
                    838
                ],
                "all_args": [
                    840,
                    835,
                    839
                ],
                "n": [
                    836,
                    837,
                    838,
                    839
                ],
                "arg_names": [
                    836
                ],
                "all_args.append": [
                    839
                ],
                "kwargs.pop": [
                    936,
                    937,
                    1079,
                    839
                ],
                "_validate_win_type": [
                    842
                ],
                "sig.get_window": [
                    844
                ],
                "_agg_see_also_doc": [
                    1824,
                    899,
                    1767,
                    2056,
                    2376,
                    2419,
                    2101,
                    855
                ],
                "_agg_examples_doc": [
                    864,
                    1825,
                    900,
                    1776,
                    2384,
                    2066,
                    2420,
                    2102
                ],
                "Substitution": [
                    898,
                    1926,
                    2566,
                    1931,
                    1938,
                    917,
                    2198,
                    1944,
                    923,
                    2203,
                    1823,
                    2210,
                    2216,
                    1836,
                    2100,
                    1846,
                    2487,
                    1851,
                    1857,
                    2113,
                    2501,
                    2118,
                    1864,
                    2123,
                    1870,
                    2129,
                    2513,
                    1876,
                    2136,
                    1881,
                    2142,
                    1887,
                    2148,
                    1893,
                    2535,
                    2153,
                    2159,
                    2418,
                    2165
                ],
                "Appender": [
                    1925,
                    1927,
                    2567,
                    905,
                    2568,
                    1932,
                    1939,
                    1940,
                    2197,
                    918,
                    2199,
                    1945,
                    924,
                    2204,
                    2211,
                    2212,
                    1830,
                    2217,
                    1837,
                    1847,
                    2488,
                    2107,
                    1852,
                    1858,
                    1859,
                    2114,
                    2502,
                    2119,
                    2503,
                    1865,
                    2124,
                    1871,
                    2130,
                    2131,
                    2514,
                    1877,
                    2515,
                    2137,
                    1882,
                    2143,
                    1888,
                    2149,
                    1894,
                    1895,
                    2536,
                    2537,
                    2154,
                    2160,
                    2166,
                    2167,
                    2425
                ],
                "nv.validate_window_func": [
                    1282,
                    2498,
                    2520,
                    2508,
                    1133,
                    1357,
                    926,
                    1174,
                    920,
                    1178,
                    1118
                ],
                "nv": [
                    1282,
                    1174,
                    920,
                    1178,
                    926,
                    1854,
                    2498,
                    1861,
                    1867,
                    2508,
                    1357,
                    2126,
                    1873,
                    2133,
                    2520,
                    2139,
                    1884,
                    1118,
                    2145,
                    1890,
                    2156,
                    1133,
                    2162
                ],
                "self._apply": [
                    1219,
                    1411,
                    2499,
                    2533,
                    1496,
                    1179,
                    1292,
                    1134,
                    1358,
                    1842,
                    1175,
                    927,
                    921,
                    1115,
                    1374,
                    1119
                ],
                "GroupByMixin": [
                    946,
                    945,
                    930,
                    947
                ],
                "parent": [
                    936
                ],
                "groupby": [
                    937,
                    938,
                    939,
                    940
                ],
                "obj.obj": [
                    939
                ],
                "self._groupby": [
                    965,
                    940,
                    941,
                    942,
                    1965
                ],
                "self._groupby.mutated": [
                    941
                ],
                "self._groupby.grouper.mutated": [
                    942
                ],
                "self._groupby.grouper": [
                    942
                ],
                "__init__": [
                    2029,
                    943
                ],
                "count": [
                    2116,
                    1543,
                    1544,
                    945,
                    1844
                ],
                "GroupByMixin._dispatch": [
                    945,
                    946,
                    947
                ],
                "corr": [
                    2600,
                    2601,
                    2219,
                    946,
                    1947
                ],
                "cov": [
                    2560,
                    2597,
                    2214,
                    2600,
                    947,
                    1942,
                    2551
                ],
                "x.apply": [
                    963
                ],
                "self._groupby.apply": [
                    965
                ],
                "f": [
                    2626,
                    2533,
                    965,
                    2661,
                    1293,
                    2733,
                    2671,
                    2643,
                    2739,
                    1496,
                    1115
                ],
                "Rolling": [
                    2833,
                    971,
                    1957,
                    1950
                ],
                "_Rolling": [
                    2261,
                    974
                ],
                "b.notna": [
                    1027
                ],
                "self._constructor": [
                    1028
                ],
                "raw": [
                    1096,
                    2121,
                    1100,
                    1110,
                    1849,
                    1115,
                    1086
                ],
                "warnings.warn": [
                    1087
                ],
                "warnings": [
                    2656,
                    2657,
                    2650,
                    2651,
                    1087
                ],
                "self.obj.index": [
                    1696,
                    1101
                ],
                "libwindow.roll_generic": [
                    1102
                ],
                "_require_min_periods": [
                    1412,
                    1287,
                    1293,
                    1359,
                    1375
                ],
                "_zsqrt": [
                    1288,
                    2600,
                    2509
                ],
                "libwindow.roll_var": [
                    1289
                ],
                "ddof": [
                    1891,
                    2214,
                    1544,
                    1289,
                    1293,
                    2157,
                    1359,
                    2163,
                    1942,
                    1885
                ],
                "quantile": [
                    1477,
                    1481,
                    1934,
                    1935,
                    1492,
                    1496,
                    2206,
                    2207
                ],
                "libwindow.roll_max": [
                    1478
                ],
                "libwindow.roll_min": [
                    1482
                ],
                "libwindow.roll_quantile": [
                    1486
                ],
                "interpolation": [
                    2207,
                    1493,
                    1935
                ],
                "other": [
                    1664,
                    1667,
                    1668,
                    2051,
                    2053,
                    2054,
                    2563,
                    1548,
                    2573,
                    2574,
                    1681,
                    2577,
                    1942,
                    1947,
                    2214,
                    2219,
                    2604,
                    2542,
                    2543,
                    2546,
                    1523,
                    1524,
                    1527,
                    1533,
                    1663
                ],
                "pairwise": [
                    1666,
                    2563,
                    2214,
                    2663,
                    2219,
                    1548,
                    2604,
                    2639,
                    2576,
                    1681,
                    2545,
                    1942,
                    1526,
                    1947
                ],
                "X": [
                    2560,
                    2817,
                    1538,
                    2820,
                    1543,
                    1545,
                    2580,
                    2594,
                    2601,
                    2625,
                    2626,
                    2652,
                    2653,
                    2654,
                    2660,
                    2661,
                    2662,
                    2549,
                    2552
                ],
                "X.astype": [
                    1538
                ],
                "Y": [
                    2625,
                    2626,
                    1539,
                    2595,
                    2660,
                    2661,
                    1543,
                    2818,
                    1545,
                    2820,
                    2581,
                    2550,
                    2553,
                    2652,
                    2653,
                    2654
                ],
                "Y.astype": [
                    1539
                ],
                "mean": [
                    1545,
                    1874,
                    1540,
                    2146
                ],
                "x.rolling": [
                    1540
                ],
                "rolling": [
                    2836,
                    1543
                ],
                "bias_adj": [
                    1544,
                    1545
                ],
                "_flex_binary_moment": [
                    2562,
                    2603,
                    1547,
                    1680,
                    2739
                ],
                "other._selected_obj": [
                    1681,
                    2563,
                    1548,
                    2604
                ],
                "_get_cov": [
                    2563,
                    1548
                ],
                "a": [
                    1678,
                    1671
                ],
                "a.rolling": [
                    1671
                ],
                "b.rolling": [
                    1674
                ],
                "a.cov": [
                    1678
                ],
                "a.std": [
                    1678
                ],
                "b.std": [
                    1678
                ],
                "_get_corr": [
                    1681,
                    2604
                ],
                "_Rolling_and_Expanding": [
                    1979,
                    1685
                ],
                "ABCDatetimeIndex": [
                    1689
                ],
                "ABCTimedeltaIndex": [
                    1689
                ],
                "ABCPeriodIndex": [
                    1689
                ],
                "cache_readonly": [
                    1692,
                    1686
                ],
                "Index": [
                    1698
                ],
                "self.obj.empty": [
                    1710
                ],
                "self.is_datetimelike": [
                    1739,
                    1710
                ],
                "ABCDateOffset": [
                    1711
                ],
                "timedelta": [
                    1711
                ],
                "self._validate_monotonic": [
                    1714
                ],
                "freq": [
                    1715,
                    1727
                ],
                "self._validate_freq": [
                    1715
                ],
                "freq.nanos": [
                    1727
                ],
                "self._on.is_monotonic": [
                    1748
                ],
                "formatted": [
                    1749,
                    1750
                ],
                "to_offset": [
                    1759
                ],
                "apply": [
                    2121,
                    1849
                ],
                "nv.validate_rolling_func": [
                    1890,
                    1861,
                    1867,
                    1873,
                    1884,
                    1854
                ],
                "median": [
                    2151,
                    1879
                ],
                "std": [
                    2157,
                    1885,
                    2511
                ],
                "var": [
                    2163,
                    1891
                ],
                "skew": [
                    2169,
                    1897
                ],
                "_agg_doc": [
                    2171,
                    1899,
                    1925,
                    2197
                ],
                "kurt": [
                    1929,
                    2201
                ],
                "_GroupByMixin": [
                    2222,
                    1950
                ],
                "self._groupby.obj": [
                    1965
                ],
                "self._groupby.obj.set_index": [
                    1965
                ],
                "_gotitem": [
                    1967
                ],
                "ndim": [
                    1967
                ],
                "Expanding": [
                    2222,
                    2033,
                    2229,
                    2843,
                    2846
                ],
                "self.obj._get_axis": [
                    2050
                ],
                "length": [
                    2051,
                    2054
                ],
                "nv.validate_expanding_func": [
                    2145,
                    2156,
                    2126,
                    2162,
                    2133,
                    2139
                ],
                "_bias_template": [
                    2232,
                    2515,
                    2503
                ],
                "_pairwise_template": [
                    2568,
                    2241,
                    2537
                ],
                "self.com": [
                    2477,
                    2554,
                    2587,
                    2365,
                    2526
                ],
                "_get_center_of_mass": [
                    2365
                ],
                "span": [
                    2752,
                    2754,
                    2743,
                    2365,
                    2751
                ],
                "halflife": [
                    2755,
                    2756,
                    2758,
                    2743,
                    2365
                ],
                "alpha": [
                    2760,
                    2761,
                    2763,
                    2743,
                    2365
                ],
                "self.adjust": [
                    2367,
                    2478,
                    2555,
                    2588,
                    2527
                ],
                "adjust": [
                    2367
                ],
                "self.ignore_na": [
                    2368,
                    2528,
                    2479,
                    2556,
                    2589
                ],
                "ignore_na": [
                    2368
                ],
                "EWM": [
                    2856,
                    2853,
                    2374
                ],
                "self.var": [
                    2509
                ],
                "bias": [
                    2530,
                    2509,
                    2558
                ],
                "vol": [
                    2511
                ],
                "libwindow.ewmcov": [
                    2584,
                    2523,
                    2551
                ],
                "X._prep_values": [
                    2552,
                    2594
                ],
                "Y._prep_values": [
                    2553,
                    2595
                ],
                "X._wrap_result": [
                    2560,
                    2601
                ],
                "y": [
                    2586
                ],
                "x_values": [
                    2594,
                    2597,
                    2598
                ],
                "y_values": [
                    2595,
                    2597,
                    2599
                ],
                "_cov": [
                    2597,
                    2598,
                    2599
                ],
                "x_var": [
                    2600,
                    2598
                ],
                "y_var": [
                    2600,
                    2599
                ],
                "arg1": [
                    2817,
                    2818,
                    2692,
                    2713,
                    2722,
                    2733,
                    2734,
                    2736,
                    2739,
                    2614,
                    2622,
                    2625,
                    2628,
                    2640,
                    2642,
                    2643,
                    2644,
                    2646,
                    2652,
                    2658,
                    2665,
                    2667,
                    2672,
                    2677,
                    2813,
                    2687
                ],
                "arg2": [
                    2817,
                    2818,
                    2695,
                    2697,
                    2702,
                    2706,
                    2713,
                    2715,
                    2724,
                    2733,
                    2739,
                    2615,
                    2623,
                    2625,
                    2638,
                    2640,
                    2643,
                    2648,
                    2652,
                    2658,
                    2666,
                    2667,
                    2672,
                    2677,
                    2684,
                    2813
                ],
                "_prep_binary": [
                    2672,
                    2625,
                    2733
                ],
                "DataFrame": [
                    2632,
                    2662,
                    2711
                ],
                "data": [
                    2632
                ],
                "frame_template.index": [
                    2632
                ],
                "frame_template": [
                    2632,
                    2634
                ],
                "result.columns": [
                    2722,
                    2633,
                    2634,
                    2692
                ],
                "frame_template.columns": [
                    2634
                ],
                "col": [
                    2659,
                    2660,
                    2661,
                    2734,
                    2642
                ],
                "arg1.columns": [
                    2658,
                    2722,
                    2692,
                    2665,
                    2734,
                    2642,
                    2646,
                    2687
                ],
                "arg1.iloc": [
                    2672,
                    2643,
                    2733
                ],
                "arg2.iloc": [
                    2672,
                    2643
                ],
                "dataframe_from_int_dict": [
                    2736,
                    2644
                ],
                "arg1.columns.is_unique": [
                    2646
                ],
                "arg2.columns.is_unique": [
                    2648
                ],
                "arg2.columns": [
                    2658,
                    2724,
                    2695,
                    2697,
                    2666,
                    2702,
                    2706,
                    2648,
                    2713,
                    2715,
                    2684
                ],
                "warnings.catch_warnings": [
                    2656,
                    2650
                ],
                "warnings.simplefilter": [
                    2657,
                    2651
                ],
                "arg1.align": [
                    2652
                ],
                "res_columns": [
                    2658,
                    2659,
                    2662
                ],
                "arg1.columns.union": [
                    2658
                ],
                "X.index": [
                    2662
                ],
                "defaultdict": [
                    2664
                ],
                "k1": [
                    2665
                ],
                "j": [
                    2666,
                    2667,
                    2669,
                    2671,
                    2672,
                    2684
                ],
                "k2": [
                    2666
                ],
                "result_index": [
                    2724,
                    2697,
                    2702,
                    2706,
                    2677,
                    2678
                ],
                "arg1.index.union": [
                    2677
                ],
                "arg1.index": [
                    2713,
                    2677
                ],
                "arg2.index": [
                    2677
                ],
                "arg2.columns.nlevels": [
                    2695
                ],
                "result.index": [
                    2696,
                    2705,
                    2723,
                    2701
                ],
                "MultiIndex.from_product": [
                    2696,
                    2705,
                    2701
                ],
                "MultiIndex": [
                    2696,
                    2705,
                    2712,
                    2701
                ],
                "arg2.columns.levels": [
                    2697
                ],
                "sort_index": [
                    2704,
                    2699
                ],
                "result.reorder_levels": [
                    2699
                ],
                "result.swaplevel": [
                    2704
                ],
                "result.columns.set_names": [
                    2722
                ],
                "arg1.columns.names": [
                    2722
                ],
                "result.index.set_names": [
                    2723
                ],
                "result_index.names": [
                    2724
                ],
                "arg2.columns.names": [
                    2724
                ],
                "valid_count": [
                    2744,
                    2743
                ],
                "com.count_not_none": [
                    2743
                ],
                "comass": [
                    2754,
                    2759,
                    2763,
                    2767,
                    2743,
                    2748,
                    2749
                ],
                "decay": [
                    2758,
                    2759
                ],
                "np.exp": [
                    2758
                ],
                "np.log": [
                    2758
                ],
                "offset.astype": [
                    2777
                ],
                "p": [
                    2785
                ],
                "_check_func": [
                    2787
                ],
                "np.sqrt": [
                    2799
                ],
                "mask": [
                    2800,
                    2803,
                    2804,
                    2806,
                    2807
                ],
                "mask.values.any": [
                    2803
                ],
                "mask.values": [
                    2803
                ],
                "mask.any": [
                    2806
                ],
                "kwds": [
                    2833,
                    2843,
                    2853,
                    2831
                ],
                "rolling.__doc__": [
                    2836
                ],
                "Window.__doc__": [
                    2836
                ],
                "expanding.__doc__": [
                    2846
                ],
                "expanding": [
                    2846
                ],
                "Expanding.__doc__": [
                    2846
                ],
                "ewm.__doc__": [
                    2856
                ],
                "ewm": [
                    2856
                ],
                "EWM.__doc__": [
                    2856
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_163/pandas/tests/window/test_rolling.py",
                "test_function": "test_readonly_array",
                "test_function_code": "    def test_readonly_array(self):\n        # GH-27766\n        arr = np.array([1, 3, np.nan, 3, 5])\n        arr.setflags(write=False)\n        result = pd.Series(arr).rolling(2).mean()\n        expected = pd.Series([np.nan, 2, np.nan, np.nan, 4])\n        tm.assert_series_equal(result, expected)",
                "test_error": "ValueError: assignment destination is read-only",
                "full_test_error": "self = <pandas.tests.window.test_rolling.TestRolling object at 0x7fe30f4d8430>\n\n    def test_readonly_array(self):\n        # GH-27766\n        arr = np.array([1, 3, np.nan, 3, 5])\n        arr.setflags(write=False)\n>       result = pd.Series(arr).rolling(2).mean()\n\npandas/tests/window/test_rolling.py:334: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/window.py:1874: in mean\n    return super().mean(*args, **kwargs)\npandas/core/window.py:1179: in mean\n    return self._apply(\"roll_mean\", \"mean\", **kwargs)\npandas/core/window.py:427: in _apply\n    values = self._prep_values(b.values)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Rolling [window=2,center=False,axis=0]\nvalues = array([ 1.,  3., nan,  3.,  5.])\n\n    def _prep_values(self, values: Optional[np.ndarray] = None) -> np.ndarray:\n        \"\"\"Convert input to numpy arrays for Cython routines\"\"\"\n        if values is None:\n            values = getattr(self._selected_obj, \"values\", self._selected_obj)\n    \n        # GH #12373 : rolling functions error on float32 data\n        # make sure the data is coerced to float64\n        if is_float_dtype(values.dtype):\n            values = ensure_float64(values)\n        elif is_integer_dtype(values.dtype):\n            values = ensure_float64(values)\n        elif needs_i8_conversion(values.dtype):\n            raise NotImplementedError(\n                \"ops for {action} for this \"\n                \"dtype {dtype} are not \"\n                \"implemented\".format(action=self._window_type, dtype=values.dtype)\n            )\n        else:\n            try:\n                values = ensure_float64(values)\n            except (ValueError, TypeError):\n                raise TypeError(\"cannot handle this type -> {0}\".format(values.dtype))\n    \n        # Always convert inf to nan\n>       values[np.isinf(values)] = np.NaN\nE       ValueError: assignment destination is read-only\n\npandas/core/window.py:250: ValueError",
                "traceback": "pandas/core/window.py:1874: in mean\n    return super().mean(*args, **kwargs)\npandas/core/window.py:1179: in mean\n    return self._apply(\"roll_mean\", \"mean\", **kwargs)\npandas/core/window.py:427: in _apply\n    values = self._prep_values(b.values)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Rolling [window=2,center=False,axis=0]\nvalues = array([ 1.,  3., nan,  3.,  5.])\n\n    def _prep_values(self, values: Optional[np.ndarray] = None) -> np.ndarray:\n        \"\"\"Convert input to numpy arrays for Cython routines\"\"\"\n        if values is None:\n            values = getattr(self._selected_obj, \"values\", self._selected_obj)\n    \n        # GH #12373 : rolling functions error on float32 data\n        # make sure the data is coerced to float64\n        if is_float_dtype(values.dtype):\n            values = ensure_float64(values)\n        elif is_integer_dtype(values.dtype):\n            values = ensure_float64(values)\n        elif needs_i8_conversion(values.dtype):\n            raise NotImplementedError(\n                \"ops for {action} for this \"\n                \"dtype {dtype} are not \"\n                \"implemented\".format(action=self._window_type, dtype=values.dtype)\n            )\n        else:\n            try:\n                values = ensure_float64(values)\n            except (ValueError, TypeError):\n                raise TypeError(\"cannot handle this type -> {0}\".format(values.dtype))\n    \n        # Always convert inf to nan\n>       values[np.isinf(values)] = np.NaN\nE       ValueError: assignment destination is read-only\n\npandas/core/window.py:250: ValueError",
                "test_function_decorators": []
            }
        ]
    }
}