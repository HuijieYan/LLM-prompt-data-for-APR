{
    "1.1.1": "def __new__(\n    cls,\n    data=None,\n    unit=None,\n    freq=None,\n    closed=None,\n    dtype=_TD_DTYPE,\n    copy=False,\n    name=None,\n):\n    name = maybe_extract_name(name, data, cls)\n\n    if is_scalar(data):\n        raise TypeError(\n            f\"{cls.__name__}() must be called with a \"\n            f\"collection of some kind, {repr(data)} was passed\"\n        )\n\n    if unit in {\"Y\", \"y\", \"M\"}:\n        raise ValueError(\n            \"Units 'M' and 'Y' are no longer supported, as they do not \"\n            \"represent unambiguous timedelta values durations.\"\n        )\n\n    if isinstance(data, TimedeltaArray):\n        if copy:\n            data = data.copy()\n        return cls._simple_new(data, name=name, freq=freq)\n\n    if isinstance(data, TimedeltaIndex) and freq is None and name is None:\n        if copy:\n            return data.copy()\n        else:\n            return data._shallow_copy()\n\n    # - Cases checked above all return/raise before reaching here - #\n\n    tdarr = TimedeltaArray._from_sequence(\n        data, freq=freq, unit=unit, dtype=dtype, copy=copy\n    )\n    return cls._simple_new(tdarr, name=name)\n",
    "1.1.2": null,
    "1.2.1": "@inherit_names(['_bool_ops', '_object_ops', '_field_ops', '_datetimelike_ops', '_datetimelike_methods', '_other_ops'], TimedeltaArray)\n@delegate_names(TimedeltaArray, TimedeltaDelegateMixin._delegated_properties, typ='property')\n@delegate_names(TimedeltaArray, TimedeltaDelegateMixin._delegated_methods, typ='method', overwrite=True)\nclass TimedeltaIndex(DatetimeTimedeltaMixin, dtl.TimelikeOps, TimedeltaDelegateMixin)",
    "1.2.2": "Immutable ndarray of timedelta64 data, represented internally as int64, and\nwhich can be boxed to timedelta objects.\n\nParameters\n----------\ndata  : array-like (1-dimensional), optional\n    Optional timedelta-like data to construct index with.\nunit : unit of the arg (D,h,m,s,ms,us,ns) denote the unit, optional\n    Which is an integer/float number.\nfreq : str or pandas offset object, optional\n    One of pandas date offset strings or corresponding objects. The string\n    'infer' can be passed in order to set the frequency of the index as the\n    inferred frequency upon creation.\ncopy  : bool\n    Make a copy of input ndarray.\nname : object\n    Name to be stored in the index.\n\nAttributes\n----------\ndays\nseconds\nmicroseconds\nnanoseconds\ncomponents\ninferred_freq\n\nMethods\n-------\nto_pytimedelta\nto_series\nround\nfloor\nceil\nto_frame\nmean\n\nSee Also\n--------\nIndex : The base pandas Index type.\nTimedelta : Represents a duration between two dates or times.\nDatetimeIndex : Index of datetime64 data.\nPeriodIndex : Index of Period data.\ntimedelta_range : Create a fixed-frequency TimedeltaIndex.\n\nNotes\n-----\nTo learn more about the frequency strings, please see `this link\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.",
    "1.2.3": [
        "_simple_new(cls, values, name=None, freq=None, dtype=_TD_DTYPE)"
    ],
    "1.2.4": null,
    "1.2.5": null,
    "1.3.1": "pandas/core/indexes/timedeltas.py",
    "1.3.2": [
        "_simple_new(cls, values, name=None, freq=None, dtype=_TD_DTYPE)"
    ],
    "1.4.1": [
        "    def test_infer_from_tdi_mismatch(self):\n        # GH#23539\n        # fast-path for invalidating a frequency if the passed data already\n        #  has one and it does not match the `freq` input\n        tdi = pd.timedelta_range(\"1 second\", periods=100, freq=\"1s\")\n\n        msg = (\n            \"Inferred frequency .* from passed values does \"\n            \"not conform to passed frequency\"\n        )\n        with pytest.raises(ValueError, match=msg):\n            TimedeltaIndex(tdi, freq=\"D\")\n\n        with pytest.raises(ValueError, match=msg):\n            # GH#23789\n            TimedeltaArray(tdi, freq=\"D\")\n\n        with pytest.raises(ValueError, match=msg):\n            TimedeltaIndex(tdi._data, freq=\"D\")\n\n        with pytest.raises(ValueError, match=msg):\n            TimedeltaArray(tdi._data, freq=\"D\")"
    ],
    "1.4.2": [
        "pandas/tests/indexes/timedeltas/test_constructors.py"
    ],
    "2.1.1": [
        [
            "E           Failed: DID NOT RAISE <class 'ValueError'>"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.indexes.timedeltas.test_constructors.TestTimedeltaIndex object at 0x11ef783a0>\n\n    def test_infer_from_tdi_mismatch(self):\n        # GH#23539\n        # fast-path for invalidating a frequency if the passed data already\n        #  has one and it does not match the `freq` input\n        tdi = pd.timedelta_range(\"1 second\", periods=100, freq=\"1s\")\n    \n        msg = (\n            \"Inferred frequency .* from passed values does \"\n            \"not conform to passed frequency\"\n        )\n        with pytest.raises(ValueError, match=msg):\n            TimedeltaIndex(tdi, freq=\"D\")\n    \n        with pytest.raises(ValueError, match=msg):\n            # GH#23789\n            TimedeltaArray(tdi, freq=\"D\")\n    \n        with pytest.raises(ValueError, match=msg):\n>           TimedeltaIndex(tdi._data, freq=\"D\")",
            "\npandas/tests/indexes/timedeltas/test_constructors.py:51: Failed"
        ]
    ],
    "2.1.3": [
        [
            {
                "data": {
                    "value": "<TimedeltaArray>\n['00:00:01', '00:00:02', ... , '00:01:40']\nLength: 100, dtype: timedelta64[ns]",
                    "shape": "(100,)",
                    "omitted": true
                },
                "cls.__name__": {
                    "value": "'TimedeltaIndex'",
                    "shape": "14",
                    "omitted": false
                },
                "copy": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "freq": {
                    "value": "'D'",
                    "shape": "1",
                    "omitted": false
                },
                "dtype": {
                    "value": "dtype('<m8[ns]')",
                    "shape": "()",
                    "omitted": false
                }
            },
            {}
        ]
    ],
    "2.1.4": [
        [
            {
                "data": "TimedeltaArray",
                "cls.__name__": "str",
                "copy": "bool",
                "freq": "str",
                "dtype": "dtype"
            },
            {}
        ]
    ],
    "2.1.5": null,
    "2.1.6": null,
    "3.1.1": null,
    "3.1.2": null
}