{
    "pandas:114": {
        "github_issue_title": [
            "Indexing (__getitem__) of DataFrame/Series with ExtensionArray densifies the array\n"
        ],
        "github_issue_description": [
            "I noticed in GeoPandas that filtering a series with a mask \"densifies\" the ExtensionArray (= converting the ExtesionArray to a materialized numpy array), which can potentially be very expensive (if the ExtensionArray doesn't store a numpy array of scalars under the hood).\n\nThis is quite problematic for such a basic operation (and problematic for the next version of GeoPandas, we will probably have to override __getitem__ for this).\n\nExample with pandas itself to see this. I used this small edit to check what call converts to a numpy array:\n\n--- a/pandas/tests/extension/decimal/array.py\n+++ b/pandas/tests/extension/decimal/array.py\n@@ -81,6 +81,13 @@ class DecimalArray(ExtensionArray, ExtensionScalarOpsMixin):\n     def _from_factorized(cls, values, original):\n         return cls(values)\n \n+    def __array__(self, dtype=None):\n+        print(\"__array__ being called from:\")\n+        import inspect\n+        frames = inspect.getouterframes(inspect.currentframe())\n+        for frame in frames[:7]:\n+           print(\"  {0} from {1}\".format(frame.function, frame.filename))\n+        return self._data\n+\nand then you see this:\n\nIn [1]: from pandas.tests.extension.decimal import DecimalArray, make_data \n\nIn [2]: a = DecimalArray(make_data())   \n\nIn [3]: s = pd.Series(a)    \n\nIn [4]: mask = s > 0.5   \n\nIn [5]: subset = s[mask]   \n__array__ being called from:\n  __array__ from /home/joris/scipy/pandas/pandas/tests/extension/decimal/array.py\n  asarray from /home/joris/miniconda3/envs/dev/lib/python3.7/site-packages/numpy/core/_asarray.py\n  to_dense from /home/joris/scipy/pandas/pandas/core/internals/blocks.py\n  get_values from /home/joris/scipy/pandas/pandas/core/internals/managers.py\n  _internal_get_values from /home/joris/scipy/pandas/pandas/core/series.py\n  get_value from /home/joris/scipy/pandas/pandas/core/indexes/base.py\n  __getitem__ from /home/joris/scipy/pandas/pandas/core/series.py\n(s.loc[mask] does not have the problem)\n\nSo this comes from the fact that we first try index.get_value(..) in __getitem__ before doing anything else:\n\npandas/pandas/core/series.py\n\nLines 1075 to 1079 in d134b47\n\n def __getitem__(self, key): \n     key = com.apply_if_callable(key, self) \n     try: \n         result = self.index.get_value(self, key) \n  \nAnd inside Index.get_value, this is calling values_from_object:\n\npandas/pandas/core/indexes/base.py\n\nLines 4620 to 4621 in d134b47\n\n s = com.values_from_object(series) \n k = com.values_from_object(key) \n"
        ]
    }
}