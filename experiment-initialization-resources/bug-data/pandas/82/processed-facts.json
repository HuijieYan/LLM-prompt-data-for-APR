{
    "1.1.1": "def _get_empty_dtype_and_na(join_units):\n    \n    if len(join_units) == 1:\n        blk = join_units[0].block\n        if blk is None:\n            return np.float64, np.nan\n\n    if _is_uniform_reindex(join_units):\n        # FIXME: integrate property\n        empty_dtype = join_units[0].block.dtype\n        upcasted_na = join_units[0].block.fill_value\n        return empty_dtype, upcasted_na\n\n    has_none_blocks = False\n    dtypes = [None] * len(join_units)\n    for i, unit in enumerate(join_units):\n        if unit.block is None:\n            has_none_blocks = True\n        else:\n            dtypes[i] = unit.dtype\n\n    upcast_classes = defaultdict(list)\n    null_upcast_classes = defaultdict(list)\n    for dtype, unit in zip(dtypes, join_units):\n        if dtype is None:\n            continue\n\n        if is_categorical_dtype(dtype):\n            upcast_cls = \"category\"\n        elif is_datetime64tz_dtype(dtype):\n            upcast_cls = \"datetimetz\"\n        elif issubclass(dtype.type, np.bool_):\n            upcast_cls = \"bool\"\n        elif issubclass(dtype.type, np.object_):\n            upcast_cls = \"object\"\n        elif is_datetime64_dtype(dtype):\n            upcast_cls = \"datetime\"\n        elif is_timedelta64_dtype(dtype):\n            upcast_cls = \"timedelta\"\n        elif is_sparse(dtype):\n            upcast_cls = dtype.subtype.name\n        elif is_extension_array_dtype(dtype):\n            upcast_cls = \"object\"\n        elif is_float_dtype(dtype) or is_numeric_dtype(dtype):\n            upcast_cls = dtype.name\n        else:\n            upcast_cls = \"float\"\n\n        # Null blocks should not influence upcast class selection, unless there\n        # are only null blocks, when same upcasting rules must be applied to\n        # null upcast classes.\n        if unit.is_na:\n            null_upcast_classes[upcast_cls].append(dtype)\n        else:\n            upcast_classes[upcast_cls].append(dtype)\n\n    if not upcast_classes:\n        upcast_classes = null_upcast_classes\n\n    # TODO: de-duplicate with maybe_promote?\n    # create the result\n    if \"object\" in upcast_classes:\n        return np.dtype(np.object_), np.nan\n    elif \"bool\" in upcast_classes:\n        if has_none_blocks:\n            return np.dtype(np.object_), np.nan\n        else:\n            return np.dtype(np.bool_), None\n    elif \"category\" in upcast_classes:\n        return np.dtype(np.object_), np.nan\n    elif \"datetimetz\" in upcast_classes:\n        # GH-25014. We use NaT instead of iNaT, since this eventually\n        # ends up in DatetimeArray.take, which does not allow iNaT.\n        dtype = upcast_classes[\"datetimetz\"]\n        return dtype[0], tslibs.NaT\n    elif \"datetime\" in upcast_classes:\n        return np.dtype(\"M8[ns]\"), tslibs.iNaT\n    elif \"timedelta\" in upcast_classes:\n        return np.dtype(\"m8[ns]\"), np.timedelta64(\"NaT\", \"ns\")\n    else:  # pragma\n        try:\n            g = np.find_common_type(upcast_classes, [])\n        except TypeError:\n            # At least one is an ExtensionArray\n            return np.dtype(np.object_), np.nan\n        else:\n            if is_float_dtype(g):\n                return g, g.type(np.nan)\n            elif is_numeric_dtype(g):\n                if has_none_blocks:\n                    return np.float64, np.nan\n                else:\n                    return g, None\n\n    msg = \"invalid dtype determination in get_concat_dtype\"\n    raise AssertionError(msg)\n",
    "1.1.2": "Return dtype and N/A values to use when concatenating specified units.\n\nReturned N/A value may be None which means there was no casting involved.\n\nReturns\n-------\ndtype\nna",
    "1.2.1": "pandas/core/internals/concat.py",
    "1.2.2": "from collections import defaultdict\nimport numpy as np\nfrom pandas._libs import internals as libinternals, tslibs\nfrom pandas.core.dtypes.common import _get_dtype, is_categorical_dtype, is_datetime64_dtype, is_datetime64tz_dtype, is_extension_array_dtype, is_float_dtype, is_numeric_dtype, is_sparse, is_timedelta64_dtype",
    "1.3.1": null,
    "1.3.2": null,
    "1.4.1": null,
    "1.4.2": [
        "_is_uniform_reindex(join_units) -> bool"
    ],
    "1.5.1": [
        "def test_merge_datetime_upcast_dtype():\n    # https://github.com/pandas-dev/pandas/issues/31208\n    df1 = pd.DataFrame({\"x\": [\"a\", \"b\", \"c\"], \"y\": [\"1\", \"2\", \"4\"]})\n    df2 = pd.DataFrame(\n        {\"y\": [\"1\", \"2\", \"3\"], \"z\": pd.to_datetime([\"2000\", \"2001\", \"2002\"])}\n    )\n    result = pd.merge(df1, df2, how=\"left\", on=\"y\")\n    expected = pd.DataFrame(\n        {\n            \"x\": [\"a\", \"b\", \"c\"],\n            \"y\": [\"1\", \"2\", \"4\"],\n            \"z\": pd.to_datetime([\"2000\", \"2001\", \"NaT\"]),\n        }\n    )\n    tm.assert_frame_equal(result, expected)"
    ],
    "1.5.2": [
        "pandas/tests/reshape/merge/test_merge.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: Attributes of DataFrame.iloc[:, 2] (column name=\"z\") are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns]"
        ]
    ],
    "2.1.2": [
        [
            "def test_merge_datetime_upcast_dtype():\n        # https://github.com/pandas-dev/pandas/issues/31208\n        df1 = pd.DataFrame({\"x\": [\"a\", \"b\", \"c\"], \"y\": [\"1\", \"2\", \"4\"]})\n        df2 = pd.DataFrame(\n            {\"y\": [\"1\", \"2\", \"3\"], \"z\": pd.to_datetime([\"2000\", \"2001\", \"2002\"])}\n        )\n        result = pd.merge(df1, df2, how=\"left\", on=\"y\")\n        expected = pd.DataFrame(\n            {\n                \"x\": [\"a\", \"b\", \"c\"],\n                \"y\": [\"1\", \"2\", \"4\"],\n                \"z\": pd.to_datetime([\"2000\", \"2001\", \"NaT\"]),\n            }\n        )\n>       tm.assert_frame_equal(result, expected)",
            "\npandas/tests/reshape/merge/test_merge.py:2171: AssertionError"
        ]
    ],
    "2.2.1": [
        [
            {
                "join_units": {
                    "value": "[JoinUnit(ObjectBlock: slice(0, 2, 1), 2 x 3, dtype: object, {1: array([0, 1, 2])})]",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "blk": {
                    "value": "ObjectBlock: slice(0, 2, 1), 2 x 3, dtype: object",
                    "shape": "(2, 3)",
                    "omitted": false
                },
                "has_none_blocks": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "dtypes": {
                    "value": "[dtype('O')]",
                    "shape": "1",
                    "omitted": false
                },
                "i": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "unit": {
                    "value": "JoinUnit(ObjectBlock: slice(0, 2, 1), 2 x 3, dtype: object, {1: array([0, 1, 2])})",
                    "shape": "(2, 3)",
                    "omitted": false
                },
                "unit.block": {
                    "value": "ObjectBlock: slice(0, 2, 1), 2 x 3, dtype: object",
                    "shape": "(2, 3)",
                    "omitted": false
                },
                "unit.dtype": {
                    "value": "dtype('O')",
                    "shape": "()",
                    "omitted": false
                },
                "upcast_classes": {
                    "value": "defaultdict(<class 'list'>, {'object': [dtype('O')]})",
                    "shape": "1",
                    "omitted": false
                },
                "null_upcast_classes": {
                    "value": "defaultdict(<class 'list'>, {})",
                    "shape": "0",
                    "omitted": false
                },
                "dtype": {
                    "value": "dtype('O')",
                    "shape": "()",
                    "omitted": false
                },
                "upcast_cls": {
                    "value": "'object'",
                    "shape": "6",
                    "omitted": false
                },
                "dtype.name": {
                    "value": "'object'",
                    "shape": "6",
                    "omitted": false
                },
                "unit.is_na": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "join_units": {
                    "value": "[JoinUnit(DatetimeBlock: slice(0, 1, 1), 1 x 3, dtype: datetime64[ns], {1: array([ 0,  1, -1])})]",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "blk": {
                    "value": "DatetimeBlock: slice(0, 1, 1), 1 x 3, dtype: datetime64[ns]",
                    "shape": "(1, 3)",
                    "omitted": false
                },
                "has_none_blocks": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "dtypes": {
                    "value": "[dtype('<M8[ns]')]",
                    "shape": "1",
                    "omitted": false
                },
                "i": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "unit": {
                    "value": "JoinUnit(DatetimeBlock: slice(0, 1, 1), 1 x 3, dtype: datetime64[ns], {1: array([ 0,  1, -1])})",
                    "shape": "(1, 3)",
                    "omitted": false
                },
                "unit.block": {
                    "value": "DatetimeBlock: slice(0, 1, 1), 1 x 3, dtype: datetime64[ns]",
                    "shape": "(1, 3)",
                    "omitted": false
                },
                "unit.dtype": {
                    "value": "dtype('<M8[ns]')",
                    "shape": "()",
                    "omitted": false
                },
                "upcast_classes": {
                    "value": "defaultdict(<class 'list'>, {'datetime': [dtype('<M8[ns]')]})",
                    "shape": "1",
                    "omitted": false
                },
                "null_upcast_classes": {
                    "value": "defaultdict(<class 'list'>, {})",
                    "shape": "0",
                    "omitted": false
                },
                "dtype": {
                    "value": "dtype('<M8[ns]')",
                    "shape": "()",
                    "omitted": false
                },
                "upcast_cls": {
                    "value": "'datetime'",
                    "shape": "8",
                    "omitted": false
                },
                "dtype.name": {
                    "value": "'datetime64[ns]'",
                    "shape": "14",
                    "omitted": false
                },
                "unit.is_na": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            }
        ]
    ],
    "2.2.2": [
        [
            {
                "join_units": "list"
            },
            {
                "blk": "ObjectBlock",
                "has_none_blocks": "bool",
                "dtypes": "list",
                "i": "int",
                "unit": "JoinUnit",
                "unit.block": "ObjectBlock",
                "unit.dtype": "dtype",
                "upcast_classes": "defaultdict",
                "null_upcast_classes": "defaultdict",
                "dtype": "dtype",
                "upcast_cls": "str",
                "dtype.name": "str",
                "unit.is_na": "bool"
            }
        ],
        [
            {
                "join_units": "list"
            },
            {
                "blk": "DatetimeBlock",
                "has_none_blocks": "bool",
                "dtypes": "list",
                "i": "int",
                "unit": "JoinUnit",
                "unit.block": "DatetimeBlock",
                "unit.dtype": "dtype",
                "upcast_classes": "defaultdict",
                "null_upcast_classes": "defaultdict",
                "dtype": "dtype",
                "upcast_cls": "str",
                "dtype.name": "str",
                "unit.is_na": "bool"
            }
        ]
    ],
    "2.3.1": [
        [
            {
                "join_units": {
                    "value": "[JoinUnit(ObjectBlock: slice(0, 2, 1), 2 x 3, dtype: object, {1: array([0, 1, 2])})]",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "blk": {
                    "value": "ObjectBlock: slice(0, 2, 1), 2 x 3, dtype: object",
                    "shape": "(2, 3)",
                    "omitted": false
                },
                "has_none_blocks": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "dtypes": {
                    "value": "[dtype('O')]",
                    "shape": "1",
                    "omitted": false
                },
                "i": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "unit": {
                    "value": "JoinUnit(ObjectBlock: slice(0, 2, 1), 2 x 3, dtype: object, {1: array([0, 1, 2])})",
                    "shape": "(2, 3)",
                    "omitted": false
                },
                "unit.block": {
                    "value": "ObjectBlock: slice(0, 2, 1), 2 x 3, dtype: object",
                    "shape": "(2, 3)",
                    "omitted": false
                },
                "unit.dtype": {
                    "value": "dtype('O')",
                    "shape": "()",
                    "omitted": false
                },
                "upcast_classes": {
                    "value": "defaultdict(<class 'list'>, {'object': [dtype('O')]})",
                    "shape": "1",
                    "omitted": false
                },
                "null_upcast_classes": {
                    "value": "defaultdict(<class 'list'>, {})",
                    "shape": "0",
                    "omitted": false
                },
                "dtype": {
                    "value": "dtype('O')",
                    "shape": "()",
                    "omitted": false
                },
                "upcast_cls": {
                    "value": "'object'",
                    "shape": "6",
                    "omitted": false
                },
                "dtype.name": {
                    "value": "'object'",
                    "shape": "6",
                    "omitted": false
                },
                "unit.is_na": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "join_units": {
                    "value": "[JoinUnit(DatetimeBlock: slice(0, 1, 1), 1 x 3, dtype: datetime64[ns], {1: array([ 0,  1, -1])})]",
                    "shape": "1",
                    "omitted": false
                }
            },
            {
                "blk": {
                    "value": "DatetimeBlock: slice(0, 1, 1), 1 x 3, dtype: datetime64[ns]",
                    "shape": "(1, 3)",
                    "omitted": false
                },
                "has_none_blocks": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "dtypes": {
                    "value": "[dtype('<M8[ns]')]",
                    "shape": "1",
                    "omitted": false
                },
                "i": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "unit": {
                    "value": "JoinUnit(DatetimeBlock: slice(0, 1, 1), 1 x 3, dtype: datetime64[ns], {1: array([ 0,  1, -1])})",
                    "shape": "(1, 3)",
                    "omitted": false
                },
                "unit.block": {
                    "value": "DatetimeBlock: slice(0, 1, 1), 1 x 3, dtype: datetime64[ns]",
                    "shape": "(1, 3)",
                    "omitted": false
                },
                "unit.dtype": {
                    "value": "dtype('<M8[ns]')",
                    "shape": "()",
                    "omitted": false
                },
                "upcast_classes": {
                    "value": "defaultdict(<class 'list'>, {'datetime': [dtype('<M8[ns]')]})",
                    "shape": "1",
                    "omitted": false
                },
                "null_upcast_classes": {
                    "value": "defaultdict(<class 'list'>, {})",
                    "shape": "0",
                    "omitted": false
                },
                "dtype": {
                    "value": "dtype('<M8[ns]')",
                    "shape": "()",
                    "omitted": false
                },
                "upcast_cls": {
                    "value": "'datetime'",
                    "shape": "8",
                    "omitted": false
                },
                "dtype.name": {
                    "value": "'datetime64[ns]'",
                    "shape": "14",
                    "omitted": false
                },
                "unit.is_na": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            }
        ]
    ],
    "2.3.2": [
        [
            {
                "join_units": "list"
            },
            {
                "blk": "ObjectBlock",
                "has_none_blocks": "bool",
                "dtypes": "list",
                "i": "int",
                "unit": "JoinUnit",
                "unit.block": "ObjectBlock",
                "unit.dtype": "dtype",
                "upcast_classes": "defaultdict",
                "null_upcast_classes": "defaultdict",
                "dtype": "dtype",
                "upcast_cls": "str",
                "dtype.name": "str",
                "unit.is_na": "bool"
            }
        ],
        [
            {
                "join_units": "list"
            },
            {
                "blk": "DatetimeBlock",
                "has_none_blocks": "bool",
                "dtypes": "list",
                "i": "int",
                "unit": "JoinUnit",
                "unit.block": "DatetimeBlock",
                "unit.dtype": "dtype",
                "upcast_classes": "defaultdict",
                "null_upcast_classes": "defaultdict",
                "dtype": "dtype",
                "upcast_cls": "str",
                "dtype.name": "str",
                "unit.is_na": "bool"
            }
        ]
    ],
    "3.1.1": [
        "dtypes convert to object on merge on 1.0.0rc0\n"
    ],
    "3.1.2": [
        "dtypes convert to object on merge\nCurrently on 1.0.0rc0, when doing a left merge with datetime64[ns] on the right dataframe, if any rows from the left dataframe don't have a match on the right dataframe, then the result dataframe converts datetime to be object. If all items match, then it will remain as a datetime column. This previously maintained dtype in 0.25.3 and 0.24.2.\n\nIt seems to no longer maintain the dtype and populate values with NaT.\n\nWith 1.0.0rc0, after this I am able to convert to datetime column and it'll properly recognize as a NaT value.\n\nExample with extra value in left dataframe\ndf1 = pd.DataFrame({'x': {0: 'a', 1: 'b', 2:'c'}, 'y': {0: '1', 1: '2', 2:'4'}})\n\ndf2 = pd.DataFrame({'y': {0: '1', 1: '2', 2:'3'}, 'z': {0: '2018-05-01', 1: '2018-05-02', 2:'2018-05-03'}})\ndf2['z'] = df2['z'].astype('datetime64[ns]')\n\nresult = pd.merge(df1, df2, how='left', on='y')\nOutput\n  # 0.24.2\nresult.dtypes\nx            object\ny            object\nz    datetime64[ns]\ndtype: object\n\n  # 0.25.3\nresult.dtypes\nx            object\ny            object\nz    datetime64[ns]\ndtype: object\n\n  # 1.0.0rc0\nresult.dtypes\nx            object\ny            object\nz            object\ndtype: object\n"
    ]
}