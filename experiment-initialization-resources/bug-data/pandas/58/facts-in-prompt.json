{
    "1": "Assume that the following list of imports are available in the current environment, so you don't need to import them when generating a fix.\n```python\nimport numpy as np\nfrom pandas.core.dtypes.common import ensure_int64, ensure_object, ensure_platform_int, is_categorical_dtype, is_datetime64_dtype, is_dict_like, is_dtype_equal, is_extension_array_dtype, is_integer_dtype, is_iterator, is_list_like, is_object_dtype, is_scalar, is_sequence, is_timedelta64_dtype, needs_i8_conversion\nfrom pandas.core.dtypes.dtypes import CategoricalDtype\n```\n\n# The source code of the buggy function\n```python\n# The relative path of the buggy file: pandas/core/arrays/categorical.py\n\n\n\n    # this is the buggy function you need to fix\n    @classmethod\n    def from_codes(cls, codes, categories=None, ordered=None, dtype=None):\n        \"\"\"\n        Make a Categorical type from codes and categories or dtype.\n    \n        This constructor is useful if you already have codes and\n        categories/dtype and so do not need the (computation intensive)\n        factorization step, which is usually done on the constructor.\n    \n        If your data does not follow this convention, please use the normal\n        constructor.\n    \n        Parameters\n        ----------\n        codes : array-like of int\n            An integer array, where each integer points to a category in\n            categories or dtype.categories, or else is -1 for NaN.\n        categories : index-like, optional\n            The categories for the categorical. Items need to be unique.\n            If the categories are not given here, then they must be provided\n            in `dtype`.\n        ordered : bool, optional\n            Whether or not this categorical is treated as an ordered\n            categorical. If not given here or in `dtype`, the resulting\n            categorical will be unordered.\n        dtype : CategoricalDtype or \"category\", optional\n            If :class:`CategoricalDtype`, cannot be used together with\n            `categories` or `ordered`.\n    \n            .. versionadded:: 0.24.0\n    \n               When `dtype` is provided, neither `categories` nor `ordered`\n               should be provided.\n    \n        Returns\n        -------\n        Categorical\n    \n        Examples\n        --------\n        >>> dtype = pd.CategoricalDtype(['a', 'b'], ordered=True)\n        >>> pd.Categorical.from_codes(codes=[0, 1, 0, 1], dtype=dtype)\n        [a, b, a, b]\n        Categories (2, object): [a < b]\n        \"\"\"\n        dtype = CategoricalDtype._from_values_or_dtype(\n            categories=categories, ordered=ordered, dtype=dtype\n        )\n        if dtype.categories is None:\n            msg = (\n                \"The categories must be provided in 'categories' or \"\n                \"'dtype'. Both were None.\"\n            )\n            raise ValueError(msg)\n    \n        codes = np.asarray(codes)  # #21767\n        if len(codes) and not is_integer_dtype(codes):\n            raise ValueError(\"codes need to be array-like integers\")\n    \n        if len(codes) and (codes.max() >= len(dtype.categories) or codes.min() < -1):\n            raise ValueError(\"codes need to be between -1 and len(categories)-1\")\n    \n        return cls(codes, dtype=dtype, fastpath=True)\n    \n```",
    "2": "# The declaration of the class containing the buggy function\nclass Categorical(ExtensionArray, PandasObject):\n    \"\"\"\n    Represent a categorical variable in classic R / S-plus fashion.\n    \n    `Categoricals` can only take on only a limited, and usually fixed, number\n    of possible values (`categories`). In contrast to statistical categorical\n    variables, a `Categorical` might have an order, but numerical operations\n    (additions, divisions, ...) are not possible.\n    \n    All values of the `Categorical` are either in `categories` or `np.nan`.\n    Assigning values outside of `categories` will raise a `ValueError`. Order\n    is defined by the order of the `categories`, not lexical order of the\n    values.\n    \n    Parameters\n    ----------\n    values : list-like\n        The values of the categorical. If categories are given, values not in\n        categories will be replaced with NaN.\n    categories : Index-like (unique), optional\n        The unique categories for this categorical. If not given, the\n        categories are assumed to be the unique values of `values` (sorted, if\n        possible, otherwise in the order in which they appear).\n    ordered : bool, default False\n        Whether or not this categorical is treated as a ordered categorical.\n        If True, the resulting categorical will be ordered.\n        An ordered categorical respects, when sorted, the order of its\n        `categories` attribute (which in turn is the `categories` argument, if\n        provided).\n    dtype : CategoricalDtype\n        An instance of ``CategoricalDtype`` to use for this categorical.\n    \n        .. versionadded:: 0.21.0\n    \n    Attributes\n    ----------\n    categories : Index\n        The categories of this categorical\n    codes : ndarray\n        The codes (integer positions, which point to the categories) of this\n        categorical, read only.\n    ordered : bool\n        Whether or not this Categorical is ordered.\n    dtype : CategoricalDtype\n        The instance of ``CategoricalDtype`` storing the ``categories``\n        and ``ordered``.\n    \n        .. versionadded:: 0.21.0\n    \n    Methods\n    -------\n    from_codes\n    __array__\n    \n    Raises\n    ------\n    ValueError\n        If the categories do not validate.\n    TypeError\n        If an explicit ``ordered=True`` is given but no `categories` and the\n        `values` are not sortable.\n    \n    See Also\n    --------\n    CategoricalDtype : Type for categorical data.\n    CategoricalIndex : An Index with an underlying ``Categorical``.\n    \n    Notes\n    -----\n    See the `user guide\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html>`_\n    for more.\n    \n    Examples\n    --------\n    >>> pd.Categorical([1, 2, 3, 1, 2, 3])\n    [1, 2, 3, 1, 2, 3]\n    Categories (3, int64): [1, 2, 3]\n    \n    >>> pd.Categorical(['a', 'b', 'c', 'a', 'b', 'c'])\n    [a, b, c, a, b, c]\n    Categories (3, object): [a, b, c]\n    \n    Ordered `Categoricals` can be sorted according to the custom order\n    of the categories and can have a min and max value.\n    \n    >>> c = pd.Categorical(['a', 'b', 'c', 'a', 'b', 'c'], ordered=True,\n    ...                    categories=['c', 'b', 'a'])\n    >>> c\n    [a, b, c, a, b, c]\n    Categories (3, object): [c < b < a]\n    >>> c.min()\n    'c'\n    \"\"\"\n\n\n",
    "3": "# This function from the same file, but not the same class, is called by the buggy function\ndef categories(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef categories(self, categories):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef ordered(self) -> Ordered:\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef dtype(self) -> CategoricalDtype:\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef min(self, skipna=True):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef max(self, skipna=True):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef codes(self):\n    # Please ignore the body of this function\n\n    # This function from the same class is called by the buggy function\n    def categories(self):\n        # Please ignore the body of this function\n\n    # This function from the same class is called by the buggy function\n    def categories(self, categories):\n        # Please ignore the body of this function\n\n    # This function from the same class is called by the buggy function\n    def ordered(self) -> Ordered:\n        # Please ignore the body of this function\n\n    # This function from the same class is called by the buggy function\n    def dtype(self) -> CategoricalDtype:\n        # Please ignore the body of this function\n\n    # This function from the same class is called by the buggy function\n    def min(self, skipna=True):\n        # Please ignore the body of this function\n\n    # This function from the same class is called by the buggy function\n    def max(self, skipna=True):\n        # Please ignore the body of this function\n\n",
    "4": "# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/arrays/categorical/test_constructors.py\n\n    def test_from_codes_with_nullable_int(self):\n        codes = pd.array([0, 1], dtype=\"Int64\")\n        categories = [\"a\", \"b\"]\n\n        result = Categorical.from_codes(codes, categories=categories)\n        expected = Categorical.from_codes(codes.to_numpy(int), categories=categories)\n\n        tm.assert_categorical_equal(result, expected)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/arrays/categorical/test_constructors.py\n\n    def test_from_codes_with_nullable_int_na_raises(self):\n        codes = pd.array([0, None], dtype=\"Int64\")\n        categories = [\"a\", \"b\"]\n\n        msg = \"codes cannot contain NA values\"\n        with pytest.raises(ValueError, match=msg):\n            Categorical.from_codes(codes, categories=categories)\n```\n\n\n",
    "5": "## The error message from the failing test\n```text\nself = <pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors object at 0x7fc9d5f153a0>\n\n    def test_from_codes_with_nullable_int(self):\n        codes = pd.array([0, 1], dtype=\"Int64\")\n        categories = [\"a\", \"b\"]\n    \n>       result = Categorical.from_codes(codes, categories=categories)\n\npandas/tests/arrays/categorical/test_constructors.py:567: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'pandas.core.arrays.categorical.Categorical'>\ncodes = array([0, 1], dtype=object), categories = ['a', 'b'], ordered = None\ndtype = CategoricalDtype(categories=['a', 'b'], ordered=None)\n\n    @classmethod\n    def from_codes(cls, codes, categories=None, ordered=None, dtype=None):\n        \"\"\"\n        Make a Categorical type from codes and categories or dtype.\n    \n        This constructor is useful if you already have codes and\n        categories/dtype and so do not need the (computation intensive)\n        factorization step, which is usually done on the constructor.\n    \n        If your data does not follow this convention, please use the normal\n        constructor.\n    \n        Parameters\n        ----------\n        codes : array-like of int\n            An integer array, where each integer points to a category in\n            categories or dtype.categories, or else is -1 for NaN.\n        categories : index-like, optional\n            The categories for the categorical. Items need to be unique.\n            If the categories are not given here, then they must be provided\n            in `dtype`.\n        ordered : bool, optional\n            Whether or not this categorical is treated as an ordered\n            categorical. If not given here or in `dtype`, the resulting\n            categorical will be unordered.\n        dtype : CategoricalDtype or \"category\", optional\n            If :class:`CategoricalDtype`, cannot be used together with\n            `categories` or `ordered`.\n    \n            .. versionadded:: 0.24.0\n    \n               When `dtype` is provided, neither `categories` nor `ordered`\n               should be provided.\n    \n        Returns\n        -------\n        Categorical\n    \n        Examples\n        --------\n        >>> dtype = pd.CategoricalDtype(['a', 'b'], ordered=True)\n        >>> pd.Categorical.from_codes(codes=[0, 1, 0, 1], dtype=dtype)\n        [a, b, a, b]\n        Categories (2, object): [a < b]\n        \"\"\"\n        dtype = CategoricalDtype._from_values_or_dtype(\n            categories=categories, ordered=ordered, dtype=dtype\n        )\n        if dtype.categories is None:\n            msg = (\n                \"The categories must be provided in 'categories' or \"\n                \"'dtype'. Both were None.\"\n            )\n            raise ValueError(msg)\n    \n        codes = np.asarray(codes)  # #21767\n        if len(codes) and not is_integer_dtype(codes):\n>           raise ValueError(\"codes need to be array-like integers\")\nE           ValueError: codes need to be array-like integers\n\npandas/core/arrays/categorical.py:649: ValueError\n\n```\n## The error message from the failing test\n```text\nself = <pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors object at 0x7fc9d5bf4d90>\n\n    def test_from_codes_with_nullable_int_na_raises(self):\n        codes = pd.array([0, None], dtype=\"Int64\")\n        categories = [\"a\", \"b\"]\n    \n        msg = \"codes cannot contain NA values\"\n        with pytest.raises(ValueError, match=msg):\n>           Categorical.from_codes(codes, categories=categories)\n\npandas/tests/arrays/categorical/test_constructors.py:578: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'pandas.core.arrays.categorical.Categorical'>\ncodes = array([0, <NA>], dtype=object), categories = ['a', 'b'], ordered = None\ndtype = CategoricalDtype(categories=['a', 'b'], ordered=None)\n\n    @classmethod\n    def from_codes(cls, codes, categories=None, ordered=None, dtype=None):\n        \"\"\"\n        Make a Categorical type from codes and categories or dtype.\n    \n        This constructor is useful if you already have codes and\n        categories/dtype and so do not need the (computation intensive)\n        factorization step, which is usually done on the constructor.\n    \n        If your data does not follow this convention, please use the normal\n        constructor.\n    \n        Parameters\n        ----------\n        codes : array-like of int\n            An integer array, where each integer points to a category in\n            categories or dtype.categories, or else is -1 for NaN.\n        categories : index-like, optional\n            The categories for the categorical. Items need to be unique.\n            If the categories are not given here, then they must be provided\n            in `dtype`.\n        ordered : bool, optional\n            Whether or not this categorical is treated as an ordered\n            categorical. If not given here or in `dtype`, the resulting\n            categorical will be unordered.\n        dtype : CategoricalDtype or \"category\", optional\n            If :class:`CategoricalDtype`, cannot be used together with\n            `categories` or `ordered`.\n    \n            .. versionadded:: 0.24.0\n    \n               When `dtype` is provided, neither `categories` nor `ordered`\n               should be provided.\n    \n        Returns\n        -------\n        Categorical\n    \n        Examples\n        --------\n        >>> dtype = pd.CategoricalDtype(['a', 'b'], ordered=True)\n        >>> pd.Categorical.from_codes(codes=[0, 1, 0, 1], dtype=dtype)\n        [a, b, a, b]\n        Categories (2, object): [a < b]\n        \"\"\"\n        dtype = CategoricalDtype._from_values_or_dtype(\n            categories=categories, ordered=ordered, dtype=dtype\n        )\n        if dtype.categories is None:\n            msg = (\n                \"The categories must be provided in 'categories' or \"\n                \"'dtype'. Both were None.\"\n            )\n            raise ValueError(msg)\n    \n        codes = np.asarray(codes)  # #21767\n        if len(codes) and not is_integer_dtype(codes):\n>           raise ValueError(\"codes need to be array-like integers\")\nE           ValueError: codes need to be array-like integers\n\npandas/core/arrays/categorical.py:649: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <pandas.tests.arrays.categorical.test_constructors.TestCategoricalConstructors object at 0x7fc9d5bf4d90>\n\n    def test_from_codes_with_nullable_int_na_raises(self):\n        codes = pd.array([0, None], dtype=\"Int64\")\n        categories = [\"a\", \"b\"]\n    \n        msg = \"codes cannot contain NA values\"\n        with pytest.raises(ValueError, match=msg):\n>           Categorical.from_codes(codes, categories=categories)\nE           AssertionError: Pattern 'codes cannot contain NA values' does not match 'codes need to be array-like integers'\n\npandas/tests/arrays/categorical/test_constructors.py:578: AssertionError\n\n```\n",
    "6": "# Runtime values and types of variables inside the buggy function\nEach case below includes input parameter values and types, and the values and types of relevant variables at the function's return, derived from executing failing tests. If an input parameter is not reflected in the output, it is assumed to remain unchanged. Note that some of these values at the function's return might be incorrect. Analyze these cases to identify why the tests are failing to effectively fix the bug.\n\n## Case 1\n### Runtime values and types of the input parameters of the buggy function\ncategories, value: `['a', 'b']`, type: `list`\n\ncodes, value: `<IntegerArray>\n[0, 1]\nLength: 2, dtype: Int64`, type: `IntegerArray`\n\n### Runtime values and types of variables right before the buggy function's return\ndtype, value: `CategoricalDtype(categories=['a', 'b'], ordered=None)`, type: `CategoricalDtype`\n\ndtype.categories, value: `Index(['a', 'b'], dtype='object')`, type: `Index`\n\ncodes, value: `array([0, 1])`, type: `ndarray`\n\n## Case 2\n### Runtime values and types of the input parameters of the buggy function\ncategories, value: `['a', 'b']`, type: `list`\n\ncodes, value: `array([0, 1])`, type: `ndarray`\n\n### Runtime values and types of variables right before the buggy function's return\ndtype, value: `CategoricalDtype(categories=['a', 'b'], ordered=None)`, type: `CategoricalDtype`\n\ndtype.categories, value: `Index(['a', 'b'], dtype='object')`, type: `Index`\n\n",
    "7": "",
    "8": "# A GitHub issue for this bug\n\nThe issue's title:\n```text\nCategorical.from_codes fails for the (new nullable) Int64 dtype\n```\n\nThe issue's detailed description:\n```text\nCode Sample, a copy-pastable example if possible\n>>> import pandas as pd\n>>> codes = pd.Series([1, 0], dtype=\"Int64\")\n>>> pd.Categorical.from_codes(codes, categories=[\"foo\", \"bar\"])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \".../lib/python3.7/site-packages/pandas/core/arrays/categorical.py\", line 649, in from_codes\n    raise ValueError(\"codes need to be array-like integers\")\nValueError: codes need to be array-like integers\nProblem description\nCategories.from_codes works with Series with the Numpy \"int64\" dtype.\n\n>>> codes = pd.Series([1, 0])\n>>> pd.Categorical.from_codes(codes, categories=[\"foo\", \"bar\"])\n[bar, foo]\nCategories (2, object): [foo, bar]\nI would expect that it will work with the new Pandas \"Int64\" dtype.\n\nExpected Output\n```\n\n",
    "9": "Your output should follow these steps:\n1. Analyze the buggy function and its relationship with the buggy class, related functions, test code, corresponding error message, the actual input/output variable information, the github issue.\n2. Identify a potential error location within the buggy function.\n3. Elucidate the bug's cause using:\n   (a) The buggy function, \n   (b) The buggy class docs, \n   (c) The related functions, \n   (d) The failing test, \n   (e) The corresponding error message, \n   (f) The actual input/output variable values, \n   (g) The GitHub Issue information\n\n4. Suggest approaches for fixing the bug.\n5. Present the corrected code for the buggy function such that it satisfied the following:\n   (a) the program passes the failing test, \n   (b) successfully resolves the issue posted in GitHub\n\n",
    "1.3.3": "Assume that the following list of imports are available in the current environment, so you don't need to import them when generating a fix.\n```python\nimport numpy as np\nfrom pandas.core.dtypes.common import ensure_int64, ensure_object, ensure_platform_int, is_categorical_dtype, is_datetime64_dtype, is_dict_like, is_dtype_equal, is_extension_array_dtype, is_integer_dtype, is_iterator, is_list_like, is_object_dtype, is_scalar, is_sequence, is_timedelta64_dtype, needs_i8_conversion\nfrom pandas.core.dtypes.dtypes import CategoricalDtype\n```\n\n",
    "source_code_body": "# This function from the same file, but not the same class, is called by the buggy function\ndef categories(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef categories(self, categories):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef ordered(self) -> Ordered:\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef dtype(self) -> CategoricalDtype:\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef min(self, skipna=True):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef max(self, skipna=True):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef codes(self):\n    # Please ignore the body of this function\n\n# The declaration of the class containing the buggy function\nclass Categorical(ExtensionArray, PandasObject):\n    \"\"\"\n    Represent a categorical variable in classic R / S-plus fashion.\n    \n    `Categoricals` can only take on only a limited, and usually fixed, number\n    of possible values (`categories`). In contrast to statistical categorical\n    variables, a `Categorical` might have an order, but numerical operations\n    (additions, divisions, ...) are not possible.\n    \n    All values of the `Categorical` are either in `categories` or `np.nan`.\n    Assigning values outside of `categories` will raise a `ValueError`. Order\n    is defined by the order of the `categories`, not lexical order of the\n    values.\n    \n    Parameters\n    ----------\n    values : list-like\n        The values of the categorical. If categories are given, values not in\n        categories will be replaced with NaN.\n    categories : Index-like (unique), optional\n        The unique categories for this categorical. If not given, the\n        categories are assumed to be the unique values of `values` (sorted, if\n        possible, otherwise in the order in which they appear).\n    ordered : bool, default False\n        Whether or not this categorical is treated as a ordered categorical.\n        If True, the resulting categorical will be ordered.\n        An ordered categorical respects, when sorted, the order of its\n        `categories` attribute (which in turn is the `categories` argument, if\n        provided).\n    dtype : CategoricalDtype\n        An instance of ``CategoricalDtype`` to use for this categorical.\n    \n        .. versionadded:: 0.21.0\n    \n    Attributes\n    ----------\n    categories : Index\n        The categories of this categorical\n    codes : ndarray\n        The codes (integer positions, which point to the categories) of this\n        categorical, read only.\n    ordered : bool\n        Whether or not this Categorical is ordered.\n    dtype : CategoricalDtype\n        The instance of ``CategoricalDtype`` storing the ``categories``\n        and ``ordered``.\n    \n        .. versionadded:: 0.21.0\n    \n    Methods\n    -------\n    from_codes\n    __array__\n    \n    Raises\n    ------\n    ValueError\n        If the categories do not validate.\n    TypeError\n        If an explicit ``ordered=True`` is given but no `categories` and the\n        `values` are not sortable.\n    \n    See Also\n    --------\n    CategoricalDtype : Type for categorical data.\n    CategoricalIndex : An Index with an underlying ``Categorical``.\n    \n    Notes\n    -----\n    See the `user guide\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html>`_\n    for more.\n    \n    Examples\n    --------\n    >>> pd.Categorical([1, 2, 3, 1, 2, 3])\n    [1, 2, 3, 1, 2, 3]\n    Categories (3, int64): [1, 2, 3]\n    \n    >>> pd.Categorical(['a', 'b', 'c', 'a', 'b', 'c'])\n    [a, b, c, a, b, c]\n    Categories (3, object): [a, b, c]\n    \n    Ordered `Categoricals` can be sorted according to the custom order\n    of the categories and can have a min and max value.\n    \n    >>> c = pd.Categorical(['a', 'b', 'c', 'a', 'b', 'c'], ordered=True,\n    ...                    categories=['c', 'b', 'a'])\n    >>> c\n    [a, b, c, a, b, c]\n    Categories (3, object): [c < b < a]\n    >>> c.min()\n    'c'\n    \"\"\"\n\n\n    # This function from the same class is called by the buggy function\n    def categories(self):\n        # Please ignore the body of this function\n\n    # This function from the same class is called by the buggy function\n    def categories(self, categories):\n        # Please ignore the body of this function\n\n    # This function from the same class is called by the buggy function\n    def ordered(self) -> Ordered:\n        # Please ignore the body of this function\n\n    # This function from the same class is called by the buggy function\n    def dtype(self) -> CategoricalDtype:\n        # Please ignore the body of this function\n\n    # This function from the same class is called by the buggy function\n    def min(self, skipna=True):\n        # Please ignore the body of this function\n\n    # This function from the same class is called by the buggy function\n    def max(self, skipna=True):\n        # Please ignore the body of this function\n\n\n\n    # this is the buggy function you need to fix\n    @classmethod\n    def from_codes(cls, codes, categories=None, ordered=None, dtype=None):\n        \"\"\"\n        Make a Categorical type from codes and categories or dtype.\n    \n        This constructor is useful if you already have codes and\n        categories/dtype and so do not need the (computation intensive)\n        factorization step, which is usually done on the constructor.\n    \n        If your data does not follow this convention, please use the normal\n        constructor.\n    \n        Parameters\n        ----------\n        codes : array-like of int\n            An integer array, where each integer points to a category in\n            categories or dtype.categories, or else is -1 for NaN.\n        categories : index-like, optional\n            The categories for the categorical. Items need to be unique.\n            If the categories are not given here, then they must be provided\n            in `dtype`.\n        ordered : bool, optional\n            Whether or not this categorical is treated as an ordered\n            categorical. If not given here or in `dtype`, the resulting\n            categorical will be unordered.\n        dtype : CategoricalDtype or \"category\", optional\n            If :class:`CategoricalDtype`, cannot be used together with\n            `categories` or `ordered`.\n    \n            .. versionadded:: 0.24.0\n    \n               When `dtype` is provided, neither `categories` nor `ordered`\n               should be provided.\n    \n        Returns\n        -------\n        Categorical\n    \n        Examples\n        --------\n        >>> dtype = pd.CategoricalDtype(['a', 'b'], ordered=True)\n        >>> pd.Categorical.from_codes(codes=[0, 1, 0, 1], dtype=dtype)\n        [a, b, a, b]\n        Categories (2, object): [a < b]\n        \"\"\"\n        dtype = CategoricalDtype._from_values_or_dtype(\n            categories=categories, ordered=ordered, dtype=dtype\n        )\n        if dtype.categories is None:\n            msg = (\n                \"The categories must be provided in 'categories' or \"\n                \"'dtype'. Both were None.\"\n            )\n            raise ValueError(msg)\n    \n        codes = np.asarray(codes)  # #21767\n        if len(codes) and not is_integer_dtype(codes):\n            raise ValueError(\"codes need to be array-like integers\")\n    \n        if len(codes) and (codes.max() >= len(dtype.categories) or codes.min() < -1):\n            raise ValueError(\"codes need to be between -1 and len(categories)-1\")\n    \n        return cls(codes, dtype=dtype, fastpath=True)\n    \n"
}