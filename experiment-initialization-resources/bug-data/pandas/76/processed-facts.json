{
    "1.1.1": "def _try_convert_data(self, name, data, use_dtypes=True, convert_dates=True):\n    \n\n    # don't try to coerce, unless a force conversion\n    if use_dtypes:\n        if not self.dtype:\n            return data, False\n        elif self.dtype is True:\n            pass\n        else:\n            # dtype to force\n            dtype = (\n                self.dtype.get(name) if isinstance(self.dtype, dict) else self.dtype\n            )\n            if dtype is not None:\n                try:\n                    dtype = np.dtype(dtype)\n                    return data.astype(dtype), True\n                except (TypeError, ValueError):\n                    return data, False\n\n    if convert_dates:\n        new_data, result = self._try_convert_to_date(data)\n        if result:\n            return new_data, True\n\n    result = False\n\n    if data.dtype == \"object\":\n\n        # try float\n        try:\n            data = data.astype(\"float64\")\n            result = True\n        except (TypeError, ValueError):\n            pass\n\n    if data.dtype.kind == \"f\":\n\n        if data.dtype != \"float64\":\n\n            # coerce floats to 64\n            try:\n                data = data.astype(\"float64\")\n                result = True\n            except (TypeError, ValueError):\n                pass\n\n    # don't coerce 0-len data\n    if len(data) and (data.dtype == \"float\" or data.dtype == \"object\"):\n\n        # coerce ints if we can\n        try:\n            new_data = data.astype(\"int64\")\n            if (new_data == data).all():\n                data = new_data\n                result = True\n        except (TypeError, ValueError):\n            pass\n\n    # coerce ints to 64\n    if data.dtype == \"int\":\n\n        # coerce floats to 64\n        try:\n            data = data.astype(\"int64\")\n            result = True\n        except (TypeError, ValueError):\n            pass\n\n    return data, result\n",
    "1.1.2": "Try to parse a ndarray like into a column by inferring dtype.",
    "1.2.1": "pandas/io/json/_json.py",
    "1.2.2": "import numpy as np",
    "1.3.1": "class Parser()",
    "1.3.2": null,
    "1.4.1": [
        "_try_convert_to_date(self, data)"
    ],
    "1.4.2": null,
    "1.5.1": [
        "    def test_frame_int_overflow(self):\n        # GH 30320\n        encoded_json = json.dumps([{\"col\": \"31900441201190696999\"}, {\"col\": \"Text\"}])\n        expected = DataFrame({\"col\": [\"31900441201190696999\", \"Text\"]})\n        result = read_json(encoded_json)\n        tm.assert_frame_equal(result, expected)"
    ],
    "1.5.2": [
        "pandas/tests/io/json/test_pandas.py"
    ],
    "2.1.1": [
        [
            "E   OverflowError: Python int too large to convert to C long"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.io.json.test_pandas.TestPandasContainer object at 0x7f49e8eda2e0>\n\n    def test_frame_int_overflow(self):\n        # GH 30320\n        encoded_json = json.dumps([{\"col\": \"31900441201190696999\"}, {\"col\": \"Text\"}])\n        expected = DataFrame({\"col\": [\"31900441201190696999\", \"Text\"]})\n>       result = read_json(encoded_json)\n\npandas/tests/io/json/test_pandas.py:1648: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/util/_decorators.py:214: in wrapper\n    return func(*args, **kwargs)\npandas/io/json/_json.py:614: in read_json\n    result = json_reader.read()\npandas/io/json/_json.py:737: in read\n    obj = self._get_object_parser(self.data)\npandas/io/json/_json.py:759: in _get_object_parser\n    obj = FrameParser(json, **kwargs).parse()\npandas/io/json/_json.py:869: in parse\n    self._try_convert_types()\npandas/io/json/_json.py:1148: in _try_convert_types\n    self._process_converter(\npandas/io/json/_json.py:1129: in _process_converter\n    new_data, result = f(col, c)\npandas/io/json/_json.py:1149: in <lambda>\n    lambda col, c: self._try_convert_data(col, c, convert_dates=False)\npandas/io/json/_json.py:941: in _try_convert_data\n    new_data = data.astype(\"int64\")\npandas/core/generic.py:5510: in astype\n    new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors)\npandas/core/internals/managers.py:559: in astype\n    return self.apply(\"astype\", dtype=dtype, copy=copy, errors=errors)\npandas/core/internals/managers.py:419: in apply\n    applied = getattr(b, f)(**kwargs)\npandas/core/internals/blocks.py:629: in astype\n    values = astype_nansafe(vals1d, dtype, copy=True)\npandas/core/dtypes/cast.py:874: in astype_nansafe\n    return lib.astype_intsafe(arr.ravel(), dtype).reshape(arr.shape)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   result[i] = val",
            "\npandas/_libs/lib.pyx:560: OverflowError"
        ]
    ],
    "2.2.1": [
        [
            {
                "use_dtypes": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.dtype": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "data": {
                    "value": "RangeIndex(start=0, stop=2, step=1)",
                    "shape": "(2,)",
                    "omitted": false
                },
                "name": {
                    "value": "'index'",
                    "shape": "5",
                    "omitted": false
                },
                "convert_dates": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "data.dtype": {
                    "value": "dtype('int64')",
                    "shape": "()",
                    "omitted": false
                }
            },
            {
                "new_data": {
                    "value": "RangeIndex(start=0, stop=2, step=1)",
                    "shape": "(2,)",
                    "omitted": false
                },
                "result": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "use_dtypes": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.dtype": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "data": {
                    "value": "Index(['col'], dtype='object')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "name": {
                    "value": "'columns'",
                    "shape": "7",
                    "omitted": false
                },
                "convert_dates": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "data.dtype": {
                    "value": "dtype('O')",
                    "shape": "()",
                    "omitted": false
                }
            },
            {
                "new_data": {
                    "value": "Index(['col'], dtype='object')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "result": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            }
        ]
    ],
    "2.2.2": [
        [
            {
                "use_dtypes": "bool",
                "self.dtype": "bool",
                "data": "RangeIndex",
                "name": "str",
                "convert_dates": "bool",
                "data.dtype": "dtype"
            },
            {
                "new_data": "RangeIndex",
                "result": "bool"
            }
        ],
        [
            {
                "use_dtypes": "bool",
                "self.dtype": "bool",
                "data": "Index",
                "name": "str",
                "convert_dates": "bool",
                "data.dtype": "dtype"
            },
            {
                "new_data": "Index",
                "result": "bool"
            }
        ]
    ],
    "2.3.1": [
        [
            {
                "use_dtypes": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.dtype": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "data": {
                    "value": "RangeIndex(start=0, stop=2, step=1)",
                    "shape": "(2,)",
                    "omitted": false
                },
                "name": {
                    "value": "'index'",
                    "shape": "5",
                    "omitted": false
                },
                "convert_dates": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "data.dtype": {
                    "value": "dtype('int64')",
                    "shape": "()",
                    "omitted": false
                }
            },
            {
                "new_data": {
                    "value": "RangeIndex(start=0, stop=2, step=1)",
                    "shape": "(2,)",
                    "omitted": false
                },
                "result": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "use_dtypes": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "self.dtype": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "data": {
                    "value": "Index(['col'], dtype='object')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "name": {
                    "value": "'columns'",
                    "shape": "7",
                    "omitted": false
                },
                "convert_dates": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "data.dtype": {
                    "value": "dtype('O')",
                    "shape": "()",
                    "omitted": false
                }
            },
            {
                "new_data": {
                    "value": "Index(['col'], dtype='object')",
                    "shape": "(1,)",
                    "omitted": false
                },
                "result": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "use_dtypes": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "self.dtype": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "data": {
                    "value": "0    31900441201190696999\n1                    Text\nName: col, dtype: object",
                    "shape": "(2,)",
                    "omitted": false
                },
                "name": {
                    "value": "'col'",
                    "shape": "3",
                    "omitted": false
                },
                "convert_dates": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "data.dtype": {
                    "value": "dtype('O')",
                    "shape": "()",
                    "omitted": false
                }
            },
            {
                "result": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            }
        ]
    ],
    "2.3.2": [
        [
            {
                "use_dtypes": "bool",
                "self.dtype": "bool",
                "data": "RangeIndex",
                "name": "str",
                "convert_dates": "bool",
                "data.dtype": "dtype"
            },
            {
                "new_data": "RangeIndex",
                "result": "bool"
            }
        ],
        [
            {
                "use_dtypes": "bool",
                "self.dtype": "bool",
                "data": "Index",
                "name": "str",
                "convert_dates": "bool",
                "data.dtype": "dtype"
            },
            {
                "new_data": "Index",
                "result": "bool"
            }
        ],
        [
            {
                "use_dtypes": "bool",
                "self.dtype": "bool",
                "data": "Series",
                "name": "str",
                "convert_dates": "bool",
                "data.dtype": "dtype"
            },
            {
                "result": "bool"
            }
        ]
    ],
    "3.1.1": [
        "Read_json overflow error when json contains big number strings\n"
    ],
    "3.1.2": [
        "Code Sample, a copy-pastable example if possible\nimport json\nimport pandas as pd\n\ntest_data = [{\"col\": \"31900441201190696999\"}, {\"col\": \"Text\"}]\ntest_json = json.dumps(test_data)\npd.read_json(test_json)\nProblem description\nThe current behaviour doesn't return a dateframe for a valid JSON. Note when the number is smaller, it works fine. It also works when only big numbers are present. It would be cool to have it work with big numbers as it works for small numbers.\n\nExpected Output\nA dataframe with a number and string\n\n       col\n0  3.190044e+19\n1     Text\n"
    ]
}