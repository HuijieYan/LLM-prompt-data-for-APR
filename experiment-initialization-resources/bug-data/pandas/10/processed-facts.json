{
    "1.1.1": "def putmask(\n    self, mask, new, inplace: bool = False, axis: int = 0, transpose: bool = False,\n) -> List[\"Block\"]:\n    \n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    mask = _extract_bool_array(mask)\n\n    new_values = self.values if inplace else self.values.copy()\n\n    if isinstance(new, np.ndarray) and len(new) == len(mask):\n        new = new[mask]\n\n    mask = _safe_reshape(mask, new_values.shape)\n\n    new_values[mask] = new\n    return [self.make_block(values=new_values)]\n",
    "1.1.2": "See Block.putmask.__doc__",
    "1.2.1": "pandas/core/internals/blocks.py",
    "1.2.2": "from typing import Any, List\nimport numpy as np\nfrom pandas.util._validators import validate_bool_kwarg",
    "1.3.1": "class ExtensionBlock(Block)",
    "1.3.2": "Block for holding extension types.\n\nNotes\n-----\nThis holds all 3rd-party extension array types. It's also the immediate\nparent class for our internal extension types' blocks, CategoricalBlock.\n\nExtensionArrays are limited to 1-D.",
    "1.4.1": [
        "shape(self)"
    ],
    "1.4.2": [
        "make_block(values, placement, klass=None, ndim=None, dtype=None)",
        "_safe_reshape(arr, new_shape)",
        "_extract_bool_array(mask: ArrayLike) -> np.ndarray"
    ],
    "1.5.1": [
        "    @pytest.mark.parametrize(\n        \"result, target, expected\",\n        [\n            (\n                Series([\"a\", None], dtype=\"string\"),\n                Series([None, \"b\"], dtype=\"string\"),\n                Series([\"a\", \"b\"], dtype=\"string\"),\n            ),\n            (\n                Series([1, None], dtype=\"Int64\"),\n                Series([None, 2], dtype=\"Int64\"),\n                Series([1, 2], dtype=\"Int64\"),\n            ),\n            (\n                Series([True, None], dtype=\"boolean\"),\n                Series([None, False], dtype=\"boolean\"),\n                Series([True, False], dtype=\"boolean\"),\n            ),\n        ],\n    )\n    def test_update_extension_array_series(self, result, target, expected):\n        result.update(target)\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"result, target, expected\",\n        [\n            (\n                Series([\"a\", None], dtype=\"string\"),\n                Series([None, \"b\"], dtype=\"string\"),\n                Series([\"a\", \"b\"], dtype=\"string\"),\n            ),\n            (\n                Series([1, None], dtype=\"Int64\"),\n                Series([None, 2], dtype=\"Int64\"),\n                Series([1, 2], dtype=\"Int64\"),\n            ),\n            (\n                Series([True, None], dtype=\"boolean\"),\n                Series([None, False], dtype=\"boolean\"),\n                Series([True, False], dtype=\"boolean\"),\n            ),\n        ],\n    )\n    def test_update_extension_array_series(self, result, target, expected):\n        result.update(target)\n        tm.assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\n        \"result, target, expected\",\n        [\n            (\n                Series([\"a\", None], dtype=\"string\"),\n                Series([None, \"b\"], dtype=\"string\"),\n                Series([\"a\", \"b\"], dtype=\"string\"),\n            ),\n            (\n                Series([1, None], dtype=\"Int64\"),\n                Series([None, 2], dtype=\"Int64\"),\n                Series([1, 2], dtype=\"Int64\"),\n            ),\n            (\n                Series([True, None], dtype=\"boolean\"),\n                Series([None, False], dtype=\"boolean\"),\n                Series([True, False], dtype=\"boolean\"),\n            ),\n        ],\n    )\n    def test_update_extension_array_series(self, result, target, expected):\n        result.update(target)\n        tm.assert_series_equal(result, expected)"
    ],
    "1.5.2": [
        "pandas/tests/series/methods/test_update.py",
        "pandas/tests/series/methods/test_update.py",
        "pandas/tests/series/methods/test_update.py"
    ],
    "2.1.1": [
        [
            "E       ValueError: NumPy boolean array indexing assignment cannot assign 2 input values to the 1 output values where the mask is true"
        ],
        [
            "E       ValueError: NumPy boolean array indexing assignment cannot assign 2 input values to the 1 output values where the mask is true"
        ],
        [
            "E       ValueError: NumPy boolean array indexing assignment cannot assign 2 input values to the 1 output values where the mask is true"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.series.methods.test_update.TestUpdate object at 0x7f3bc2cdc9a0>\nresult = 0       a\n1    <NA>\ndtype: string\ntarget = 0    <NA>\n1       b\ndtype: string\nexpected = 0    a\n1    b\ndtype: string\n\n    @pytest.mark.parametrize(\n        \"result, target, expected\",\n        [\n            (\n                Series([\"a\", None], dtype=\"string\"),\n                Series([None, \"b\"], dtype=\"string\"),\n                Series([\"a\", \"b\"], dtype=\"string\"),\n            ),\n            (\n                Series([1, None], dtype=\"Int64\"),\n                Series([None, 2], dtype=\"Int64\"),\n                Series([1, 2], dtype=\"Int64\"),\n            ),\n            (\n                Series([True, None], dtype=\"boolean\"),\n                Series([None, False], dtype=\"boolean\"),\n                Series([True, False], dtype=\"boolean\"),\n            ),\n        ],\n    )\n    def test_update_extension_array_series(self, result, target, expected):\n>       result.update(target)\n\npandas/tests/series/methods/test_update.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/series.py:2855: in update\n    self._mgr = self._mgr.putmask(mask=mask, new=other)\npandas/core/internals/managers.py:544: in putmask\n    return self.apply(\npandas/core/internals/managers.py:397: in apply\n    applied = getattr(b, f)(**kwargs)\npandas/core/internals/blocks.py:1607: in putmask\n    new_values[mask] = new\npandas/core/arrays/string_.py:263: in __setitem__\n    super().__setitem__(key, value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <StringArray>\n['a', <NA>]\nLength: 2, dtype: string\nkey = array([False,  True]), value = array([<NA>, 'b'], dtype=object)\n\n    def __setitem__(self, key, value) -> None:\n        value = extract_array(value, extract_numpy=True)\n    \n        key = check_array_indexer(self, key)\n        scalar_value = lib.is_scalar(value)\n    \n        if not scalar_value:\n            value = np.asarray(value, dtype=self._ndarray.dtype)\n    \n>       self._ndarray[key] = value",
            "\npandas/core/arrays/numpy_.py:279: ValueError"
        ],
        [
            "self = <pandas.tests.series.methods.test_update.TestUpdate object at 0x7f3bc25a7970>\nresult = 0       1\n1    <NA>\ndtype: Int64\ntarget = 0    <NA>\n1       2\ndtype: Int64, expected = 0    1\n1    2\ndtype: Int64\n\n    @pytest.mark.parametrize(\n        \"result, target, expected\",\n        [\n            (\n                Series([\"a\", None], dtype=\"string\"),\n                Series([None, \"b\"], dtype=\"string\"),\n                Series([\"a\", \"b\"], dtype=\"string\"),\n            ),\n            (\n                Series([1, None], dtype=\"Int64\"),\n                Series([None, 2], dtype=\"Int64\"),\n                Series([1, 2], dtype=\"Int64\"),\n            ),\n            (\n                Series([True, None], dtype=\"boolean\"),\n                Series([None, False], dtype=\"boolean\"),\n                Series([True, False], dtype=\"boolean\"),\n            ),\n        ],\n    )\n    def test_update_extension_array_series(self, result, target, expected):\n>       result.update(target)\n\npandas/tests/series/methods/test_update.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/series.py:2855: in update\n    self._mgr = self._mgr.putmask(mask=mask, new=other)\npandas/core/internals/managers.py:544: in putmask\n    return self.apply(\npandas/core/internals/managers.py:397: in apply\n    applied = getattr(b, f)(**kwargs)\npandas/core/internals/blocks.py:1607: in putmask\n    new_values[mask] = new\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <IntegerArray>\n[1, <NA>]\nLength: 2, dtype: Int64\nkey = array([False,  True]), value = array([1, 2])\n\n    def __setitem__(self, key, value) -> None:\n        _is_scalar = is_scalar(value)\n        if _is_scalar:\n            value = [value]\n        value, mask = coerce_to_array(value, dtype=self.dtype)\n    \n        if _is_scalar:\n            value = value[0]\n            mask = mask[0]\n    \n        key = check_array_indexer(self, key)\n>       self._data[key] = value",
            "\npandas/core/arrays/integer.py:437: ValueError"
        ],
        [
            "self = <pandas.tests.series.methods.test_update.TestUpdate object at 0x7f3bc24ae760>\nresult = 0    True\n1    <NA>\ndtype: boolean\ntarget = 0     <NA>\n1    False\ndtype: boolean\nexpected = 0     True\n1    False\ndtype: boolean\n\n    @pytest.mark.parametrize(\n        \"result, target, expected\",\n        [\n            (\n                Series([\"a\", None], dtype=\"string\"),\n                Series([None, \"b\"], dtype=\"string\"),\n                Series([\"a\", \"b\"], dtype=\"string\"),\n            ),\n            (\n                Series([1, None], dtype=\"Int64\"),\n                Series([None, 2], dtype=\"Int64\"),\n                Series([1, 2], dtype=\"Int64\"),\n            ),\n            (\n                Series([True, None], dtype=\"boolean\"),\n                Series([None, False], dtype=\"boolean\"),\n                Series([True, False], dtype=\"boolean\"),\n            ),\n        ],\n    )\n    def test_update_extension_array_series(self, result, target, expected):\n>       result.update(target)\n\npandas/tests/series/methods/test_update.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/series.py:2855: in update\n    self._mgr = self._mgr.putmask(mask=mask, new=other)\npandas/core/internals/managers.py:544: in putmask\n    return self.apply(\npandas/core/internals/managers.py:397: in apply\n    applied = getattr(b, f)(**kwargs)\npandas/core/internals/blocks.py:1607: in putmask\n    new_values[mask] = new\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <BooleanArray>\n[True, <NA>]\nLength: 2, dtype: boolean\nkey = array([False,  True]), value = array([False, False])\n\n    def __setitem__(self, key, value) -> None:\n        _is_scalar = is_scalar(value)\n        if _is_scalar:\n            value = [value]\n        value, mask = coerce_to_array(value)\n    \n        if _is_scalar:\n            value = value[0]\n            mask = mask[0]\n    \n        key = check_array_indexer(self, key)\n>       self._data[key] = value",
            "\npandas/core/arrays/boolean.py:374: ValueError"
        ]
    ],
    "2.2.1": null,
    "2.2.2": null,
    "2.3.1": [
        [
            {
                "inplace": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "mask": {
                    "value": "array([False,  True])",
                    "shape": "(2,)",
                    "omitted": false
                },
                "self.values": {
                    "value": "<StringArray>\n['a', <NA>]\nLength: 2, dtype: string",
                    "shape": "(2,)",
                    "omitted": false
                },
                "self": {
                    "value": "ExtensionBlock: 2 dtype: string",
                    "shape": "(2,)",
                    "omitted": false
                },
                "new": {
                    "value": "<StringArray>\n[<NA>, 'b']\nLength: 2, dtype: string",
                    "shape": "(2,)",
                    "omitted": false
                }
            },
            {
                "new_values": {
                    "value": "<StringArray>\n['a', 'b']\nLength: 2, dtype: string",
                    "shape": "(2,)",
                    "omitted": false
                },
                "self.values": {
                    "value": "<StringArray>\n['a', 'b']\nLength: 2, dtype: string",
                    "shape": "(2,)",
                    "omitted": false
                },
                "new": {
                    "value": "<StringArray>\n['b']\nLength: 1, dtype: string",
                    "shape": "(1,)",
                    "omitted": false
                },
                "new_values.shape": {
                    "value": "(2,)",
                    "shape": "1",
                    "omitted": false
                }
            }
        ],
        [
            {
                "inplace": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "mask": {
                    "value": "array([False,  True])",
                    "shape": "(2,)",
                    "omitted": false
                },
                "self.values": {
                    "value": "<IntegerArray>\n[1, <NA>]\nLength: 2, dtype: Int64",
                    "shape": "(2,)",
                    "omitted": false
                },
                "self": {
                    "value": "ExtensionBlock: 2 dtype: Int64",
                    "shape": "(2,)",
                    "omitted": false
                },
                "new": {
                    "value": "<IntegerArray>\n[<NA>, 2]\nLength: 2, dtype: Int64",
                    "shape": "(2,)",
                    "omitted": false
                }
            },
            {
                "new_values": {
                    "value": "<IntegerArray>\n[1, 2]\nLength: 2, dtype: Int64",
                    "shape": "(2,)",
                    "omitted": false
                },
                "self.values": {
                    "value": "<IntegerArray>\n[1, 2]\nLength: 2, dtype: Int64",
                    "shape": "(2,)",
                    "omitted": false
                },
                "new": {
                    "value": "<IntegerArray>\n[2]\nLength: 1, dtype: Int64",
                    "shape": "(1,)",
                    "omitted": false
                },
                "new_values.shape": {
                    "value": "(2,)",
                    "shape": "1",
                    "omitted": false
                }
            }
        ],
        [
            {
                "inplace": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "mask": {
                    "value": "array([False,  True])",
                    "shape": "(2,)",
                    "omitted": false
                },
                "self.values": {
                    "value": "<BooleanArray>\n[True, <NA>]\nLength: 2, dtype: boolean",
                    "shape": "(2,)",
                    "omitted": false
                },
                "self": {
                    "value": "ExtensionBlock: 2 dtype: boolean",
                    "shape": "(2,)",
                    "omitted": false
                },
                "new": {
                    "value": "<BooleanArray>\n[<NA>, False]\nLength: 2, dtype: boolean",
                    "shape": "(2,)",
                    "omitted": false
                }
            },
            {
                "new_values": {
                    "value": "<BooleanArray>\n[True, False]\nLength: 2, dtype: boolean",
                    "shape": "(2,)",
                    "omitted": false
                },
                "self.values": {
                    "value": "<BooleanArray>\n[True, False]\nLength: 2, dtype: boolean",
                    "shape": "(2,)",
                    "omitted": false
                },
                "new": {
                    "value": "<BooleanArray>\n[False]\nLength: 1, dtype: boolean",
                    "shape": "(1,)",
                    "omitted": false
                },
                "new_values.shape": {
                    "value": "(2,)",
                    "shape": "1",
                    "omitted": false
                }
            }
        ]
    ],
    "2.3.2": [
        [
            {
                "inplace": "bool",
                "mask": "ndarray",
                "self.values": "StringArray",
                "self": "ExtensionBlock",
                "new": "StringArray"
            },
            {
                "new_values": "StringArray",
                "self.values": "StringArray",
                "new": "StringArray",
                "new_values.shape": "tuple"
            }
        ],
        [
            {
                "inplace": "bool",
                "mask": "ndarray",
                "self.values": "IntegerArray",
                "self": "ExtensionBlock",
                "new": "IntegerArray"
            },
            {
                "new_values": "IntegerArray",
                "self.values": "IntegerArray",
                "new": "IntegerArray",
                "new_values.shape": "tuple"
            }
        ],
        [
            {
                "inplace": "bool",
                "mask": "ndarray",
                "self.values": "BooleanArray",
                "self": "ExtensionBlock",
                "new": "BooleanArray"
            },
            {
                "new_values": "BooleanArray",
                "self.values": "BooleanArray",
                "new": "BooleanArray",
                "new_values.shape": "tuple"
            }
        ]
    ],
    "3.1.1": [
        "BUG: Series.update() raises ValueError if dtype=\"string\"\n"
    ],
    "3.1.2": [
        " I have checked that this issue has not already been reported.\n\n I have confirmed this bug exists on the latest version of pandas.\n\n (optional) I have confirmed this bug exists on the master branch of pandas.\n\nCode Sample, a copy-pastable example\nimport pandas as pd\na = pd.Series([\"a\", None, \"c\"], dtype=\"string\")\nb = pd.Series([None, \"b\", None], dtype=\"string\")\na.update(b)\nresults in:\n\nTraceback (most recent call last):\n\n  File \"<ipython-input-15-b9da8f25067a>\", line 1, in <module>\n    a.update(b)\n\n  File \"C:\\tools\\anaconda3\\envs\\Simple\\lib\\site-packages\\pandas\\core\\series.py\", line 2810, in update\n    self._data = self._data.putmask(mask=mask, new=other, inplace=True)\n\n  File \"C:\\tools\\anaconda3\\envs\\Simple\\lib\\site-packages\\pandas\\core\\internals\\managers.py\", line 564, in putmask\n    return self.apply(\"putmask\", **kwargs)\n\n  File \"C:\\tools\\anaconda3\\envs\\Simple\\lib\\site-packages\\pandas\\core\\internals\\managers.py\", line 442, in apply\n    applied = getattr(b, f)(**kwargs)\n\n  File \"C:\\tools\\anaconda3\\envs\\Simple\\lib\\site-packages\\pandas\\core\\internals\\blocks.py\", line 1676, in putmask\n    new_values[mask] = new\n\n  File \"C:\\tools\\anaconda3\\envs\\Simple\\lib\\site-packages\\pandas\\core\\arrays\\string_.py\", line 248, in __setitem__\n    super().__setitem__(key, value)\n\n  File \"C:\\tools\\anaconda3\\envs\\Simple\\lib\\site-packages\\pandas\\core\\arrays\\numpy_.py\", line 252, in __setitem__\n    self._ndarray[key] = value\n\nValueError: NumPy boolean array indexing assignment cannot assign 3 input values to the 1 output values where the mask is true\nProblem description\nThe example works if I leave off the dtype=\"string\" (resulting in the implicit dtype object).\nIMO update should work for all dtypes, not only the \"old\" ones.\n\na = pd.Series([1, None, 3], dtype=\"Int16\") etc. also raises ValueError, while the same with dtype=\"float64\"works.\n\nIt looks as if update doesn't work with the new nullable dtypes (the ones with pd.NA).\n\nExpected Output\nThe expected result is that a.update(b) updates a without raising an exception, not only for object and float64, but also for string and Int16 etc..\n"
    ]
}