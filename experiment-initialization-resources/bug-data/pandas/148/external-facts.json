{
    "pandas:148": {
        "github_issue_title": [
            "DataFrame.nunique and Series.nunique not consistent when Empty\n",
            "DataFrame.nunique is incorrect for DataFrame with no columns\n"
        ],
        "github_issue_description": [
            "Code Sample, a copy-pastable example if possible\nExample A:\n\n>>> import pandas as pd\n>>> df = pd.DataFrame({\"a\": [1, 2], \"b\": [3, 4], \"c\": [5, 6]})\n>>> assert df.nunique().tolist() == [df[col].nunique() for col in df.columns]\n# Both equal [2, 2, 2]\nExample B:\n\n>>> df = pd.DataFrame(columns=['a', 'b', 'c'])\n>>> df.nunique()\n# Empty DataFrame\n# Columns: [a, b, c]\n# Index: []\n\n>>> [df[col].nunique() for col in df.columns]\n# [0, 0, 0]\nProblem description\nIn Example A, when a DataFrame isn't empty, getting nunique is consistent between the DataFrame and Series approaches; however, when a DataFrame is empty (Example B), DataFrame.nunique returns itself, while the Series approach returns 0.\n\nExpected Output\nI would expect df.nunique to return 0 for each column, consistent with how a Series behaves. An empty object, by definition, has 0 unique elements in my mind.\n",
            "(edit by @TomAugspurger)\n\nCurrent output:\n\nIn [33]: pd.DataFrame(index=[0, 1]).nunique()\nOut[33]:\nEmpty DataFrame\nColumns: []\nIndex: [0, 1]\nExpected Output is an empty series:\n\nOut[34]: Series([], dtype: float64)\nNot sure what the expected dtype of that Series should be... probably object.\n\noriginal post below:\n\nCode Sample, a copy-pastable example if possible\nWith Pandas 0.20.3\n\n# create a DataFrame with 3 rows\ndf = pd.DataFrame({'a': ['A','B','C']})\n\n# lookup unique values for each column, excluding 'a'\nunique = df.loc[:, (df.columns != 'a')].nunique()\n# this results in an empty Series, the index is also empty\nunique.index.tolist()\n>>> []\n# and\nunique[unique == 1].index.tolist()\n>>> []\nWith pandas 0.23.3\n\n# create a DataFrame with 3 rows\ndf = pd.DataFrame({'a': ['A','B','C']})\n\n# lookup unique values for each column, excluding 'a'\nunique = df.loc[:, (df.columns != 'a')].nunique()\n# this results in an empty Series, but the index is not empty\nunique.index.tolist()\n>>> [1,2,3]\nalso:\nunique[unique == 1].index.tolist()\n>>> [1,2,3]\nNote:\n\n# if we have don't have an empty df, the behavior of nunique() seems fine:\ndf = pd.DataFrame({'a': ['A','B','C'], 'b': [1,1,1]})\nunique = df.loc[:, (df.columns != 'a')].nunique()\n\nunique[unique == 1]\n>>> b    1\n>>> dtype: int64\n# and\nunique[unique == 1].index.tolist()\n>>> ['b']\nProblem description\nThe change of behavior is a bit disturbing, and seems like it is a bug:\nnunique() ends up creating a Series, and it should be a Series of the df columns, but that doesn't seem to be the case here, instead it is picking up the index of the df.\n\nThis is likely related to:\n\n#21932\n#21255\n\nI am posting this because in my use case I use the list to drop the columns, but i end up with column names that do not exist in the df\n"
        ]
    }
}