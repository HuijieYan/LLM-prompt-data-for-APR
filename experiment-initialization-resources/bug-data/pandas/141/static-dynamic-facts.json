{
    "pandas:141": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_141/pandas/core/indexes/range.py": {
            "buggy_functions": [
                {
                    "function_name": "get_indexer",
                    "function_code": "@Appender(_index_shared_docs[\"get_indexer\"])\ndef get_indexer(self, target, method=None, limit=None, tolerance=None):\n    if com.any_not_none(method, tolerance, limit) or not is_list_like(target):\n        return super().get_indexer(\n            target, method=method, tolerance=tolerance, limit=limit\n        )\n\n    if self.step > 0:\n        start, stop, step = self.start, self.stop, self.step\n    else:\n        # Work on reversed range for simplicity:\n        start, stop, step = (self.stop - self.step, self.start + 1, -self.step)\n\n    target_array = np.asarray(target)\n    if not (is_integer_dtype(target_array) and target_array.ndim == 1):\n        # checks/conversions/roundings are delegated to general method\n        return super().get_indexer(target, method=method, tolerance=tolerance)\n\n    locs = target_array - start\n    valid = (locs % step == 0) & (locs >= 0) & (target_array < stop)\n    locs[~valid] = -1\n    locs[valid] = locs[valid] / step\n\n    if step != self.step:\n        # We reversed this range: transform to original locs\n        locs[valid] = len(self) - 1 - locs[valid]\n    return ensure_platform_int(locs)\n",
                    "decorators": [
                        "Appender(_index_shared_docs['get_indexer'])"
                    ],
                    "docstring": null,
                    "start_line": 381,
                    "end_line": 407,
                    "variables": {
                        "com.any_not_none": [
                            383
                        ],
                        "com": [
                            383
                        ],
                        "method": [
                            385,
                            397,
                            383
                        ],
                        "tolerance": [
                            385,
                            397,
                            383
                        ],
                        "limit": [
                            385,
                            383
                        ],
                        "is_list_like": [
                            383
                        ],
                        "target": [
                            385,
                            394,
                            397,
                            383
                        ],
                        "get_indexer": [
                            384,
                            397
                        ],
                        "super": [
                            384,
                            397
                        ],
                        "self.step": [
                            392,
                            404,
                            388,
                            389
                        ],
                        "self": [
                            388,
                            389,
                            392,
                            404,
                            406
                        ],
                        "start": [
                            392,
                            389,
                            399
                        ],
                        "stop": [
                            392,
                            400,
                            389
                        ],
                        "step": [
                            389,
                            392,
                            400,
                            402,
                            404
                        ],
                        "self.start": [
                            392,
                            389
                        ],
                        "self.stop": [
                            392,
                            389
                        ],
                        "target_array": [
                            400,
                            394,
                            395,
                            399
                        ],
                        "np.asarray": [
                            394
                        ],
                        "np": [
                            394
                        ],
                        "is_integer_dtype": [
                            395
                        ],
                        "target_array.ndim": [
                            395
                        ],
                        "locs": [
                            399,
                            400,
                            401,
                            402,
                            406,
                            407
                        ],
                        "valid": [
                            400,
                            401,
                            402,
                            406
                        ],
                        "len": [
                            406
                        ],
                        "ensure_platform_int": [
                            407
                        ],
                        "Appender": [
                            381
                        ],
                        "_index_shared_docs": [
                            381
                        ]
                    },
                    "filtered_variables": {
                        "com.any_not_none": [
                            383
                        ],
                        "com": [
                            383
                        ],
                        "method": [
                            385,
                            397,
                            383
                        ],
                        "tolerance": [
                            385,
                            397,
                            383
                        ],
                        "limit": [
                            385,
                            383
                        ],
                        "is_list_like": [
                            383
                        ],
                        "target": [
                            385,
                            394,
                            397,
                            383
                        ],
                        "get_indexer": [
                            384,
                            397
                        ],
                        "self.step": [
                            392,
                            404,
                            388,
                            389
                        ],
                        "self": [
                            388,
                            389,
                            392,
                            404,
                            406
                        ],
                        "start": [
                            392,
                            389,
                            399
                        ],
                        "stop": [
                            392,
                            400,
                            389
                        ],
                        "step": [
                            389,
                            392,
                            400,
                            402,
                            404
                        ],
                        "self.start": [
                            392,
                            389
                        ],
                        "self.stop": [
                            392,
                            389
                        ],
                        "target_array": [
                            400,
                            394,
                            395,
                            399
                        ],
                        "np.asarray": [
                            394
                        ],
                        "np": [
                            394
                        ],
                        "is_integer_dtype": [
                            395
                        ],
                        "target_array.ndim": [
                            395
                        ],
                        "locs": [
                            399,
                            400,
                            401,
                            402,
                            406,
                            407
                        ],
                        "valid": [
                            400,
                            401,
                            402,
                            406
                        ],
                        "ensure_platform_int": [
                            407
                        ],
                        "Appender": [
                            381
                        ],
                        "_index_shared_docs": [
                            381
                        ]
                    },
                    "diff_line_number": 391,
                    "class_data": {
                        "signature": "class RangeIndex(Int64Index)",
                        "docstring": "Immutable Index implementing a monotonic integer range.\n\nRangeIndex is a memory-saving special case of Int64Index limited to\nrepresenting monotonic ranges. Using RangeIndex may in some instances\nimprove computing speed.\n\nThis is the default index type used\nby DataFrame and Series when no explicit index is provided by the user.\n\nParameters\n----------\nstart : int (default: 0), or other RangeIndex instance\n    If int and \"stop\" is not given, interpreted as \"stop\" instead.\nstop : int (default: 0)\nstep : int (default: 1)\nname : object, optional\n    Name to be stored in the index\ncopy : bool, default False\n    Unused, accepted for homogeneity with other index types.\n\nAttributes\n----------\nstart\nstop\nstep\n\nMethods\n-------\nfrom_range\n\nSee Also\n--------\nIndex : The base pandas Index type.\nInt64Index : Index of int64 data.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __new__(cls, start=None, stop=None, step=None, dtype=None, copy=False, name=None, fastpath=None):\n    if fastpath is not None:\n        warnings.warn(\"The 'fastpath' keyword is deprecated, and will be removed in a future version.\", FutureWarning, stacklevel=2)\n        if fastpath:\n            return cls._simple_new(range(start, stop, step), name=name)\n    cls._validate_dtype(dtype)\n    if isinstance(start, RangeIndex):\n        name = start.name if name is None else name\n        start = start._range\n        return cls._simple_new(start, dtype=dtype, name=name)\n    if com.all_none(start, stop, step):\n        raise TypeError('RangeIndex(...) must be called with integers')\n    start = ensure_python_int(start) if start is not None else 0\n    if stop is None:\n        (start, stop) = (0, start)\n    else:\n        stop = ensure_python_int(stop)\n    step = ensure_python_int(step) if step is not None else 1\n    if step == 0:\n        raise ValueError('Step must not be zero')\n    rng = range(start, stop, step)\n    return cls._simple_new(rng, dtype=dtype, name=name)",
                            "@classmethod\ndef from_range(cls, data, name=None, dtype=None):\n    \"\"\"\n    Create RangeIndex from a range object.\n\n    Returns\n    -------\n    RangeIndex\n    \"\"\"\n    if not isinstance(data, range):\n        raise TypeError('{0}(...) must be called with object coercible to a range, {1} was passed'.format(cls.__name__, repr(data)))\n    cls._validate_dtype(dtype)\n    return cls._simple_new(data, dtype=dtype, name=name)",
                            "@classmethod\ndef _simple_new(cls, values, name=None, dtype=None, **kwargs):\n    result = object.__new__(cls)\n    if values is None:\n        values = range(0, 0, 1)\n    elif not isinstance(values, range):\n        return Index(values, dtype=dtype, name=name, **kwargs)\n    result._range = values\n    result.name = name\n    for (k, v) in kwargs.items():\n        setattr(result, k, v)\n    result._reset_identity()\n    return result",
                            "@staticmethod\ndef _validate_dtype(dtype):\n    \"\"\" require dtype to be None or int64 \"\"\"\n    if not (dtype is None or is_int64_dtype(dtype)):\n        raise TypeError('Invalid to pass a non-int64 dtype to RangeIndex')",
                            "@cache_readonly\ndef _constructor(self):\n    \"\"\" return the class to use for construction \"\"\"\n    return Int64Index",
                            "@property\ndef _data(self):\n    \"\"\"\n    An int array that for performance reasons is created only when needed.\n\n    The constructed array is saved in ``_cached_data``. This allows us to\n    check if the array has been created without accessing ``_data`` and\n    triggering the construction.\n    \"\"\"\n    if self._cached_data is None:\n        self._cached_data = np.arange(self.start, self.stop, self.step, dtype=np.int64)\n    return self._cached_data",
                            "@cache_readonly\ndef _int64index(self):\n    return Int64Index._simple_new(self._data, name=self.name)",
                            "def _get_data_as_items(self):\n    \"\"\" return a list of tuples of start, stop, step \"\"\"\n    rng = self._range\n    return [('start', rng.start), ('stop', rng.stop), ('step', rng.step)]",
                            "def __reduce__(self):\n    d = self._get_attributes_dict()\n    d.update(dict(self._get_data_as_items()))\n    return (ibase._new_Index, (self.__class__, d), None)",
                            "def _format_attrs(self):\n    \"\"\"\n    Return a list of tuples of the (attr, formatted_value)\n    \"\"\"\n    attrs = self._get_data_as_items()\n    if self.name is not None:\n        attrs.append(('name', ibase.default_pprint(self.name)))\n    return attrs",
                            "def _format_data(self, name=None):\n    return None",
                            "def _format_with_header(self, header, na_rep='NaN', **kwargs):\n    return header + list(map(pprint_thing, self._range))",
                            "@cache_readonly\ndef start(self):\n    \"\"\"\n    The value of the `start` parameter (``0`` if this was not supplied).\n    \"\"\"\n    return self._range.start",
                            "@property\ndef _start(self):\n    \"\"\"\n    The value of the `start` parameter (``0`` if this was not supplied).\n\n     .. deprecated:: 0.25.0\n        Use ``start`` instead.\n    \"\"\"\n    warnings.warn(self._deprecation_message.format('_start', 'start'), DeprecationWarning, stacklevel=2)\n    return self.start",
                            "@cache_readonly\ndef stop(self):\n    \"\"\"\n    The value of the `stop` parameter.\n    \"\"\"\n    return self._range.stop",
                            "@property\ndef _stop(self):\n    \"\"\"\n    The value of the `stop` parameter.\n\n     .. deprecated:: 0.25.0\n        Use ``stop`` instead.\n    \"\"\"\n    warnings.warn(self._deprecation_message.format('_stop', 'stop'), DeprecationWarning, stacklevel=2)\n    return self.stop",
                            "@cache_readonly\ndef step(self):\n    \"\"\"\n    The value of the `step` parameter (``1`` if this was not supplied).\n    \"\"\"\n    return self._range.step",
                            "@property\ndef _step(self):\n    \"\"\"\n    The value of the `step` parameter (``1`` if this was not supplied).\n\n     .. deprecated:: 0.25.0\n        Use ``step`` instead.\n    \"\"\"\n    warnings.warn(self._deprecation_message.format('_step', 'step'), DeprecationWarning, stacklevel=2)\n    return self.step",
                            "@cache_readonly\ndef nbytes(self):\n    \"\"\"\n    Return the number of bytes in the underlying data.\n    \"\"\"\n    rng = self._range\n    return getsizeof(rng) + sum((getsizeof(getattr(rng, attr_name)) for attr_name in ['start', 'stop', 'step']))",
                            "def memory_usage(self, deep=False):\n    \"\"\"\n    Memory usage of my values\n\n    Parameters\n    ----------\n    deep : bool\n        Introspect the data deeply, interrogate\n        `object` dtypes for system-level memory consumption\n\n    Returns\n    -------\n    bytes used\n\n    Notes\n    -----\n    Memory usage does not include memory consumed by elements that\n    are not components of the array if deep=False\n\n    See Also\n    --------\n    numpy.ndarray.nbytes\n    \"\"\"\n    return self.nbytes",
                            "@property\ndef dtype(self):\n    return np.dtype(np.int64)",
                            "@property\ndef is_unique(self):\n    \"\"\" return if the index has unique values \"\"\"\n    return True",
                            "@cache_readonly\ndef is_monotonic_increasing(self):\n    return self._range.step > 0 or len(self) <= 1",
                            "@cache_readonly\ndef is_monotonic_decreasing(self):\n    return self._range.step < 0 or len(self) <= 1",
                            "@property\ndef has_duplicates(self):\n    return False",
                            "def __contains__(self, key: Union[int, np.integer]) -> bool:\n    hash(key)\n    try:\n        key = ensure_python_int(key)\n    except TypeError:\n        return False\n    return key in self._range",
                            "@Appender(_index_shared_docs['get_loc'])\ndef get_loc(self, key, method=None, tolerance=None):\n    if is_integer(key) and method is None and (tolerance is None):\n        new_key = int(key)\n        try:\n            return self._range.index(new_key)\n        except ValueError:\n            raise KeyError(key)\n    return super().get_loc(key, method=method, tolerance=tolerance)",
                            "@Appender(_index_shared_docs['get_indexer'])\ndef get_indexer(self, target, method=None, limit=None, tolerance=None):\n    if com.any_not_none(method, tolerance, limit) or not is_list_like(target):\n        return super().get_indexer(target, method=method, tolerance=tolerance, limit=limit)\n    if self.step > 0:\n        (start, stop, step) = (self.start, self.stop, self.step)\n    else:\n        (start, stop, step) = (self.stop - self.step, self.start + 1, -self.step)\n    target_array = np.asarray(target)\n    if not (is_integer_dtype(target_array) and target_array.ndim == 1):\n        return super().get_indexer(target, method=method, tolerance=tolerance)\n    locs = target_array - start\n    valid = (locs % step == 0) & (locs >= 0) & (target_array < stop)\n    locs[~valid] = -1\n    locs[valid] = locs[valid] / step\n    if step != self.step:\n        locs[valid] = len(self) - 1 - locs[valid]\n    return ensure_platform_int(locs)",
                            "def tolist(self):\n    return list(self._range)",
                            "@Appender(_index_shared_docs['_shallow_copy'])\ndef _shallow_copy(self, values=None, **kwargs):\n    if values is None:\n        name = kwargs.get('name', self.name)\n        return self._simple_new(self._range, name=name)\n    else:\n        kwargs.setdefault('name', self.name)\n        return self._int64index._shallow_copy(values, **kwargs)",
                            "@Appender(ibase._index_shared_docs['copy'])\ndef copy(self, name=None, deep=False, dtype=None, **kwargs):\n    self._validate_dtype(dtype)\n    if name is None:\n        name = self.name\n    return self.from_range(self._range, name=name)",
                            "def _minmax(self, meth):\n    no_steps = len(self) - 1\n    if no_steps == -1:\n        return np.nan\n    elif meth == 'min' and self.step > 0 or (meth == 'max' and self.step < 0):\n        return self.start\n    return self.start + self.step * no_steps",
                            "def min(self, axis=None, skipna=True, *args, **kwargs):\n    \"\"\"The minimum value of the RangeIndex\"\"\"\n    nv.validate_minmax_axis(axis)\n    nv.validate_min(args, kwargs)\n    return self._minmax('min')",
                            "def max(self, axis=None, skipna=True, *args, **kwargs):\n    \"\"\"The maximum value of the RangeIndex\"\"\"\n    nv.validate_minmax_axis(axis)\n    nv.validate_max(args, kwargs)\n    return self._minmax('max')",
                            "def argsort(self, *args, **kwargs):\n    \"\"\"\n    Returns the indices that would sort the index and its\n    underlying data.\n\n    Returns\n    -------\n    argsorted : numpy array\n\n    See Also\n    --------\n    numpy.ndarray.argsort\n    \"\"\"\n    nv.validate_argsort(args, kwargs)\n    if self._range.step > 0:\n        return np.arange(len(self))\n    else:\n        return np.arange(len(self) - 1, -1, -1)",
                            "def equals(self, other):\n    \"\"\"\n    Determines if two Index objects contain the same elements.\n    \"\"\"\n    if isinstance(other, RangeIndex):\n        return self._range == other._range\n    return super().equals(other)",
                            "def intersection(self, other, sort=False):\n    \"\"\"\n    Form the intersection of two Index objects.\n\n    Parameters\n    ----------\n    other : Index or array-like\n    sort : False or None, default False\n        Sort the resulting index if possible\n\n        .. versionadded:: 0.24.0\n\n        .. versionchanged:: 0.24.1\n\n           Changed the default to ``False`` to match the behaviour\n           from before 0.24.0.\n\n    Returns\n    -------\n    intersection : Index\n    \"\"\"\n    self._validate_sort_keyword(sort)\n    if self.equals(other):\n        return self._get_reconciled_name_object(other)\n    if not isinstance(other, RangeIndex):\n        return super().intersection(other, sort=sort)\n    if not len(self) or not len(other):\n        return self._simple_new(None)\n    first = self._range[::-1] if self.step < 0 else self._range\n    second = other._range[::-1] if other.step < 0 else other._range\n    int_low = max(first.start, second.start)\n    int_high = min(first.stop, second.stop)\n    if int_high <= int_low:\n        return self._simple_new(None)\n    (gcd, s, t) = self._extended_gcd(first.step, second.step)\n    if (first.start - second.start) % gcd:\n        return self._simple_new(None)\n    tmp_start = first.start + (second.start - first.start) * first.step // gcd * s\n    new_step = first.step * second.step // gcd\n    new_range = range(tmp_start, int_high, new_step)\n    new_index = self._simple_new(new_range)\n    new_start = new_index._min_fitting_element(int_low)\n    new_range = range(new_start, new_index.stop, new_index.step)\n    new_index = self._simple_new(new_range)\n    if (self.step < 0 and other.step < 0) is not (new_index.step < 0):\n        new_index = new_index[::-1]\n    if sort is None:\n        new_index = new_index.sort_values()\n    return new_index",
                            "def _min_fitting_element(self, lower_limit):\n    \"\"\"Returns the smallest element greater than or equal to the limit\"\"\"\n    no_steps = -(-(lower_limit - self.start) // abs(self.step))\n    return self.start + abs(self.step) * no_steps",
                            "def _max_fitting_element(self, upper_limit):\n    \"\"\"Returns the largest element smaller than or equal to the limit\"\"\"\n    no_steps = (upper_limit - self.start) // abs(self.step)\n    return self.start + abs(self.step) * no_steps",
                            "def _extended_gcd(self, a, b):\n    \"\"\"\n    Extended Euclidean algorithms to solve Bezout's identity:\n       a*x + b*y = gcd(x, y)\n    Finds one particular solution for x, y: s, t\n    Returns: gcd, s, t\n    \"\"\"\n    (s, old_s) = (0, 1)\n    (t, old_t) = (1, 0)\n    (r, old_r) = (b, a)\n    while r:\n        quotient = old_r // r\n        (old_r, r) = (r, old_r - quotient * r)\n        (old_s, s) = (s, old_s - quotient * s)\n        (old_t, t) = (t, old_t - quotient * t)\n    return (old_r, old_s, old_t)",
                            "def _union(self, other, sort):\n    \"\"\"\n    Form the union of two Index objects and sorts if possible\n\n    Parameters\n    ----------\n    other : Index or array-like\n\n    sort : False or None, default None\n        Whether to sort resulting index. ``sort=None`` returns a\n        monotonically increasing ``RangeIndex`` if possible or a sorted\n        ``Int64Index`` if not. ``sort=False`` always returns an\n        unsorted ``Int64Index``\n\n        .. versionadded:: 0.25.0\n\n    Returns\n    -------\n    union : Index\n    \"\"\"\n    if not len(other) or self.equals(other) or (not len(self)):\n        return super()._union(other, sort=sort)\n    if isinstance(other, RangeIndex) and sort is None:\n        (start_s, step_s) = (self.start, self.step)\n        end_s = self.start + self.step * (len(self) - 1)\n        (start_o, step_o) = (other.start, other.step)\n        end_o = other.start + other.step * (len(other) - 1)\n        if self.step < 0:\n            (start_s, step_s, end_s) = (end_s, -step_s, start_s)\n        if other.step < 0:\n            (start_o, step_o, end_o) = (end_o, -step_o, start_o)\n        if len(self) == 1 and len(other) == 1:\n            step_s = step_o = abs(self.start - other.start)\n        elif len(self) == 1:\n            step_s = step_o\n        elif len(other) == 1:\n            step_o = step_s\n        start_r = min(start_s, start_o)\n        end_r = max(end_s, end_o)\n        if step_o == step_s:\n            if (start_s - start_o) % step_s == 0 and start_s - end_o <= step_s and (start_o - end_s <= step_s):\n                return self.__class__(start_r, end_r + step_s, step_s)\n            if step_s % 2 == 0 and abs(start_s - start_o) <= step_s / 2 and (abs(end_s - end_o) <= step_s / 2):\n                return self.__class__(start_r, end_r + step_s / 2, step_s / 2)\n        elif step_o % step_s == 0:\n            if (start_o - start_s) % step_s == 0 and start_o + step_s >= start_s and (end_o - step_s <= end_s):\n                return self.__class__(start_r, end_r + step_s, step_s)\n        elif step_s % step_o == 0:\n            if (start_s - start_o) % step_o == 0 and start_s + step_o >= start_o and (end_s - step_o <= end_o):\n                return self.__class__(start_r, end_r + step_o, step_o)\n    return self._int64index._union(other, sort=sort)",
                            "@Appender(_index_shared_docs['join'])\ndef join(self, other, how='left', level=None, return_indexers=False, sort=False):\n    if how == 'outer' and self is not other:\n        return self._int64index.join(other, how, level, return_indexers, sort)\n    return super().join(other, how, level, return_indexers, sort)",
                            "def _concat_same_dtype(self, indexes, name):\n    \"\"\"\n    Concatenates multiple RangeIndex instances. All members of \"indexes\" must\n    be of type RangeIndex; result will be RangeIndex if possible, Int64Index\n    otherwise. E.g.:\n    indexes = [RangeIndex(3), RangeIndex(3, 6)] -> RangeIndex(6)\n    indexes = [RangeIndex(3), RangeIndex(4, 6)] -> Int64Index([0,1,2,4,5])\n    \"\"\"\n    start = step = next_ = None\n    non_empty_indexes = [obj for obj in indexes if len(obj)]\n    for obj in non_empty_indexes:\n        rng = obj._range\n        if start is None:\n            start = rng.start\n            if step is None and len(rng) > 1:\n                step = rng.step\n        elif step is None:\n            if rng.start == start:\n                result = Int64Index(np.concatenate([x._values for x in indexes]))\n                return result.rename(name)\n            step = rng.start - start\n        non_consecutive = step != rng.step and len(rng) > 1 or (next_ is not None and rng.start != next_)\n        if non_consecutive:\n            result = Int64Index(np.concatenate([x._values for x in indexes]))\n            return result.rename(name)\n        if step is not None:\n            next_ = rng[-1] + step\n    if non_empty_indexes:\n        stop = non_empty_indexes[-1].stop if next_ is None else next_\n        return RangeIndex(start, stop, step).rename(name)\n    return RangeIndex(0, 0).rename(name)",
                            "def __len__(self):\n    \"\"\"\n    return the length of the RangeIndex\n    \"\"\"\n    return len(self._range)",
                            "@property\ndef size(self):\n    return len(self)",
                            "def __getitem__(self, key):\n    \"\"\"\n    Conserve RangeIndex type for scalar and slice keys.\n    \"\"\"\n    if isinstance(key, slice):\n        new_range = self._range[key]\n        return self._simple_new(new_range, name=self.name)\n    elif is_integer(key):\n        new_key = int(key)\n        try:\n            return self._range[new_key]\n        except IndexError:\n            raise IndexError('index {key} is out of bounds for axis 0 with size {size}'.format(key=key, size=len(self)))\n    elif is_scalar(key):\n        raise IndexError('only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices')\n    return super().__getitem__(key)",
                            "def __floordiv__(self, other):\n    if isinstance(other, (ABCSeries, ABCDataFrame)):\n        return NotImplemented\n    if is_integer(other) and other != 0:\n        if len(self) == 0 or (self.start % other == 0 and self.step % other == 0):\n            start = self.start // other\n            step = self.step // other\n            stop = start + len(self) * step\n            new_range = range(start, stop, step or 1)\n            return self._simple_new(new_range, name=self.name)\n        if len(self) == 1:\n            start = self.start // other\n            new_range = range(start, start + 1, 1)\n            return self._simple_new(new_range, name=self.name)\n    return self._int64index // other",
                            "def all(self) -> bool:\n    return 0 not in self._range",
                            "def any(self) -> bool:\n    return any(self._range)",
                            "@classmethod\ndef _add_numeric_methods_binary(cls):\n    \"\"\" add in numeric methods, specialized to RangeIndex \"\"\"\n\n    def _make_evaluate_binop(op, step=False):\n        \"\"\"\n        Parameters\n        ----------\n        op : callable that accepts 2 parms\n            perform the binary op\n        step : callable, optional, default to False\n            op to apply to the step parm if not None\n            if False, use the existing step\n        \"\"\"\n\n        def _evaluate_numeric_binop(self, other):\n            if isinstance(other, (ABCSeries, ABCDataFrame)):\n                return NotImplemented\n            elif isinstance(other, ABCTimedeltaIndex):\n                return NotImplemented\n            elif isinstance(other, (timedelta, np.timedelta64)):\n                return op(self._int64index, other)\n            elif is_timedelta64_dtype(other):\n                return op(self._int64index, other)\n            other = extract_array(other, extract_numpy=True)\n            attrs = self._get_attributes_dict()\n            (left, right) = (self, other)\n            try:\n                if step:\n                    with np.errstate(all='ignore'):\n                        rstep = step(left.step, right)\n                    if not is_integer(rstep) or not rstep:\n                        raise ValueError\n                else:\n                    rstep = left.step\n                with np.errstate(all='ignore'):\n                    rstart = op(left.start, right)\n                    rstop = op(left.stop, right)\n                result = self.__class__(rstart, rstop, rstep, **attrs)\n                if not all((is_integer(x) for x in [rstart, rstop, rstep])):\n                    result = result.astype('float64')\n                return result\n            except (ValueError, TypeError, ZeroDivisionError):\n                return op(self._int64index, other)\n        name = '__{name}__'.format(name=op.__name__)\n        return compat.set_function_name(_evaluate_numeric_binop, name, cls)\n    cls.__add__ = _make_evaluate_binop(operator.add)\n    cls.__radd__ = _make_evaluate_binop(ops.radd)\n    cls.__sub__ = _make_evaluate_binop(operator.sub)\n    cls.__rsub__ = _make_evaluate_binop(ops.rsub)\n    cls.__mul__ = _make_evaluate_binop(operator.mul, step=operator.mul)\n    cls.__rmul__ = _make_evaluate_binop(ops.rmul, step=ops.rmul)\n    cls.__truediv__ = _make_evaluate_binop(operator.truediv, step=operator.truediv)\n    cls.__rtruediv__ = _make_evaluate_binop(ops.rtruediv, step=ops.rtruediv)"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [
                            "_typ = 'rangeindex'",
                            "_engine_type = libindex.Int64Engine",
                            "_range = None",
                            "_cached_data = None",
                            "_deprecation_message = 'RangeIndex.{} is deprecated and will be removed in a future version. Use RangeIndex.{} instead'"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__new__(cls, start=None, stop=None, step=None, dtype=None, copy=False, name=None, fastpath=None)",
                            "from_range(cls, data, name=None, dtype=None)",
                            "_simple_new(cls, values, name=None, dtype=None, **kwargs)",
                            "_validate_dtype(dtype)",
                            "_constructor(self)",
                            "_data(self)",
                            "_int64index(self)",
                            "_get_data_as_items(self)",
                            "__reduce__(self)",
                            "_format_attrs(self)",
                            "_format_data(self, name=None)",
                            "_format_with_header(self, header, na_rep='NaN', **kwargs)",
                            "start(self)",
                            "_start(self)",
                            "stop(self)",
                            "_stop(self)",
                            "step(self)",
                            "_step(self)",
                            "nbytes(self)",
                            "memory_usage(self, deep=False)",
                            "dtype(self)",
                            "is_unique(self)",
                            "is_monotonic_increasing(self)",
                            "is_monotonic_decreasing(self)",
                            "has_duplicates(self)",
                            "__contains__(self, key: Union[int, np.integer]) -> bool",
                            "get_loc(self, key, method=None, tolerance=None)",
                            "get_indexer(self, target, method=None, limit=None, tolerance=None)",
                            "tolist(self)",
                            "_shallow_copy(self, values=None, **kwargs)",
                            "copy(self, name=None, deep=False, dtype=None, **kwargs)",
                            "_minmax(self, meth)",
                            "min(self, axis=None, skipna=True, *args, **kwargs)",
                            "max(self, axis=None, skipna=True, *args, **kwargs)",
                            "argsort(self, *args, **kwargs)",
                            "equals(self, other)",
                            "intersection(self, other, sort=False)",
                            "_min_fitting_element(self, lower_limit)",
                            "_max_fitting_element(self, upper_limit)",
                            "_extended_gcd(self, a, b)",
                            "_union(self, other, sort)",
                            "join(self, other, how='left', level=None, return_indexers=False, sort=False)",
                            "_concat_same_dtype(self, indexes, name)",
                            "__len__(self)",
                            "size(self)",
                            "__getitem__(self, key)",
                            "__floordiv__(self, other)",
                            "all(self) -> bool",
                            "any(self) -> bool",
                            "_add_numeric_methods_binary(cls)"
                        ],
                        "class_level_variable_names": [
                            "_typ",
                            "_engine_type",
                            "_range",
                            "_cached_data",
                            "_deprecation_message"
                        ],
                        "constructor_variable_names": []
                    },
                    "used_imports": [
                        "import numpy as np",
                        "from pandas.util._decorators import Appender, cache_readonly",
                        "from pandas.core.dtypes.common import ensure_platform_int, ensure_python_int, is_int64_dtype, is_integer, is_integer_dtype, is_list_like, is_scalar, is_timedelta64_dtype",
                        "import pandas.core.common as com",
                        "from pandas.core.indexes.base import Index, _index_shared_docs"
                    ],
                    "variable_values": [
                        [
                            {
                                "com.any_not_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tolerance": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "target": {
                                    "variable_value": "range(0, 9)",
                                    "variable_type": "range",
                                    "variable_shape": "9"
                                },
                                "get_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.step": {
                                    "variable_value": "-3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "RangeIndex(start=7, stop=0, step=-3)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(3,)"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "step": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.start": {
                                    "variable_value": "7",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.stop": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "target_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "target_array.ndim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "valid": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ensure_platform_int": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_index_shared_docs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "com.any_not_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tolerance": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "target": {
                                    "variable_value": "range(0, 9)",
                                    "variable_type": "range",
                                    "variable_shape": "9"
                                },
                                "get_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.step": {
                                    "variable_value": "-3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "RangeIndex(start=7, stop=0, step=-3)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(3,)"
                                },
                                "start": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "stop": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "step": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.start": {
                                    "variable_value": "7",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.stop": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "target_array": {
                                    "variable_value": "array([0, 1, 2, 3, 4, 5, 6, 7, 8])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(9,)"
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "target_array.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "locs": {
                                    "variable_value": "array([-1, -1, -1,  2, -1, -1,  1, -1, -1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(9,)"
                                },
                                "valid": {
                                    "variable_value": "array([False, False, False,  True, False, False,  True, False, False])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(9,)"
                                },
                                "ensure_platform_int": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_index_shared_docs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "com.any_not_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tolerance": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "target": {
                                    "variable_value": "range(0, 9)",
                                    "variable_type": "range",
                                    "variable_shape": "9"
                                },
                                "get_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.step": {
                                    "variable_value": "-3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "RangeIndex(start=7, stop=-1, step=-3)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(3,)"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "step": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.start": {
                                    "variable_value": "7",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.stop": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "target_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "target_array.ndim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "valid": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ensure_platform_int": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_index_shared_docs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "com.any_not_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tolerance": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "target": {
                                    "variable_value": "range(0, 9)",
                                    "variable_type": "range",
                                    "variable_shape": "9"
                                },
                                "get_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.step": {
                                    "variable_value": "-3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "RangeIndex(start=7, stop=-1, step=-3)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(3,)"
                                },
                                "start": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "stop": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "step": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.start": {
                                    "variable_value": "7",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.stop": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "target_array": {
                                    "variable_value": "array([0, 1, 2, 3, 4, 5, 6, 7, 8])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(9,)"
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "target_array.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "locs": {
                                    "variable_value": "array([-1, -1,  2, -1, -1,  1, -1, -1, -1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(9,)"
                                },
                                "valid": {
                                    "variable_value": "array([False, False,  True, False, False,  True, False, False, False])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(9,)"
                                },
                                "ensure_platform_int": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_index_shared_docs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "com.any_not_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tolerance": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "target": {
                                    "variable_value": "range(0, 9)",
                                    "variable_type": "range",
                                    "variable_shape": "9"
                                },
                                "get_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.step": {
                                    "variable_value": "-3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "RangeIndex(start=7, stop=-2, step=-3)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(3,)"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "step": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.start": {
                                    "variable_value": "7",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.stop": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "target_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "target_array.ndim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "valid": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ensure_platform_int": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_index_shared_docs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "com.any_not_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tolerance": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "target": {
                                    "variable_value": "range(0, 9)",
                                    "variable_type": "range",
                                    "variable_shape": "9"
                                },
                                "get_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.step": {
                                    "variable_value": "-3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "RangeIndex(start=7, stop=-2, step=-3)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(3,)"
                                },
                                "start": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "stop": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "step": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.start": {
                                    "variable_value": "7",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.stop": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "target_array": {
                                    "variable_value": "array([0, 1, 2, 3, 4, 5, 6, 7, 8])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(9,)"
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "target_array.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "locs": {
                                    "variable_value": "array([-1,  2, -1, -1,  1, -1, -1,  0, -1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(9,)"
                                },
                                "valid": {
                                    "variable_value": "array([False,  True, False, False,  True, False, False,  True, False])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(9,)"
                                },
                                "ensure_platform_int": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_index_shared_docs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "com.any_not_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tolerance": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "target": {
                                    "variable_value": "range(0, 9)",
                                    "variable_type": "range",
                                    "variable_shape": "9"
                                },
                                "get_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.step": {
                                    "variable_value": "-3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "RangeIndex(start=7, stop=0, step=-3)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(3,)"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "step": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.start": {
                                    "variable_value": "7",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.stop": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._range": {
                                    "variable_value": "range(7, 0, -3)",
                                    "variable_type": "range",
                                    "variable_shape": "3"
                                },
                                "reverse.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse.step": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "target_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "target_array.ndim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "valid": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ensure_platform_int": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_index_shared_docs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "com.any_not_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tolerance": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "target": {
                                    "variable_value": "range(0, 9)",
                                    "variable_type": "range",
                                    "variable_shape": "9"
                                },
                                "get_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.step": {
                                    "variable_value": "-3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "RangeIndex(start=7, stop=0, step=-3)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(3,)"
                                },
                                "start": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "stop": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "step": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.start": {
                                    "variable_value": "7",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.stop": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "range(1, 10, 3)",
                                    "variable_type": "range",
                                    "variable_shape": "3"
                                },
                                "self._range": {
                                    "variable_value": "range(7, 0, -3)",
                                    "variable_type": "range",
                                    "variable_shape": "3"
                                },
                                "reverse.start": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "reverse.stop": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "reverse.step": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "target_array": {
                                    "variable_value": "array([0, 1, 2, 3, 4, 5, 6, 7, 8])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(9,)"
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "target_array.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "locs": {
                                    "variable_value": "array([-1,  2, -1, -1,  1, -1, -1,  0, -1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(9,)"
                                },
                                "valid": {
                                    "variable_value": "array([False,  True, False, False,  True, False, False,  True, False])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(9,)"
                                },
                                "ensure_platform_int": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_index_shared_docs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "com.any_not_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tolerance": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "target": {
                                    "variable_value": "range(0, 9)",
                                    "variable_type": "range",
                                    "variable_shape": "9"
                                },
                                "get_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.step": {
                                    "variable_value": "-3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "RangeIndex(start=7, stop=-1, step=-3)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(3,)"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "step": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.start": {
                                    "variable_value": "7",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.stop": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._range": {
                                    "variable_value": "range(7, -1, -3)",
                                    "variable_type": "range",
                                    "variable_shape": "3"
                                },
                                "reverse.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse.step": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "target_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "target_array.ndim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "valid": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ensure_platform_int": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_index_shared_docs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "com.any_not_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tolerance": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "target": {
                                    "variable_value": "range(0, 9)",
                                    "variable_type": "range",
                                    "variable_shape": "9"
                                },
                                "get_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.step": {
                                    "variable_value": "-3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "RangeIndex(start=7, stop=-1, step=-3)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(3,)"
                                },
                                "start": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "stop": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "step": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.start": {
                                    "variable_value": "7",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.stop": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "range(1, 10, 3)",
                                    "variable_type": "range",
                                    "variable_shape": "3"
                                },
                                "self._range": {
                                    "variable_value": "range(7, -1, -3)",
                                    "variable_type": "range",
                                    "variable_shape": "3"
                                },
                                "reverse.start": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "reverse.stop": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "reverse.step": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "target_array": {
                                    "variable_value": "array([0, 1, 2, 3, 4, 5, 6, 7, 8])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(9,)"
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "target_array.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "locs": {
                                    "variable_value": "array([-1,  2, -1, -1,  1, -1, -1,  0, -1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(9,)"
                                },
                                "valid": {
                                    "variable_value": "array([False,  True, False, False,  True, False, False,  True, False])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(9,)"
                                },
                                "ensure_platform_int": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_index_shared_docs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "com.any_not_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tolerance": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "target": {
                                    "variable_value": "range(0, 9)",
                                    "variable_type": "range",
                                    "variable_shape": "9"
                                },
                                "get_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.step": {
                                    "variable_value": "-3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "RangeIndex(start=7, stop=-2, step=-3)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(3,)"
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "step": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.start": {
                                    "variable_value": "7",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.stop": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._range": {
                                    "variable_value": "range(7, -2, -3)",
                                    "variable_type": "range",
                                    "variable_shape": "3"
                                },
                                "reverse.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reverse.step": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "target_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "target_array.ndim": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "valid": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ensure_platform_int": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_index_shared_docs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "com.any_not_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tolerance": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "target": {
                                    "variable_value": "range(0, 9)",
                                    "variable_type": "range",
                                    "variable_shape": "9"
                                },
                                "get_indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.step": {
                                    "variable_value": "-3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "RangeIndex(start=7, stop=-2, step=-3)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "(3,)"
                                },
                                "start": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "stop": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "step": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.start": {
                                    "variable_value": "7",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.stop": {
                                    "variable_value": "-2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "reverse": {
                                    "variable_value": "range(1, 10, 3)",
                                    "variable_type": "range",
                                    "variable_shape": "3"
                                },
                                "self._range": {
                                    "variable_value": "range(7, -2, -3)",
                                    "variable_type": "range",
                                    "variable_shape": "3"
                                },
                                "reverse.start": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "reverse.stop": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "reverse.step": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "target_array": {
                                    "variable_value": "array([0, 1, 2, 3, 4, 5, 6, 7, 8])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(9,)"
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_integer_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "target_array.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "locs": {
                                    "variable_value": "array([-1,  2, -1, -1,  1, -1, -1,  0, -1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(9,)"
                                },
                                "valid": {
                                    "variable_value": "array([False,  True, False, False,  True, False, False,  True, False])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(9,)"
                                },
                                "ensure_platform_int": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Appender": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_index_shared_docs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": {
                "file_scope_functions": [],
                "file_scope_classes": [
                    {
                        "class_declaration": "class RangeIndex:",
                        "functions": [
                            {
                                "code": "def __new__(\n    cls,\n    start=None,\n    stop=None,\n    step=None,\n    dtype=None,\n    copy=False,\n    name=None,\n    fastpath=None,\n):\n\n    if fastpath is not None:\n        warnings.warn(\n            \"The 'fastpath' keyword is deprecated, and will be \"\n            \"removed in a future version.\",\n            FutureWarning,\n            stacklevel=2,\n        )\n        if fastpath:\n            return cls._simple_new(range(start, stop, step), name=name)\n\n    cls._validate_dtype(dtype)\n\n    # RangeIndex\n    if isinstance(start, RangeIndex):\n        name = start.name if name is None else name\n        start = start._range\n        return cls._simple_new(start, dtype=dtype, name=name)\n\n    # validate the arguments\n    if com.all_none(start, stop, step):\n        raise TypeError(\"RangeIndex(...) must be called with integers\")\n\n    start = ensure_python_int(start) if start is not None else 0\n\n    if stop is None:\n        start, stop = 0, start\n    else:\n        stop = ensure_python_int(stop)\n\n    step = ensure_python_int(step) if step is not None else 1\n    if step == 0:\n        raise ValueError(\"Step must not be zero\")\n\n    rng = range(start, stop, step)\n    return cls._simple_new(rng, dtype=dtype, name=name)",
                                "signature": "__new__(cls, start=None, stop=None, step=None, dtype=None, copy=False, name=None, fastpath=None)"
                            },
                            {
                                "code": "@classmethod\ndef from_range(cls, data, name=None, dtype=None):\n    \"\"\"\n    Create RangeIndex from a range object.\n\n    Returns\n    -------\n    RangeIndex\n    \"\"\"\n    if not isinstance(data, range):\n        raise TypeError(\n            \"{0}(...) must be called with object coercible to a \"\n            \"range, {1} was passed\".format(cls.__name__, repr(data))\n        )\n\n    cls._validate_dtype(dtype)\n    return cls._simple_new(data, dtype=dtype, name=name)",
                                "signature": "from_range(cls, data, name=None, dtype=None)"
                            },
                            {
                                "code": "@classmethod\ndef _simple_new(cls, values, name=None, dtype=None, **kwargs):\n    result = object.__new__(cls)\n\n    # handle passed None, non-integers\n    if values is None:\n        # empty\n        values = range(0, 0, 1)\n    elif not isinstance(values, range):\n        return Index(values, dtype=dtype, name=name, **kwargs)\n\n    result._range = values\n\n    result.name = name\n    for k, v in kwargs.items():\n        setattr(result, k, v)\n\n    result._reset_identity()\n    return result",
                                "signature": "_simple_new(cls, values, name=None, dtype=None, **kwargs)"
                            },
                            {
                                "code": "@staticmethod\ndef _validate_dtype(dtype):\n    \"\"\" require dtype to be None or int64 \"\"\"\n    if not (dtype is None or is_int64_dtype(dtype)):\n        raise TypeError(\"Invalid to pass a non-int64 dtype to RangeIndex\")",
                                "signature": "_validate_dtype(dtype)"
                            },
                            {
                                "code": "@cache_readonly\ndef _constructor(self):\n    \"\"\" return the class to use for construction \"\"\"\n    return Int64Index",
                                "signature": "_constructor(self)"
                            },
                            {
                                "code": "@property\ndef _data(self):\n    \"\"\"\n    An int array that for performance reasons is created only when needed.\n\n    The constructed array is saved in ``_cached_data``. This allows us to\n    check if the array has been created without accessing ``_data`` and\n    triggering the construction.\n    \"\"\"\n    if self._cached_data is None:\n        self._cached_data = np.arange(\n            self.start, self.stop, self.step, dtype=np.int64\n        )\n    return self._cached_data",
                                "signature": "_data(self)"
                            },
                            {
                                "code": "@cache_readonly\ndef _int64index(self):\n    return Int64Index._simple_new(self._data, name=self.name)",
                                "signature": "_int64index(self)"
                            },
                            {
                                "code": "def _get_data_as_items(self):\n    \"\"\" return a list of tuples of start, stop, step \"\"\"\n    rng = self._range\n    return [(\"start\", rng.start), (\"stop\", rng.stop), (\"step\", rng.step)]",
                                "signature": "_get_data_as_items(self)"
                            },
                            {
                                "code": "def __reduce__(self):\n    d = self._get_attributes_dict()\n    d.update(dict(self._get_data_as_items()))\n    return ibase._new_Index, (self.__class__, d), None",
                                "signature": "__reduce__(self)"
                            },
                            {
                                "code": "def _format_attrs(self):\n    \"\"\"\n    Return a list of tuples of the (attr, formatted_value)\n    \"\"\"\n    attrs = self._get_data_as_items()\n    if self.name is not None:\n        attrs.append((\"name\", ibase.default_pprint(self.name)))\n    return attrs",
                                "signature": "_format_attrs(self)"
                            },
                            {
                                "code": "def _format_data(self, name=None):\n    # we are formatting thru the attributes\n    return None",
                                "signature": "_format_data(self, name=None)"
                            },
                            {
                                "code": "def _format_with_header(self, header, na_rep=\"NaN\", **kwargs):\n    return header + list(map(pprint_thing, self._range))",
                                "signature": "_format_with_header(self, header, na_rep='NaN', **kwargs)"
                            },
                            {
                                "code": "@cache_readonly\ndef start(self):\n    \"\"\"\n    The value of the `start` parameter (``0`` if this was not supplied).\n    \"\"\"\n    # GH 25710\n    return self._range.start",
                                "signature": "start(self)"
                            },
                            {
                                "code": "@property\ndef _start(self):\n    \"\"\"\n    The value of the `start` parameter (``0`` if this was not supplied).\n\n     .. deprecated:: 0.25.0\n        Use ``start`` instead.\n    \"\"\"\n    warnings.warn(\n        self._deprecation_message.format(\"_start\", \"start\"),\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    return self.start",
                                "signature": "_start(self)"
                            },
                            {
                                "code": "@cache_readonly\ndef stop(self):\n    \"\"\"\n    The value of the `stop` parameter.\n    \"\"\"\n    return self._range.stop",
                                "signature": "stop(self)"
                            },
                            {
                                "code": "@property\ndef _stop(self):\n    \"\"\"\n    The value of the `stop` parameter.\n\n     .. deprecated:: 0.25.0\n        Use ``stop`` instead.\n    \"\"\"\n    # GH 25710\n    warnings.warn(\n        self._deprecation_message.format(\"_stop\", \"stop\"),\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    return self.stop",
                                "signature": "_stop(self)"
                            },
                            {
                                "code": "@cache_readonly\ndef step(self):\n    \"\"\"\n    The value of the `step` parameter (``1`` if this was not supplied).\n    \"\"\"\n    # GH 25710\n    return self._range.step",
                                "signature": "step(self)"
                            },
                            {
                                "code": "@property\ndef _step(self):\n    \"\"\"\n    The value of the `step` parameter (``1`` if this was not supplied).\n\n     .. deprecated:: 0.25.0\n        Use ``step`` instead.\n    \"\"\"\n    # GH 25710\n    warnings.warn(\n        self._deprecation_message.format(\"_step\", \"step\"),\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    return self.step",
                                "signature": "_step(self)"
                            },
                            {
                                "code": "@cache_readonly\ndef nbytes(self):\n    \"\"\"\n    Return the number of bytes in the underlying data.\n    \"\"\"\n    rng = self._range\n    return getsizeof(rng) + sum(\n        getsizeof(getattr(rng, attr_name))\n        for attr_name in [\"start\", \"stop\", \"step\"]\n    )",
                                "signature": "nbytes(self)"
                            },
                            {
                                "code": "def memory_usage(self, deep=False):\n    \"\"\"\n    Memory usage of my values\n\n    Parameters\n    ----------\n    deep : bool\n        Introspect the data deeply, interrogate\n        `object` dtypes for system-level memory consumption\n\n    Returns\n    -------\n    bytes used\n\n    Notes\n    -----\n    Memory usage does not include memory consumed by elements that\n    are not components of the array if deep=False\n\n    See Also\n    --------\n    numpy.ndarray.nbytes\n    \"\"\"\n    return self.nbytes",
                                "signature": "memory_usage(self, deep=False)"
                            },
                            {
                                "code": "@property\ndef dtype(self):\n    return np.dtype(np.int64)",
                                "signature": "dtype(self)"
                            },
                            {
                                "code": "@property\ndef is_unique(self):\n    \"\"\" return if the index has unique values \"\"\"\n    return True",
                                "signature": "is_unique(self)"
                            },
                            {
                                "code": "@cache_readonly\ndef is_monotonic_increasing(self):\n    return self._range.step > 0 or len(self) <= 1",
                                "signature": "is_monotonic_increasing(self)"
                            },
                            {
                                "code": "@cache_readonly\ndef is_monotonic_decreasing(self):\n    return self._range.step < 0 or len(self) <= 1",
                                "signature": "is_monotonic_decreasing(self)"
                            },
                            {
                                "code": "@property\ndef has_duplicates(self):\n    return False",
                                "signature": "has_duplicates(self)"
                            },
                            {
                                "code": "def __contains__(self, key: Union[int, np.integer]) -> bool:\n    hash(key)\n    try:\n        key = ensure_python_int(key)\n    except TypeError:\n        return False\n    return key in self._range",
                                "signature": "__contains__(self, key: Union[int, np.integer]) -> bool"
                            },
                            {
                                "code": "@Appender(_index_shared_docs[\"get_loc\"])\ndef get_loc(self, key, method=None, tolerance=None):\n    if is_integer(key) and method is None and tolerance is None:\n        new_key = int(key)\n        try:\n            return self._range.index(new_key)\n        except ValueError:\n            raise KeyError(key)\n    return super().get_loc(key, method=method, tolerance=tolerance)",
                                "signature": "get_loc(self, key, method=None, tolerance=None)"
                            },
                            {
                                "code": "@Appender(_index_shared_docs[\"get_indexer\"])\ndef get_indexer(self, target, method=None, limit=None, tolerance=None):\n    if com.any_not_none(method, tolerance, limit) or not is_list_like(target):\n        return super().get_indexer(\n            target, method=method, tolerance=tolerance, limit=limit\n        )\n\n    if self.step > 0:\n        start, stop, step = self.start, self.stop, self.step\n    else:\n        # Work on reversed range for simplicity:\n        start, stop, step = (self.stop - self.step, self.start + 1, -self.step)\n\n    target_array = np.asarray(target)\n    if not (is_integer_dtype(target_array) and target_array.ndim == 1):\n        # checks/conversions/roundings are delegated to general method\n        return super().get_indexer(target, method=method, tolerance=tolerance)\n\n    locs = target_array - start\n    valid = (locs % step == 0) & (locs >= 0) & (target_array < stop)\n    locs[~valid] = -1\n    locs[valid] = locs[valid] / step\n\n    if step != self.step:\n        # We reversed this range: transform to original locs\n        locs[valid] = len(self) - 1 - locs[valid]\n    return ensure_platform_int(locs)",
                                "signature": "get_indexer(self, target, method=None, limit=None, tolerance=None)"
                            },
                            {
                                "code": "def tolist(self):\n    return list(self._range)",
                                "signature": "tolist(self)"
                            },
                            {
                                "code": "@Appender(_index_shared_docs[\"_shallow_copy\"])\ndef _shallow_copy(self, values=None, **kwargs):\n    if values is None:\n        name = kwargs.get(\"name\", self.name)\n        return self._simple_new(self._range, name=name)\n    else:\n        kwargs.setdefault(\"name\", self.name)\n        return self._int64index._shallow_copy(values, **kwargs)",
                                "signature": "_shallow_copy(self, values=None, **kwargs)"
                            },
                            {
                                "code": "@Appender(ibase._index_shared_docs[\"copy\"])\ndef copy(self, name=None, deep=False, dtype=None, **kwargs):\n    self._validate_dtype(dtype)\n    if name is None:\n        name = self.name\n    return self.from_range(self._range, name=name)",
                                "signature": "copy(self, name=None, deep=False, dtype=None, **kwargs)"
                            },
                            {
                                "code": "def _minmax(self, meth):\n    no_steps = len(self) - 1\n    if no_steps == -1:\n        return np.nan\n    elif (meth == \"min\" and self.step > 0) or (meth == \"max\" and self.step < 0):\n        return self.start\n\n    return self.start + self.step * no_steps",
                                "signature": "_minmax(self, meth)"
                            },
                            {
                                "code": "def min(self, axis=None, skipna=True, *args, **kwargs):\n    \"\"\"The minimum value of the RangeIndex\"\"\"\n    nv.validate_minmax_axis(axis)\n    nv.validate_min(args, kwargs)\n    return self._minmax(\"min\")",
                                "signature": "min(self, axis=None, skipna=True, *args, **kwargs)"
                            },
                            {
                                "code": "def max(self, axis=None, skipna=True, *args, **kwargs):\n    \"\"\"The maximum value of the RangeIndex\"\"\"\n    nv.validate_minmax_axis(axis)\n    nv.validate_max(args, kwargs)\n    return self._minmax(\"max\")",
                                "signature": "max(self, axis=None, skipna=True, *args, **kwargs)"
                            },
                            {
                                "code": "def argsort(self, *args, **kwargs):\n    \"\"\"\n    Returns the indices that would sort the index and its\n    underlying data.\n\n    Returns\n    -------\n    argsorted : numpy array\n\n    See Also\n    --------\n    numpy.ndarray.argsort\n    \"\"\"\n    nv.validate_argsort(args, kwargs)\n\n    if self._range.step > 0:\n        return np.arange(len(self))\n    else:\n        return np.arange(len(self) - 1, -1, -1)",
                                "signature": "argsort(self, *args, **kwargs)"
                            },
                            {
                                "code": "def equals(self, other):\n    \"\"\"\n    Determines if two Index objects contain the same elements.\n    \"\"\"\n    if isinstance(other, RangeIndex):\n        return self._range == other._range\n    return super().equals(other)",
                                "signature": "equals(self, other)"
                            },
                            {
                                "code": "def intersection(self, other, sort=False):\n    \"\"\"\n    Form the intersection of two Index objects.\n\n    Parameters\n    ----------\n    other : Index or array-like\n    sort : False or None, default False\n        Sort the resulting index if possible\n\n        .. versionadded:: 0.24.0\n\n        .. versionchanged:: 0.24.1\n\n           Changed the default to ``False`` to match the behaviour\n           from before 0.24.0.\n\n    Returns\n    -------\n    intersection : Index\n    \"\"\"\n    self._validate_sort_keyword(sort)\n\n    if self.equals(other):\n        return self._get_reconciled_name_object(other)\n\n    if not isinstance(other, RangeIndex):\n        return super().intersection(other, sort=sort)\n\n    if not len(self) or not len(other):\n        return self._simple_new(None)\n\n    first = self._range[::-1] if self.step < 0 else self._range\n    second = other._range[::-1] if other.step < 0 else other._range\n\n    # check whether intervals intersect\n    # deals with in- and decreasing ranges\n    int_low = max(first.start, second.start)\n    int_high = min(first.stop, second.stop)\n    if int_high <= int_low:\n        return self._simple_new(None)\n\n    # Method hint: linear Diophantine equation\n    # solve intersection problem\n    # performance hint: for identical step sizes, could use\n    # cheaper alternative\n    gcd, s, t = self._extended_gcd(first.step, second.step)\n\n    # check whether element sets intersect\n    if (first.start - second.start) % gcd:\n        return self._simple_new(None)\n\n    # calculate parameters for the RangeIndex describing the\n    # intersection disregarding the lower bounds\n    tmp_start = first.start + (second.start - first.start) * first.step // gcd * s\n    new_step = first.step * second.step // gcd\n    new_range = range(tmp_start, int_high, new_step)\n    new_index = self._simple_new(new_range)\n\n    # adjust index to limiting interval\n    new_start = new_index._min_fitting_element(int_low)\n    new_range = range(new_start, new_index.stop, new_index.step)\n    new_index = self._simple_new(new_range)\n\n    if (self.step < 0 and other.step < 0) is not (new_index.step < 0):\n        new_index = new_index[::-1]\n    if sort is None:\n        new_index = new_index.sort_values()\n    return new_index",
                                "signature": "intersection(self, other, sort=False)"
                            },
                            {
                                "code": "def _min_fitting_element(self, lower_limit):\n    \"\"\"Returns the smallest element greater than or equal to the limit\"\"\"\n    no_steps = -(-(lower_limit - self.start) // abs(self.step))\n    return self.start + abs(self.step) * no_steps",
                                "signature": "_min_fitting_element(self, lower_limit)"
                            },
                            {
                                "code": "def _max_fitting_element(self, upper_limit):\n    \"\"\"Returns the largest element smaller than or equal to the limit\"\"\"\n    no_steps = (upper_limit - self.start) // abs(self.step)\n    return self.start + abs(self.step) * no_steps",
                                "signature": "_max_fitting_element(self, upper_limit)"
                            },
                            {
                                "code": "def _extended_gcd(self, a, b):\n    \"\"\"\n    Extended Euclidean algorithms to solve Bezout's identity:\n       a*x + b*y = gcd(x, y)\n    Finds one particular solution for x, y: s, t\n    Returns: gcd, s, t\n    \"\"\"\n    s, old_s = 0, 1\n    t, old_t = 1, 0\n    r, old_r = b, a\n    while r:\n        quotient = old_r // r\n        old_r, r = r, old_r - quotient * r\n        old_s, s = s, old_s - quotient * s\n        old_t, t = t, old_t - quotient * t\n    return old_r, old_s, old_t",
                                "signature": "_extended_gcd(self, a, b)"
                            },
                            {
                                "code": "def _union(self, other, sort):\n    \"\"\"\n    Form the union of two Index objects and sorts if possible\n\n    Parameters\n    ----------\n    other : Index or array-like\n\n    sort : False or None, default None\n        Whether to sort resulting index. ``sort=None`` returns a\n        monotonically increasing ``RangeIndex`` if possible or a sorted\n        ``Int64Index`` if not. ``sort=False`` always returns an\n        unsorted ``Int64Index``\n\n        .. versionadded:: 0.25.0\n\n    Returns\n    -------\n    union : Index\n    \"\"\"\n    if not len(other) or self.equals(other) or not len(self):\n        return super()._union(other, sort=sort)\n\n    if isinstance(other, RangeIndex) and sort is None:\n        start_s, step_s = self.start, self.step\n        end_s = self.start + self.step * (len(self) - 1)\n        start_o, step_o = other.start, other.step\n        end_o = other.start + other.step * (len(other) - 1)\n        if self.step < 0:\n            start_s, step_s, end_s = end_s, -step_s, start_s\n        if other.step < 0:\n            start_o, step_o, end_o = end_o, -step_o, start_o\n        if len(self) == 1 and len(other) == 1:\n            step_s = step_o = abs(self.start - other.start)\n        elif len(self) == 1:\n            step_s = step_o\n        elif len(other) == 1:\n            step_o = step_s\n        start_r = min(start_s, start_o)\n        end_r = max(end_s, end_o)\n        if step_o == step_s:\n            if (\n                (start_s - start_o) % step_s == 0\n                and (start_s - end_o) <= step_s\n                and (start_o - end_s) <= step_s\n            ):\n                return self.__class__(start_r, end_r + step_s, step_s)\n            if (\n                (step_s % 2 == 0)\n                and (abs(start_s - start_o) <= step_s / 2)\n                and (abs(end_s - end_o) <= step_s / 2)\n            ):\n                return self.__class__(start_r, end_r + step_s / 2, step_s / 2)\n        elif step_o % step_s == 0:\n            if (\n                (start_o - start_s) % step_s == 0\n                and (start_o + step_s >= start_s)\n                and (end_o - step_s <= end_s)\n            ):\n                return self.__class__(start_r, end_r + step_s, step_s)\n        elif step_s % step_o == 0:\n            if (\n                (start_s - start_o) % step_o == 0\n                and (start_s + step_o >= start_o)\n                and (end_s - step_o <= end_o)\n            ):\n                return self.__class__(start_r, end_r + step_o, step_o)\n    return self._int64index._union(other, sort=sort)",
                                "signature": "_union(self, other, sort)"
                            },
                            {
                                "code": "@Appender(_index_shared_docs[\"join\"])\ndef join(self, other, how=\"left\", level=None, return_indexers=False, sort=False):\n    if how == \"outer\" and self is not other:\n        # note: could return RangeIndex in more circumstances\n        return self._int64index.join(other, how, level, return_indexers, sort)\n\n    return super().join(other, how, level, return_indexers, sort)",
                                "signature": "join(self, other, how='left', level=None, return_indexers=False, sort=False)"
                            },
                            {
                                "code": "def _concat_same_dtype(self, indexes, name):\n    \"\"\"\n    Concatenates multiple RangeIndex instances. All members of \"indexes\" must\n    be of type RangeIndex; result will be RangeIndex if possible, Int64Index\n    otherwise. E.g.:\n    indexes = [RangeIndex(3), RangeIndex(3, 6)] -> RangeIndex(6)\n    indexes = [RangeIndex(3), RangeIndex(4, 6)] -> Int64Index([0,1,2,4,5])\n    \"\"\"\n    start = step = next_ = None\n\n    # Filter the empty indexes\n    non_empty_indexes = [obj for obj in indexes if len(obj)]\n\n    for obj in non_empty_indexes:\n        rng = obj._range  # type: range\n\n        if start is None:\n            # This is set by the first non-empty index\n            start = rng.start\n            if step is None and len(rng) > 1:\n                step = rng.step\n        elif step is None:\n            # First non-empty index had only one element\n            if rng.start == start:\n                result = Int64Index(np.concatenate([x._values for x in indexes]))\n                return result.rename(name)\n\n            step = rng.start - start\n\n        non_consecutive = (step != rng.step and len(rng) > 1) or (\n            next_ is not None and rng.start != next_\n        )\n        if non_consecutive:\n            result = Int64Index(np.concatenate([x._values for x in indexes]))\n            return result.rename(name)\n\n        if step is not None:\n            next_ = rng[-1] + step\n\n    if non_empty_indexes:\n        # Get the stop value from \"next\" or alternatively\n        # from the last non-empty index\n        stop = non_empty_indexes[-1].stop if next_ is None else next_\n        return RangeIndex(start, stop, step).rename(name)\n\n    # Here all \"indexes\" had 0 length, i.e. were empty.\n    # In this case return an empty range index.\n    return RangeIndex(0, 0).rename(name)",
                                "signature": "_concat_same_dtype(self, indexes, name)"
                            },
                            {
                                "code": "def __len__(self):\n    \"\"\"\n    return the length of the RangeIndex\n    \"\"\"\n    return len(self._range)",
                                "signature": "__len__(self)"
                            },
                            {
                                "code": "@property\ndef size(self):\n    return len(self)",
                                "signature": "size(self)"
                            },
                            {
                                "code": "def __getitem__(self, key):\n    \"\"\"\n    Conserve RangeIndex type for scalar and slice keys.\n    \"\"\"\n    if isinstance(key, slice):\n        new_range = self._range[key]\n        return self._simple_new(new_range, name=self.name)\n    elif is_integer(key):\n        new_key = int(key)\n        try:\n            return self._range[new_key]\n        except IndexError:\n            raise IndexError(\n                \"index {key} is out of bounds for axis 0 \"\n                \"with size {size}\".format(key=key, size=len(self))\n            )\n    elif is_scalar(key):\n        raise IndexError(\n            \"only integers, slices (`:`), \"\n            \"ellipsis (`...`), numpy.newaxis (`None`) \"\n            \"and integer or boolean \"\n            \"arrays are valid indices\"\n        )\n    # fall back to Int64Index\n    return super().__getitem__(key)",
                                "signature": "__getitem__(self, key)"
                            },
                            {
                                "code": "def __floordiv__(self, other):\n    if isinstance(other, (ABCSeries, ABCDataFrame)):\n        return NotImplemented\n\n    if is_integer(other) and other != 0:\n        if len(self) == 0 or self.start % other == 0 and self.step % other == 0:\n            start = self.start // other\n            step = self.step // other\n            stop = start + len(self) * step\n            new_range = range(start, stop, step or 1)\n            return self._simple_new(new_range, name=self.name)\n        if len(self) == 1:\n            start = self.start // other\n            new_range = range(start, start + 1, 1)\n            return self._simple_new(new_range, name=self.name)\n    return self._int64index // other",
                                "signature": "__floordiv__(self, other)"
                            },
                            {
                                "code": "def all(self) -> bool:\n    return 0 not in self._range",
                                "signature": "all(self) -> bool"
                            },
                            {
                                "code": "def any(self) -> bool:\n    return any(self._range)",
                                "signature": "any(self) -> bool"
                            },
                            {
                                "code": "@classmethod\ndef _add_numeric_methods_binary(cls):\n    \"\"\" add in numeric methods, specialized to RangeIndex \"\"\"\n\n    def _make_evaluate_binop(op, step=False):\n        \"\"\"\n        Parameters\n        ----------\n        op : callable that accepts 2 parms\n            perform the binary op\n        step : callable, optional, default to False\n            op to apply to the step parm if not None\n            if False, use the existing step\n        \"\"\"\n\n        def _evaluate_numeric_binop(self, other):\n            if isinstance(other, (ABCSeries, ABCDataFrame)):\n                return NotImplemented\n            elif isinstance(other, ABCTimedeltaIndex):\n                # Defer to TimedeltaIndex implementation\n                return NotImplemented\n            elif isinstance(other, (timedelta, np.timedelta64)):\n                # GH#19333 is_integer evaluated True on timedelta64,\n                # so we need to catch these explicitly\n                return op(self._int64index, other)\n            elif is_timedelta64_dtype(other):\n                # Must be an np.ndarray; GH#22390\n                return op(self._int64index, other)\n\n            other = extract_array(other, extract_numpy=True)\n            attrs = self._get_attributes_dict()\n\n            left, right = self, other\n\n            try:\n                # apply if we have an override\n                if step:\n                    with np.errstate(all=\"ignore\"):\n                        rstep = step(left.step, right)\n\n                    # we don't have a representable op\n                    # so return a base index\n                    if not is_integer(rstep) or not rstep:\n                        raise ValueError\n\n                else:\n                    rstep = left.step\n\n                with np.errstate(all=\"ignore\"):\n                    rstart = op(left.start, right)\n                    rstop = op(left.stop, right)\n\n                result = self.__class__(rstart, rstop, rstep, **attrs)\n\n                # for compat with numpy / Int64Index\n                # even if we can represent as a RangeIndex, return\n                # as a Float64Index if we have float-like descriptors\n                if not all(is_integer(x) for x in [rstart, rstop, rstep]):\n                    result = result.astype(\"float64\")\n\n                return result\n\n            except (ValueError, TypeError, ZeroDivisionError):\n                # Defer to Int64Index implementation\n                return op(self._int64index, other)\n                # TODO: Do attrs get handled reliably?\n\n        name = \"__{name}__\".format(name=op.__name__)\n        return compat.set_function_name(_evaluate_numeric_binop, name, cls)\n\n    cls.__add__ = _make_evaluate_binop(operator.add)\n    cls.__radd__ = _make_evaluate_binop(ops.radd)\n    cls.__sub__ = _make_evaluate_binop(operator.sub)\n    cls.__rsub__ = _make_evaluate_binop(ops.rsub)\n    cls.__mul__ = _make_evaluate_binop(operator.mul, step=operator.mul)\n    cls.__rmul__ = _make_evaluate_binop(ops.rmul, step=ops.rmul)\n    cls.__truediv__ = _make_evaluate_binop(operator.truediv, step=operator.truediv)\n    cls.__rtruediv__ = _make_evaluate_binop(ops.rtruediv, step=ops.rtruediv)",
                                "signature": "_add_numeric_methods_binary(cls)"
                            }
                        ]
                    }
                ]
            },
            "variables_in_file": {
                "Int64Index": [
                    675,
                    36,
                    198,
                    684,
                    179
                ],
                "_typ": [
                    74
                ],
                "_engine_type": [
                    75
                ],
                "libindex.Int64Engine": [
                    75
                ],
                "libindex": [
                    75
                ],
                "_range": [
                    76
                ],
                "_cached_data": [
                    79
                ],
                "fastpath": [
                    101,
                    94
                ],
                "warnings.warn": [
                    299,
                    275,
                    252,
                    95
                ],
                "warnings": [
                    299,
                    275,
                    252,
                    95
                ],
                "FutureWarning": [
                    98
                ],
                "cls._simple_new": [
                    128,
                    110,
                    102,
                    146
                ],
                "cls": [
                    128,
                    832,
                    833,
                    834,
                    835,
                    836,
                    102,
                    104,
                    110,
                    142,
                    145,
                    146,
                    150,
                    827,
                    829,
                    830,
                    831
                ],
                "range": [
                    102,
                    745,
                    139,
                    749,
                    533,
                    538,
                    155,
                    156,
                    127
                ],
                "start": [
                    389,
                    392,
                    399,
                    659,
                    667,
                    669,
                    674,
                    678,
                    694,
                    102,
                    742,
                    744,
                    745,
                    107,
                    108,
                    109,
                    110,
                    748,
                    749,
                    113,
                    116,
                    119,
                    127
                ],
                "stop": [
                    389,
                    102,
                    392,
                    744,
                    745,
                    400,
                    113,
                    693,
                    118,
                    119,
                    694,
                    121,
                    127
                ],
                "step": [
                    389,
                    392,
                    400,
                    402,
                    659,
                    404,
                    795,
                    797,
                    670,
                    671,
                    672,
                    678,
                    680,
                    687,
                    688,
                    694,
                    102,
                    743,
                    744,
                    745,
                    113,
                    123,
                    124,
                    127
                ],
                "name": [
                    128,
                    161,
                    416,
                    676,
                    102,
                    424,
                    425,
                    426,
                    108,
                    685,
                    110,
                    146,
                    694,
                    698,
                    827,
                    826,
                    157,
                    415
                ],
                "cls._validate_dtype": [
                    104,
                    145
                ],
                "dtype": [
                    128,
                    423,
                    104,
                    173,
                    110,
                    145,
                    146,
                    157
                ],
                "isinstance": [
                    737,
                    775,
                    777,
                    714,
                    107,
                    139,
                    780,
                    597,
                    503,
                    473,
                    156
                ],
                "RangeIndex": [
                    839,
                    107,
                    597,
                    694,
                    503,
                    473,
                    698
                ],
                "start.name": [
                    108
                ],
                "start._range": [
                    109
                ],
                "com.all_none": [
                    113
                ],
                "com": [
                    113,
                    383
                ],
                "TypeError": [
                    140,
                    174,
                    367,
                    114,
                    821
                ],
                "ensure_python_int": [
                    121,
                    123,
                    116,
                    366
                ],
                "ValueError": [
                    377,
                    802,
                    821,
                    125
                ],
                "rng": [
                    128,
                    674,
                    678,
                    680,
                    681,
                    202,
                    203,
                    671,
                    688,
                    665,
                    311,
                    312,
                    313,
                    669,
                    670,
                    127
                ],
                "data": [
                    146,
                    139,
                    142
                ],
                "format": [
                    826,
                    723,
                    141
                ],
                "cls.__name__": [
                    142
                ],
                "repr": [
                    142
                ],
                "classmethod": [
                    130,
                    148,
                    759
                ],
                "result": [
                    161,
                    163,
                    675,
                    165,
                    166,
                    676,
                    811,
                    684,
                    685,
                    817,
                    819,
                    150,
                    159
                ],
                "object.__new__": [
                    150
                ],
                "object": [
                    150
                ],
                "values": [
                    419,
                    153,
                    155,
                    156,
                    157,
                    414,
                    159
                ],
                "Index": [
                    157
                ],
                "kwargs": [
                    418,
                    162,
                    419,
                    462,
                    440,
                    157,
                    446,
                    415
                ],
                "result._range": [
                    159
                ],
                "result.name": [
                    161
                ],
                "k": [
                    162,
                    163
                ],
                "v": [
                    162,
                    163
                ],
                "kwargs.items": [
                    162
                ],
                "setattr": [
                    163
                ],
                "result._reset_identity": [
                    165
                ],
                "is_int64_dtype": [
                    173
                ],
                "staticmethod": [
                    170
                ],
                "cache_readonly": [
                    259,
                    196,
                    355,
                    236,
                    176,
                    306,
                    282,
                    351
                ],
                "self._cached_data": [
                    194,
                    190,
                    191
                ],
                "self": [
                    517,
                    523,
                    527,
                    534,
                    539,
                    541,
                    549,
                    550,
                    554,
                    555,
                    594,
                    598,
                    599,
                    602,
                    606,
                    607,
                    608,
                    620,
                    626,
                    633,
                    640,
                    641,
                    645,
                    647,
                    190,
                    191,
                    192,
                    704,
                    194,
                    708,
                    198,
                    202,
                    715,
                    716,
                    206,
                    207,
                    208,
                    720,
                    724,
                    217,
                    218,
                    219,
                    227,
                    741,
                    742,
                    743,
                    744,
                    746,
                    747,
                    748,
                    750,
                    751,
                    242,
                    754,
                    757,
                    253,
                    257,
                    264,
                    783,
                    786,
                    276,
                    789,
                    791,
                    280,
                    288,
                    811,
                    300,
                    304,
                    311,
                    823,
                    340,
                    353,
                    357,
                    369,
                    376,
                    388,
                    389,
                    392,
                    404,
                    406,
                    410,
                    415,
                    416,
                    418,
                    419,
                    423,
                    425,
                    426,
                    429,
                    432,
                    433,
                    435,
                    441,
                    447,
                    464,
                    465,
                    467,
                    474,
                    498,
                    500,
                    501,
                    506,
                    507,
                    509
                ],
                "np.arange": [
                    465,
                    467,
                    191
                ],
                "np": [
                    192,
                    675,
                    807,
                    394,
                    363,
                    684,
                    780,
                    431,
                    465,
                    467,
                    344,
                    796,
                    191
                ],
                "self.start": [
                    192,
                    257,
                    389,
                    549,
                    550,
                    392,
                    741,
                    554,
                    555,
                    742,
                    748,
                    433,
                    435,
                    598,
                    599,
                    607
                ],
                "self.stop": [
                    192,
                    280,
                    392,
                    389
                ],
                "self.step": [
                    388,
                    389,
                    392,
                    404,
                    541,
                    549,
                    550,
                    554,
                    555,
                    304,
                    432,
                    435,
                    192,
                    598,
                    599,
                    602,
                    741,
                    743,
                    509
                ],
                "np.int64": [
                    192,
                    344
                ],
                "property": [
                    290,
                    706,
                    359,
                    266,
                    244,
                    181,
                    342,
                    346
                ],
                "Int64Index._simple_new": [
                    198
                ],
                "self._data": [
                    198
                ],
                "self.name": [
                    418,
                    198,
                    425,
                    746,
                    716,
                    750,
                    218,
                    219,
                    415
                ],
                "self._range": [
                    264,
                    410,
                    288,
                    416,
                    426,
                    311,
                    704,
                    202,
                    715,
                    464,
                    720,
                    474,
                    353,
                    227,
                    357,
                    369,
                    242,
                    754,
                    757,
                    376,
                    509
                ],
                "rng.start": [
                    674,
                    678,
                    681,
                    203,
                    669
                ],
                "rng.stop": [
                    203
                ],
                "rng.step": [
                    680,
                    203,
                    671
                ],
                "d": [
                    208,
                    206,
                    207
                ],
                "self._get_attributes_dict": [
                    789,
                    206
                ],
                "d.update": [
                    207
                ],
                "dict": [
                    207
                ],
                "self._get_data_as_items": [
                    217,
                    207
                ],
                "ibase._new_Index": [
                    208
                ],
                "ibase": [
                    208,
                    219,
                    421
                ],
                "self.__class__": [
                    640,
                    811,
                    620,
                    208,
                    626,
                    633
                ],
                "attrs": [
                    811,
                    789,
                    217,
                    219,
                    220
                ],
                "attrs.append": [
                    219
                ],
                "ibase.default_pprint": [
                    219
                ],
                "header": [
                    227
                ],
                "list": [
                    410,
                    227
                ],
                "map": [
                    227
                ],
                "pprint_thing": [
                    227
                ],
                "_deprecation_message": [
                    230
                ],
                "self._range.start": [
                    242
                ],
                "self._deprecation_message.format": [
                    276,
                    253,
                    300
                ],
                "self._deprecation_message": [
                    276,
                    253,
                    300
                ],
                "DeprecationWarning": [
                    301,
                    277,
                    254
                ],
                "self._range.stop": [
                    264
                ],
                "self._range.step": [
                    288,
                    353,
                    357,
                    464
                ],
                "getsizeof": [
                    312,
                    313
                ],
                "sum": [
                    312
                ],
                "getattr": [
                    313
                ],
                "attr_name": [
                    313,
                    314
                ],
                "self.nbytes": [
                    340
                ],
                "np.dtype": [
                    344
                ],
                "len": [
                    406,
                    662,
                    670,
                    680,
                    429,
                    704,
                    708,
                    465,
                    594,
                    467,
                    724,
                    599,
                    601,
                    606,
                    608,
                    353,
                    610,
                    357,
                    741,
                    744,
                    747,
                    506
                ],
                "Union": [
                    363
                ],
                "int": [
                    363,
                    718,
                    374
                ],
                "np.integer": [
                    363
                ],
                "hash": [
                    364
                ],
                "key": [
                    714,
                    715,
                    364,
                    717,
                    366,
                    718,
                    369,
                    724,
                    373,
                    374,
                    726,
                    378,
                    379,
                    734
                ],
                "bool": [
                    753,
                    363,
                    756
                ],
                "is_integer": [
                    801,
                    740,
                    717,
                    816,
                    373
                ],
                "method": [
                    385,
                    397,
                    373,
                    379,
                    383
                ],
                "tolerance": [
                    385,
                    397,
                    373,
                    379,
                    383
                ],
                "new_key": [
                    376,
                    718,
                    374,
                    720
                ],
                "self._range.index": [
                    376
                ],
                "KeyError": [
                    378
                ],
                "get_loc": [
                    379
                ],
                "super": [
                    384,
                    649,
                    397,
                    595,
                    475,
                    504,
                    379,
                    734
                ],
                "Appender": [
                    643,
                    421,
                    371,
                    412,
                    381
                ],
                "_index_shared_docs": [
                    643,
                    371,
                    412,
                    381
                ],
                "com.any_not_none": [
                    383
                ],
                "limit": [
                    385,
                    383
                ],
                "is_list_like": [
                    383
                ],
                "target": [
                    385,
                    394,
                    397,
                    383
                ],
                "get_indexer": [
                    384,
                    397
                ],
                "target_array": [
                    400,
                    394,
                    395,
                    399
                ],
                "np.asarray": [
                    394
                ],
                "is_integer_dtype": [
                    395
                ],
                "target_array.ndim": [
                    395
                ],
                "locs": [
                    399,
                    400,
                    401,
                    402,
                    406,
                    407
                ],
                "valid": [
                    400,
                    401,
                    402,
                    406
                ],
                "ensure_platform_int": [
                    407
                ],
                "kwargs.get": [
                    415
                ],
                "self._simple_new": [
                    416,
                    517,
                    746,
                    716,
                    750,
                    527,
                    534,
                    539,
                    507
                ],
                "kwargs.setdefault": [
                    418
                ],
                "self._int64index._shallow_copy": [
                    419
                ],
                "self._int64index": [
                    641,
                    419,
                    647,
                    751,
                    783,
                    786,
                    823
                ],
                "self._validate_dtype": [
                    423
                ],
                "self.from_range": [
                    426
                ],
                "ibase._index_shared_docs": [
                    421
                ],
                "no_steps": [
                    549,
                    550,
                    554,
                    555,
                    429,
                    430,
                    435
                ],
                "np.nan": [
                    431
                ],
                "meth": [
                    432
                ],
                "nv.validate_minmax_axis": [
                    445,
                    439
                ],
                "nv": [
                    462,
                    439,
                    440,
                    445,
                    446
                ],
                "axis": [
                    445,
                    439
                ],
                "nv.validate_min": [
                    440
                ],
                "args": [
                    440,
                    462,
                    446
                ],
                "self._minmax": [
                    441,
                    447
                ],
                "nv.validate_max": [
                    446
                ],
                "nv.validate_argsort": [
                    462
                ],
                "other": [
                    641,
                    645,
                    647,
                    775,
                    649,
                    777,
                    780,
                    783,
                    784,
                    786,
                    788,
                    791,
                    541,
                    823,
                    594,
                    595,
                    597,
                    600,
                    601,
                    473,
                    474,
                    475,
                    604,
                    606,
                    607,
                    737,
                    610,
                    740,
                    741,
                    742,
                    743,
                    748,
                    751,
                    500,
                    501,
                    503,
                    504,
                    506,
                    510
                ],
                "other._range": [
                    474,
                    510
                ],
                "equals": [
                    475
                ],
                "self._validate_sort_keyword": [
                    498
                ],
                "sort": [
                    641,
                    647,
                    649,
                    498,
                    595,
                    597,
                    504,
                    543
                ],
                "self.equals": [
                    594,
                    500
                ],
                "self._get_reconciled_name_object": [
                    501
                ],
                "intersection": [
                    504
                ],
                "first": [
                    514,
                    515,
                    523,
                    526,
                    531,
                    532,
                    509
                ],
                "second": [
                    514,
                    515,
                    523,
                    526,
                    531,
                    532,
                    510
                ],
                "other.step": [
                    600,
                    601,
                    604,
                    541,
                    510
                ],
                "int_low": [
                    537,
                    514,
                    516
                ],
                "max": [
                    514,
                    613
                ],
                "first.start": [
                    514,
                    531,
                    526
                ],
                "second.start": [
                    514,
                    531,
                    526
                ],
                "int_high": [
                    515,
                    516,
                    533
                ],
                "min": [
                    515,
                    612
                ],
                "first.stop": [
                    515
                ],
                "second.stop": [
                    515
                ],
                "gcd": [
                    531,
                    523,
                    532,
                    526
                ],
                "s": [
                    531,
                    570,
                    523,
                    564
                ],
                "t": [
                    571,
                    523,
                    565
                ],
                "self._extended_gcd": [
                    523
                ],
                "first.step": [
                    531,
                    523,
                    532
                ],
                "second.step": [
                    523,
                    532
                ],
                "tmp_start": [
                    531,
                    533
                ],
                "new_step": [
                    532,
                    533
                ],
                "new_range": [
                    745,
                    746,
                    715,
                    716,
                    749,
                    750,
                    533,
                    534,
                    538,
                    539
                ],
                "new_index": [
                    544,
                    545,
                    534,
                    537,
                    538,
                    539,
                    541,
                    542
                ],
                "new_start": [
                    537,
                    538
                ],
                "new_index._min_fitting_element": [
                    537
                ],
                "new_index.stop": [
                    538
                ],
                "new_index.step": [
                    538,
                    541
                ],
                "new_index.sort_values": [
                    544
                ],
                "lower_limit": [
                    549
                ],
                "abs": [
                    549,
                    550,
                    554,
                    555,
                    623,
                    624,
                    607
                ],
                "upper_limit": [
                    554
                ],
                "old_s": [
                    570,
                    564,
                    572
                ],
                "old_t": [
                    571,
                    572,
                    565
                ],
                "r": [
                    568,
                    569,
                    566,
                    567
                ],
                "old_r": [
                    568,
                    569,
                    572,
                    566
                ],
                "b": [
                    566
                ],
                "a": [
                    566
                ],
                "quotient": [
                    568,
                    569,
                    570,
                    571
                ],
                "_union": [
                    595
                ],
                "start_s": [
                    612,
                    616,
                    617,
                    623,
                    629,
                    598,
                    630,
                    603,
                    636,
                    637
                ],
                "step_s": [
                    598,
                    603,
                    607,
                    609,
                    611,
                    614,
                    616,
                    617,
                    618,
                    620,
                    622,
                    623,
                    624,
                    626,
                    627,
                    629,
                    630,
                    631,
                    633,
                    634
                ],
                "end_s": [
                    613,
                    631,
                    618,
                    624,
                    599,
                    603,
                    638
                ],
                "start_o": [
                    612,
                    637,
                    616,
                    618,
                    623,
                    629,
                    630,
                    600,
                    636,
                    605
                ],
                "step_o": [
                    640,
                    609,
                    611,
                    637,
                    614,
                    627,
                    600,
                    634,
                    636,
                    605,
                    638,
                    607
                ],
                "other.start": [
                    600,
                    601,
                    607
                ],
                "end_o": [
                    613,
                    617,
                    624,
                    631,
                    601,
                    605,
                    638
                ],
                "start_r": [
                    640,
                    612,
                    620,
                    626,
                    633
                ],
                "end_r": [
                    640,
                    613,
                    620,
                    626,
                    633
                ],
                "self._int64index._union": [
                    641
                ],
                "how": [
                    649,
                    645,
                    647
                ],
                "self._int64index.join": [
                    647
                ],
                "level": [
                    649,
                    647
                ],
                "return_indexers": [
                    649,
                    647
                ],
                "join": [
                    649
                ],
                "next_": [
                    688,
                    681,
                    659,
                    693
                ],
                "non_empty_indexes": [
                    664,
                    690,
                    693,
                    662
                ],
                "obj": [
                    664,
                    665,
                    662
                ],
                "indexes": [
                    675,
                    684,
                    662
                ],
                "obj._range": [
                    665
                ],
                "np.concatenate": [
                    675,
                    684
                ],
                "x._values": [
                    675,
                    684
                ],
                "x": [
                    816,
                    675,
                    684
                ],
                "result.rename": [
                    676,
                    685
                ],
                "non_consecutive": [
                    680,
                    683
                ],
                "rename": [
                    698,
                    694
                ],
                "slice": [
                    714
                ],
                "IndexError": [
                    721,
                    722,
                    727
                ],
                "is_scalar": [
                    726
                ],
                "__getitem__": [
                    734
                ],
                "ABCSeries": [
                    737,
                    775
                ],
                "ABCDataFrame": [
                    737,
                    775
                ],
                "NotImplemented": [
                    776,
                    738,
                    779
                ],
                "any": [
                    757
                ],
                "ABCTimedeltaIndex": [
                    777
                ],
                "timedelta": [
                    780
                ],
                "np.timedelta64": [
                    780
                ],
                "op": [
                    808,
                    809,
                    783,
                    786,
                    823,
                    826
                ],
                "is_timedelta64_dtype": [
                    784
                ],
                "extract_array": [
                    788
                ],
                "left": [
                    805,
                    808,
                    809,
                    791,
                    797
                ],
                "right": [
                    808,
                    809,
                    797,
                    791
                ],
                "np.errstate": [
                    796,
                    807
                ],
                "rstep": [
                    801,
                    805,
                    811,
                    816,
                    797
                ],
                "left.step": [
                    805,
                    797
                ],
                "rstart": [
                    808,
                    816,
                    811
                ],
                "left.start": [
                    808
                ],
                "rstop": [
                    816,
                    809,
                    811
                ],
                "left.stop": [
                    809
                ],
                "all": [
                    816
                ],
                "result.astype": [
                    817
                ],
                "ZeroDivisionError": [
                    821
                ],
                "op.__name__": [
                    826
                ],
                "compat.set_function_name": [
                    827
                ],
                "compat": [
                    827
                ],
                "_evaluate_numeric_binop": [
                    827
                ],
                "cls.__add__": [
                    829
                ],
                "_make_evaluate_binop": [
                    832,
                    833,
                    834,
                    835,
                    836,
                    829,
                    830,
                    831
                ],
                "operator.add": [
                    829
                ],
                "operator": [
                    833,
                    835,
                    829,
                    831
                ],
                "cls.__radd__": [
                    830
                ],
                "ops.radd": [
                    830
                ],
                "ops": [
                    832,
                    834,
                    836,
                    830
                ],
                "cls.__sub__": [
                    831
                ],
                "operator.sub": [
                    831
                ],
                "cls.__rsub__": [
                    832
                ],
                "ops.rsub": [
                    832
                ],
                "cls.__mul__": [
                    833
                ],
                "operator.mul": [
                    833
                ],
                "cls.__rmul__": [
                    834
                ],
                "ops.rmul": [
                    834
                ],
                "cls.__truediv__": [
                    835
                ],
                "operator.truediv": [
                    835
                ],
                "cls.__rtruediv__": [
                    836
                ],
                "ops.rtruediv": [
                    836
                ],
                "RangeIndex._add_numeric_methods": [
                    839
                ]
            },
            "filtered_variables_in_file": {
                "Int64Index": [
                    675,
                    36,
                    198,
                    684,
                    179
                ],
                "_typ": [
                    74
                ],
                "_engine_type": [
                    75
                ],
                "libindex.Int64Engine": [
                    75
                ],
                "libindex": [
                    75
                ],
                "_range": [
                    76
                ],
                "_cached_data": [
                    79
                ],
                "fastpath": [
                    101,
                    94
                ],
                "warnings.warn": [
                    299,
                    275,
                    252,
                    95
                ],
                "warnings": [
                    299,
                    275,
                    252,
                    95
                ],
                "cls._simple_new": [
                    128,
                    110,
                    102,
                    146
                ],
                "cls": [
                    128,
                    832,
                    833,
                    834,
                    835,
                    836,
                    102,
                    104,
                    110,
                    142,
                    145,
                    146,
                    150,
                    827,
                    829,
                    830,
                    831
                ],
                "start": [
                    389,
                    392,
                    399,
                    659,
                    667,
                    669,
                    674,
                    678,
                    694,
                    102,
                    742,
                    744,
                    745,
                    107,
                    108,
                    109,
                    110,
                    748,
                    749,
                    113,
                    116,
                    119,
                    127
                ],
                "stop": [
                    389,
                    102,
                    392,
                    744,
                    745,
                    400,
                    113,
                    693,
                    118,
                    119,
                    694,
                    121,
                    127
                ],
                "step": [
                    389,
                    392,
                    400,
                    402,
                    659,
                    404,
                    795,
                    797,
                    670,
                    671,
                    672,
                    678,
                    680,
                    687,
                    688,
                    694,
                    102,
                    743,
                    744,
                    745,
                    113,
                    123,
                    124,
                    127
                ],
                "name": [
                    128,
                    161,
                    416,
                    676,
                    102,
                    424,
                    425,
                    426,
                    108,
                    685,
                    110,
                    146,
                    694,
                    698,
                    827,
                    826,
                    157,
                    415
                ],
                "cls._validate_dtype": [
                    104,
                    145
                ],
                "dtype": [
                    128,
                    423,
                    104,
                    173,
                    110,
                    145,
                    146,
                    157
                ],
                "RangeIndex": [
                    839,
                    107,
                    597,
                    694,
                    503,
                    473,
                    698
                ],
                "start.name": [
                    108
                ],
                "start._range": [
                    109
                ],
                "com.all_none": [
                    113
                ],
                "com": [
                    113,
                    383
                ],
                "ensure_python_int": [
                    121,
                    123,
                    116,
                    366
                ],
                "rng": [
                    128,
                    674,
                    678,
                    680,
                    681,
                    202,
                    203,
                    671,
                    688,
                    665,
                    311,
                    312,
                    313,
                    669,
                    670,
                    127
                ],
                "data": [
                    146,
                    139,
                    142
                ],
                "cls.__name__": [
                    142
                ],
                "result": [
                    161,
                    163,
                    675,
                    165,
                    166,
                    676,
                    811,
                    684,
                    685,
                    817,
                    819,
                    150,
                    159
                ],
                "object.__new__": [
                    150
                ],
                "values": [
                    419,
                    153,
                    155,
                    156,
                    157,
                    414,
                    159
                ],
                "Index": [
                    157
                ],
                "kwargs": [
                    418,
                    162,
                    419,
                    462,
                    440,
                    157,
                    446,
                    415
                ],
                "result._range": [
                    159
                ],
                "result.name": [
                    161
                ],
                "k": [
                    162,
                    163
                ],
                "v": [
                    162,
                    163
                ],
                "kwargs.items": [
                    162
                ],
                "result._reset_identity": [
                    165
                ],
                "is_int64_dtype": [
                    173
                ],
                "cache_readonly": [
                    259,
                    196,
                    355,
                    236,
                    176,
                    306,
                    282,
                    351
                ],
                "self._cached_data": [
                    194,
                    190,
                    191
                ],
                "self": [
                    517,
                    523,
                    527,
                    534,
                    539,
                    541,
                    549,
                    550,
                    554,
                    555,
                    594,
                    598,
                    599,
                    602,
                    606,
                    607,
                    608,
                    620,
                    626,
                    633,
                    640,
                    641,
                    645,
                    647,
                    190,
                    191,
                    192,
                    704,
                    194,
                    708,
                    198,
                    202,
                    715,
                    716,
                    206,
                    207,
                    208,
                    720,
                    724,
                    217,
                    218,
                    219,
                    227,
                    741,
                    742,
                    743,
                    744,
                    746,
                    747,
                    748,
                    750,
                    751,
                    242,
                    754,
                    757,
                    253,
                    257,
                    264,
                    783,
                    786,
                    276,
                    789,
                    791,
                    280,
                    288,
                    811,
                    300,
                    304,
                    311,
                    823,
                    340,
                    353,
                    357,
                    369,
                    376,
                    388,
                    389,
                    392,
                    404,
                    406,
                    410,
                    415,
                    416,
                    418,
                    419,
                    423,
                    425,
                    426,
                    429,
                    432,
                    433,
                    435,
                    441,
                    447,
                    464,
                    465,
                    467,
                    474,
                    498,
                    500,
                    501,
                    506,
                    507,
                    509
                ],
                "np.arange": [
                    465,
                    467,
                    191
                ],
                "np": [
                    192,
                    675,
                    807,
                    394,
                    363,
                    684,
                    780,
                    431,
                    465,
                    467,
                    344,
                    796,
                    191
                ],
                "self.start": [
                    192,
                    257,
                    389,
                    549,
                    550,
                    392,
                    741,
                    554,
                    555,
                    742,
                    748,
                    433,
                    435,
                    598,
                    599,
                    607
                ],
                "self.stop": [
                    192,
                    280,
                    392,
                    389
                ],
                "self.step": [
                    388,
                    389,
                    392,
                    404,
                    541,
                    549,
                    550,
                    554,
                    555,
                    304,
                    432,
                    435,
                    192,
                    598,
                    599,
                    602,
                    741,
                    743,
                    509
                ],
                "np.int64": [
                    192,
                    344
                ],
                "Int64Index._simple_new": [
                    198
                ],
                "self._data": [
                    198
                ],
                "self.name": [
                    418,
                    198,
                    425,
                    746,
                    716,
                    750,
                    218,
                    219,
                    415
                ],
                "self._range": [
                    264,
                    410,
                    288,
                    416,
                    426,
                    311,
                    704,
                    202,
                    715,
                    464,
                    720,
                    474,
                    353,
                    227,
                    357,
                    369,
                    242,
                    754,
                    757,
                    376,
                    509
                ],
                "rng.start": [
                    674,
                    678,
                    681,
                    203,
                    669
                ],
                "rng.stop": [
                    203
                ],
                "rng.step": [
                    680,
                    203,
                    671
                ],
                "d": [
                    208,
                    206,
                    207
                ],
                "self._get_attributes_dict": [
                    789,
                    206
                ],
                "d.update": [
                    207
                ],
                "self._get_data_as_items": [
                    217,
                    207
                ],
                "ibase._new_Index": [
                    208
                ],
                "ibase": [
                    208,
                    219,
                    421
                ],
                "self.__class__": [
                    640,
                    811,
                    620,
                    208,
                    626,
                    633
                ],
                "attrs": [
                    811,
                    789,
                    217,
                    219,
                    220
                ],
                "attrs.append": [
                    219
                ],
                "ibase.default_pprint": [
                    219
                ],
                "header": [
                    227
                ],
                "pprint_thing": [
                    227
                ],
                "_deprecation_message": [
                    230
                ],
                "self._range.start": [
                    242
                ],
                "self._deprecation_message.format": [
                    276,
                    253,
                    300
                ],
                "self._deprecation_message": [
                    276,
                    253,
                    300
                ],
                "self._range.stop": [
                    264
                ],
                "self._range.step": [
                    288,
                    353,
                    357,
                    464
                ],
                "getsizeof": [
                    312,
                    313
                ],
                "attr_name": [
                    313,
                    314
                ],
                "self.nbytes": [
                    340
                ],
                "np.dtype": [
                    344
                ],
                "Union": [
                    363
                ],
                "np.integer": [
                    363
                ],
                "key": [
                    714,
                    715,
                    364,
                    717,
                    366,
                    718,
                    369,
                    724,
                    373,
                    374,
                    726,
                    378,
                    379,
                    734
                ],
                "is_integer": [
                    801,
                    740,
                    717,
                    816,
                    373
                ],
                "method": [
                    385,
                    397,
                    373,
                    379,
                    383
                ],
                "tolerance": [
                    385,
                    397,
                    373,
                    379,
                    383
                ],
                "new_key": [
                    376,
                    718,
                    374,
                    720
                ],
                "self._range.index": [
                    376
                ],
                "get_loc": [
                    379
                ],
                "Appender": [
                    643,
                    421,
                    371,
                    412,
                    381
                ],
                "_index_shared_docs": [
                    643,
                    371,
                    412,
                    381
                ],
                "com.any_not_none": [
                    383
                ],
                "limit": [
                    385,
                    383
                ],
                "is_list_like": [
                    383
                ],
                "target": [
                    385,
                    394,
                    397,
                    383
                ],
                "get_indexer": [
                    384,
                    397
                ],
                "target_array": [
                    400,
                    394,
                    395,
                    399
                ],
                "np.asarray": [
                    394
                ],
                "is_integer_dtype": [
                    395
                ],
                "target_array.ndim": [
                    395
                ],
                "locs": [
                    399,
                    400,
                    401,
                    402,
                    406,
                    407
                ],
                "valid": [
                    400,
                    401,
                    402,
                    406
                ],
                "ensure_platform_int": [
                    407
                ],
                "kwargs.get": [
                    415
                ],
                "self._simple_new": [
                    416,
                    517,
                    746,
                    716,
                    750,
                    527,
                    534,
                    539,
                    507
                ],
                "kwargs.setdefault": [
                    418
                ],
                "self._int64index._shallow_copy": [
                    419
                ],
                "self._int64index": [
                    641,
                    419,
                    647,
                    751,
                    783,
                    786,
                    823
                ],
                "self._validate_dtype": [
                    423
                ],
                "self.from_range": [
                    426
                ],
                "ibase._index_shared_docs": [
                    421
                ],
                "no_steps": [
                    549,
                    550,
                    554,
                    555,
                    429,
                    430,
                    435
                ],
                "np.nan": [
                    431
                ],
                "meth": [
                    432
                ],
                "nv.validate_minmax_axis": [
                    445,
                    439
                ],
                "nv": [
                    462,
                    439,
                    440,
                    445,
                    446
                ],
                "axis": [
                    445,
                    439
                ],
                "nv.validate_min": [
                    440
                ],
                "args": [
                    440,
                    462,
                    446
                ],
                "self._minmax": [
                    441,
                    447
                ],
                "nv.validate_max": [
                    446
                ],
                "nv.validate_argsort": [
                    462
                ],
                "other": [
                    641,
                    645,
                    647,
                    775,
                    649,
                    777,
                    780,
                    783,
                    784,
                    786,
                    788,
                    791,
                    541,
                    823,
                    594,
                    595,
                    597,
                    600,
                    601,
                    473,
                    474,
                    475,
                    604,
                    606,
                    607,
                    737,
                    610,
                    740,
                    741,
                    742,
                    743,
                    748,
                    751,
                    500,
                    501,
                    503,
                    504,
                    506,
                    510
                ],
                "other._range": [
                    474,
                    510
                ],
                "equals": [
                    475
                ],
                "self._validate_sort_keyword": [
                    498
                ],
                "sort": [
                    641,
                    647,
                    649,
                    498,
                    595,
                    597,
                    504,
                    543
                ],
                "self.equals": [
                    594,
                    500
                ],
                "self._get_reconciled_name_object": [
                    501
                ],
                "intersection": [
                    504
                ],
                "first": [
                    514,
                    515,
                    523,
                    526,
                    531,
                    532,
                    509
                ],
                "second": [
                    514,
                    515,
                    523,
                    526,
                    531,
                    532,
                    510
                ],
                "other.step": [
                    600,
                    601,
                    604,
                    541,
                    510
                ],
                "int_low": [
                    537,
                    514,
                    516
                ],
                "first.start": [
                    514,
                    531,
                    526
                ],
                "second.start": [
                    514,
                    531,
                    526
                ],
                "int_high": [
                    515,
                    516,
                    533
                ],
                "first.stop": [
                    515
                ],
                "second.stop": [
                    515
                ],
                "gcd": [
                    531,
                    523,
                    532,
                    526
                ],
                "s": [
                    531,
                    570,
                    523,
                    564
                ],
                "t": [
                    571,
                    523,
                    565
                ],
                "self._extended_gcd": [
                    523
                ],
                "first.step": [
                    531,
                    523,
                    532
                ],
                "second.step": [
                    523,
                    532
                ],
                "tmp_start": [
                    531,
                    533
                ],
                "new_step": [
                    532,
                    533
                ],
                "new_range": [
                    745,
                    746,
                    715,
                    716,
                    749,
                    750,
                    533,
                    534,
                    538,
                    539
                ],
                "new_index": [
                    544,
                    545,
                    534,
                    537,
                    538,
                    539,
                    541,
                    542
                ],
                "new_start": [
                    537,
                    538
                ],
                "new_index._min_fitting_element": [
                    537
                ],
                "new_index.stop": [
                    538
                ],
                "new_index.step": [
                    538,
                    541
                ],
                "new_index.sort_values": [
                    544
                ],
                "lower_limit": [
                    549
                ],
                "upper_limit": [
                    554
                ],
                "old_s": [
                    570,
                    564,
                    572
                ],
                "old_t": [
                    571,
                    572,
                    565
                ],
                "r": [
                    568,
                    569,
                    566,
                    567
                ],
                "old_r": [
                    568,
                    569,
                    572,
                    566
                ],
                "b": [
                    566
                ],
                "a": [
                    566
                ],
                "quotient": [
                    568,
                    569,
                    570,
                    571
                ],
                "_union": [
                    595
                ],
                "start_s": [
                    612,
                    616,
                    617,
                    623,
                    629,
                    598,
                    630,
                    603,
                    636,
                    637
                ],
                "step_s": [
                    598,
                    603,
                    607,
                    609,
                    611,
                    614,
                    616,
                    617,
                    618,
                    620,
                    622,
                    623,
                    624,
                    626,
                    627,
                    629,
                    630,
                    631,
                    633,
                    634
                ],
                "end_s": [
                    613,
                    631,
                    618,
                    624,
                    599,
                    603,
                    638
                ],
                "start_o": [
                    612,
                    637,
                    616,
                    618,
                    623,
                    629,
                    630,
                    600,
                    636,
                    605
                ],
                "step_o": [
                    640,
                    609,
                    611,
                    637,
                    614,
                    627,
                    600,
                    634,
                    636,
                    605,
                    638,
                    607
                ],
                "other.start": [
                    600,
                    601,
                    607
                ],
                "end_o": [
                    613,
                    617,
                    624,
                    631,
                    601,
                    605,
                    638
                ],
                "start_r": [
                    640,
                    612,
                    620,
                    626,
                    633
                ],
                "end_r": [
                    640,
                    613,
                    620,
                    626,
                    633
                ],
                "self._int64index._union": [
                    641
                ],
                "how": [
                    649,
                    645,
                    647
                ],
                "self._int64index.join": [
                    647
                ],
                "level": [
                    649,
                    647
                ],
                "return_indexers": [
                    649,
                    647
                ],
                "join": [
                    649
                ],
                "next_": [
                    688,
                    681,
                    659,
                    693
                ],
                "non_empty_indexes": [
                    664,
                    690,
                    693,
                    662
                ],
                "obj": [
                    664,
                    665,
                    662
                ],
                "indexes": [
                    675,
                    684,
                    662
                ],
                "obj._range": [
                    665
                ],
                "np.concatenate": [
                    675,
                    684
                ],
                "x._values": [
                    675,
                    684
                ],
                "x": [
                    816,
                    675,
                    684
                ],
                "result.rename": [
                    676,
                    685
                ],
                "non_consecutive": [
                    680,
                    683
                ],
                "rename": [
                    698,
                    694
                ],
                "is_scalar": [
                    726
                ],
                "__getitem__": [
                    734
                ],
                "ABCSeries": [
                    737,
                    775
                ],
                "ABCDataFrame": [
                    737,
                    775
                ],
                "ABCTimedeltaIndex": [
                    777
                ],
                "timedelta": [
                    780
                ],
                "np.timedelta64": [
                    780
                ],
                "op": [
                    808,
                    809,
                    783,
                    786,
                    823,
                    826
                ],
                "is_timedelta64_dtype": [
                    784
                ],
                "extract_array": [
                    788
                ],
                "left": [
                    805,
                    808,
                    809,
                    791,
                    797
                ],
                "right": [
                    808,
                    809,
                    797,
                    791
                ],
                "np.errstate": [
                    796,
                    807
                ],
                "rstep": [
                    801,
                    805,
                    811,
                    816,
                    797
                ],
                "left.step": [
                    805,
                    797
                ],
                "rstart": [
                    808,
                    816,
                    811
                ],
                "left.start": [
                    808
                ],
                "rstop": [
                    816,
                    809,
                    811
                ],
                "left.stop": [
                    809
                ],
                "result.astype": [
                    817
                ],
                "op.__name__": [
                    826
                ],
                "compat.set_function_name": [
                    827
                ],
                "compat": [
                    827
                ],
                "_evaluate_numeric_binop": [
                    827
                ],
                "cls.__add__": [
                    829
                ],
                "_make_evaluate_binop": [
                    832,
                    833,
                    834,
                    835,
                    836,
                    829,
                    830,
                    831
                ],
                "operator.add": [
                    829
                ],
                "operator": [
                    833,
                    835,
                    829,
                    831
                ],
                "cls.__radd__": [
                    830
                ],
                "ops.radd": [
                    830
                ],
                "ops": [
                    832,
                    834,
                    836,
                    830
                ],
                "cls.__sub__": [
                    831
                ],
                "operator.sub": [
                    831
                ],
                "cls.__rsub__": [
                    832
                ],
                "ops.rsub": [
                    832
                ],
                "cls.__mul__": [
                    833
                ],
                "operator.mul": [
                    833
                ],
                "cls.__rmul__": [
                    834
                ],
                "ops.rmul": [
                    834
                ],
                "cls.__truediv__": [
                    835
                ],
                "operator.truediv": [
                    835
                ],
                "cls.__rtruediv__": [
                    836
                ],
                "ops.rtruediv": [
                    836
                ],
                "RangeIndex._add_numeric_methods": [
                    839
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_141/pandas/tests/indexes/test_range.py",
                "test_function": "test_get_indexer_decreasing",
                "test_function_code": "    @pytest.mark.parametrize(\"stop\", [0, -1, -2])\n    def test_get_indexer_decreasing(self, stop):\n        # GH 28678\n        index = RangeIndex(7, stop, -3)\n        result = index.get_indexer(range(9))\n        expected = np.array([-1, 2, -1, -1, 1, -1, -1, 0, -1], dtype=np.intp)\n        tm.assert_numpy_array_equal(result, expected)",
                "test_error": "AssertionError: numpy array are different  numpy array values are different (55.55556 %) [left]:  [-1, -1, -1, 2, -1, -1, 1, -1, -1] [right]: [-1, 2, -1, -1, 1, -1, -1, 0, -1]",
                "full_test_error": "self = <pandas.tests.indexes.test_range.TestRangeIndex object at 0x7f956cd28f40>\nstop = 0\n\n    @pytest.mark.parametrize(\"stop\", [0, -1, -2])\n    def test_get_indexer_decreasing(self, stop):\n        # GH 28678\n        index = RangeIndex(7, stop, -3)\n        result = index.get_indexer(range(9))\n        expected = np.array([-1, 2, -1, -1, 1, -1, -1, 0, -1], dtype=np.intp)\n>       tm.assert_numpy_array_equal(result, expected)\n\npandas/tests/indexes/test_range.py:433: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nleft = array([-1, -1, -1,  2, -1, -1,  1, -1, -1])\nright = array([-1,  2, -1, -1,  1, -1, -1,  0, -1]), err_msg = None\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n                raise_assert_detail(\n                    obj,\n                    \"{obj} shapes are different\".format(obj=obj),\n                    left.shape,\n                    right.shape,\n                )\n    \n            diff = 0\n            for l, r in zip(left, right):\n                # count up differences\n                if not array_equivalent(l, r, strict_nan=strict_nan):\n                    diff += 1\n    \n            diff = diff * 100.0 / left.size\n            msg = \"{obj} values are different ({pct} %)\".format(\n                obj=obj, pct=np.round(diff, 5)\n            )\n>           raise_assert_detail(obj, msg, left, right)\nE           AssertionError: numpy array are different\nE           \nE           numpy array values are different (55.55556 %)\nE           [left]:  [-1, -1, -1, 2, -1, -1, 1, -1, -1]\nE           [right]: [-1, 2, -1, -1, 1, -1, -1, 0, -1]\n\npandas/util/testing.py:1004: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('stop', [0, -1, -2])"
                ]
            },
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_141/pandas/tests/indexes/test_range.py",
                "test_function": "test_get_indexer_decreasing",
                "test_function_code": "    @pytest.mark.parametrize(\"stop\", [0, -1, -2])\n    def test_get_indexer_decreasing(self, stop):\n        # GH 28678\n        index = RangeIndex(7, stop, -3)\n        result = index.get_indexer(range(9))\n        expected = np.array([-1, 2, -1, -1, 1, -1, -1, 0, -1], dtype=np.intp)\n        tm.assert_numpy_array_equal(result, expected)",
                "test_error": "AssertionError: numpy array are different  numpy array values are different (55.55556 %) [left]:  [-1, -1, 2, -1, -1, 1, -1, -1, -1] [right]: [-1, 2, -1, -1, 1, -1, -1, 0, -1]",
                "full_test_error": "self = <pandas.tests.indexes.test_range.TestRangeIndex object at 0x7f956c859100>\nstop = -1\n\n    @pytest.mark.parametrize(\"stop\", [0, -1, -2])\n    def test_get_indexer_decreasing(self, stop):\n        # GH 28678\n        index = RangeIndex(7, stop, -3)\n        result = index.get_indexer(range(9))\n        expected = np.array([-1, 2, -1, -1, 1, -1, -1, 0, -1], dtype=np.intp)\n>       tm.assert_numpy_array_equal(result, expected)\n\npandas/tests/indexes/test_range.py:433: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nleft = array([-1, -1,  2, -1, -1,  1, -1, -1, -1])\nright = array([-1,  2, -1, -1,  1, -1, -1,  0, -1]), err_msg = None\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n                raise_assert_detail(\n                    obj,\n                    \"{obj} shapes are different\".format(obj=obj),\n                    left.shape,\n                    right.shape,\n                )\n    \n            diff = 0\n            for l, r in zip(left, right):\n                # count up differences\n                if not array_equivalent(l, r, strict_nan=strict_nan):\n                    diff += 1\n    \n            diff = diff * 100.0 / left.size\n            msg = \"{obj} values are different ({pct} %)\".format(\n                obj=obj, pct=np.round(diff, 5)\n            )\n>           raise_assert_detail(obj, msg, left, right)\nE           AssertionError: numpy array are different\nE           \nE           numpy array values are different (55.55556 %)\nE           [left]:  [-1, -1, 2, -1, -1, 1, -1, -1, -1]\nE           [right]: [-1, 2, -1, -1, 1, -1, -1, 0, -1]\n\npandas/util/testing.py:1004: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('stop', [0, -1, -2])"
                ]
            }
        ]
    }
}