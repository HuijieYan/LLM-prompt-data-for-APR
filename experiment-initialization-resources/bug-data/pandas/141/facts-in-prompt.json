{
    "1": "Assume that the following list of imports are available in the current environment, so you don't need to import them when generating a fix.\n```python\nimport numpy as np\nfrom pandas.util._decorators import Appender, cache_readonly\nfrom pandas.core.dtypes.common import ensure_platform_int, ensure_python_int, is_int64_dtype, is_integer, is_integer_dtype, is_list_like, is_scalar, is_timedelta64_dtype\nimport pandas.core.common as com\nfrom pandas.core.indexes.base import Index, _index_shared_docs\n```\n\n# The source code of the buggy function\n```python\n# The relative path of the buggy file: pandas/core/indexes/range.py\n\n\n\n    # this is the buggy function you need to fix\n    @Appender(_index_shared_docs[\"get_indexer\"])\n    def get_indexer(self, target, method=None, limit=None, tolerance=None):\n        if com.any_not_none(method, tolerance, limit) or not is_list_like(target):\n            return super().get_indexer(\n                target, method=method, tolerance=tolerance, limit=limit\n            )\n    \n        if self.step > 0:\n            start, stop, step = self.start, self.stop, self.step\n        else:\n            # Work on reversed range for simplicity:\n            start, stop, step = (self.stop - self.step, self.start + 1, -self.step)\n    \n        target_array = np.asarray(target)\n        if not (is_integer_dtype(target_array) and target_array.ndim == 1):\n            # checks/conversions/roundings are delegated to general method\n            return super().get_indexer(target, method=method, tolerance=tolerance)\n    \n        locs = target_array - start\n        valid = (locs % step == 0) & (locs >= 0) & (target_array < stop)\n        locs[~valid] = -1\n        locs[valid] = locs[valid] / step\n    \n        if step != self.step:\n            # We reversed this range: transform to original locs\n            locs[valid] = len(self) - 1 - locs[valid]\n        return ensure_platform_int(locs)\n    \n```",
    "2": "# The declaration of the class containing the buggy function\nclass RangeIndex(Int64Index):\n    \"\"\"\n    Immutable Index implementing a monotonic integer range.\n    \n    RangeIndex is a memory-saving special case of Int64Index limited to\n    representing monotonic ranges. Using RangeIndex may in some instances\n    improve computing speed.\n    \n    This is the default index type used\n    by DataFrame and Series when no explicit index is provided by the user.\n    \n    Parameters\n    ----------\n    start : int (default: 0), or other RangeIndex instance\n        If int and \"stop\" is not given, interpreted as \"stop\" instead.\n    stop : int (default: 0)\n    step : int (default: 1)\n    name : object, optional\n        Name to be stored in the index\n    copy : bool, default False\n        Unused, accepted for homogeneity with other index types.\n    \n    Attributes\n    ----------\n    start\n    stop\n    step\n    \n    Methods\n    -------\n    from_range\n    \n    See Also\n    --------\n    Index : The base pandas Index type.\n    Int64Index : Index of int64 data.\n    \"\"\"\n\n\n",
    "3": "# This function from the same file, but not the same class, is called by the buggy function\ndef start(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef stop(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef step(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef get_indexer(self, target, method=None, limit=None, tolerance=None):\n    # Please ignore the body of this function\n\n    # This function from the same class is called by the buggy function\n    def start(self):\n        # Please ignore the body of this function\n\n    # This function from the same class is called by the buggy function\n    def stop(self):\n        # Please ignore the body of this function\n\n    # This function from the same class is called by the buggy function\n    def step(self):\n        # Please ignore the body of this function\n\n    # This function from the same class is called by the buggy function\n    def get_indexer(self, target, method=None, limit=None, tolerance=None):\n        # Please ignore the body of this function\n\n",
    "4": "# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/indexes/test_range.py\n\n    @pytest.mark.parametrize(\"stop\", [0, -1, -2])\n    def test_get_indexer_decreasing(self, stop):\n        # GH 28678\n        index = RangeIndex(7, stop, -3)\n        result = index.get_indexer(range(9))\n        expected = np.array([-1, 2, -1, -1, 1, -1, -1, 0, -1], dtype=np.intp)\n        tm.assert_numpy_array_equal(result, expected)\n```\n\n\n# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/indexes/test_range.py\n\n    @pytest.mark.parametrize(\"stop\", [0, -1, -2])\n    def test_get_indexer_decreasing(self, stop):\n        # GH 28678\n        index = RangeIndex(7, stop, -3)\n        result = index.get_indexer(range(9))\n        expected = np.array([-1, 2, -1, -1, 1, -1, -1, 0, -1], dtype=np.intp)\n        tm.assert_numpy_array_equal(result, expected)\n```\n\n\n",
    "5": "## The error message from the failing test\n```text\nself = <pandas.tests.indexes.test_range.TestRangeIndex object at 0x7fbea0f27fa0>\nstop = 0\n\n    @pytest.mark.parametrize(\"stop\", [0, -1, -2])\n    def test_get_indexer_decreasing(self, stop):\n        # GH 28678\n        index = RangeIndex(7, stop, -3)\n        result = index.get_indexer(range(9))\n        expected = np.array([-1, 2, -1, -1, 1, -1, -1, 0, -1], dtype=np.intp)\n>       tm.assert_numpy_array_equal(result, expected)\n\npandas/tests/indexes/test_range.py:433: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nleft = array([-1, -1, -1,  2, -1, -1,  1, -1, -1])\nright = array([-1,  2, -1, -1,  1, -1, -1,  0, -1]), err_msg = None\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n                raise_assert_detail(\n                    obj,\n                    \"{obj} shapes are different\".format(obj=obj),\n                    left.shape,\n                    right.shape,\n                )\n    \n            diff = 0\n            for l, r in zip(left, right):\n                # count up differences\n                if not array_equivalent(l, r, strict_nan=strict_nan):\n                    diff += 1\n    \n            diff = diff * 100.0 / left.size\n            msg = \"{obj} values are different ({pct} %)\".format(\n                obj=obj, pct=np.round(diff, 5)\n            )\n>           raise_assert_detail(obj, msg, left, right)\nE           AssertionError: numpy array are different\nE           \nE           numpy array values are different (55.55556 %)\nE           [left]:  [-1, -1, -1, 2, -1, -1, 1, -1, -1]\nE           [right]: [-1, 2, -1, -1, 1, -1, -1, 0, -1]\n\npandas/util/testing.py:1004: AssertionError\n\n```\n## The error message from the failing test\n```text\nself = <pandas.tests.indexes.test_range.TestRangeIndex object at 0x7fbea0a55460>\nstop = -1\n\n    @pytest.mark.parametrize(\"stop\", [0, -1, -2])\n    def test_get_indexer_decreasing(self, stop):\n        # GH 28678\n        index = RangeIndex(7, stop, -3)\n        result = index.get_indexer(range(9))\n        expected = np.array([-1, 2, -1, -1, 1, -1, -1, 0, -1], dtype=np.intp)\n>       tm.assert_numpy_array_equal(result, expected)\n\npandas/tests/indexes/test_range.py:433: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nleft = array([-1, -1,  2, -1, -1,  1, -1, -1, -1])\nright = array([-1,  2, -1, -1,  1, -1, -1,  0, -1]), err_msg = None\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n                raise_assert_detail(\n                    obj,\n                    \"{obj} shapes are different\".format(obj=obj),\n                    left.shape,\n                    right.shape,\n                )\n    \n            diff = 0\n            for l, r in zip(left, right):\n                # count up differences\n                if not array_equivalent(l, r, strict_nan=strict_nan):\n                    diff += 1\n    \n            diff = diff * 100.0 / left.size\n            msg = \"{obj} values are different ({pct} %)\".format(\n                obj=obj, pct=np.round(diff, 5)\n            )\n>           raise_assert_detail(obj, msg, left, right)\nE           AssertionError: numpy array are different\nE           \nE           numpy array values are different (55.55556 %)\nE           [left]:  [-1, -1, 2, -1, -1, 1, -1, -1, -1]\nE           [right]: [-1, 2, -1, -1, 1, -1, -1, 0, -1]\n\npandas/util/testing.py:1004: AssertionError\n\n```\n",
    "6": "# Runtime values and types of variables inside the buggy function\nEach case below includes input parameter values and types, and the values and types of relevant variables at the function's return, derived from executing failing tests. If an input parameter is not reflected in the output, it is assumed to remain unchanged. Note that some of these values at the function's return might be incorrect. Analyze these cases to identify why the tests are failing to effectively fix the bug.\n\n## Case 1\n### Runtime values and types of the input parameters of the buggy function\ntarget, value: `range(0, 9)`, type: `range`\n\nself.step, value: `-3`, type: `int`\n\nself, value: `RangeIndex(start=7, stop=0, step=-3)`, type: `RangeIndex`\n\nself.start, value: `7`, type: `int`\n\nself.stop, value: `0`, type: `int`\n\nself._range, value: `range(7, 0, -3)`, type: `range`\n\n### Runtime values and types of variables right before the buggy function's return\nstart, value: `1`, type: `int`\n\nstop, value: `10`, type: `int`\n\nstep, value: `3`, type: `int`\n\nreverse, value: `range(1, 10, 3)`, type: `range`\n\nreverse.start, value: `1`, type: `int`\n\nreverse.stop, value: `10`, type: `int`\n\nreverse.step, value: `3`, type: `int`\n\ntarget_array, value: `array([0, 1, 2, 3, 4, 5, 6, 7, 8])`, type: `ndarray`\n\ntarget_array.ndim, value: `1`, type: `int`\n\nlocs, value: `array([-1,  2, -1, -1,  1, -1, -1,  0, -1])`, type: `ndarray`\n\nvalid, value: `array([False,  True, False, False,  True, False, False,  True, False])`, type: `ndarray`\n\n## Case 2\n### Runtime values and types of the input parameters of the buggy function\ntarget, value: `range(0, 9)`, type: `range`\n\nself.step, value: `-3`, type: `int`\n\nself, value: `RangeIndex(start=7, stop=-1, step=-3)`, type: `RangeIndex`\n\nself.start, value: `7`, type: `int`\n\nself.stop, value: `-1`, type: `int`\n\nself._range, value: `range(7, -1, -3)`, type: `range`\n\n### Runtime values and types of variables right before the buggy function's return\nstart, value: `1`, type: `int`\n\nstop, value: `10`, type: `int`\n\nstep, value: `3`, type: `int`\n\nreverse, value: `range(1, 10, 3)`, type: `range`\n\nreverse.start, value: `1`, type: `int`\n\nreverse.stop, value: `10`, type: `int`\n\nreverse.step, value: `3`, type: `int`\n\ntarget_array, value: `array([0, 1, 2, 3, 4, 5, 6, 7, 8])`, type: `ndarray`\n\ntarget_array.ndim, value: `1`, type: `int`\n\nlocs, value: `array([-1,  2, -1, -1,  1, -1, -1,  0, -1])`, type: `ndarray`\n\nvalid, value: `array([False,  True, False, False,  True, False, False,  True, False])`, type: `ndarray`\n\n## Case 3\n### Runtime values and types of the input parameters of the buggy function\ntarget, value: `range(0, 9)`, type: `range`\n\nself.step, value: `-3`, type: `int`\n\nself, value: `RangeIndex(start=7, stop=-2, step=-3)`, type: `RangeIndex`\n\nself.start, value: `7`, type: `int`\n\nself.stop, value: `-2`, type: `int`\n\nself._range, value: `range(7, -2, -3)`, type: `range`\n\n### Runtime values and types of variables right before the buggy function's return\nstart, value: `1`, type: `int`\n\nstop, value: `10`, type: `int`\n\nstep, value: `3`, type: `int`\n\nreverse, value: `range(1, 10, 3)`, type: `range`\n\nreverse.start, value: `1`, type: `int`\n\nreverse.stop, value: `10`, type: `int`\n\nreverse.step, value: `3`, type: `int`\n\ntarget_array, value: `array([0, 1, 2, 3, 4, 5, 6, 7, 8])`, type: `ndarray`\n\ntarget_array.ndim, value: `1`, type: `int`\n\nlocs, value: `array([-1,  2, -1, -1,  1, -1, -1,  0, -1])`, type: `ndarray`\n\nvalid, value: `array([False,  True, False, False,  True, False, False,  True, False])`, type: `ndarray`\n\n",
    "7": "# Expected values and types of variables during the failing test execution\nEach case below includes input parameter values and types, and the expected values and types of relevant variables at the function's return. If an input parameter is not reflected in the output, it is assumed to remain unchanged. A corrected function must satisfy all these cases.\n\n## Expected case 1\n### Input parameter values and types\n### The values and types of buggy function's parameters\ntarget, value: `range(0, 9)`, type: `range`\n\nself.step, value: `-3`, type: `int`\n\nself, value: `RangeIndex(start=7, stop=0, step=-3)`, type: `RangeIndex`\n\nself.start, value: `7`, type: `int`\n\nself.stop, value: `0`, type: `int`\n\n### Expected values and types of variables right before the buggy function's return\nstart, expected value: `3`, type: `int`\n\nstop, expected value: `8`, type: `int`\n\nstep, expected value: `3`, type: `int`\n\ntarget_array, expected value: `array([0, 1, 2, 3, 4, 5, 6, 7, 8])`, type: `ndarray`\n\ntarget_array.ndim, expected value: `1`, type: `int`\n\nlocs, expected value: `array([-1, -1, -1,  2, -1, -1,  1, -1, -1])`, type: `ndarray`\n\nvalid, expected value: `array([False, False, False,  True, False, False,  True, False, False])`, type: `ndarray`\n\n## Expected case 2\n### Input parameter values and types\n### The values and types of buggy function's parameters\ntarget, value: `range(0, 9)`, type: `range`\n\nself.step, value: `-3`, type: `int`\n\nself, value: `RangeIndex(start=7, stop=-1, step=-3)`, type: `RangeIndex`\n\nself.start, value: `7`, type: `int`\n\nself.stop, value: `-1`, type: `int`\n\n### Expected values and types of variables right before the buggy function's return\nstart, expected value: `2`, type: `int`\n\nstop, expected value: `8`, type: `int`\n\nstep, expected value: `3`, type: `int`\n\ntarget_array, expected value: `array([0, 1, 2, 3, 4, 5, 6, 7, 8])`, type: `ndarray`\n\ntarget_array.ndim, expected value: `1`, type: `int`\n\nlocs, expected value: `array([-1, -1,  2, -1, -1,  1, -1, -1, -1])`, type: `ndarray`\n\nvalid, expected value: `array([False, False,  True, False, False,  True, False, False, False])`, type: `ndarray`\n\n## Expected case 3\n### Input parameter values and types\n### The values and types of buggy function's parameters\ntarget, value: `range(0, 9)`, type: `range`\n\nself.step, value: `-3`, type: `int`\n\nself, value: `RangeIndex(start=7, stop=-2, step=-3)`, type: `RangeIndex`\n\nself.start, value: `7`, type: `int`\n\nself.stop, value: `-2`, type: `int`\n\n### Expected values and types of variables right before the buggy function's return\nstart, expected value: `1`, type: `int`\n\nstop, expected value: `8`, type: `int`\n\nstep, expected value: `3`, type: `int`\n\ntarget_array, expected value: `array([0, 1, 2, 3, 4, 5, 6, 7, 8])`, type: `ndarray`\n\ntarget_array.ndim, expected value: `1`, type: `int`\n\nlocs, expected value: `array([-1,  2, -1, -1,  1, -1, -1,  0, -1])`, type: `ndarray`\n\nvalid, expected value: `array([False,  True, False, False,  True, False, False,  True, False])`, type: `ndarray`\n\n",
    "8": "# A GitHub issue for this bug\n\nThe issue's title:\n```text\nBUG: RangeIndex.get_indexer is incorrect for some decreasing RangeIndex\n```\n\nThe issue's detailed description:\n```text\nFor some decreasing RangeIndex, the get_indexer method will indicate that all of it's own values are missing, and find matches for values not included in the index:\n\nIn [2]: ri = pd.RangeIndex(10, 0, -3)\n\nIn [3]: ri.get_indexer(ri)\nOut[3]: array([-1, -1, -1, -1])\n\nIn [4]: ri.get_indexer(ri - 1)\nOut[4]: array([ 1,  2,  3, -1])\nThis will in turn result in methods like Series.reindex not working properly:\n\nIn [5]: s = pd.Series(list('abcd'), index=ri) \n\nIn [6]: s\nOut[6]: \n10    a\n7     b\n4     c\n1     d\ndtype: object\n\nIn [7]: s.reindex([10, 9, 7])\nOut[7]: \n10    NaN\n9       b\n7     NaN\ndtype: object\nThe issue appears to occur specifically for decreasing RangeIndex that are not in their canonical form. By canonical form, I mean when stop is the next valid value in the range that's not included, e.g. when you think of a more standard range like range(1, 7, 1), 7 is the next valid value that's not present, but when the step is larger than 1 you lose uniqueness of representation with stop (i.e. range(1, 6, 2) == range(1, 7, 2)).\n\nNote that the code above works properly for the equivalent RangeIndex in it's canonical form:\n\nIn [8]: ri2 = pd.RangeIndex(start=10, stop=-2, step=-3)\n\nIn [9]: ri2.equals(ri)\nOut[9]: True\n\nIn [10]: ri2.get_indexer(ri2)\nOut[10]: array([0, 1, 2, 3])\n\nIn [11]: ri2.get_indexer(ri2 - 1)\nOut[11]: array([-1, -1, -1, -1])\n\nIn [12]: s2 = pd.Series(list('abcd'), index=ri2)\n\nIn [13]: s2\nOut[13]: \n10    a\n7     b\n4     c\n1     d\ndtype: object\n\nIn [14]: s2.reindex([10, 9, 7])\nOut[14]: \n10      a\n9     NaN\n7       b\ndtype: object\nThe cause of the issue appears to be that the code to determine start, stop, step when dealing with decreasing RangeIndex in get_indexer assumes self.stop is the canonical form:\n\npandas/pandas/core/indexes/range.py\n\nLines 386 to 390 in c4489cb\n\n if self.step > 0: \n     start, stop, step = self.start, self.stop, self.step \n else: \n     # Work on reversed range for simplicity: \n     start, stop, step = (self.stop - self.step, self.start + 1, -self.step) \nInstead of directly computing the reversed values ourselves, I think we should simply take the values from the reversed underlying range object:\n\ndiff --git a/pandas/core/indexes/range.py b/pandas/core/indexes/range.py\nindex 8783351cc..4c5904e5a 100644\n--- a/pandas/core/indexes/range.py\n+++ b/pandas/core/indexes/range.py\n@@ -387,7 +387,8 @@ class RangeIndex(Int64Index):\n             start, stop, step = self.start, self.stop, self.step\n         else:\n             # Work on reversed range for simplicity:\n-            start, stop, step = (self.stop - self.step, self.start + 1, -self.step)\n+            reverse = self._range[::-1]\n+            start, stop, step = reverse.start, reverse.stop, reverse.step\n \n         target_array = np.asarray(target)\n         if not (is_integer_dtype(target_array) and target_array.ndim == 1):\n```\n\n",
    "9": "Your output should follow these steps:\n1. Analyze the buggy function and its relationship with the buggy class, related functions, test code, corresponding error message, the actual input/output variable information, the expected input/output variable information, the github issue.\n2. Identify a potential error location within the buggy function.\n3. Elucidate the bug's cause using:\n   (a) The buggy function, \n   (b) The buggy class docs, \n   (c) The related functions, \n   (d) The failing test, \n   (e) The corresponding error message, \n   (f) The actual input/output variable values, \n   (g) The expected input/output variable values, \n   (h) The GitHub Issue information\n\n4. Suggest approaches for fixing the bug.\n5. Present the corrected code for the buggy function such that it satisfied the following:\n   (a) the program passes the failing test, \n   (b) the function satisfies the expected input/output variable information provided, \n   (c) successfully resolves the issue posted in GitHub\n\n",
    "1.3.3": "Assume that the following list of imports are available in the current environment, so you don't need to import them when generating a fix.\n```python\nimport numpy as np\nfrom pandas.util._decorators import Appender, cache_readonly\nfrom pandas.core.dtypes.common import ensure_platform_int, ensure_python_int, is_int64_dtype, is_integer, is_integer_dtype, is_list_like, is_scalar, is_timedelta64_dtype\nimport pandas.core.common as com\nfrom pandas.core.indexes.base import Index, _index_shared_docs\n```\n\n",
    "source_code_section": "# The source code of the buggy function\n```python\n# The relative path of the buggy file: pandas/core/indexes/range.py\n\n\n\n    # this is the buggy function you need to fix\n    @Appender(_index_shared_docs[\"get_indexer\"])\n    def get_indexer(self, target, method=None, limit=None, tolerance=None):\n        if com.any_not_none(method, tolerance, limit) or not is_list_like(target):\n            return super().get_indexer(\n                target, method=method, tolerance=tolerance, limit=limit\n            )\n    \n        if self.step > 0:\n            start, stop, step = self.start, self.stop, self.step\n        else:\n            # Work on reversed range for simplicity:\n            start, stop, step = (self.stop - self.step, self.start + 1, -self.step)\n    \n        target_array = np.asarray(target)\n        if not (is_integer_dtype(target_array) and target_array.ndim == 1):\n            # checks/conversions/roundings are delegated to general method\n            return super().get_indexer(target, method=method, tolerance=tolerance)\n    \n        locs = target_array - start\n        valid = (locs % step == 0) & (locs >= 0) & (target_array < stop)\n        locs[~valid] = -1\n        locs[valid] = locs[valid] / step\n    \n        if step != self.step:\n            # We reversed this range: transform to original locs\n            locs[valid] = len(self) - 1 - locs[valid]\n        return ensure_platform_int(locs)\n    \n```",
    "source_code_body": "# The relative path of the buggy file: pandas/core/indexes/range.py\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef start(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef stop(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef step(self):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef get_indexer(self, target, method=None, limit=None, tolerance=None):\n    # Please ignore the body of this function\n\n# The declaration of the class containing the buggy function\nclass RangeIndex(Int64Index):\n    \"\"\"\n    Immutable Index implementing a monotonic integer range.\n    \n    RangeIndex is a memory-saving special case of Int64Index limited to\n    representing monotonic ranges. Using RangeIndex may in some instances\n    improve computing speed.\n    \n    This is the default index type used\n    by DataFrame and Series when no explicit index is provided by the user.\n    \n    Parameters\n    ----------\n    start : int (default: 0), or other RangeIndex instance\n        If int and \"stop\" is not given, interpreted as \"stop\" instead.\n    stop : int (default: 0)\n    step : int (default: 1)\n    name : object, optional\n        Name to be stored in the index\n    copy : bool, default False\n        Unused, accepted for homogeneity with other index types.\n    \n    Attributes\n    ----------\n    start\n    stop\n    step\n    \n    Methods\n    -------\n    from_range\n    \n    See Also\n    --------\n    Index : The base pandas Index type.\n    Int64Index : Index of int64 data.\n    \"\"\"\n\n\n    # This function from the same class is called by the buggy function\n    def start(self):\n        # Please ignore the body of this function\n\n    # This function from the same class is called by the buggy function\n    def stop(self):\n        # Please ignore the body of this function\n\n    # This function from the same class is called by the buggy function\n    def step(self):\n        # Please ignore the body of this function\n\n    # This function from the same class is called by the buggy function\n    def get_indexer(self, target, method=None, limit=None, tolerance=None):\n        # Please ignore the body of this function\n\n\n\n    # this is the buggy function you need to fix\n    @Appender(_index_shared_docs[\"get_indexer\"])\n    def get_indexer(self, target, method=None, limit=None, tolerance=None):\n        if com.any_not_none(method, tolerance, limit) or not is_list_like(target):\n            return super().get_indexer(\n                target, method=method, tolerance=tolerance, limit=limit\n            )\n    \n        if self.step > 0:\n            start, stop, step = self.start, self.stop, self.step\n        else:\n            # Work on reversed range for simplicity:\n            start, stop, step = (self.stop - self.step, self.start + 1, -self.step)\n    \n        target_array = np.asarray(target)\n        if not (is_integer_dtype(target_array) and target_array.ndim == 1):\n            # checks/conversions/roundings are delegated to general method\n            return super().get_indexer(target, method=method, tolerance=tolerance)\n    \n        locs = target_array - start\n        valid = (locs % step == 0) & (locs >= 0) & (target_array < stop)\n        locs[~valid] = -1\n        locs[valid] = locs[valid] / step\n    \n        if step != self.step:\n            # We reversed this range: transform to original locs\n            locs[valid] = len(self) - 1 - locs[valid]\n        return ensure_platform_int(locs)\n    \n"
}