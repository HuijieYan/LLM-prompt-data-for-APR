{
    "pandas:141": {
        "github_issue_title": [
            "BUG: RangeIndex.get_indexer is incorrect for some decreasing RangeIndex\n"
        ],
        "github_issue_description": [
            "For some decreasing RangeIndex, the get_indexer method will indicate that all of it's own values are missing, and find matches for values not included in the index:\n\nIn [2]: ri = pd.RangeIndex(10, 0, -3)\n\nIn [3]: ri.get_indexer(ri)\nOut[3]: array([-1, -1, -1, -1])\n\nIn [4]: ri.get_indexer(ri - 1)\nOut[4]: array([ 1,  2,  3, -1])\nThis will in turn result in methods like Series.reindex not working properly:\n\nIn [5]: s = pd.Series(list('abcd'), index=ri) \n\nIn [6]: s\nOut[6]: \n10    a\n7     b\n4     c\n1     d\ndtype: object\n\nIn [7]: s.reindex([10, 9, 7])\nOut[7]: \n10    NaN\n9       b\n7     NaN\ndtype: object\nThe issue appears to occur specifically for decreasing RangeIndex that are not in their canonical form. By canonical form, I mean when stop is the next valid value in the range that's not included, e.g. when you think of a more standard range like range(1, 7, 1), 7 is the next valid value that's not present, but when the step is larger than 1 you lose uniqueness of representation with stop (i.e. range(1, 6, 2) == range(1, 7, 2)).\n\nNote that the code above works properly for the equivalent RangeIndex in it's canonical form:\n\nIn [8]: ri2 = pd.RangeIndex(start=10, stop=-2, step=-3)\n\nIn [9]: ri2.equals(ri)\nOut[9]: True\n\nIn [10]: ri2.get_indexer(ri2)\nOut[10]: array([0, 1, 2, 3])\n\nIn [11]: ri2.get_indexer(ri2 - 1)\nOut[11]: array([-1, -1, -1, -1])\n\nIn [12]: s2 = pd.Series(list('abcd'), index=ri2)\n\nIn [13]: s2\nOut[13]: \n10    a\n7     b\n4     c\n1     d\ndtype: object\n\nIn [14]: s2.reindex([10, 9, 7])\nOut[14]: \n10      a\n9     NaN\n7       b\ndtype: object\nThe cause of the issue appears to be that the code to determine start, stop, step when dealing with decreasing RangeIndex in get_indexer assumes self.stop is the canonical form:\n\npandas/pandas/core/indexes/range.py\n\nLines 386 to 390 in c4489cb\n\n if self.step > 0: \n     start, stop, step = self.start, self.stop, self.step \n else: \n     # Work on reversed range for simplicity: \n     start, stop, step = (self.stop - self.step, self.start + 1, -self.step) \nInstead of directly computing the reversed values ourselves, I think we should simply take the values from the reversed underlying range object:\n\ndiff --git a/pandas/core/indexes/range.py b/pandas/core/indexes/range.py\nindex 8783351cc..4c5904e5a 100644\n--- a/pandas/core/indexes/range.py\n+++ b/pandas/core/indexes/range.py\n@@ -387,7 +387,8 @@ class RangeIndex(Int64Index):\n             start, stop, step = self.start, self.stop, self.step\n         else:\n             # Work on reversed range for simplicity:\n-            start, stop, step = (self.stop - self.step, self.start + 1, -self.step)\n+            reverse = self._range[::-1]\n+            start, stop, step = reverse.start, reverse.stop, reverse.step\n \n         target_array = np.asarray(target)\n         if not (is_integer_dtype(target_array) and target_array.ndim == 1):\n"
        ]
    }
}