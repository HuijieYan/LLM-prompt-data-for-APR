{
    "pandas:161": {
        "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_161/pandas/core/arrays/categorical.py": {
            "buggy_functions": [
                {
                    "function_name": "fillna",
                    "function_code": "@deprecate_kwarg(old_arg_name=\"fill_value\", new_arg_name=\"value\")\ndef fillna(self, value=None, method=None, limit=None):\n    \"\"\"\n    Fill NA/NaN values using the specified method.\n\n    Parameters\n    ----------\n    value : scalar, dict, Series\n        If a scalar value is passed it is used to fill all missing values.\n        Alternatively, a Series or dict can be used to fill in different\n        values for each index. The value should not be a list. The\n        value(s) passed should either be in the categories or should be\n        NaN.\n    method : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n        Method to use for filling holes in reindexed Series\n        pad / ffill: propagate last valid observation forward to next valid\n        backfill / bfill: use NEXT valid observation to fill gap\n    limit : int, default None\n        (Not implemented yet for Categorical!)\n        If method is specified, this is the maximum number of consecutive\n        NaN values to forward/backward fill. In other words, if there is\n        a gap with more than this number of consecutive NaNs, it will only\n        be partially filled. If method is not specified, this is the\n        maximum number of entries along the entire axis where NaNs will be\n        filled.\n\n    Returns\n    -------\n    filled : Categorical with NA/NaN filled\n    \"\"\"\n    value, method = validate_fillna_kwargs(\n        value, method, validate_scalar_dict_value=False\n    )\n\n    if value is None:\n        value = np.nan\n    if limit is not None:\n        raise NotImplementedError(\n            \"specifying a limit for fillna has not been implemented yet\"\n        )\n\n    codes = self._codes\n\n    # pad / bfill\n    if method is not None:\n\n        values = self.to_dense().reshape(-1, len(self))\n        values = interpolate_2d(values, method, 0, None, value).astype(\n            self.categories.dtype\n        )[0]\n        codes = _get_codes_for_values(values, self.categories)\n\n    else:\n\n        # If value is a dict or a Series (a dict value has already\n        # been converted to a Series)\n        if isinstance(value, ABCSeries):\n            if not value[~value.isin(self.categories)].isna().all():\n                raise ValueError(\"fill value must be in categories\")\n\n            values_codes = _get_codes_for_values(value, self.categories)\n            indexer = np.where(values_codes != -1)\n            codes[indexer] = values_codes[values_codes != -1]\n\n        # If value is not a dict or Series it should be a scalar\n        elif is_hashable(value):\n            if not isna(value) and value not in self.categories:\n                raise ValueError(\"fill value must be in categories\")\n\n            mask = codes == -1\n            if mask.any():\n                codes = codes.copy()\n                if isna(value):\n                    codes[mask] = -1\n                else:\n                    codes[mask] = self.categories.get_loc(value)\n\n        else:\n            raise TypeError(\n                '\"value\" parameter must be a scalar, dict '\n                \"or Series, but you passed a \"\n                '\"{0}\"'.format(type(value).__name__)\n            )\n\n    return self._constructor(codes, dtype=self.dtype, fastpath=True)\n",
                    "decorators": [
                        "deprecate_kwarg(old_arg_name='fill_value', new_arg_name='value')"
                    ],
                    "docstring": "Fill NA/NaN values using the specified method.\n\nParameters\n----------\nvalue : scalar, dict, Series\n    If a scalar value is passed it is used to fill all missing values.\n    Alternatively, a Series or dict can be used to fill in different\n    values for each index. The value should not be a list. The\n    value(s) passed should either be in the categories or should be\n    NaN.\nmethod : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n    Method to use for filling holes in reindexed Series\n    pad / ffill: propagate last valid observation forward to next valid\n    backfill / bfill: use NEXT valid observation to fill gap\nlimit : int, default None\n    (Not implemented yet for Categorical!)\n    If method is specified, this is the maximum number of consecutive\n    NaN values to forward/backward fill. In other words, if there is\n    a gap with more than this number of consecutive NaNs, it will only\n    be partially filled. If method is not specified, this is the\n    maximum number of entries along the entire axis where NaNs will be\n    filled.\n\nReturns\n-------\nfilled : Categorical with NA/NaN filled",
                    "start_line": 1782,
                    "end_line": 1866,
                    "variables": {
                        "value": [
                            1857,
                            1829,
                            1863,
                            1838,
                            1839,
                            1842,
                            1848,
                            1812,
                            1813,
                            1847,
                            1816,
                            1817,
                            1854
                        ],
                        "method": [
                            1826,
                            1829,
                            1812,
                            1813
                        ],
                        "validate_fillna_kwargs": [
                            1812
                        ],
                        "np.nan": [
                            1817
                        ],
                        "np": [
                            1817,
                            1843
                        ],
                        "limit": [
                            1818
                        ],
                        "NotImplementedError": [
                            1819
                        ],
                        "codes": [
                            1857,
                            1832,
                            1866,
                            1844,
                            1855,
                            1851,
                            1853,
                            1823
                        ],
                        "self._codes": [
                            1823
                        ],
                        "self": [
                            1857,
                            1828,
                            1830,
                            1832,
                            1866,
                            1839,
                            1842,
                            1848,
                            1823
                        ],
                        "values": [
                            1832,
                            1828,
                            1829
                        ],
                        "reshape": [
                            1828
                        ],
                        "self.to_dense": [
                            1828
                        ],
                        "len": [
                            1828
                        ],
                        "astype": [
                            1829
                        ],
                        "interpolate_2d": [
                            1829
                        ],
                        "self.categories.dtype": [
                            1830
                        ],
                        "self.categories": [
                            1857,
                            1830,
                            1832,
                            1839,
                            1842,
                            1848
                        ],
                        "_get_codes_for_values": [
                            1832,
                            1842
                        ],
                        "isinstance": [
                            1838
                        ],
                        "ABCSeries": [
                            1838
                        ],
                        "all": [
                            1839
                        ],
                        "isna": [
                            1848,
                            1854,
                            1839
                        ],
                        "value.isin": [
                            1839
                        ],
                        "ValueError": [
                            1840,
                            1849
                        ],
                        "values_codes": [
                            1842,
                            1843,
                            1844
                        ],
                        "indexer": [
                            1843,
                            1844
                        ],
                        "np.where": [
                            1843
                        ],
                        "is_hashable": [
                            1847
                        ],
                        "mask": [
                            1857,
                            1851,
                            1852,
                            1855
                        ],
                        "mask.any": [
                            1852
                        ],
                        "codes.copy": [
                            1853
                        ],
                        "self.categories.get_loc": [
                            1857
                        ],
                        "TypeError": [
                            1860
                        ],
                        "format": [
                            1861
                        ],
                        "__name__": [
                            1863
                        ],
                        "type": [
                            1863
                        ],
                        "self._constructor": [
                            1866
                        ],
                        "self.dtype": [
                            1866
                        ],
                        "deprecate_kwarg": [
                            1782
                        ]
                    },
                    "filtered_variables": {
                        "value": [
                            1857,
                            1829,
                            1863,
                            1838,
                            1839,
                            1842,
                            1848,
                            1812,
                            1813,
                            1847,
                            1816,
                            1817,
                            1854
                        ],
                        "method": [
                            1826,
                            1829,
                            1812,
                            1813
                        ],
                        "validate_fillna_kwargs": [
                            1812
                        ],
                        "np.nan": [
                            1817
                        ],
                        "np": [
                            1817,
                            1843
                        ],
                        "limit": [
                            1818
                        ],
                        "codes": [
                            1857,
                            1832,
                            1866,
                            1844,
                            1855,
                            1851,
                            1853,
                            1823
                        ],
                        "self._codes": [
                            1823
                        ],
                        "self": [
                            1857,
                            1828,
                            1830,
                            1832,
                            1866,
                            1839,
                            1842,
                            1848,
                            1823
                        ],
                        "values": [
                            1832,
                            1828,
                            1829
                        ],
                        "reshape": [
                            1828
                        ],
                        "self.to_dense": [
                            1828
                        ],
                        "astype": [
                            1829
                        ],
                        "interpolate_2d": [
                            1829
                        ],
                        "self.categories.dtype": [
                            1830
                        ],
                        "self.categories": [
                            1857,
                            1830,
                            1832,
                            1839,
                            1842,
                            1848
                        ],
                        "_get_codes_for_values": [
                            1832,
                            1842
                        ],
                        "ABCSeries": [
                            1838
                        ],
                        "isna": [
                            1848,
                            1854,
                            1839
                        ],
                        "value.isin": [
                            1839
                        ],
                        "values_codes": [
                            1842,
                            1843,
                            1844
                        ],
                        "indexer": [
                            1843,
                            1844
                        ],
                        "np.where": [
                            1843
                        ],
                        "is_hashable": [
                            1847
                        ],
                        "mask": [
                            1857,
                            1851,
                            1852,
                            1855
                        ],
                        "mask.any": [
                            1852
                        ],
                        "codes.copy": [
                            1853
                        ],
                        "self.categories.get_loc": [
                            1857
                        ],
                        "self._constructor": [
                            1866
                        ],
                        "self.dtype": [
                            1866
                        ],
                        "deprecate_kwarg": [
                            1782
                        ]
                    },
                    "diff_line_number": 1843,
                    "class_data": {
                        "signature": "class Categorical(ExtensionArray, PandasObject)",
                        "docstring": "Represent a categorical variable in classic R / S-plus fashion.\n\n`Categoricals` can only take on only a limited, and usually fixed, number\nof possible values (`categories`). In contrast to statistical categorical\nvariables, a `Categorical` might have an order, but numerical operations\n(additions, divisions, ...) are not possible.\n\nAll values of the `Categorical` are either in `categories` or `np.nan`.\nAssigning values outside of `categories` will raise a `ValueError`. Order\nis defined by the order of the `categories`, not lexical order of the\nvalues.\n\nParameters\n----------\nvalues : list-like\n    The values of the categorical. If categories are given, values not in\n    categories will be replaced with NaN.\ncategories : Index-like (unique), optional\n    The unique categories for this categorical. If not given, the\n    categories are assumed to be the unique values of `values` (sorted, if\n    possible, otherwise in the order in which they appear).\nordered : bool, default False\n    Whether or not this categorical is treated as a ordered categorical.\n    If True, the resulting categorical will be ordered.\n    An ordered categorical respects, when sorted, the order of its\n    `categories` attribute (which in turn is the `categories` argument, if\n    provided).\ndtype : CategoricalDtype\n    An instance of ``CategoricalDtype`` to use for this categorical\n\n    .. versionadded:: 0.21.0\n\nAttributes\n----------\ncategories : Index\n    The categories of this categorical\ncodes : ndarray\n    The codes (integer positions, which point to the categories) of this\n    categorical, read only.\nordered : bool\n    Whether or not this Categorical is ordered.\ndtype : CategoricalDtype\n    The instance of ``CategoricalDtype`` storing the ``categories``\n    and ``ordered``.\n\n    .. versionadded:: 0.21.0\n\nMethods\n-------\nfrom_codes\n__array__\n\nRaises\n------\nValueError\n    If the categories do not validate.\nTypeError\n    If an explicit ``ordered=True`` is given but no `categories` and the\n    `values` are not sortable.\n\nSee Also\n--------\napi.types.CategoricalDtype : Type for categorical data.\nCategoricalIndex : An Index with an underlying ``Categorical``.\n\nNotes\n-----\nSee the `user guide\n<http://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html>`_\nfor more.\n\nExamples\n--------\n>>> pd.Categorical([1, 2, 3, 1, 2, 3])\n[1, 2, 3, 1, 2, 3]\nCategories (3, int64): [1, 2, 3]\n\n>>> pd.Categorical(['a', 'b', 'c', 'a', 'b', 'c'])\n[a, b, c, a, b, c]\nCategories (3, object): [a, b, c]\n\nOrdered `Categoricals` can be sorted according to the custom order\nof the categories and can have a min and max value.\n\n>>> c = pd.Categorical(['a', 'b', 'c', 'a', 'b', 'c'], ordered=True,\n...                    categories=['c', 'b', 'a'])\n>>> c\n[a, b, c, a, b, c]\nCategories (3, object): [c < b < a]\n>>> c.min()\n'c'",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, values, categories=None, ordered=None, dtype=None, fastpath=False):\n    dtype = CategoricalDtype._from_values_or_dtype(values, categories, ordered, dtype)\n    if fastpath:\n        self._codes = coerce_indexer_dtype(values, dtype.categories)\n        self._dtype = self._dtype.update_dtype(dtype)\n        return\n    null_mask = np.array(False)\n    if is_categorical_dtype(values):\n        if dtype.categories is None:\n            dtype = CategoricalDtype(values.categories, dtype._ordered)\n    elif not isinstance(values, (ABCIndexClass, ABCSeries)):\n        values = maybe_infer_to_datetimelike(values, convert_dates=True)\n        if not isinstance(values, np.ndarray):\n            values = _convert_to_list_like(values)\n            if len(values) == 0:\n                sanitize_dtype = 'object'\n            else:\n                sanitize_dtype = None\n            null_mask = isna(values)\n            if null_mask.any():\n                values = [values[idx] for idx in np.where(~null_mask)[0]]\n            values = sanitize_array(values, None, dtype=sanitize_dtype)\n    if dtype.categories is None:\n        try:\n            (codes, categories) = factorize(values, sort=True)\n        except TypeError:\n            (codes, categories) = factorize(values, sort=False)\n            if dtype._ordered:\n                raise TypeError(\"'values' is not ordered, please explicitly specify the categories order by passing in a categories argument.\")\n        except ValueError:\n            raise NotImplementedError('> 1 ndim Categorical are not supported at this time')\n        dtype = CategoricalDtype(categories, dtype._ordered)\n    elif is_categorical_dtype(values):\n        old_codes = values._values.codes if isinstance(values, ABCSeries) else values.codes\n        codes = _recode_for_categories(old_codes, values.dtype.categories, dtype.categories)\n    else:\n        codes = _get_codes_for_values(values, dtype.categories)\n    if null_mask.any():\n        full_codes = -np.ones(null_mask.shape, dtype=codes.dtype)\n        full_codes[~null_mask] = codes\n        codes = full_codes\n    self._dtype = self._dtype.update_dtype(dtype)\n    self._codes = coerce_indexer_dtype(codes, dtype.categories)",
                            "@property\ndef categories(self):\n    \"\"\"\n    The categories of this categorical.\n\n    Setting assigns new values to each category (effectively a rename of\n    each individual category).\n\n    The assigned value has to be a list-like object. All items must be\n    unique and the number of items in the new categories must be the same\n    as the number of items in the old categories.\n\n    Assigning to `categories` is a inplace operation!\n\n    Raises\n    ------\n    ValueError\n        If the new categories do not validate as categories or if the\n        number of new categories is unequal the number of old categories\n\n    See Also\n    --------\n    rename_categories\n    reorder_categories\n    add_categories\n    remove_categories\n    remove_unused_categories\n    set_categories\n    \"\"\"\n    return self.dtype.categories",
                            "@categories.setter\ndef categories(self, categories):\n    new_dtype = CategoricalDtype(categories, ordered=self.ordered)\n    if self.dtype.categories is not None and len(self.dtype.categories) != len(new_dtype.categories):\n        raise ValueError('new categories need to have the same number of items as the old categories!')\n    self._dtype = new_dtype",
                            "@property\ndef ordered(self) -> Ordered:\n    \"\"\"\n    Whether the categories have an ordered relationship.\n    \"\"\"\n    return self.dtype._ordered",
                            "@property\ndef dtype(self) -> CategoricalDtype:\n    \"\"\"\n    The :class:`~pandas.api.types.CategoricalDtype` for this instance\n    \"\"\"\n    return self._dtype",
                            "@property\ndef _ndarray_values(self) -> np.ndarray:\n    return self.codes",
                            "@property\ndef _constructor(self) -> Type['Categorical']:\n    return Categorical",
                            "@classmethod\ndef _from_sequence(cls, scalars, dtype=None, copy=False):\n    return Categorical(scalars, dtype=dtype)",
                            "def _formatter(self, boxed=False):\n    return None",
                            "def copy(self) -> 'Categorical':\n    \"\"\"\n    Copy constructor.\n    \"\"\"\n    return self._constructor(values=self._codes.copy(), dtype=self.dtype, fastpath=True)",
                            "def astype(self, dtype: Dtype, copy: bool=True) -> ArrayLike:\n    \"\"\"\n    Coerce this type to another dtype\n\n    Parameters\n    ----------\n    dtype : numpy dtype or pandas type\n    copy : bool, default True\n        By default, astype always returns a newly allocated object.\n        If copy is set to False and dtype is categorical, the original\n        object is returned.\n    \"\"\"\n    if is_categorical_dtype(dtype):\n        dtype = cast(Union[str, CategoricalDtype], dtype)\n        dtype = self.dtype.update_dtype(dtype)\n        self = self.copy() if copy else self\n        if dtype == self.dtype:\n            return self\n        return self._set_dtype(dtype)\n    return np.array(self, dtype=dtype, copy=copy)",
                            "@cache_readonly\ndef size(self) -> int:\n    \"\"\"\n    return the len of myself\n    \"\"\"\n    return self._codes.size",
                            "@cache_readonly\ndef itemsize(self) -> int:\n    \"\"\"\n    return the size of a single category\n    \"\"\"\n    return self.categories.itemsize",
                            "def tolist(self) -> list:\n    \"\"\"\n    Return a list of the values.\n\n    These are each a scalar type, which is a Python scalar\n    (for str, int, float) or a pandas scalar\n    (for Timestamp/Timedelta/Interval/Period)\n    \"\"\"\n    return list(self)",
                            "@property\ndef base(self) -> None:\n    \"\"\"\n    compat, we are always our own object\n    \"\"\"\n    return None",
                            "@classmethod\ndef _from_inferred_categories(cls, inferred_categories, inferred_codes, dtype, true_values=None):\n    \"\"\"\n    Construct a Categorical from inferred values.\n\n    For inferred categories (`dtype` is None) the categories are sorted.\n    For explicit `dtype`, the `inferred_categories` are cast to the\n    appropriate type.\n\n    Parameters\n    ----------\n    inferred_categories : Index\n    inferred_codes : Index\n    dtype : CategoricalDtype or 'category'\n    true_values : list, optional\n        If none are provided, the default ones are\n        \"True\", \"TRUE\", and \"true.\"\n\n    Returns\n    -------\n    Categorical\n    \"\"\"\n    from pandas import Index, to_numeric, to_datetime, to_timedelta\n    cats = Index(inferred_categories)\n    known_categories = isinstance(dtype, CategoricalDtype) and dtype.categories is not None\n    if known_categories:\n        if dtype.categories.is_numeric():\n            cats = to_numeric(inferred_categories, errors='coerce')\n        elif is_datetime64_dtype(dtype.categories):\n            cats = to_datetime(inferred_categories, errors='coerce')\n        elif is_timedelta64_dtype(dtype.categories):\n            cats = to_timedelta(inferred_categories, errors='coerce')\n        elif dtype.categories.is_boolean():\n            if true_values is None:\n                true_values = ['True', 'TRUE', 'true']\n            cats = cats.isin(true_values)\n    if known_categories:\n        categories = dtype.categories\n        codes = _recode_for_categories(inferred_codes, cats, categories)\n    elif not cats.is_monotonic_increasing:\n        unsorted = cats.copy()\n        categories = cats.sort_values()\n        codes = _recode_for_categories(inferred_codes, unsorted, categories)\n        dtype = CategoricalDtype(categories, ordered=False)\n    else:\n        dtype = CategoricalDtype(cats, ordered=False)\n        codes = inferred_codes\n    return cls(codes, dtype=dtype, fastpath=True)",
                            "@classmethod\ndef from_codes(cls, codes, categories=None, ordered=None, dtype=None):\n    \"\"\"\n    Make a Categorical type from codes and categories or dtype.\n\n    This constructor is useful if you already have codes and\n    categories/dtype and so do not need the (computation intensive)\n    factorization step, which is usually done on the constructor.\n\n    If your data does not follow this convention, please use the normal\n    constructor.\n\n    Parameters\n    ----------\n    codes : array-like, integers\n        An integer array, where each integer points to a category in\n        categories or dtype.categories, or else is -1 for NaN.\n    categories : index-like, optional\n        The categories for the categorical. Items need to be unique.\n        If the categories are not given here, then they must be provided\n        in `dtype`.\n    ordered : bool, optional\n        Whether or not this categorical is treated as an ordered\n        categorical. If not given here or in `dtype`, the resulting\n        categorical will be unordered.\n    dtype : CategoricalDtype or the string \"category\", optional\n        If :class:`CategoricalDtype`, cannot be used together with\n        `categories` or `ordered`.\n\n        .. versionadded:: 0.24.0\n\n           When `dtype` is provided, neither `categories` nor `ordered`\n           should be provided.\n\n    Returns\n    -------\n    Categorical\n\n    Examples\n    --------\n    >>> dtype = pd.CategoricalDtype(['a', 'b'], ordered=True)\n    >>> pd.Categorical.from_codes(codes=[0, 1, 0, 1], dtype=dtype)\n    [a, b, a, b]\n    Categories (2, object): [a < b]\n    \"\"\"\n    dtype = CategoricalDtype._from_values_or_dtype(categories=categories, ordered=ordered, dtype=dtype)\n    if dtype.categories is None:\n        msg = \"The categories must be provided in 'categories' or 'dtype'. Both were None.\"\n        raise ValueError(msg)\n    codes = np.asarray(codes)\n    if not is_integer_dtype(codes):\n        msg = 'codes need to be array-like integers'\n        if is_float_dtype(codes):\n            icodes = codes.astype('i8')\n            if (icodes == codes).all():\n                msg = None\n                codes = icodes\n                warn('float codes will be disallowed in the future and raise a ValueError', FutureWarning, stacklevel=2)\n        if msg:\n            raise ValueError(msg)\n    if len(codes) and (codes.max() >= len(dtype.categories) or codes.min() < -1):\n        raise ValueError('codes need to be between -1 and len(categories)-1')\n    return cls(codes, dtype=dtype, fastpath=True)",
                            "def _get_codes(self):\n    \"\"\"\n    Get the codes.\n\n    Returns\n    -------\n    codes : integer array view\n        A non writable view of the `codes` array.\n    \"\"\"\n    v = self._codes.view()\n    v.flags.writeable = False\n    return v",
                            "def _set_codes(self, codes):\n    \"\"\"\n    Not settable by the user directly\n    \"\"\"\n    raise ValueError('cannot set Categorical codes directly')",
                            "def _set_categories(self, categories, fastpath=False):\n    \"\"\"\n    Sets new categories inplace\n\n    Parameters\n    ----------\n    fastpath : bool, default False\n       Don't perform validation of the categories for uniqueness or nulls\n\n    Examples\n    --------\n    >>> c = pd.Categorical(['a', 'b'])\n    >>> c\n    [a, b]\n    Categories (2, object): [a, b]\n\n    >>> c._set_categories(pd.Index(['a', 'c']))\n    >>> c\n    [a, c]\n    Categories (2, object): [a, c]\n    \"\"\"\n    if fastpath:\n        new_dtype = CategoricalDtype._from_fastpath(categories, self.ordered)\n    else:\n        new_dtype = CategoricalDtype(categories, ordered=self.ordered)\n    if not fastpath and self.dtype.categories is not None and (len(new_dtype.categories) != len(self.dtype.categories)):\n        raise ValueError('new categories need to have the same number of items than the old categories!')\n    self._dtype = new_dtype",
                            "def _set_dtype(self, dtype: CategoricalDtype) -> 'Categorical':\n    \"\"\"\n    Internal method for directly updating the CategoricalDtype\n\n    Parameters\n    ----------\n    dtype : CategoricalDtype\n\n    Notes\n    -----\n    We don't do any validation here. It's assumed that the dtype is\n    a (valid) instance of `CategoricalDtype`.\n    \"\"\"\n    codes = _recode_for_categories(self.codes, self.categories, dtype.categories)\n    return type(self)(codes, dtype=dtype, fastpath=True)",
                            "def set_ordered(self, value, inplace=False):\n    \"\"\"\n    Set the ordered attribute to the boolean value.\n\n    Parameters\n    ----------\n    value : bool\n       Set whether this categorical is ordered (True) or not (False).\n    inplace : bool, default False\n       Whether or not to set the ordered attribute in-place or return\n       a copy of this categorical with ordered set to the value.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    new_dtype = CategoricalDtype(self.categories, ordered=value)\n    cat = self if inplace else self.copy()\n    cat._dtype = new_dtype\n    if not inplace:\n        return cat",
                            "def as_ordered(self, inplace=False):\n    \"\"\"\n    Set the Categorical to be ordered.\n\n    Parameters\n    ----------\n    inplace : bool, default False\n       Whether or not to set the ordered attribute in-place or return\n       a copy of this categorical with ordered set to True.\n\n    Returns\n    -------\n    Categorical\n        Ordered Categorical.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    return self.set_ordered(True, inplace=inplace)",
                            "def as_unordered(self, inplace=False):\n    \"\"\"\n    Set the Categorical to be unordered.\n\n    Parameters\n    ----------\n    inplace : bool, default False\n       Whether or not to set the ordered attribute in-place or return\n       a copy of this categorical with ordered set to False.\n\n    Returns\n    -------\n    Categorical\n        Unordered Categorical.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    return self.set_ordered(False, inplace=inplace)",
                            "def set_categories(self, new_categories, ordered=None, rename=False, inplace=False):\n    \"\"\"\n    Set the categories to the specified new_categories.\n\n    `new_categories` can include new categories (which will result in\n    unused categories) or remove old categories (which results in values\n    set to NaN). If `rename==True`, the categories will simple be renamed\n    (less or more items than in old categories will result in values set to\n    NaN or in unused categories respectively).\n\n    This method can be used to perform more than one action of adding,\n    removing, and reordering simultaneously and is therefore faster than\n    performing the individual steps via the more specialised methods.\n\n    On the other hand this methods does not do checks (e.g., whether the\n    old categories are included in the new categories on a reorder), which\n    can result in surprising changes, for example when using special string\n    dtypes on python3, which does not considers a S1 string equal to a\n    single char python string.\n\n    Parameters\n    ----------\n    new_categories : Index-like\n       The categories in new order.\n    ordered : bool, default False\n       Whether or not the categorical is treated as a ordered categorical.\n       If not given, do not change the ordered information.\n    rename : bool, default False\n       Whether or not the new_categories should be considered as a rename\n       of the old categories or as reordered categories.\n    inplace : bool, default False\n       Whether or not to reorder the categories in-place or return a copy\n       of this categorical with reordered categories.\n\n    Returns\n    -------\n    Categorical with reordered categories or None if inplace.\n\n    Raises\n    ------\n    ValueError\n        If new_categories does not validate as categories\n\n    See Also\n    --------\n    rename_categories\n    reorder_categories\n    add_categories\n    remove_categories\n    remove_unused_categories\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if ordered is None:\n        ordered = self.dtype._ordered\n    new_dtype = CategoricalDtype(new_categories, ordered=ordered)\n    cat = self if inplace else self.copy()\n    if rename:\n        if cat.dtype.categories is not None and len(new_dtype.categories) < len(cat.dtype.categories):\n            cat._codes[cat._codes >= len(new_dtype.categories)] = -1\n    else:\n        codes = _recode_for_categories(cat.codes, cat.categories, new_dtype.categories)\n        cat._codes = codes\n    cat._dtype = new_dtype\n    if not inplace:\n        return cat",
                            "def rename_categories(self, new_categories, inplace=False):\n    \"\"\"\n    Rename categories.\n\n    Parameters\n    ----------\n    new_categories : list-like, dict-like or callable\n\n       * list-like: all items must be unique and the number of items in\n         the new categories must match the existing number of categories.\n\n       * dict-like: specifies a mapping from\n         old categories to new. Categories not contained in the mapping\n         are passed through and extra categories in the mapping are\n         ignored.\n\n         .. versionadded:: 0.21.0\n\n       * callable : a callable that is called on all items in the old\n         categories and whose return values comprise the new categories.\n\n         .. versionadded:: 0.23.0\n\n    inplace : bool, default False\n       Whether or not to rename the categories inplace or return a copy of\n       this categorical with renamed categories.\n\n    Returns\n    -------\n    cat : Categorical or None\n       With ``inplace=False``, the new categorical is returned.\n       With ``inplace=True``, there is no return value.\n\n    Raises\n    ------\n    ValueError\n        If new categories are list-like and do not have the same number of\n        items than the current categories or do not validate as categories\n\n    See Also\n    --------\n    reorder_categories\n    add_categories\n    remove_categories\n    remove_unused_categories\n    set_categories\n\n    Examples\n    --------\n    >>> c = pd.Categorical(['a', 'a', 'b'])\n    >>> c.rename_categories([0, 1])\n    [0, 0, 1]\n    Categories (2, int64): [0, 1]\n\n    For dict-like ``new_categories``, extra keys are ignored and\n    categories not in the dictionary are passed through\n\n    >>> c.rename_categories({'a': 'A', 'c': 'C'})\n    [A, A, b]\n    Categories (2, object): [A, b]\n\n    You may also provide a callable to create the new categories\n\n    >>> c.rename_categories(lambda x: x.upper())\n    [A, A, B]\n    Categories (2, object): [A, B]\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    cat = self if inplace else self.copy()\n    if is_dict_like(new_categories):\n        cat.categories = [new_categories.get(item, item) for item in cat.categories]\n    elif callable(new_categories):\n        cat.categories = [new_categories(item) for item in cat.categories]\n    else:\n        cat.categories = new_categories\n    if not inplace:\n        return cat",
                            "def reorder_categories(self, new_categories, ordered=None, inplace=False):\n    \"\"\"\n    Reorder categories as specified in new_categories.\n\n    `new_categories` need to include all old categories and no new category\n    items.\n\n    Parameters\n    ----------\n    new_categories : Index-like\n       The categories in new order.\n    ordered : bool, optional\n       Whether or not the categorical is treated as a ordered categorical.\n       If not given, do not change the ordered information.\n    inplace : bool, default False\n       Whether or not to reorder the categories inplace or return a copy of\n       this categorical with reordered categories.\n\n    Returns\n    -------\n    cat : Categorical with reordered categories or None if inplace.\n\n    Raises\n    ------\n    ValueError\n        If the new categories do not contain all old category items or any\n        new ones\n\n    See Also\n    --------\n    rename_categories\n    add_categories\n    remove_categories\n    remove_unused_categories\n    set_categories\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if set(self.dtype.categories) != set(new_categories):\n        raise ValueError('items in new_categories are not the same as in old categories')\n    return self.set_categories(new_categories, ordered=ordered, inplace=inplace)",
                            "def add_categories(self, new_categories, inplace=False):\n    \"\"\"\n    Add new categories.\n\n    `new_categories` will be included at the last/highest place in the\n    categories and will be unused directly after this call.\n\n    Parameters\n    ----------\n    new_categories : category or list-like of category\n       The new categories to be included.\n    inplace : bool, default False\n       Whether or not to add the categories inplace or return a copy of\n       this categorical with added categories.\n\n    Returns\n    -------\n    cat : Categorical with new categories added or None if inplace.\n\n    Raises\n    ------\n    ValueError\n        If the new categories include old categories or do not validate as\n        categories\n\n    See Also\n    --------\n    rename_categories\n    reorder_categories\n    remove_categories\n    remove_unused_categories\n    set_categories\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if not is_list_like(new_categories):\n        new_categories = [new_categories]\n    already_included = set(new_categories) & set(self.dtype.categories)\n    if len(already_included) != 0:\n        msg = 'new categories must not include old categories: {already_included!s}'\n        raise ValueError(msg.format(already_included=already_included))\n    new_categories = list(self.dtype.categories) + list(new_categories)\n    new_dtype = CategoricalDtype(new_categories, self.ordered)\n    cat = self if inplace else self.copy()\n    cat._dtype = new_dtype\n    cat._codes = coerce_indexer_dtype(cat._codes, new_dtype.categories)\n    if not inplace:\n        return cat",
                            "def remove_categories(self, removals, inplace=False):\n    \"\"\"\n    Remove the specified categories.\n\n    `removals` must be included in the old categories. Values which were in\n    the removed categories will be set to NaN\n\n    Parameters\n    ----------\n    removals : category or list of categories\n       The categories which should be removed.\n    inplace : bool, default False\n       Whether or not to remove the categories inplace or return a copy of\n       this categorical with removed categories.\n\n    Returns\n    -------\n    cat : Categorical with removed categories or None if inplace.\n\n    Raises\n    ------\n    ValueError\n        If the removals are not contained in the categories\n\n    See Also\n    --------\n    rename_categories\n    reorder_categories\n    add_categories\n    remove_unused_categories\n    set_categories\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if not is_list_like(removals):\n        removals = [removals]\n    removal_set = set(list(removals))\n    not_included = removal_set - set(self.dtype.categories)\n    new_categories = [c for c in self.dtype.categories if c not in removal_set]\n    if any(isna(removals)):\n        not_included = [x for x in not_included if notna(x)]\n        new_categories = [x for x in new_categories if notna(x)]\n    if len(not_included) != 0:\n        msg = 'removals must all be in old categories: {not_included!s}'\n        raise ValueError(msg.format(not_included=not_included))\n    return self.set_categories(new_categories, ordered=self.ordered, rename=False, inplace=inplace)",
                            "def remove_unused_categories(self, inplace=False):\n    \"\"\"\n    Remove categories which are not used.\n\n    Parameters\n    ----------\n    inplace : bool, default False\n       Whether or not to drop unused categories inplace or return a copy of\n       this categorical with unused categories dropped.\n\n    Returns\n    -------\n    cat : Categorical with unused categories dropped or None if inplace.\n\n    See Also\n    --------\n    rename_categories\n    reorder_categories\n    add_categories\n    remove_categories\n    set_categories\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    cat = self if inplace else self.copy()\n    (idx, inv) = np.unique(cat._codes, return_inverse=True)\n    if idx.size != 0 and idx[0] == -1:\n        (idx, inv) = (idx[1:], inv - 1)\n    new_categories = cat.dtype.categories.take(idx)\n    new_dtype = CategoricalDtype._from_fastpath(new_categories, ordered=self.ordered)\n    cat._dtype = new_dtype\n    cat._codes = coerce_indexer_dtype(inv, new_dtype.categories)\n    if not inplace:\n        return cat",
                            "def map(self, mapper):\n    \"\"\"\n    Map categories using input correspondence (dict, Series, or function).\n\n    Maps the categories to new categories. If the mapping correspondence is\n    one-to-one the result is a :class:`~pandas.Categorical` which has the\n    same order property as the original, otherwise a :class:`~pandas.Index`\n    is returned. NaN values are unaffected.\n\n    If a `dict` or :class:`~pandas.Series` is used any unmapped category is\n    mapped to `NaN`. Note that if this happens an :class:`~pandas.Index`\n    will be returned.\n\n    Parameters\n    ----------\n    mapper : function, dict, or Series\n        Mapping correspondence.\n\n    Returns\n    -------\n    pandas.Categorical or pandas.Index\n        Mapped categorical.\n\n    See Also\n    --------\n    CategoricalIndex.map : Apply a mapping correspondence on a\n        :class:`~pandas.CategoricalIndex`.\n    Index.map : Apply a mapping correspondence on an\n        :class:`~pandas.Index`.\n    Series.map : Apply a mapping correspondence on a\n        :class:`~pandas.Series`.\n    Series.apply : Apply more complex functions on a\n        :class:`~pandas.Series`.\n\n    Examples\n    --------\n    >>> cat = pd.Categorical(['a', 'b', 'c'])\n    >>> cat\n    [a, b, c]\n    Categories (3, object): [a, b, c]\n    >>> cat.map(lambda x: x.upper())\n    [A, B, C]\n    Categories (3, object): [A, B, C]\n    >>> cat.map({'a': 'first', 'b': 'second', 'c': 'third'})\n    [first, second, third]\n    Categories (3, object): [first, second, third]\n\n    If the mapping is one-to-one the ordering of the categories is\n    preserved:\n\n    >>> cat = pd.Categorical(['a', 'b', 'c'], ordered=True)\n    >>> cat\n    [a, b, c]\n    Categories (3, object): [a < b < c]\n    >>> cat.map({'a': 3, 'b': 2, 'c': 1})\n    [3, 2, 1]\n    Categories (3, int64): [3 < 2 < 1]\n\n    If the mapping is not one-to-one an :class:`~pandas.Index` is returned:\n\n    >>> cat.map({'a': 'first', 'b': 'second', 'c': 'first'})\n    Index(['first', 'second', 'first'], dtype='object')\n\n    If a `dict` is used, all unmapped categories are mapped to `NaN` and\n    the result is an :class:`~pandas.Index`:\n\n    >>> cat.map({'a': 'first', 'b': 'second'})\n    Index(['first', 'second', nan], dtype='object')\n    \"\"\"\n    new_categories = self.categories.map(mapper)\n    try:\n        return self.from_codes(self._codes.copy(), categories=new_categories, ordered=self.ordered)\n    except ValueError:\n        if np.any(self._codes == -1):\n            new_categories = new_categories.insert(len(new_categories), np.nan)\n        return np.take(new_categories, self._codes)",
                            "@property\ndef shape(self):\n    \"\"\"\n    Shape of the Categorical.\n\n    For internal compatibility with numpy arrays.\n\n    Returns\n    -------\n    shape : tuple\n    \"\"\"\n    return tuple([len(self._codes)])",
                            "def shift(self, periods, fill_value=None):\n    \"\"\"\n    Shift Categorical by desired number of periods.\n\n    Parameters\n    ----------\n    periods : int\n        Number of periods to move, can be positive or negative\n    fill_value : object, optional\n        The scalar value to use for newly introduced missing values.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    shifted : Categorical\n    \"\"\"\n    codes = self.codes\n    if codes.ndim > 1:\n        raise NotImplementedError('Categorical with ndim > 1.')\n    if np.prod(codes.shape) and periods != 0:\n        codes = np.roll(codes, ensure_platform_int(periods), axis=0)\n        if isna(fill_value):\n            fill_value = -1\n        elif fill_value in self.categories:\n            fill_value = self.categories.get_loc(fill_value)\n        else:\n            raise ValueError(\"'fill_value={}' is not present in this Categorical's categories\".format(fill_value))\n        if periods > 0:\n            codes[:periods] = fill_value\n        else:\n            codes[periods:] = fill_value\n    return self.from_codes(codes, dtype=self.dtype)",
                            "def __array__(self, dtype=None):\n    \"\"\"\n    The numpy array interface.\n\n    Returns\n    -------\n    numpy.array\n        A numpy array of either the specified dtype or,\n        if dtype==None (default), the same dtype as\n        categorical.categories.dtype.\n    \"\"\"\n    ret = take_1d(self.categories.values, self._codes)\n    if dtype and (not is_dtype_equal(dtype, self.categories.dtype)):\n        return np.asarray(ret, dtype)\n    if is_extension_array_dtype(ret):\n        ret = np.asarray(ret)\n    return ret",
                            "def __array_ufunc__(self, ufunc, method, *inputs, **kwargs):\n    result = ops.maybe_dispatch_ufunc_to_dunder_op(self, ufunc, method, *inputs, **kwargs)\n    if result is not NotImplemented:\n        return result\n    raise TypeError('Object with dtype {dtype} cannot perform the numpy op {op}'.format(dtype=self.dtype, op=ufunc.__name__))",
                            "def __setstate__(self, state):\n    \"\"\"Necessary for making this object picklable\"\"\"\n    if not isinstance(state, dict):\n        raise Exception('invalid pickle state')\n    if '_categories' not in state and '_levels' in state:\n        state['_categories'] = self.dtype.validate_categories(state.pop('_levels'))\n    if '_codes' not in state and 'labels' in state:\n        state['_codes'] = coerce_indexer_dtype(state.pop('labels'), state['_categories'])\n    if '_ordered' not in state:\n        if 'ordered' in state:\n            state['_ordered'] = state.pop('ordered')\n        else:\n            state['_ordered'] = False\n    if '_dtype' not in state:\n        state['_dtype'] = CategoricalDtype(state['_categories'], state['_ordered'])\n    for (k, v) in state.items():\n        setattr(self, k, v)",
                            "@property\ndef T(self):\n    \"\"\"\n    Return transposed numpy array.\n    \"\"\"\n    return self",
                            "@property\ndef nbytes(self):\n    return self._codes.nbytes + self.dtype.categories.values.nbytes",
                            "def memory_usage(self, deep=False):\n    \"\"\"\n    Memory usage of my values\n\n    Parameters\n    ----------\n    deep : bool\n        Introspect the data deeply, interrogate\n        `object` dtypes for system-level memory consumption\n\n    Returns\n    -------\n    bytes used\n\n    Notes\n    -----\n    Memory usage does not include memory consumed by elements that\n    are not components of the array if deep=False\n\n    See Also\n    --------\n    numpy.ndarray.nbytes\n    \"\"\"\n    return self._codes.nbytes + self.dtype.categories.memory_usage(deep=deep)",
                            "@Substitution(klass='Categorical')\n@Appender(_shared_docs['searchsorted'])\ndef searchsorted(self, value, side='left', sorter=None):\n    if not self.ordered:\n        raise ValueError('Categorical not ordered\\nyou can use .as_ordered() to change the Categorical to an ordered one')\n    from pandas.core.series import Series\n    codes = _get_codes_for_values(Series(value).values, self.categories)\n    if -1 in codes:\n        raise KeyError('Value(s) to be inserted must be in categories.')\n    codes = codes[0] if is_scalar(value) else codes\n    return self.codes.searchsorted(codes, side=side, sorter=sorter)",
                            "def isna(self):\n    \"\"\"\n    Detect missing values\n\n    Missing values (-1 in .codes) are detected.\n\n    Returns\n    -------\n    a boolean array of whether my values are null\n\n    See Also\n    --------\n    isna : Top-level isna.\n    isnull : Alias of isna.\n    Categorical.notna : Boolean inverse of Categorical.isna.\n\n    \"\"\"\n    ret = self._codes == -1\n    return ret",
                            "def notna(self):\n    \"\"\"\n    Inverse of isna\n\n    Both missing values (-1 in .codes) and NA as a category are detected as\n    null.\n\n    Returns\n    -------\n    a boolean array of whether my values are not null\n\n    See Also\n    --------\n    notna : Top-level notna.\n    notnull : Alias of notna.\n    Categorical.isna : Boolean inverse of Categorical.notna.\n\n    \"\"\"\n    return ~self.isna()",
                            "def put(self, *args, **kwargs):\n    \"\"\"\n    Replace specific elements in the Categorical with given values.\n    \"\"\"\n    raise NotImplementedError(\"'put' is not yet implemented for Categorical\")",
                            "def dropna(self):\n    \"\"\"\n    Return the Categorical without null values.\n\n    Missing values (-1 in .codes) are detected.\n\n    Returns\n    -------\n    valid : Categorical\n    \"\"\"\n    result = self[self.notna()]\n    return result",
                            "def value_counts(self, dropna=True):\n    \"\"\"\n    Return a Series containing counts of each category.\n\n    Every category will have an entry, even those with a count of 0.\n\n    Parameters\n    ----------\n    dropna : bool, default True\n        Don't include counts of NaN.\n\n    Returns\n    -------\n    counts : Series\n\n    See Also\n    --------\n    Series.value_counts\n    \"\"\"\n    from pandas import Series, CategoricalIndex\n    (code, cat) = (self._codes, self.categories)\n    (ncat, mask) = (len(cat), 0 <= code)\n    (ix, clean) = (np.arange(ncat), mask.all())\n    if dropna or clean:\n        obs = code if clean else code[mask]\n        count = np.bincount(obs, minlength=ncat or 0)\n    else:\n        count = np.bincount(np.where(mask, code, ncat))\n        ix = np.append(ix, -1)\n    ix = self._constructor(ix, dtype=self.dtype, fastpath=True)\n    return Series(count, index=CategoricalIndex(ix), dtype='int64')",
                            "def get_values(self):\n    \"\"\"\n    Return the values.\n\n    .. deprecated:: 0.25.0\n\n    For internal compatibility with pandas formatting.\n\n    Returns\n    -------\n    numpy.array\n        A numpy array of the same dtype as categorical.categories.dtype or\n        Index if datetime / periods.\n    \"\"\"\n    warn(\"The 'get_values' method is deprecated and will be removed in a future version\", FutureWarning, stacklevel=2)\n    return self._internal_get_values()",
                            "def _internal_get_values(self):\n    if is_datetimelike(self.categories):\n        return self.categories.take(self._codes, fill_value=np.nan)\n    elif is_integer_dtype(self.categories) and -1 in self._codes:\n        return self.categories.astype('object').take(self._codes, fill_value=np.nan)\n    return np.array(self)",
                            "def check_for_ordered(self, op):\n    \"\"\" assert that we are ordered \"\"\"\n    if not self.ordered:\n        raise TypeError('Categorical is not ordered for operation {op}\\nyou can use .as_ordered() to change the Categorical to an ordered one\\n'.format(op=op))",
                            "def _values_for_argsort(self):\n    return self._codes.copy()",
                            "def argsort(self, ascending=True, kind='quicksort', *args, **kwargs):\n    \"\"\"\n    Return the indices that would sort the Categorical.\n\n    .. versionchanged:: 0.25.0\n\n       Changed to sort missing values at the end.\n\n    Parameters\n    ----------\n    ascending : bool, default True\n        Whether the indices should result in an ascending\n        or descending sort.\n    kind : {'quicksort', 'mergesort', 'heapsort'}, optional\n        Sorting algorithm.\n    *args, **kwargs:\n        passed through to :func:`numpy.argsort`.\n\n    Returns\n    -------\n    numpy.array\n\n    See Also\n    --------\n    numpy.ndarray.argsort\n\n    Notes\n    -----\n    While an ordering is applied to the category values, arg-sorting\n    in this context refers more to organizing and grouping together\n    based on matching category values. Thus, this function can be\n    called on an unordered Categorical instance unlike the functions\n    'Categorical.min' and 'Categorical.max'.\n\n    Examples\n    --------\n    >>> pd.Categorical(['b', 'b', 'a', 'c']).argsort()\n    array([2, 0, 1, 3])\n\n    >>> cat = pd.Categorical(['b', 'b', 'a', 'c'],\n    ...                      categories=['c', 'b', 'a'],\n    ...                      ordered=True)\n    >>> cat.argsort()\n    array([3, 0, 1, 2])\n\n    Missing values are placed at the end\n\n    >>> cat = pd.Categorical([2, None, 1])\n    >>> cat.argsort()\n    array([2, 0, 1])\n    \"\"\"\n    return super().argsort(*args, ascending=ascending, kind=kind, **kwargs)",
                            "def sort_values(self, inplace=False, ascending=True, na_position='last'):\n    \"\"\"\n    Sort the Categorical by category value returning a new\n    Categorical by default.\n\n    While an ordering is applied to the category values, sorting in this\n    context refers more to organizing and grouping together based on\n    matching category values. Thus, this function can be called on an\n    unordered Categorical instance unlike the functions 'Categorical.min'\n    and 'Categorical.max'.\n\n    Parameters\n    ----------\n    inplace : bool, default False\n        Do operation in place.\n    ascending : bool, default True\n        Order ascending. Passing False orders descending. The\n        ordering parameter provides the method by which the\n        category values are organized.\n    na_position : {'first', 'last'} (optional, default='last')\n        'first' puts NaNs at the beginning\n        'last' puts NaNs at the end\n\n    Returns\n    -------\n    Categorical or None\n\n    See Also\n    --------\n    Categorical.sort\n    Series.sort_values\n\n    Examples\n    --------\n    >>> c = pd.Categorical([1, 2, 2, 1, 5])\n    >>> c\n    [1, 2, 2, 1, 5]\n    Categories (3, int64): [1, 2, 5]\n    >>> c.sort_values()\n    [1, 1, 2, 2, 5]\n    Categories (3, int64): [1, 2, 5]\n    >>> c.sort_values(ascending=False)\n    [5, 2, 2, 1, 1]\n    Categories (3, int64): [1, 2, 5]\n\n    Inplace sorting can be done as well:\n\n    >>> c.sort_values(inplace=True)\n    >>> c\n    [1, 1, 2, 2, 5]\n    Categories (3, int64): [1, 2, 5]\n    >>>\n    >>> c = pd.Categorical([1, 2, 2, 1, 5])\n\n    'sort_values' behaviour with NaNs. Note that 'na_position'\n    is independent of the 'ascending' parameter:\n\n    >>> c = pd.Categorical([np.nan, 2, 2, np.nan, 5])\n    >>> c\n    [NaN, 2.0, 2.0, NaN, 5.0]\n    Categories (2, int64): [2, 5]\n    >>> c.sort_values()\n    [2.0, 2.0, 5.0, NaN, NaN]\n    Categories (2, int64): [2, 5]\n    >>> c.sort_values(ascending=False)\n    [5.0, 2.0, 2.0, NaN, NaN]\n    Categories (2, int64): [2, 5]\n    >>> c.sort_values(na_position='first')\n    [NaN, NaN, 2.0, 2.0, 5.0]\n    Categories (2, int64): [2, 5]\n    >>> c.sort_values(ascending=False, na_position='first')\n    [NaN, NaN, 5.0, 2.0, 2.0]\n    Categories (2, int64): [2, 5]\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if na_position not in ['last', 'first']:\n        msg = 'invalid na_position: {na_position!r}'\n        raise ValueError(msg.format(na_position=na_position))\n    sorted_idx = nargsort(self, ascending=ascending, na_position=na_position)\n    if inplace:\n        self._codes = self._codes[sorted_idx]\n    else:\n        return self._constructor(values=self._codes[sorted_idx], dtype=self.dtype, fastpath=True)",
                            "def _values_for_rank(self):\n    \"\"\"\n    For correctly ranking ordered categorical data. See GH#15420\n\n    Ordered categorical data should be ranked on the basis of\n    codes with -1 translated to NaN.\n\n    Returns\n    -------\n    numpy.array\n\n    \"\"\"\n    from pandas import Series\n    if self.ordered:\n        values = self.codes\n        mask = values == -1\n        if mask.any():\n            values = values.astype('float64')\n            values[mask] = np.nan\n    elif self.categories.is_numeric():\n        values = np.array(self)\n    else:\n        values = np.array(self.rename_categories(Series(self.categories).rank().values))\n    return values",
                            "def ravel(self, order='C'):\n    \"\"\"\n    Return a flattened (numpy) array.\n\n    For internal compatibility with numpy arrays.\n\n    Returns\n    -------\n    numpy.array\n    \"\"\"\n    warn('Categorical.ravel will return a Categorical object instead of an ndarray in a future version.', FutureWarning, stacklevel=2)\n    return np.array(self)",
                            "def view(self, dtype=None):\n    if dtype is not None:\n        raise NotImplementedError(dtype)\n    return self._constructor(values=self._codes, dtype=self.dtype, fastpath=True)",
                            "def to_dense(self):\n    \"\"\"\n    Return my 'dense' representation\n\n    For internal compatibility with numpy arrays.\n\n    Returns\n    -------\n    dense : array\n    \"\"\"\n    return np.asarray(self)",
                            "@deprecate_kwarg(old_arg_name='fill_value', new_arg_name='value')\ndef fillna(self, value=None, method=None, limit=None):\n    \"\"\"\n    Fill NA/NaN values using the specified method.\n\n    Parameters\n    ----------\n    value : scalar, dict, Series\n        If a scalar value is passed it is used to fill all missing values.\n        Alternatively, a Series or dict can be used to fill in different\n        values for each index. The value should not be a list. The\n        value(s) passed should either be in the categories or should be\n        NaN.\n    method : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n        Method to use for filling holes in reindexed Series\n        pad / ffill: propagate last valid observation forward to next valid\n        backfill / bfill: use NEXT valid observation to fill gap\n    limit : int, default None\n        (Not implemented yet for Categorical!)\n        If method is specified, this is the maximum number of consecutive\n        NaN values to forward/backward fill. In other words, if there is\n        a gap with more than this number of consecutive NaNs, it will only\n        be partially filled. If method is not specified, this is the\n        maximum number of entries along the entire axis where NaNs will be\n        filled.\n\n    Returns\n    -------\n    filled : Categorical with NA/NaN filled\n    \"\"\"\n    (value, method) = validate_fillna_kwargs(value, method, validate_scalar_dict_value=False)\n    if value is None:\n        value = np.nan\n    if limit is not None:\n        raise NotImplementedError('specifying a limit for fillna has not been implemented yet')\n    codes = self._codes\n    if method is not None:\n        values = self.to_dense().reshape(-1, len(self))\n        values = interpolate_2d(values, method, 0, None, value).astype(self.categories.dtype)[0]\n        codes = _get_codes_for_values(values, self.categories)\n    elif isinstance(value, ABCSeries):\n        if not value[~value.isin(self.categories)].isna().all():\n            raise ValueError('fill value must be in categories')\n        values_codes = _get_codes_for_values(value, self.categories)\n        indexer = np.where(values_codes != -1)\n        codes[indexer] = values_codes[values_codes != -1]\n    elif is_hashable(value):\n        if not isna(value) and value not in self.categories:\n            raise ValueError('fill value must be in categories')\n        mask = codes == -1\n        if mask.any():\n            codes = codes.copy()\n            if isna(value):\n                codes[mask] = -1\n            else:\n                codes[mask] = self.categories.get_loc(value)\n    else:\n        raise TypeError('\"value\" parameter must be a scalar, dict or Series, but you passed a \"{0}\"'.format(type(value).__name__))\n    return self._constructor(codes, dtype=self.dtype, fastpath=True)",
                            "def take_nd(self, indexer, allow_fill=None, fill_value=None):\n    \"\"\"\n    Take elements from the Categorical.\n\n    Parameters\n    ----------\n    indexer : sequence of int\n        The indices in `self` to take. The meaning of negative values in\n        `indexer` depends on the value of `allow_fill`.\n    allow_fill : bool, default None\n        How to handle negative values in `indexer`.\n\n        * False: negative values in `indices` indicate positional indices\n          from the right. This is similar to\n          :func:`numpy.take`.\n\n        * True: negative values in `indices` indicate missing values\n          (the default). These values are set to `fill_value`. Any other\n          other negative values raise a ``ValueError``.\n\n        .. versionchanged:: 0.23.0\n\n           Deprecated the default value of `allow_fill`. The deprecated\n           default is ``True``. In the future, this will change to\n           ``False``.\n\n    fill_value : object\n        The value to use for `indices` that are missing (-1), when\n        ``allow_fill=True``. This should be the category, i.e. a value\n        in ``self.categories``, not a code.\n\n    Returns\n    -------\n    Categorical\n        This Categorical will have the same categories and ordered as\n        `self`.\n\n    See Also\n    --------\n    Series.take : Similar method for Series.\n    numpy.ndarray.take : Similar method for NumPy arrays.\n\n    Examples\n    --------\n    >>> cat = pd.Categorical(['a', 'a', 'b'])\n    >>> cat\n    [a, a, b]\n    Categories (2, object): [a, b]\n\n    Specify ``allow_fill==False`` to have negative indices mean indexing\n    from the right.\n\n    >>> cat.take([0, -1, -2], allow_fill=False)\n    [a, b, a]\n    Categories (2, object): [a, b]\n\n    With ``allow_fill=True``, indices equal to ``-1`` mean \"missing\"\n    values that should be filled with the `fill_value`, which is\n    ``np.nan`` by default.\n\n    >>> cat.take([0, -1, -1], allow_fill=True)\n    [a, NaN, NaN]\n    Categories (2, object): [a, b]\n\n    The fill value can be specified.\n\n    >>> cat.take([0, -1, -1], allow_fill=True, fill_value='a')\n    [a, a, a]\n    Categories (3, object): [a, b]\n\n    Specifying a fill value that's not in ``self.categories``\n    will raise a ``TypeError``.\n    \"\"\"\n    indexer = np.asarray(indexer, dtype=np.intp)\n    if allow_fill is None:\n        if (indexer < 0).any():\n            warn(_take_msg, FutureWarning, stacklevel=2)\n            allow_fill = True\n    dtype = self.dtype\n    if isna(fill_value):\n        fill_value = -1\n    elif allow_fill:\n        if fill_value in self.categories:\n            fill_value = self.categories.get_loc(fill_value)\n        else:\n            msg = \"'fill_value' ('{}') is not in this Categorical's categories.\"\n            raise TypeError(msg.format(fill_value))\n    codes = take(self._codes, indexer, allow_fill=allow_fill, fill_value=fill_value)\n    result = type(self).from_codes(codes, dtype=dtype)\n    return result",
                            "def __len__(self):\n    \"\"\"\n    The length of this Categorical.\n    \"\"\"\n    return len(self._codes)",
                            "def __iter__(self):\n    \"\"\"\n    Returns an Iterator over the values of this Categorical.\n    \"\"\"\n    return iter(self._internal_get_values().tolist())",
                            "def __contains__(self, key):\n    \"\"\"\n    Returns True if `key` is in this Categorical.\n    \"\"\"\n    if is_scalar(key) and isna(key):\n        return self.isna().any()\n    return contains(self, key, container=self._codes)",
                            "def _tidy_repr(self, max_vals=10, footer=True):\n    \"\"\" a short repr displaying only max_vals and an optional (but default\n    footer)\n    \"\"\"\n    num = max_vals // 2\n    head = self[:num]._get_repr(length=False, footer=False)\n    tail = self[-(max_vals - num):]._get_repr(length=False, footer=False)\n    result = '{head}, ..., {tail}'.format(head=head[:-1], tail=tail[1:])\n    if footer:\n        result = '{result}\\n{footer}'.format(result=result, footer=self._repr_footer())\n    return str(result)",
                            "def _repr_categories(self):\n    \"\"\"\n    return the base repr for the categories\n    \"\"\"\n    max_categories = 10 if get_option('display.max_categories') == 0 else get_option('display.max_categories')\n    from pandas.io.formats import format as fmt\n    if len(self.categories) > max_categories:\n        num = max_categories // 2\n        head = fmt.format_array(self.categories[:num], None)\n        tail = fmt.format_array(self.categories[-num:], None)\n        category_strs = head + ['...'] + tail\n    else:\n        category_strs = fmt.format_array(self.categories, None)\n    category_strs = [x.strip() for x in category_strs]\n    return category_strs",
                            "def _repr_categories_info(self):\n    \"\"\"\n    Returns a string representation of the footer.\n    \"\"\"\n    category_strs = self._repr_categories()\n    dtype = str(self.categories.dtype)\n    levheader = 'Categories ({length}, {dtype}): '.format(length=len(self.categories), dtype=dtype)\n    (width, height) = get_terminal_size()\n    max_width = get_option('display.width') or width\n    if console.in_ipython_frontend():\n        max_width = 0\n    levstring = ''\n    start = True\n    cur_col_len = len(levheader)\n    (sep_len, sep) = (3, ' < ') if self.ordered else (2, ', ')\n    linesep = sep.rstrip() + '\\n'\n    for val in category_strs:\n        if max_width != 0 and cur_col_len + sep_len + len(val) > max_width:\n            levstring += linesep + ' ' * (len(levheader) + 1)\n            cur_col_len = len(levheader) + 1\n        elif not start:\n            levstring += sep\n            cur_col_len += len(val)\n        levstring += val\n        start = False\n    return levheader + '[' + levstring.replace(' < ... < ', ' ... ') + ']'",
                            "def _repr_footer(self):\n    return 'Length: {length}\\n{info}'.format(length=len(self), info=self._repr_categories_info())",
                            "def _get_repr(self, length=True, na_rep='NaN', footer=True):\n    from pandas.io.formats import format as fmt\n    formatter = fmt.CategoricalFormatter(self, length=length, na_rep=na_rep, footer=footer)\n    result = formatter.to_string()\n    return str(result)",
                            "def __repr__(self):\n    \"\"\"\n    String representation.\n    \"\"\"\n    _maxlen = 10\n    if len(self._codes) > _maxlen:\n        result = self._tidy_repr(_maxlen)\n    elif len(self._codes) > 0:\n        result = self._get_repr(length=len(self) > _maxlen)\n    else:\n        msg = self._get_repr(length=False, footer=True).replace('\\n', ', ')\n        result = '[], {repr_msg}'.format(repr_msg=msg)\n    return result",
                            "def _maybe_coerce_indexer(self, indexer):\n    \"\"\"\n    return an indexer coerced to the codes dtype\n    \"\"\"\n    if isinstance(indexer, np.ndarray) and indexer.dtype.kind == 'i':\n        indexer = indexer.astype(self._codes.dtype)\n    return indexer",
                            "def __getitem__(self, key):\n    \"\"\"\n    Return an item.\n    \"\"\"\n    if isinstance(key, (int, np.integer)):\n        i = self._codes[key]\n        if i == -1:\n            return np.nan\n        else:\n            return self.categories[i]\n    else:\n        return self._constructor(values=self._codes[key], dtype=self.dtype, fastpath=True)",
                            "def __setitem__(self, key, value):\n    \"\"\"\n    Item assignment.\n\n\n    Raises\n    ------\n    ValueError\n        If (one or more) Value is not in categories or if a assigned\n        `Categorical` does not have the same categories\n    \"\"\"\n    value = extract_array(value, extract_numpy=True)\n    if isinstance(value, Categorical):\n        if not is_dtype_equal(self, value):\n            raise ValueError('Cannot set a Categorical with another, without identical categories')\n        if not self.categories.equals(value.categories):\n            new_codes = _recode_for_categories(value.codes, value.categories, self.categories)\n            value = Categorical.from_codes(new_codes, dtype=self.dtype)\n    rvalue = value if is_list_like(value) else [value]\n    from pandas import Index\n    to_add = Index(rvalue).difference(self.categories)\n    if len(to_add) and (not isna(to_add).all()):\n        raise ValueError('Cannot setitem on a Categorical with a new category, set the categories first')\n    if isinstance(key, (int, np.integer)):\n        pass\n    elif isinstance(key, tuple):\n        if len(key) == 2:\n            if not com.is_null_slice(key[0]):\n                raise AssertionError('invalid slicing for a 1-ndim categorical')\n            key = key[1]\n        elif len(key) == 1:\n            key = key[0]\n        else:\n            raise AssertionError('invalid slicing for a 1-ndim categorical')\n    elif isinstance(key, slice):\n        pass\n    lindexer = self.categories.get_indexer(rvalue)\n    lindexer = self._maybe_coerce_indexer(lindexer)\n    self._codes[key] = lindexer",
                            "def _reverse_indexer(self):\n    \"\"\"\n    Compute the inverse of a categorical, returning\n    a dict of categories -> indexers.\n\n    *This is an internal function*\n\n    Returns\n    -------\n    dict of categories -> indexers\n\n    Examples\n    --------\n    >>> c = pd.Categorical(list('aabca'))\n    >>> c\n    [a, a, b, c, a]\n    Categories (3, object): [a, b, c]\n    >>> c.categories\n    Index(['a', 'b', 'c'], dtype='object')\n    >>> c.codes\n    array([0, 0, 1, 2, 0], dtype=int8)\n    >>> c._reverse_indexer()\n    {'a': array([0, 1, 4]), 'b': array([2]), 'c': array([3])}\n\n    \"\"\"\n    categories = self.categories\n    (r, counts) = libalgos.groupsort_indexer(self.codes.astype('int64'), categories.size)\n    counts = counts.cumsum()\n    result = (r[start:end] for (start, end) in zip(counts, counts[1:]))\n    result = dict(zip(categories, result))\n    return result",
                            "def _reduce(self, name, axis=0, **kwargs):\n    func = getattr(self, name, None)\n    if func is None:\n        msg = 'Categorical cannot perform the operation {op}'\n        raise TypeError(msg.format(op=name))\n    return func(**kwargs)",
                            "def min(self, numeric_only=None, **kwargs):\n    \"\"\"\n    The minimum value of the object.\n\n    Only ordered `Categoricals` have a minimum!\n\n    Raises\n    ------\n    TypeError\n        If the `Categorical` is not `ordered`.\n\n    Returns\n    -------\n    min : the minimum of this `Categorical`\n    \"\"\"\n    self.check_for_ordered('min')\n    if numeric_only:\n        good = self._codes != -1\n        pointer = self._codes[good].min(**kwargs)\n    else:\n        pointer = self._codes.min(**kwargs)\n    if pointer == -1:\n        return np.nan\n    else:\n        return self.categories[pointer]",
                            "def max(self, numeric_only=None, **kwargs):\n    \"\"\"\n    The maximum value of the object.\n\n    Only ordered `Categoricals` have a maximum!\n\n    Raises\n    ------\n    TypeError\n        If the `Categorical` is not `ordered`.\n\n    Returns\n    -------\n    max : the maximum of this `Categorical`\n    \"\"\"\n    self.check_for_ordered('max')\n    if numeric_only:\n        good = self._codes != -1\n        pointer = self._codes[good].max(**kwargs)\n    else:\n        pointer = self._codes.max(**kwargs)\n    if pointer == -1:\n        return np.nan\n    else:\n        return self.categories[pointer]",
                            "def mode(self, dropna=True):\n    \"\"\"\n    Returns the mode(s) of the Categorical.\n\n    Always returns `Categorical` even if only one value.\n\n    Parameters\n    ----------\n    dropna : bool, default True\n        Don't consider counts of NaN/NaT.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    modes : `Categorical` (sorted)\n    \"\"\"\n    codes = self._codes\n    if dropna:\n        good = self._codes != -1\n        codes = self._codes[good]\n    codes = sorted(htable.mode_int64(ensure_int64(codes), dropna))\n    return self._constructor(values=codes, dtype=self.dtype, fastpath=True)",
                            "def unique(self):\n    \"\"\"\n    Return the ``Categorical`` which ``categories`` and ``codes`` are\n    unique. Unused categories are NOT returned.\n\n    - unordered category: values and categories are sorted by appearance\n      order.\n    - ordered category: values are sorted by appearance order, categories\n      keeps existing order.\n\n    Returns\n    -------\n    unique values : ``Categorical``\n\n    Examples\n    --------\n    An unordered Categorical will return categories in the\n    order of appearance.\n\n    >>> pd.Categorical(list('baabc'))\n    [b, a, c]\n    Categories (3, object): [b, a, c]\n\n    >>> pd.Categorical(list('baabc'), categories=list('abc'))\n    [b, a, c]\n    Categories (3, object): [b, a, c]\n\n    An ordered Categorical preserves the category ordering.\n\n    >>> pd.Categorical(list('baabc'),\n    ...                categories=list('abc'),\n    ...                ordered=True)\n    [b, a, c]\n    Categories (3, object): [a < b < c]\n\n    See Also\n    --------\n    unique\n    CategoricalIndex.unique\n    Series.unique\n\n    \"\"\"\n    unique_codes = unique1d(self.codes)\n    cat = self.copy()\n    cat._codes = unique_codes\n    take_codes = unique_codes[unique_codes != -1]\n    if self.ordered:\n        take_codes = np.sort(take_codes)\n    return cat.set_categories(cat.categories.take(take_codes))",
                            "def _values_for_factorize(self):\n    codes = self.codes.astype('int64')\n    return (codes, -1)",
                            "@classmethod\ndef _from_factorized(cls, uniques, original):\n    return original._constructor(original.categories.take(uniques), dtype=original.dtype)",
                            "def equals(self, other):\n    \"\"\"\n    Returns True if categorical arrays are equal.\n\n    Parameters\n    ----------\n    other : `Categorical`\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if self.is_dtype_equal(other):\n        if self.categories.equals(other.categories):\n            other_codes = other._codes\n        else:\n            other_codes = _recode_for_categories(other.codes, other.categories, self.categories)\n        return np.array_equal(self._codes, other_codes)\n    return False",
                            "def is_dtype_equal(self, other):\n    \"\"\"\n    Returns True if categoricals are the same dtype\n      same categories, and same ordered\n\n    Parameters\n    ----------\n    other : Categorical\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    try:\n        return hash(self.dtype) == hash(other.dtype)\n    except (AttributeError, TypeError):\n        return False",
                            "def describe(self):\n    \"\"\"\n    Describes this Categorical\n\n    Returns\n    -------\n    description: `DataFrame`\n        A dataframe with frequency and counts by category.\n    \"\"\"\n    counts = self.value_counts(dropna=False)\n    freqs = counts / float(counts.sum())\n    from pandas.core.reshape.concat import concat\n    result = concat([counts, freqs], axis=1)\n    result.columns = ['counts', 'freqs']\n    result.index.name = 'categories'\n    return result",
                            "@Substitution(klass='Categorical')\n@Appender(_extension_array_shared_docs['repeat'])\ndef repeat(self, repeats, axis=None):\n    nv.validate_repeat(tuple(), dict(axis=axis))\n    codes = self._codes.repeat(repeats)\n    return self._constructor(values=codes, dtype=self.dtype, fastpath=True)",
                            "@property\ndef _can_hold_na(self):\n    return True",
                            "@classmethod\ndef _concat_same_type(self, to_concat):\n    from pandas.core.dtypes.concat import concat_categorical\n    return concat_categorical(to_concat)",
                            "def isin(self, values):\n    \"\"\"\n    Check whether `values` are contained in Categorical.\n\n    Return a boolean NumPy Array showing whether each element in\n    the Categorical matches an element in the passed sequence of\n    `values` exactly.\n\n    Parameters\n    ----------\n    values : set or list-like\n        The sequence of values to test. Passing in a single string will\n        raise a ``TypeError``. Instead, turn a single string into a\n        list of one element.\n\n    Returns\n    -------\n    isin : numpy.ndarray (bool dtype)\n\n    Raises\n    ------\n    TypeError\n      * If `values` is not a set or list-like\n\n    See Also\n    --------\n    pandas.Series.isin : Equivalent method on Series.\n\n    Examples\n    --------\n\n    >>> s = pd.Categorical(['lama', 'cow', 'lama', 'beetle', 'lama',\n    ...                'hippo'])\n    >>> s.isin(['cow', 'lama'])\n    array([ True,  True,  True, False,  True, False])\n\n    Passing a single string as ``s.isin('lama')`` will raise an error. Use\n    a list of one element instead:\n\n    >>> s.isin(['lama'])\n    array([ True, False,  True, False,  True, False])\n    \"\"\"\n    if not is_list_like(values):\n        raise TypeError('only list-like objects are allowed to be passed to isin(), you passed a [{values_type}]'.format(values_type=type(values).__name__))\n    values = sanitize_array(values, None, None)\n    null_mask = np.asarray(isna(values))\n    code_values = self.categories.get_indexer(values)\n    code_values = code_values[null_mask | (code_values >= 0)]\n    return algorithms.isin(self.codes, code_values)"
                        ],
                        "constructor_variables": [
                            "self._codes = coerce_indexer_dtype(values, dtype.categories)",
                            "self._dtype = self._dtype.update_dtype(dtype)",
                            "self._dtype = self._dtype.update_dtype(dtype)",
                            "self._codes = coerce_indexer_dtype(codes, dtype.categories)"
                        ],
                        "class_level_variables": [
                            "__array_priority__ = 1000",
                            "_dtype = CategoricalDtype(ordered=False)",
                            "_deprecations = frozenset(['labels', 'tolist'])",
                            "_typ = 'categorical'",
                            "to_list = tolist",
                            "codes = property(fget=_get_codes, fset=_set_codes, doc=_codes_doc)",
                            "__eq__ = _cat_compare_op(operator.eq)",
                            "__ne__ = _cat_compare_op(operator.ne)",
                            "__lt__ = _cat_compare_op(operator.lt)",
                            "__gt__ = _cat_compare_op(operator.gt)",
                            "__le__ = _cat_compare_op(operator.le)",
                            "__ge__ = _cat_compare_op(operator.ge)",
                            "isnull = isna",
                            "notnull = notna",
                            "take = take_nd"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, values, categories=None, ordered=None, dtype=None, fastpath=False)",
                            "categories(self)",
                            "categories(self, categories)",
                            "ordered(self) -> Ordered",
                            "dtype(self) -> CategoricalDtype",
                            "_ndarray_values(self) -> np.ndarray",
                            "_constructor(self) -> Type['Categorical']",
                            "_from_sequence(cls, scalars, dtype=None, copy=False)",
                            "_formatter(self, boxed=False)",
                            "copy(self) -> 'Categorical'",
                            "astype(self, dtype: Dtype, copy: bool=True) -> ArrayLike",
                            "size(self) -> int",
                            "itemsize(self) -> int",
                            "tolist(self) -> list",
                            "base(self) -> None",
                            "_from_inferred_categories(cls, inferred_categories, inferred_codes, dtype, true_values=None)",
                            "from_codes(cls, codes, categories=None, ordered=None, dtype=None)",
                            "_get_codes(self)",
                            "_set_codes(self, codes)",
                            "_set_categories(self, categories, fastpath=False)",
                            "_set_dtype(self, dtype: CategoricalDtype) -> 'Categorical'",
                            "set_ordered(self, value, inplace=False)",
                            "as_ordered(self, inplace=False)",
                            "as_unordered(self, inplace=False)",
                            "set_categories(self, new_categories, ordered=None, rename=False, inplace=False)",
                            "rename_categories(self, new_categories, inplace=False)",
                            "reorder_categories(self, new_categories, ordered=None, inplace=False)",
                            "add_categories(self, new_categories, inplace=False)",
                            "remove_categories(self, removals, inplace=False)",
                            "remove_unused_categories(self, inplace=False)",
                            "map(self, mapper)",
                            "shape(self)",
                            "shift(self, periods, fill_value=None)",
                            "__array__(self, dtype=None)",
                            "__array_ufunc__(self, ufunc, method, *inputs, **kwargs)",
                            "__setstate__(self, state)",
                            "T(self)",
                            "nbytes(self)",
                            "memory_usage(self, deep=False)",
                            "searchsorted(self, value, side='left', sorter=None)",
                            "isna(self)",
                            "notna(self)",
                            "put(self, *args, **kwargs)",
                            "dropna(self)",
                            "value_counts(self, dropna=True)",
                            "get_values(self)",
                            "_internal_get_values(self)",
                            "check_for_ordered(self, op)",
                            "_values_for_argsort(self)",
                            "argsort(self, ascending=True, kind='quicksort', *args, **kwargs)",
                            "sort_values(self, inplace=False, ascending=True, na_position='last')",
                            "_values_for_rank(self)",
                            "ravel(self, order='C')",
                            "view(self, dtype=None)",
                            "to_dense(self)",
                            "fillna(self, value=None, method=None, limit=None)",
                            "take_nd(self, indexer, allow_fill=None, fill_value=None)",
                            "__len__(self)",
                            "__iter__(self)",
                            "__contains__(self, key)",
                            "_tidy_repr(self, max_vals=10, footer=True)",
                            "_repr_categories(self)",
                            "_repr_categories_info(self)",
                            "_repr_footer(self)",
                            "_get_repr(self, length=True, na_rep='NaN', footer=True)",
                            "__repr__(self)",
                            "_maybe_coerce_indexer(self, indexer)",
                            "__getitem__(self, key)",
                            "__setitem__(self, key, value)",
                            "_reverse_indexer(self)",
                            "_reduce(self, name, axis=0, **kwargs)",
                            "min(self, numeric_only=None, **kwargs)",
                            "max(self, numeric_only=None, **kwargs)",
                            "mode(self, dropna=True)",
                            "unique(self)",
                            "_values_for_factorize(self)",
                            "_from_factorized(cls, uniques, original)",
                            "equals(self, other)",
                            "is_dtype_equal(self, other)",
                            "describe(self)",
                            "repeat(self, repeats, axis=None)",
                            "_can_hold_na(self)",
                            "_concat_same_type(self, to_concat)",
                            "isin(self, values)"
                        ],
                        "class_level_variable_names": [
                            "__array_priority__",
                            "_dtype",
                            "_deprecations",
                            "_typ",
                            "to_list",
                            "codes",
                            "__eq__",
                            "__ne__",
                            "__lt__",
                            "__gt__",
                            "__le__",
                            "__ge__",
                            "isnull",
                            "notnull",
                            "take"
                        ],
                        "constructor_variable_names": [
                            "values",
                            "sanitize_dtype",
                            "old_codes",
                            "null_mask",
                            "full_codes",
                            "_dtype",
                            "_codes",
                            "codes",
                            "dtype"
                        ]
                    },
                    "used_imports": [
                        "import numpy as np",
                        "from pandas.util._decorators import Appender, Substitution, cache_readonly, deprecate_kwarg",
                        "from pandas.util._validators import validate_bool_kwarg, validate_fillna_kwargs",
                        "from pandas.core.dtypes.generic import ABCDataFrame, ABCIndexClass, ABCSeries",
                        "from pandas.core.dtypes.inference import is_hashable",
                        "from pandas.core.dtypes.missing import isna, notna",
                        "from pandas.core.missing import interpolate_2d"
                    ],
                    "variable_values": [
                        [
                            {
                                "value": {
                                    "variable_value": "0    a\n1    b\n2    c\n3    d\n4    e\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "validate_fillna_kwargs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([ 0, -1,  1, -1, -1], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "self": {
                                    "variable_value": "[a, NaN, b, NaN, NaN]\nCategories (5, object): [a, b, c, d, e]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "(5,)"
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.to_dense": {
                                    "variable_value": "<bound method Categorical.to_dense of [a, NaN, b, NaN, NaN]\nCategories (5, object): [a, b, c, d, e]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolate_2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "Index(['a', 'b', 'c', 'd', 'e'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(5,)"
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.isin": {
                                    "variable_value": "<bound method Series.isin of 0    a\n1    b\n2    c\n3    d\n4    e\ndtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "values_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_hashable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "codes.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.arrays.categorical.Categorical'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x7fd9067bc680>"
                                },
                                "self.dtype": {
                                    "variable_value": "CategoricalDtype(categories=['a', 'b', 'c', 'd', 'e'], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "deprecate_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "value": {
                                    "variable_value": "0    a\n1    b\n2    c\n3    d\n4    e\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "validate_fillna_kwargs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "codes": {
                                    "variable_value": "array([0, 1, 2, 3, 4], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "self._codes": {
                                    "variable_value": "array([0, 1, 2, 3, 4], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "self": {
                                    "variable_value": "[a, b, c, d, e]\nCategories (5, object): [a, b, c, d, e]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "(5,)"
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.to_dense": {
                                    "variable_value": "<bound method Categorical.to_dense of [a, b, c, d, e]\nCategories (5, object): [a, b, c, d, e]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolate_2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "Index(['a', 'b', 'c', 'd', 'e'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(5,)"
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.isin": {
                                    "variable_value": "<bound method Series.isin of 0    a\n1    b\n2    c\n3    d\n4    e\ndtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "values_codes": {
                                    "variable_value": "array([0, 1, 2, 3, 4], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "indexer": {
                                    "variable_value": "(array([0, 1, 2, 3, 4]),)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_hashable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "codes.copy": {
                                    "variable_value": "<built-in method copy of numpy.ndarray object at 0x7fd90429ba80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.arrays.categorical.Categorical'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x7fd9067bc680>"
                                },
                                "self.dtype": {
                                    "variable_value": "CategoricalDtype(categories=['a', 'b', 'c', 'd', 'e'], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "deprecate_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "value": {
                                    "variable_value": "0    b\n1    d\n2    a\n3    d\n4    a\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "validate_fillna_kwargs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([ 0, -1,  1, -1, -1], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "self": {
                                    "variable_value": "[a, NaN, b, NaN, NaN]\nCategories (5, object): [a, b, c, d, e]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "(5,)"
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.to_dense": {
                                    "variable_value": "<bound method Categorical.to_dense of [a, NaN, b, NaN, NaN]\nCategories (5, object): [a, b, c, d, e]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolate_2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "Index(['a', 'b', 'c', 'd', 'e'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(5,)"
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.isin": {
                                    "variable_value": "<bound method Series.isin of 0    b\n1    d\n2    a\n3    d\n4    a\ndtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "values_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_hashable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "codes.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.arrays.categorical.Categorical'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x7fd9067bc680>"
                                },
                                "self.dtype": {
                                    "variable_value": "CategoricalDtype(categories=['a', 'b', 'c', 'd', 'e'], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "deprecate_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "value": {
                                    "variable_value": "0    b\n1    d\n2    a\n3    d\n4    a\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "validate_fillna_kwargs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "codes": {
                                    "variable_value": "array([1, 3, 0, 3, 0], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "self._codes": {
                                    "variable_value": "array([1, 3, 0, 3, 0], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "self": {
                                    "variable_value": "[b, d, a, d, a]\nCategories (5, object): [a, b, c, d, e]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "(5,)"
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.to_dense": {
                                    "variable_value": "<bound method Categorical.to_dense of [b, d, a, d, a]\nCategories (5, object): [a, b, c, d, e]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolate_2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "Index(['a', 'b', 'c', 'd', 'e'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(5,)"
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.isin": {
                                    "variable_value": "<bound method Series.isin of 0    b\n1    d\n2    a\n3    d\n4    a\ndtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "values_codes": {
                                    "variable_value": "array([1, 3, 0, 3, 0], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "indexer": {
                                    "variable_value": "(array([0, 1, 2, 3, 4]),)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_hashable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "codes.copy": {
                                    "variable_value": "<built-in method copy of numpy.ndarray object at 0x7fd903fd9f30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.arrays.categorical.Categorical'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x7fd9067bc680>"
                                },
                                "self.dtype": {
                                    "variable_value": "CategoricalDtype(categories=['a', 'b', 'c', 'd', 'e'], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "deprecate_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "value": {
                                    "variable_value": "0    b\n1    d\n2    a\n3    d\n4    a\ndtype: category\nCategories (5, object): [b, c, d, e, a]",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "validate_fillna_kwargs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([ 0, -1,  1, -1, -1], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "self": {
                                    "variable_value": "[a, NaN, b, NaN, NaN]\nCategories (5, object): [a, b, c, d, e]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "(5,)"
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.to_dense": {
                                    "variable_value": "<bound method Categorical.to_dense of [a, NaN, b, NaN, NaN]\nCategories (5, object): [a, b, c, d, e]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolate_2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "Index(['a', 'b', 'c', 'd', 'e'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(5,)"
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.isin": {
                                    "variable_value": "<bound method Series.isin of 0    b\n1    d\n2    a\n3    d\n4    a\ndtype: category\nCategories (5, object): [b, c, d, e, a]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "values_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_hashable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "codes.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.arrays.categorical.Categorical'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x7fd9067bc680>"
                                },
                                "self.dtype": {
                                    "variable_value": "CategoricalDtype(categories=['a', 'b', 'c', 'd', 'e'], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "deprecate_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "value": {
                                    "variable_value": "0    b\n1    d\n2    a\n3    d\n4    a\ndtype: category\nCategories (5, object): [b, c, d, e, a]",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "validate_fillna_kwargs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "codes": {
                                    "variable_value": "array([1, 3, 0, 3, 0], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "self._codes": {
                                    "variable_value": "array([1, 3, 0, 3, 0], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "self": {
                                    "variable_value": "[b, d, a, d, a]\nCategories (5, object): [a, b, c, d, e]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "(5,)"
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.to_dense": {
                                    "variable_value": "<bound method Categorical.to_dense of [b, d, a, d, a]\nCategories (5, object): [a, b, c, d, e]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolate_2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "Index(['a', 'b', 'c', 'd', 'e'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(5,)"
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.isin": {
                                    "variable_value": "<bound method Series.isin of 0    b\n1    d\n2    a\n3    d\n4    a\ndtype: category\nCategories (5, object): [b, c, d, e, a]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "values_codes": {
                                    "variable_value": "array([1, 3, 0, 3, 0], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "indexer": {
                                    "variable_value": "(array([0, 1, 2, 3, 4]),)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_hashable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "codes.copy": {
                                    "variable_value": "<built-in method copy of numpy.ndarray object at 0x7fd9042de6c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.arrays.categorical.Categorical'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x7fd9067bc680>"
                                },
                                "self.dtype": {
                                    "variable_value": "CategoricalDtype(categories=['a', 'b', 'c', 'd', 'e'], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "deprecate_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "value": {
                                    "variable_value": "0    a\n1    b\n2    c\n3    d\n4    e\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "validate_fillna_kwargs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([ 0, -1,  1, -1, -1], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "self": {
                                    "variable_value": "[a, NaN, b, NaN, NaN]\nCategories (5, object): [a, b, c, d, e]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "(5,)"
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.to_dense": {
                                    "variable_value": "<bound method Categorical.to_dense of [a, NaN, b, NaN, NaN]\nCategories (5, object): [a, b, c, d, e]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolate_2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "Index(['a', 'b', 'c', 'd', 'e'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(5,)"
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.isin": {
                                    "variable_value": "<bound method Series.isin of 0    a\n1    b\n2    c\n3    d\n4    e\ndtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "values_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_hashable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "codes.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.arrays.categorical.Categorical'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x7f0a366bd8b0>"
                                },
                                "self.dtype": {
                                    "variable_value": "CategoricalDtype(categories=['a', 'b', 'c', 'd', 'e'], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "deprecate_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "value": {
                                    "variable_value": "0    a\n1    b\n2    c\n3    d\n4    e\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "validate_fillna_kwargs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "codes": {
                                    "variable_value": "array([0, 1, 1, 3, 4], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "self._codes": {
                                    "variable_value": "array([0, 1, 1, 3, 4], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "self": {
                                    "variable_value": "[a, b, b, d, e]\nCategories (5, object): [a, b, c, d, e]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "(5,)"
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.to_dense": {
                                    "variable_value": "<bound method Categorical.to_dense of [a, b, b, d, e]\nCategories (5, object): [a, b, c, d, e]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolate_2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "Index(['a', 'b', 'c', 'd', 'e'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(5,)"
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.isin": {
                                    "variable_value": "<bound method Series.isin of 0    a\n1    b\n2    c\n3    d\n4    e\ndtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "values_codes": {
                                    "variable_value": "array([0, 1, 2, 3, 4], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "indexer": {
                                    "variable_value": "(array([1, 3, 4]),)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_hashable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "codes.copy": {
                                    "variable_value": "<built-in method copy of numpy.ndarray object at 0x7f0a33bd9da0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.arrays.categorical.Categorical'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x7f0a366bd8b0>"
                                },
                                "self.dtype": {
                                    "variable_value": "CategoricalDtype(categories=['a', 'b', 'c', 'd', 'e'], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "deprecate_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "value": {
                                    "variable_value": "0    b\n1    d\n2    a\n3    d\n4    a\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "validate_fillna_kwargs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([ 0, -1,  1, -1, -1], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "self": {
                                    "variable_value": "[a, NaN, b, NaN, NaN]\nCategories (5, object): [a, b, c, d, e]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "(5,)"
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.to_dense": {
                                    "variable_value": "<bound method Categorical.to_dense of [a, NaN, b, NaN, NaN]\nCategories (5, object): [a, b, c, d, e]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolate_2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "Index(['a', 'b', 'c', 'd', 'e'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(5,)"
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.isin": {
                                    "variable_value": "<bound method Series.isin of 0    b\n1    d\n2    a\n3    d\n4    a\ndtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "values_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_hashable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "codes.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.arrays.categorical.Categorical'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x7f0a366bd8b0>"
                                },
                                "self.dtype": {
                                    "variable_value": "CategoricalDtype(categories=['a', 'b', 'c', 'd', 'e'], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "deprecate_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "value": {
                                    "variable_value": "0    b\n1    d\n2    a\n3    d\n4    a\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "validate_fillna_kwargs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "codes": {
                                    "variable_value": "array([0, 3, 1, 3, 0], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "self._codes": {
                                    "variable_value": "array([0, 3, 1, 3, 0], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "self": {
                                    "variable_value": "[a, d, b, d, a]\nCategories (5, object): [a, b, c, d, e]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "(5,)"
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.to_dense": {
                                    "variable_value": "<bound method Categorical.to_dense of [a, d, b, d, a]\nCategories (5, object): [a, b, c, d, e]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolate_2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "Index(['a', 'b', 'c', 'd', 'e'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(5,)"
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.isin": {
                                    "variable_value": "<bound method Series.isin of 0    b\n1    d\n2    a\n3    d\n4    a\ndtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "values_codes": {
                                    "variable_value": "array([1, 3, 0, 3, 0], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "indexer": {
                                    "variable_value": "(array([1, 3, 4]),)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_hashable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "codes.copy": {
                                    "variable_value": "<built-in method copy of numpy.ndarray object at 0x7f0a330f2e90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.arrays.categorical.Categorical'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x7f0a366bd8b0>"
                                },
                                "self.dtype": {
                                    "variable_value": "CategoricalDtype(categories=['a', 'b', 'c', 'd', 'e'], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "deprecate_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "value": {
                                    "variable_value": "0    b\n1    d\n2    a\n3    d\n4    a\ndtype: category\nCategories (5, object): [b, c, d, e, a]",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "validate_fillna_kwargs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([ 0, -1,  1, -1, -1], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "self": {
                                    "variable_value": "[a, NaN, b, NaN, NaN]\nCategories (5, object): [a, b, c, d, e]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "(5,)"
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.to_dense": {
                                    "variable_value": "<bound method Categorical.to_dense of [a, NaN, b, NaN, NaN]\nCategories (5, object): [a, b, c, d, e]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolate_2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "Index(['a', 'b', 'c', 'd', 'e'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(5,)"
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.isin": {
                                    "variable_value": "<bound method Series.isin of 0    b\n1    d\n2    a\n3    d\n4    a\ndtype: category\nCategories (5, object): [b, c, d, e, a]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "values_codes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_hashable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "codes.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.arrays.categorical.Categorical'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x7f0a366bd8b0>"
                                },
                                "self.dtype": {
                                    "variable_value": "CategoricalDtype(categories=['a', 'b', 'c', 'd', 'e'], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "deprecate_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "value": {
                                    "variable_value": "0    b\n1    d\n2    a\n3    d\n4    a\ndtype: category\nCategories (5, object): [b, c, d, e, a]",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "method": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "validate_fillna_kwargs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "limit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "codes": {
                                    "variable_value": "array([0, 3, 1, 3, 0], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "self._codes": {
                                    "variable_value": "array([0, 3, 1, 3, 0], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "self": {
                                    "variable_value": "[a, d, b, d, a]\nCategories (5, object): [a, b, c, d, e]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "(5,)"
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.to_dense": {
                                    "variable_value": "<bound method Categorical.to_dense of [a, d, b, d, a]\nCategories (5, object): [a, b, c, d, e]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interpolate_2d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "Index(['a', 'b', 'c', 'd', 'e'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "(5,)"
                                },
                                "_get_codes_for_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.isin": {
                                    "variable_value": "<bound method Series.isin of 0    b\n1    d\n2    a\n3    d\n4    a\ndtype: category\nCategories (5, object): [b, c, d, e, a]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "values_codes": {
                                    "variable_value": "array([1, 3, 0, 3, 0], dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(5,)"
                                },
                                "indexer": {
                                    "variable_value": "(array([1, 3, 4]),)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "np.where": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_hashable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "codes.copy": {
                                    "variable_value": "<built-in method copy of numpy.ndarray object at 0x7f0a33e75670>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.categories.get_loc": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.arrays.categorical.Categorical'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x7f0a366bd8b0>"
                                },
                                "self.dtype": {
                                    "variable_value": "CategoricalDtype(categories=['a', 'b', 'c', 'd', 'e'], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "deprecate_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": {
                "file_scope_functions": [
                    {
                        "code": "def _cat_compare_op(op):\n    opname = \"__{op}__\".format(op=op.__name__)\n\n    def f(self, other):\n        # On python2, you can usually compare any type to any type, and\n        # Categoricals can be seen as a custom type, but having different\n        # results depending whether categories are the same or not is kind of\n        # insane, so be a bit stricter here and use the python3 idea of\n        # comparing only things of equal type.\n        if isinstance(other, (ABCDataFrame, ABCSeries, ABCIndexClass)):\n            return NotImplemented\n\n        other = lib.item_from_zerodim(other)\n        if is_list_like(other) and len(other) != len(self):\n            # TODO: Could this fail if the categories are listlike objects?\n            raise ValueError(\"Lengths must match.\")\n\n        if not self.ordered:\n            if opname in [\"__lt__\", \"__gt__\", \"__le__\", \"__ge__\"]:\n                raise TypeError(\n                    \"Unordered Categoricals can only compare equality or not\"\n                )\n        if isinstance(other, Categorical):\n            # Two Categoricals can only be be compared if the categories are\n            # the same (maybe up to ordering, depending on ordered)\n\n            msg = \"Categoricals can only be compared if 'categories' are the same.\"\n            if len(self.categories) != len(other.categories):\n                raise TypeError(msg + \" Categories are different lengths\")\n            elif self.ordered and not (self.categories == other.categories).all():\n                raise TypeError(msg)\n            elif not set(self.categories) == set(other.categories):\n                raise TypeError(msg)\n\n            if not (self.ordered == other.ordered):\n                raise TypeError(\n                    \"Categoricals can only be compared if 'ordered' is the same\"\n                )\n            if not self.ordered and not self.categories.equals(other.categories):\n                # both unordered and different order\n                other_codes = _get_codes_for_values(other, self.categories)\n            else:\n                other_codes = other._codes\n\n            mask = (self._codes == -1) | (other_codes == -1)\n            f = getattr(self._codes, opname)\n            ret = f(other_codes)\n            if mask.any():\n                # In other series, the leads to False, so do that here too\n                ret[mask] = False\n            return ret\n\n        if is_scalar(other):\n            if other in self.categories:\n                i = self.categories.get_loc(other)\n                ret = getattr(self._codes, opname)(i)\n\n                # check for NaN in self\n                mask = self._codes == -1\n                ret[mask] = False\n                return ret\n            else:\n                if opname == \"__eq__\":\n                    return np.repeat(False, len(self))\n                elif opname == \"__ne__\":\n                    return np.repeat(True, len(self))\n                else:\n                    msg = (\n                        \"Cannot compare a Categorical for op {op} with a \"\n                        \"scalar, which is not a category.\"\n                    )\n                    raise TypeError(msg.format(op=opname))\n        else:\n\n            # allow categorical vs object dtype array comparisons for equality\n            # these are only positional comparisons\n            if opname in [\"__eq__\", \"__ne__\"]:\n                return getattr(np.array(self), opname)(np.array(other))\n\n            msg = (\n                \"Cannot compare a Categorical for op {op} with type {typ}.\"\n                \"\\nIf you want to compare values, use 'np.asarray(cat) \"\n                \"<op> other'.\"\n            )\n            raise TypeError(msg.format(op=opname, typ=type(other)))\n\n    f.__name__ = opname\n\n    return f",
                        "signature": "_cat_compare_op(op)"
                    },
                    {
                        "code": "def contains(cat, key, container):\n    \"\"\"\n    Helper for membership check for ``key`` in ``cat``.\n\n    This is a helper method for :method:`__contains__`\n    and :class:`CategoricalIndex.__contains__`.\n\n    Returns True if ``key`` is in ``cat.categories`` and the\n    location of ``key`` in ``categories`` is in ``container``.\n\n    Parameters\n    ----------\n    cat : :class:`Categorical`or :class:`categoricalIndex`\n    key : a hashable object\n        The key to check membership for.\n    container : Container (e.g. list-like or mapping)\n        The container to check for membership in.\n\n    Returns\n    -------\n    is_in : bool\n        True if ``key`` is in ``self.categories`` and location of\n        ``key`` in ``categories`` is in ``container``, else False.\n\n    Notes\n    -----\n    This method does not check for NaN values. Do that separately\n    before calling this method.\n    \"\"\"\n    hash(key)\n\n    # get location of key in categories.\n    # If a KeyError, the key isn't in categories, so logically\n    #  can't be in container either.\n    try:\n        loc = cat.categories.get_loc(key)\n    except (KeyError, TypeError):\n        return False\n\n    # loc is the location of key in categories, but also the *value*\n    # for key in container. So, `key` may be in categories,\n    # but still not in `container`. Example ('b' in categories,\n    # but not in values):\n    # 'b' in Categorical(['a'], categories=['a', 'b'])  # False\n    if is_scalar(loc):\n        return loc in container\n    else:\n        # if categories is an IntervalIndex, loc is an array.\n        return any(loc_ in container for loc_ in loc)",
                        "signature": "contains(cat, key, container)"
                    },
                    {
                        "code": "def _get_codes_for_values(values, categories):\n    \"\"\"\n    utility routine to turn values into codes given the specified categories\n    \"\"\"\n    dtype_equal = is_dtype_equal(values.dtype, categories.dtype)\n\n    if dtype_equal:\n        # To prevent erroneous dtype coercion in _get_data_algo, retrieve\n        # the underlying numpy array. gh-22702\n        values = getattr(values, \"_ndarray_values\", values)\n        categories = getattr(categories, \"_ndarray_values\", categories)\n    elif is_extension_array_dtype(categories.dtype) and is_object_dtype(values):\n        # Support inferring the correct extension dtype from an array of\n        # scalar objects. e.g.\n        # Categorical(array[Period, Period], categories=PeriodIndex(...))\n        try:\n            values = categories.dtype.construct_array_type()._from_sequence(values)\n        except Exception:\n            # but that may fail for any reason, so fall back to object\n            values = ensure_object(values)\n            categories = ensure_object(categories)\n    else:\n        values = ensure_object(values)\n        categories = ensure_object(categories)\n\n    (hash_klass, vec_klass), vals = _get_data_algo(values, _hashtables)\n    (_, _), cats = _get_data_algo(categories, _hashtables)\n    t = hash_klass(len(cats))\n    t.map_locations(cats)\n    return coerce_indexer_dtype(t.lookup(vals), cats)",
                        "signature": "_get_codes_for_values(values, categories)"
                    },
                    {
                        "code": "def _recode_for_categories(codes: np.ndarray, old_categories, new_categories):\n    \"\"\"\n    Convert a set of codes for to a new set of categories\n\n    Parameters\n    ----------\n    codes : np.ndarray\n    old_categories, new_categories : Index\n\n    Returns\n    -------\n    new_codes : np.ndarray[np.int64]\n\n    Examples\n    --------\n    >>> old_cat = pd.Index(['b', 'a', 'c'])\n    >>> new_cat = pd.Index(['a', 'b'])\n    >>> codes = np.array([0, 1, 1, 2])\n    >>> _recode_for_categories(codes, old_cat, new_cat)\n    array([ 1,  0,  0, -1])\n    \"\"\"\n    if len(old_categories) == 0:\n        # All null anyway, so just retain the nulls\n        return codes.copy()\n    elif new_categories.equals(old_categories):\n        # Same categories, so no need to actually recode\n        return codes.copy()\n    indexer = coerce_indexer_dtype(\n        new_categories.get_indexer(old_categories), new_categories\n    )\n    new_codes = take_1d(indexer, codes.copy(), fill_value=-1)\n    return new_codes",
                        "signature": "_recode_for_categories(codes: np.ndarray, old_categories, new_categories)"
                    },
                    {
                        "code": "def _convert_to_list_like(list_like):\n    if hasattr(list_like, \"dtype\"):\n        return list_like\n    if isinstance(list_like, list):\n        return list_like\n    if is_sequence(list_like) or isinstance(list_like, tuple) or is_iterator(list_like):\n        return list(list_like)\n    elif is_scalar(list_like):\n        return [list_like]\n    else:\n        # TODO: is this reached?\n        return [list_like]",
                        "signature": "_convert_to_list_like(list_like)"
                    },
                    {
                        "code": "def _factorize_from_iterable(values):\n    \"\"\"\n    Factorize an input `values` into `categories` and `codes`. Preserves\n    categorical dtype in `categories`.\n\n    *This is an internal function*\n\n    Parameters\n    ----------\n    values : list-like\n\n    Returns\n    -------\n    codes : ndarray\n    categories : Index\n        If `values` has a categorical dtype, then `categories` is\n        a CategoricalIndex keeping the categories and order of `values`.\n    \"\"\"\n    if not is_list_like(values):\n        raise TypeError(\"Input must be list-like\")\n\n    if is_categorical_dtype(values):\n        values = extract_array(values)\n        # The Categorical we want to build has the same categories\n        # as values but its codes are by def [0, ..., len(n_categories) - 1]\n        cat_codes = np.arange(len(values.categories), dtype=values.codes.dtype)\n        categories = Categorical.from_codes(cat_codes, dtype=values.dtype)\n        codes = values.codes\n    else:\n        # The value of ordered is irrelevant since we don't use cat as such,\n        # but only the resulting categories, the order of which is independent\n        # from ordered. Set ordered to False as default. See GH #15457\n        cat = Categorical(values, ordered=False)\n        categories = cat.categories\n        codes = cat.codes\n    return codes, categories",
                        "signature": "_factorize_from_iterable(values)"
                    },
                    {
                        "code": "def _factorize_from_iterables(iterables):\n    \"\"\"\n    A higher-level wrapper over `_factorize_from_iterable`.\n\n    *This is an internal function*\n\n    Parameters\n    ----------\n    iterables : list-like of list-likes\n\n    Returns\n    -------\n    codes_list : list of ndarrays\n    categories_list : list of Indexes\n\n    Notes\n    -----\n    See `_factorize_from_iterable` for more info.\n    \"\"\"\n    if len(iterables) == 0:\n        # For consistency, it should return a list of 2 lists.\n        return [[], []]\n    return map(list, zip(*(_factorize_from_iterable(it) for it in iterables)))",
                        "signature": "_factorize_from_iterables(iterables)"
                    }
                ],
                "file_scope_classes": [
                    {
                        "class_declaration": "class Categorical:",
                        "functions": [
                            {
                                "code": "def __init__(\n    self, values, categories=None, ordered=None, dtype=None, fastpath=False\n):\n\n    dtype = CategoricalDtype._from_values_or_dtype(\n        values, categories, ordered, dtype\n    )\n    # At this point, dtype is always a CategoricalDtype, but\n    # we may have dtype.categories be None, and we need to\n    # infer categories in a factorization step futher below\n\n    if fastpath:\n        self._codes = coerce_indexer_dtype(values, dtype.categories)\n        self._dtype = self._dtype.update_dtype(dtype)\n        return\n\n    # null_mask indicates missing values we want to exclude from inference.\n    # This means: only missing values in list-likes (not arrays/ndframes).\n    null_mask = np.array(False)\n\n    # sanitize input\n    if is_categorical_dtype(values):\n        if dtype.categories is None:\n            dtype = CategoricalDtype(values.categories, dtype._ordered)\n    elif not isinstance(values, (ABCIndexClass, ABCSeries)):\n        # sanitize_array coerces np.nan to a string under certain versions\n        # of numpy\n        values = maybe_infer_to_datetimelike(values, convert_dates=True)\n        if not isinstance(values, np.ndarray):\n            values = _convert_to_list_like(values)\n\n            # By convention, empty lists result in object dtype:\n            if len(values) == 0:\n                sanitize_dtype = \"object\"\n            else:\n                sanitize_dtype = None\n            null_mask = isna(values)\n            if null_mask.any():\n                values = [values[idx] for idx in np.where(~null_mask)[0]]\n            values = sanitize_array(values, None, dtype=sanitize_dtype)\n\n    if dtype.categories is None:\n        try:\n            codes, categories = factorize(values, sort=True)\n        except TypeError:\n            codes, categories = factorize(values, sort=False)\n            if dtype._ordered:\n                # raise, as we don't have a sortable data structure and so\n                # the user should give us one by specifying categories\n                raise TypeError(\n                    \"'values' is not ordered, please \"\n                    \"explicitly specify the categories order \"\n                    \"by passing in a categories argument.\"\n                )\n        except ValueError:\n\n            # FIXME\n            raise NotImplementedError(\n                \"> 1 ndim Categorical are not supported at this time\"\n            )\n\n        # we're inferring from values\n        dtype = CategoricalDtype(categories, dtype._ordered)\n\n    elif is_categorical_dtype(values):\n        old_codes = (\n            values._values.codes if isinstance(values, ABCSeries) else values.codes\n        )\n        codes = _recode_for_categories(\n            old_codes, values.dtype.categories, dtype.categories\n        )\n\n    else:\n        codes = _get_codes_for_values(values, dtype.categories)\n\n    if null_mask.any():\n        # Reinsert -1 placeholders for previously removed missing values\n        full_codes = -np.ones(null_mask.shape, dtype=codes.dtype)\n        full_codes[~null_mask] = codes\n        codes = full_codes\n\n    self._dtype = self._dtype.update_dtype(dtype)\n    self._codes = coerce_indexer_dtype(codes, dtype.categories)",
                                "signature": "__init__(self, values, categories=None, ordered=None, dtype=None, fastpath=False)"
                            },
                            {
                                "code": "@property\ndef categories(self):\n    \"\"\"\n    The categories of this categorical.\n\n    Setting assigns new values to each category (effectively a rename of\n    each individual category).\n\n    The assigned value has to be a list-like object. All items must be\n    unique and the number of items in the new categories must be the same\n    as the number of items in the old categories.\n\n    Assigning to `categories` is a inplace operation!\n\n    Raises\n    ------\n    ValueError\n        If the new categories do not validate as categories or if the\n        number of new categories is unequal the number of old categories\n\n    See Also\n    --------\n    rename_categories\n    reorder_categories\n    add_categories\n    remove_categories\n    remove_unused_categories\n    set_categories\n    \"\"\"\n    return self.dtype.categories",
                                "signature": "categories(self)"
                            },
                            {
                                "code": "@categories.setter\ndef categories(self, categories):\n    new_dtype = CategoricalDtype(categories, ordered=self.ordered)\n    if self.dtype.categories is not None and len(self.dtype.categories) != len(\n        new_dtype.categories\n    ):\n        raise ValueError(\n            \"new categories need to have the same number of \"\n            \"items as the old categories!\"\n        )\n    self._dtype = new_dtype",
                                "signature": "categories(self, categories)"
                            },
                            {
                                "code": "@property\ndef ordered(self) -> Ordered:\n    \"\"\"\n    Whether the categories have an ordered relationship.\n    \"\"\"\n    return self.dtype._ordered",
                                "signature": "ordered(self) -> Ordered"
                            },
                            {
                                "code": "@property\ndef dtype(self) -> CategoricalDtype:\n    \"\"\"\n    The :class:`~pandas.api.types.CategoricalDtype` for this instance\n    \"\"\"\n    return self._dtype",
                                "signature": "dtype(self) -> CategoricalDtype"
                            },
                            {
                                "code": "@property\ndef _ndarray_values(self) -> np.ndarray:\n    return self.codes",
                                "signature": "_ndarray_values(self) -> np.ndarray"
                            },
                            {
                                "code": "@property\ndef _constructor(self) -> Type[\"Categorical\"]:\n    return Categorical",
                                "signature": "_constructor(self) -> Type['Categorical']"
                            },
                            {
                                "code": "@classmethod\ndef _from_sequence(cls, scalars, dtype=None, copy=False):\n    return Categorical(scalars, dtype=dtype)",
                                "signature": "_from_sequence(cls, scalars, dtype=None, copy=False)"
                            },
                            {
                                "code": "def _formatter(self, boxed=False):\n    # Defer to CategoricalFormatter's formatter.\n    return None",
                                "signature": "_formatter(self, boxed=False)"
                            },
                            {
                                "code": "def copy(self) -> \"Categorical\":\n    \"\"\"\n    Copy constructor.\n    \"\"\"\n    return self._constructor(\n        values=self._codes.copy(), dtype=self.dtype, fastpath=True\n    )",
                                "signature": "copy(self) -> 'Categorical'"
                            },
                            {
                                "code": "def astype(self, dtype: Dtype, copy: bool = True) -> ArrayLike:\n    \"\"\"\n    Coerce this type to another dtype\n\n    Parameters\n    ----------\n    dtype : numpy dtype or pandas type\n    copy : bool, default True\n        By default, astype always returns a newly allocated object.\n        If copy is set to False and dtype is categorical, the original\n        object is returned.\n    \"\"\"\n    if is_categorical_dtype(dtype):\n        dtype = cast(Union[str, CategoricalDtype], dtype)\n\n        # GH 10696/18593\n        dtype = self.dtype.update_dtype(dtype)\n        self = self.copy() if copy else self\n        if dtype == self.dtype:\n            return self\n        return self._set_dtype(dtype)\n    return np.array(self, dtype=dtype, copy=copy)",
                                "signature": "astype(self, dtype: Dtype, copy: bool=True) -> ArrayLike"
                            },
                            {
                                "code": "@cache_readonly\ndef size(self) -> int:\n    \"\"\"\n    return the len of myself\n    \"\"\"\n    return self._codes.size",
                                "signature": "size(self) -> int"
                            },
                            {
                                "code": "@cache_readonly\ndef itemsize(self) -> int:\n    \"\"\"\n    return the size of a single category\n    \"\"\"\n    return self.categories.itemsize",
                                "signature": "itemsize(self) -> int"
                            },
                            {
                                "code": "def tolist(self) -> list:\n    \"\"\"\n    Return a list of the values.\n\n    These are each a scalar type, which is a Python scalar\n    (for str, int, float) or a pandas scalar\n    (for Timestamp/Timedelta/Interval/Period)\n    \"\"\"\n    return list(self)",
                                "signature": "tolist(self) -> list"
                            },
                            {
                                "code": "@property\ndef base(self) -> None:\n    \"\"\"\n    compat, we are always our own object\n    \"\"\"\n    return None",
                                "signature": "base(self) -> None"
                            },
                            {
                                "code": "@classmethod\ndef _from_inferred_categories(\n    cls, inferred_categories, inferred_codes, dtype, true_values=None\n):\n    \"\"\"\n    Construct a Categorical from inferred values.\n\n    For inferred categories (`dtype` is None) the categories are sorted.\n    For explicit `dtype`, the `inferred_categories` are cast to the\n    appropriate type.\n\n    Parameters\n    ----------\n    inferred_categories : Index\n    inferred_codes : Index\n    dtype : CategoricalDtype or 'category'\n    true_values : list, optional\n        If none are provided, the default ones are\n        \"True\", \"TRUE\", and \"true.\"\n\n    Returns\n    -------\n    Categorical\n    \"\"\"\n    from pandas import Index, to_numeric, to_datetime, to_timedelta\n\n    cats = Index(inferred_categories)\n    known_categories = (\n        isinstance(dtype, CategoricalDtype) and dtype.categories is not None\n    )\n\n    if known_categories:\n        # Convert to a specialized type with `dtype` if specified.\n        if dtype.categories.is_numeric():\n            cats = to_numeric(inferred_categories, errors=\"coerce\")\n        elif is_datetime64_dtype(dtype.categories):\n            cats = to_datetime(inferred_categories, errors=\"coerce\")\n        elif is_timedelta64_dtype(dtype.categories):\n            cats = to_timedelta(inferred_categories, errors=\"coerce\")\n        elif dtype.categories.is_boolean():\n            if true_values is None:\n                true_values = [\"True\", \"TRUE\", \"true\"]\n\n            cats = cats.isin(true_values)\n\n    if known_categories:\n        # Recode from observation order to dtype.categories order.\n        categories = dtype.categories\n        codes = _recode_for_categories(inferred_codes, cats, categories)\n    elif not cats.is_monotonic_increasing:\n        # Sort categories and recode for unknown categories.\n        unsorted = cats.copy()\n        categories = cats.sort_values()\n\n        codes = _recode_for_categories(inferred_codes, unsorted, categories)\n        dtype = CategoricalDtype(categories, ordered=False)\n    else:\n        dtype = CategoricalDtype(cats, ordered=False)\n        codes = inferred_codes\n\n    return cls(codes, dtype=dtype, fastpath=True)",
                                "signature": "_from_inferred_categories(cls, inferred_categories, inferred_codes, dtype, true_values=None)"
                            },
                            {
                                "code": "@classmethod\ndef from_codes(cls, codes, categories=None, ordered=None, dtype=None):\n    \"\"\"\n    Make a Categorical type from codes and categories or dtype.\n\n    This constructor is useful if you already have codes and\n    categories/dtype and so do not need the (computation intensive)\n    factorization step, which is usually done on the constructor.\n\n    If your data does not follow this convention, please use the normal\n    constructor.\n\n    Parameters\n    ----------\n    codes : array-like, integers\n        An integer array, where each integer points to a category in\n        categories or dtype.categories, or else is -1 for NaN.\n    categories : index-like, optional\n        The categories for the categorical. Items need to be unique.\n        If the categories are not given here, then they must be provided\n        in `dtype`.\n    ordered : bool, optional\n        Whether or not this categorical is treated as an ordered\n        categorical. If not given here or in `dtype`, the resulting\n        categorical will be unordered.\n    dtype : CategoricalDtype or the string \"category\", optional\n        If :class:`CategoricalDtype`, cannot be used together with\n        `categories` or `ordered`.\n\n        .. versionadded:: 0.24.0\n\n           When `dtype` is provided, neither `categories` nor `ordered`\n           should be provided.\n\n    Returns\n    -------\n    Categorical\n\n    Examples\n    --------\n    >>> dtype = pd.CategoricalDtype(['a', 'b'], ordered=True)\n    >>> pd.Categorical.from_codes(codes=[0, 1, 0, 1], dtype=dtype)\n    [a, b, a, b]\n    Categories (2, object): [a < b]\n    \"\"\"\n    dtype = CategoricalDtype._from_values_or_dtype(\n        categories=categories, ordered=ordered, dtype=dtype\n    )\n    if dtype.categories is None:\n        msg = (\n            \"The categories must be provided in 'categories' or \"\n            \"'dtype'. Both were None.\"\n        )\n        raise ValueError(msg)\n\n    codes = np.asarray(codes)  # #21767\n    if not is_integer_dtype(codes):\n        msg = \"codes need to be array-like integers\"\n        if is_float_dtype(codes):\n            icodes = codes.astype(\"i8\")\n            if (icodes == codes).all():\n                msg = None\n                codes = icodes\n                warn(\n                    (\n                        \"float codes will be disallowed in the future and \"\n                        \"raise a ValueError\"\n                    ),\n                    FutureWarning,\n                    stacklevel=2,\n                )\n        if msg:\n            raise ValueError(msg)\n\n    if len(codes) and (codes.max() >= len(dtype.categories) or codes.min() < -1):\n        raise ValueError(\"codes need to be between -1 and len(categories)-1\")\n\n    return cls(codes, dtype=dtype, fastpath=True)",
                                "signature": "from_codes(cls, codes, categories=None, ordered=None, dtype=None)"
                            },
                            {
                                "code": "def _get_codes(self):\n    \"\"\"\n    Get the codes.\n\n    Returns\n    -------\n    codes : integer array view\n        A non writable view of the `codes` array.\n    \"\"\"\n    v = self._codes.view()\n    v.flags.writeable = False\n    return v",
                                "signature": "_get_codes(self)"
                            },
                            {
                                "code": "def _set_codes(self, codes):\n    \"\"\"\n    Not settable by the user directly\n    \"\"\"\n    raise ValueError(\"cannot set Categorical codes directly\")",
                                "signature": "_set_codes(self, codes)"
                            },
                            {
                                "code": "def _set_categories(self, categories, fastpath=False):\n    \"\"\"\n    Sets new categories inplace\n\n    Parameters\n    ----------\n    fastpath : bool, default False\n       Don't perform validation of the categories for uniqueness or nulls\n\n    Examples\n    --------\n    >>> c = pd.Categorical(['a', 'b'])\n    >>> c\n    [a, b]\n    Categories (2, object): [a, b]\n\n    >>> c._set_categories(pd.Index(['a', 'c']))\n    >>> c\n    [a, c]\n    Categories (2, object): [a, c]\n    \"\"\"\n\n    if fastpath:\n        new_dtype = CategoricalDtype._from_fastpath(categories, self.ordered)\n    else:\n        new_dtype = CategoricalDtype(categories, ordered=self.ordered)\n    if (\n        not fastpath\n        and self.dtype.categories is not None\n        and len(new_dtype.categories) != len(self.dtype.categories)\n    ):\n        raise ValueError(\n            \"new categories need to have the same number of \"\n            \"items than the old categories!\"\n        )\n\n    self._dtype = new_dtype",
                                "signature": "_set_categories(self, categories, fastpath=False)"
                            },
                            {
                                "code": "def _set_dtype(self, dtype: CategoricalDtype) -> \"Categorical\":\n    \"\"\"\n    Internal method for directly updating the CategoricalDtype\n\n    Parameters\n    ----------\n    dtype : CategoricalDtype\n\n    Notes\n    -----\n    We don't do any validation here. It's assumed that the dtype is\n    a (valid) instance of `CategoricalDtype`.\n    \"\"\"\n    codes = _recode_for_categories(self.codes, self.categories, dtype.categories)\n    return type(self)(codes, dtype=dtype, fastpath=True)",
                                "signature": "_set_dtype(self, dtype: CategoricalDtype) -> 'Categorical'"
                            },
                            {
                                "code": "def set_ordered(self, value, inplace=False):\n    \"\"\"\n    Set the ordered attribute to the boolean value.\n\n    Parameters\n    ----------\n    value : bool\n       Set whether this categorical is ordered (True) or not (False).\n    inplace : bool, default False\n       Whether or not to set the ordered attribute in-place or return\n       a copy of this categorical with ordered set to the value.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    new_dtype = CategoricalDtype(self.categories, ordered=value)\n    cat = self if inplace else self.copy()\n    cat._dtype = new_dtype\n    if not inplace:\n        return cat",
                                "signature": "set_ordered(self, value, inplace=False)"
                            },
                            {
                                "code": "def as_ordered(self, inplace=False):\n    \"\"\"\n    Set the Categorical to be ordered.\n\n    Parameters\n    ----------\n    inplace : bool, default False\n       Whether or not to set the ordered attribute in-place or return\n       a copy of this categorical with ordered set to True.\n\n    Returns\n    -------\n    Categorical\n        Ordered Categorical.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    return self.set_ordered(True, inplace=inplace)",
                                "signature": "as_ordered(self, inplace=False)"
                            },
                            {
                                "code": "def as_unordered(self, inplace=False):\n    \"\"\"\n    Set the Categorical to be unordered.\n\n    Parameters\n    ----------\n    inplace : bool, default False\n       Whether or not to set the ordered attribute in-place or return\n       a copy of this categorical with ordered set to False.\n\n    Returns\n    -------\n    Categorical\n        Unordered Categorical.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    return self.set_ordered(False, inplace=inplace)",
                                "signature": "as_unordered(self, inplace=False)"
                            },
                            {
                                "code": "def set_categories(self, new_categories, ordered=None, rename=False, inplace=False):\n    \"\"\"\n    Set the categories to the specified new_categories.\n\n    `new_categories` can include new categories (which will result in\n    unused categories) or remove old categories (which results in values\n    set to NaN). If `rename==True`, the categories will simple be renamed\n    (less or more items than in old categories will result in values set to\n    NaN or in unused categories respectively).\n\n    This method can be used to perform more than one action of adding,\n    removing, and reordering simultaneously and is therefore faster than\n    performing the individual steps via the more specialised methods.\n\n    On the other hand this methods does not do checks (e.g., whether the\n    old categories are included in the new categories on a reorder), which\n    can result in surprising changes, for example when using special string\n    dtypes on python3, which does not considers a S1 string equal to a\n    single char python string.\n\n    Parameters\n    ----------\n    new_categories : Index-like\n       The categories in new order.\n    ordered : bool, default False\n       Whether or not the categorical is treated as a ordered categorical.\n       If not given, do not change the ordered information.\n    rename : bool, default False\n       Whether or not the new_categories should be considered as a rename\n       of the old categories or as reordered categories.\n    inplace : bool, default False\n       Whether or not to reorder the categories in-place or return a copy\n       of this categorical with reordered categories.\n\n    Returns\n    -------\n    Categorical with reordered categories or None if inplace.\n\n    Raises\n    ------\n    ValueError\n        If new_categories does not validate as categories\n\n    See Also\n    --------\n    rename_categories\n    reorder_categories\n    add_categories\n    remove_categories\n    remove_unused_categories\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if ordered is None:\n        ordered = self.dtype._ordered\n    new_dtype = CategoricalDtype(new_categories, ordered=ordered)\n\n    cat = self if inplace else self.copy()\n    if rename:\n        if cat.dtype.categories is not None and len(new_dtype.categories) < len(\n            cat.dtype.categories\n        ):\n            # remove all _codes which are larger and set to -1/NaN\n            cat._codes[cat._codes >= len(new_dtype.categories)] = -1\n    else:\n        codes = _recode_for_categories(\n            cat.codes, cat.categories, new_dtype.categories\n        )\n        cat._codes = codes\n    cat._dtype = new_dtype\n\n    if not inplace:\n        return cat",
                                "signature": "set_categories(self, new_categories, ordered=None, rename=False, inplace=False)"
                            },
                            {
                                "code": "def rename_categories(self, new_categories, inplace=False):\n    \"\"\"\n    Rename categories.\n\n    Parameters\n    ----------\n    new_categories : list-like, dict-like or callable\n\n       * list-like: all items must be unique and the number of items in\n         the new categories must match the existing number of categories.\n\n       * dict-like: specifies a mapping from\n         old categories to new. Categories not contained in the mapping\n         are passed through and extra categories in the mapping are\n         ignored.\n\n         .. versionadded:: 0.21.0\n\n       * callable : a callable that is called on all items in the old\n         categories and whose return values comprise the new categories.\n\n         .. versionadded:: 0.23.0\n\n    inplace : bool, default False\n       Whether or not to rename the categories inplace or return a copy of\n       this categorical with renamed categories.\n\n    Returns\n    -------\n    cat : Categorical or None\n       With ``inplace=False``, the new categorical is returned.\n       With ``inplace=True``, there is no return value.\n\n    Raises\n    ------\n    ValueError\n        If new categories are list-like and do not have the same number of\n        items than the current categories or do not validate as categories\n\n    See Also\n    --------\n    reorder_categories\n    add_categories\n    remove_categories\n    remove_unused_categories\n    set_categories\n\n    Examples\n    --------\n    >>> c = pd.Categorical(['a', 'a', 'b'])\n    >>> c.rename_categories([0, 1])\n    [0, 0, 1]\n    Categories (2, int64): [0, 1]\n\n    For dict-like ``new_categories``, extra keys are ignored and\n    categories not in the dictionary are passed through\n\n    >>> c.rename_categories({'a': 'A', 'c': 'C'})\n    [A, A, b]\n    Categories (2, object): [A, b]\n\n    You may also provide a callable to create the new categories\n\n    >>> c.rename_categories(lambda x: x.upper())\n    [A, A, B]\n    Categories (2, object): [A, B]\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    cat = self if inplace else self.copy()\n\n    if is_dict_like(new_categories):\n        cat.categories = [new_categories.get(item, item) for item in cat.categories]\n    elif callable(new_categories):\n        cat.categories = [new_categories(item) for item in cat.categories]\n    else:\n        cat.categories = new_categories\n    if not inplace:\n        return cat",
                                "signature": "rename_categories(self, new_categories, inplace=False)"
                            },
                            {
                                "code": "def reorder_categories(self, new_categories, ordered=None, inplace=False):\n    \"\"\"\n    Reorder categories as specified in new_categories.\n\n    `new_categories` need to include all old categories and no new category\n    items.\n\n    Parameters\n    ----------\n    new_categories : Index-like\n       The categories in new order.\n    ordered : bool, optional\n       Whether or not the categorical is treated as a ordered categorical.\n       If not given, do not change the ordered information.\n    inplace : bool, default False\n       Whether or not to reorder the categories inplace or return a copy of\n       this categorical with reordered categories.\n\n    Returns\n    -------\n    cat : Categorical with reordered categories or None if inplace.\n\n    Raises\n    ------\n    ValueError\n        If the new categories do not contain all old category items or any\n        new ones\n\n    See Also\n    --------\n    rename_categories\n    add_categories\n    remove_categories\n    remove_unused_categories\n    set_categories\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if set(self.dtype.categories) != set(new_categories):\n        raise ValueError(\n            \"items in new_categories are not the same as in old categories\"\n        )\n    return self.set_categories(new_categories, ordered=ordered, inplace=inplace)",
                                "signature": "reorder_categories(self, new_categories, ordered=None, inplace=False)"
                            },
                            {
                                "code": "def add_categories(self, new_categories, inplace=False):\n    \"\"\"\n    Add new categories.\n\n    `new_categories` will be included at the last/highest place in the\n    categories and will be unused directly after this call.\n\n    Parameters\n    ----------\n    new_categories : category or list-like of category\n       The new categories to be included.\n    inplace : bool, default False\n       Whether or not to add the categories inplace or return a copy of\n       this categorical with added categories.\n\n    Returns\n    -------\n    cat : Categorical with new categories added or None if inplace.\n\n    Raises\n    ------\n    ValueError\n        If the new categories include old categories or do not validate as\n        categories\n\n    See Also\n    --------\n    rename_categories\n    reorder_categories\n    remove_categories\n    remove_unused_categories\n    set_categories\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if not is_list_like(new_categories):\n        new_categories = [new_categories]\n    already_included = set(new_categories) & set(self.dtype.categories)\n    if len(already_included) != 0:\n        msg = (\n            \"new categories must not include old categories: \"\n            \"{already_included!s}\"\n        )\n        raise ValueError(msg.format(already_included=already_included))\n    new_categories = list(self.dtype.categories) + list(new_categories)\n    new_dtype = CategoricalDtype(new_categories, self.ordered)\n\n    cat = self if inplace else self.copy()\n    cat._dtype = new_dtype\n    cat._codes = coerce_indexer_dtype(cat._codes, new_dtype.categories)\n    if not inplace:\n        return cat",
                                "signature": "add_categories(self, new_categories, inplace=False)"
                            },
                            {
                                "code": "def remove_categories(self, removals, inplace=False):\n    \"\"\"\n    Remove the specified categories.\n\n    `removals` must be included in the old categories. Values which were in\n    the removed categories will be set to NaN\n\n    Parameters\n    ----------\n    removals : category or list of categories\n       The categories which should be removed.\n    inplace : bool, default False\n       Whether or not to remove the categories inplace or return a copy of\n       this categorical with removed categories.\n\n    Returns\n    -------\n    cat : Categorical with removed categories or None if inplace.\n\n    Raises\n    ------\n    ValueError\n        If the removals are not contained in the categories\n\n    See Also\n    --------\n    rename_categories\n    reorder_categories\n    add_categories\n    remove_unused_categories\n    set_categories\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if not is_list_like(removals):\n        removals = [removals]\n\n    removal_set = set(list(removals))\n    not_included = removal_set - set(self.dtype.categories)\n    new_categories = [c for c in self.dtype.categories if c not in removal_set]\n\n    # GH 10156\n    if any(isna(removals)):\n        not_included = [x for x in not_included if notna(x)]\n        new_categories = [x for x in new_categories if notna(x)]\n\n    if len(not_included) != 0:\n        msg = \"removals must all be in old categories: {not_included!s}\"\n        raise ValueError(msg.format(not_included=not_included))\n\n    return self.set_categories(\n        new_categories, ordered=self.ordered, rename=False, inplace=inplace\n    )",
                                "signature": "remove_categories(self, removals, inplace=False)"
                            },
                            {
                                "code": "def remove_unused_categories(self, inplace=False):\n    \"\"\"\n    Remove categories which are not used.\n\n    Parameters\n    ----------\n    inplace : bool, default False\n       Whether or not to drop unused categories inplace or return a copy of\n       this categorical with unused categories dropped.\n\n    Returns\n    -------\n    cat : Categorical with unused categories dropped or None if inplace.\n\n    See Also\n    --------\n    rename_categories\n    reorder_categories\n    add_categories\n    remove_categories\n    set_categories\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    cat = self if inplace else self.copy()\n    idx, inv = np.unique(cat._codes, return_inverse=True)\n\n    if idx.size != 0 and idx[0] == -1:  # na sentinel\n        idx, inv = idx[1:], inv - 1\n\n    new_categories = cat.dtype.categories.take(idx)\n    new_dtype = CategoricalDtype._from_fastpath(\n        new_categories, ordered=self.ordered\n    )\n    cat._dtype = new_dtype\n    cat._codes = coerce_indexer_dtype(inv, new_dtype.categories)\n\n    if not inplace:\n        return cat",
                                "signature": "remove_unused_categories(self, inplace=False)"
                            },
                            {
                                "code": "def map(self, mapper):\n    \"\"\"\n    Map categories using input correspondence (dict, Series, or function).\n\n    Maps the categories to new categories. If the mapping correspondence is\n    one-to-one the result is a :class:`~pandas.Categorical` which has the\n    same order property as the original, otherwise a :class:`~pandas.Index`\n    is returned. NaN values are unaffected.\n\n    If a `dict` or :class:`~pandas.Series` is used any unmapped category is\n    mapped to `NaN`. Note that if this happens an :class:`~pandas.Index`\n    will be returned.\n\n    Parameters\n    ----------\n    mapper : function, dict, or Series\n        Mapping correspondence.\n\n    Returns\n    -------\n    pandas.Categorical or pandas.Index\n        Mapped categorical.\n\n    See Also\n    --------\n    CategoricalIndex.map : Apply a mapping correspondence on a\n        :class:`~pandas.CategoricalIndex`.\n    Index.map : Apply a mapping correspondence on an\n        :class:`~pandas.Index`.\n    Series.map : Apply a mapping correspondence on a\n        :class:`~pandas.Series`.\n    Series.apply : Apply more complex functions on a\n        :class:`~pandas.Series`.\n\n    Examples\n    --------\n    >>> cat = pd.Categorical(['a', 'b', 'c'])\n    >>> cat\n    [a, b, c]\n    Categories (3, object): [a, b, c]\n    >>> cat.map(lambda x: x.upper())\n    [A, B, C]\n    Categories (3, object): [A, B, C]\n    >>> cat.map({'a': 'first', 'b': 'second', 'c': 'third'})\n    [first, second, third]\n    Categories (3, object): [first, second, third]\n\n    If the mapping is one-to-one the ordering of the categories is\n    preserved:\n\n    >>> cat = pd.Categorical(['a', 'b', 'c'], ordered=True)\n    >>> cat\n    [a, b, c]\n    Categories (3, object): [a < b < c]\n    >>> cat.map({'a': 3, 'b': 2, 'c': 1})\n    [3, 2, 1]\n    Categories (3, int64): [3 < 2 < 1]\n\n    If the mapping is not one-to-one an :class:`~pandas.Index` is returned:\n\n    >>> cat.map({'a': 'first', 'b': 'second', 'c': 'first'})\n    Index(['first', 'second', 'first'], dtype='object')\n\n    If a `dict` is used, all unmapped categories are mapped to `NaN` and\n    the result is an :class:`~pandas.Index`:\n\n    >>> cat.map({'a': 'first', 'b': 'second'})\n    Index(['first', 'second', nan], dtype='object')\n    \"\"\"\n    new_categories = self.categories.map(mapper)\n    try:\n        return self.from_codes(\n            self._codes.copy(), categories=new_categories, ordered=self.ordered\n        )\n    except ValueError:\n        # NA values are represented in self._codes with -1\n        # np.take causes NA values to take final element in new_categories\n        if np.any(self._codes == -1):\n            new_categories = new_categories.insert(len(new_categories), np.nan)\n        return np.take(new_categories, self._codes)",
                                "signature": "map(self, mapper)"
                            },
                            {
                                "code": "@property\ndef shape(self):\n    \"\"\"\n    Shape of the Categorical.\n\n    For internal compatibility with numpy arrays.\n\n    Returns\n    -------\n    shape : tuple\n    \"\"\"\n\n    return tuple([len(self._codes)])",
                                "signature": "shape(self)"
                            },
                            {
                                "code": "def shift(self, periods, fill_value=None):\n    \"\"\"\n    Shift Categorical by desired number of periods.\n\n    Parameters\n    ----------\n    periods : int\n        Number of periods to move, can be positive or negative\n    fill_value : object, optional\n        The scalar value to use for newly introduced missing values.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    shifted : Categorical\n    \"\"\"\n    # since categoricals always have ndim == 1, an axis parameter\n    # doesn't make any sense here.\n    codes = self.codes\n    if codes.ndim > 1:\n        raise NotImplementedError(\"Categorical with ndim > 1.\")\n    if np.prod(codes.shape) and (periods != 0):\n        codes = np.roll(codes, ensure_platform_int(periods), axis=0)\n        if isna(fill_value):\n            fill_value = -1\n        elif fill_value in self.categories:\n            fill_value = self.categories.get_loc(fill_value)\n        else:\n            raise ValueError(\n                \"'fill_value={}' is not present \"\n                \"in this Categorical's \"\n                \"categories\".format(fill_value)\n            )\n        if periods > 0:\n            codes[:periods] = fill_value\n        else:\n            codes[periods:] = fill_value\n\n    return self.from_codes(codes, dtype=self.dtype)",
                                "signature": "shift(self, periods, fill_value=None)"
                            },
                            {
                                "code": "def __array__(self, dtype=None):\n    \"\"\"\n    The numpy array interface.\n\n    Returns\n    -------\n    numpy.array\n        A numpy array of either the specified dtype or,\n        if dtype==None (default), the same dtype as\n        categorical.categories.dtype.\n    \"\"\"\n    ret = take_1d(self.categories.values, self._codes)\n    if dtype and not is_dtype_equal(dtype, self.categories.dtype):\n        return np.asarray(ret, dtype)\n    if is_extension_array_dtype(ret):\n        # When we're a Categorical[ExtensionArray], like Interval,\n        # we need to ensure __array__ get's all the way to an\n        # ndarray.\n        ret = np.asarray(ret)\n    return ret",
                                "signature": "__array__(self, dtype=None)"
                            },
                            {
                                "code": "def __array_ufunc__(self, ufunc, method, *inputs, **kwargs):\n    # for binary ops, use our custom dunder methods\n    result = ops.maybe_dispatch_ufunc_to_dunder_op(\n        self, ufunc, method, *inputs, **kwargs\n    )\n    if result is not NotImplemented:\n        return result\n\n    # for all other cases, raise for now (similarly as what happens in\n    # Series.__array_prepare__)\n    raise TypeError(\n        \"Object with dtype {dtype} cannot perform \"\n        \"the numpy op {op}\".format(dtype=self.dtype, op=ufunc.__name__)\n    )",
                                "signature": "__array_ufunc__(self, ufunc, method, *inputs, **kwargs)"
                            },
                            {
                                "code": "def __setstate__(self, state):\n    \"\"\"Necessary for making this object picklable\"\"\"\n    if not isinstance(state, dict):\n        raise Exception(\"invalid pickle state\")\n\n    # Provide compatibility with pre-0.15.0 Categoricals.\n    if \"_categories\" not in state and \"_levels\" in state:\n        state[\"_categories\"] = self.dtype.validate_categories(state.pop(\"_levels\"))\n    if \"_codes\" not in state and \"labels\" in state:\n        state[\"_codes\"] = coerce_indexer_dtype(\n            state.pop(\"labels\"), state[\"_categories\"]\n        )\n\n    # 0.16.0 ordered change\n    if \"_ordered\" not in state:\n\n        # >=15.0 < 0.16.0\n        if \"ordered\" in state:\n            state[\"_ordered\"] = state.pop(\"ordered\")\n        else:\n            state[\"_ordered\"] = False\n\n    # 0.21.0 CategoricalDtype change\n    if \"_dtype\" not in state:\n        state[\"_dtype\"] = CategoricalDtype(state[\"_categories\"], state[\"_ordered\"])\n\n    for k, v in state.items():\n        setattr(self, k, v)",
                                "signature": "__setstate__(self, state)"
                            },
                            {
                                "code": "@property\ndef T(self):\n    \"\"\"\n    Return transposed numpy array.\n    \"\"\"\n    return self",
                                "signature": "T(self)"
                            },
                            {
                                "code": "@property\ndef nbytes(self):\n    return self._codes.nbytes + self.dtype.categories.values.nbytes",
                                "signature": "nbytes(self)"
                            },
                            {
                                "code": "def memory_usage(self, deep=False):\n    \"\"\"\n    Memory usage of my values\n\n    Parameters\n    ----------\n    deep : bool\n        Introspect the data deeply, interrogate\n        `object` dtypes for system-level memory consumption\n\n    Returns\n    -------\n    bytes used\n\n    Notes\n    -----\n    Memory usage does not include memory consumed by elements that\n    are not components of the array if deep=False\n\n    See Also\n    --------\n    numpy.ndarray.nbytes\n    \"\"\"\n    return self._codes.nbytes + self.dtype.categories.memory_usage(deep=deep)",
                                "signature": "memory_usage(self, deep=False)"
                            },
                            {
                                "code": "@Substitution(klass=\"Categorical\")\n@Appender(_shared_docs[\"searchsorted\"])\ndef searchsorted(self, value, side=\"left\", sorter=None):\n    if not self.ordered:\n        raise ValueError(\n            \"Categorical not ordered\\nyou can use \"\n            \".as_ordered() to change the Categorical to an \"\n            \"ordered one\"\n        )\n\n    from pandas.core.series import Series\n\n    codes = _get_codes_for_values(Series(value).values, self.categories)\n    if -1 in codes:\n        raise KeyError(\"Value(s) to be inserted must be in categories.\")\n\n    codes = codes[0] if is_scalar(value) else codes\n\n    return self.codes.searchsorted(codes, side=side, sorter=sorter)",
                                "signature": "searchsorted(self, value, side='left', sorter=None)"
                            },
                            {
                                "code": "def isna(self):\n    \"\"\"\n    Detect missing values\n\n    Missing values (-1 in .codes) are detected.\n\n    Returns\n    -------\n    a boolean array of whether my values are null\n\n    See Also\n    --------\n    isna : Top-level isna.\n    isnull : Alias of isna.\n    Categorical.notna : Boolean inverse of Categorical.isna.\n\n    \"\"\"\n\n    ret = self._codes == -1\n    return ret",
                                "signature": "isna(self)"
                            },
                            {
                                "code": "def notna(self):\n    \"\"\"\n    Inverse of isna\n\n    Both missing values (-1 in .codes) and NA as a category are detected as\n    null.\n\n    Returns\n    -------\n    a boolean array of whether my values are not null\n\n    See Also\n    --------\n    notna : Top-level notna.\n    notnull : Alias of notna.\n    Categorical.isna : Boolean inverse of Categorical.notna.\n\n    \"\"\"\n    return ~self.isna()",
                                "signature": "notna(self)"
                            },
                            {
                                "code": "def put(self, *args, **kwargs):\n    \"\"\"\n    Replace specific elements in the Categorical with given values.\n    \"\"\"\n    raise NotImplementedError((\"'put' is not yet implemented for Categorical\"))",
                                "signature": "put(self, *args, **kwargs)"
                            },
                            {
                                "code": "def dropna(self):\n    \"\"\"\n    Return the Categorical without null values.\n\n    Missing values (-1 in .codes) are detected.\n\n    Returns\n    -------\n    valid : Categorical\n    \"\"\"\n    result = self[self.notna()]\n\n    return result",
                                "signature": "dropna(self)"
                            },
                            {
                                "code": "def value_counts(self, dropna=True):\n    \"\"\"\n    Return a Series containing counts of each category.\n\n    Every category will have an entry, even those with a count of 0.\n\n    Parameters\n    ----------\n    dropna : bool, default True\n        Don't include counts of NaN.\n\n    Returns\n    -------\n    counts : Series\n\n    See Also\n    --------\n    Series.value_counts\n    \"\"\"\n    from pandas import Series, CategoricalIndex\n\n    code, cat = self._codes, self.categories\n    ncat, mask = len(cat), 0 <= code\n    ix, clean = np.arange(ncat), mask.all()\n\n    if dropna or clean:\n        obs = code if clean else code[mask]\n        count = np.bincount(obs, minlength=ncat or 0)\n    else:\n        count = np.bincount(np.where(mask, code, ncat))\n        ix = np.append(ix, -1)\n\n    ix = self._constructor(ix, dtype=self.dtype, fastpath=True)\n\n    return Series(count, index=CategoricalIndex(ix), dtype=\"int64\")",
                                "signature": "value_counts(self, dropna=True)"
                            },
                            {
                                "code": "def get_values(self):\n    \"\"\"\n    Return the values.\n\n    .. deprecated:: 0.25.0\n\n    For internal compatibility with pandas formatting.\n\n    Returns\n    -------\n    numpy.array\n        A numpy array of the same dtype as categorical.categories.dtype or\n        Index if datetime / periods.\n    \"\"\"\n    warn(\n        \"The 'get_values' method is deprecated and will be removed in a \"\n        \"future version\",\n        FutureWarning,\n        stacklevel=2,\n    )\n    return self._internal_get_values()",
                                "signature": "get_values(self)"
                            },
                            {
                                "code": "def _internal_get_values(self):\n    # if we are a datetime and period index, return Index to keep metadata\n    if is_datetimelike(self.categories):\n        return self.categories.take(self._codes, fill_value=np.nan)\n    elif is_integer_dtype(self.categories) and -1 in self._codes:\n        return self.categories.astype(\"object\").take(self._codes, fill_value=np.nan)\n    return np.array(self)",
                                "signature": "_internal_get_values(self)"
                            },
                            {
                                "code": "def check_for_ordered(self, op):\n    \"\"\" assert that we are ordered \"\"\"\n    if not self.ordered:\n        raise TypeError(\n            \"Categorical is not ordered for operation {op}\\n\"\n            \"you can use .as_ordered() to change the \"\n            \"Categorical to an ordered one\\n\".format(op=op)\n        )",
                                "signature": "check_for_ordered(self, op)"
                            },
                            {
                                "code": "def _values_for_argsort(self):\n    return self._codes.copy()",
                                "signature": "_values_for_argsort(self)"
                            },
                            {
                                "code": "def argsort(self, ascending=True, kind=\"quicksort\", *args, **kwargs):\n    \"\"\"\n    Return the indices that would sort the Categorical.\n\n    .. versionchanged:: 0.25.0\n\n       Changed to sort missing values at the end.\n\n    Parameters\n    ----------\n    ascending : bool, default True\n        Whether the indices should result in an ascending\n        or descending sort.\n    kind : {'quicksort', 'mergesort', 'heapsort'}, optional\n        Sorting algorithm.\n    *args, **kwargs:\n        passed through to :func:`numpy.argsort`.\n\n    Returns\n    -------\n    numpy.array\n\n    See Also\n    --------\n    numpy.ndarray.argsort\n\n    Notes\n    -----\n    While an ordering is applied to the category values, arg-sorting\n    in this context refers more to organizing and grouping together\n    based on matching category values. Thus, this function can be\n    called on an unordered Categorical instance unlike the functions\n    'Categorical.min' and 'Categorical.max'.\n\n    Examples\n    --------\n    >>> pd.Categorical(['b', 'b', 'a', 'c']).argsort()\n    array([2, 0, 1, 3])\n\n    >>> cat = pd.Categorical(['b', 'b', 'a', 'c'],\n    ...                      categories=['c', 'b', 'a'],\n    ...                      ordered=True)\n    >>> cat.argsort()\n    array([3, 0, 1, 2])\n\n    Missing values are placed at the end\n\n    >>> cat = pd.Categorical([2, None, 1])\n    >>> cat.argsort()\n    array([2, 0, 1])\n    \"\"\"\n    return super().argsort(ascending=ascending, kind=kind, *args, **kwargs)",
                                "signature": "argsort(self, ascending=True, kind='quicksort', *args, **kwargs)"
                            },
                            {
                                "code": "def sort_values(self, inplace=False, ascending=True, na_position=\"last\"):\n    \"\"\"\n    Sort the Categorical by category value returning a new\n    Categorical by default.\n\n    While an ordering is applied to the category values, sorting in this\n    context refers more to organizing and grouping together based on\n    matching category values. Thus, this function can be called on an\n    unordered Categorical instance unlike the functions 'Categorical.min'\n    and 'Categorical.max'.\n\n    Parameters\n    ----------\n    inplace : bool, default False\n        Do operation in place.\n    ascending : bool, default True\n        Order ascending. Passing False orders descending. The\n        ordering parameter provides the method by which the\n        category values are organized.\n    na_position : {'first', 'last'} (optional, default='last')\n        'first' puts NaNs at the beginning\n        'last' puts NaNs at the end\n\n    Returns\n    -------\n    Categorical or None\n\n    See Also\n    --------\n    Categorical.sort\n    Series.sort_values\n\n    Examples\n    --------\n    >>> c = pd.Categorical([1, 2, 2, 1, 5])\n    >>> c\n    [1, 2, 2, 1, 5]\n    Categories (3, int64): [1, 2, 5]\n    >>> c.sort_values()\n    [1, 1, 2, 2, 5]\n    Categories (3, int64): [1, 2, 5]\n    >>> c.sort_values(ascending=False)\n    [5, 2, 2, 1, 1]\n    Categories (3, int64): [1, 2, 5]\n\n    Inplace sorting can be done as well:\n\n    >>> c.sort_values(inplace=True)\n    >>> c\n    [1, 1, 2, 2, 5]\n    Categories (3, int64): [1, 2, 5]\n    >>>\n    >>> c = pd.Categorical([1, 2, 2, 1, 5])\n\n    'sort_values' behaviour with NaNs. Note that 'na_position'\n    is independent of the 'ascending' parameter:\n\n    >>> c = pd.Categorical([np.nan, 2, 2, np.nan, 5])\n    >>> c\n    [NaN, 2.0, 2.0, NaN, 5.0]\n    Categories (2, int64): [2, 5]\n    >>> c.sort_values()\n    [2.0, 2.0, 5.0, NaN, NaN]\n    Categories (2, int64): [2, 5]\n    >>> c.sort_values(ascending=False)\n    [5.0, 2.0, 2.0, NaN, NaN]\n    Categories (2, int64): [2, 5]\n    >>> c.sort_values(na_position='first')\n    [NaN, NaN, 2.0, 2.0, 5.0]\n    Categories (2, int64): [2, 5]\n    >>> c.sort_values(ascending=False, na_position='first')\n    [NaN, NaN, 5.0, 2.0, 2.0]\n    Categories (2, int64): [2, 5]\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if na_position not in [\"last\", \"first\"]:\n        msg = \"invalid na_position: {na_position!r}\"\n        raise ValueError(msg.format(na_position=na_position))\n\n    sorted_idx = nargsort(self, ascending=ascending, na_position=na_position)\n\n    if inplace:\n        self._codes = self._codes[sorted_idx]\n    else:\n        return self._constructor(\n            values=self._codes[sorted_idx], dtype=self.dtype, fastpath=True\n        )",
                                "signature": "sort_values(self, inplace=False, ascending=True, na_position='last')"
                            },
                            {
                                "code": "def _values_for_rank(self):\n    \"\"\"\n    For correctly ranking ordered categorical data. See GH#15420\n\n    Ordered categorical data should be ranked on the basis of\n    codes with -1 translated to NaN.\n\n    Returns\n    -------\n    numpy.array\n\n    \"\"\"\n    from pandas import Series\n\n    if self.ordered:\n        values = self.codes\n        mask = values == -1\n        if mask.any():\n            values = values.astype(\"float64\")\n            values[mask] = np.nan\n    elif self.categories.is_numeric():\n        values = np.array(self)\n    else:\n        #  reorder the categories (so rank can use the float codes)\n        #  instead of passing an object array to rank\n        values = np.array(\n            self.rename_categories(Series(self.categories).rank().values)\n        )\n    return values",
                                "signature": "_values_for_rank(self)"
                            },
                            {
                                "code": "def ravel(self, order=\"C\"):\n    \"\"\"\n    Return a flattened (numpy) array.\n\n    For internal compatibility with numpy arrays.\n\n    Returns\n    -------\n    numpy.array\n    \"\"\"\n    warn(\n        \"Categorical.ravel will return a Categorical object instead \"\n        \"of an ndarray in a future version.\",\n        FutureWarning,\n        stacklevel=2,\n    )\n    return np.array(self)",
                                "signature": "ravel(self, order='C')"
                            },
                            {
                                "code": "def view(self, dtype=None):\n    if dtype is not None:\n        raise NotImplementedError(dtype)\n    return self._constructor(values=self._codes, dtype=self.dtype, fastpath=True)",
                                "signature": "view(self, dtype=None)"
                            },
                            {
                                "code": "def to_dense(self):\n    \"\"\"\n    Return my 'dense' representation\n\n    For internal compatibility with numpy arrays.\n\n    Returns\n    -------\n    dense : array\n    \"\"\"\n    return np.asarray(self)",
                                "signature": "to_dense(self)"
                            },
                            {
                                "code": "@deprecate_kwarg(old_arg_name=\"fill_value\", new_arg_name=\"value\")\ndef fillna(self, value=None, method=None, limit=None):\n    \"\"\"\n    Fill NA/NaN values using the specified method.\n\n    Parameters\n    ----------\n    value : scalar, dict, Series\n        If a scalar value is passed it is used to fill all missing values.\n        Alternatively, a Series or dict can be used to fill in different\n        values for each index. The value should not be a list. The\n        value(s) passed should either be in the categories or should be\n        NaN.\n    method : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n        Method to use for filling holes in reindexed Series\n        pad / ffill: propagate last valid observation forward to next valid\n        backfill / bfill: use NEXT valid observation to fill gap\n    limit : int, default None\n        (Not implemented yet for Categorical!)\n        If method is specified, this is the maximum number of consecutive\n        NaN values to forward/backward fill. In other words, if there is\n        a gap with more than this number of consecutive NaNs, it will only\n        be partially filled. If method is not specified, this is the\n        maximum number of entries along the entire axis where NaNs will be\n        filled.\n\n    Returns\n    -------\n    filled : Categorical with NA/NaN filled\n    \"\"\"\n    value, method = validate_fillna_kwargs(\n        value, method, validate_scalar_dict_value=False\n    )\n\n    if value is None:\n        value = np.nan\n    if limit is not None:\n        raise NotImplementedError(\n            \"specifying a limit for fillna has not been implemented yet\"\n        )\n\n    codes = self._codes\n\n    # pad / bfill\n    if method is not None:\n\n        values = self.to_dense().reshape(-1, len(self))\n        values = interpolate_2d(values, method, 0, None, value).astype(\n            self.categories.dtype\n        )[0]\n        codes = _get_codes_for_values(values, self.categories)\n\n    else:\n\n        # If value is a dict or a Series (a dict value has already\n        # been converted to a Series)\n        if isinstance(value, ABCSeries):\n            if not value[~value.isin(self.categories)].isna().all():\n                raise ValueError(\"fill value must be in categories\")\n\n            values_codes = _get_codes_for_values(value, self.categories)\n            indexer = np.where(values_codes != -1)\n            codes[indexer] = values_codes[values_codes != -1]\n\n        # If value is not a dict or Series it should be a scalar\n        elif is_hashable(value):\n            if not isna(value) and value not in self.categories:\n                raise ValueError(\"fill value must be in categories\")\n\n            mask = codes == -1\n            if mask.any():\n                codes = codes.copy()\n                if isna(value):\n                    codes[mask] = -1\n                else:\n                    codes[mask] = self.categories.get_loc(value)\n\n        else:\n            raise TypeError(\n                '\"value\" parameter must be a scalar, dict '\n                \"or Series, but you passed a \"\n                '\"{0}\"'.format(type(value).__name__)\n            )\n\n    return self._constructor(codes, dtype=self.dtype, fastpath=True)",
                                "signature": "fillna(self, value=None, method=None, limit=None)"
                            },
                            {
                                "code": "def take_nd(self, indexer, allow_fill=None, fill_value=None):\n    \"\"\"\n    Take elements from the Categorical.\n\n    Parameters\n    ----------\n    indexer : sequence of int\n        The indices in `self` to take. The meaning of negative values in\n        `indexer` depends on the value of `allow_fill`.\n    allow_fill : bool, default None\n        How to handle negative values in `indexer`.\n\n        * False: negative values in `indices` indicate positional indices\n          from the right. This is similar to\n          :func:`numpy.take`.\n\n        * True: negative values in `indices` indicate missing values\n          (the default). These values are set to `fill_value`. Any other\n          other negative values raise a ``ValueError``.\n\n        .. versionchanged:: 0.23.0\n\n           Deprecated the default value of `allow_fill`. The deprecated\n           default is ``True``. In the future, this will change to\n           ``False``.\n\n    fill_value : object\n        The value to use for `indices` that are missing (-1), when\n        ``allow_fill=True``. This should be the category, i.e. a value\n        in ``self.categories``, not a code.\n\n    Returns\n    -------\n    Categorical\n        This Categorical will have the same categories and ordered as\n        `self`.\n\n    See Also\n    --------\n    Series.take : Similar method for Series.\n    numpy.ndarray.take : Similar method for NumPy arrays.\n\n    Examples\n    --------\n    >>> cat = pd.Categorical(['a', 'a', 'b'])\n    >>> cat\n    [a, a, b]\n    Categories (2, object): [a, b]\n\n    Specify ``allow_fill==False`` to have negative indices mean indexing\n    from the right.\n\n    >>> cat.take([0, -1, -2], allow_fill=False)\n    [a, b, a]\n    Categories (2, object): [a, b]\n\n    With ``allow_fill=True``, indices equal to ``-1`` mean \"missing\"\n    values that should be filled with the `fill_value`, which is\n    ``np.nan`` by default.\n\n    >>> cat.take([0, -1, -1], allow_fill=True)\n    [a, NaN, NaN]\n    Categories (2, object): [a, b]\n\n    The fill value can be specified.\n\n    >>> cat.take([0, -1, -1], allow_fill=True, fill_value='a')\n    [a, a, a]\n    Categories (3, object): [a, b]\n\n    Specifying a fill value that's not in ``self.categories``\n    will raise a ``TypeError``.\n    \"\"\"\n    indexer = np.asarray(indexer, dtype=np.intp)\n    if allow_fill is None:\n        if (indexer < 0).any():\n            warn(_take_msg, FutureWarning, stacklevel=2)\n            allow_fill = True\n\n    dtype = self.dtype\n\n    if isna(fill_value):\n        fill_value = -1\n    elif allow_fill:\n        # convert user-provided `fill_value` to codes\n        if fill_value in self.categories:\n            fill_value = self.categories.get_loc(fill_value)\n        else:\n            msg = \"'fill_value' ('{}') is not in this Categorical's categories.\"\n            raise TypeError(msg.format(fill_value))\n\n    codes = take(self._codes, indexer, allow_fill=allow_fill, fill_value=fill_value)\n    result = type(self).from_codes(codes, dtype=dtype)\n    return result",
                                "signature": "take_nd(self, indexer, allow_fill=None, fill_value=None)"
                            },
                            {
                                "code": "def __len__(self):\n    \"\"\"\n    The length of this Categorical.\n    \"\"\"\n    return len(self._codes)",
                                "signature": "__len__(self)"
                            },
                            {
                                "code": "def __iter__(self):\n    \"\"\"\n    Returns an Iterator over the values of this Categorical.\n    \"\"\"\n    return iter(self._internal_get_values().tolist())",
                                "signature": "__iter__(self)"
                            },
                            {
                                "code": "def __contains__(self, key):\n    \"\"\"\n    Returns True if `key` is in this Categorical.\n    \"\"\"\n    # if key is a NaN, check if any NaN is in self.\n    if is_scalar(key) and isna(key):\n        return self.isna().any()\n\n    return contains(self, key, container=self._codes)",
                                "signature": "__contains__(self, key)"
                            },
                            {
                                "code": "def _tidy_repr(self, max_vals=10, footer=True):\n    \"\"\" a short repr displaying only max_vals and an optional (but default\n    footer)\n    \"\"\"\n    num = max_vals // 2\n    head = self[:num]._get_repr(length=False, footer=False)\n    tail = self[-(max_vals - num) :]._get_repr(length=False, footer=False)\n\n    result = \"{head}, ..., {tail}\".format(head=head[:-1], tail=tail[1:])\n    if footer:\n        result = \"{result}\\n{footer}\".format(\n            result=result, footer=self._repr_footer()\n        )\n\n    return str(result)",
                                "signature": "_tidy_repr(self, max_vals=10, footer=True)"
                            },
                            {
                                "code": "def _repr_categories(self):\n    \"\"\"\n    return the base repr for the categories\n    \"\"\"\n    max_categories = (\n        10\n        if get_option(\"display.max_categories\") == 0\n        else get_option(\"display.max_categories\")\n    )\n    from pandas.io.formats import format as fmt\n\n    if len(self.categories) > max_categories:\n        num = max_categories // 2\n        head = fmt.format_array(self.categories[:num], None)\n        tail = fmt.format_array(self.categories[-num:], None)\n        category_strs = head + [\"...\"] + tail\n    else:\n        category_strs = fmt.format_array(self.categories, None)\n\n    # Strip all leading spaces, which format_array adds for columns...\n    category_strs = [x.strip() for x in category_strs]\n    return category_strs",
                                "signature": "_repr_categories(self)"
                            },
                            {
                                "code": "def _repr_categories_info(self):\n    \"\"\"\n    Returns a string representation of the footer.\n    \"\"\"\n\n    category_strs = self._repr_categories()\n    dtype = str(self.categories.dtype)\n    levheader = \"Categories ({length}, {dtype}): \".format(\n        length=len(self.categories), dtype=dtype\n    )\n    width, height = get_terminal_size()\n    max_width = get_option(\"display.width\") or width\n    if console.in_ipython_frontend():\n        # 0 = no breaks\n        max_width = 0\n    levstring = \"\"\n    start = True\n    cur_col_len = len(levheader)  # header\n    sep_len, sep = (3, \" < \") if self.ordered else (2, \", \")\n    linesep = sep.rstrip() + \"\\n\"  # remove whitespace\n    for val in category_strs:\n        if max_width != 0 and cur_col_len + sep_len + len(val) > max_width:\n            levstring += linesep + (\" \" * (len(levheader) + 1))\n            cur_col_len = len(levheader) + 1  # header + a whitespace\n        elif not start:\n            levstring += sep\n            cur_col_len += len(val)\n        levstring += val\n        start = False\n    # replace to simple save space by\n    return levheader + \"[\" + levstring.replace(\" < ... < \", \" ... \") + \"]\"",
                                "signature": "_repr_categories_info(self)"
                            },
                            {
                                "code": "def _repr_footer(self):\n\n    return \"Length: {length}\\n{info}\".format(\n        length=len(self), info=self._repr_categories_info()\n    )",
                                "signature": "_repr_footer(self)"
                            },
                            {
                                "code": "def _get_repr(self, length=True, na_rep=\"NaN\", footer=True):\n    from pandas.io.formats import format as fmt\n\n    formatter = fmt.CategoricalFormatter(\n        self, length=length, na_rep=na_rep, footer=footer\n    )\n    result = formatter.to_string()\n    return str(result)",
                                "signature": "_get_repr(self, length=True, na_rep='NaN', footer=True)"
                            },
                            {
                                "code": "def __repr__(self):\n    \"\"\"\n    String representation.\n    \"\"\"\n    _maxlen = 10\n    if len(self._codes) > _maxlen:\n        result = self._tidy_repr(_maxlen)\n    elif len(self._codes) > 0:\n        result = self._get_repr(length=len(self) > _maxlen)\n    else:\n        msg = self._get_repr(length=False, footer=True).replace(\"\\n\", \", \")\n        result = \"[], {repr_msg}\".format(repr_msg=msg)\n\n    return result",
                                "signature": "__repr__(self)"
                            },
                            {
                                "code": "def _maybe_coerce_indexer(self, indexer):\n    \"\"\"\n    return an indexer coerced to the codes dtype\n    \"\"\"\n    if isinstance(indexer, np.ndarray) and indexer.dtype.kind == \"i\":\n        indexer = indexer.astype(self._codes.dtype)\n    return indexer",
                                "signature": "_maybe_coerce_indexer(self, indexer)"
                            },
                            {
                                "code": "def __getitem__(self, key):\n    \"\"\"\n    Return an item.\n    \"\"\"\n    if isinstance(key, (int, np.integer)):\n        i = self._codes[key]\n        if i == -1:\n            return np.nan\n        else:\n            return self.categories[i]\n    else:\n        return self._constructor(\n            values=self._codes[key], dtype=self.dtype, fastpath=True\n        )",
                                "signature": "__getitem__(self, key)"
                            },
                            {
                                "code": "def __setitem__(self, key, value):\n    \"\"\"\n    Item assignment.\n\n\n    Raises\n    ------\n    ValueError\n        If (one or more) Value is not in categories or if a assigned\n        `Categorical` does not have the same categories\n    \"\"\"\n    value = extract_array(value, extract_numpy=True)\n\n    # require identical categories set\n    if isinstance(value, Categorical):\n        if not is_dtype_equal(self, value):\n            raise ValueError(\n                \"Cannot set a Categorical with another, \"\n                \"without identical categories\"\n            )\n        if not self.categories.equals(value.categories):\n            new_codes = _recode_for_categories(\n                value.codes, value.categories, self.categories\n            )\n            value = Categorical.from_codes(new_codes, dtype=self.dtype)\n\n    rvalue = value if is_list_like(value) else [value]\n\n    from pandas import Index\n\n    to_add = Index(rvalue).difference(self.categories)\n\n    # no assignments of values not in categories, but it's always ok to set\n    # something to np.nan\n    if len(to_add) and not isna(to_add).all():\n        raise ValueError(\n            \"Cannot setitem on a Categorical with a new \"\n            \"category, set the categories first\"\n        )\n\n    # set by position\n    if isinstance(key, (int, np.integer)):\n        pass\n\n    # tuple of indexers (dataframe)\n    elif isinstance(key, tuple):\n        # only allow 1 dimensional slicing, but can\n        # in a 2-d case be passd (slice(None),....)\n        if len(key) == 2:\n            if not com.is_null_slice(key[0]):\n                raise AssertionError(\"invalid slicing for a 1-ndim categorical\")\n            key = key[1]\n        elif len(key) == 1:\n            key = key[0]\n        else:\n            raise AssertionError(\"invalid slicing for a 1-ndim categorical\")\n\n    # slicing in Series or Categorical\n    elif isinstance(key, slice):\n        pass\n\n    # else: array of True/False in Series or Categorical\n\n    lindexer = self.categories.get_indexer(rvalue)\n    lindexer = self._maybe_coerce_indexer(lindexer)\n    self._codes[key] = lindexer",
                                "signature": "__setitem__(self, key, value)"
                            },
                            {
                                "code": "def _reverse_indexer(self):\n    \"\"\"\n    Compute the inverse of a categorical, returning\n    a dict of categories -> indexers.\n\n    *This is an internal function*\n\n    Returns\n    -------\n    dict of categories -> indexers\n\n    Examples\n    --------\n    >>> c = pd.Categorical(list('aabca'))\n    >>> c\n    [a, a, b, c, a]\n    Categories (3, object): [a, b, c]\n    >>> c.categories\n    Index(['a', 'b', 'c'], dtype='object')\n    >>> c.codes\n    array([0, 0, 1, 2, 0], dtype=int8)\n    >>> c._reverse_indexer()\n    {'a': array([0, 1, 4]), 'b': array([2]), 'c': array([3])}\n\n    \"\"\"\n    categories = self.categories\n    r, counts = libalgos.groupsort_indexer(\n        self.codes.astype(\"int64\"), categories.size\n    )\n    counts = counts.cumsum()\n    result = (r[start:end] for start, end in zip(counts, counts[1:]))\n    result = dict(zip(categories, result))\n    return result",
                                "signature": "_reverse_indexer(self)"
                            },
                            {
                                "code": "def _reduce(self, name, axis=0, **kwargs):\n    func = getattr(self, name, None)\n    if func is None:\n        msg = \"Categorical cannot perform the operation {op}\"\n        raise TypeError(msg.format(op=name))\n    return func(**kwargs)",
                                "signature": "_reduce(self, name, axis=0, **kwargs)"
                            },
                            {
                                "code": "def min(self, numeric_only=None, **kwargs):\n    \"\"\"\n    The minimum value of the object.\n\n    Only ordered `Categoricals` have a minimum!\n\n    Raises\n    ------\n    TypeError\n        If the `Categorical` is not `ordered`.\n\n    Returns\n    -------\n    min : the minimum of this `Categorical`\n    \"\"\"\n    self.check_for_ordered(\"min\")\n    if numeric_only:\n        good = self._codes != -1\n        pointer = self._codes[good].min(**kwargs)\n    else:\n        pointer = self._codes.min(**kwargs)\n    if pointer == -1:\n        return np.nan\n    else:\n        return self.categories[pointer]",
                                "signature": "min(self, numeric_only=None, **kwargs)"
                            },
                            {
                                "code": "def max(self, numeric_only=None, **kwargs):\n    \"\"\"\n    The maximum value of the object.\n\n    Only ordered `Categoricals` have a maximum!\n\n    Raises\n    ------\n    TypeError\n        If the `Categorical` is not `ordered`.\n\n    Returns\n    -------\n    max : the maximum of this `Categorical`\n    \"\"\"\n    self.check_for_ordered(\"max\")\n    if numeric_only:\n        good = self._codes != -1\n        pointer = self._codes[good].max(**kwargs)\n    else:\n        pointer = self._codes.max(**kwargs)\n    if pointer == -1:\n        return np.nan\n    else:\n        return self.categories[pointer]",
                                "signature": "max(self, numeric_only=None, **kwargs)"
                            },
                            {
                                "code": "def mode(self, dropna=True):\n    \"\"\"\n    Returns the mode(s) of the Categorical.\n\n    Always returns `Categorical` even if only one value.\n\n    Parameters\n    ----------\n    dropna : bool, default True\n        Don't consider counts of NaN/NaT.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    modes : `Categorical` (sorted)\n    \"\"\"\n    codes = self._codes\n    if dropna:\n        good = self._codes != -1\n        codes = self._codes[good]\n    codes = sorted(htable.mode_int64(ensure_int64(codes), dropna))\n    return self._constructor(values=codes, dtype=self.dtype, fastpath=True)",
                                "signature": "mode(self, dropna=True)"
                            },
                            {
                                "code": "def unique(self):\n    \"\"\"\n    Return the ``Categorical`` which ``categories`` and ``codes`` are\n    unique. Unused categories are NOT returned.\n\n    - unordered category: values and categories are sorted by appearance\n      order.\n    - ordered category: values are sorted by appearance order, categories\n      keeps existing order.\n\n    Returns\n    -------\n    unique values : ``Categorical``\n\n    Examples\n    --------\n    An unordered Categorical will return categories in the\n    order of appearance.\n\n    >>> pd.Categorical(list('baabc'))\n    [b, a, c]\n    Categories (3, object): [b, a, c]\n\n    >>> pd.Categorical(list('baabc'), categories=list('abc'))\n    [b, a, c]\n    Categories (3, object): [b, a, c]\n\n    An ordered Categorical preserves the category ordering.\n\n    >>> pd.Categorical(list('baabc'),\n    ...                categories=list('abc'),\n    ...                ordered=True)\n    [b, a, c]\n    Categories (3, object): [a < b < c]\n\n    See Also\n    --------\n    unique\n    CategoricalIndex.unique\n    Series.unique\n\n    \"\"\"\n\n    # unlike np.unique, unique1d does not sort\n    unique_codes = unique1d(self.codes)\n    cat = self.copy()\n\n    # keep nan in codes\n    cat._codes = unique_codes\n\n    # exclude nan from indexer for categories\n    take_codes = unique_codes[unique_codes != -1]\n    if self.ordered:\n        take_codes = np.sort(take_codes)\n    return cat.set_categories(cat.categories.take(take_codes))",
                                "signature": "unique(self)"
                            },
                            {
                                "code": "def _values_for_factorize(self):\n    codes = self.codes.astype(\"int64\")\n    return codes, -1",
                                "signature": "_values_for_factorize(self)"
                            },
                            {
                                "code": "@classmethod\ndef _from_factorized(cls, uniques, original):\n    return original._constructor(\n        original.categories.take(uniques), dtype=original.dtype\n    )",
                                "signature": "_from_factorized(cls, uniques, original)"
                            },
                            {
                                "code": "def equals(self, other):\n    \"\"\"\n    Returns True if categorical arrays are equal.\n\n    Parameters\n    ----------\n    other : `Categorical`\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if self.is_dtype_equal(other):\n        if self.categories.equals(other.categories):\n            # fastpath to avoid re-coding\n            other_codes = other._codes\n        else:\n            other_codes = _recode_for_categories(\n                other.codes, other.categories, self.categories\n            )\n        return np.array_equal(self._codes, other_codes)\n    return False",
                                "signature": "equals(self, other)"
                            },
                            {
                                "code": "def is_dtype_equal(self, other):\n    \"\"\"\n    Returns True if categoricals are the same dtype\n      same categories, and same ordered\n\n    Parameters\n    ----------\n    other : Categorical\n\n    Returns\n    -------\n    bool\n    \"\"\"\n\n    try:\n        return hash(self.dtype) == hash(other.dtype)\n    except (AttributeError, TypeError):\n        return False",
                                "signature": "is_dtype_equal(self, other)"
                            },
                            {
                                "code": "def describe(self):\n    \"\"\"\n    Describes this Categorical\n\n    Returns\n    -------\n    description: `DataFrame`\n        A dataframe with frequency and counts by category.\n    \"\"\"\n    counts = self.value_counts(dropna=False)\n    freqs = counts / float(counts.sum())\n\n    from pandas.core.reshape.concat import concat\n\n    result = concat([counts, freqs], axis=1)\n    result.columns = [\"counts\", \"freqs\"]\n    result.index.name = \"categories\"\n\n    return result",
                                "signature": "describe(self)"
                            },
                            {
                                "code": "@Substitution(klass=\"Categorical\")\n@Appender(_extension_array_shared_docs[\"repeat\"])\ndef repeat(self, repeats, axis=None):\n    nv.validate_repeat(tuple(), dict(axis=axis))\n    codes = self._codes.repeat(repeats)\n    return self._constructor(values=codes, dtype=self.dtype, fastpath=True)",
                                "signature": "repeat(self, repeats, axis=None)"
                            },
                            {
                                "code": "@property\ndef _can_hold_na(self):\n    return True",
                                "signature": "_can_hold_na(self)"
                            },
                            {
                                "code": "@classmethod\ndef _concat_same_type(self, to_concat):\n    from pandas.core.dtypes.concat import concat_categorical\n\n    return concat_categorical(to_concat)",
                                "signature": "_concat_same_type(self, to_concat)"
                            },
                            {
                                "code": "def isin(self, values):\n    \"\"\"\n    Check whether `values` are contained in Categorical.\n\n    Return a boolean NumPy Array showing whether each element in\n    the Categorical matches an element in the passed sequence of\n    `values` exactly.\n\n    Parameters\n    ----------\n    values : set or list-like\n        The sequence of values to test. Passing in a single string will\n        raise a ``TypeError``. Instead, turn a single string into a\n        list of one element.\n\n    Returns\n    -------\n    isin : numpy.ndarray (bool dtype)\n\n    Raises\n    ------\n    TypeError\n      * If `values` is not a set or list-like\n\n    See Also\n    --------\n    pandas.Series.isin : Equivalent method on Series.\n\n    Examples\n    --------\n\n    >>> s = pd.Categorical(['lama', 'cow', 'lama', 'beetle', 'lama',\n    ...                'hippo'])\n    >>> s.isin(['cow', 'lama'])\n    array([ True,  True,  True, False,  True, False])\n\n    Passing a single string as ``s.isin('lama')`` will raise an error. Use\n    a list of one element instead:\n\n    >>> s.isin(['lama'])\n    array([ True, False,  True, False,  True, False])\n    \"\"\"\n    if not is_list_like(values):\n        raise TypeError(\n            \"only list-like objects are allowed to be passed\"\n            \" to isin(), you passed a [{values_type}]\".format(\n                values_type=type(values).__name__\n            )\n        )\n    values = sanitize_array(values, None, None)\n    null_mask = np.asarray(isna(values))\n    code_values = self.categories.get_indexer(values)\n    code_values = code_values[null_mask | (code_values >= 0)]\n    return algorithms.isin(self.codes, code_values)",
                                "signature": "isin(self, values)"
                            }
                        ]
                    },
                    {
                        "class_declaration": "class CategoricalAccessor:",
                        "functions": [
                            {
                                "code": "def __init__(self, data):\n    self._validate(data)\n    self._parent = data.values\n    self._index = data.index\n    self._name = data.name\n    self._freeze()",
                                "signature": "__init__(self, data)"
                            },
                            {
                                "code": "@staticmethod\ndef _validate(data):\n    if not is_categorical_dtype(data.dtype):\n        raise AttributeError(\"Can only use .cat accessor with a 'category' dtype\")",
                                "signature": "_validate(data)"
                            },
                            {
                                "code": "def _delegate_property_get(self, name):\n    return getattr(self._parent, name)",
                                "signature": "_delegate_property_get(self, name)"
                            },
                            {
                                "code": "def _delegate_property_set(self, name, new_values):\n    return setattr(self._parent, name, new_values)",
                                "signature": "_delegate_property_set(self, name, new_values)"
                            },
                            {
                                "code": "@property\ndef codes(self):\n    \"\"\"\n    Return Series of codes as well as the index.\n    \"\"\"\n    from pandas import Series\n\n    return Series(self._parent.codes, index=self._index)",
                                "signature": "codes(self)"
                            },
                            {
                                "code": "def _delegate_method(self, name, *args, **kwargs):\n    from pandas import Series\n\n    method = getattr(self._parent, name)\n    res = method(*args, **kwargs)\n    if res is not None:\n        return Series(res, index=self._index, name=self._name)",
                                "signature": "_delegate_method(self, name, *args, **kwargs)"
                            },
                            {
                                "code": "@property\ndef categorical(self):\n    # Note: Upon deprecation, `test_tab_completion_with_categorical` will\n    # need to be updated. `categorical` will need to be removed from\n    # `ok_for_cat`.\n    warn(\n        \"`Series.cat.categorical` has been deprecated. Use the \"\n        \"attributes on 'Series.cat' directly instead.\",\n        FutureWarning,\n        stacklevel=2,\n    )\n    return self._parent",
                                "signature": "categorical(self)"
                            },
                            {
                                "code": "@property\ndef name(self):\n    # Note: Upon deprecation, `test_tab_completion_with_categorical` will\n    # need to be updated. `name` will need to be removed from\n    # `ok_for_cat`.\n    warn(\n        \"`Series.cat.name` has been deprecated. Use `Series.name` instead.\",\n        FutureWarning,\n        stacklevel=2,\n    )\n    return self._name",
                                "signature": "name(self)"
                            },
                            {
                                "code": "@property\ndef index(self):\n    # Note: Upon deprecation, `test_tab_completion_with_categorical` will\n    # need to be updated. `index` will need to be removed from\n    # ok_for_cat`.\n    warn(\n        \"`Series.cat.index` has been deprecated. Use `Series.index` instead.\",\n        FutureWarning,\n        stacklevel=2,\n    )\n    return self._index",
                                "signature": "index(self)"
                            }
                        ]
                    }
                ]
            },
            "variables_in_file": {
                "_take_msg": [
                    1944,
                    68
                ],
                "textwrap.dedent": [
                    68
                ],
                "textwrap": [
                    68
                ],
                "opname": [
                    99,
                    165,
                    167,
                    136,
                    143,
                    145,
                    82,
                    152,
                    158,
                    157,
                    126
                ],
                "format": [
                    1344,
                    1568,
                    2084,
                    1861,
                    1995,
                    2060,
                    1997,
                    2033,
                    82,
                    1301,
                    2486
                ],
                "op.__name__": [
                    82
                ],
                "op": [
                    82,
                    1570
                ],
                "isinstance": [
                    2689,
                    2691,
                    1350,
                    103,
                    2152,
                    361,
                    586,
                    2092,
                    365,
                    1838,
                    2125,
                    2156,
                    403,
                    2100,
                    2169,
                    90
                ],
                "other": [
                    133,
                    134,
                    135,
                    158,
                    165,
                    2374,
                    2375,
                    2377,
                    2380,
                    90,
                    93,
                    94,
                    2400,
                    103,
                    108,
                    110,
                    112,
                    115,
                    119,
                    121,
                    123
                ],
                "ABCDataFrame": [
                    90
                ],
                "ABCSeries": [
                    361,
                    90,
                    403,
                    1838
                ],
                "ABCIndexClass": [
                    361,
                    90
                ],
                "NotImplemented": [
                    1338,
                    91
                ],
                "lib.item_from_zerodim": [
                    93
                ],
                "lib": [
                    93
                ],
                "is_list_like": [
                    1058,
                    2718,
                    2484,
                    1109,
                    2137,
                    94
                ],
                "len": [
                    2048,
                    2049,
                    2052,
                    2061,
                    144,
                    146,
                    2078,
                    2080,
                    2081,
                    1828,
                    1061,
                    2725,
                    2043,
                    1969,
                    694,
                    2757,
                    455,
                    2647,
                    2014,
                    1246,
                    94,
                    1121,
                    2145,
                    108,
                    749,
                    2159,
                    1520,
                    369,
                    2034,
                    2163,
                    2673,
                    1269,
                    887,
                    891,
                    2047
                ],
                "self": [
                    2560,
                    518,
                    519,
                    520,
                    521,
                    522,
                    523,
                    2569,
                    2061,
                    2574,
                    2577,
                    530,
                    1530,
                    1554,
                    2068,
                    1558,
                    1559,
                    1560,
                    537,
                    1561,
                    1562,
                    1566,
                    2078,
                    2079,
                    2080,
                    2081,
                    547,
                    1060,
                    2083,
                    1574,
                    2590,
                    2602,
                    1067,
                    1068,
                    2093,
                    1070,
                    2101,
                    2614,
                    2105,
                    2107,
                    2108,
                    2126,
                    2131,
                    2133,
                    2135,
                    1113,
                    1114,
                    2141,
                    94,
                    98,
                    1125,
                    1126,
                    108,
                    110,
                    112,
                    115,
                    119,
                    121,
                    125,
                    126,
                    2174,
                    1152,
                    2175,
                    2176,
                    134,
                    135,
                    136,
                    1160,
                    139,
                    144,
                    146,
                    2203,
                    2205,
                    158,
                    2214,
                    1708,
                    1711,
                    1713,
                    1714,
                    2235,
                    2237,
                    2238,
                    2240,
                    1731,
                    708,
                    1732,
                    2244,
                    1737,
                    1738,
                    1743,
                    1237,
                    2261,
                    1239,
                    1240,
                    2263,
                    2264,
                    2266,
                    1245,
                    2270,
                    1247,
                    1763,
                    743,
                    1768,
                    745,
                    748,
                    749,
                    2289,
                    2291,
                    756,
                    1269,
                    1780,
                    2292,
                    2294,
                    771,
                    772,
                    1290,
                    1297,
                    1298,
                    787,
                    788,
                    1310,
                    1823,
                    1828,
                    2340,
                    1830,
                    2341,
                    1832,
                    809,
                    1323,
                    1324,
                    2348,
                    1839,
                    2353,
                    1842,
                    1336,
                    1848,
                    827,
                    1345,
                    1857,
                    2374,
                    2375,
                    1866,
                    1355,
                    2380,
                    2382,
                    349,
                    350,
                    1375,
                    2400,
                    1382,
                    1386,
                    2413,
                    882,
                    885,
                    2428,
                    2429,
                    1411,
                    1416,
                    1425,
                    1431,
                    1947,
                    1953,
                    418,
                    419,
                    1954,
                    1959,
                    1960,
                    1451,
                    1969,
                    1975,
                    2493,
                    1983,
                    2495,
                    1985,
                    450,
                    1474,
                    454,
                    455,
                    1992,
                    1993,
                    970,
                    462,
                    1998,
                    469,
                    1494,
                    476,
                    2014,
                    480,
                    2016,
                    2017,
                    2020,
                    1519,
                    2031,
                    2032,
                    498,
                    499,
                    2034,
                    2545,
                    2546,
                    2547,
                    2548,
                    2549,
                    1018,
                    2044,
                    2557,
                    1022
                ],
                "ValueError": [
                    391,
                    1417,
                    1300,
                    673,
                    1066,
                    1706,
                    1840,
                    692,
                    695,
                    1849,
                    458,
                    716,
                    2127,
                    1242,
                    96,
                    2146,
                    1123,
                    751,
                    1019
                ],
                "self.ordered": [
                    98,
                    1731,
                    454,
                    743,
                    1126,
                    745,
                    1160,
                    1416,
                    1068,
                    2348,
                    110,
                    115,
                    119,
                    1240,
                    2044,
                    1566
                ],
                "TypeError": [
                    2401,
                    386,
                    100,
                    165,
                    1860,
                    1957,
                    2217,
                    1567,
                    109,
                    111,
                    208,
                    113,
                    2719,
                    116,
                    2485,
                    152,
                    381,
                    1343
                ],
                "Categorical": [
                    484,
                    2502,
                    103,
                    488,
                    2505,
                    2726,
                    2732,
                    2125,
                    2135
                ],
                "msg": [
                    148,
                    152,
                    669,
                    160,
                    673,
                    2083,
                    1956,
                    165,
                    677,
                    1062,
                    1957,
                    681,
                    1066,
                    1705,
                    1706,
                    2084,
                    2216,
                    2217,
                    691,
                    692,
                    1122,
                    1123,
                    107,
                    109,
                    111,
                    113
                ],
                "self.categories": [
                    771,
                    134,
                    135,
                    1297,
                    1298,
                    787,
                    1425,
                    1558,
                    1559,
                    1560,
                    537,
                    1561,
                    2203,
                    1953,
                    1954,
                    1830,
                    1832,
                    1323,
                    1324,
                    1839,
                    1842,
                    1848,
                    2105,
                    2493,
                    1857,
                    2244,
                    2375,
                    1737,
                    2380,
                    1743,
                    2131,
                    1237,
                    2133,
                    2141,
                    2014,
                    2270,
                    2016,
                    2017,
                    2020,
                    108,
                    110,
                    1519,
                    112,
                    2032,
                    2034,
                    119,
                    121,
                    2174
                ],
                "other.categories": [
                    2375,
                    108,
                    2380,
                    110,
                    112,
                    119
                ],
                "all": [
                    680,
                    2145,
                    110,
                    1839
                ],
                "set": [
                    1060,
                    112,
                    1112,
                    1113,
                    1018
                ],
                "other.ordered": [
                    115
                ],
                "self.categories.equals": [
                    2131,
                    2375,
                    119
                ],
                "other_codes": [
                    2377,
                    2379,
                    2382,
                    121,
                    123,
                    125,
                    127
                ],
                "_get_codes_for_values": [
                    1832,
                    1425,
                    1842,
                    121,
                    410
                ],
                "other._codes": [
                    2377,
                    123
                ],
                "mask": [
                    128,
                    1857,
                    130,
                    1733,
                    1734,
                    1736,
                    139,
                    140,
                    1520,
                    1521,
                    1524,
                    1527,
                    1851,
                    1852,
                    125,
                    1855
                ],
                "self._codes": [
                    2176,
                    1411,
                    136,
                    139,
                    530,
                    1559,
                    1560,
                    1561,
                    2078,
                    1823,
                    2080,
                    419,
                    1574,
                    1959,
                    1323,
                    1451,
                    2093,
                    1711,
                    1969,
                    1714,
                    2101,
                    2108,
                    2237,
                    2238,
                    2240,
                    1985,
                    708,
                    2382,
                    2263,
                    1240,
                    2264,
                    2266,
                    1245,
                    349,
                    1247,
                    1768,
                    1386,
                    1519,
                    2289,
                    499,
                    2291,
                    1269,
                    2292,
                    2428,
                    125,
                    126
                ],
                "f": [
                    167,
                    169,
                    126,
                    127
                ],
                "getattr": [
                    2629,
                    2214,
                    2630,
                    136,
                    2574,
                    126,
                    2557,
                    158
                ],
                "ret": [
                    130,
                    131,
                    136,
                    1323,
                    140,
                    141,
                    1325,
                    1326,
                    1451,
                    1452,
                    1330,
                    1331,
                    127
                ],
                "mask.any": [
                    128,
                    1852,
                    1734
                ],
                "is_scalar": [
                    2693,
                    133,
                    1429,
                    216,
                    1982
                ],
                "i": [
                    135,
                    136,
                    2101,
                    2102,
                    2105
                ],
                "self.categories.get_loc": [
                    1954,
                    1857,
                    1298,
                    135
                ],
                "np.repeat": [
                    144,
                    146
                ],
                "np": [
                    1153,
                    1527,
                    523,
                    1293,
                    1294,
                    144,
                    146,
                    1941,
                    1559,
                    1561,
                    1562,
                    1817,
                    414,
                    158,
                    675,
                    2725,
                    2092,
                    1325,
                    2349,
                    1330,
                    1843,
                    2100,
                    2103,
                    2492,
                    2242,
                    1736,
                    1738,
                    1742,
                    2382,
                    2268,
                    1245,
                    1246,
                    1247,
                    479,
                    2652,
                    355,
                    1763,
                    2152,
                    365,
                    1521,
                    1780,
                    1525,
                    375,
                    1528
                ],
                "msg.format": [
                    1123,
                    165,
                    1957,
                    2217,
                    1706,
                    1066,
                    152
                ],
                "np.array": [
                    355,
                    1763,
                    1738,
                    523,
                    1742,
                    1562,
                    158
                ],
                "type": [
                    772,
                    165,
                    1863,
                    1960,
                    2488
                ],
                "f.__name__": [
                    167
                ],
                "hash": [
                    2400,
                    201
                ],
                "key": [
                    2176,
                    1985,
                    2152,
                    201,
                    2156,
                    207,
                    2159,
                    2160,
                    2162,
                    2163,
                    2100,
                    2101,
                    2164,
                    2169,
                    2108,
                    1982
                ],
                "loc": [
                    216,
                    217,
                    220,
                    207
                ],
                "cat.categories.get_loc": [
                    207
                ],
                "cat.categories": [
                    973,
                    2350,
                    975,
                    207,
                    977,
                    2733,
                    894
                ],
                "cat": [
                    896,
                    897,
                    1152,
                    1153,
                    900,
                    1158,
                    1162,
                    1163,
                    1166,
                    788,
                    789,
                    791,
                    2341,
                    2344,
                    2732,
                    2733,
                    1070,
                    1071,
                    1072,
                    2350,
                    1074,
                    2734,
                    970,
                    973,
                    207,
                    975,
                    977,
                    979,
                    1519,
                    1520,
                    885,
                    887,
                    888,
                    891,
                    894
                ],
                "KeyError": [
                    208,
                    1427
                ],
                "container": [
                    217,
                    220
                ],
                "any": [
                    1983,
                    220,
                    1117,
                    1943
                ],
                "loc_": [
                    220
                ],
                "_codes_doc": [
                    718,
                    223
                ],
                "ExtensionArray": [
                    234
                ],
                "PandasObject": [
                    234,
                    2518
                ],
                "__array_priority__": [
                    331
                ],
                "_dtype": [
                    332
                ],
                "CategoricalDtype": [
                    515,
                    1159,
                    399,
                    787,
                    665,
                    1068,
                    454,
                    586,
                    332,
                    341,
                    472,
                    1372,
                    613,
                    615,
                    360,
                    743,
                    745,
                    883,
                    758
                ],
                "_deprecations": [
                    334
                ],
                "frozenset": [
                    334
                ],
                "_typ": [
                    335
                ],
                "dtype": [
                    514,
                    515,
                    771,
                    772,
                    518,
                    520,
                    522,
                    523,
                    399,
                    406,
                    665,
                    410,
                    666,
                    668,
                    1947,
                    418,
                    419,
                    1960,
                    1324,
                    1325,
                    694,
                    697,
                    586,
                    591,
                    593,
                    595,
                    341,
                    342,
                    597,
                    349,
                    350,
                    605,
                    613,
                    1766,
                    359,
                    360,
                    488,
                    615,
                    618,
                    1767,
                    2032,
                    2034,
                    378,
                    383
                ],
                "CategoricalDtype._from_values_or_dtype": [
                    665,
                    341
                ],
                "values": [
                    401,
                    1425,
                    403,
                    406,
                    410,
                    2718,
                    2721,
                    2722,
                    1828,
                    1829,
                    2725,
                    2726,
                    1832,
                    2727,
                    2732,
                    2484,
                    2488,
                    2491,
                    2492,
                    2493,
                    2624,
                    1732,
                    1733,
                    2629,
                    1735,
                    1736,
                    2631,
                    1738,
                    2636,
                    1742,
                    1743,
                    2639,
                    1745,
                    2642,
                    2645,
                    342,
                    349,
                    358,
                    360,
                    361,
                    364,
                    365,
                    366,
                    369,
                    373,
                    375,
                    376,
                    380,
                    382
                ],
                "categories": [
                    399,
                    666,
                    2203,
                    2205,
                    2209,
                    2726,
                    2733,
                    2735,
                    2624,
                    452,
                    454,
                    2630,
                    2631,
                    2636,
                    2640,
                    2643,
                    342,
                    2646,
                    605,
                    606,
                    610,
                    612,
                    613,
                    743,
                    745,
                    380,
                    382
                ],
                "ordered": [
                    881,
                    882,
                    883,
                    342,
                    666,
                    1022
                ],
                "fastpath": [
                    747,
                    348,
                    742
                ],
                "coerce_indexer_dtype": [
                    419,
                    1163,
                    1357,
                    1072,
                    2679,
                    2649,
                    349
                ],
                "dtype.categories": [
                    419,
                    605,
                    771,
                    359,
                    586,
                    410,
                    591,
                    593,
                    595,
                    597,
                    406,
                    694,
                    378,
                    668,
                    349
                ],
                "self._dtype": [
                    418,
                    462,
                    756,
                    476,
                    350
                ],
                "self._dtype.update_dtype": [
                    418,
                    350
                ],
                "null_mask": [
                    355,
                    2494,
                    373,
                    374,
                    375,
                    2492,
                    412,
                    414,
                    415
                ],
                "is_categorical_dtype": [
                    2721,
                    514,
                    358,
                    401,
                    2553
                ],
                "values.categories": [
                    360,
                    2725
                ],
                "dtype._ordered": [
                    360,
                    399,
                    383
                ],
                "maybe_infer_to_datetimelike": [
                    364
                ],
                "np.ndarray": [
                    2092,
                    365,
                    2652,
                    479
                ],
                "_convert_to_list_like": [
                    366
                ],
                "sanitize_dtype": [
                    376,
                    370,
                    372
                ],
                "isna": [
                    2145,
                    1454,
                    1839,
                    1295,
                    1949,
                    1982,
                    373,
                    1848,
                    2492,
                    1117,
                    1854
                ],
                "null_mask.any": [
                    412,
                    374
                ],
                "idx": [
                    1153,
                    1155,
                    1156,
                    1158,
                    375
                ],
                "np.where": [
                    1843,
                    1527,
                    375
                ],
                "sanitize_array": [
                    376,
                    2491
                ],
                "codes": [
                    896,
                    771,
                    772,
                    1290,
                    1291,
                    1293,
                    1294,
                    1425,
                    1426,
                    405,
                    1429,
                    1431,
                    410,
                    1306,
                    1308,
                    414,
                    415,
                    416,
                    1310,
                    1823,
                    419,
                    675,
                    676,
                    678,
                    679,
                    680,
                    1832,
                    682,
                    1959,
                    1960,
                    2727,
                    2734,
                    2735,
                    2353,
                    2354,
                    1844,
                    694,
                    2428,
                    697,
                    1851,
                    1853,
                    2429,
                    1855,
                    1857,
                    1866,
                    718,
                    606,
                    612,
                    616,
                    618,
                    2289,
                    2675,
                    2292,
                    2293,
                    2294,
                    2678,
                    2682,
                    380,
                    893,
                    382
                ],
                "factorize": [
                    380,
                    382
                ],
                "NotImplementedError": [
                    1767,
                    1482,
                    394,
                    1292,
                    1819
                ],
                "old_codes": [
                    402,
                    406
                ],
                "values._values.codes": [
                    403
                ],
                "values._values": [
                    403
                ],
                "values.codes": [
                    403,
                    2725,
                    2727
                ],
                "_recode_for_categories": [
                    771,
                    612,
                    2379,
                    2132,
                    405,
                    893,
                    606
                ],
                "values.dtype.categories": [
                    406
                ],
                "values.dtype": [
                    2624,
                    2726,
                    406
                ],
                "full_codes": [
                    416,
                    414,
                    415
                ],
                "np.ones": [
                    414
                ],
                "null_mask.shape": [
                    414
                ],
                "codes.dtype": [
                    414
                ],
                "self.dtype.categories": [
                    450,
                    1411,
                    1060,
                    1114,
                    455,
                    1386,
                    1067,
                    748,
                    749,
                    1113,
                    1018
                ],
                "self.dtype": [
                    1411,
                    518,
                    520,
                    1530,
                    1947,
                    1310,
                    1060,
                    1067,
                    1714,
                    2108,
                    1345,
                    450,
                    455,
                    1866,
                    1355,
                    469,
                    2135,
                    1113,
                    1114,
                    2400,
                    1768,
                    1386,
                    748,
                    749,
                    882,
                    499,
                    2294,
                    1018,
                    2429
                ],
                "property": [
                    2432,
                    1377,
                    482,
                    2562,
                    2592,
                    421,
                    551,
                    1384,
                    1257,
                    2604,
                    718,
                    464,
                    2579,
                    471,
                    478
                ],
                "new_dtype": [
                    897,
                    1159,
                    1162,
                    1163,
                    787,
                    789,
                    1068,
                    1071,
                    1072,
                    454,
                    456,
                    462,
                    743,
                    745,
                    749,
                    883,
                    756,
                    887,
                    891,
                    894
                ],
                "new_dtype.categories": [
                    456,
                    1163,
                    749,
                    1072,
                    887,
                    891,
                    894
                ],
                "categories.setter": [
                    452
                ],
                "self.dtype._ordered": [
                    882,
                    469
                ],
                "Ordered": [
                    465
                ],
                "self.codes": [
                    480,
                    771,
                    1732,
                    2340,
                    1290,
                    2353,
                    1431,
                    2205,
                    2495
                ],
                "Type": [
                    483
                ],
                "scalars": [
                    488
                ],
                "classmethod": [
                    2436,
                    486,
                    620,
                    558,
                    2356
                ],
                "self._constructor": [
                    1768,
                    1866,
                    1713,
                    498,
                    2294,
                    1530,
                    2107,
                    2429
                ],
                "self._codes.copy": [
                    1240,
                    499,
                    1574
                ],
                "Dtype": [
                    502
                ],
                "bool": [
                    502
                ],
                "cast": [
                    515
                ],
                "Union": [
                    515
                ],
                "str": [
                    2032,
                    2001,
                    515,
                    2071
                ],
                "self.dtype.update_dtype": [
                    518
                ],
                "copy": [
                    523,
                    519
                ],
                "self.copy": [
                    1152,
                    2341,
                    519,
                    970,
                    1070,
                    788,
                    885
                ],
                "self._set_dtype": [
                    522
                ],
                "ArrayLike": [
                    502
                ],
                "self._codes.size": [
                    530
                ],
                "cache_readonly": [
                    532,
                    525
                ],
                "int": [
                    2152,
                    2100,
                    533,
                    526
                ],
                "self.categories.itemsize": [
                    537
                ],
                "list": [
                    2689,
                    547,
                    2692,
                    2760,
                    1067,
                    1112,
                    539
                ],
                "to_list": [
                    549
                ],
                "tolist": [
                    549,
                    1975
                ],
                "cats": [
                    609,
                    610,
                    615,
                    584,
                    592,
                    2649,
                    594,
                    596,
                    2646,
                    2647,
                    2648,
                    601,
                    606,
                    607
                ],
                "Index": [
                    584,
                    2141
                ],
                "inferred_categories": [
                    584,
                    594,
                    592,
                    596
                ],
                "known_categories": [
                    585,
                    603,
                    589
                ],
                "dtype.categories.is_numeric": [
                    591
                ],
                "to_numeric": [
                    592
                ],
                "is_datetime64_dtype": [
                    593
                ],
                "to_datetime": [
                    594
                ],
                "is_timedelta64_dtype": [
                    595
                ],
                "to_timedelta": [
                    596
                ],
                "dtype.categories.is_boolean": [
                    597
                ],
                "true_values": [
                    601,
                    598,
                    599
                ],
                "cats.isin": [
                    601
                ],
                "inferred_codes": [
                    616,
                    612,
                    606
                ],
                "cats.is_monotonic_increasing": [
                    607
                ],
                "unsorted": [
                    609,
                    612
                ],
                "cats.copy": [
                    609
                ],
                "cats.sort_values": [
                    610
                ],
                "cls": [
                    697,
                    618
                ],
                "np.asarray": [
                    675,
                    1325,
                    1330,
                    1780,
                    1941,
                    2492
                ],
                "is_integer_dtype": [
                    1560,
                    676
                ],
                "is_float_dtype": [
                    678
                ],
                "icodes": [
                    680,
                    682,
                    679
                ],
                "codes.astype": [
                    679
                ],
                "warn": [
                    2597,
                    2584,
                    683,
                    1548,
                    2609,
                    1944,
                    1757
                ],
                "FutureWarning": [
                    1760,
                    2599,
                    1551,
                    688,
                    2611,
                    1944,
                    2587
                ],
                "codes.max": [
                    694
                ],
                "codes.min": [
                    694
                ],
                "v": [
                    708,
                    709,
                    710,
                    1374,
                    1375
                ],
                "self._codes.view": [
                    708
                ],
                "v.flags.writeable": [
                    709
                ],
                "v.flags": [
                    709
                ],
                "_get_codes": [
                    718
                ],
                "_set_codes": [
                    718
                ],
                "CategoricalDtype._from_fastpath": [
                    1159,
                    743
                ],
                "inplace": [
                    1152,
                    899,
                    1165,
                    786,
                    788,
                    790,
                    1057,
                    1703,
                    808,
                    809,
                    1070,
                    1710,
                    1073,
                    826,
                    827,
                    969,
                    970,
                    978,
                    1108,
                    1126,
                    880,
                    885,
                    1017,
                    1022,
                    1151
                ],
                "validate_bool_kwarg": [
                    1057,
                    1703,
                    808,
                    969,
                    880,
                    786,
                    1108,
                    1017,
                    826,
                    1151
                ],
                "value": [
                    1425,
                    787,
                    1812,
                    1813,
                    1429,
                    1816,
                    1817,
                    1829,
                    1838,
                    1839,
                    1842,
                    1847,
                    1848,
                    1854,
                    1857,
                    1863,
                    2122,
                    2125,
                    2126,
                    2131,
                    2133,
                    2135,
                    2137
                ],
                "cat._dtype": [
                    897,
                    1162,
                    789,
                    1071
                ],
                "self.set_ordered": [
                    809,
                    827
                ],
                "new_categories": [
                    1158,
                    1160,
                    1058,
                    1059,
                    1060,
                    1067,
                    1068,
                    972,
                    973,
                    974,
                    975,
                    977,
                    1237,
                    1240,
                    1114,
                    1246,
                    1119,
                    1247,
                    1126,
                    883,
                    2676,
                    2680,
                    1018,
                    1022
                ],
                "rename": [
                    886
                ],
                "cat.dtype.categories": [
                    888,
                    1158,
                    887
                ],
                "cat.dtype": [
                    888,
                    1158,
                    887
                ],
                "cat._codes": [
                    896,
                    1153,
                    2344,
                    1163,
                    1072,
                    891
                ],
                "cat.codes": [
                    2734,
                    894
                ],
                "is_dict_like": [
                    972
                ],
                "new_categories.get": [
                    973
                ],
                "item": [
                    973,
                    975
                ],
                "callable": [
                    974
                ],
                "self.set_categories": [
                    1125,
                    1022
                ],
                "already_included": [
                    1066,
                    1060,
                    1061
                ],
                "removals": [
                    1112,
                    1117,
                    1109,
                    1110
                ],
                "removal_set": [
                    1112,
                    1113,
                    1114
                ],
                "not_included": [
                    1113,
                    1123,
                    1118,
                    1121
                ],
                "c": [
                    1114
                ],
                "x": [
                    2023,
                    1118,
                    1119
                ],
                "notna": [
                    1476,
                    1118,
                    1119
                ],
                "inv": [
                    1153,
                    1163,
                    1156
                ],
                "np.unique": [
                    1153
                ],
                "idx.size": [
                    1155
                ],
                "cat.dtype.categories.take": [
                    1158
                ],
                "self.categories.map": [
                    1237
                ],
                "mapper": [
                    1237
                ],
                "self.from_codes": [
                    1310,
                    1239
                ],
                "np.any": [
                    1245
                ],
                "new_categories.insert": [
                    1246
                ],
                "np.nan": [
                    2242,
                    1736,
                    2103,
                    1817,
                    1559,
                    1561,
                    2268,
                    1246
                ],
                "np.take": [
                    1247
                ],
                "__eq__": [
                    1249
                ],
                "_cat_compare_op": [
                    1249,
                    1250,
                    1251,
                    1252,
                    1253,
                    1254
                ],
                "operator.eq": [
                    1249
                ],
                "operator": [
                    1249,
                    1250,
                    1251,
                    1252,
                    1253,
                    1254
                ],
                "__ne__": [
                    1250
                ],
                "operator.ne": [
                    1250
                ],
                "__lt__": [
                    1251
                ],
                "operator.lt": [
                    1251
                ],
                "__gt__": [
                    1252
                ],
                "operator.gt": [
                    1252
                ],
                "__le__": [
                    1253
                ],
                "operator.le": [
                    1253
                ],
                "__ge__": [
                    1254
                ],
                "operator.ge": [
                    1254
                ],
                "tuple": [
                    2427,
                    2156,
                    1269,
                    2691
                ],
                "codes.ndim": [
                    1291
                ],
                "np.prod": [
                    1293
                ],
                "codes.shape": [
                    1293
                ],
                "periods": [
                    1293,
                    1294,
                    1305,
                    1306,
                    1308
                ],
                "np.roll": [
                    1294
                ],
                "ensure_platform_int": [
                    1294
                ],
                "fill_value": [
                    1953,
                    1954,
                    1957,
                    1959,
                    1295,
                    1296,
                    1297,
                    1298,
                    1303,
                    1306,
                    1308,
                    1949,
                    1950
                ],
                "take_1d": [
                    2682,
                    1323
                ],
                "self.categories.values": [
                    1323
                ],
                "is_dtype_equal": [
                    2624,
                    1324,
                    2126
                ],
                "self.categories.dtype": [
                    2032,
                    1324,
                    1830
                ],
                "is_extension_array_dtype": [
                    1326,
                    2631
                ],
                "result": [
                    2070,
                    2071,
                    2079,
                    2208,
                    2081,
                    2209,
                    2210,
                    2084,
                    2086,
                    1960,
                    1961,
                    1335,
                    1338,
                    1339,
                    1995,
                    1997,
                    1998,
                    2001,
                    1494,
                    1496,
                    2418,
                    2419,
                    2420,
                    2422
                ],
                "ops.maybe_dispatch_ufunc_to_dunder_op": [
                    1335
                ],
                "ops": [
                    1335
                ],
                "ufunc": [
                    1336,
                    1345
                ],
                "method": [
                    1826,
                    1829,
                    2574,
                    2575,
                    1812,
                    1813,
                    1336
                ],
                "inputs": [
                    1336
                ],
                "kwargs": [
                    2240,
                    2218,
                    2575,
                    1336,
                    2266,
                    1627,
                    2238,
                    2264
                ],
                "ufunc.__name__": [
                    1345
                ],
                "state": [
                    1350,
                    1354,
                    1355,
                    1356,
                    1357,
                    1358,
                    1362,
                    1365,
                    1366,
                    1368,
                    1371,
                    1372,
                    1374
                ],
                "dict": [
                    2209,
                    2427,
                    1350
                ],
                "Exception": [
                    2637,
                    1351
                ],
                "self.dtype.validate_categories": [
                    1355
                ],
                "state.pop": [
                    1366,
                    1355,
                    1358
                ],
                "k": [
                    1374,
                    1375
                ],
                "state.items": [
                    1374
                ],
                "setattr": [
                    2560,
                    1375
                ],
                "self._codes.nbytes": [
                    1386,
                    1411
                ],
                "self.dtype.categories.values.nbytes": [
                    1386
                ],
                "self.dtype.categories.values": [
                    1386
                ],
                "self.dtype.categories.memory_usage": [
                    1411
                ],
                "deep": [
                    1411
                ],
                "Series": [
                    2569,
                    1743,
                    1425,
                    2577,
                    1532
                ],
                "self.codes.searchsorted": [
                    1431
                ],
                "side": [
                    1431
                ],
                "sorter": [
                    1431
                ],
                "Substitution": [
                    2424,
                    1413
                ],
                "Appender": [
                    2425,
                    1414
                ],
                "_shared_docs": [
                    1414
                ],
                "isnull": [
                    1454
                ],
                "self.isna": [
                    1474,
                    1983
                ],
                "notnull": [
                    1476
                ],
                "self.notna": [
                    1494
                ],
                "code": [
                    1520,
                    1527,
                    1524,
                    1519
                ],
                "ncat": [
                    1520,
                    1521,
                    1525,
                    1527
                ],
                "ix": [
                    1528,
                    1521,
                    1530,
                    1532
                ],
                "clean": [
                    1521,
                    1523,
                    1524
                ],
                "np.arange": [
                    1521,
                    2725
                ],
                "mask.all": [
                    1521
                ],
                "dropna": [
                    2290,
                    1523,
                    2293
                ],
                "obs": [
                    1524,
                    1525
                ],
                "count": [
                    1532,
                    1525,
                    1527
                ],
                "np.bincount": [
                    1525,
                    1527
                ],
                "np.append": [
                    1528
                ],
                "CategoricalIndex": [
                    1532
                ],
                "self._internal_get_values": [
                    1554,
                    1975
                ],
                "is_datetimelike": [
                    1558
                ],
                "self.categories.take": [
                    1559
                ],
                "take": [
                    1561,
                    1963,
                    1959
                ],
                "self.categories.astype": [
                    1561
                ],
                "argsort": [
                    1627
                ],
                "super": [
                    1627
                ],
                "args": [
                    1627,
                    2575
                ],
                "ascending": [
                    1627,
                    1708
                ],
                "kind": [
                    1627
                ],
                "na_position": [
                    1704,
                    1706,
                    1708
                ],
                "sorted_idx": [
                    1714,
                    1708,
                    1711
                ],
                "nargsort": [
                    1708
                ],
                "values.astype": [
                    1735
                ],
                "self.categories.is_numeric": [
                    1737
                ],
                "self.rename_categories": [
                    1743
                ],
                "rank": [
                    1743
                ],
                "validate_fillna_kwargs": [
                    1812
                ],
                "limit": [
                    1818
                ],
                "reshape": [
                    1828
                ],
                "self.to_dense": [
                    1828
                ],
                "astype": [
                    1829
                ],
                "interpolate_2d": [
                    1829
                ],
                "value.isin": [
                    1839
                ],
                "values_codes": [
                    1842,
                    1843,
                    1844
                ],
                "indexer": [
                    1959,
                    2679,
                    2092,
                    2093,
                    2094,
                    1843,
                    1844,
                    1941,
                    1943,
                    2682
                ],
                "is_hashable": [
                    1847
                ],
                "codes.copy": [
                    2682,
                    2675,
                    1853,
                    2678
                ],
                "__name__": [
                    2488,
                    1863
                ],
                "deprecate_kwarg": [
                    1782
                ],
                "np.intp": [
                    1941
                ],
                "allow_fill": [
                    1945,
                    1959,
                    1942,
                    1951
                ],
                "from_codes": [
                    1960
                ],
                "take_nd": [
                    1963
                ],
                "iter": [
                    1975
                ],
                "contains": [
                    1985
                ],
                "num": [
                    2016,
                    2017,
                    1991,
                    1992,
                    1993,
                    2015
                ],
                "max_vals": [
                    1993,
                    1991
                ],
                "head": [
                    1992,
                    2016,
                    1995,
                    2018
                ],
                "_get_repr": [
                    1992,
                    1993
                ],
                "tail": [
                    1993,
                    2018,
                    1995,
                    2017
                ],
                "footer": [
                    1996,
                    2068
                ],
                "self._repr_footer": [
                    1998
                ],
                "max_categories": [
                    2015,
                    2014,
                    2007
                ],
                "get_option": [
                    2009,
                    2010,
                    2037
                ],
                "fmt.format_array": [
                    2016,
                    2017,
                    2020
                ],
                "fmt": [
                    2016,
                    2017,
                    2067,
                    2020
                ],
                "category_strs": [
                    2018,
                    2020,
                    2023,
                    2024,
                    2031,
                    2046
                ],
                "x.strip": [
                    2023
                ],
                "self._repr_categories": [
                    2031
                ],
                "levheader": [
                    2048,
                    2049,
                    2056,
                    2033,
                    2043
                ],
                "width": [
                    2036,
                    2037
                ],
                "height": [
                    2036
                ],
                "get_terminal_size": [
                    2036
                ],
                "max_width": [
                    2040,
                    2037,
                    2047
                ],
                "console.in_ipython_frontend": [
                    2038
                ],
                "console": [
                    2038
                ],
                "levstring": [
                    2048,
                    2051,
                    2053,
                    2056,
                    2041
                ],
                "start": [
                    2208,
                    2042,
                    2050,
                    2054
                ],
                "cur_col_len": [
                    2049,
                    2043,
                    2052,
                    2047
                ],
                "sep_len": [
                    2044,
                    2047
                ],
                "sep": [
                    2051,
                    2044,
                    2045
                ],
                "linesep": [
                    2048,
                    2045
                ],
                "sep.rstrip": [
                    2045
                ],
                "val": [
                    2052,
                    2053,
                    2046,
                    2047
                ],
                "levstring.replace": [
                    2056
                ],
                "self._repr_categories_info": [
                    2061
                ],
                "formatter": [
                    2067,
                    2070
                ],
                "fmt.CategoricalFormatter": [
                    2067
                ],
                "length": [
                    2068
                ],
                "na_rep": [
                    2068
                ],
                "formatter.to_string": [
                    2070
                ],
                "_maxlen": [
                    2081,
                    2077,
                    2078,
                    2079
                ],
                "self._tidy_repr": [
                    2079
                ],
                "self._get_repr": [
                    2081,
                    2083
                ],
                "replace": [
                    2083
                ],
                "indexer.dtype.kind": [
                    2092
                ],
                "indexer.dtype": [
                    2092
                ],
                "indexer.astype": [
                    2093
                ],
                "self._codes.dtype": [
                    2093
                ],
                "np.integer": [
                    2152,
                    2100
                ],
                "extract_array": [
                    2722,
                    2122
                ],
                "value.categories": [
                    2131,
                    2133
                ],
                "new_codes": [
                    2682,
                    2683,
                    2132,
                    2135
                ],
                "value.codes": [
                    2133
                ],
                "Categorical.from_codes": [
                    2726,
                    2135
                ],
                "rvalue": [
                    2137,
                    2141,
                    2174
                ],
                "to_add": [
                    2145,
                    2141
                ],
                "difference": [
                    2141
                ],
                "com.is_null_slice": [
                    2160
                ],
                "com": [
                    2160
                ],
                "AssertionError": [
                    2161,
                    2166
                ],
                "slice": [
                    2169
                ],
                "lindexer": [
                    2176,
                    2174,
                    2175
                ],
                "self.categories.get_indexer": [
                    2493,
                    2174
                ],
                "self._maybe_coerce_indexer": [
                    2175
                ],
                "r": [
                    2208,
                    2204
                ],
                "counts": [
                    2208,
                    2413,
                    2414,
                    2418,
                    2204,
                    2207
                ],
                "libalgos.groupsort_indexer": [
                    2204
                ],
                "libalgos": [
                    2204
                ],
                "self.codes.astype": [
                    2353,
                    2205
                ],
                "categories.size": [
                    2205
                ],
                "counts.cumsum": [
                    2207
                ],
                "end": [
                    2208
                ],
                "zip": [
                    2208,
                    2209,
                    2760
                ],
                "func": [
                    2218,
                    2214,
                    2215
                ],
                "name": [
                    2560,
                    2214,
                    2217,
                    2574,
                    2557
                ],
                "self.check_for_ordered": [
                    2235,
                    2261
                ],
                "numeric_only": [
                    2236,
                    2262
                ],
                "good": [
                    2291,
                    2292,
                    2263,
                    2264,
                    2237,
                    2238
                ],
                "pointer": [
                    2240,
                    2241,
                    2244,
                    2264,
                    2266,
                    2267,
                    2270,
                    2238
                ],
                "min": [
                    2238
                ],
                "self._codes.min": [
                    2240
                ],
                "max": [
                    2264
                ],
                "self._codes.max": [
                    2266
                ],
                "sorted": [
                    2293
                ],
                "htable.mode_int64": [
                    2293
                ],
                "htable": [
                    2293
                ],
                "ensure_int64": [
                    2293
                ],
                "unique_codes": [
                    2344,
                    2347,
                    2340
                ],
                "unique1d": [
                    2340
                ],
                "take_codes": [
                    2347,
                    2349,
                    2350
                ],
                "np.sort": [
                    2349
                ],
                "cat.set_categories": [
                    2350
                ],
                "cat.categories.take": [
                    2350
                ],
                "original._constructor": [
                    2358
                ],
                "original": [
                    2358,
                    2359
                ],
                "original.categories.take": [
                    2359
                ],
                "original.categories": [
                    2359
                ],
                "uniques": [
                    2359
                ],
                "original.dtype": [
                    2359
                ],
                "self.is_dtype_equal": [
                    2374
                ],
                "other.codes": [
                    2380
                ],
                "np.array_equal": [
                    2382
                ],
                "other.dtype": [
                    2400
                ],
                "AttributeError": [
                    2401,
                    2554
                ],
                "self.value_counts": [
                    2413
                ],
                "freqs": [
                    2418,
                    2414
                ],
                "float": [
                    2414
                ],
                "counts.sum": [
                    2414
                ],
                "concat": [
                    2418
                ],
                "result.columns": [
                    2419
                ],
                "result.index.name": [
                    2420
                ],
                "result.index": [
                    2420
                ],
                "nv.validate_repeat": [
                    2427
                ],
                "nv": [
                    2427
                ],
                "axis": [
                    2427
                ],
                "self._codes.repeat": [
                    2428
                ],
                "repeats": [
                    2428
                ],
                "_extension_array_shared_docs": [
                    2425
                ],
                "concat_categorical": [
                    2440
                ],
                "to_concat": [
                    2440
                ],
                "code_values": [
                    2493,
                    2494,
                    2495
                ],
                "algorithms.isin": [
                    2495
                ],
                "algorithms": [
                    2495
                ],
                "PandasDelegate": [
                    2518
                ],
                "NoNewAttributesMixin": [
                    2518
                ],
                "self._validate": [
                    2545
                ],
                "data": [
                    2545,
                    2546,
                    2547,
                    2548,
                    2553
                ],
                "self._parent": [
                    2560,
                    2569,
                    2574,
                    2546,
                    2557,
                    2590
                ],
                "data.values": [
                    2546
                ],
                "self._index": [
                    2614,
                    2569,
                    2547,
                    2577
                ],
                "data.index": [
                    2547
                ],
                "self._name": [
                    2577,
                    2602,
                    2548
                ],
                "data.name": [
                    2548
                ],
                "self._freeze": [
                    2549
                ],
                "data.dtype": [
                    2553
                ],
                "staticmethod": [
                    2551
                ],
                "new_values": [
                    2560
                ],
                "self._parent.codes": [
                    2569
                ],
                "res": [
                    2576,
                    2577,
                    2575
                ],
                "delegate_names": [
                    2504,
                    2501
                ],
                "dtype_equal": [
                    2624,
                    2626
                ],
                "categories.dtype": [
                    2624,
                    2636,
                    2631
                ],
                "is_object_dtype": [
                    2631
                ],
                "_from_sequence": [
                    2636
                ],
                "categories.dtype.construct_array_type": [
                    2636
                ],
                "ensure_object": [
                    2640,
                    2642,
                    2643,
                    2639
                ],
                "hash_klass": [
                    2645,
                    2647
                ],
                "vec_klass": [
                    2645
                ],
                "vals": [
                    2649,
                    2645
                ],
                "_get_data_algo": [
                    2645,
                    2646
                ],
                "_hashtables": [
                    2645,
                    2646
                ],
                "_": [
                    2646
                ],
                "t": [
                    2648,
                    2649,
                    2647
                ],
                "t.map_locations": [
                    2648
                ],
                "t.lookup": [
                    2649
                ],
                "old_categories": [
                    2680,
                    2673,
                    2676
                ],
                "new_categories.equals": [
                    2676
                ],
                "new_categories.get_indexer": [
                    2680
                ],
                "hasattr": [
                    2687
                ],
                "list_like": [
                    2688,
                    2689,
                    2690,
                    2691,
                    2692,
                    2693,
                    2694,
                    2697,
                    2687
                ],
                "is_sequence": [
                    2691
                ],
                "is_iterator": [
                    2691
                ],
                "cat_codes": [
                    2725,
                    2726
                ],
                "values.codes.dtype": [
                    2725
                ],
                "iterables": [
                    2760,
                    2757
                ],
                "map": [
                    2760
                ],
                "_factorize_from_iterable": [
                    2760
                ],
                "it": [
                    2760
                ]
            },
            "filtered_variables_in_file": {
                "_take_msg": [
                    1944,
                    68
                ],
                "textwrap.dedent": [
                    68
                ],
                "textwrap": [
                    68
                ],
                "opname": [
                    99,
                    165,
                    167,
                    136,
                    143,
                    145,
                    82,
                    152,
                    158,
                    157,
                    126
                ],
                "op.__name__": [
                    82
                ],
                "op": [
                    82,
                    1570
                ],
                "other": [
                    133,
                    134,
                    135,
                    158,
                    165,
                    2374,
                    2375,
                    2377,
                    2380,
                    90,
                    93,
                    94,
                    2400,
                    103,
                    108,
                    110,
                    112,
                    115,
                    119,
                    121,
                    123
                ],
                "ABCDataFrame": [
                    90
                ],
                "ABCSeries": [
                    361,
                    90,
                    403,
                    1838
                ],
                "ABCIndexClass": [
                    361,
                    90
                ],
                "lib.item_from_zerodim": [
                    93
                ],
                "lib": [
                    93
                ],
                "is_list_like": [
                    1058,
                    2718,
                    2484,
                    1109,
                    2137,
                    94
                ],
                "self": [
                    2560,
                    518,
                    519,
                    520,
                    521,
                    522,
                    523,
                    2569,
                    2061,
                    2574,
                    2577,
                    530,
                    1530,
                    1554,
                    2068,
                    1558,
                    1559,
                    1560,
                    537,
                    1561,
                    1562,
                    1566,
                    2078,
                    2079,
                    2080,
                    2081,
                    547,
                    1060,
                    2083,
                    1574,
                    2590,
                    2602,
                    1067,
                    1068,
                    2093,
                    1070,
                    2101,
                    2614,
                    2105,
                    2107,
                    2108,
                    2126,
                    2131,
                    2133,
                    2135,
                    1113,
                    1114,
                    2141,
                    94,
                    98,
                    1125,
                    1126,
                    108,
                    110,
                    112,
                    115,
                    119,
                    121,
                    125,
                    126,
                    2174,
                    1152,
                    2175,
                    2176,
                    134,
                    135,
                    136,
                    1160,
                    139,
                    144,
                    146,
                    2203,
                    2205,
                    158,
                    2214,
                    1708,
                    1711,
                    1713,
                    1714,
                    2235,
                    2237,
                    2238,
                    2240,
                    1731,
                    708,
                    1732,
                    2244,
                    1737,
                    1738,
                    1743,
                    1237,
                    2261,
                    1239,
                    1240,
                    2263,
                    2264,
                    2266,
                    1245,
                    2270,
                    1247,
                    1763,
                    743,
                    1768,
                    745,
                    748,
                    749,
                    2289,
                    2291,
                    756,
                    1269,
                    1780,
                    2292,
                    2294,
                    771,
                    772,
                    1290,
                    1297,
                    1298,
                    787,
                    788,
                    1310,
                    1823,
                    1828,
                    2340,
                    1830,
                    2341,
                    1832,
                    809,
                    1323,
                    1324,
                    2348,
                    1839,
                    2353,
                    1842,
                    1336,
                    1848,
                    827,
                    1345,
                    1857,
                    2374,
                    2375,
                    1866,
                    1355,
                    2380,
                    2382,
                    349,
                    350,
                    1375,
                    2400,
                    1382,
                    1386,
                    2413,
                    882,
                    885,
                    2428,
                    2429,
                    1411,
                    1416,
                    1425,
                    1431,
                    1947,
                    1953,
                    418,
                    419,
                    1954,
                    1959,
                    1960,
                    1451,
                    1969,
                    1975,
                    2493,
                    1983,
                    2495,
                    1985,
                    450,
                    1474,
                    454,
                    455,
                    1992,
                    1993,
                    970,
                    462,
                    1998,
                    469,
                    1494,
                    476,
                    2014,
                    480,
                    2016,
                    2017,
                    2020,
                    1519,
                    2031,
                    2032,
                    498,
                    499,
                    2034,
                    2545,
                    2546,
                    2547,
                    2548,
                    2549,
                    1018,
                    2044,
                    2557,
                    1022
                ],
                "self.ordered": [
                    98,
                    1731,
                    454,
                    743,
                    1126,
                    745,
                    1160,
                    1416,
                    1068,
                    2348,
                    110,
                    115,
                    119,
                    1240,
                    2044,
                    1566
                ],
                "Categorical": [
                    484,
                    2502,
                    103,
                    488,
                    2505,
                    2726,
                    2732,
                    2125,
                    2135
                ],
                "msg": [
                    148,
                    152,
                    669,
                    160,
                    673,
                    2083,
                    1956,
                    165,
                    677,
                    1062,
                    1957,
                    681,
                    1066,
                    1705,
                    1706,
                    2084,
                    2216,
                    2217,
                    691,
                    692,
                    1122,
                    1123,
                    107,
                    109,
                    111,
                    113
                ],
                "self.categories": [
                    771,
                    134,
                    135,
                    1297,
                    1298,
                    787,
                    1425,
                    1558,
                    1559,
                    1560,
                    537,
                    1561,
                    2203,
                    1953,
                    1954,
                    1830,
                    1832,
                    1323,
                    1324,
                    1839,
                    1842,
                    1848,
                    2105,
                    2493,
                    1857,
                    2244,
                    2375,
                    1737,
                    2380,
                    1743,
                    2131,
                    1237,
                    2133,
                    2141,
                    2014,
                    2270,
                    2016,
                    2017,
                    2020,
                    108,
                    110,
                    1519,
                    112,
                    2032,
                    2034,
                    119,
                    121,
                    2174
                ],
                "other.categories": [
                    2375,
                    108,
                    2380,
                    110,
                    112,
                    119
                ],
                "other.ordered": [
                    115
                ],
                "self.categories.equals": [
                    2131,
                    2375,
                    119
                ],
                "other_codes": [
                    2377,
                    2379,
                    2382,
                    121,
                    123,
                    125,
                    127
                ],
                "_get_codes_for_values": [
                    1832,
                    1425,
                    1842,
                    121,
                    410
                ],
                "other._codes": [
                    2377,
                    123
                ],
                "mask": [
                    128,
                    1857,
                    130,
                    1733,
                    1734,
                    1736,
                    139,
                    140,
                    1520,
                    1521,
                    1524,
                    1527,
                    1851,
                    1852,
                    125,
                    1855
                ],
                "self._codes": [
                    2176,
                    1411,
                    136,
                    139,
                    530,
                    1559,
                    1560,
                    1561,
                    2078,
                    1823,
                    2080,
                    419,
                    1574,
                    1959,
                    1323,
                    1451,
                    2093,
                    1711,
                    1969,
                    1714,
                    2101,
                    2108,
                    2237,
                    2238,
                    2240,
                    1985,
                    708,
                    2382,
                    2263,
                    1240,
                    2264,
                    2266,
                    1245,
                    349,
                    1247,
                    1768,
                    1386,
                    1519,
                    2289,
                    499,
                    2291,
                    1269,
                    2292,
                    2428,
                    125,
                    126
                ],
                "f": [
                    167,
                    169,
                    126,
                    127
                ],
                "ret": [
                    130,
                    131,
                    136,
                    1323,
                    140,
                    141,
                    1325,
                    1326,
                    1451,
                    1452,
                    1330,
                    1331,
                    127
                ],
                "mask.any": [
                    128,
                    1852,
                    1734
                ],
                "is_scalar": [
                    2693,
                    133,
                    1429,
                    216,
                    1982
                ],
                "i": [
                    135,
                    136,
                    2101,
                    2102,
                    2105
                ],
                "self.categories.get_loc": [
                    1954,
                    1857,
                    1298,
                    135
                ],
                "np.repeat": [
                    144,
                    146
                ],
                "np": [
                    1153,
                    1527,
                    523,
                    1293,
                    1294,
                    144,
                    146,
                    1941,
                    1559,
                    1561,
                    1562,
                    1817,
                    414,
                    158,
                    675,
                    2725,
                    2092,
                    1325,
                    2349,
                    1330,
                    1843,
                    2100,
                    2103,
                    2492,
                    2242,
                    1736,
                    1738,
                    1742,
                    2382,
                    2268,
                    1245,
                    1246,
                    1247,
                    479,
                    2652,
                    355,
                    1763,
                    2152,
                    365,
                    1521,
                    1780,
                    1525,
                    375,
                    1528
                ],
                "msg.format": [
                    1123,
                    165,
                    1957,
                    2217,
                    1706,
                    1066,
                    152
                ],
                "np.array": [
                    355,
                    1763,
                    1738,
                    523,
                    1742,
                    1562,
                    158
                ],
                "f.__name__": [
                    167
                ],
                "key": [
                    2176,
                    1985,
                    2152,
                    201,
                    2156,
                    207,
                    2159,
                    2160,
                    2162,
                    2163,
                    2100,
                    2101,
                    2164,
                    2169,
                    2108,
                    1982
                ],
                "loc": [
                    216,
                    217,
                    220,
                    207
                ],
                "cat.categories.get_loc": [
                    207
                ],
                "cat.categories": [
                    973,
                    2350,
                    975,
                    207,
                    977,
                    2733,
                    894
                ],
                "cat": [
                    896,
                    897,
                    1152,
                    1153,
                    900,
                    1158,
                    1162,
                    1163,
                    1166,
                    788,
                    789,
                    791,
                    2341,
                    2344,
                    2732,
                    2733,
                    1070,
                    1071,
                    1072,
                    2350,
                    1074,
                    2734,
                    970,
                    973,
                    207,
                    975,
                    977,
                    979,
                    1519,
                    1520,
                    885,
                    887,
                    888,
                    891,
                    894
                ],
                "container": [
                    217,
                    220
                ],
                "loc_": [
                    220
                ],
                "_codes_doc": [
                    718,
                    223
                ],
                "ExtensionArray": [
                    234
                ],
                "PandasObject": [
                    234,
                    2518
                ],
                "__array_priority__": [
                    331
                ],
                "_dtype": [
                    332
                ],
                "CategoricalDtype": [
                    515,
                    1159,
                    399,
                    787,
                    665,
                    1068,
                    454,
                    586,
                    332,
                    341,
                    472,
                    1372,
                    613,
                    615,
                    360,
                    743,
                    745,
                    883,
                    758
                ],
                "_deprecations": [
                    334
                ],
                "_typ": [
                    335
                ],
                "dtype": [
                    514,
                    515,
                    771,
                    772,
                    518,
                    520,
                    522,
                    523,
                    399,
                    406,
                    665,
                    410,
                    666,
                    668,
                    1947,
                    418,
                    419,
                    1960,
                    1324,
                    1325,
                    694,
                    697,
                    586,
                    591,
                    593,
                    595,
                    341,
                    342,
                    597,
                    349,
                    350,
                    605,
                    613,
                    1766,
                    359,
                    360,
                    488,
                    615,
                    618,
                    1767,
                    2032,
                    2034,
                    378,
                    383
                ],
                "CategoricalDtype._from_values_or_dtype": [
                    665,
                    341
                ],
                "values": [
                    401,
                    1425,
                    403,
                    406,
                    410,
                    2718,
                    2721,
                    2722,
                    1828,
                    1829,
                    2725,
                    2726,
                    1832,
                    2727,
                    2732,
                    2484,
                    2488,
                    2491,
                    2492,
                    2493,
                    2624,
                    1732,
                    1733,
                    2629,
                    1735,
                    1736,
                    2631,
                    1738,
                    2636,
                    1742,
                    1743,
                    2639,
                    1745,
                    2642,
                    2645,
                    342,
                    349,
                    358,
                    360,
                    361,
                    364,
                    365,
                    366,
                    369,
                    373,
                    375,
                    376,
                    380,
                    382
                ],
                "categories": [
                    399,
                    666,
                    2203,
                    2205,
                    2209,
                    2726,
                    2733,
                    2735,
                    2624,
                    452,
                    454,
                    2630,
                    2631,
                    2636,
                    2640,
                    2643,
                    342,
                    2646,
                    605,
                    606,
                    610,
                    612,
                    613,
                    743,
                    745,
                    380,
                    382
                ],
                "ordered": [
                    881,
                    882,
                    883,
                    342,
                    666,
                    1022
                ],
                "fastpath": [
                    747,
                    348,
                    742
                ],
                "coerce_indexer_dtype": [
                    419,
                    1163,
                    1357,
                    1072,
                    2679,
                    2649,
                    349
                ],
                "dtype.categories": [
                    419,
                    605,
                    771,
                    359,
                    586,
                    410,
                    591,
                    593,
                    595,
                    597,
                    406,
                    694,
                    378,
                    668,
                    349
                ],
                "self._dtype": [
                    418,
                    462,
                    756,
                    476,
                    350
                ],
                "self._dtype.update_dtype": [
                    418,
                    350
                ],
                "null_mask": [
                    355,
                    2494,
                    373,
                    374,
                    375,
                    2492,
                    412,
                    414,
                    415
                ],
                "is_categorical_dtype": [
                    2721,
                    514,
                    358,
                    401,
                    2553
                ],
                "values.categories": [
                    360,
                    2725
                ],
                "dtype._ordered": [
                    360,
                    399,
                    383
                ],
                "maybe_infer_to_datetimelike": [
                    364
                ],
                "np.ndarray": [
                    2092,
                    365,
                    2652,
                    479
                ],
                "_convert_to_list_like": [
                    366
                ],
                "sanitize_dtype": [
                    376,
                    370,
                    372
                ],
                "isna": [
                    2145,
                    1454,
                    1839,
                    1295,
                    1949,
                    1982,
                    373,
                    1848,
                    2492,
                    1117,
                    1854
                ],
                "null_mask.any": [
                    412,
                    374
                ],
                "idx": [
                    1153,
                    1155,
                    1156,
                    1158,
                    375
                ],
                "np.where": [
                    1843,
                    1527,
                    375
                ],
                "sanitize_array": [
                    376,
                    2491
                ],
                "codes": [
                    896,
                    771,
                    772,
                    1290,
                    1291,
                    1293,
                    1294,
                    1425,
                    1426,
                    405,
                    1429,
                    1431,
                    410,
                    1306,
                    1308,
                    414,
                    415,
                    416,
                    1310,
                    1823,
                    419,
                    675,
                    676,
                    678,
                    679,
                    680,
                    1832,
                    682,
                    1959,
                    1960,
                    2727,
                    2734,
                    2735,
                    2353,
                    2354,
                    1844,
                    694,
                    2428,
                    697,
                    1851,
                    1853,
                    2429,
                    1855,
                    1857,
                    1866,
                    718,
                    606,
                    612,
                    616,
                    618,
                    2289,
                    2675,
                    2292,
                    2293,
                    2294,
                    2678,
                    2682,
                    380,
                    893,
                    382
                ],
                "factorize": [
                    380,
                    382
                ],
                "old_codes": [
                    402,
                    406
                ],
                "values._values.codes": [
                    403
                ],
                "values._values": [
                    403
                ],
                "values.codes": [
                    403,
                    2725,
                    2727
                ],
                "_recode_for_categories": [
                    771,
                    612,
                    2379,
                    2132,
                    405,
                    893,
                    606
                ],
                "values.dtype.categories": [
                    406
                ],
                "values.dtype": [
                    2624,
                    2726,
                    406
                ],
                "full_codes": [
                    416,
                    414,
                    415
                ],
                "np.ones": [
                    414
                ],
                "null_mask.shape": [
                    414
                ],
                "codes.dtype": [
                    414
                ],
                "self.dtype.categories": [
                    450,
                    1411,
                    1060,
                    1114,
                    455,
                    1386,
                    1067,
                    748,
                    749,
                    1113,
                    1018
                ],
                "self.dtype": [
                    1411,
                    518,
                    520,
                    1530,
                    1947,
                    1310,
                    1060,
                    1067,
                    1714,
                    2108,
                    1345,
                    450,
                    455,
                    1866,
                    1355,
                    469,
                    2135,
                    1113,
                    1114,
                    2400,
                    1768,
                    1386,
                    748,
                    749,
                    882,
                    499,
                    2294,
                    1018,
                    2429
                ],
                "new_dtype": [
                    897,
                    1159,
                    1162,
                    1163,
                    787,
                    789,
                    1068,
                    1071,
                    1072,
                    454,
                    456,
                    462,
                    743,
                    745,
                    749,
                    883,
                    756,
                    887,
                    891,
                    894
                ],
                "new_dtype.categories": [
                    456,
                    1163,
                    749,
                    1072,
                    887,
                    891,
                    894
                ],
                "categories.setter": [
                    452
                ],
                "self.dtype._ordered": [
                    882,
                    469
                ],
                "Ordered": [
                    465
                ],
                "self.codes": [
                    480,
                    771,
                    1732,
                    2340,
                    1290,
                    2353,
                    1431,
                    2205,
                    2495
                ],
                "Type": [
                    483
                ],
                "scalars": [
                    488
                ],
                "self._constructor": [
                    1768,
                    1866,
                    1713,
                    498,
                    2294,
                    1530,
                    2107,
                    2429
                ],
                "self._codes.copy": [
                    1240,
                    499,
                    1574
                ],
                "Dtype": [
                    502
                ],
                "cast": [
                    515
                ],
                "Union": [
                    515
                ],
                "self.dtype.update_dtype": [
                    518
                ],
                "copy": [
                    523,
                    519
                ],
                "self.copy": [
                    1152,
                    2341,
                    519,
                    970,
                    1070,
                    788,
                    885
                ],
                "self._set_dtype": [
                    522
                ],
                "ArrayLike": [
                    502
                ],
                "self._codes.size": [
                    530
                ],
                "cache_readonly": [
                    532,
                    525
                ],
                "self.categories.itemsize": [
                    537
                ],
                "to_list": [
                    549
                ],
                "tolist": [
                    549,
                    1975
                ],
                "cats": [
                    609,
                    610,
                    615,
                    584,
                    592,
                    2649,
                    594,
                    596,
                    2646,
                    2647,
                    2648,
                    601,
                    606,
                    607
                ],
                "Index": [
                    584,
                    2141
                ],
                "inferred_categories": [
                    584,
                    594,
                    592,
                    596
                ],
                "known_categories": [
                    585,
                    603,
                    589
                ],
                "dtype.categories.is_numeric": [
                    591
                ],
                "to_numeric": [
                    592
                ],
                "is_datetime64_dtype": [
                    593
                ],
                "to_datetime": [
                    594
                ],
                "is_timedelta64_dtype": [
                    595
                ],
                "to_timedelta": [
                    596
                ],
                "dtype.categories.is_boolean": [
                    597
                ],
                "true_values": [
                    601,
                    598,
                    599
                ],
                "cats.isin": [
                    601
                ],
                "inferred_codes": [
                    616,
                    612,
                    606
                ],
                "cats.is_monotonic_increasing": [
                    607
                ],
                "unsorted": [
                    609,
                    612
                ],
                "cats.copy": [
                    609
                ],
                "cats.sort_values": [
                    610
                ],
                "cls": [
                    697,
                    618
                ],
                "np.asarray": [
                    675,
                    1325,
                    1330,
                    1780,
                    1941,
                    2492
                ],
                "is_integer_dtype": [
                    1560,
                    676
                ],
                "is_float_dtype": [
                    678
                ],
                "icodes": [
                    680,
                    682,
                    679
                ],
                "codes.astype": [
                    679
                ],
                "warn": [
                    2597,
                    2584,
                    683,
                    1548,
                    2609,
                    1944,
                    1757
                ],
                "codes.max": [
                    694
                ],
                "codes.min": [
                    694
                ],
                "v": [
                    708,
                    709,
                    710,
                    1374,
                    1375
                ],
                "self._codes.view": [
                    708
                ],
                "v.flags.writeable": [
                    709
                ],
                "v.flags": [
                    709
                ],
                "_get_codes": [
                    718
                ],
                "_set_codes": [
                    718
                ],
                "CategoricalDtype._from_fastpath": [
                    1159,
                    743
                ],
                "inplace": [
                    1152,
                    899,
                    1165,
                    786,
                    788,
                    790,
                    1057,
                    1703,
                    808,
                    809,
                    1070,
                    1710,
                    1073,
                    826,
                    827,
                    969,
                    970,
                    978,
                    1108,
                    1126,
                    880,
                    885,
                    1017,
                    1022,
                    1151
                ],
                "validate_bool_kwarg": [
                    1057,
                    1703,
                    808,
                    969,
                    880,
                    786,
                    1108,
                    1017,
                    826,
                    1151
                ],
                "value": [
                    1425,
                    787,
                    1812,
                    1813,
                    1429,
                    1816,
                    1817,
                    1829,
                    1838,
                    1839,
                    1842,
                    1847,
                    1848,
                    1854,
                    1857,
                    1863,
                    2122,
                    2125,
                    2126,
                    2131,
                    2133,
                    2135,
                    2137
                ],
                "cat._dtype": [
                    897,
                    1162,
                    789,
                    1071
                ],
                "self.set_ordered": [
                    809,
                    827
                ],
                "new_categories": [
                    1158,
                    1160,
                    1058,
                    1059,
                    1060,
                    1067,
                    1068,
                    972,
                    973,
                    974,
                    975,
                    977,
                    1237,
                    1240,
                    1114,
                    1246,
                    1119,
                    1247,
                    1126,
                    883,
                    2676,
                    2680,
                    1018,
                    1022
                ],
                "rename": [
                    886
                ],
                "cat.dtype.categories": [
                    888,
                    1158,
                    887
                ],
                "cat.dtype": [
                    888,
                    1158,
                    887
                ],
                "cat._codes": [
                    896,
                    1153,
                    2344,
                    1163,
                    1072,
                    891
                ],
                "cat.codes": [
                    2734,
                    894
                ],
                "is_dict_like": [
                    972
                ],
                "new_categories.get": [
                    973
                ],
                "item": [
                    973,
                    975
                ],
                "self.set_categories": [
                    1125,
                    1022
                ],
                "already_included": [
                    1066,
                    1060,
                    1061
                ],
                "removals": [
                    1112,
                    1117,
                    1109,
                    1110
                ],
                "removal_set": [
                    1112,
                    1113,
                    1114
                ],
                "not_included": [
                    1113,
                    1123,
                    1118,
                    1121
                ],
                "c": [
                    1114
                ],
                "x": [
                    2023,
                    1118,
                    1119
                ],
                "notna": [
                    1476,
                    1118,
                    1119
                ],
                "inv": [
                    1153,
                    1163,
                    1156
                ],
                "np.unique": [
                    1153
                ],
                "idx.size": [
                    1155
                ],
                "cat.dtype.categories.take": [
                    1158
                ],
                "self.categories.map": [
                    1237
                ],
                "mapper": [
                    1237
                ],
                "self.from_codes": [
                    1310,
                    1239
                ],
                "np.any": [
                    1245
                ],
                "new_categories.insert": [
                    1246
                ],
                "np.nan": [
                    2242,
                    1736,
                    2103,
                    1817,
                    1559,
                    1561,
                    2268,
                    1246
                ],
                "np.take": [
                    1247
                ],
                "__eq__": [
                    1249
                ],
                "_cat_compare_op": [
                    1249,
                    1250,
                    1251,
                    1252,
                    1253,
                    1254
                ],
                "operator.eq": [
                    1249
                ],
                "operator": [
                    1249,
                    1250,
                    1251,
                    1252,
                    1253,
                    1254
                ],
                "__ne__": [
                    1250
                ],
                "operator.ne": [
                    1250
                ],
                "__lt__": [
                    1251
                ],
                "operator.lt": [
                    1251
                ],
                "__gt__": [
                    1252
                ],
                "operator.gt": [
                    1252
                ],
                "__le__": [
                    1253
                ],
                "operator.le": [
                    1253
                ],
                "__ge__": [
                    1254
                ],
                "operator.ge": [
                    1254
                ],
                "codes.ndim": [
                    1291
                ],
                "np.prod": [
                    1293
                ],
                "codes.shape": [
                    1293
                ],
                "periods": [
                    1293,
                    1294,
                    1305,
                    1306,
                    1308
                ],
                "np.roll": [
                    1294
                ],
                "ensure_platform_int": [
                    1294
                ],
                "fill_value": [
                    1953,
                    1954,
                    1957,
                    1959,
                    1295,
                    1296,
                    1297,
                    1298,
                    1303,
                    1306,
                    1308,
                    1949,
                    1950
                ],
                "take_1d": [
                    2682,
                    1323
                ],
                "self.categories.values": [
                    1323
                ],
                "is_dtype_equal": [
                    2624,
                    1324,
                    2126
                ],
                "self.categories.dtype": [
                    2032,
                    1324,
                    1830
                ],
                "is_extension_array_dtype": [
                    1326,
                    2631
                ],
                "result": [
                    2070,
                    2071,
                    2079,
                    2208,
                    2081,
                    2209,
                    2210,
                    2084,
                    2086,
                    1960,
                    1961,
                    1335,
                    1338,
                    1339,
                    1995,
                    1997,
                    1998,
                    2001,
                    1494,
                    1496,
                    2418,
                    2419,
                    2420,
                    2422
                ],
                "ops.maybe_dispatch_ufunc_to_dunder_op": [
                    1335
                ],
                "ops": [
                    1335
                ],
                "ufunc": [
                    1336,
                    1345
                ],
                "method": [
                    1826,
                    1829,
                    2574,
                    2575,
                    1812,
                    1813,
                    1336
                ],
                "inputs": [
                    1336
                ],
                "kwargs": [
                    2240,
                    2218,
                    2575,
                    1336,
                    2266,
                    1627,
                    2238,
                    2264
                ],
                "ufunc.__name__": [
                    1345
                ],
                "state": [
                    1350,
                    1354,
                    1355,
                    1356,
                    1357,
                    1358,
                    1362,
                    1365,
                    1366,
                    1368,
                    1371,
                    1372,
                    1374
                ],
                "self.dtype.validate_categories": [
                    1355
                ],
                "state.pop": [
                    1366,
                    1355,
                    1358
                ],
                "k": [
                    1374,
                    1375
                ],
                "state.items": [
                    1374
                ],
                "self._codes.nbytes": [
                    1386,
                    1411
                ],
                "self.dtype.categories.values.nbytes": [
                    1386
                ],
                "self.dtype.categories.values": [
                    1386
                ],
                "self.dtype.categories.memory_usage": [
                    1411
                ],
                "deep": [
                    1411
                ],
                "Series": [
                    2569,
                    1743,
                    1425,
                    2577,
                    1532
                ],
                "self.codes.searchsorted": [
                    1431
                ],
                "side": [
                    1431
                ],
                "sorter": [
                    1431
                ],
                "Substitution": [
                    2424,
                    1413
                ],
                "Appender": [
                    2425,
                    1414
                ],
                "_shared_docs": [
                    1414
                ],
                "isnull": [
                    1454
                ],
                "self.isna": [
                    1474,
                    1983
                ],
                "notnull": [
                    1476
                ],
                "self.notna": [
                    1494
                ],
                "code": [
                    1520,
                    1527,
                    1524,
                    1519
                ],
                "ncat": [
                    1520,
                    1521,
                    1525,
                    1527
                ],
                "ix": [
                    1528,
                    1521,
                    1530,
                    1532
                ],
                "clean": [
                    1521,
                    1523,
                    1524
                ],
                "np.arange": [
                    1521,
                    2725
                ],
                "mask.all": [
                    1521
                ],
                "dropna": [
                    2290,
                    1523,
                    2293
                ],
                "obs": [
                    1524,
                    1525
                ],
                "count": [
                    1532,
                    1525,
                    1527
                ],
                "np.bincount": [
                    1525,
                    1527
                ],
                "np.append": [
                    1528
                ],
                "CategoricalIndex": [
                    1532
                ],
                "self._internal_get_values": [
                    1554,
                    1975
                ],
                "is_datetimelike": [
                    1558
                ],
                "self.categories.take": [
                    1559
                ],
                "take": [
                    1561,
                    1963,
                    1959
                ],
                "self.categories.astype": [
                    1561
                ],
                "argsort": [
                    1627
                ],
                "args": [
                    1627,
                    2575
                ],
                "ascending": [
                    1627,
                    1708
                ],
                "kind": [
                    1627
                ],
                "na_position": [
                    1704,
                    1706,
                    1708
                ],
                "sorted_idx": [
                    1714,
                    1708,
                    1711
                ],
                "nargsort": [
                    1708
                ],
                "values.astype": [
                    1735
                ],
                "self.categories.is_numeric": [
                    1737
                ],
                "self.rename_categories": [
                    1743
                ],
                "rank": [
                    1743
                ],
                "validate_fillna_kwargs": [
                    1812
                ],
                "limit": [
                    1818
                ],
                "reshape": [
                    1828
                ],
                "self.to_dense": [
                    1828
                ],
                "astype": [
                    1829
                ],
                "interpolate_2d": [
                    1829
                ],
                "value.isin": [
                    1839
                ],
                "values_codes": [
                    1842,
                    1843,
                    1844
                ],
                "indexer": [
                    1959,
                    2679,
                    2092,
                    2093,
                    2094,
                    1843,
                    1844,
                    1941,
                    1943,
                    2682
                ],
                "is_hashable": [
                    1847
                ],
                "codes.copy": [
                    2682,
                    2675,
                    1853,
                    2678
                ],
                "deprecate_kwarg": [
                    1782
                ],
                "np.intp": [
                    1941
                ],
                "allow_fill": [
                    1945,
                    1959,
                    1942,
                    1951
                ],
                "from_codes": [
                    1960
                ],
                "take_nd": [
                    1963
                ],
                "contains": [
                    1985
                ],
                "num": [
                    2016,
                    2017,
                    1991,
                    1992,
                    1993,
                    2015
                ],
                "max_vals": [
                    1993,
                    1991
                ],
                "head": [
                    1992,
                    2016,
                    1995,
                    2018
                ],
                "_get_repr": [
                    1992,
                    1993
                ],
                "tail": [
                    1993,
                    2018,
                    1995,
                    2017
                ],
                "footer": [
                    1996,
                    2068
                ],
                "self._repr_footer": [
                    1998
                ],
                "max_categories": [
                    2015,
                    2014,
                    2007
                ],
                "get_option": [
                    2009,
                    2010,
                    2037
                ],
                "fmt.format_array": [
                    2016,
                    2017,
                    2020
                ],
                "fmt": [
                    2016,
                    2017,
                    2067,
                    2020
                ],
                "category_strs": [
                    2018,
                    2020,
                    2023,
                    2024,
                    2031,
                    2046
                ],
                "x.strip": [
                    2023
                ],
                "self._repr_categories": [
                    2031
                ],
                "levheader": [
                    2048,
                    2049,
                    2056,
                    2033,
                    2043
                ],
                "width": [
                    2036,
                    2037
                ],
                "height": [
                    2036
                ],
                "get_terminal_size": [
                    2036
                ],
                "max_width": [
                    2040,
                    2037,
                    2047
                ],
                "console.in_ipython_frontend": [
                    2038
                ],
                "console": [
                    2038
                ],
                "levstring": [
                    2048,
                    2051,
                    2053,
                    2056,
                    2041
                ],
                "start": [
                    2208,
                    2042,
                    2050,
                    2054
                ],
                "cur_col_len": [
                    2049,
                    2043,
                    2052,
                    2047
                ],
                "sep_len": [
                    2044,
                    2047
                ],
                "sep": [
                    2051,
                    2044,
                    2045
                ],
                "linesep": [
                    2048,
                    2045
                ],
                "sep.rstrip": [
                    2045
                ],
                "val": [
                    2052,
                    2053,
                    2046,
                    2047
                ],
                "levstring.replace": [
                    2056
                ],
                "self._repr_categories_info": [
                    2061
                ],
                "formatter": [
                    2067,
                    2070
                ],
                "fmt.CategoricalFormatter": [
                    2067
                ],
                "length": [
                    2068
                ],
                "na_rep": [
                    2068
                ],
                "formatter.to_string": [
                    2070
                ],
                "_maxlen": [
                    2081,
                    2077,
                    2078,
                    2079
                ],
                "self._tidy_repr": [
                    2079
                ],
                "self._get_repr": [
                    2081,
                    2083
                ],
                "replace": [
                    2083
                ],
                "indexer.dtype.kind": [
                    2092
                ],
                "indexer.dtype": [
                    2092
                ],
                "indexer.astype": [
                    2093
                ],
                "self._codes.dtype": [
                    2093
                ],
                "np.integer": [
                    2152,
                    2100
                ],
                "extract_array": [
                    2722,
                    2122
                ],
                "value.categories": [
                    2131,
                    2133
                ],
                "new_codes": [
                    2682,
                    2683,
                    2132,
                    2135
                ],
                "value.codes": [
                    2133
                ],
                "Categorical.from_codes": [
                    2726,
                    2135
                ],
                "rvalue": [
                    2137,
                    2141,
                    2174
                ],
                "to_add": [
                    2145,
                    2141
                ],
                "difference": [
                    2141
                ],
                "com.is_null_slice": [
                    2160
                ],
                "com": [
                    2160
                ],
                "lindexer": [
                    2176,
                    2174,
                    2175
                ],
                "self.categories.get_indexer": [
                    2493,
                    2174
                ],
                "self._maybe_coerce_indexer": [
                    2175
                ],
                "r": [
                    2208,
                    2204
                ],
                "counts": [
                    2208,
                    2413,
                    2414,
                    2418,
                    2204,
                    2207
                ],
                "libalgos.groupsort_indexer": [
                    2204
                ],
                "libalgos": [
                    2204
                ],
                "self.codes.astype": [
                    2353,
                    2205
                ],
                "categories.size": [
                    2205
                ],
                "counts.cumsum": [
                    2207
                ],
                "end": [
                    2208
                ],
                "func": [
                    2218,
                    2214,
                    2215
                ],
                "name": [
                    2560,
                    2214,
                    2217,
                    2574,
                    2557
                ],
                "self.check_for_ordered": [
                    2235,
                    2261
                ],
                "numeric_only": [
                    2236,
                    2262
                ],
                "good": [
                    2291,
                    2292,
                    2263,
                    2264,
                    2237,
                    2238
                ],
                "pointer": [
                    2240,
                    2241,
                    2244,
                    2264,
                    2266,
                    2267,
                    2270,
                    2238
                ],
                "self._codes.min": [
                    2240
                ],
                "self._codes.max": [
                    2266
                ],
                "htable.mode_int64": [
                    2293
                ],
                "htable": [
                    2293
                ],
                "ensure_int64": [
                    2293
                ],
                "unique_codes": [
                    2344,
                    2347,
                    2340
                ],
                "unique1d": [
                    2340
                ],
                "take_codes": [
                    2347,
                    2349,
                    2350
                ],
                "np.sort": [
                    2349
                ],
                "cat.set_categories": [
                    2350
                ],
                "cat.categories.take": [
                    2350
                ],
                "original._constructor": [
                    2358
                ],
                "original": [
                    2358,
                    2359
                ],
                "original.categories.take": [
                    2359
                ],
                "original.categories": [
                    2359
                ],
                "uniques": [
                    2359
                ],
                "original.dtype": [
                    2359
                ],
                "self.is_dtype_equal": [
                    2374
                ],
                "other.codes": [
                    2380
                ],
                "np.array_equal": [
                    2382
                ],
                "other.dtype": [
                    2400
                ],
                "self.value_counts": [
                    2413
                ],
                "freqs": [
                    2418,
                    2414
                ],
                "counts.sum": [
                    2414
                ],
                "concat": [
                    2418
                ],
                "result.columns": [
                    2419
                ],
                "result.index.name": [
                    2420
                ],
                "result.index": [
                    2420
                ],
                "nv.validate_repeat": [
                    2427
                ],
                "nv": [
                    2427
                ],
                "axis": [
                    2427
                ],
                "self._codes.repeat": [
                    2428
                ],
                "repeats": [
                    2428
                ],
                "_extension_array_shared_docs": [
                    2425
                ],
                "concat_categorical": [
                    2440
                ],
                "to_concat": [
                    2440
                ],
                "code_values": [
                    2493,
                    2494,
                    2495
                ],
                "algorithms.isin": [
                    2495
                ],
                "algorithms": [
                    2495
                ],
                "PandasDelegate": [
                    2518
                ],
                "NoNewAttributesMixin": [
                    2518
                ],
                "self._validate": [
                    2545
                ],
                "data": [
                    2545,
                    2546,
                    2547,
                    2548,
                    2553
                ],
                "self._parent": [
                    2560,
                    2569,
                    2574,
                    2546,
                    2557,
                    2590
                ],
                "data.values": [
                    2546
                ],
                "self._index": [
                    2614,
                    2569,
                    2547,
                    2577
                ],
                "data.index": [
                    2547
                ],
                "self._name": [
                    2577,
                    2602,
                    2548
                ],
                "data.name": [
                    2548
                ],
                "self._freeze": [
                    2549
                ],
                "data.dtype": [
                    2553
                ],
                "new_values": [
                    2560
                ],
                "self._parent.codes": [
                    2569
                ],
                "res": [
                    2576,
                    2577,
                    2575
                ],
                "delegate_names": [
                    2504,
                    2501
                ],
                "dtype_equal": [
                    2624,
                    2626
                ],
                "categories.dtype": [
                    2624,
                    2636,
                    2631
                ],
                "is_object_dtype": [
                    2631
                ],
                "_from_sequence": [
                    2636
                ],
                "categories.dtype.construct_array_type": [
                    2636
                ],
                "ensure_object": [
                    2640,
                    2642,
                    2643,
                    2639
                ],
                "hash_klass": [
                    2645,
                    2647
                ],
                "vec_klass": [
                    2645
                ],
                "vals": [
                    2649,
                    2645
                ],
                "_get_data_algo": [
                    2645,
                    2646
                ],
                "_hashtables": [
                    2645,
                    2646
                ],
                "_": [
                    2646
                ],
                "t": [
                    2648,
                    2649,
                    2647
                ],
                "t.map_locations": [
                    2648
                ],
                "t.lookup": [
                    2649
                ],
                "old_categories": [
                    2680,
                    2673,
                    2676
                ],
                "new_categories.equals": [
                    2676
                ],
                "new_categories.get_indexer": [
                    2680
                ],
                "list_like": [
                    2688,
                    2689,
                    2690,
                    2691,
                    2692,
                    2693,
                    2694,
                    2697,
                    2687
                ],
                "is_sequence": [
                    2691
                ],
                "is_iterator": [
                    2691
                ],
                "cat_codes": [
                    2725,
                    2726
                ],
                "values.codes.dtype": [
                    2725
                ],
                "iterables": [
                    2760,
                    2757
                ],
                "_factorize_from_iterable": [
                    2760
                ],
                "it": [
                    2760
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_161/pandas/tests/series/test_missing.py",
                "test_function": "test_fillna_categorical_with_new_categories",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"fill_value, expected_output\",\n        [\n            (Series([\"a\", \"b\", \"c\", \"d\", \"e\"]), [\"a\", \"b\", \"b\", \"d\", \"e\"]),\n            (Series([\"b\", \"d\", \"a\", \"d\", \"a\"]), [\"a\", \"d\", \"b\", \"d\", \"a\"]),\n            (\n                Series(\n                    Categorical(\n                        [\"b\", \"d\", \"a\", \"d\", \"a\"], categories=[\"b\", \"c\", \"d\", \"e\", \"a\"]\n                    )\n                ),\n                [\"a\", \"d\", \"b\", \"d\", \"a\"],\n            ),\n        ],\n    )\n    def test_fillna_categorical_with_new_categories(self, fill_value, expected_output):\n        # GH 26215\n        data = [\"a\", np.nan, \"b\", np.nan, np.nan]\n        s = Series(Categorical(data, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"]))\n        exp = Series(Categorical(expected_output, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"]))\n        tm.assert_series_equal(s.fillna(fill_value), exp)",
                "test_error": "AssertionError: Series are different  Series values are different (20.0 %) [left]:  [a, b, c, d, e] [right]: [a, b, b, d, e]",
                "full_test_error": "self = <pandas.tests.series.test_missing.TestSeriesMissingData object at 0x7fc77bbcba30>\nfill_value = 0    a\n1    b\n2    c\n3    d\n4    e\ndtype: object\nexpected_output = ['a', 'b', 'b', 'd', 'e']\n\n    @pytest.mark.parametrize(\n        \"fill_value, expected_output\",\n        [\n            (Series([\"a\", \"b\", \"c\", \"d\", \"e\"]), [\"a\", \"b\", \"b\", \"d\", \"e\"]),\n            (Series([\"b\", \"d\", \"a\", \"d\", \"a\"]), [\"a\", \"d\", \"b\", \"d\", \"a\"]),\n            (\n                Series(\n                    Categorical(\n                        [\"b\", \"d\", \"a\", \"d\", \"a\"], categories=[\"b\", \"c\", \"d\", \"e\", \"a\"]\n                    )\n                ),\n                [\"a\", \"d\", \"b\", \"d\", \"a\"],\n            ),\n        ],\n    )\n    def test_fillna_categorical_with_new_categories(self, fill_value, expected_output):\n        # GH 26215\n        data = [\"a\", np.nan, \"b\", np.nan, np.nan]\n        s = Series(Categorical(data, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"]))\n        exp = Series(Categorical(expected_output, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"]))\n>       tm.assert_series_equal(s.fillna(fill_value), exp)\n\npandas/tests/series/test_missing.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: Series are different\nE   \nE   Series values are different (20.0 %)\nE   [left]:  [a, b, c, d, e]\nE   [right]: [a, b, b, d, e]\n\npandas/_libs/testing.pyx:178: AssertionError",
                "traceback": "pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: Series are different\nE   \nE   Series values are different (20.0 %)\nE   [left]:  [a, b, c, d, e]\nE   [right]: [a, b, b, d, e]\n\npandas/_libs/testing.pyx:178: AssertionError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('fill_value, expected_output', [(Series(['a', 'b', 'c', 'd', 'e']), ['a', 'b', 'b', 'd', 'e']), (Series(['b', 'd', 'a', 'd', 'a']), ['a', 'd', 'b', 'd', 'a']), (Series(Categorical(['b', 'd', 'a', 'd', 'a'], categories=['b', 'c', 'd', 'e', 'a'])), ['a', 'd', 'b', 'd', 'a'])])"
                ]
            },
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_161/pandas/tests/series/test_missing.py",
                "test_function": "test_fillna_categorical_with_new_categories",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"fill_value, expected_output\",\n        [\n            (Series([\"a\", \"b\", \"c\", \"d\", \"e\"]), [\"a\", \"b\", \"b\", \"d\", \"e\"]),\n            (Series([\"b\", \"d\", \"a\", \"d\", \"a\"]), [\"a\", \"d\", \"b\", \"d\", \"a\"]),\n            (\n                Series(\n                    Categorical(\n                        [\"b\", \"d\", \"a\", \"d\", \"a\"], categories=[\"b\", \"c\", \"d\", \"e\", \"a\"]\n                    )\n                ),\n                [\"a\", \"d\", \"b\", \"d\", \"a\"],\n            ),\n        ],\n    )\n    def test_fillna_categorical_with_new_categories(self, fill_value, expected_output):\n        # GH 26215\n        data = [\"a\", np.nan, \"b\", np.nan, np.nan]\n        s = Series(Categorical(data, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"]))\n        exp = Series(Categorical(expected_output, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"]))\n        tm.assert_series_equal(s.fillna(fill_value), exp)",
                "test_error": "AssertionError: Series are different  Series values are different (40.0 %) [left]:  [b, d, a, d, a] [right]: [a, d, b, d, a]",
                "full_test_error": "self = <pandas.tests.series.test_missing.TestSeriesMissingData object at 0x7fc77be5dac0>\nfill_value = 0    b\n1    d\n2    a\n3    d\n4    a\ndtype: object\nexpected_output = ['a', 'd', 'b', 'd', 'a']\n\n    @pytest.mark.parametrize(\n        \"fill_value, expected_output\",\n        [\n            (Series([\"a\", \"b\", \"c\", \"d\", \"e\"]), [\"a\", \"b\", \"b\", \"d\", \"e\"]),\n            (Series([\"b\", \"d\", \"a\", \"d\", \"a\"]), [\"a\", \"d\", \"b\", \"d\", \"a\"]),\n            (\n                Series(\n                    Categorical(\n                        [\"b\", \"d\", \"a\", \"d\", \"a\"], categories=[\"b\", \"c\", \"d\", \"e\", \"a\"]\n                    )\n                ),\n                [\"a\", \"d\", \"b\", \"d\", \"a\"],\n            ),\n        ],\n    )\n    def test_fillna_categorical_with_new_categories(self, fill_value, expected_output):\n        # GH 26215\n        data = [\"a\", np.nan, \"b\", np.nan, np.nan]\n        s = Series(Categorical(data, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"]))\n        exp = Series(Categorical(expected_output, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"]))\n>       tm.assert_series_equal(s.fillna(fill_value), exp)\n\npandas/tests/series/test_missing.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: Series are different\nE   \nE   Series values are different (40.0 %)\nE   [left]:  [b, d, a, d, a]\nE   [right]: [a, d, b, d, a]\n\npandas/_libs/testing.pyx:178: AssertionError",
                "traceback": "pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: Series are different\nE   \nE   Series values are different (40.0 %)\nE   [left]:  [b, d, a, d, a]\nE   [right]: [a, d, b, d, a]\n\npandas/_libs/testing.pyx:178: AssertionError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('fill_value, expected_output', [(Series(['a', 'b', 'c', 'd', 'e']), ['a', 'b', 'b', 'd', 'e']), (Series(['b', 'd', 'a', 'd', 'a']), ['a', 'd', 'b', 'd', 'a']), (Series(Categorical(['b', 'd', 'a', 'd', 'a'], categories=['b', 'c', 'd', 'e', 'a'])), ['a', 'd', 'b', 'd', 'a'])])"
                ]
            },
            {
                "test_path": "/home/ubuntu/Desktop/bgp_envs_local/repos/pandas_161/pandas/tests/series/test_missing.py",
                "test_function": "test_fillna_categorical_with_new_categories",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"fill_value, expected_output\",\n        [\n            (Series([\"a\", \"b\", \"c\", \"d\", \"e\"]), [\"a\", \"b\", \"b\", \"d\", \"e\"]),\n            (Series([\"b\", \"d\", \"a\", \"d\", \"a\"]), [\"a\", \"d\", \"b\", \"d\", \"a\"]),\n            (\n                Series(\n                    Categorical(\n                        [\"b\", \"d\", \"a\", \"d\", \"a\"], categories=[\"b\", \"c\", \"d\", \"e\", \"a\"]\n                    )\n                ),\n                [\"a\", \"d\", \"b\", \"d\", \"a\"],\n            ),\n        ],\n    )\n    def test_fillna_categorical_with_new_categories(self, fill_value, expected_output):\n        # GH 26215\n        data = [\"a\", np.nan, \"b\", np.nan, np.nan]\n        s = Series(Categorical(data, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"]))\n        exp = Series(Categorical(expected_output, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"]))\n        tm.assert_series_equal(s.fillna(fill_value), exp)",
                "test_error": "AssertionError: Series are different  Series values are different (40.0 %) [left]:  [b, d, a, d, a] [right]: [a, d, b, d, a]",
                "full_test_error": "self = <pandas.tests.series.test_missing.TestSeriesMissingData object at 0x7fc77befaa00>\nfill_value = 0    b\n1    d\n2    a\n3    d\n4    a\ndtype: category\nCategories (5, object): [b, c, d, e, a]\nexpected_output = ['a', 'd', 'b', 'd', 'a']\n\n    @pytest.mark.parametrize(\n        \"fill_value, expected_output\",\n        [\n            (Series([\"a\", \"b\", \"c\", \"d\", \"e\"]), [\"a\", \"b\", \"b\", \"d\", \"e\"]),\n            (Series([\"b\", \"d\", \"a\", \"d\", \"a\"]), [\"a\", \"d\", \"b\", \"d\", \"a\"]),\n            (\n                Series(\n                    Categorical(\n                        [\"b\", \"d\", \"a\", \"d\", \"a\"], categories=[\"b\", \"c\", \"d\", \"e\", \"a\"]\n                    )\n                ),\n                [\"a\", \"d\", \"b\", \"d\", \"a\"],\n            ),\n        ],\n    )\n    def test_fillna_categorical_with_new_categories(self, fill_value, expected_output):\n        # GH 26215\n        data = [\"a\", np.nan, \"b\", np.nan, np.nan]\n        s = Series(Categorical(data, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"]))\n        exp = Series(Categorical(expected_output, categories=[\"a\", \"b\", \"c\", \"d\", \"e\"]))\n>       tm.assert_series_equal(s.fillna(fill_value), exp)\n\npandas/tests/series/test_missing.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: Series are different\nE   \nE   Series values are different (40.0 %)\nE   [left]:  [b, d, a, d, a]\nE   [right]: [a, d, b, d, a]\n\npandas/_libs/testing.pyx:178: AssertionError",
                "traceback": "pandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)\nE   AssertionError: Series are different\nE   \nE   Series values are different (40.0 %)\nE   [left]:  [b, d, a, d, a]\nE   [right]: [a, d, b, d, a]\n\npandas/_libs/testing.pyx:178: AssertionError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('fill_value, expected_output', [(Series(['a', 'b', 'c', 'd', 'e']), ['a', 'b', 'b', 'd', 'e']), (Series(['b', 'd', 'a', 'd', 'a']), ['a', 'd', 'b', 'd', 'a']), (Series(Categorical(['b', 'd', 'a', 'd', 'a'], categories=['b', 'c', 'd', 'e', 'a'])), ['a', 'd', 'b', 'd', 'a'])])"
                ]
            }
        ]
    }
}