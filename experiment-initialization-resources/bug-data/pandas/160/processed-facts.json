{
    "1.1.1": "def _can_use_numexpr(op, op_str, a, b, dtype_check):\n    \n    if op_str is not None:\n\n        # required min elements (otherwise we are adding overhead)\n        if np.prod(a.shape) > _MIN_ELEMENTS:\n\n            # check for dtype compatibility\n            dtypes = set()\n            for o in [a, b]:\n                if hasattr(o, \"dtypes\"):\n                    s = o.dtypes.value_counts()\n                    if len(s) > 1:\n                        return False\n                    dtypes |= set(s.index.astype(str))\n                elif isinstance(o, np.ndarray):\n                    dtypes |= {o.dtype.name}\n\n            # allowed are a superset\n            if not len(dtypes) or _ALLOWED_DTYPES[dtype_check] >= dtypes:\n                return True\n\n    return False\n",
    "1.1.2": "return a boolean if we WILL be using numexpr ",
    "1.2.1": "pandas/core/computation/expressions.py",
    "1.2.2": "import numpy as np",
    "1.3.1": null,
    "1.3.2": null,
    "1.4.1": null,
    "1.4.2": null,
    "1.5.1": [
        "    @pytest.mark.parametrize(\n        \"arith\", (\"add\", \"sub\", \"mul\", \"mod\", \"truediv\", \"floordiv\")\n    )\n    @pytest.mark.parametrize(\"axis\", (0, 1))\n    def test_frame_series_axis(self, axis, arith):\n        # GH#26736 Dataframe.floordiv(Series, axis=1) fails\n        if axis == 1 and arith == \"floordiv\":\n            pytest.xfail(\"'floordiv' does not succeed with axis=1 #27636\")\n\n        df = self.frame\n        if axis == 1:\n            other = self.frame.iloc[0, :]\n        else:\n            other = self.frame.iloc[:, 0]\n\n        expr._MIN_ELEMENTS = 0\n\n        op_func = getattr(df, arith)\n\n        expr.set_use_numexpr(False)\n        expected = op_func(other, axis=axis)\n        expr.set_use_numexpr(True)\n\n        result = op_func(other, axis=axis)\n        assert_frame_equal(expected, result)",
        "    @pytest.mark.parametrize(\n        \"arith\", (\"add\", \"sub\", \"mul\", \"mod\", \"truediv\", \"floordiv\")\n    )\n    @pytest.mark.parametrize(\"axis\", (0, 1))\n    def test_frame_series_axis(self, axis, arith):\n        # GH#26736 Dataframe.floordiv(Series, axis=1) fails\n        if axis == 1 and arith == \"floordiv\":\n            pytest.xfail(\"'floordiv' does not succeed with axis=1 #27636\")\n\n        df = self.frame\n        if axis == 1:\n            other = self.frame.iloc[0, :]\n        else:\n            other = self.frame.iloc[:, 0]\n\n        expr._MIN_ELEMENTS = 0\n\n        op_func = getattr(df, arith)\n\n        expr.set_use_numexpr(False)\n        expected = op_func(other, axis=axis)\n        expr.set_use_numexpr(True)\n\n        result = op_func(other, axis=axis)\n        assert_frame_equal(expected, result)",
        "    @pytest.mark.parametrize(\n        \"arith\", (\"add\", \"sub\", \"mul\", \"mod\", \"truediv\", \"floordiv\")\n    )\n    @pytest.mark.parametrize(\"axis\", (0, 1))\n    def test_frame_series_axis(self, axis, arith):\n        # GH#26736 Dataframe.floordiv(Series, axis=1) fails\n        if axis == 1 and arith == \"floordiv\":\n            pytest.xfail(\"'floordiv' does not succeed with axis=1 #27636\")\n\n        df = self.frame\n        if axis == 1:\n            other = self.frame.iloc[0, :]\n        else:\n            other = self.frame.iloc[:, 0]\n\n        expr._MIN_ELEMENTS = 0\n\n        op_func = getattr(df, arith)\n\n        expr.set_use_numexpr(False)\n        expected = op_func(other, axis=axis)\n        expr.set_use_numexpr(True)\n\n        result = op_func(other, axis=axis)\n        assert_frame_equal(expected, result)",
        "    @pytest.mark.parametrize(\n        \"arith\", (\"add\", \"sub\", \"mul\", \"mod\", \"truediv\", \"floordiv\")\n    )\n    @pytest.mark.parametrize(\"axis\", (0, 1))\n    def test_frame_series_axis(self, axis, arith):\n        # GH#26736 Dataframe.floordiv(Series, axis=1) fails\n        if axis == 1 and arith == \"floordiv\":\n            pytest.xfail(\"'floordiv' does not succeed with axis=1 #27636\")\n\n        df = self.frame\n        if axis == 1:\n            other = self.frame.iloc[0, :]\n        else:\n            other = self.frame.iloc[:, 0]\n\n        expr._MIN_ELEMENTS = 0\n\n        op_func = getattr(df, arith)\n\n        expr.set_use_numexpr(False)\n        expected = op_func(other, axis=axis)\n        expr.set_use_numexpr(True)\n\n        result = op_func(other, axis=axis)\n        assert_frame_equal(expected, result)"
    ],
    "1.5.2": [
        "pandas/tests/test_expressions.py",
        "pandas/tests/test_expressions.py",
        "pandas/tests/test_expressions.py",
        "pandas/tests/test_expressions.py"
    ],
    "2.1.1": [
        [
            "E                       AttributeError: 'numpy.dtype' object has no attribute 'value_counts'"
        ],
        [
            "E                       AttributeError: 'numpy.dtype' object has no attribute 'value_counts'"
        ],
        [
            "E                       AttributeError: 'numpy.dtype' object has no attribute 'value_counts'"
        ],
        [
            "E                       AttributeError: 'numpy.dtype' object has no attribute 'value_counts'"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.test_expressions.TestExpressions object at 0x7f5909b46ee0>\naxis = 1, arith = 'add'\n\n    @pytest.mark.parametrize(\n        \"arith\", (\"add\", \"sub\", \"mul\", \"mod\", \"truediv\", \"floordiv\")\n    )\n    @pytest.mark.parametrize(\"axis\", (0, 1))\n    def test_frame_series_axis(self, axis, arith):\n        # GH#26736 Dataframe.floordiv(Series, axis=1) fails\n        if axis == 1 and arith == \"floordiv\":\n            pytest.xfail(\"'floordiv' does not succeed with axis=1 #27636\")\n    \n        df = self.frame\n        if axis == 1:\n            other = self.frame.iloc[0, :]\n        else:\n            other = self.frame.iloc[:, 0]\n    \n        expr._MIN_ELEMENTS = 0\n    \n        op_func = getattr(df, arith)\n    \n        expr.set_use_numexpr(False)\n        expected = op_func(other, axis=axis)\n        expr.set_use_numexpr(True)\n    \n>       result = op_func(other, axis=axis)\n\npandas/tests/test_expressions.py:457: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/ops/__init__.py:1010: in f\n    return _combine_series_frame(\npandas/core/ops/__init__.py:910: in _combine_series_frame\n    return self._combine_match_columns(other, func, level=level)\npandas/core/frame.py:5332: in _combine_match_columns\n    return ops.dispatch_to_series(left, right, func, axis=\"columns\")\npandas/core/ops/__init__.py:515: in dispatch_to_series\n    new_data = expressions.evaluate(column_op, str_rep, left, right)\npandas/core/computation/expressions.py:220: in evaluate\n    return _evaluate(op, op_str, a, b, **eval_kwargs)\npandas/core/computation/expressions.py:124: in _evaluate_numexpr\n    result = _evaluate_standard(op, op_str, a, b)\npandas/core/computation/expressions.py:70: in _evaluate_standard\n    return op(a, b)\npandas/core/ops/__init__.py:503: in column_op\n    return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}\npandas/core/ops/__init__.py:503: in <dictcomp>\n    return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}\npandas/core/ops/array_ops.py:121: in na_op\n    result = expressions.evaluate(op, str_rep, x, y, **eval_kwargs)\npandas/core/computation/expressions.py:220: in evaluate\n    return _evaluate(op, op_str, a, b, **eval_kwargs)\npandas/core/computation/expressions.py:101: in _evaluate_numexpr\n    if _can_use_numexpr(op, op_str, a, b, \"evaluate\"):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop = <built-in function add>, op_str = '+'\na = 0       0.447468\n1       2.038717\n2      -0.150998\n3       0.302648\n4      -1.526606\n          ...   \n9995   -0.084683\n9996   -0.776424\n9997    0.789572\n9998    0.652298\n9999   -1.449932\nName: A, Length: 10000, dtype: float64\nb = 0.44746782510187705, dtype_check = 'evaluate'\n\n    def _can_use_numexpr(op, op_str, a, b, dtype_check):\n        \"\"\" return a boolean if we WILL be using numexpr \"\"\"\n        if op_str is not None:\n    \n            # required min elements (otherwise we are adding overhead)\n            if np.prod(a.shape) > _MIN_ELEMENTS:\n    \n                # check for dtype compatibility\n                dtypes = set()\n                for o in [a, b]:\n                    if hasattr(o, \"dtypes\"):\n>                       s = o.dtypes.value_counts()",
            "\npandas/core/computation/expressions.py:84: AttributeError"
        ],
        [
            "self = <pandas.tests.test_expressions.TestExpressions object at 0x7f5908513400>\naxis = 1, arith = 'sub'\n\n    @pytest.mark.parametrize(\n        \"arith\", (\"add\", \"sub\", \"mul\", \"mod\", \"truediv\", \"floordiv\")\n    )\n    @pytest.mark.parametrize(\"axis\", (0, 1))\n    def test_frame_series_axis(self, axis, arith):\n        # GH#26736 Dataframe.floordiv(Series, axis=1) fails\n        if axis == 1 and arith == \"floordiv\":\n            pytest.xfail(\"'floordiv' does not succeed with axis=1 #27636\")\n    \n        df = self.frame\n        if axis == 1:\n            other = self.frame.iloc[0, :]\n        else:\n            other = self.frame.iloc[:, 0]\n    \n        expr._MIN_ELEMENTS = 0\n    \n        op_func = getattr(df, arith)\n    \n        expr.set_use_numexpr(False)\n        expected = op_func(other, axis=axis)\n        expr.set_use_numexpr(True)\n    \n>       result = op_func(other, axis=axis)\n\npandas/tests/test_expressions.py:457: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/ops/__init__.py:1010: in f\n    return _combine_series_frame(\npandas/core/ops/__init__.py:910: in _combine_series_frame\n    return self._combine_match_columns(other, func, level=level)\npandas/core/frame.py:5332: in _combine_match_columns\n    return ops.dispatch_to_series(left, right, func, axis=\"columns\")\npandas/core/ops/__init__.py:515: in dispatch_to_series\n    new_data = expressions.evaluate(column_op, str_rep, left, right)\npandas/core/computation/expressions.py:220: in evaluate\n    return _evaluate(op, op_str, a, b, **eval_kwargs)\npandas/core/computation/expressions.py:124: in _evaluate_numexpr\n    result = _evaluate_standard(op, op_str, a, b)\npandas/core/computation/expressions.py:70: in _evaluate_standard\n    return op(a, b)\npandas/core/ops/__init__.py:503: in column_op\n    return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}\npandas/core/ops/__init__.py:503: in <dictcomp>\n    return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}\npandas/core/ops/array_ops.py:121: in na_op\n    result = expressions.evaluate(op, str_rep, x, y, **eval_kwargs)\npandas/core/computation/expressions.py:220: in evaluate\n    return _evaluate(op, op_str, a, b, **eval_kwargs)\npandas/core/computation/expressions.py:101: in _evaluate_numexpr\n    if _can_use_numexpr(op, op_str, a, b, \"evaluate\"):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop = <built-in function sub>, op_str = '-'\na = 0       0.447468\n1       2.038717\n2      -0.150998\n3       0.302648\n4      -1.526606\n          ...   \n9995   -0.084683\n9996   -0.776424\n9997    0.789572\n9998    0.652298\n9999   -1.449932\nName: A, Length: 10000, dtype: float64\nb = 0.44746782510187705, dtype_check = 'evaluate'\n\n    def _can_use_numexpr(op, op_str, a, b, dtype_check):\n        \"\"\" return a boolean if we WILL be using numexpr \"\"\"\n        if op_str is not None:\n    \n            # required min elements (otherwise we are adding overhead)\n            if np.prod(a.shape) > _MIN_ELEMENTS:\n    \n                # check for dtype compatibility\n                dtypes = set()\n                for o in [a, b]:\n                    if hasattr(o, \"dtypes\"):\n>                       s = o.dtypes.value_counts()",
            "\npandas/core/computation/expressions.py:84: AttributeError"
        ],
        [
            "self = <pandas.tests.test_expressions.TestExpressions object at 0x7f59093ae790>\naxis = 1, arith = 'mul'\n\n    @pytest.mark.parametrize(\n        \"arith\", (\"add\", \"sub\", \"mul\", \"mod\", \"truediv\", \"floordiv\")\n    )\n    @pytest.mark.parametrize(\"axis\", (0, 1))\n    def test_frame_series_axis(self, axis, arith):\n        # GH#26736 Dataframe.floordiv(Series, axis=1) fails\n        if axis == 1 and arith == \"floordiv\":\n            pytest.xfail(\"'floordiv' does not succeed with axis=1 #27636\")\n    \n        df = self.frame\n        if axis == 1:\n            other = self.frame.iloc[0, :]\n        else:\n            other = self.frame.iloc[:, 0]\n    \n        expr._MIN_ELEMENTS = 0\n    \n        op_func = getattr(df, arith)\n    \n        expr.set_use_numexpr(False)\n        expected = op_func(other, axis=axis)\n        expr.set_use_numexpr(True)\n    \n>       result = op_func(other, axis=axis)\n\npandas/tests/test_expressions.py:457: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/ops/__init__.py:1010: in f\n    return _combine_series_frame(\npandas/core/ops/__init__.py:910: in _combine_series_frame\n    return self._combine_match_columns(other, func, level=level)\npandas/core/frame.py:5332: in _combine_match_columns\n    return ops.dispatch_to_series(left, right, func, axis=\"columns\")\npandas/core/ops/__init__.py:515: in dispatch_to_series\n    new_data = expressions.evaluate(column_op, str_rep, left, right)\npandas/core/computation/expressions.py:220: in evaluate\n    return _evaluate(op, op_str, a, b, **eval_kwargs)\npandas/core/computation/expressions.py:124: in _evaluate_numexpr\n    result = _evaluate_standard(op, op_str, a, b)\npandas/core/computation/expressions.py:70: in _evaluate_standard\n    return op(a, b)\npandas/core/ops/__init__.py:503: in column_op\n    return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}\npandas/core/ops/__init__.py:503: in <dictcomp>\n    return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}\npandas/core/ops/array_ops.py:121: in na_op\n    result = expressions.evaluate(op, str_rep, x, y, **eval_kwargs)\npandas/core/computation/expressions.py:220: in evaluate\n    return _evaluate(op, op_str, a, b, **eval_kwargs)\npandas/core/computation/expressions.py:101: in _evaluate_numexpr\n    if _can_use_numexpr(op, op_str, a, b, \"evaluate\"):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop = <built-in function mul>, op_str = '*'\na = 0       0.447468\n1       2.038717\n2      -0.150998\n3       0.302648\n4      -1.526606\n          ...   \n9995   -0.084683\n9996   -0.776424\n9997    0.789572\n9998    0.652298\n9999   -1.449932\nName: A, Length: 10000, dtype: float64\nb = 0.44746782510187705, dtype_check = 'evaluate'\n\n    def _can_use_numexpr(op, op_str, a, b, dtype_check):\n        \"\"\" return a boolean if we WILL be using numexpr \"\"\"\n        if op_str is not None:\n    \n            # required min elements (otherwise we are adding overhead)\n            if np.prod(a.shape) > _MIN_ELEMENTS:\n    \n                # check for dtype compatibility\n                dtypes = set()\n                for o in [a, b]:\n                    if hasattr(o, \"dtypes\"):\n>                       s = o.dtypes.value_counts()",
            "\npandas/core/computation/expressions.py:84: AttributeError"
        ],
        [
            "self = <pandas.tests.test_expressions.TestExpressions object at 0x7f59085f68b0>\naxis = 1, arith = 'truediv'\n\n    @pytest.mark.parametrize(\n        \"arith\", (\"add\", \"sub\", \"mul\", \"mod\", \"truediv\", \"floordiv\")\n    )\n    @pytest.mark.parametrize(\"axis\", (0, 1))\n    def test_frame_series_axis(self, axis, arith):\n        # GH#26736 Dataframe.floordiv(Series, axis=1) fails\n        if axis == 1 and arith == \"floordiv\":\n            pytest.xfail(\"'floordiv' does not succeed with axis=1 #27636\")\n    \n        df = self.frame\n        if axis == 1:\n            other = self.frame.iloc[0, :]\n        else:\n            other = self.frame.iloc[:, 0]\n    \n        expr._MIN_ELEMENTS = 0\n    \n        op_func = getattr(df, arith)\n    \n        expr.set_use_numexpr(False)\n        expected = op_func(other, axis=axis)\n        expr.set_use_numexpr(True)\n    \n>       result = op_func(other, axis=axis)\n\npandas/tests/test_expressions.py:457: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/ops/__init__.py:1010: in f\n    return _combine_series_frame(\npandas/core/ops/__init__.py:910: in _combine_series_frame\n    return self._combine_match_columns(other, func, level=level)\npandas/core/frame.py:5332: in _combine_match_columns\n    return ops.dispatch_to_series(left, right, func, axis=\"columns\")\npandas/core/ops/__init__.py:515: in dispatch_to_series\n    new_data = expressions.evaluate(column_op, str_rep, left, right)\npandas/core/computation/expressions.py:220: in evaluate\n    return _evaluate(op, op_str, a, b, **eval_kwargs)\npandas/core/computation/expressions.py:124: in _evaluate_numexpr\n    result = _evaluate_standard(op, op_str, a, b)\npandas/core/computation/expressions.py:70: in _evaluate_standard\n    return op(a, b)\npandas/core/ops/__init__.py:503: in column_op\n    return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}\npandas/core/ops/__init__.py:503: in <dictcomp>\n    return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}\npandas/core/ops/array_ops.py:121: in na_op\n    result = expressions.evaluate(op, str_rep, x, y, **eval_kwargs)\npandas/core/computation/expressions.py:220: in evaluate\n    return _evaluate(op, op_str, a, b, **eval_kwargs)\npandas/core/computation/expressions.py:101: in _evaluate_numexpr\n    if _can_use_numexpr(op, op_str, a, b, \"evaluate\"):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop = <built-in function truediv>, op_str = '/'\na = 0       0.447468\n1       2.038717\n2      -0.150998\n3       0.302648\n4      -1.526606\n          ...   \n9995   -0.084683\n9996   -0.776424\n9997    0.789572\n9998    0.652298\n9999   -1.449932\nName: A, Length: 10000, dtype: float64\nb = 0.44746782510187705, dtype_check = 'evaluate'\n\n    def _can_use_numexpr(op, op_str, a, b, dtype_check):\n        \"\"\" return a boolean if we WILL be using numexpr \"\"\"\n        if op_str is not None:\n    \n            # required min elements (otherwise we are adding overhead)\n            if np.prod(a.shape) > _MIN_ELEMENTS:\n    \n                # check for dtype compatibility\n                dtypes = set()\n                for o in [a, b]:\n                    if hasattr(o, \"dtypes\"):\n>                       s = o.dtypes.value_counts()",
            "\npandas/core/computation/expressions.py:84: AttributeError"
        ]
    ],
    "2.2.1": [
        [
            {
                "a.shape": {
                    "value": "(10000, 4)",
                    "shape": "2",
                    "omitted": false
                },
                "a": {
                    "value": "             A         B        ... 2701\n\n[10000 rows x 4 columns]",
                    "shape": "(10000, 4)",
                    "omitted": true
                },
                "b": {
                    "value": "A   -0.281956\nB   -0.129204\nC   -1.126496\nD    0.420298\nName: 0, dtype: float64",
                    "shape": "(4,)",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "a.shape": {
                    "value": "(10000,)",
                    "shape": "1",
                    "omitted": false
                },
                "a": {
                    "value": "0      -0.281956\n1       1.857807\n2       0.094731\n3       0.187699\n4      -1.401435\n          ...   \n9995   -1.405113\n9996   -1.871689\n9997   -1.603852\n9998   -2.824581\n9999   -0.712052\nName: A, Length: 10000, dtype: float64",
                    "shape": "(10000,)",
                    "omitted": false
                },
                "b": {
                    "value": "-0.2819555304176959",
                    "shape": "()",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "a.shape": {
                    "value": "(10000,)",
                    "shape": "1",
                    "omitted": false
                },
                "a": {
                    "value": "array([-0.28195553,  1.85780699,  0.09473138, ..., -1.60385167,\n       -2.82458138, -0.71205214])",
                    "shape": "(10000,)",
                    "omitted": false
                },
                "b": {
                    "value": "-0.2819555304176959",
                    "shape": "()",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "a.shape": {
                    "value": "(10000,)",
                    "shape": "1",
                    "omitted": false
                },
                "a": {
                    "value": "0      -0.129204\n1       1.277388\n2      -0.736813\n3       2.326408\n4      -0.119705\n          ...   \n9995    1.275275\n9996   -0.098276\n9997    0.031445\n9998   -0.976919\n9999   -0.667815\nName: B, Length: 10000, dtype: float64",
                    "shape": "(10000,)",
                    "omitted": false
                },
                "b": {
                    "value": "-0.12920428795683195",
                    "shape": "()",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "a.shape": {
                    "value": "(10000,)",
                    "shape": "1",
                    "omitted": false
                },
                "a": {
                    "value": "array([-0.12920429,  1.27738763, -0.73681251, ...,  0.03144483,\n       -0.97691867, -0.66781497])",
                    "shape": "(10000,)",
                    "omitted": false
                },
                "b": {
                    "value": "-0.12920428795683195",
                    "shape": "()",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "a.shape": {
                    "value": "(10000,)",
                    "shape": "1",
                    "omitted": false
                },
                "a": {
                    "value": "0      -1.126496\n1      -0.317999\n2       0.340844\n3       1.508054\n4       1.163066\n          ...   \n9995   -0.850677\n9996   -0.897791\n9997   -0.303734\n9998   -0.624829\n9999    1.325709\nName: C, Length: 10000, dtype: float64",
                    "shape": "(10000,)",
                    "omitted": false
                },
                "b": {
                    "value": "-1.1264963925385931",
                    "shape": "()",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "a.shape": {
                    "value": "(10000,)",
                    "shape": "1",
                    "omitted": false
                },
                "a": {
                    "value": "array([-1.12649639, -0.31799913,  0.34084439, ..., -0.30373365,\n       -0.62482896,  1.32570918])",
                    "shape": "(10000,)",
                    "omitted": false
                },
                "b": {
                    "value": "-1.1264963925385931",
                    "shape": "()",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "a.shape": {
                    "value": "(10000,)",
                    "shape": "1",
                    "omitted": false
                },
                "a": {
                    "value": "0       0.420298\n1      -0.134347\n2       0.248499\n3       1.251081\n4      -1.889407\n          ...   \n9995    0.268980\n9996   -2.016123\n9997   -0.784253\n9998    0.125372\n9999    1.962701\nName: D, Length: 10000, dtype: float64",
                    "shape": "(10000,)",
                    "omitted": false
                },
                "b": {
                    "value": "0.4202979367815833",
                    "shape": "()",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "a.shape": {
                    "value": "(10000,)",
                    "shape": "1",
                    "omitted": false
                },
                "a": {
                    "value": "array([ 0.42029794, -0.13434659,  0.24849923, ..., -0.78425332,\n        0.12537192,  1.96270098])",
                    "shape": "(10000,)",
                    "omitted": false
                },
                "b": {
                    "value": "0.4202979367815833",
                    "shape": "()",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {}
        ]
    ],
    "2.2.2": [
        [
            {
                "a.shape": "tuple",
                "a": "DataFrame",
                "b": "Series",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "a.shape": "tuple",
                "a": "ndarray",
                "b": "float64",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "a.shape": "tuple",
                "a": "ndarray",
                "b": "float64",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "a.shape": "tuple",
                "a": "ndarray",
                "b": "float64",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "a.shape": "tuple",
                "a": "ndarray",
                "b": "float64",
                "dtype_check": "str"
            },
            {}
        ]
    ],
    "2.3.1": [
        [
            {
                "a.shape": {
                    "value": "(10000, 4)",
                    "shape": "2",
                    "omitted": false
                },
                "a": {
                    "value": "             A         B        ... 5014\n\n[10000 rows x 4 columns]",
                    "shape": "(10000, 4)",
                    "omitted": true
                },
                "b": {
                    "value": "A    0.860523\nB    0.902642\nC   -0.094905\nD    0.748779\nName: 0, dtype: float64",
                    "shape": "(4,)",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "op_str": {
                    "value": "'+'",
                    "shape": "1",
                    "omitted": false
                },
                "a.shape": {
                    "value": "(10000,)",
                    "shape": "1",
                    "omitted": false
                },
                "a": {
                    "value": "0       0.860523\n1       0.600685\n2      -0.248761\n3      -1.294108\n4      -0.261455\n          ...   \n9995   -0.551457\n9996   -0.450818\n9997    1.011830\n9998   -1.201648\n9999   -0.676529\nName: A, Length: 10000, dtype: float64",
                    "shape": "(10000,)",
                    "omitted": false
                },
                "b": {
                    "value": "0.8605226204361099",
                    "shape": "()",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {
                "dtypes": {
                    "value": "{'float64'}",
                    "shape": "1",
                    "omitted": false
                },
                "o": {
                    "value": "0.8605226204361099",
                    "shape": "()",
                    "omitted": false
                },
                "o.ndim": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "o.dtype": {
                    "value": "dtype('float64')",
                    "shape": "()",
                    "omitted": false
                }
            }
        ],
        [
            {
                "op_str": {
                    "value": "'+'",
                    "shape": "1",
                    "omitted": false
                },
                "a.shape": {
                    "value": "(10000,)",
                    "shape": "1",
                    "omitted": false
                },
                "a": {
                    "value": "0       0.902642\n1       0.620304\n2      -0.398753\n3       0.530236\n4       1.500763\n          ...   \n9995    0.680907\n9996    0.280578\n9997    0.889644\n9998    1.033656\n9999   -0.872534\nName: B, Length: 10000, dtype: float64",
                    "shape": "(10000,)",
                    "omitted": false
                },
                "b": {
                    "value": "0.9026422975969507",
                    "shape": "()",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {
                "dtypes": {
                    "value": "{'float64'}",
                    "shape": "1",
                    "omitted": false
                },
                "o": {
                    "value": "0.9026422975969507",
                    "shape": "()",
                    "omitted": false
                },
                "o.ndim": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "o.dtype": {
                    "value": "dtype('float64')",
                    "shape": "()",
                    "omitted": false
                }
            }
        ],
        [
            {
                "op_str": {
                    "value": "'+'",
                    "shape": "1",
                    "omitted": false
                },
                "a.shape": {
                    "value": "(10000,)",
                    "shape": "1",
                    "omitted": false
                },
                "a": {
                    "value": "0      -0.094905\n1      -1.027266\n2       1.009580\n3      -1.229111\n4      -0.350806\n          ...   \n9995    0.185209\n9996   -0.737369\n9997   -0.678257\n9998   -0.036706\n9999    0.229394\nName: C, Length: 10000, dtype: float64",
                    "shape": "(10000,)",
                    "omitted": false
                },
                "b": {
                    "value": "-0.0949050286528264",
                    "shape": "()",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {
                "dtypes": {
                    "value": "{'float64'}",
                    "shape": "1",
                    "omitted": false
                },
                "o": {
                    "value": "-0.0949050286528264",
                    "shape": "()",
                    "omitted": false
                },
                "o.ndim": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "o.dtype": {
                    "value": "dtype('float64')",
                    "shape": "()",
                    "omitted": false
                }
            }
        ],
        [
            {
                "op_str": {
                    "value": "'+'",
                    "shape": "1",
                    "omitted": false
                },
                "a.shape": {
                    "value": "(10000,)",
                    "shape": "1",
                    "omitted": false
                },
                "a": {
                    "value": "0       0.748779\n1       1.582603\n2      -1.000161\n3       1.418702\n4      -1.543300\n          ...   \n9995    0.420727\n9996   -0.589302\n9997   -0.513602\n9998   -0.714042\n9999   -2.305014\nName: D, Length: 10000, dtype: float64",
                    "shape": "(10000,)",
                    "omitted": false
                },
                "b": {
                    "value": "0.7487786199969316",
                    "shape": "()",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {
                "dtypes": {
                    "value": "{'float64'}",
                    "shape": "1",
                    "omitted": false
                },
                "o": {
                    "value": "0.7487786199969316",
                    "shape": "()",
                    "omitted": false
                },
                "o.ndim": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "o.dtype": {
                    "value": "dtype('float64')",
                    "shape": "()",
                    "omitted": false
                }
            }
        ],
        [
            {
                "op_str": {
                    "value": "'-'",
                    "shape": "1",
                    "omitted": false
                },
                "a.shape": {
                    "value": "(10000,)",
                    "shape": "1",
                    "omitted": false
                },
                "a": {
                    "value": "0       0.860523\n1       0.600685\n2      -0.248761\n3      -1.294108\n4      -0.261455\n          ...   \n9995   -0.551457\n9996   -0.450818\n9997    1.011830\n9998   -1.201648\n9999   -0.676529\nName: A, Length: 10000, dtype: float64",
                    "shape": "(10000,)",
                    "omitted": false
                },
                "b": {
                    "value": "0.8605226204361099",
                    "shape": "()",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {
                "dtypes": {
                    "value": "{'float64'}",
                    "shape": "1",
                    "omitted": false
                },
                "o": {
                    "value": "0.8605226204361099",
                    "shape": "()",
                    "omitted": false
                },
                "o.ndim": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "o.dtype": {
                    "value": "dtype('float64')",
                    "shape": "()",
                    "omitted": false
                }
            }
        ],
        [
            {
                "op_str": {
                    "value": "'-'",
                    "shape": "1",
                    "omitted": false
                },
                "a.shape": {
                    "value": "(10000,)",
                    "shape": "1",
                    "omitted": false
                },
                "a": {
                    "value": "0       0.902642\n1       0.620304\n2      -0.398753\n3       0.530236\n4       1.500763\n          ...   \n9995    0.680907\n9996    0.280578\n9997    0.889644\n9998    1.033656\n9999   -0.872534\nName: B, Length: 10000, dtype: float64",
                    "shape": "(10000,)",
                    "omitted": false
                },
                "b": {
                    "value": "0.9026422975969507",
                    "shape": "()",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {
                "dtypes": {
                    "value": "{'float64'}",
                    "shape": "1",
                    "omitted": false
                },
                "o": {
                    "value": "0.9026422975969507",
                    "shape": "()",
                    "omitted": false
                },
                "o.ndim": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "o.dtype": {
                    "value": "dtype('float64')",
                    "shape": "()",
                    "omitted": false
                }
            }
        ],
        [
            {
                "op_str": {
                    "value": "'-'",
                    "shape": "1",
                    "omitted": false
                },
                "a.shape": {
                    "value": "(10000,)",
                    "shape": "1",
                    "omitted": false
                },
                "a": {
                    "value": "0      -0.094905\n1      -1.027266\n2       1.009580\n3      -1.229111\n4      -0.350806\n          ...   \n9995    0.185209\n9996   -0.737369\n9997   -0.678257\n9998   -0.036706\n9999    0.229394\nName: C, Length: 10000, dtype: float64",
                    "shape": "(10000,)",
                    "omitted": false
                },
                "b": {
                    "value": "-0.0949050286528264",
                    "shape": "()",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {
                "dtypes": {
                    "value": "{'float64'}",
                    "shape": "1",
                    "omitted": false
                },
                "o": {
                    "value": "-0.0949050286528264",
                    "shape": "()",
                    "omitted": false
                },
                "o.ndim": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "o.dtype": {
                    "value": "dtype('float64')",
                    "shape": "()",
                    "omitted": false
                }
            }
        ],
        [
            {
                "op_str": {
                    "value": "'-'",
                    "shape": "1",
                    "omitted": false
                },
                "a.shape": {
                    "value": "(10000,)",
                    "shape": "1",
                    "omitted": false
                },
                "a": {
                    "value": "0       0.748779\n1       1.582603\n2      -1.000161\n3       1.418702\n4      -1.543300\n          ...   \n9995    0.420727\n9996   -0.589302\n9997   -0.513602\n9998   -0.714042\n9999   -2.305014\nName: D, Length: 10000, dtype: float64",
                    "shape": "(10000,)",
                    "omitted": false
                },
                "b": {
                    "value": "0.7487786199969316",
                    "shape": "()",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {
                "dtypes": {
                    "value": "{'float64'}",
                    "shape": "1",
                    "omitted": false
                },
                "o": {
                    "value": "0.7487786199969316",
                    "shape": "()",
                    "omitted": false
                },
                "o.ndim": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "o.dtype": {
                    "value": "dtype('float64')",
                    "shape": "()",
                    "omitted": false
                }
            }
        ],
        [
            {
                "op_str": {
                    "value": "'*'",
                    "shape": "1",
                    "omitted": false
                },
                "a.shape": {
                    "value": "(10000,)",
                    "shape": "1",
                    "omitted": false
                },
                "a": {
                    "value": "0       0.860523\n1       0.600685\n2      -0.248761\n3      -1.294108\n4      -0.261455\n          ...   \n9995   -0.551457\n9996   -0.450818\n9997    1.011830\n9998   -1.201648\n9999   -0.676529\nName: A, Length: 10000, dtype: float64",
                    "shape": "(10000,)",
                    "omitted": false
                },
                "b": {
                    "value": "0.8605226204361099",
                    "shape": "()",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {
                "dtypes": {
                    "value": "{'float64'}",
                    "shape": "1",
                    "omitted": false
                },
                "o": {
                    "value": "0.8605226204361099",
                    "shape": "()",
                    "omitted": false
                },
                "o.ndim": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "o.dtype": {
                    "value": "dtype('float64')",
                    "shape": "()",
                    "omitted": false
                }
            }
        ],
        [
            {
                "op_str": {
                    "value": "'*'",
                    "shape": "1",
                    "omitted": false
                },
                "a.shape": {
                    "value": "(10000,)",
                    "shape": "1",
                    "omitted": false
                },
                "a": {
                    "value": "0       0.902642\n1       0.620304\n2      -0.398753\n3       0.530236\n4       1.500763\n          ...   \n9995    0.680907\n9996    0.280578\n9997    0.889644\n9998    1.033656\n9999   -0.872534\nName: B, Length: 10000, dtype: float64",
                    "shape": "(10000,)",
                    "omitted": false
                },
                "b": {
                    "value": "0.9026422975969507",
                    "shape": "()",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {
                "dtypes": {
                    "value": "{'float64'}",
                    "shape": "1",
                    "omitted": false
                },
                "o": {
                    "value": "0.9026422975969507",
                    "shape": "()",
                    "omitted": false
                },
                "o.ndim": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "o.dtype": {
                    "value": "dtype('float64')",
                    "shape": "()",
                    "omitted": false
                }
            }
        ],
        [
            {
                "op_str": {
                    "value": "'*'",
                    "shape": "1",
                    "omitted": false
                },
                "a.shape": {
                    "value": "(10000,)",
                    "shape": "1",
                    "omitted": false
                },
                "a": {
                    "value": "0      -0.094905\n1      -1.027266\n2       1.009580\n3      -1.229111\n4      -0.350806\n          ...   \n9995    0.185209\n9996   -0.737369\n9997   -0.678257\n9998   -0.036706\n9999    0.229394\nName: C, Length: 10000, dtype: float64",
                    "shape": "(10000,)",
                    "omitted": false
                },
                "b": {
                    "value": "-0.0949050286528264",
                    "shape": "()",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {
                "dtypes": {
                    "value": "{'float64'}",
                    "shape": "1",
                    "omitted": false
                },
                "o": {
                    "value": "-0.0949050286528264",
                    "shape": "()",
                    "omitted": false
                },
                "o.ndim": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "o.dtype": {
                    "value": "dtype('float64')",
                    "shape": "()",
                    "omitted": false
                }
            }
        ],
        [
            {
                "op_str": {
                    "value": "'*'",
                    "shape": "1",
                    "omitted": false
                },
                "a.shape": {
                    "value": "(10000,)",
                    "shape": "1",
                    "omitted": false
                },
                "a": {
                    "value": "0       0.748779\n1       1.582603\n2      -1.000161\n3       1.418702\n4      -1.543300\n          ...   \n9995    0.420727\n9996   -0.589302\n9997   -0.513602\n9998   -0.714042\n9999   -2.305014\nName: D, Length: 10000, dtype: float64",
                    "shape": "(10000,)",
                    "omitted": false
                },
                "b": {
                    "value": "0.7487786199969316",
                    "shape": "()",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {
                "dtypes": {
                    "value": "{'float64'}",
                    "shape": "1",
                    "omitted": false
                },
                "o": {
                    "value": "0.7487786199969316",
                    "shape": "()",
                    "omitted": false
                },
                "o.ndim": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "o.dtype": {
                    "value": "dtype('float64')",
                    "shape": "()",
                    "omitted": false
                }
            }
        ],
        [
            {
                "a.shape": {
                    "value": "(10000,)",
                    "shape": "1",
                    "omitted": false
                },
                "a": {
                    "value": "0       0.860523\n1       0.600685\n2      -0.248761\n3      -1.294108\n4      -0.261455\n          ...   \n9995   -0.551457\n9996   -0.450818\n9997    1.011830\n9998   -1.201648\n9999   -0.676529\nName: A, Length: 10000, dtype: float64",
                    "shape": "(10000,)",
                    "omitted": false
                },
                "b": {
                    "value": "0.8605226204361099",
                    "shape": "()",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "a.shape": {
                    "value": "(10000,)",
                    "shape": "1",
                    "omitted": false
                },
                "a": {
                    "value": "array([ 0.86052262,  0.60068509, -0.24876073, ...,  1.01182994,\n       -1.20164812, -0.67652929])",
                    "shape": "(10000,)",
                    "omitted": false
                },
                "b": {
                    "value": "0.8605226204361099",
                    "shape": "()",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "a.shape": {
                    "value": "(10000,)",
                    "shape": "1",
                    "omitted": false
                },
                "a": {
                    "value": "0       0.902642\n1       0.620304\n2      -0.398753\n3       0.530236\n4       1.500763\n          ...   \n9995    0.680907\n9996    0.280578\n9997    0.889644\n9998    1.033656\n9999   -0.872534\nName: B, Length: 10000, dtype: float64",
                    "shape": "(10000,)",
                    "omitted": false
                },
                "b": {
                    "value": "0.9026422975969507",
                    "shape": "()",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "a.shape": {
                    "value": "(10000,)",
                    "shape": "1",
                    "omitted": false
                },
                "a": {
                    "value": "array([ 0.9026423 ,  0.62030423, -0.39875261, ...,  0.88964367,\n        1.03365643, -0.87253407])",
                    "shape": "(10000,)",
                    "omitted": false
                },
                "b": {
                    "value": "0.9026422975969507",
                    "shape": "()",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "a.shape": {
                    "value": "(10000,)",
                    "shape": "1",
                    "omitted": false
                },
                "a": {
                    "value": "0      -0.094905\n1      -1.027266\n2       1.009580\n3      -1.229111\n4      -0.350806\n          ...   \n9995    0.185209\n9996   -0.737369\n9997   -0.678257\n9998   -0.036706\n9999    0.229394\nName: C, Length: 10000, dtype: float64",
                    "shape": "(10000,)",
                    "omitted": false
                },
                "b": {
                    "value": "-0.0949050286528264",
                    "shape": "()",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "a.shape": {
                    "value": "(10000,)",
                    "shape": "1",
                    "omitted": false
                },
                "a": {
                    "value": "array([-0.09490503, -1.02726583,  1.00958005, ..., -0.67825664,\n       -0.03670614,  0.22939423])",
                    "shape": "(10000,)",
                    "omitted": false
                },
                "b": {
                    "value": "-0.0949050286528264",
                    "shape": "()",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "a.shape": {
                    "value": "(10000,)",
                    "shape": "1",
                    "omitted": false
                },
                "a": {
                    "value": "0       0.748779\n1       1.582603\n2      -1.000161\n3       1.418702\n4      -1.543300\n          ...   \n9995    0.420727\n9996   -0.589302\n9997   -0.513602\n9998   -0.714042\n9999   -2.305014\nName: D, Length: 10000, dtype: float64",
                    "shape": "(10000,)",
                    "omitted": false
                },
                "b": {
                    "value": "0.7487786199969316",
                    "shape": "()",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "a.shape": {
                    "value": "(10000,)",
                    "shape": "1",
                    "omitted": false
                },
                "a": {
                    "value": "array([ 0.74877862,  1.58260329, -1.00016056, ..., -0.51360207,\n       -0.71404221, -2.30501354])",
                    "shape": "(10000,)",
                    "omitted": false
                },
                "b": {
                    "value": "0.7487786199969316",
                    "shape": "()",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "op_str": {
                    "value": "'/'",
                    "shape": "1",
                    "omitted": false
                },
                "a.shape": {
                    "value": "(10000,)",
                    "shape": "1",
                    "omitted": false
                },
                "a": {
                    "value": "0       0.860523\n1       0.600685\n2      -0.248761\n3      -1.294108\n4      -0.261455\n          ...   \n9995   -0.551457\n9996   -0.450818\n9997    1.011830\n9998   -1.201648\n9999   -0.676529\nName: A, Length: 10000, dtype: float64",
                    "shape": "(10000,)",
                    "omitted": false
                },
                "b": {
                    "value": "0.8605226204361099",
                    "shape": "()",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {
                "dtypes": {
                    "value": "{'float64'}",
                    "shape": "1",
                    "omitted": false
                },
                "o": {
                    "value": "0.8605226204361099",
                    "shape": "()",
                    "omitted": false
                },
                "o.ndim": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "o.dtype": {
                    "value": "dtype('float64')",
                    "shape": "()",
                    "omitted": false
                }
            }
        ],
        [
            {
                "op_str": {
                    "value": "'/'",
                    "shape": "1",
                    "omitted": false
                },
                "a.shape": {
                    "value": "(10000,)",
                    "shape": "1",
                    "omitted": false
                },
                "a": {
                    "value": "0       0.902642\n1       0.620304\n2      -0.398753\n3       0.530236\n4       1.500763\n          ...   \n9995    0.680907\n9996    0.280578\n9997    0.889644\n9998    1.033656\n9999   -0.872534\nName: B, Length: 10000, dtype: float64",
                    "shape": "(10000,)",
                    "omitted": false
                },
                "b": {
                    "value": "0.9026422975969507",
                    "shape": "()",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {
                "dtypes": {
                    "value": "{'float64'}",
                    "shape": "1",
                    "omitted": false
                },
                "o": {
                    "value": "0.9026422975969507",
                    "shape": "()",
                    "omitted": false
                },
                "o.ndim": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "o.dtype": {
                    "value": "dtype('float64')",
                    "shape": "()",
                    "omitted": false
                }
            }
        ],
        [
            {
                "op_str": {
                    "value": "'/'",
                    "shape": "1",
                    "omitted": false
                },
                "a.shape": {
                    "value": "(10000,)",
                    "shape": "1",
                    "omitted": false
                },
                "a": {
                    "value": "0      -0.094905\n1      -1.027266\n2       1.009580\n3      -1.229111\n4      -0.350806\n          ...   \n9995    0.185209\n9996   -0.737369\n9997   -0.678257\n9998   -0.036706\n9999    0.229394\nName: C, Length: 10000, dtype: float64",
                    "shape": "(10000,)",
                    "omitted": false
                },
                "b": {
                    "value": "-0.0949050286528264",
                    "shape": "()",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {
                "dtypes": {
                    "value": "{'float64'}",
                    "shape": "1",
                    "omitted": false
                },
                "o": {
                    "value": "-0.0949050286528264",
                    "shape": "()",
                    "omitted": false
                },
                "o.ndim": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "o.dtype": {
                    "value": "dtype('float64')",
                    "shape": "()",
                    "omitted": false
                }
            }
        ],
        [
            {
                "op_str": {
                    "value": "'/'",
                    "shape": "1",
                    "omitted": false
                },
                "a.shape": {
                    "value": "(10000,)",
                    "shape": "1",
                    "omitted": false
                },
                "a": {
                    "value": "0       0.748779\n1       1.582603\n2      -1.000161\n3       1.418702\n4      -1.543300\n          ...   \n9995    0.420727\n9996   -0.589302\n9997   -0.513602\n9998   -0.714042\n9999   -2.305014\nName: D, Length: 10000, dtype: float64",
                    "shape": "(10000,)",
                    "omitted": false
                },
                "b": {
                    "value": "0.7487786199969316",
                    "shape": "()",
                    "omitted": false
                },
                "dtype_check": {
                    "value": "'evaluate'",
                    "shape": "8",
                    "omitted": false
                }
            },
            {
                "dtypes": {
                    "value": "{'float64'}",
                    "shape": "1",
                    "omitted": false
                },
                "o": {
                    "value": "0.7487786199969316",
                    "shape": "()",
                    "omitted": false
                },
                "o.ndim": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "o.dtype": {
                    "value": "dtype('float64')",
                    "shape": "()",
                    "omitted": false
                }
            }
        ]
    ],
    "2.3.2": [
        [
            {
                "a.shape": "tuple",
                "a": "DataFrame",
                "b": "Series",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "op_str": "str",
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {
                "dtypes": "set",
                "o": "float64",
                "o.ndim": "int",
                "o.dtype": "dtype"
            }
        ],
        [
            {
                "op_str": "str",
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {
                "dtypes": "set",
                "o": "float64",
                "o.ndim": "int",
                "o.dtype": "dtype"
            }
        ],
        [
            {
                "op_str": "str",
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {
                "dtypes": "set",
                "o": "float64",
                "o.ndim": "int",
                "o.dtype": "dtype"
            }
        ],
        [
            {
                "op_str": "str",
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {
                "dtypes": "set",
                "o": "float64",
                "o.ndim": "int",
                "o.dtype": "dtype"
            }
        ],
        [
            {
                "op_str": "str",
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {
                "dtypes": "set",
                "o": "float64",
                "o.ndim": "int",
                "o.dtype": "dtype"
            }
        ],
        [
            {
                "op_str": "str",
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {
                "dtypes": "set",
                "o": "float64",
                "o.ndim": "int",
                "o.dtype": "dtype"
            }
        ],
        [
            {
                "op_str": "str",
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {
                "dtypes": "set",
                "o": "float64",
                "o.ndim": "int",
                "o.dtype": "dtype"
            }
        ],
        [
            {
                "op_str": "str",
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {
                "dtypes": "set",
                "o": "float64",
                "o.ndim": "int",
                "o.dtype": "dtype"
            }
        ],
        [
            {
                "op_str": "str",
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {
                "dtypes": "set",
                "o": "float64",
                "o.ndim": "int",
                "o.dtype": "dtype"
            }
        ],
        [
            {
                "op_str": "str",
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {
                "dtypes": "set",
                "o": "float64",
                "o.ndim": "int",
                "o.dtype": "dtype"
            }
        ],
        [
            {
                "op_str": "str",
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {
                "dtypes": "set",
                "o": "float64",
                "o.ndim": "int",
                "o.dtype": "dtype"
            }
        ],
        [
            {
                "op_str": "str",
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {
                "dtypes": "set",
                "o": "float64",
                "o.ndim": "int",
                "o.dtype": "dtype"
            }
        ],
        [
            {
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "a.shape": "tuple",
                "a": "ndarray",
                "b": "float64",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "a.shape": "tuple",
                "a": "ndarray",
                "b": "float64",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "a.shape": "tuple",
                "a": "ndarray",
                "b": "float64",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "a.shape": "tuple",
                "a": "ndarray",
                "b": "float64",
                "dtype_check": "str"
            },
            {}
        ],
        [
            {
                "op_str": "str",
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {
                "dtypes": "set",
                "o": "float64",
                "o.ndim": "int",
                "o.dtype": "dtype"
            }
        ],
        [
            {
                "op_str": "str",
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {
                "dtypes": "set",
                "o": "float64",
                "o.ndim": "int",
                "o.dtype": "dtype"
            }
        ],
        [
            {
                "op_str": "str",
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {
                "dtypes": "set",
                "o": "float64",
                "o.ndim": "int",
                "o.dtype": "dtype"
            }
        ],
        [
            {
                "op_str": "str",
                "a.shape": "tuple",
                "a": "Series",
                "b": "float64",
                "dtype_check": "str"
            },
            {
                "dtypes": "set",
                "o": "float64",
                "o.ndim": "int",
                "o.dtype": "dtype"
            }
        ]
    ],
    "3.1.1": [
        "Operators between DataFrame and Series fail on large dataframes\n"
    ],
    "3.1.2": [
        "Code Sample\nimport pandas as pd\n\nind = list(range(0, 100))\ncols = list(range(0, 300))\ndf = pd.DataFrame(index=ind, columns=cols, data=1.0)\nseries = pd.Series(index=cols, data=cols)\nprint(df.multiply(series, axis=1).head())  # Works fine\nind = list(range(0, 100000))\ncols = list(range(0, 300))\ndf = pd.DataFrame(index=ind, columns=cols, data=1.0)\nseries = pd.Series(index=cols, data=cols)\nprint(df.add(series,axis=1).head()) \nCode Output:\n   0    1    2    3    4    5    ...    294    295    296    297    298    299\n0  0.0  1.0  2.0  3.0  4.0  5.0  ...  294.0  295.0  296.0  297.0  298.0  299.0\n1  0.0  1.0  2.0  3.0  4.0  5.0  ...  294.0  295.0  296.0  297.0  298.0  299.0\n2  0.0  1.0  2.0  3.0  4.0  5.0  ...  294.0  295.0  296.0  297.0  298.0  299.0\n3  0.0  1.0  2.0  3.0  4.0  5.0  ...  294.0  295.0  296.0  297.0  298.0  299.0\n4  0.0  1.0  2.0  3.0  4.0  5.0  ...  294.0  295.0  296.0  297.0  298.0  299.0\n[5 rows x 300 columns]\nTraceback (most recent call last):\n  File \"C:\\dev\\bin\\anaconda\\envs\\py36\\lib\\site-packages\\IPython\\core\\interactiveshell.py\", line 2963, in run_code\n    exec(code_obj, self.user_global_ns, self.user_ns)\n  File \"<ipython-input-25-4d9165e5df4a>\", line 15, in <module>\n    print(df.add(series,axis=1).head())\n  File \"C:\\dev\\bin\\anaconda\\envs\\py36\\lib\\site-packages\\pandas\\core\\ops\\__init__.py\", line 1499, in f\n    self, other, pass_op, fill_value=fill_value, axis=axis, level=level\n  File \"C:\\dev\\bin\\anaconda\\envs\\py36\\lib\\site-packages\\pandas\\core\\ops\\__init__.py\", line 1388, in _combine_series_frame\n    return self._combine_match_columns(other, func, level=level)\n  File \"C:\\dev\\bin\\anaconda\\envs\\py36\\lib\\site-packages\\pandas\\core\\frame.py\", line 5392, in _combine_match_columns\n    return ops.dispatch_to_series(left, right, func, axis=\"columns\")\n  File \"C:\\dev\\bin\\anaconda\\envs\\py36\\lib\\site-packages\\pandas\\core\\ops\\__init__.py\", line 596, in dispatch_to_series\n    new_data = expressions.evaluate(column_op, str_rep, left, right)\n  File \"C:\\dev\\bin\\anaconda\\envs\\py36\\lib\\site-packages\\pandas\\core\\computation\\expressions.py\", line 220, in evaluate\n    return _evaluate(op, op_str, a, b, **eval_kwargs)\n  File \"C:\\dev\\bin\\anaconda\\envs\\py36\\lib\\site-packages\\pandas\\core\\computation\\expressions.py\", line 126, in _evaluate_numexpr\n    result = _evaluate_standard(op, op_str, a, b)\n  File \"C:\\dev\\bin\\anaconda\\envs\\py36\\lib\\site-packages\\pandas\\core\\computation\\expressions.py\", line 70, in _evaluate_standard\n    return op(a, b)\n  File \"C:\\dev\\bin\\anaconda\\envs\\py36\\lib\\site-packages\\pandas\\core\\ops\\__init__.py\", line 584, in column_op\n    return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}\n  File \"C:\\dev\\bin\\anaconda\\envs\\py36\\lib\\site-packages\\pandas\\core\\ops\\__init__.py\", line 584, in <dictcomp>\n    return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}\n  File \"C:\\dev\\bin\\anaconda\\envs\\py36\\lib\\site-packages\\pandas\\core\\ops\\__init__.py\", line 1473, in na_op\n    result = expressions.evaluate(op, str_rep, x, y, **eval_kwargs)\n  File \"C:\\dev\\bin\\anaconda\\envs\\py36\\lib\\site-packages\\pandas\\core\\computation\\expressions.py\", line 220, in evaluate\n    return _evaluate(op, op_str, a, b, **eval_kwargs)\n  File \"C:\\dev\\bin\\anaconda\\envs\\py36\\lib\\site-packages\\pandas\\core\\computation\\expressions.py\", line 101, in _evaluate_numexpr\n    if _can_use_numexpr(op, op_str, a, b, \"evaluate\"):\n  File \"C:\\dev\\bin\\anaconda\\envs\\py36\\lib\\site-packages\\pandas\\core\\computation\\expressions.py\", line 84, in _can_use_numexpr\n    s = o.dtypes.value_counts()\nAttributeError: 'numpy.dtype' object has no attribute 'value_counts'\nProblem description\nI think this is a regression somewhere between pandas 0.19.2 and 0.25. If you multiply or use any other operator function such as add/divide on a DataFrame by a Series where axis=1 pandas will crash in the _can_use_numexpr functon when the DataFrame/Series becomes very large. This is presumably down to check of the size of the objects being operated on not passing for small datasets but for larger ones it gets to the failing line.\n\n#pandas/core/computation/expressions.py : 73\ndef _can_use_numexpr(op, op_str, a, b, dtype_check):\n    \"\"\" return a boolean if we WILL be using numexpr \"\"\"\n    if op_str is not None:\n\n        # required min elements (otherwise we are adding overhead)\n        if np.prod(a.shape) > _MIN_ELEMENTS:\n\n            # check for dtype compatibility\n            dtypes = set()\n            for o in [a, b]:\n                if hasattr(o, \"dtypes\"):\n                    s = o.dtypes.value_counts()  # Fails here\nIn pandas 0.19.2 the function uses the get_dtype_counts() method instead to inspect if the dtype is uniform in the object:\n\ndef _can_use_numexpr(op, op_str, a, b, dtype_check):\n    \"\"\" return a boolean if we WILL be using numexpr \"\"\"\n    if op_str is not None:\n\n        # required min elements (otherwise we are adding overhead)\n        if np.prod(a.shape) > _MIN_ELEMENTS:\n\n            # check for dtype compatiblity\n            dtypes = set()\n            for o in [a, b]:\n                if hasattr(o, 'get_dtype_counts'):\n                    s = o.get_dtype_counts()\nI have a workaround which is to transpose the dataframe and use axis=0:\n\ndf.T.add(series,axis=0).T.head()\nI noticed get_dtype_counts() is deprecated ( #27145 ) which appears to be the PR that has caused this regression as a Series only returns a single numpy dtype which does not have a value_counts() method.\n"
    ]
}