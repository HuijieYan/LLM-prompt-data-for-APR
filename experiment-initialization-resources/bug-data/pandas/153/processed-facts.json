{
    "1.1.1": "def to_native_types(self, slicer=None, na_rep=\"nan\", quoting=None, **kwargs):\n    \n\n    values = self.get_values()\n\n    if slicer is not None:\n        values = values[:, slicer]\n    mask = isna(values)\n\n    if not self.is_object and not quoting:\n        values = values.astype(str)\n    else:\n        values = np.array(values, dtype=\"object\")\n\n    values[mask] = na_rep\n    return values\n",
    "1.1.2": "convert to our native types format, slicing if desired ",
    "1.2.1": "pandas/core/internals/blocks.py",
    "1.2.2": "import numpy as np\nfrom pandas.core.dtypes.missing import _isna_compat, array_equivalent, is_valid_nat_for_dtype, isna, notna",
    "1.3.1": "class Block(PandasObject)",
    "1.3.2": "Canonical n-dimensional unit of homogeneous dtype contained in a pandas\ndata structure\n\nIndex-ignorant; let the container take care of that",
    "1.4.1": [
        "get_values(self, dtype=None)",
        "astype(self, dtype, copy=False, errors='raise', **kwargs)"
    ],
    "1.4.2": null,
    "1.5.1": [
        "    @pytest.mark.parametrize(\"df_new_type\", [\"Int64\"])\n    def test_to_csv_na_rep_long_string(self, df_new_type):\n        # see gh-25099\n        df = pd.DataFrame({\"c\": [float(\"nan\")] * 3})\n        df = df.astype(df_new_type)\n        expected_rows = [\"c\", \"mynull\", \"mynull\", \"mynull\"]\n        expected = tm.convert_rows_list_to_csv_str(expected_rows)\n\n        result = df.to_csv(index=False, na_rep=\"mynull\", encoding=\"ascii\")\n\n        assert expected == result"
    ],
    "1.5.2": [
        "pandas/tests/io/formats/test_to_csv.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: assert 'c\\nmynull\\nmynull\\nmynull\\n' == 'c\\nmyn\\nmyn\\nmyn\\n'\nE           c\nE         - myn\nE         - myn\nE         - myn\nE         + mynull\nE         + mynull\nE         + mynull"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.io.formats.test_to_csv.TestToCSV object at 0x7ffb9d4ddb80>\ndf_new_type = 'Int64'\n\n    @pytest.mark.parametrize(\"df_new_type\", [\"Int64\"])\n    def test_to_csv_na_rep_long_string(self, df_new_type):\n        # see gh-25099\n        df = pd.DataFrame({\"c\": [float(\"nan\")] * 3})\n        df = df.astype(df_new_type)\n        expected_rows = [\"c\", \"mynull\", \"mynull\", \"mynull\"]\n        expected = tm.convert_rows_list_to_csv_str(expected_rows)\n    \n        result = df.to_csv(index=False, na_rep=\"mynull\", encoding=\"ascii\")\n    \n>       assert expected == result",
            "\npandas/tests/io/formats/test_to_csv.py:569: AssertionError"
        ]
    ],
    "2.2.1": [
        [
            {
                "self": {
                    "value": "ExtensionBlock: slice(0, 1, 1), 1 x 3, dtype: Int64",
                    "shape": "(1, 3)",
                    "omitted": false
                },
                "slicer": {
                    "value": "slice(0, 3, None)",
                    "shape": null,
                    "omitted": false
                },
                "self.is_object": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "quoting": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "na_rep": {
                    "value": "'mynull'",
                    "shape": "6",
                    "omitted": false
                }
            },
            {
                "values": {
                    "value": "array([['myn', 'myn', 'myn']], dtype='<U3')",
                    "shape": "(1, 3)",
                    "omitted": false
                },
                "mask": {
                    "value": "array([[ True,  True,  True]])",
                    "shape": "(1, 3)",
                    "omitted": false
                }
            }
        ]
    ],
    "2.2.2": [
        [
            {
                "self": "ExtensionBlock",
                "slicer": "slice",
                "self.is_object": "bool",
                "quoting": "int",
                "na_rep": "str"
            },
            {
                "values": "ndarray",
                "mask": "ndarray"
            }
        ]
    ],
    "2.3.1": [
        [
            {
                "self": {
                    "value": "ExtensionBlock: slice(0, 1, 1), 1 x 3, dtype: Int64",
                    "shape": "(1, 3)",
                    "omitted": false
                },
                "slicer": {
                    "value": "slice(0, 3, None)",
                    "shape": null,
                    "omitted": false
                },
                "self.is_object": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "quoting": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "na_rep": {
                    "value": "'mynull'",
                    "shape": "6",
                    "omitted": false
                }
            },
            {
                "values": {
                    "value": "array([['mynull', 'mynull', 'mynull']], dtype='<U6')",
                    "shape": "(1, 3)",
                    "omitted": false
                },
                "mask": {
                    "value": "array([[ True,  True,  True]])",
                    "shape": "(1, 3)",
                    "omitted": false
                },
                "itemsize": {
                    "value": "6",
                    "shape": null,
                    "omitted": false
                }
            }
        ]
    ],
    "2.3.2": [
        [
            {
                "self": "ExtensionBlock",
                "slicer": "slice",
                "self.is_object": "bool",
                "quoting": "int",
                "na_rep": "str"
            },
            {
                "values": "ndarray",
                "mask": "ndarray",
                "itemsize": "int"
            }
        ]
    ],
    "3.1.1": [
        "na_rep Truncated With Int64 dtype in to_csv\n"
    ],
    "3.1.2": [
        "Code Sample\ndf = pd.DataFrame({\"c\": [float('nan')]*3})\ndf = df.astype(\"Int64\")\n\nprint(df.to_csv(index=False, na_rep='mynull'))\nc\nmyn\nmyn\nmyn\nProblem description\nI'd expect na_rep to be always respected, with all column types.\n\nExpected Output\nprint(df.to_csv(index=False, na_rep='mynull'))\nc\nmynull\nmynull\nmynull\n"
    ]
}