{
    "pandas:78": {
        "github_issue_title": [
            "pandas.DataFrame.sum() returns wrong type for subclassed pandas DataFrame\n"
        ],
        "github_issue_description": [
            "Code Sample, a copy-pastable example if possible\n# the following code is obtained from the documentation\n# https://pandas.pydata.org/pandas-docs/stable/development/extending.html\n\nimport pandas as pd\n\nclass SubclassedSeries(pd.Series):\n    @property\n    def _constructor(self):\n        return SubclassedSeries\n    @property\n    def _constructor_expanddim(self):\n        return SubclassedDataFrame\n\n\nclass SubclassedDataFrame(pd.DataFrame):\n    @property\n    def _constructor(self):\n        return SubclassedDataFrame\n    @property\n    def _constructor_sliced(self):\n        return SubclassedSeries\n\n# create a class instance as in the example of the documentation\n\ndf = SubclassedDataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\n>>> df\n   A  B  C\n0  1  4  7\n1  2  5  8\n2  3  6  9\n\n# this works just fine\n\n>>> type(df)\n<class '__main__.SubclassedDataFrame'>\n\n# slicing also works fine\n\n>>> sliced2 = df['A']\n>>> sliced2\n0    1\n1    2\n2    3\nName: A, dtype: int64\n\n>>> type(sliced2)\n<class '__main__.SubclassedSeries'>\n\n# however, the sum operation returns a pandas.Series, not SubclassedSeries\n\n>>> sliced3 = df.sum()\n>>> sliced3\n0    1\n1    2\n2    3\nName: A, dtype: int64\n\n>>> type(sliced3)\n<class 'pandas.core.series.Series'>\nProblem description\nIn our project, we extend pandas as described in the documentation and implement our own kind of DataFrame and Series, similar to the geopandas project (if you apply sum on their DataFrame, the same problem appears). If you want to use _reduce operations like sum, it is important that the correct SubclassedSeries is returned. Otherwise, inheritance from pandas.DataFrames is not possible.\n\nExpected Output\n>>> type(sliced3)\n<class '__main__.SubclassedSeries'>\nI think I can provide a possible fix of this problem: The relevant code is contained in core/frame.py just before the return statement of the _reduce function:\n\n# this is the code in core/frame.py:\ndef _reduce(...):\n        # .... left out\n        if constructor is not None:\n            result = Series(result, index=labels)\n        return result\n\n# I suggest the following change:\ndef _reduce(...):\n        # .... left out\n        if constructor is None:\n            result = Series(result, index=labels)\n        else:\n            result = constructor(result, index=labels)\n        # alternative (since constructor will create a SubclassedDataFrame):\n            result = self._constructor_sliced(result, index=labels)\n        return result\n"
        ]
    }
}