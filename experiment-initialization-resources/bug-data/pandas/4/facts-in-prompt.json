{
    "1": "Assume that the following list of imports are available in the current environment, so you don't need to import them when generating a fix.\n```python\nfrom pandas.core.dtypes.generic import ABCCategorical, ABCDataFrame, ABCDatetimeIndex, ABCIntervalIndex, ABCMultiIndex, ABCPandasArray, ABCPeriodIndex, ABCRangeIndex, ABCSeries, ABCTimedeltaIndex\nimport pandas.core.common as com\nfrom pandas.core.indexes.multi import MultiIndex\nfrom pandas.core.indexes.multi import MultiIndex\nfrom pandas.core.reshape.merge import _restore_dropped_levels_multijoin\nfrom pandas.core.indexes.multi import MultiIndex\nfrom pandas.core.indexes.multi import MultiIndex\nfrom pandas.core.indexes.multi import MultiIndex\nfrom pandas.core.indexes.multi import MultiIndex\nfrom pandas.core.indexes.multi import MultiIndex\n```\n\n# The source code of the buggy function\n```python\n# The relative path of the buggy file: pandas/core/indexes/base.py\n\n\n\n    # this is the buggy function you need to fix\n    def _join_multi(self, other, how, return_indexers=True):\n        from pandas.core.indexes.multi import MultiIndex\n        from pandas.core.reshape.merge import _restore_dropped_levels_multijoin\n    \n        # figure out join names\n        self_names = set(com.not_none(*self.names))\n        other_names = set(com.not_none(*other.names))\n        overlap = self_names & other_names\n    \n        # need at least 1 in common\n        if not overlap:\n            raise ValueError(\"cannot join with no overlapping index names\")\n    \n        self_is_mi = isinstance(self, ABCMultiIndex)\n        other_is_mi = isinstance(other, ABCMultiIndex)\n    \n        if self_is_mi and other_is_mi:\n    \n            # Drop the non-matching levels from left and right respectively\n            ldrop_names = list(self_names - overlap)\n            rdrop_names = list(other_names - overlap)\n    \n            # if only the order differs\n            if not len(ldrop_names + rdrop_names):\n                self_jnlevels = self\n                other_jnlevels = other.reorder_levels(self.names)\n            else:\n                self_jnlevels = self.droplevel(ldrop_names)\n                other_jnlevels = other.droplevel(rdrop_names)\n    \n            # Join left and right\n            # Join on same leveled multi-index frames is supported\n            join_idx, lidx, ridx = self_jnlevels.join(\n                other_jnlevels, how, return_indexers=True\n            )\n    \n            # Restore the dropped levels\n            # Returned index level order is\n            # common levels, ldrop_names, rdrop_names\n            dropped_names = ldrop_names + rdrop_names\n    \n            levels, codes, names = _restore_dropped_levels_multijoin(\n                self, other, dropped_names, join_idx, lidx, ridx\n            )\n    \n            # Re-create the multi-index\n            multi_join_idx = MultiIndex(\n                levels=levels, codes=codes, names=names, verify_integrity=False\n            )\n    \n            multi_join_idx = multi_join_idx.remove_unused_levels()\n    \n            return multi_join_idx, lidx, ridx\n    \n        jl = list(overlap)[0]\n    \n        # Case where only one index is multi\n        # make the indices into mi's that match\n        flip_order = False\n        if self_is_mi:\n            self, other = other, self\n            flip_order = True\n            # flip if join method is right or left\n            how = {\"right\": \"left\", \"left\": \"right\"}.get(how, how)\n    \n        level = other.names.index(jl)\n        result = self._join_level(\n            other, level, how=how, return_indexers=return_indexers\n        )\n    \n        if flip_order:\n            if isinstance(result, tuple):\n                return result[0], result[2], result[1]\n        return result\n    \n```",
    "2": "# The declaration of the class containing the buggy function\nclass Index(IndexOpsMixin, PandasObject):\n    \"\"\"\n    Immutable ndarray implementing an ordered, sliceable set. The basic object\n    storing axis labels for all pandas objects.\n    \n    Parameters\n    ----------\n    data : array-like (1-dimensional)\n    dtype : NumPy dtype (default: object)\n        If dtype is None, we find the dtype that best fits the data.\n        If an actual dtype is provided, we coerce to that dtype if it's safe.\n        Otherwise, an error will be raised.\n    copy : bool\n        Make a copy of input ndarray.\n    name : object\n        Name to be stored in the index.\n    tupleize_cols : bool (default: True)\n        When True, attempt to create a MultiIndex if possible.\n    \n    See Also\n    --------\n    RangeIndex : Index implementing a monotonic integer range.\n    CategoricalIndex : Index of :class:`Categorical` s.\n    MultiIndex : A multi-level, or hierarchical Index.\n    IntervalIndex : An Index of :class:`Interval` s.\n    DatetimeIndex : Index of datetime64 data.\n    TimedeltaIndex : Index of timedelta64 data.\n    PeriodIndex : Index of Period data.\n    Int64Index : A special case of :class:`Index` with purely integer labels.\n    UInt64Index : A special case of :class:`Index` with purely unsigned integer labels.\n    Float64Index : A special case of :class:`Index` with purely float labels.\n    \n    Notes\n    -----\n    An Index instance can **only** contain hashable objects\n    \n    Examples\n    --------\n    >>> pd.Index([1, 2, 3])\n    Int64Index([1, 2, 3], dtype='int64')\n    \n    >>> pd.Index(list('abc'))\n    Index(['a', 'b', 'c'], dtype='object')\n    \"\"\"\n\n\n",
    "3": "# This function from the same file, but not the same class, is called by the buggy function\ndef droplevel(self, level=0):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef join(self, other, how='left', level=None, return_indexers=False, sort=False):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef _join_level(self, other, level, how='left', return_indexers=False, keep_order=True):\n    # Please ignore the body of this function\n\n    # This function from the same class is called by the buggy function\n    def droplevel(self, level=0):\n        # Please ignore the body of this function\n\n    # This function from the same class is called by the buggy function\n    def join(self, other, how='left', level=None, return_indexers=False, sort=False):\n        # Please ignore the body of this function\n\n    # This function from the same class is called by the buggy function\n    def _join_level(self, other, level, how='left', return_indexers=False, keep_order=True):\n        # Please ignore the body of this function\n\n",
    "4": "# A failing test function for the buggy function\n```python\n# The relative path of the failing test file: pandas/tests/indexes/multi/test_join.py\n\ndef test_join_multi_return_indexers():\n    # GH 34074\n\n    midx1 = pd.MultiIndex.from_product([[1, 2], [3, 4], [5, 6]], names=[\"a\", \"b\", \"c\"])\n    midx2 = pd.MultiIndex.from_product([[1, 2], [3, 4]], names=[\"a\", \"b\"])\n\n    result = midx1.join(midx2, return_indexers=False)\n    tm.assert_index_equal(result, midx1)\n```\n\n\n",
    "5": "## The error message from the failing test\n```text\ndef test_join_multi_return_indexers():\n        # GH 34074\n    \n        midx1 = pd.MultiIndex.from_product([[1, 2], [3, 4], [5, 6]], names=[\"a\", \"b\", \"c\"])\n        midx2 = pd.MultiIndex.from_product([[1, 2], [3, 4]], names=[\"a\", \"b\"])\n    \n        result = midx1.join(midx2, return_indexers=False)\n>       tm.assert_index_equal(result, midx1)\n\npandas/tests/indexes/multi/test_join.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nleft = (MultiIndex([(1, 3, 5),\n            (1, 3, 6),\n            (1, 4, 5),\n            (1, 4, 6),\n            (2, 3, 5),\n  ...       (2, 4, 6)],\n           names=['a', 'b', 'c']), array([0, 1, 2, 3, 4, 5, 6, 7]), array([0, 0, 1, 1, 2, 2, 3, 3]))\nright = MultiIndex([(1, 3, 5),\n            (1, 3, 6),\n            (1, 4, 5),\n            (1, 4, 6),\n            (2, 3, 5),\n            (2, 3, 6),\n            (2, 4, 5),\n            (2, 4, 6)],\n           names=['a', 'b', 'c'])\ncls = <class 'pandas.core.indexes.base.Index'>\n\n    def _check_isinstance(left, right, cls):\n        \"\"\"\n        Helper method for our assert_* methods that ensures that\n        the two objects being compared have the right type before\n        proceeding with the comparison.\n    \n        Parameters\n        ----------\n        left : The first object being compared.\n        right : The second object being compared.\n        cls : The class type to check against.\n    \n        Raises\n        ------\n        AssertionError : Either `left` or `right` is not an instance of `cls`.\n        \"\"\"\n        cls_name = cls.__name__\n    \n        if not isinstance(left, cls):\n>           raise AssertionError(\n                f\"{cls_name} Expected type {cls}, found {type(left)} instead\"\n            )\nE           AssertionError: Index Expected type <class 'pandas.core.indexes.base.Index'>, found <class 'tuple'> instead\n\npandas/_testing.py:410: AssertionError\n\n```\n",
    "6": "# Runtime values and types of variables inside the buggy function\nEach case below includes input parameter values and types, and the values and types of relevant variables at the function's return, derived from executing failing tests. If an input parameter is not reflected in the output, it is assumed to remain unchanged. Note that some of these values at the function's return might be incorrect. Analyze these cases to identify why the tests are failing to effectively fix the bug.\n\n## Case 1\n### Runtime values and types of the input parameters of the buggy function\nself.names, value: `FrozenList(['a', 'b', 'c'])`, type: `FrozenList`\n\nself, value: `MultiIndex([(1, 3, 5),\n            (1, 3, 6),\n            (1, 4, 5),\n            (1, 4, 6),\n            (2, 3, 5),\n            (2, 3, 6),\n            (2, 4, 5),\n            (2, 4, 6)],\n           names=['a', 'b', 'c'])`, type: `MultiIndex`\n\nother.names, value: `FrozenList(['a', 'b'])`, type: `FrozenList`\n\nother, value: `MultiIndex([(1, 3),\n            (1, 4),\n            (2, 3),\n            (2, 4)],\n           names=['a', 'b'])`, type: `MultiIndex`\n\nhow, value: `'left'`, type: `str`\n\nreturn_indexers, value: `False`, type: `bool`\n\n### Runtime values and types of variables right before the buggy function's return\nself_names, value: `{'b', 'c', 'a'}`, type: `set`\n\nother_names, value: `{'b', 'a'}`, type: `set`\n\noverlap, value: `{'b', 'a'}`, type: `set`\n\nself_is_mi, value: `True`, type: `bool`\n\nother_is_mi, value: `True`, type: `bool`\n\nldrop_names, value: `['c']`, type: `list`\n\nrdrop_names, value: `[]`, type: `list`\n\nself_jnlevels, value: `MultiIndex([(1, 3),\n            (1, 3),\n            (1, 4),\n            (1, 4),\n            (2, 3),\n            (2, 3),\n            (2, 4),\n            (2, 4)],\n           names=['a', 'b'])`, type: `MultiIndex`\n\nother_jnlevels, value: `MultiIndex([(1, 3),\n            (1, 4),\n            (2, 3),\n            (2, 4)],\n           names=['a', 'b'])`, type: `MultiIndex`\n\njoin_idx, value: `MultiIndex([(1, 3),\n            (1, 3),\n            (1, 4),\n            (1, 4),\n            (2, 3),\n            (2, 3),\n            (2, 4),\n            (2, 4)],\n           names=['a', 'b'])`, type: `MultiIndex`\n\nlidx, value: `array([0, 1, 2, 3, 4, 5, 6, 7])`, type: `ndarray`\n\nridx, value: `array([0, 0, 1, 1, 2, 2, 3, 3])`, type: `ndarray`\n\ndropped_names, value: `['c']`, type: `list`\n\nlevels, value: `FrozenList([[1, 2], [3, 4], [5, 6]])`, type: `FrozenList`\n\ncodes, value: `FrozenList([[0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0, 1]])`, type: `FrozenList`\n\nnames, value: `FrozenList(['a', 'b', 'c'])`, type: `FrozenList`\n\nmulti_join_idx, value: `MultiIndex([(1, 3, 5),\n            (1, 3, 6),\n            (1, 4, 5),\n            (1, 4, 6),\n            (2, 3, 5),\n            (2, 3, 6),\n            (2, 4, 5),\n            (2, 4, 6)],\n           names=['a', 'b', 'c'])`, type: `MultiIndex`\n\n",
    "7": "# Expected values and types of variables during the failing test execution\nEach case below includes input parameter values and types, and the expected values and types of relevant variables at the function's return. If an input parameter is not reflected in the output, it is assumed to remain unchanged. A corrected function must satisfy all these cases.\n\n## Expected case 1\n### Input parameter values and types\n### The values and types of buggy function's parameters\nself.names, value: `FrozenList(['a', 'b', 'c'])`, type: `FrozenList`\n\nself, value: `MultiIndex([(1, 3, 5),\n            (1, 3, 6),\n            (1, 4, 5),\n            (1, 4, 6),\n            (2, 3, 5),\n            (2, 3, 6),\n            (2, 4, 5),\n            (2, 4, 6)],\n           names=['a', 'b', 'c'])`, type: `MultiIndex`\n\nother.names, value: `FrozenList(['a', 'b'])`, type: `FrozenList`\n\nother, value: `MultiIndex([(1, 3),\n            (1, 4),\n            (2, 3),\n            (2, 4)],\n           names=['a', 'b'])`, type: `MultiIndex`\n\nhow, value: `'left'`, type: `str`\n\nreturn_indexers, value: `False`, type: `bool`\n\n### Expected values and types of variables right before the buggy function's return\nself_names, expected value: `{'a', 'c', 'b'}`, type: `set`\n\nother_names, expected value: `{'a', 'b'}`, type: `set`\n\noverlap, expected value: `{'a', 'b'}`, type: `set`\n\nself_is_mi, expected value: `True`, type: `bool`\n\nother_is_mi, expected value: `True`, type: `bool`\n\nldrop_names, expected value: `['c']`, type: `list`\n\nrdrop_names, expected value: `[]`, type: `list`\n\nself_jnlevels, expected value: `MultiIndex([(1, 3),\n            (1, 3),\n            (1, 4),\n            (1, 4),\n            (2, 3),\n            (2, 3),\n            (2, 4),\n            (2, 4)],\n           names=['a', 'b'])`, type: `MultiIndex`\n\nother_jnlevels, expected value: `MultiIndex([(1, 3),\n            (1, 4),\n            (2, 3),\n            (2, 4)],\n           names=['a', 'b'])`, type: `MultiIndex`\n\njoin_idx, expected value: `MultiIndex([(1, 3),\n            (1, 3),\n            (1, 4),\n            (1, 4),\n            (2, 3),\n            (2, 3),\n            (2, 4),\n            (2, 4)],\n           names=['a', 'b'])`, type: `MultiIndex`\n\nlidx, expected value: `array([0, 1, 2, 3, 4, 5, 6, 7])`, type: `ndarray`\n\nridx, expected value: `array([0, 0, 1, 1, 2, 2, 3, 3])`, type: `ndarray`\n\ndropped_names, expected value: `['c']`, type: `list`\n\nlevels, expected value: `FrozenList([[1, 2], [3, 4], [5, 6]])`, type: `FrozenList`\n\ncodes, expected value: `FrozenList([[0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0, 1]])`, type: `FrozenList`\n\nnames, expected value: `FrozenList(['a', 'b', 'c'])`, type: `FrozenList`\n\nmulti_join_idx, expected value: `MultiIndex([(1, 3, 5),\n            (1, 3, 6),\n            (1, 4, 5),\n            (1, 4, 6),\n            (2, 3, 5),\n            (2, 3, 6),\n            (2, 4, 5),\n            (2, 4, 6)],\n           names=['a', 'b', 'c'])`, type: `MultiIndex`\n\n",
    "8": "# A GitHub issue for this bug\n\nThe issue's title:\n```text\nBUG: Multijoining indexes always returns indexers, ignores function parameters\n```\n\nThe issue's detailed description:\n```text\n I have checked that this issue has not already been reported.\n\n I have confirmed this bug exists on the latest version of pandas.\n\n (optional) I have confirmed this bug exists on the master branch of pandas.\n\nCode Sample\n>>>frame = pd.DataFrame([(1,2,3,4),(4,5,6,7)],columns=[\"i1\", \"i2\", \"i3\",\"val\"]).set_index([\"i1\",\"i2\",\"i3\"])\n>>>frame2 = pd.DataFrame([(1,2,3),(4,5,6)],columns=[\"i1\", \"i2\", \"val\"]).set_index([\"i1\",\"i2\"])\n>>>frame.index.join(frame2.index,return_indexers=False)\n(MultiIndex([(1, 2, 3),\n            (4, 5, 6)],\n           names=['i1', 'i2', 'i3']), None, None)\nProblem description\nParameter return_indexers is ignored in some cases of __join_multi\n\nExpected Output\n>>>frame.index.join(frame2.index,return_indexers=False)\nMultiIndex([(1, 2, 3),\n            (4, 5, 6)],\n           names=['i1', 'i2', 'i3'])\n```\n\n",
    "9": "Your output should follow these steps:\n1. Analyze the buggy function and its relationship with the buggy class, related functions, test code, corresponding error message, the actual input/output variable information, the expected input/output variable information, the github issue.\n2. Identify a potential error location within the buggy function.\n3. Elucidate the bug's cause using:\n   (a) The buggy function, \n   (b) The buggy class docs, \n   (c) The related functions, \n   (d) The failing test, \n   (e) The corresponding error message, \n   (f) The actual input/output variable values, \n   (g) The expected input/output variable values, \n   (h) The GitHub Issue information\n\n4. Suggest approaches for fixing the bug.\n5. Present the corrected code for the buggy function such that it satisfied the following:\n   (a) the program passes the failing test, \n   (b) the function satisfies the expected input/output variable information provided, \n   (c) successfully resolves the issue posted in GitHub\n\n",
    "1.3.3": "Assume that the following list of imports are available in the current environment, so you don't need to import them when generating a fix.\n```python\nfrom pandas.core.dtypes.generic import ABCCategorical, ABCDataFrame, ABCDatetimeIndex, ABCIntervalIndex, ABCMultiIndex, ABCPandasArray, ABCPeriodIndex, ABCRangeIndex, ABCSeries, ABCTimedeltaIndex\nimport pandas.core.common as com\nfrom pandas.core.indexes.multi import MultiIndex\nfrom pandas.core.indexes.multi import MultiIndex\nfrom pandas.core.reshape.merge import _restore_dropped_levels_multijoin\nfrom pandas.core.indexes.multi import MultiIndex\nfrom pandas.core.indexes.multi import MultiIndex\nfrom pandas.core.indexes.multi import MultiIndex\nfrom pandas.core.indexes.multi import MultiIndex\nfrom pandas.core.indexes.multi import MultiIndex\n```\n\n",
    "source_code_section": "# The source code of the buggy function\n```python\n# The relative path of the buggy file: pandas/core/indexes/base.py\n\n\n\n    # this is the buggy function you need to fix\n    def _join_multi(self, other, how, return_indexers=True):\n        from pandas.core.indexes.multi import MultiIndex\n        from pandas.core.reshape.merge import _restore_dropped_levels_multijoin\n    \n        # figure out join names\n        self_names = set(com.not_none(*self.names))\n        other_names = set(com.not_none(*other.names))\n        overlap = self_names & other_names\n    \n        # need at least 1 in common\n        if not overlap:\n            raise ValueError(\"cannot join with no overlapping index names\")\n    \n        self_is_mi = isinstance(self, ABCMultiIndex)\n        other_is_mi = isinstance(other, ABCMultiIndex)\n    \n        if self_is_mi and other_is_mi:\n    \n            # Drop the non-matching levels from left and right respectively\n            ldrop_names = list(self_names - overlap)\n            rdrop_names = list(other_names - overlap)\n    \n            # if only the order differs\n            if not len(ldrop_names + rdrop_names):\n                self_jnlevels = self\n                other_jnlevels = other.reorder_levels(self.names)\n            else:\n                self_jnlevels = self.droplevel(ldrop_names)\n                other_jnlevels = other.droplevel(rdrop_names)\n    \n            # Join left and right\n            # Join on same leveled multi-index frames is supported\n            join_idx, lidx, ridx = self_jnlevels.join(\n                other_jnlevels, how, return_indexers=True\n            )\n    \n            # Restore the dropped levels\n            # Returned index level order is\n            # common levels, ldrop_names, rdrop_names\n            dropped_names = ldrop_names + rdrop_names\n    \n            levels, codes, names = _restore_dropped_levels_multijoin(\n                self, other, dropped_names, join_idx, lidx, ridx\n            )\n    \n            # Re-create the multi-index\n            multi_join_idx = MultiIndex(\n                levels=levels, codes=codes, names=names, verify_integrity=False\n            )\n    \n            multi_join_idx = multi_join_idx.remove_unused_levels()\n    \n            return multi_join_idx, lidx, ridx\n    \n        jl = list(overlap)[0]\n    \n        # Case where only one index is multi\n        # make the indices into mi's that match\n        flip_order = False\n        if self_is_mi:\n            self, other = other, self\n            flip_order = True\n            # flip if join method is right or left\n            how = {\"right\": \"left\", \"left\": \"right\"}.get(how, how)\n    \n        level = other.names.index(jl)\n        result = self._join_level(\n            other, level, how=how, return_indexers=return_indexers\n        )\n    \n        if flip_order:\n            if isinstance(result, tuple):\n                return result[0], result[2], result[1]\n        return result\n    \n```",
    "source_code_body": "# The relative path of the buggy file: pandas/core/indexes/base.py\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef droplevel(self, level=0):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef join(self, other, how='left', level=None, return_indexers=False, sort=False):\n    # Please ignore the body of this function\n\n# This function from the same file, but not the same class, is called by the buggy function\ndef _join_level(self, other, level, how='left', return_indexers=False, keep_order=True):\n    # Please ignore the body of this function\n\n# The declaration of the class containing the buggy function\nclass Index(IndexOpsMixin, PandasObject):\n    \"\"\"\n    Immutable ndarray implementing an ordered, sliceable set. The basic object\n    storing axis labels for all pandas objects.\n    \n    Parameters\n    ----------\n    data : array-like (1-dimensional)\n    dtype : NumPy dtype (default: object)\n        If dtype is None, we find the dtype that best fits the data.\n        If an actual dtype is provided, we coerce to that dtype if it's safe.\n        Otherwise, an error will be raised.\n    copy : bool\n        Make a copy of input ndarray.\n    name : object\n        Name to be stored in the index.\n    tupleize_cols : bool (default: True)\n        When True, attempt to create a MultiIndex if possible.\n    \n    See Also\n    --------\n    RangeIndex : Index implementing a monotonic integer range.\n    CategoricalIndex : Index of :class:`Categorical` s.\n    MultiIndex : A multi-level, or hierarchical Index.\n    IntervalIndex : An Index of :class:`Interval` s.\n    DatetimeIndex : Index of datetime64 data.\n    TimedeltaIndex : Index of timedelta64 data.\n    PeriodIndex : Index of Period data.\n    Int64Index : A special case of :class:`Index` with purely integer labels.\n    UInt64Index : A special case of :class:`Index` with purely unsigned integer labels.\n    Float64Index : A special case of :class:`Index` with purely float labels.\n    \n    Notes\n    -----\n    An Index instance can **only** contain hashable objects\n    \n    Examples\n    --------\n    >>> pd.Index([1, 2, 3])\n    Int64Index([1, 2, 3], dtype='int64')\n    \n    >>> pd.Index(list('abc'))\n    Index(['a', 'b', 'c'], dtype='object')\n    \"\"\"\n\n\n    # This function from the same class is called by the buggy function\n    def droplevel(self, level=0):\n        # Please ignore the body of this function\n\n    # This function from the same class is called by the buggy function\n    def join(self, other, how='left', level=None, return_indexers=False, sort=False):\n        # Please ignore the body of this function\n\n    # This function from the same class is called by the buggy function\n    def _join_level(self, other, level, how='left', return_indexers=False, keep_order=True):\n        # Please ignore the body of this function\n\n\n\n    # this is the buggy function you need to fix\n    def _join_multi(self, other, how, return_indexers=True):\n        from pandas.core.indexes.multi import MultiIndex\n        from pandas.core.reshape.merge import _restore_dropped_levels_multijoin\n    \n        # figure out join names\n        self_names = set(com.not_none(*self.names))\n        other_names = set(com.not_none(*other.names))\n        overlap = self_names & other_names\n    \n        # need at least 1 in common\n        if not overlap:\n            raise ValueError(\"cannot join with no overlapping index names\")\n    \n        self_is_mi = isinstance(self, ABCMultiIndex)\n        other_is_mi = isinstance(other, ABCMultiIndex)\n    \n        if self_is_mi and other_is_mi:\n    \n            # Drop the non-matching levels from left and right respectively\n            ldrop_names = list(self_names - overlap)\n            rdrop_names = list(other_names - overlap)\n    \n            # if only the order differs\n            if not len(ldrop_names + rdrop_names):\n                self_jnlevels = self\n                other_jnlevels = other.reorder_levels(self.names)\n            else:\n                self_jnlevels = self.droplevel(ldrop_names)\n                other_jnlevels = other.droplevel(rdrop_names)\n    \n            # Join left and right\n            # Join on same leveled multi-index frames is supported\n            join_idx, lidx, ridx = self_jnlevels.join(\n                other_jnlevels, how, return_indexers=True\n            )\n    \n            # Restore the dropped levels\n            # Returned index level order is\n            # common levels, ldrop_names, rdrop_names\n            dropped_names = ldrop_names + rdrop_names\n    \n            levels, codes, names = _restore_dropped_levels_multijoin(\n                self, other, dropped_names, join_idx, lidx, ridx\n            )\n    \n            # Re-create the multi-index\n            multi_join_idx = MultiIndex(\n                levels=levels, codes=codes, names=names, verify_integrity=False\n            )\n    \n            multi_join_idx = multi_join_idx.remove_unused_levels()\n    \n            return multi_join_idx, lidx, ridx\n    \n        jl = list(overlap)[0]\n    \n        # Case where only one index is multi\n        # make the indices into mi's that match\n        flip_order = False\n        if self_is_mi:\n            self, other = other, self\n            flip_order = True\n            # flip if join method is right or left\n            how = {\"right\": \"left\", \"left\": \"right\"}.get(how, how)\n    \n        level = other.names.index(jl)\n        result = self._join_level(\n            other, level, how=how, return_indexers=return_indexers\n        )\n    \n        if flip_order:\n            if isinstance(result, tuple):\n                return result[0], result[2], result[1]\n        return result\n    \n"
}