{
    "1.1.1": "def infer_dtype_from_scalar(val, pandas_dtype: bool = False):\n    \n\n    dtype = np.object_\n\n    # a 1-element ndarray\n    if isinstance(val, np.ndarray):\n        msg = \"invalid ndarray passed to infer_dtype_from_scalar\"\n        if val.ndim != 0:\n            raise ValueError(msg)\n\n        dtype = val.dtype\n        val = val.item()\n\n    elif isinstance(val, str):\n\n        # If we create an empty array using a string to infer\n        # the dtype, NumPy will only allocate one character per entry\n        # so this is kind of bad. Alternately we could use np.repeat\n        # instead of np.empty (but then you still don't want things\n        # coming out as np.str_!\n\n        dtype = np.object_\n\n    elif isinstance(val, (np.datetime64, datetime)):\n        val = tslibs.Timestamp(val)\n        if val is tslibs.NaT or val.tz is None:\n            dtype = np.dtype(\"M8[ns]\")\n        else:\n            if pandas_dtype:\n                dtype = DatetimeTZDtype(unit=\"ns\", tz=val.tz)\n            else:\n                # return datetimetz as object\n                return np.object_, val\n        val = val.value\n\n    elif isinstance(val, (np.timedelta64, timedelta)):\n        val = tslibs.Timedelta(val).value\n        dtype = np.dtype(\"m8[ns]\")\n\n    elif is_bool(val):\n        dtype = np.bool_\n\n    elif is_integer(val):\n        if isinstance(val, np.integer):\n            dtype = type(val)\n        else:\n            dtype = np.int64\n\n    elif is_float(val):\n        if isinstance(val, np.floating):\n            dtype = type(val)\n        else:\n            dtype = np.float64\n\n    elif is_complex(val):\n        dtype = np.complex_\n\n    elif pandas_dtype:\n        if lib.is_period(val):\n            dtype = PeriodDtype(freq=val.freq)\n            val = val.ordinal\n\n    return dtype, val\n",
    "1.1.2": "Interpret the dtype from a scalar.\n\nParameters\n----------\npandas_dtype : bool, default False\n    whether to infer dtype including pandas extension types.\n    If False, scalar belongs to pandas extension types is inferred as\n    object",
    "1.2.1": "pandas/core/dtypes/cast.py",
    "1.2.2": "from datetime import datetime, timedelta\nimport numpy as np\nfrom pandas._libs import lib, tslib, tslibs\nfrom .common import _INT64_DTYPE, _NS_DTYPE, _POSSIBLY_CAST_DTYPES, _TD_DTYPE, ensure_int8, ensure_int16, ensure_int32, ensure_int64, ensure_object, ensure_str, is_bool, is_bool_dtype, is_complex, is_complex_dtype, is_datetime64_dtype, is_datetime64_ns_dtype, is_datetime64tz_dtype, is_datetime_or_timedelta_dtype, is_dtype_equal, is_extension_array_dtype, is_float, is_float_dtype, is_integer, is_integer_dtype, is_object_dtype, is_scalar, is_string_dtype, is_timedelta64_dtype, is_timedelta64_ns_dtype, is_unsigned_integer_dtype, pandas_dtype\nfrom .dtypes import DatetimeTZDtype, ExtensionDtype, PeriodDtype",
    "1.3.1": null,
    "1.3.2": null,
    "1.4.1": null,
    "1.4.2": null,
    "1.5.1": [
        "@pytest.mark.parametrize(\n    \"left, right, subtype\",\n    [\n        (0, 1, \"int64\"),\n        (0.0, 1.0, \"float64\"),\n        (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n        (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n        (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n    ],\n)\ndef test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n    # GH 30337\n    interval = Interval(left, right, closed)\n    result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n    expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n    assert result_dtype == expected_dtype\n    assert result_value == interval",
        "@pytest.mark.parametrize(\n    \"left, right, subtype\",\n    [\n        (0, 1, \"int64\"),\n        (0.0, 1.0, \"float64\"),\n        (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n        (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n        (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n    ],\n)\ndef test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n    # GH 30337\n    interval = Interval(left, right, closed)\n    result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n    expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n    assert result_dtype == expected_dtype\n    assert result_value == interval",
        "@pytest.mark.parametrize(\n    \"left, right, subtype\",\n    [\n        (0, 1, \"int64\"),\n        (0.0, 1.0, \"float64\"),\n        (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n        (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n        (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n    ],\n)\ndef test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n    # GH 30337\n    interval = Interval(left, right, closed)\n    result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n    expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n    assert result_dtype == expected_dtype\n    assert result_value == interval",
        "@pytest.mark.parametrize(\n    \"left, right, subtype\",\n    [\n        (0, 1, \"int64\"),\n        (0.0, 1.0, \"float64\"),\n        (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n        (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n        (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n    ],\n)\ndef test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n    # GH 30337\n    interval = Interval(left, right, closed)\n    result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n    expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n    assert result_dtype == expected_dtype\n    assert result_value == interval",
        "@pytest.mark.parametrize(\n    \"left, right, subtype\",\n    [\n        (0, 1, \"int64\"),\n        (0.0, 1.0, \"float64\"),\n        (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n        (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n        (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n    ],\n)\ndef test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n    # GH 30337\n    interval = Interval(left, right, closed)\n    result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n    expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n    assert result_dtype == expected_dtype\n    assert result_value == interval",
        "@pytest.mark.parametrize(\n    \"left, right, subtype\",\n    [\n        (0, 1, \"int64\"),\n        (0.0, 1.0, \"float64\"),\n        (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n        (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n        (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n    ],\n)\ndef test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n    # GH 30337\n    interval = Interval(left, right, closed)\n    result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n    expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n    assert result_dtype == expected_dtype\n    assert result_value == interval",
        "@pytest.mark.parametrize(\n    \"left, right, subtype\",\n    [\n        (0, 1, \"int64\"),\n        (0.0, 1.0, \"float64\"),\n        (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n        (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n        (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n    ],\n)\ndef test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n    # GH 30337\n    interval = Interval(left, right, closed)\n    result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n    expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n    assert result_dtype == expected_dtype\n    assert result_value == interval",
        "@pytest.mark.parametrize(\n    \"left, right, subtype\",\n    [\n        (0, 1, \"int64\"),\n        (0.0, 1.0, \"float64\"),\n        (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n        (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n        (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n    ],\n)\ndef test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n    # GH 30337\n    interval = Interval(left, right, closed)\n    result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n    expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n    assert result_dtype == expected_dtype\n    assert result_value == interval",
        "@pytest.mark.parametrize(\n    \"left, right, subtype\",\n    [\n        (0, 1, \"int64\"),\n        (0.0, 1.0, \"float64\"),\n        (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n        (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n        (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n    ],\n)\ndef test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n    # GH 30337\n    interval = Interval(left, right, closed)\n    result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n    expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n    assert result_dtype == expected_dtype\n    assert result_value == interval",
        "@pytest.mark.parametrize(\n    \"left, right, subtype\",\n    [\n        (0, 1, \"int64\"),\n        (0.0, 1.0, \"float64\"),\n        (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n        (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n        (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n    ],\n)\ndef test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n    # GH 30337\n    interval = Interval(left, right, closed)\n    result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n    expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n    assert result_dtype == expected_dtype\n    assert result_value == interval",
        "@pytest.mark.parametrize(\n    \"left, right, subtype\",\n    [\n        (0, 1, \"int64\"),\n        (0.0, 1.0, \"float64\"),\n        (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n        (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n        (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n    ],\n)\ndef test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n    # GH 30337\n    interval = Interval(left, right, closed)\n    result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n    expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n    assert result_dtype == expected_dtype\n    assert result_value == interval",
        "@pytest.mark.parametrize(\n    \"left, right, subtype\",\n    [\n        (0, 1, \"int64\"),\n        (0.0, 1.0, \"float64\"),\n        (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n        (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n        (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n    ],\n)\ndef test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n    # GH 30337\n    interval = Interval(left, right, closed)\n    result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n    expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n    assert result_dtype == expected_dtype\n    assert result_value == interval",
        "@pytest.mark.parametrize(\n    \"left, right, subtype\",\n    [\n        (0, 1, \"int64\"),\n        (0.0, 1.0, \"float64\"),\n        (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n        (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n        (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n    ],\n)\ndef test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n    # GH 30337\n    interval = Interval(left, right, closed)\n    result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n    expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n    assert result_dtype == expected_dtype\n    assert result_value == interval",
        "@pytest.mark.parametrize(\n    \"left, right, subtype\",\n    [\n        (0, 1, \"int64\"),\n        (0.0, 1.0, \"float64\"),\n        (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n        (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n        (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n    ],\n)\ndef test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n    # GH 30337\n    interval = Interval(left, right, closed)\n    result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n    expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n    assert result_dtype == expected_dtype\n    assert result_value == interval",
        "@pytest.mark.parametrize(\n    \"left, right, subtype\",\n    [\n        (0, 1, \"int64\"),\n        (0.0, 1.0, \"float64\"),\n        (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n        (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n        (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n    ],\n)\ndef test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n    # GH 30337\n    interval = Interval(left, right, closed)\n    result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n    expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n    assert result_dtype == expected_dtype\n    assert result_value == interval",
        "@pytest.mark.parametrize(\n    \"left, right, subtype\",\n    [\n        (0, 1, \"int64\"),\n        (0.0, 1.0, \"float64\"),\n        (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n        (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n        (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n    ],\n)\ndef test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n    # GH 30337\n    interval = Interval(left, right, closed)\n    result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n    expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n    assert result_dtype == expected_dtype\n    assert result_value == interval",
        "@pytest.mark.parametrize(\n    \"left, right, subtype\",\n    [\n        (0, 1, \"int64\"),\n        (0.0, 1.0, \"float64\"),\n        (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n        (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n        (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n    ],\n)\ndef test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n    # GH 30337\n    interval = Interval(left, right, closed)\n    result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n    expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n    assert result_dtype == expected_dtype\n    assert result_value == interval",
        "@pytest.mark.parametrize(\n    \"left, right, subtype\",\n    [\n        (0, 1, \"int64\"),\n        (0.0, 1.0, \"float64\"),\n        (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n        (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n        (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n    ],\n)\ndef test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n    # GH 30337\n    interval = Interval(left, right, closed)\n    result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n    expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n    assert result_dtype == expected_dtype\n    assert result_value == interval",
        "@pytest.mark.parametrize(\n    \"left, right, subtype\",\n    [\n        (0, 1, \"int64\"),\n        (0.0, 1.0, \"float64\"),\n        (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n        (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n        (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n    ],\n)\ndef test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n    # GH 30337\n    interval = Interval(left, right, closed)\n    result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n    expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n    assert result_dtype == expected_dtype\n    assert result_value == interval",
        "@pytest.mark.parametrize(\n    \"left, right, subtype\",\n    [\n        (0, 1, \"int64\"),\n        (0.0, 1.0, \"float64\"),\n        (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n        (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n        (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n    ],\n)\ndef test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n    # GH 30337\n    interval = Interval(left, right, closed)\n    result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n    expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n    assert result_dtype == expected_dtype\n    assert result_value == interval"
    ],
    "1.5.2": [
        "pandas/tests/dtypes/cast/test_infer_dtype.py",
        "pandas/tests/dtypes/cast/test_infer_dtype.py",
        "pandas/tests/dtypes/cast/test_infer_dtype.py",
        "pandas/tests/dtypes/cast/test_infer_dtype.py",
        "pandas/tests/dtypes/cast/test_infer_dtype.py",
        "pandas/tests/dtypes/cast/test_infer_dtype.py",
        "pandas/tests/dtypes/cast/test_infer_dtype.py",
        "pandas/tests/dtypes/cast/test_infer_dtype.py",
        "pandas/tests/dtypes/cast/test_infer_dtype.py",
        "pandas/tests/dtypes/cast/test_infer_dtype.py",
        "pandas/tests/dtypes/cast/test_infer_dtype.py",
        "pandas/tests/dtypes/cast/test_infer_dtype.py",
        "pandas/tests/dtypes/cast/test_infer_dtype.py",
        "pandas/tests/dtypes/cast/test_infer_dtype.py",
        "pandas/tests/dtypes/cast/test_infer_dtype.py",
        "pandas/tests/dtypes/cast/test_infer_dtype.py",
        "pandas/tests/dtypes/cast/test_infer_dtype.py",
        "pandas/tests/dtypes/cast/test_infer_dtype.py",
        "pandas/tests/dtypes/cast/test_infer_dtype.py",
        "pandas/tests/dtypes/cast/test_infer_dtype.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: assert <class 'numpy.object_'> == 'interval[int64]'\nE         +<class 'numpy.object_'>\nE         -'interval[int64]'"
        ],
        [
            "E       AssertionError: assert <class 'numpy.object_'> == 'interval[float64]'\nE         +<class 'numpy.object_'>\nE         -'interval[float64]'"
        ],
        [
            "E       AssertionError: assert <class 'numpy.object_'> == 'interval[datetime64[ns]]'\nE         +<class 'numpy.object_'>\nE         -'interval[datetime64[ns]]'"
        ],
        [
            "E       AssertionError: assert <class 'numpy.object_'> == 'interval[datetime64[ns, UTC]]'\nE         +<class 'numpy.object_'>\nE         -'interval[datetime64[ns, UTC]]'"
        ],
        [
            "E       AssertionError: assert <class 'numpy.object_'> == 'interval[timedelta64[ns]]'\nE         +<class 'numpy.object_'>\nE         -'interval[timedelta64[ns]]'"
        ],
        [
            "E       AssertionError: assert <class 'numpy.object_'> == 'interval[int64]'\nE         +<class 'numpy.object_'>\nE         -'interval[int64]'"
        ],
        [
            "E       AssertionError: assert <class 'numpy.object_'> == 'interval[float64]'\nE         +<class 'numpy.object_'>\nE         -'interval[float64]'"
        ],
        [
            "E       AssertionError: assert <class 'numpy.object_'> == 'interval[datetime64[ns]]'\nE         +<class 'numpy.object_'>\nE         -'interval[datetime64[ns]]'"
        ],
        [
            "E       AssertionError: assert <class 'numpy.object_'> == 'interval[datetime64[ns, UTC]]'\nE         +<class 'numpy.object_'>\nE         -'interval[datetime64[ns, UTC]]'"
        ],
        [
            "E       AssertionError: assert <class 'numpy.object_'> == 'interval[timedelta64[ns]]'\nE         +<class 'numpy.object_'>\nE         -'interval[timedelta64[ns]]'"
        ],
        [
            "E       AssertionError: assert <class 'numpy.object_'> == 'interval[int64]'\nE         +<class 'numpy.object_'>\nE         -'interval[int64]'"
        ],
        [
            "E       AssertionError: assert <class 'numpy.object_'> == 'interval[float64]'\nE         +<class 'numpy.object_'>\nE         -'interval[float64]'"
        ],
        [
            "E       AssertionError: assert <class 'numpy.object_'> == 'interval[datetime64[ns]]'\nE         +<class 'numpy.object_'>\nE         -'interval[datetime64[ns]]'"
        ],
        [
            "E       AssertionError: assert <class 'numpy.object_'> == 'interval[datetime64[ns, UTC]]'\nE         +<class 'numpy.object_'>\nE         -'interval[datetime64[ns, UTC]]'"
        ],
        [
            "E       AssertionError: assert <class 'numpy.object_'> == 'interval[timedelta64[ns]]'\nE         +<class 'numpy.object_'>\nE         -'interval[timedelta64[ns]]'"
        ],
        [
            "E       AssertionError: assert <class 'numpy.object_'> == 'interval[int64]'\nE         +<class 'numpy.object_'>\nE         -'interval[int64]'"
        ],
        [
            "E       AssertionError: assert <class 'numpy.object_'> == 'interval[float64]'\nE         +<class 'numpy.object_'>\nE         -'interval[float64]'"
        ],
        [
            "E       AssertionError: assert <class 'numpy.object_'> == 'interval[datetime64[ns]]'\nE         +<class 'numpy.object_'>\nE         -'interval[datetime64[ns]]'"
        ],
        [
            "E       AssertionError: assert <class 'numpy.object_'> == 'interval[datetime64[ns, UTC]]'\nE         +<class 'numpy.object_'>\nE         -'interval[datetime64[ns, UTC]]'"
        ],
        [
            "E       AssertionError: assert <class 'numpy.object_'> == 'interval[timedelta64[ns]]'\nE         +<class 'numpy.object_'>\nE         -'interval[timedelta64[ns]]'"
        ]
    ],
    "2.1.2": [
        [
            "left = 0, right = 1, subtype = 'int64', closed = 'left', pandas_dtype = True\n\n    @pytest.mark.parametrize(\n        \"left, right, subtype\",\n        [\n            (0, 1, \"int64\"),\n            (0.0, 1.0, \"float64\"),\n            (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n            (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n            (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n        ],\n    )\n    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n        # GH 30337\n        interval = Interval(left, right, closed)\n        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n        expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n>       assert result_dtype == expected_dtype",
            "\npandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError"
        ],
        [
            "left = 0.0, right = 1.0, subtype = 'float64', closed = 'left'\npandas_dtype = True\n\n    @pytest.mark.parametrize(\n        \"left, right, subtype\",\n        [\n            (0, 1, \"int64\"),\n            (0.0, 1.0, \"float64\"),\n            (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n            (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n            (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n        ],\n    )\n    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n        # GH 30337\n        interval = Interval(left, right, closed)\n        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n        expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n>       assert result_dtype == expected_dtype",
            "\npandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError"
        ],
        [
            "left = Timestamp('1970-01-01 00:00:00')\nright = Timestamp('1970-01-01 00:00:00.000000001'), subtype = 'datetime64[ns]'\nclosed = 'left', pandas_dtype = True\n\n    @pytest.mark.parametrize(\n        \"left, right, subtype\",\n        [\n            (0, 1, \"int64\"),\n            (0.0, 1.0, \"float64\"),\n            (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n            (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n            (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n        ],\n    )\n    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n        # GH 30337\n        interval = Interval(left, right, closed)\n        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n        expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n>       assert result_dtype == expected_dtype",
            "\npandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError"
        ],
        [
            "left = Timestamp('1970-01-01 00:00:00+0000', tz='UTC')\nright = Timestamp('1970-01-01 00:00:00.000000001+0000', tz='UTC')\nsubtype = 'datetime64[ns, UTC]', closed = 'left', pandas_dtype = True\n\n    @pytest.mark.parametrize(\n        \"left, right, subtype\",\n        [\n            (0, 1, \"int64\"),\n            (0.0, 1.0, \"float64\"),\n            (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n            (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n            (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n        ],\n    )\n    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n        # GH 30337\n        interval = Interval(left, right, closed)\n        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n        expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n>       assert result_dtype == expected_dtype",
            "\npandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError"
        ],
        [
            "left = Timedelta('0 days 00:00:00'), right = Timedelta('0 days 00:00:00.000000')\nsubtype = 'timedelta64[ns]', closed = 'left', pandas_dtype = True\n\n    @pytest.mark.parametrize(\n        \"left, right, subtype\",\n        [\n            (0, 1, \"int64\"),\n            (0.0, 1.0, \"float64\"),\n            (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n            (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n            (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n        ],\n    )\n    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n        # GH 30337\n        interval = Interval(left, right, closed)\n        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n        expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n>       assert result_dtype == expected_dtype",
            "\npandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError"
        ],
        [
            "left = 0, right = 1, subtype = 'int64', closed = 'right', pandas_dtype = True\n\n    @pytest.mark.parametrize(\n        \"left, right, subtype\",\n        [\n            (0, 1, \"int64\"),\n            (0.0, 1.0, \"float64\"),\n            (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n            (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n            (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n        ],\n    )\n    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n        # GH 30337\n        interval = Interval(left, right, closed)\n        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n        expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n>       assert result_dtype == expected_dtype",
            "\npandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError"
        ],
        [
            "left = 0.0, right = 1.0, subtype = 'float64', closed = 'right'\npandas_dtype = True\n\n    @pytest.mark.parametrize(\n        \"left, right, subtype\",\n        [\n            (0, 1, \"int64\"),\n            (0.0, 1.0, \"float64\"),\n            (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n            (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n            (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n        ],\n    )\n    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n        # GH 30337\n        interval = Interval(left, right, closed)\n        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n        expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n>       assert result_dtype == expected_dtype",
            "\npandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError"
        ],
        [
            "left = Timestamp('1970-01-01 00:00:00')\nright = Timestamp('1970-01-01 00:00:00.000000001'), subtype = 'datetime64[ns]'\nclosed = 'right', pandas_dtype = True\n\n    @pytest.mark.parametrize(\n        \"left, right, subtype\",\n        [\n            (0, 1, \"int64\"),\n            (0.0, 1.0, \"float64\"),\n            (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n            (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n            (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n        ],\n    )\n    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n        # GH 30337\n        interval = Interval(left, right, closed)\n        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n        expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n>       assert result_dtype == expected_dtype",
            "\npandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError"
        ],
        [
            "left = Timestamp('1970-01-01 00:00:00+0000', tz='UTC')\nright = Timestamp('1970-01-01 00:00:00.000000001+0000', tz='UTC')\nsubtype = 'datetime64[ns, UTC]', closed = 'right', pandas_dtype = True\n\n    @pytest.mark.parametrize(\n        \"left, right, subtype\",\n        [\n            (0, 1, \"int64\"),\n            (0.0, 1.0, \"float64\"),\n            (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n            (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n            (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n        ],\n    )\n    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n        # GH 30337\n        interval = Interval(left, right, closed)\n        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n        expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n>       assert result_dtype == expected_dtype",
            "\npandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError"
        ],
        [
            "left = Timedelta('0 days 00:00:00'), right = Timedelta('0 days 00:00:00.000000')\nsubtype = 'timedelta64[ns]', closed = 'right', pandas_dtype = True\n\n    @pytest.mark.parametrize(\n        \"left, right, subtype\",\n        [\n            (0, 1, \"int64\"),\n            (0.0, 1.0, \"float64\"),\n            (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n            (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n            (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n        ],\n    )\n    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n        # GH 30337\n        interval = Interval(left, right, closed)\n        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n        expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n>       assert result_dtype == expected_dtype",
            "\npandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError"
        ],
        [
            "left = 0, right = 1, subtype = 'int64', closed = 'both', pandas_dtype = True\n\n    @pytest.mark.parametrize(\n        \"left, right, subtype\",\n        [\n            (0, 1, \"int64\"),\n            (0.0, 1.0, \"float64\"),\n            (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n            (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n            (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n        ],\n    )\n    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n        # GH 30337\n        interval = Interval(left, right, closed)\n        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n        expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n>       assert result_dtype == expected_dtype",
            "\npandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError"
        ],
        [
            "left = 0.0, right = 1.0, subtype = 'float64', closed = 'both'\npandas_dtype = True\n\n    @pytest.mark.parametrize(\n        \"left, right, subtype\",\n        [\n            (0, 1, \"int64\"),\n            (0.0, 1.0, \"float64\"),\n            (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n            (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n            (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n        ],\n    )\n    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n        # GH 30337\n        interval = Interval(left, right, closed)\n        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n        expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n>       assert result_dtype == expected_dtype",
            "\npandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError"
        ],
        [
            "left = Timestamp('1970-01-01 00:00:00')\nright = Timestamp('1970-01-01 00:00:00.000000001'), subtype = 'datetime64[ns]'\nclosed = 'both', pandas_dtype = True\n\n    @pytest.mark.parametrize(\n        \"left, right, subtype\",\n        [\n            (0, 1, \"int64\"),\n            (0.0, 1.0, \"float64\"),\n            (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n            (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n            (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n        ],\n    )\n    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n        # GH 30337\n        interval = Interval(left, right, closed)\n        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n        expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n>       assert result_dtype == expected_dtype",
            "\npandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError"
        ],
        [
            "left = Timestamp('1970-01-01 00:00:00+0000', tz='UTC')\nright = Timestamp('1970-01-01 00:00:00.000000001+0000', tz='UTC')\nsubtype = 'datetime64[ns, UTC]', closed = 'both', pandas_dtype = True\n\n    @pytest.mark.parametrize(\n        \"left, right, subtype\",\n        [\n            (0, 1, \"int64\"),\n            (0.0, 1.0, \"float64\"),\n            (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n            (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n            (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n        ],\n    )\n    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n        # GH 30337\n        interval = Interval(left, right, closed)\n        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n        expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n>       assert result_dtype == expected_dtype",
            "\npandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError"
        ],
        [
            "left = Timedelta('0 days 00:00:00'), right = Timedelta('0 days 00:00:00.000000')\nsubtype = 'timedelta64[ns]', closed = 'both', pandas_dtype = True\n\n    @pytest.mark.parametrize(\n        \"left, right, subtype\",\n        [\n            (0, 1, \"int64\"),\n            (0.0, 1.0, \"float64\"),\n            (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n            (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n            (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n        ],\n    )\n    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n        # GH 30337\n        interval = Interval(left, right, closed)\n        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n        expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n>       assert result_dtype == expected_dtype",
            "\npandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError"
        ],
        [
            "left = 0, right = 1, subtype = 'int64', closed = 'neither', pandas_dtype = True\n\n    @pytest.mark.parametrize(\n        \"left, right, subtype\",\n        [\n            (0, 1, \"int64\"),\n            (0.0, 1.0, \"float64\"),\n            (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n            (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n            (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n        ],\n    )\n    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n        # GH 30337\n        interval = Interval(left, right, closed)\n        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n        expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n>       assert result_dtype == expected_dtype",
            "\npandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError"
        ],
        [
            "left = 0.0, right = 1.0, subtype = 'float64', closed = 'neither'\npandas_dtype = True\n\n    @pytest.mark.parametrize(\n        \"left, right, subtype\",\n        [\n            (0, 1, \"int64\"),\n            (0.0, 1.0, \"float64\"),\n            (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n            (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n            (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n        ],\n    )\n    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n        # GH 30337\n        interval = Interval(left, right, closed)\n        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n        expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n>       assert result_dtype == expected_dtype",
            "\npandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError"
        ],
        [
            "left = Timestamp('1970-01-01 00:00:00')\nright = Timestamp('1970-01-01 00:00:00.000000001'), subtype = 'datetime64[ns]'\nclosed = 'neither', pandas_dtype = True\n\n    @pytest.mark.parametrize(\n        \"left, right, subtype\",\n        [\n            (0, 1, \"int64\"),\n            (0.0, 1.0, \"float64\"),\n            (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n            (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n            (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n        ],\n    )\n    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n        # GH 30337\n        interval = Interval(left, right, closed)\n        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n        expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n>       assert result_dtype == expected_dtype",
            "\npandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError"
        ],
        [
            "left = Timestamp('1970-01-01 00:00:00+0000', tz='UTC')\nright = Timestamp('1970-01-01 00:00:00.000000001+0000', tz='UTC')\nsubtype = 'datetime64[ns, UTC]', closed = 'neither', pandas_dtype = True\n\n    @pytest.mark.parametrize(\n        \"left, right, subtype\",\n        [\n            (0, 1, \"int64\"),\n            (0.0, 1.0, \"float64\"),\n            (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n            (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n            (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n        ],\n    )\n    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n        # GH 30337\n        interval = Interval(left, right, closed)\n        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n        expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n>       assert result_dtype == expected_dtype",
            "\npandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError"
        ],
        [
            "left = Timedelta('0 days 00:00:00'), right = Timedelta('0 days 00:00:00.000000')\nsubtype = 'timedelta64[ns]', closed = 'neither', pandas_dtype = True\n\n    @pytest.mark.parametrize(\n        \"left, right, subtype\",\n        [\n            (0, 1, \"int64\"),\n            (0.0, 1.0, \"float64\"),\n            (Timestamp(0), Timestamp(1), \"datetime64[ns]\"),\n            (Timestamp(0, tz=\"UTC\"), Timestamp(1, tz=\"UTC\"), \"datetime64[ns, UTC]\"),\n            (Timedelta(0), Timedelta(1), \"timedelta64[ns]\"),\n        ],\n    )\n    def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):\n        # GH 30337\n        interval = Interval(left, right, closed)\n        result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)\n        expected_dtype = f\"interval[{subtype}]\" if pandas_dtype else np.object_\n>       assert result_dtype == expected_dtype",
            "\npandas/tests/dtypes/cast/test_infer_dtype.py:133: AssertionError"
        ]
    ],
    "2.2.1": [
        [
            {
                "val": {
                    "value": "Interval(0, 1, closed='left')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(0.0, 1.0, closed='left')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval('1970-01-01', '1970-01-01 00:00:00.000000001', closed='left')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(Timedelta('0 days 00:00:00'), Timedelta('0 days 00:00:00.000000'), closed='left')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(0, 1, closed='left')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(0.0, 1.0, closed='left')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval('1970-01-01', '1970-01-01 00:00:00.000000001', closed='left')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(Timedelta('0 days 00:00:00'), Timedelta('0 days 00:00:00.000000'), closed='left')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(0, 1, closed='right')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(0.0, 1.0, closed='right')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval('1970-01-01', '1970-01-01 00:00:00.000000001', closed='right')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(Timedelta('0 days 00:00:00'), Timedelta('0 days 00:00:00.000000'), closed='right')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(0, 1, closed='right')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(0.0, 1.0, closed='right')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval('1970-01-01', '1970-01-01 00:00:00.000000001', closed='right')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(Timedelta('0 days 00:00:00'), Timedelta('0 days 00:00:00.000000'), closed='right')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(0, 1, closed='both')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(0.0, 1.0, closed='both')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval('1970-01-01', '1970-01-01 00:00:00.000000001', closed='both')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(Timedelta('0 days 00:00:00'), Timedelta('0 days 00:00:00.000000'), closed='both')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(0, 1, closed='both')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(0.0, 1.0, closed='both')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval('1970-01-01', '1970-01-01 00:00:00.000000001', closed='both')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(Timedelta('0 days 00:00:00'), Timedelta('0 days 00:00:00.000000'), closed='both')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(0, 1, closed='neither')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(0.0, 1.0, closed='neither')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval('1970-01-01', '1970-01-01 00:00:00.000000001', closed='neither')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(Timedelta('0 days 00:00:00'), Timedelta('0 days 00:00:00.000000'), closed='neither')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(0, 1, closed='neither')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(0.0, 1.0, closed='neither')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval('1970-01-01', '1970-01-01 00:00:00.000000001', closed='neither')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(Timedelta('0 days 00:00:00'), Timedelta('0 days 00:00:00.000000'), closed='neither')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ]
    ],
    "2.2.2": [
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool"
            },
            {}
        ]
    ],
    "2.3.1": [
        [
            {
                "val": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "0.0",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Timestamp('1970-01-01 00:00:00')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "val.value": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "dtype": {
                    "value": "dtype('<M8[ns]')",
                    "shape": "()",
                    "omitted": false
                },
                "val": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "val": {
                    "value": "Timestamp('1970-01-01 00:00:00+0000', tz='UTC')",
                    "shape": null,
                    "omitted": false
                },
                "val.tz": {
                    "value": "<UTC>",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "val.value": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "dtype": {
                    "value": "datetime64[ns, UTC]",
                    "shape": "()",
                    "omitted": false
                },
                "val": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "val": {
                    "value": "Timedelta('0 days 00:00:00')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "True",
                    "shape": null,
                    "omitted": false
                },
                "val.value": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                }
            },
            {
                "dtype": {
                    "value": "dtype('<m8[ns]')",
                    "shape": "()",
                    "omitted": false
                },
                "val": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                }
            }
        ],
        [
            {
                "val": {
                    "value": "Interval(0, 1, closed='left')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "val.left": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(0.0, 1.0, closed='left')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "val.left": {
                    "value": "0.0",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval('1970-01-01', '1970-01-01 00:00:00.000000001', closed='left')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "val.left": {
                    "value": "Timestamp('1970-01-01 00:00:00')",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval('1970-01-01', '1970-01-01 00:00:00.000000001', closed='left')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "val.left": {
                    "value": "Timestamp('1970-01-01 00:00:00+0000', tz='UTC')",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(Timedelta('0 days 00:00:00'), Timedelta('0 days 00:00:00.000000'), closed='left')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "val.left": {
                    "value": "Timedelta('0 days 00:00:00')",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(0, 1, closed='right')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "val.left": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(0.0, 1.0, closed='right')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "val.left": {
                    "value": "0.0",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval('1970-01-01', '1970-01-01 00:00:00.000000001', closed='right')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "val.left": {
                    "value": "Timestamp('1970-01-01 00:00:00')",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval('1970-01-01', '1970-01-01 00:00:00.000000001', closed='right')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "val.left": {
                    "value": "Timestamp('1970-01-01 00:00:00+0000', tz='UTC')",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(Timedelta('0 days 00:00:00'), Timedelta('0 days 00:00:00.000000'), closed='right')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "val.left": {
                    "value": "Timedelta('0 days 00:00:00')",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(0, 1, closed='both')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "val.left": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(0.0, 1.0, closed='both')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "val.left": {
                    "value": "0.0",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval('1970-01-01', '1970-01-01 00:00:00.000000001', closed='both')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "val.left": {
                    "value": "Timestamp('1970-01-01 00:00:00')",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval('1970-01-01', '1970-01-01 00:00:00.000000001', closed='both')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "val.left": {
                    "value": "Timestamp('1970-01-01 00:00:00+0000', tz='UTC')",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(Timedelta('0 days 00:00:00'), Timedelta('0 days 00:00:00.000000'), closed='both')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "val.left": {
                    "value": "Timedelta('0 days 00:00:00')",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(0, 1, closed='neither')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "val.left": {
                    "value": "0",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(0.0, 1.0, closed='neither')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "val.left": {
                    "value": "0.0",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval('1970-01-01', '1970-01-01 00:00:00.000000001', closed='neither')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "val.left": {
                    "value": "Timestamp('1970-01-01 00:00:00')",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval('1970-01-01', '1970-01-01 00:00:00.000000001', closed='neither')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "val.left": {
                    "value": "Timestamp('1970-01-01 00:00:00+0000', tz='UTC')",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ],
        [
            {
                "val": {
                    "value": "Interval(Timedelta('0 days 00:00:00'), Timedelta('0 days 00:00:00.000000'), closed='neither')",
                    "shape": null,
                    "omitted": false
                },
                "pandas_dtype": {
                    "value": "False",
                    "shape": null,
                    "omitted": false
                },
                "val.left": {
                    "value": "Timedelta('0 days 00:00:00')",
                    "shape": null,
                    "omitted": false
                }
            },
            {}
        ]
    ],
    "2.3.2": [
        [
            {
                "val": "int",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "float",
                "pandas_dtype": "bool"
            },
            {}
        ],
        [
            {
                "val": "Timestamp",
                "pandas_dtype": "bool",
                "val.value": "int"
            },
            {
                "dtype": "dtype",
                "val": "int"
            }
        ],
        [
            {
                "val": "Timestamp",
                "val.tz": "UTC",
                "pandas_dtype": "bool",
                "val.value": "int"
            },
            {
                "dtype": "DatetimeTZDtype",
                "val": "int"
            }
        ],
        [
            {
                "val": "Timedelta",
                "pandas_dtype": "bool",
                "val.value": "int"
            },
            {
                "dtype": "dtype",
                "val": "int"
            }
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool",
                "val.left": "int"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool",
                "val.left": "float"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool",
                "val.left": "Timestamp"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool",
                "val.left": "Timestamp"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool",
                "val.left": "Timedelta"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool",
                "val.left": "int"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool",
                "val.left": "float"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool",
                "val.left": "Timestamp"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool",
                "val.left": "Timestamp"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool",
                "val.left": "Timedelta"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool",
                "val.left": "int"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool",
                "val.left": "float"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool",
                "val.left": "Timestamp"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool",
                "val.left": "Timestamp"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool",
                "val.left": "Timedelta"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool",
                "val.left": "int"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool",
                "val.left": "float"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool",
                "val.left": "Timestamp"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool",
                "val.left": "Timestamp"
            },
            {}
        ],
        [
            {
                "val": "Interval",
                "pandas_dtype": "bool",
                "val.left": "Timedelta"
            },
            {}
        ]
    ],
    "3.1.1": [
        "BUG: infer_dtype_from_scalar with pandas_dtype=True doesn't infer IntervalDtype\n"
    ],
    "3.1.2": [
        "Code Sample, a copy-pastable example if possible\nIn [1]: import pandas as pd; pd.__version__\nOut[1]: '0.26.0.dev0+1348.g18bd98fde'\n\nIn [2]: from pandas.core.dtypes.cast import infer_dtype_from_scalar\n\nIn [3]: # this is fine \n   ...: infer_dtype_from_scalar(pd.Interval(0, 1), pandas_dtype=False)\nOut[3]: (numpy.object_, Interval(0, 1, closed='right'))\n\nIn [4]: # this is should infer interval[int64] as dtype \n   ...: infer_dtype_from_scalar(pd.Interval(0, 1), pandas_dtype=True)\nOut[4]: (numpy.object_, Interval(0, 1, closed='right'))\nProblem description\ninfer_dtype_from_scalar with pandas_dtype=True infers the dtype for Interval objects as np.object_ instead of as an IntervalDtype.\n\nExpected Output\nI'd expect Out[4] to have the dtype as IntervalDtype(subtype=np.int64).\n"
    ]
}